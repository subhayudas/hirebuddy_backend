var Bl = Object.defineProperty;
var Po = s => {
    throw TypeError(s)
}
;
var Ul = (s, e, i) => e in s ? Bl(s, e, {
    enumerable: !0,
    configurable: !0,
    writable: !0,
    value: i
}) : s[e] = i;
var tr = (s, e, i) => Ul(s, typeof e != "symbol" ? e + "" : e, i)
  , zn = (s, e, i) => e.has(s) || Po("Cannot " + i);
var mt = (s, e, i) => (zn(s, e, "read from private field"),
i ? i.call(s) : e.get(s))
  , ps = (s, e, i) => e.has(s) ? Po("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(s) : e.set(s, i)
  , us = (s, e, i, o) => (zn(s, e, "write to private field"),
o ? o.call(s, i) : e.set(s, i),
i)
  , cs = (s, e, i) => (zn(s, e, "access private method"),
i);
var kr = (s, e, i, o) => ({
    set _(a) {
        us(s, e, a, i)
    },
    get _() {
        return mt(s, e, o)
    }
});
function _mergeNamespaces(s, e) {
    for (var i = 0; i < e.length; i++) {
        const o = e[i];
        if (typeof o != "string" && !Array.isArray(o)) {
            for (const a in o)
                if (a !== "default" && !(a in s)) {
                    const c = Object.getOwnPropertyDescriptor(o, a);
                    c && Object.defineProperty(s, a, c.get ? c : {
                        enumerable: !0,
                        get: () => o[a]
                    })
                }
        }
    }
    return Object.freeze(Object.defineProperty(s, Symbol.toStringTag, {
        value: "Module"
    }))
}
(function() {
    const e = document.createElement("link").relList;
    if (e && e.supports && e.supports("modulepreload"))
        return;
    for (const a of document.querySelectorAll('link[rel="modulepreload"]'))
        o(a);
    new MutationObserver(a => {
        for (const c of a)
            if (c.type === "childList")
                for (const d of c.addedNodes)
                    d.tagName === "LINK" && d.rel === "modulepreload" && o(d)
    }
    ).observe(document, {
        childList: !0,
        subtree: !0
    });
    function i(a) {
        const c = {};
        return a.integrity && (c.integrity = a.integrity),
        a.referrerPolicy && (c.referrerPolicy = a.referrerPolicy),
        a.crossOrigin === "use-credentials" ? c.credentials = "include" : a.crossOrigin === "anonymous" ? c.credentials = "omit" : c.credentials = "same-origin",
        c
    }
    function o(a) {
        if (a.ep)
            return;
        a.ep = !0;
        const c = i(a);
        fetch(a.href, c)
    }
}
)();
var commonjsGlobal = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function getDefaultExportFromCjs(s) {
    return s && s.__esModule && Object.prototype.hasOwnProperty.call(s, "default") ? s.default : s
}
function getAugmentedNamespace(s) {
    if (s.__esModule)
        return s;
    var e = s.default;
    if (typeof e == "function") {
        var i = function o() {
            return this instanceof o ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments)
        };
        i.prototype = e.prototype
    } else
        i = {};
    return Object.defineProperty(i, "__esModule", {
        value: !0
    }),
    Object.keys(s).forEach(function(o) {
        var a = Object.getOwnPropertyDescriptor(s, o);
        Object.defineProperty(i, o, a.get ? a : {
            enumerable: !0,
            get: function() {
                return s[o]
            }
        })
    }),
    i
}
var jsxRuntime = {
    exports: {}
}
  , reactJsxRuntime_production_min = {}
  , react = {
    exports: {}
}
  , react_production_min = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var l$1 = Symbol.for("react.element")
  , n$1 = Symbol.for("react.portal")
  , p$2 = Symbol.for("react.fragment")
  , q$1 = Symbol.for("react.strict_mode")
  , r$1 = Symbol.for("react.profiler")
  , t = Symbol.for("react.provider")
  , u = Symbol.for("react.context")
  , v$2 = Symbol.for("react.forward_ref")
  , w = Symbol.for("react.suspense")
  , x = Symbol.for("react.memo")
  , y = Symbol.for("react.lazy")
  , z$1 = Symbol.iterator;
function A$1(s) {
    return s === null || typeof s != "object" ? null : (s = z$1 && s[z$1] || s["@@iterator"],
    typeof s == "function" ? s : null)
}
var B$1 = {
    isMounted: function() {
        return !1
    },
    enqueueForceUpdate: function() {},
    enqueueReplaceState: function() {},
    enqueueSetState: function() {}
}
  , C$1 = Object.assign
  , D$2 = {};
function E$2(s, e, i) {
    this.props = s,
    this.context = e,
    this.refs = D$2,
    this.updater = i || B$1
}
E$2.prototype.isReactComponent = {};
E$2.prototype.setState = function(s, e) {
    if (typeof s != "object" && typeof s != "function" && s != null)
        throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, s, e, "setState")
}
;
E$2.prototype.forceUpdate = function(s) {
    this.updater.enqueueForceUpdate(this, s, "forceUpdate")
}
;
function F() {}
F.prototype = E$2.prototype;
function G$1(s, e, i) {
    this.props = s,
    this.context = e,
    this.refs = D$2,
    this.updater = i || B$1
}
var H$1 = G$1.prototype = new F;
H$1.constructor = G$1;
C$1(H$1, E$2.prototype);
H$1.isPureReactComponent = !0;
var I$1 = Array.isArray
  , J = Object.prototype.hasOwnProperty
  , K$1 = {
    current: null
}
  , L$2 = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
};
function M$1(s, e, i) {
    var o, a = {}, c = null, d = null;
    if (e != null)
        for (o in e.ref !== void 0 && (d = e.ref),
        e.key !== void 0 && (c = "" + e.key),
        e)
            J.call(e, o) && !L$2.hasOwnProperty(o) && (a[o] = e[o]);
    var h = arguments.length - 2;
    if (h === 1)
        a.children = i;
    else if (1 < h) {
        for (var g = Array(h), b = 0; b < h; b++)
            g[b] = arguments[b + 2];
        a.children = g
    }
    if (s && s.defaultProps)
        for (o in h = s.defaultProps,
        h)
            a[o] === void 0 && (a[o] = h[o]);
    return {
        $$typeof: l$1,
        type: s,
        key: c,
        ref: d,
        props: a,
        _owner: K$1.current
    }
}
function N$1(s, e) {
    return {
        $$typeof: l$1,
        type: s.type,
        key: e,
        ref: s.ref,
        props: s.props,
        _owner: s._owner
    }
}
function O$1(s) {
    return typeof s == "object" && s !== null && s.$$typeof === l$1
}
function escape$1(s) {
    var e = {
        "=": "=0",
        ":": "=2"
    };
    return "$" + s.replace(/[=:]/g, function(i) {
        return e[i]
    })
}
var P$2 = /\/+/g;
function Q$1(s, e) {
    return typeof s == "object" && s !== null && s.key != null ? escape$1("" + s.key) : e.toString(36)
}
function R$1(s, e, i, o, a) {
    var c = typeof s;
    (c === "undefined" || c === "boolean") && (s = null);
    var d = !1;
    if (s === null)
        d = !0;
    else
        switch (c) {
        case "string":
        case "number":
            d = !0;
            break;
        case "object":
            switch (s.$$typeof) {
            case l$1:
            case n$1:
                d = !0
            }
        }
    if (d)
        return d = s,
        a = a(d),
        s = o === "" ? "." + Q$1(d, 0) : o,
        I$1(a) ? (i = "",
        s != null && (i = s.replace(P$2, "$&/") + "/"),
        R$1(a, e, i, "", function(b) {
            return b
        })) : a != null && (O$1(a) && (a = N$1(a, i + (!a.key || d && d.key === a.key ? "" : ("" + a.key).replace(P$2, "$&/") + "/") + s)),
        e.push(a)),
        1;
    if (d = 0,
    o = o === "" ? "." : o + ":",
    I$1(s))
        for (var h = 0; h < s.length; h++) {
            c = s[h];
            var g = o + Q$1(c, h);
            d += R$1(c, e, i, g, a)
        }
    else if (g = A$1(s),
    typeof g == "function")
        for (s = g.call(s),
        h = 0; !(c = s.next()).done; )
            c = c.value,
            g = o + Q$1(c, h++),
            d += R$1(c, e, i, g, a);
    else if (c === "object")
        throw e = String(s),
        Error("Objects are not valid as a React child (found: " + (e === "[object Object]" ? "object with keys {" + Object.keys(s).join(", ") + "}" : e) + "). If you meant to render a collection of children, use an array instead.");
    return d
}
function S$1(s, e, i) {
    if (s == null)
        return s;
    var o = []
      , a = 0;
    return R$1(s, o, "", "", function(c) {
        return e.call(i, c, a++)
    }),
    o
}
function T$1(s) {
    if (s._status === -1) {
        var e = s._result;
        e = e(),
        e.then(function(i) {
            (s._status === 0 || s._status === -1) && (s._status = 1,
            s._result = i)
        }, function(i) {
            (s._status === 0 || s._status === -1) && (s._status = 2,
            s._result = i)
        }),
        s._status === -1 && (s._status = 0,
        s._result = e)
    }
    if (s._status === 1)
        return s._result.default;
    throw s._result
}
var U$2 = {
    current: null
}
  , V$1 = {
    transition: null
}
  , W$1 = {
    ReactCurrentDispatcher: U$2,
    ReactCurrentBatchConfig: V$1,
    ReactCurrentOwner: K$1
};
function X$2() {
    throw Error("act(...) is not supported in production builds of React.")
}
react_production_min.Children = {
    map: S$1,
    forEach: function(s, e, i) {
        S$1(s, function() {
            e.apply(this, arguments)
        }, i)
    },
    count: function(s) {
        var e = 0;
        return S$1(s, function() {
            e++
        }),
        e
    },
    toArray: function(s) {
        return S$1(s, function(e) {
            return e
        }) || []
    },
    only: function(s) {
        if (!O$1(s))
            throw Error("React.Children.only expected to receive a single React element child.");
        return s
    }
};
react_production_min.Component = E$2;
react_production_min.Fragment = p$2;
react_production_min.Profiler = r$1;
react_production_min.PureComponent = G$1;
react_production_min.StrictMode = q$1;
react_production_min.Suspense = w;
react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$1;
react_production_min.act = X$2;
react_production_min.cloneElement = function(s, e, i) {
    if (s == null)
        throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + s + ".");
    var o = C$1({}, s.props)
      , a = s.key
      , c = s.ref
      , d = s._owner;
    if (e != null) {
        if (e.ref !== void 0 && (c = e.ref,
        d = K$1.current),
        e.key !== void 0 && (a = "" + e.key),
        s.type && s.type.defaultProps)
            var h = s.type.defaultProps;
        for (g in e)
            J.call(e, g) && !L$2.hasOwnProperty(g) && (o[g] = e[g] === void 0 && h !== void 0 ? h[g] : e[g])
    }
    var g = arguments.length - 2;
    if (g === 1)
        o.children = i;
    else if (1 < g) {
        h = Array(g);
        for (var b = 0; b < g; b++)
            h[b] = arguments[b + 2];
        o.children = h
    }
    return {
        $$typeof: l$1,
        type: s.type,
        key: a,
        ref: c,
        props: o,
        _owner: d
    }
}
;
react_production_min.createContext = function(s) {
    return s = {
        $$typeof: u,
        _currentValue: s,
        _currentValue2: s,
        _threadCount: 0,
        Provider: null,
        Consumer: null,
        _defaultValue: null,
        _globalName: null
    },
    s.Provider = {
        $$typeof: t,
        _context: s
    },
    s.Consumer = s
}
;
react_production_min.createElement = M$1;
react_production_min.createFactory = function(s) {
    var e = M$1.bind(null, s);
    return e.type = s,
    e
}
;
react_production_min.createRef = function() {
    return {
        current: null
    }
}
;
react_production_min.forwardRef = function(s) {
    return {
        $$typeof: v$2,
        render: s
    }
}
;
react_production_min.isValidElement = O$1;
react_production_min.lazy = function(s) {
    return {
        $$typeof: y,
        _payload: {
            _status: -1,
            _result: s
        },
        _init: T$1
    }
}
;
react_production_min.memo = function(s, e) {
    return {
        $$typeof: x,
        type: s,
        compare: e === void 0 ? null : e
    }
}
;
react_production_min.startTransition = function(s) {
    var e = V$1.transition;
    V$1.transition = {};
    try {
        s()
    } finally {
        V$1.transition = e
    }
}
;
react_production_min.unstable_act = X$2;
react_production_min.useCallback = function(s, e) {
    return U$2.current.useCallback(s, e)
}
;
react_production_min.useContext = function(s) {
    return U$2.current.useContext(s)
}
;
react_production_min.useDebugValue = function() {}
;
react_production_min.useDeferredValue = function(s) {
    return U$2.current.useDeferredValue(s)
}
;
react_production_min.useEffect = function(s, e) {
    return U$2.current.useEffect(s, e)
}
;
react_production_min.useId = function() {
    return U$2.current.useId()
}
;
react_production_min.useImperativeHandle = function(s, e, i) {
    return U$2.current.useImperativeHandle(s, e, i)
}
;
react_production_min.useInsertionEffect = function(s, e) {
    return U$2.current.useInsertionEffect(s, e)
}
;
react_production_min.useLayoutEffect = function(s, e) {
    return U$2.current.useLayoutEffect(s, e)
}
;
react_production_min.useMemo = function(s, e) {
    return U$2.current.useMemo(s, e)
}
;
react_production_min.useReducer = function(s, e, i) {
    return U$2.current.useReducer(s, e, i)
}
;
react_production_min.useRef = function(s) {
    return U$2.current.useRef(s)
}
;
react_production_min.useState = function(s) {
    return U$2.current.useState(s)
}
;
react_production_min.useSyncExternalStore = function(s, e, i) {
    return U$2.current.useSyncExternalStore(s, e, i)
}
;
react_production_min.useTransition = function() {
    return U$2.current.useTransition()
}
;
react_production_min.version = "18.3.1";
react.exports = react_production_min;
var reactExports = react.exports;
const React = getDefaultExportFromCjs(reactExports)
  , React$1 = _mergeNamespaces({
    __proto__: null,
    default: React
}, [reactExports]);
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f = reactExports
  , k = Symbol.for("react.element")
  , l = Symbol.for("react.fragment")
  , m$1 = Object.prototype.hasOwnProperty
  , n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner
  , p$1 = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
};
function q(s, e, i) {
    var o, a = {}, c = null, d = null;
    i !== void 0 && (c = "" + i),
    e.key !== void 0 && (c = "" + e.key),
    e.ref !== void 0 && (d = e.ref);
    for (o in e)
        m$1.call(e, o) && !p$1.hasOwnProperty(o) && (a[o] = e[o]);
    if (s && s.defaultProps)
        for (o in e = s.defaultProps,
        e)
            a[o] === void 0 && (a[o] = e[o]);
    return {
        $$typeof: k,
        type: s,
        key: c,
        ref: d,
        props: a,
        _owner: n.current
    }
}
reactJsxRuntime_production_min.Fragment = l;
reactJsxRuntime_production_min.jsx = q;
reactJsxRuntime_production_min.jsxs = q;
jsxRuntime.exports = reactJsxRuntime_production_min;
var jsxRuntimeExports = jsxRuntime.exports
  , reactDom = {
    exports: {}
}
  , reactDom_production_min = {}
  , scheduler = {
    exports: {}
}
  , scheduler_production_min = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(s) {
    function e(vt, bt) {
        var Tt = vt.length;
        vt.push(bt);
        e: for (; 0 < Tt; ) {
            var Yt = Tt - 1 >>> 1
              , Nt = vt[Yt];
            if (0 < a(Nt, bt))
                vt[Yt] = bt,
                vt[Tt] = Nt,
                Tt = Yt;
            else
                break e
        }
    }
    function i(vt) {
        return vt.length === 0 ? null : vt[0]
    }
    function o(vt) {
        if (vt.length === 0)
            return null;
        var bt = vt[0]
          , Tt = vt.pop();
        if (Tt !== bt) {
            vt[0] = Tt;
            e: for (var Yt = 0, Nt = vt.length, jt = Nt >>> 1; Yt < jt; ) {
                var xt = 2 * (Yt + 1) - 1
                  , Et = vt[xt]
                  , Pt = xt + 1
                  , St = vt[Pt];
                if (0 > a(Et, Tt))
                    Pt < Nt && 0 > a(St, Et) ? (vt[Yt] = St,
                    vt[Pt] = Tt,
                    Yt = Pt) : (vt[Yt] = Et,
                    vt[xt] = Tt,
                    Yt = xt);
                else if (Pt < Nt && 0 > a(St, Tt))
                    vt[Yt] = St,
                    vt[Pt] = Tt,
                    Yt = Pt;
                else
                    break e
            }
        }
        return bt
    }
    function a(vt, bt) {
        var Tt = vt.sortIndex - bt.sortIndex;
        return Tt !== 0 ? Tt : vt.id - bt.id
    }
    if (typeof performance == "object" && typeof performance.now == "function") {
        var c = performance;
        s.unstable_now = function() {
            return c.now()
        }
    } else {
        var d = Date
          , h = d.now();
        s.unstable_now = function() {
            return d.now() - h
        }
    }
    var g = []
      , b = []
      , _ = 1
      , $ = null
      , _e = 3
      , tt = !1
      , rt = !1
      , et = !1
      , it = typeof setTimeout == "function" ? setTimeout : null
      , st = typeof clearTimeout == "function" ? clearTimeout : null
      , nt = typeof setImmediate < "u" ? setImmediate : null;
    typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function lt(vt) {
        for (var bt = i(b); bt !== null; ) {
            if (bt.callback === null)
                o(b);
            else if (bt.startTime <= vt)
                o(b),
                bt.sortIndex = bt.expirationTime,
                e(g, bt);
            else
                break;
            bt = i(b)
        }
    }
    function dt(vt) {
        if (et = !1,
        lt(vt),
        !rt)
            if (i(g) !== null)
                rt = !0,
                At(ot);
            else {
                var bt = i(b);
                bt !== null && kt(dt, bt.startTime - vt)
            }
    }
    function ot(vt, bt) {
        rt = !1,
        et && (et = !1,
        st(pt),
        pt = -1),
        tt = !0;
        var Tt = _e;
        try {
            for (lt(bt),
            $ = i(g); $ !== null && (!($.expirationTime > bt) || vt && !yt()); ) {
                var Yt = $.callback;
                if (typeof Yt == "function") {
                    $.callback = null,
                    _e = $.priorityLevel;
                    var Nt = Yt($.expirationTime <= bt);
                    bt = s.unstable_now(),
                    typeof Nt == "function" ? $.callback = Nt : $ === i(g) && o(g),
                    lt(bt)
                } else
                    o(g);
                $ = i(g)
            }
            if ($ !== null)
                var jt = !0;
            else {
                var xt = i(b);
                xt !== null && kt(dt, xt.startTime - bt),
                jt = !1
            }
            return jt
        } finally {
            $ = null,
            _e = Tt,
            tt = !1
        }
    }
    var at = !1
      , ht = null
      , pt = -1
      , gt = 5
      , wt = -1;
    function yt() {
        return !(s.unstable_now() - wt < gt)
    }
    function Rt() {
        if (ht !== null) {
            var vt = s.unstable_now();
            wt = vt;
            var bt = !0;
            try {
                bt = ht(!0, vt)
            } finally {
                bt ? Mt() : (at = !1,
                ht = null)
            }
        } else
            at = !1
    }
    var Mt;
    if (typeof nt == "function")
        Mt = function() {
            nt(Rt)
        }
        ;
    else if (typeof MessageChannel < "u") {
        var ss = new MessageChannel
          , zt = ss.port2;
        ss.port1.onmessage = Rt,
        Mt = function() {
            zt.postMessage(null)
        }
    } else
        Mt = function() {
            it(Rt, 0)
        }
        ;
    function At(vt) {
        ht = vt,
        at || (at = !0,
        Mt())
    }
    function kt(vt, bt) {
        pt = it(function() {
            vt(s.unstable_now())
        }, bt)
    }
    s.unstable_IdlePriority = 5,
    s.unstable_ImmediatePriority = 1,
    s.unstable_LowPriority = 4,
    s.unstable_NormalPriority = 3,
    s.unstable_Profiling = null,
    s.unstable_UserBlockingPriority = 2,
    s.unstable_cancelCallback = function(vt) {
        vt.callback = null
    }
    ,
    s.unstable_continueExecution = function() {
        rt || tt || (rt = !0,
        At(ot))
    }
    ,
    s.unstable_forceFrameRate = function(vt) {
        0 > vt || 125 < vt ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : gt = 0 < vt ? Math.floor(1e3 / vt) : 5
    }
    ,
    s.unstable_getCurrentPriorityLevel = function() {
        return _e
    }
    ,
    s.unstable_getFirstCallbackNode = function() {
        return i(g)
    }
    ,
    s.unstable_next = function(vt) {
        switch (_e) {
        case 1:
        case 2:
        case 3:
            var bt = 3;
            break;
        default:
            bt = _e
        }
        var Tt = _e;
        _e = bt;
        try {
            return vt()
        } finally {
            _e = Tt
        }
    }
    ,
    s.unstable_pauseExecution = function() {}
    ,
    s.unstable_requestPaint = function() {}
    ,
    s.unstable_runWithPriority = function(vt, bt) {
        switch (vt) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            break;
        default:
            vt = 3
        }
        var Tt = _e;
        _e = vt;
        try {
            return bt()
        } finally {
            _e = Tt
        }
    }
    ,
    s.unstable_scheduleCallback = function(vt, bt, Tt) {
        var Yt = s.unstable_now();
        switch (typeof Tt == "object" && Tt !== null ? (Tt = Tt.delay,
        Tt = typeof Tt == "number" && 0 < Tt ? Yt + Tt : Yt) : Tt = Yt,
        vt) {
        case 1:
            var Nt = -1;
            break;
        case 2:
            Nt = 250;
            break;
        case 5:
            Nt = 1073741823;
            break;
        case 4:
            Nt = 1e4;
            break;
        default:
            Nt = 5e3
        }
        return Nt = Tt + Nt,
        vt = {
            id: _++,
            callback: bt,
            priorityLevel: vt,
            startTime: Tt,
            expirationTime: Nt,
            sortIndex: -1
        },
        Tt > Yt ? (vt.sortIndex = Tt,
        e(b, vt),
        i(g) === null && vt === i(b) && (et ? (st(pt),
        pt = -1) : et = !0,
        kt(dt, Tt - Yt))) : (vt.sortIndex = Nt,
        e(g, vt),
        rt || tt || (rt = !0,
        At(ot))),
        vt
    }
    ,
    s.unstable_shouldYield = yt,
    s.unstable_wrapCallback = function(vt) {
        var bt = _e;
        return function() {
            var Tt = _e;
            _e = bt;
            try {
                return vt.apply(this, arguments)
            } finally {
                _e = Tt
            }
        }
    }
}
)(scheduler_production_min);
scheduler.exports = scheduler_production_min;
var schedulerExports = scheduler.exports;
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aa = reactExports
  , ca = schedulerExports;
function p(s) {
    for (var e = "https://reactjs.org/docs/error-decoder.html?invariant=" + s, i = 1; i < arguments.length; i++)
        e += "&args[]=" + encodeURIComponent(arguments[i]);
    return "Minified React error #" + s + "; visit " + e + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
}
var da = new Set
  , ea = {};
function fa(s, e) {
    ha(s, e),
    ha(s + "Capture", e)
}
function ha(s, e) {
    for (ea[s] = e,
    s = 0; s < e.length; s++)
        da.add(e[s])
}
var ia = !(typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u")
  , ja = Object.prototype.hasOwnProperty
  , ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/
  , la = {}
  , ma = {};
function oa(s) {
    return ja.call(ma, s) ? !0 : ja.call(la, s) ? !1 : ka.test(s) ? ma[s] = !0 : (la[s] = !0,
    !1)
}
function pa(s, e, i, o) {
    if (i !== null && i.type === 0)
        return !1;
    switch (typeof e) {
    case "function":
    case "symbol":
        return !0;
    case "boolean":
        return o ? !1 : i !== null ? !i.acceptsBooleans : (s = s.toLowerCase().slice(0, 5),
        s !== "data-" && s !== "aria-");
    default:
        return !1
    }
}
function qa(s, e, i, o) {
    if (e === null || typeof e > "u" || pa(s, e, i, o))
        return !0;
    if (o)
        return !1;
    if (i !== null)
        switch (i.type) {
        case 3:
            return !e;
        case 4:
            return e === !1;
        case 5:
            return isNaN(e);
        case 6:
            return isNaN(e) || 1 > e
        }
    return !1
}
function v$1(s, e, i, o, a, c, d) {
    this.acceptsBooleans = e === 2 || e === 3 || e === 4,
    this.attributeName = o,
    this.attributeNamespace = a,
    this.mustUseProperty = i,
    this.propertyName = s,
    this.type = e,
    this.sanitizeURL = c,
    this.removeEmptyString = d
}
var z = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(s) {
    z[s] = new v$1(s,0,!1,s,null,!1,!1)
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(s) {
    var e = s[0];
    z[e] = new v$1(e,1,!1,s[1],null,!1,!1)
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function(s) {
    z[s] = new v$1(s,2,!1,s.toLowerCase(),null,!1,!1)
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(s) {
    z[s] = new v$1(s,2,!1,s,null,!1,!1)
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(s) {
    z[s] = new v$1(s,3,!1,s.toLowerCase(),null,!1,!1)
});
["checked", "multiple", "muted", "selected"].forEach(function(s) {
    z[s] = new v$1(s,3,!0,s,null,!1,!1)
});
["capture", "download"].forEach(function(s) {
    z[s] = new v$1(s,4,!1,s,null,!1,!1)
});
["cols", "rows", "size", "span"].forEach(function(s) {
    z[s] = new v$1(s,6,!1,s,null,!1,!1)
});
["rowSpan", "start"].forEach(function(s) {
    z[s] = new v$1(s,5,!1,s.toLowerCase(),null,!1,!1)
});
var ra = /[\-:]([a-z])/g;
function sa(s) {
    return s[1].toUpperCase()
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(s) {
    var e = s.replace(ra, sa);
    z[e] = new v$1(e,1,!1,s,null,!1,!1)
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(s) {
    var e = s.replace(ra, sa);
    z[e] = new v$1(e,1,!1,s,"http://www.w3.org/1999/xlink",!1,!1)
});
["xml:base", "xml:lang", "xml:space"].forEach(function(s) {
    var e = s.replace(ra, sa);
    z[e] = new v$1(e,1,!1,s,"http://www.w3.org/XML/1998/namespace",!1,!1)
});
["tabIndex", "crossOrigin"].forEach(function(s) {
    z[s] = new v$1(s,1,!1,s.toLowerCase(),null,!1,!1)
});
z.xlinkHref = new v$1("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);
["src", "href", "action", "formAction"].forEach(function(s) {
    z[s] = new v$1(s,1,!1,s.toLowerCase(),null,!0,!0)
});
function ta(s, e, i, o) {
    var a = z.hasOwnProperty(e) ? z[e] : null;
    (a !== null ? a.type !== 0 : o || !(2 < e.length) || e[0] !== "o" && e[0] !== "O" || e[1] !== "n" && e[1] !== "N") && (qa(e, i, a, o) && (i = null),
    o || a === null ? oa(e) && (i === null ? s.removeAttribute(e) : s.setAttribute(e, "" + i)) : a.mustUseProperty ? s[a.propertyName] = i === null ? a.type === 3 ? !1 : "" : i : (e = a.attributeName,
    o = a.attributeNamespace,
    i === null ? s.removeAttribute(e) : (a = a.type,
    i = a === 3 || a === 4 && i === !0 ? "" : "" + i,
    o ? s.setAttributeNS(o, e, i) : s.setAttribute(e, i))))
}
var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
  , va = Symbol.for("react.element")
  , wa = Symbol.for("react.portal")
  , ya = Symbol.for("react.fragment")
  , za = Symbol.for("react.strict_mode")
  , Aa = Symbol.for("react.profiler")
  , Ba = Symbol.for("react.provider")
  , Ca = Symbol.for("react.context")
  , Da = Symbol.for("react.forward_ref")
  , Ea = Symbol.for("react.suspense")
  , Fa = Symbol.for("react.suspense_list")
  , Ga = Symbol.for("react.memo")
  , Ha = Symbol.for("react.lazy")
  , Ia = Symbol.for("react.offscreen")
  , Ja = Symbol.iterator;
function Ka(s) {
    return s === null || typeof s != "object" ? null : (s = Ja && s[Ja] || s["@@iterator"],
    typeof s == "function" ? s : null)
}
var A = Object.assign, La;
function Ma(s) {
    if (La === void 0)
        try {
            throw Error()
        } catch (i) {
            var e = i.stack.trim().match(/\n( *(at )?)/);
            La = e && e[1] || ""
        }
    return `
` + La + s
}
var Na = !1;
function Oa(s, e) {
    if (!s || Na)
        return "";
    Na = !0;
    var i = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
        if (e)
            if (e = function() {
                throw Error()
            }
            ,
            Object.defineProperty(e.prototype, "props", {
                set: function() {
                    throw Error()
                }
            }),
            typeof Reflect == "object" && Reflect.construct) {
                try {
                    Reflect.construct(e, [])
                } catch (b) {
                    var o = b
                }
                Reflect.construct(s, [], e)
            } else {
                try {
                    e.call()
                } catch (b) {
                    o = b
                }
                s.call(e.prototype)
            }
        else {
            try {
                throw Error()
            } catch (b) {
                o = b
            }
            s()
        }
    } catch (b) {
        if (b && o && typeof b.stack == "string") {
            for (var a = b.stack.split(`
`), c = o.stack.split(`
`), d = a.length - 1, h = c.length - 1; 1 <= d && 0 <= h && a[d] !== c[h]; )
                h--;
            for (; 1 <= d && 0 <= h; d--,
            h--)
                if (a[d] !== c[h]) {
                    if (d !== 1 || h !== 1)
                        do
                            if (d--,
                            h--,
                            0 > h || a[d] !== c[h]) {
                                var g = `
` + a[d].replace(" at new ", " at ");
                                return s.displayName && g.includes("<anonymous>") && (g = g.replace("<anonymous>", s.displayName)),
                                g
                            }
                        while (1 <= d && 0 <= h);
                    break
                }
        }
    } finally {
        Na = !1,
        Error.prepareStackTrace = i
    }
    return (s = s ? s.displayName || s.name : "") ? Ma(s) : ""
}
function Pa(s) {
    switch (s.tag) {
    case 5:
        return Ma(s.type);
    case 16:
        return Ma("Lazy");
    case 13:
        return Ma("Suspense");
    case 19:
        return Ma("SuspenseList");
    case 0:
    case 2:
    case 15:
        return s = Oa(s.type, !1),
        s;
    case 11:
        return s = Oa(s.type.render, !1),
        s;
    case 1:
        return s = Oa(s.type, !0),
        s;
    default:
        return ""
    }
}
function Qa(s) {
    if (s == null)
        return null;
    if (typeof s == "function")
        return s.displayName || s.name || null;
    if (typeof s == "string")
        return s;
    switch (s) {
    case ya:
        return "Fragment";
    case wa:
        return "Portal";
    case Aa:
        return "Profiler";
    case za:
        return "StrictMode";
    case Ea:
        return "Suspense";
    case Fa:
        return "SuspenseList"
    }
    if (typeof s == "object")
        switch (s.$$typeof) {
        case Ca:
            return (s.displayName || "Context") + ".Consumer";
        case Ba:
            return (s._context.displayName || "Context") + ".Provider";
        case Da:
            var e = s.render;
            return s = s.displayName,
            s || (s = e.displayName || e.name || "",
            s = s !== "" ? "ForwardRef(" + s + ")" : "ForwardRef"),
            s;
        case Ga:
            return e = s.displayName || null,
            e !== null ? e : Qa(s.type) || "Memo";
        case Ha:
            e = s._payload,
            s = s._init;
            try {
                return Qa(s(e))
            } catch {}
        }
    return null
}
function Ra(s) {
    var e = s.type;
    switch (s.tag) {
    case 24:
        return "Cache";
    case 9:
        return (e.displayName || "Context") + ".Consumer";
    case 10:
        return (e._context.displayName || "Context") + ".Provider";
    case 18:
        return "DehydratedFragment";
    case 11:
        return s = e.render,
        s = s.displayName || s.name || "",
        e.displayName || (s !== "" ? "ForwardRef(" + s + ")" : "ForwardRef");
    case 7:
        return "Fragment";
    case 5:
        return e;
    case 4:
        return "Portal";
    case 3:
        return "Root";
    case 6:
        return "Text";
    case 16:
        return Qa(e);
    case 8:
        return e === za ? "StrictMode" : "Mode";
    case 22:
        return "Offscreen";
    case 12:
        return "Profiler";
    case 21:
        return "Scope";
    case 13:
        return "Suspense";
    case 19:
        return "SuspenseList";
    case 25:
        return "TracingMarker";
    case 1:
    case 0:
    case 17:
    case 2:
    case 14:
    case 15:
        if (typeof e == "function")
            return e.displayName || e.name || null;
        if (typeof e == "string")
            return e
    }
    return null
}
function Sa(s) {
    switch (typeof s) {
    case "boolean":
    case "number":
    case "string":
    case "undefined":
        return s;
    case "object":
        return s;
    default:
        return ""
    }
}
function Ta(s) {
    var e = s.type;
    return (s = s.nodeName) && s.toLowerCase() === "input" && (e === "checkbox" || e === "radio")
}
function Ua(s) {
    var e = Ta(s) ? "checked" : "value"
      , i = Object.getOwnPropertyDescriptor(s.constructor.prototype, e)
      , o = "" + s[e];
    if (!s.hasOwnProperty(e) && typeof i < "u" && typeof i.get == "function" && typeof i.set == "function") {
        var a = i.get
          , c = i.set;
        return Object.defineProperty(s, e, {
            configurable: !0,
            get: function() {
                return a.call(this)
            },
            set: function(d) {
                o = "" + d,
                c.call(this, d)
            }
        }),
        Object.defineProperty(s, e, {
            enumerable: i.enumerable
        }),
        {
            getValue: function() {
                return o
            },
            setValue: function(d) {
                o = "" + d
            },
            stopTracking: function() {
                s._valueTracker = null,
                delete s[e]
            }
        }
    }
}
function Va(s) {
    s._valueTracker || (s._valueTracker = Ua(s))
}
function Wa(s) {
    if (!s)
        return !1;
    var e = s._valueTracker;
    if (!e)
        return !0;
    var i = e.getValue()
      , o = "";
    return s && (o = Ta(s) ? s.checked ? "true" : "false" : s.value),
    s = o,
    s !== i ? (e.setValue(s),
    !0) : !1
}
function Xa(s) {
    if (s = s || (typeof document < "u" ? document : void 0),
    typeof s > "u")
        return null;
    try {
        return s.activeElement || s.body
    } catch {
        return s.body
    }
}
function Ya(s, e) {
    var i = e.checked;
    return A({}, e, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
        checked: i ?? s._wrapperState.initialChecked
    })
}
function Za(s, e) {
    var i = e.defaultValue == null ? "" : e.defaultValue
      , o = e.checked != null ? e.checked : e.defaultChecked;
    i = Sa(e.value != null ? e.value : i),
    s._wrapperState = {
        initialChecked: o,
        initialValue: i,
        controlled: e.type === "checkbox" || e.type === "radio" ? e.checked != null : e.value != null
    }
}
function ab(s, e) {
    e = e.checked,
    e != null && ta(s, "checked", e, !1)
}
function bb(s, e) {
    ab(s, e);
    var i = Sa(e.value)
      , o = e.type;
    if (i != null)
        o === "number" ? (i === 0 && s.value === "" || s.value != i) && (s.value = "" + i) : s.value !== "" + i && (s.value = "" + i);
    else if (o === "submit" || o === "reset") {
        s.removeAttribute("value");
        return
    }
    e.hasOwnProperty("value") ? cb(s, e.type, i) : e.hasOwnProperty("defaultValue") && cb(s, e.type, Sa(e.defaultValue)),
    e.checked == null && e.defaultChecked != null && (s.defaultChecked = !!e.defaultChecked)
}
function db(s, e, i) {
    if (e.hasOwnProperty("value") || e.hasOwnProperty("defaultValue")) {
        var o = e.type;
        if (!(o !== "submit" && o !== "reset" || e.value !== void 0 && e.value !== null))
            return;
        e = "" + s._wrapperState.initialValue,
        i || e === s.value || (s.value = e),
        s.defaultValue = e
    }
    i = s.name,
    i !== "" && (s.name = ""),
    s.defaultChecked = !!s._wrapperState.initialChecked,
    i !== "" && (s.name = i)
}
function cb(s, e, i) {
    (e !== "number" || Xa(s.ownerDocument) !== s) && (i == null ? s.defaultValue = "" + s._wrapperState.initialValue : s.defaultValue !== "" + i && (s.defaultValue = "" + i))
}
var eb = Array.isArray;
function fb(s, e, i, o) {
    if (s = s.options,
    e) {
        e = {};
        for (var a = 0; a < i.length; a++)
            e["$" + i[a]] = !0;
        for (i = 0; i < s.length; i++)
            a = e.hasOwnProperty("$" + s[i].value),
            s[i].selected !== a && (s[i].selected = a),
            a && o && (s[i].defaultSelected = !0)
    } else {
        for (i = "" + Sa(i),
        e = null,
        a = 0; a < s.length; a++) {
            if (s[a].value === i) {
                s[a].selected = !0,
                o && (s[a].defaultSelected = !0);
                return
            }
            e !== null || s[a].disabled || (e = s[a])
        }
        e !== null && (e.selected = !0)
    }
}
function gb(s, e) {
    if (e.dangerouslySetInnerHTML != null)
        throw Error(p(91));
    return A({}, e, {
        value: void 0,
        defaultValue: void 0,
        children: "" + s._wrapperState.initialValue
    })
}
function hb(s, e) {
    var i = e.value;
    if (i == null) {
        if (i = e.children,
        e = e.defaultValue,
        i != null) {
            if (e != null)
                throw Error(p(92));
            if (eb(i)) {
                if (1 < i.length)
                    throw Error(p(93));
                i = i[0]
            }
            e = i
        }
        e == null && (e = ""),
        i = e
    }
    s._wrapperState = {
        initialValue: Sa(i)
    }
}
function ib(s, e) {
    var i = Sa(e.value)
      , o = Sa(e.defaultValue);
    i != null && (i = "" + i,
    i !== s.value && (s.value = i),
    e.defaultValue == null && s.defaultValue !== i && (s.defaultValue = i)),
    o != null && (s.defaultValue = "" + o)
}
function jb(s) {
    var e = s.textContent;
    e === s._wrapperState.initialValue && e !== "" && e !== null && (s.value = e)
}
function kb(s) {
    switch (s) {
    case "svg":
        return "http://www.w3.org/2000/svg";
    case "math":
        return "http://www.w3.org/1998/Math/MathML";
    default:
        return "http://www.w3.org/1999/xhtml"
    }
}
function lb(s, e) {
    return s == null || s === "http://www.w3.org/1999/xhtml" ? kb(e) : s === "http://www.w3.org/2000/svg" && e === "foreignObject" ? "http://www.w3.org/1999/xhtml" : s
}
var mb, nb = function(s) {
    return typeof MSApp < "u" && MSApp.execUnsafeLocalFunction ? function(e, i, o, a) {
        MSApp.execUnsafeLocalFunction(function() {
            return s(e, i, o, a)
        })
    }
    : s
}(function(s, e) {
    if (s.namespaceURI !== "http://www.w3.org/2000/svg" || "innerHTML"in s)
        s.innerHTML = e;
    else {
        for (mb = mb || document.createElement("div"),
        mb.innerHTML = "<svg>" + e.valueOf().toString() + "</svg>",
        e = mb.firstChild; s.firstChild; )
            s.removeChild(s.firstChild);
        for (; e.firstChild; )
            s.appendChild(e.firstChild)
    }
});
function ob(s, e) {
    if (e) {
        var i = s.firstChild;
        if (i && i === s.lastChild && i.nodeType === 3) {
            i.nodeValue = e;
            return
        }
    }
    s.textContent = e
}
var pb = {
    animationIterationCount: !0,
    aspectRatio: !0,
    borderImageOutset: !0,
    borderImageSlice: !0,
    borderImageWidth: !0,
    boxFlex: !0,
    boxFlexGroup: !0,
    boxOrdinalGroup: !0,
    columnCount: !0,
    columns: !0,
    flex: !0,
    flexGrow: !0,
    flexPositive: !0,
    flexShrink: !0,
    flexNegative: !0,
    flexOrder: !0,
    gridArea: !0,
    gridRow: !0,
    gridRowEnd: !0,
    gridRowSpan: !0,
    gridRowStart: !0,
    gridColumn: !0,
    gridColumnEnd: !0,
    gridColumnSpan: !0,
    gridColumnStart: !0,
    fontWeight: !0,
    lineClamp: !0,
    lineHeight: !0,
    opacity: !0,
    order: !0,
    orphans: !0,
    tabSize: !0,
    widows: !0,
    zIndex: !0,
    zoom: !0,
    fillOpacity: !0,
    floodOpacity: !0,
    stopOpacity: !0,
    strokeDasharray: !0,
    strokeDashoffset: !0,
    strokeMiterlimit: !0,
    strokeOpacity: !0,
    strokeWidth: !0
}
  , qb = ["Webkit", "ms", "Moz", "O"];
Object.keys(pb).forEach(function(s) {
    qb.forEach(function(e) {
        e = e + s.charAt(0).toUpperCase() + s.substring(1),
        pb[e] = pb[s]
    })
});
function rb(s, e, i) {
    return e == null || typeof e == "boolean" || e === "" ? "" : i || typeof e != "number" || e === 0 || pb.hasOwnProperty(s) && pb[s] ? ("" + e).trim() : e + "px"
}
function sb(s, e) {
    s = s.style;
    for (var i in e)
        if (e.hasOwnProperty(i)) {
            var o = i.indexOf("--") === 0
              , a = rb(i, e[i], o);
            i === "float" && (i = "cssFloat"),
            o ? s.setProperty(i, a) : s[i] = a
        }
}
var tb = A({
    menuitem: !0
}, {
    area: !0,
    base: !0,
    br: !0,
    col: !0,
    embed: !0,
    hr: !0,
    img: !0,
    input: !0,
    keygen: !0,
    link: !0,
    meta: !0,
    param: !0,
    source: !0,
    track: !0,
    wbr: !0
});
function ub(s, e) {
    if (e) {
        if (tb[s] && (e.children != null || e.dangerouslySetInnerHTML != null))
            throw Error(p(137, s));
        if (e.dangerouslySetInnerHTML != null) {
            if (e.children != null)
                throw Error(p(60));
            if (typeof e.dangerouslySetInnerHTML != "object" || !("__html"in e.dangerouslySetInnerHTML))
                throw Error(p(61))
        }
        if (e.style != null && typeof e.style != "object")
            throw Error(p(62))
    }
}
function vb(s, e) {
    if (s.indexOf("-") === -1)
        return typeof e.is == "string";
    switch (s) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
        return !1;
    default:
        return !0
    }
}
var wb = null;
function xb(s) {
    return s = s.target || s.srcElement || window,
    s.correspondingUseElement && (s = s.correspondingUseElement),
    s.nodeType === 3 ? s.parentNode : s
}
var yb = null
  , zb = null
  , Ab = null;
function Bb(s) {
    if (s = Cb(s)) {
        if (typeof yb != "function")
            throw Error(p(280));
        var e = s.stateNode;
        e && (e = Db(e),
        yb(s.stateNode, s.type, e))
    }
}
function Eb(s) {
    zb ? Ab ? Ab.push(s) : Ab = [s] : zb = s
}
function Fb() {
    if (zb) {
        var s = zb
          , e = Ab;
        if (Ab = zb = null,
        Bb(s),
        e)
            for (s = 0; s < e.length; s++)
                Bb(e[s])
    }
}
function Gb(s, e) {
    return s(e)
}
function Hb() {}
var Ib = !1;
function Jb(s, e, i) {
    if (Ib)
        return s(e, i);
    Ib = !0;
    try {
        return Gb(s, e, i)
    } finally {
        Ib = !1,
        (zb !== null || Ab !== null) && (Hb(),
        Fb())
    }
}
function Kb(s, e) {
    var i = s.stateNode;
    if (i === null)
        return null;
    var o = Db(i);
    if (o === null)
        return null;
    i = o[e];
    e: switch (e) {
    case "onClick":
    case "onClickCapture":
    case "onDoubleClick":
    case "onDoubleClickCapture":
    case "onMouseDown":
    case "onMouseDownCapture":
    case "onMouseMove":
    case "onMouseMoveCapture":
    case "onMouseUp":
    case "onMouseUpCapture":
    case "onMouseEnter":
        (o = !o.disabled) || (s = s.type,
        o = !(s === "button" || s === "input" || s === "select" || s === "textarea")),
        s = !o;
        break e;
    default:
        s = !1
    }
    if (s)
        return null;
    if (i && typeof i != "function")
        throw Error(p(231, e, typeof i));
    return i
}
var Lb = !1;
if (ia)
    try {
        var Mb = {};
        Object.defineProperty(Mb, "passive", {
            get: function() {
                Lb = !0
            }
        }),
        window.addEventListener("test", Mb, Mb),
        window.removeEventListener("test", Mb, Mb)
    } catch {
        Lb = !1
    }
function Nb(s, e, i, o, a, c, d, h, g) {
    var b = Array.prototype.slice.call(arguments, 3);
    try {
        e.apply(i, b)
    } catch (_) {
        this.onError(_)
    }
}
var Ob = !1
  , Pb = null
  , Qb = !1
  , Rb = null
  , Sb = {
    onError: function(s) {
        Ob = !0,
        Pb = s
    }
};
function Tb(s, e, i, o, a, c, d, h, g) {
    Ob = !1,
    Pb = null,
    Nb.apply(Sb, arguments)
}
function Ub(s, e, i, o, a, c, d, h, g) {
    if (Tb.apply(this, arguments),
    Ob) {
        if (Ob) {
            var b = Pb;
            Ob = !1,
            Pb = null
        } else
            throw Error(p(198));
        Qb || (Qb = !0,
        Rb = b)
    }
}
function Vb(s) {
    var e = s
      , i = s;
    if (s.alternate)
        for (; e.return; )
            e = e.return;
    else {
        s = e;
        do
            e = s,
            e.flags & 4098 && (i = e.return),
            s = e.return;
        while (s)
    }
    return e.tag === 3 ? i : null
}
function Wb(s) {
    if (s.tag === 13) {
        var e = s.memoizedState;
        if (e === null && (s = s.alternate,
        s !== null && (e = s.memoizedState)),
        e !== null)
            return e.dehydrated
    }
    return null
}
function Xb(s) {
    if (Vb(s) !== s)
        throw Error(p(188))
}
function Yb(s) {
    var e = s.alternate;
    if (!e) {
        if (e = Vb(s),
        e === null)
            throw Error(p(188));
        return e !== s ? null : s
    }
    for (var i = s, o = e; ; ) {
        var a = i.return;
        if (a === null)
            break;
        var c = a.alternate;
        if (c === null) {
            if (o = a.return,
            o !== null) {
                i = o;
                continue
            }
            break
        }
        if (a.child === c.child) {
            for (c = a.child; c; ) {
                if (c === i)
                    return Xb(a),
                    s;
                if (c === o)
                    return Xb(a),
                    e;
                c = c.sibling
            }
            throw Error(p(188))
        }
        if (i.return !== o.return)
            i = a,
            o = c;
        else {
            for (var d = !1, h = a.child; h; ) {
                if (h === i) {
                    d = !0,
                    i = a,
                    o = c;
                    break
                }
                if (h === o) {
                    d = !0,
                    o = a,
                    i = c;
                    break
                }
                h = h.sibling
            }
            if (!d) {
                for (h = c.child; h; ) {
                    if (h === i) {
                        d = !0,
                        i = c,
                        o = a;
                        break
                    }
                    if (h === o) {
                        d = !0,
                        o = c,
                        i = a;
                        break
                    }
                    h = h.sibling
                }
                if (!d)
                    throw Error(p(189))
            }
        }
        if (i.alternate !== o)
            throw Error(p(190))
    }
    if (i.tag !== 3)
        throw Error(p(188));
    return i.stateNode.current === i ? s : e
}
function Zb(s) {
    return s = Yb(s),
    s !== null ? $b(s) : null
}
function $b(s) {
    if (s.tag === 5 || s.tag === 6)
        return s;
    for (s = s.child; s !== null; ) {
        var e = $b(s);
        if (e !== null)
            return e;
        s = s.sibling
    }
    return null
}
var ac = ca.unstable_scheduleCallback
  , bc = ca.unstable_cancelCallback
  , cc = ca.unstable_shouldYield
  , dc = ca.unstable_requestPaint
  , B = ca.unstable_now
  , ec = ca.unstable_getCurrentPriorityLevel
  , fc = ca.unstable_ImmediatePriority
  , gc = ca.unstable_UserBlockingPriority
  , hc = ca.unstable_NormalPriority
  , ic = ca.unstable_LowPriority
  , jc = ca.unstable_IdlePriority
  , kc = null
  , lc = null;
function mc(s) {
    if (lc && typeof lc.onCommitFiberRoot == "function")
        try {
            lc.onCommitFiberRoot(kc, s, void 0, (s.current.flags & 128) === 128)
        } catch {}
}
var oc = Math.clz32 ? Math.clz32 : nc
  , pc = Math.log
  , qc = Math.LN2;
function nc(s) {
    return s >>>= 0,
    s === 0 ? 32 : 31 - (pc(s) / qc | 0) | 0
}
var rc = 64
  , sc = 4194304;
function tc(s) {
    switch (s & -s) {
    case 1:
        return 1;
    case 2:
        return 2;
    case 4:
        return 4;
    case 8:
        return 8;
    case 16:
        return 16;
    case 32:
        return 32;
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
        return s & 4194240;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
        return s & 130023424;
    case 134217728:
        return 134217728;
    case 268435456:
        return 268435456;
    case 536870912:
        return 536870912;
    case 1073741824:
        return 1073741824;
    default:
        return s
    }
}
function uc(s, e) {
    var i = s.pendingLanes;
    if (i === 0)
        return 0;
    var o = 0
      , a = s.suspendedLanes
      , c = s.pingedLanes
      , d = i & 268435455;
    if (d !== 0) {
        var h = d & ~a;
        h !== 0 ? o = tc(h) : (c &= d,
        c !== 0 && (o = tc(c)))
    } else
        d = i & ~a,
        d !== 0 ? o = tc(d) : c !== 0 && (o = tc(c));
    if (o === 0)
        return 0;
    if (e !== 0 && e !== o && !(e & a) && (a = o & -o,
    c = e & -e,
    a >= c || a === 16 && (c & 4194240) !== 0))
        return e;
    if (o & 4 && (o |= i & 16),
    e = s.entangledLanes,
    e !== 0)
        for (s = s.entanglements,
        e &= o; 0 < e; )
            i = 31 - oc(e),
            a = 1 << i,
            o |= s[i],
            e &= ~a;
    return o
}
function vc(s, e) {
    switch (s) {
    case 1:
    case 2:
    case 4:
        return e + 250;
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
        return e + 5e3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
        return -1;
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
        return -1;
    default:
        return -1
    }
}
function wc(s, e) {
    for (var i = s.suspendedLanes, o = s.pingedLanes, a = s.expirationTimes, c = s.pendingLanes; 0 < c; ) {
        var d = 31 - oc(c)
          , h = 1 << d
          , g = a[d];
        g === -1 ? (!(h & i) || h & o) && (a[d] = vc(h, e)) : g <= e && (s.expiredLanes |= h),
        c &= ~h
    }
}
function xc(s) {
    return s = s.pendingLanes & -1073741825,
    s !== 0 ? s : s & 1073741824 ? 1073741824 : 0
}
function yc() {
    var s = rc;
    return rc <<= 1,
    !(rc & 4194240) && (rc = 64),
    s
}
function zc(s) {
    for (var e = [], i = 0; 31 > i; i++)
        e.push(s);
    return e
}
function Ac(s, e, i) {
    s.pendingLanes |= e,
    e !== 536870912 && (s.suspendedLanes = 0,
    s.pingedLanes = 0),
    s = s.eventTimes,
    e = 31 - oc(e),
    s[e] = i
}
function Bc(s, e) {
    var i = s.pendingLanes & ~e;
    s.pendingLanes = e,
    s.suspendedLanes = 0,
    s.pingedLanes = 0,
    s.expiredLanes &= e,
    s.mutableReadLanes &= e,
    s.entangledLanes &= e,
    e = s.entanglements;
    var o = s.eventTimes;
    for (s = s.expirationTimes; 0 < i; ) {
        var a = 31 - oc(i)
          , c = 1 << a;
        e[a] = 0,
        o[a] = -1,
        s[a] = -1,
        i &= ~c
    }
}
function Cc(s, e) {
    var i = s.entangledLanes |= e;
    for (s = s.entanglements; i; ) {
        var o = 31 - oc(i)
          , a = 1 << o;
        a & e | s[o] & e && (s[o] |= e),
        i &= ~a
    }
}
var C = 0;
function Dc(s) {
    return s &= -s,
    1 < s ? 4 < s ? s & 268435455 ? 16 : 536870912 : 4 : 1
}
var Ec, Fc, Gc, Hc, Ic, Jc = !1, Kc = [], Lc = null, Mc = null, Nc = null, Oc = new Map, Pc = new Map, Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function Sc(s, e) {
    switch (s) {
    case "focusin":
    case "focusout":
        Lc = null;
        break;
    case "dragenter":
    case "dragleave":
        Mc = null;
        break;
    case "mouseover":
    case "mouseout":
        Nc = null;
        break;
    case "pointerover":
    case "pointerout":
        Oc.delete(e.pointerId);
        break;
    case "gotpointercapture":
    case "lostpointercapture":
        Pc.delete(e.pointerId)
    }
}
function Tc(s, e, i, o, a, c) {
    return s === null || s.nativeEvent !== c ? (s = {
        blockedOn: e,
        domEventName: i,
        eventSystemFlags: o,
        nativeEvent: c,
        targetContainers: [a]
    },
    e !== null && (e = Cb(e),
    e !== null && Fc(e)),
    s) : (s.eventSystemFlags |= o,
    e = s.targetContainers,
    a !== null && e.indexOf(a) === -1 && e.push(a),
    s)
}
function Uc(s, e, i, o, a) {
    switch (e) {
    case "focusin":
        return Lc = Tc(Lc, s, e, i, o, a),
        !0;
    case "dragenter":
        return Mc = Tc(Mc, s, e, i, o, a),
        !0;
    case "mouseover":
        return Nc = Tc(Nc, s, e, i, o, a),
        !0;
    case "pointerover":
        var c = a.pointerId;
        return Oc.set(c, Tc(Oc.get(c) || null, s, e, i, o, a)),
        !0;
    case "gotpointercapture":
        return c = a.pointerId,
        Pc.set(c, Tc(Pc.get(c) || null, s, e, i, o, a)),
        !0
    }
    return !1
}
function Vc(s) {
    var e = Wc(s.target);
    if (e !== null) {
        var i = Vb(e);
        if (i !== null) {
            if (e = i.tag,
            e === 13) {
                if (e = Wb(i),
                e !== null) {
                    s.blockedOn = e,
                    Ic(s.priority, function() {
                        Gc(i)
                    });
                    return
                }
            } else if (e === 3 && i.stateNode.current.memoizedState.isDehydrated) {
                s.blockedOn = i.tag === 3 ? i.stateNode.containerInfo : null;
                return
            }
        }
    }
    s.blockedOn = null
}
function Xc(s) {
    if (s.blockedOn !== null)
        return !1;
    for (var e = s.targetContainers; 0 < e.length; ) {
        var i = Yc(s.domEventName, s.eventSystemFlags, e[0], s.nativeEvent);
        if (i === null) {
            i = s.nativeEvent;
            var o = new i.constructor(i.type,i);
            wb = o,
            i.target.dispatchEvent(o),
            wb = null
        } else
            return e = Cb(i),
            e !== null && Fc(e),
            s.blockedOn = i,
            !1;
        e.shift()
    }
    return !0
}
function Zc(s, e, i) {
    Xc(s) && i.delete(e)
}
function $c() {
    Jc = !1,
    Lc !== null && Xc(Lc) && (Lc = null),
    Mc !== null && Xc(Mc) && (Mc = null),
    Nc !== null && Xc(Nc) && (Nc = null),
    Oc.forEach(Zc),
    Pc.forEach(Zc)
}
function ad(s, e) {
    s.blockedOn === e && (s.blockedOn = null,
    Jc || (Jc = !0,
    ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)))
}
function bd(s) {
    function e(a) {
        return ad(a, s)
    }
    if (0 < Kc.length) {
        ad(Kc[0], s);
        for (var i = 1; i < Kc.length; i++) {
            var o = Kc[i];
            o.blockedOn === s && (o.blockedOn = null)
        }
    }
    for (Lc !== null && ad(Lc, s),
    Mc !== null && ad(Mc, s),
    Nc !== null && ad(Nc, s),
    Oc.forEach(e),
    Pc.forEach(e),
    i = 0; i < Qc.length; i++)
        o = Qc[i],
        o.blockedOn === s && (o.blockedOn = null);
    for (; 0 < Qc.length && (i = Qc[0],
    i.blockedOn === null); )
        Vc(i),
        i.blockedOn === null && Qc.shift()
}
var cd = ua.ReactCurrentBatchConfig
  , dd = !0;
function ed(s, e, i, o) {
    var a = C
      , c = cd.transition;
    cd.transition = null;
    try {
        C = 1,
        fd(s, e, i, o)
    } finally {
        C = a,
        cd.transition = c
    }
}
function gd(s, e, i, o) {
    var a = C
      , c = cd.transition;
    cd.transition = null;
    try {
        C = 4,
        fd(s, e, i, o)
    } finally {
        C = a,
        cd.transition = c
    }
}
function fd(s, e, i, o) {
    if (dd) {
        var a = Yc(s, e, i, o);
        if (a === null)
            hd(s, e, o, id$2, i),
            Sc(s, o);
        else if (Uc(a, s, e, i, o))
            o.stopPropagation();
        else if (Sc(s, o),
        e & 4 && -1 < Rc.indexOf(s)) {
            for (; a !== null; ) {
                var c = Cb(a);
                if (c !== null && Ec(c),
                c = Yc(s, e, i, o),
                c === null && hd(s, e, o, id$2, i),
                c === a)
                    break;
                a = c
            }
            a !== null && o.stopPropagation()
        } else
            hd(s, e, o, null, i)
    }
}
var id$2 = null;
function Yc(s, e, i, o) {
    if (id$2 = null,
    s = xb(o),
    s = Wc(s),
    s !== null)
        if (e = Vb(s),
        e === null)
            s = null;
        else if (i = e.tag,
        i === 13) {
            if (s = Wb(e),
            s !== null)
                return s;
            s = null
        } else if (i === 3) {
            if (e.stateNode.current.memoizedState.isDehydrated)
                return e.tag === 3 ? e.stateNode.containerInfo : null;
            s = null
        } else
            e !== s && (s = null);
    return id$2 = s,
    null
}
function jd(s) {
    switch (s) {
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
        return 1;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "toggle":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
        return 4;
    case "message":
        switch (ec()) {
        case fc:
            return 1;
        case gc:
            return 4;
        case hc:
        case ic:
            return 16;
        case jc:
            return 536870912;
        default:
            return 16
        }
    default:
        return 16
    }
}
var kd = null
  , ld = null
  , md = null;
function nd() {
    if (md)
        return md;
    var s, e = ld, i = e.length, o, a = "value"in kd ? kd.value : kd.textContent, c = a.length;
    for (s = 0; s < i && e[s] === a[s]; s++)
        ;
    var d = i - s;
    for (o = 1; o <= d && e[i - o] === a[c - o]; o++)
        ;
    return md = a.slice(s, 1 < o ? 1 - o : void 0)
}
function od(s) {
    var e = s.keyCode;
    return "charCode"in s ? (s = s.charCode,
    s === 0 && e === 13 && (s = 13)) : s = e,
    s === 10 && (s = 13),
    32 <= s || s === 13 ? s : 0
}
function pd() {
    return !0
}
function qd() {
    return !1
}
function rd(s) {
    function e(i, o, a, c, d) {
        this._reactName = i,
        this._targetInst = a,
        this.type = o,
        this.nativeEvent = c,
        this.target = d,
        this.currentTarget = null;
        for (var h in s)
            s.hasOwnProperty(h) && (i = s[h],
            this[h] = i ? i(c) : c[h]);
        return this.isDefaultPrevented = (c.defaultPrevented != null ? c.defaultPrevented : c.returnValue === !1) ? pd : qd,
        this.isPropagationStopped = qd,
        this
    }
    return A(e.prototype, {
        preventDefault: function() {
            this.defaultPrevented = !0;
            var i = this.nativeEvent;
            i && (i.preventDefault ? i.preventDefault() : typeof i.returnValue != "unknown" && (i.returnValue = !1),
            this.isDefaultPrevented = pd)
        },
        stopPropagation: function() {
            var i = this.nativeEvent;
            i && (i.stopPropagation ? i.stopPropagation() : typeof i.cancelBubble != "unknown" && (i.cancelBubble = !0),
            this.isPropagationStopped = pd)
        },
        persist: function() {},
        isPersistent: pd
    }),
    e
}
var sd = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function(s) {
        return s.timeStamp || Date.now()
    },
    defaultPrevented: 0,
    isTrusted: 0
}, td = rd(sd), ud = A({}, sd, {
    view: 0,
    detail: 0
}), vd = rd(ud), wd, xd, yd, Ad = A({}, ud, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: zd,
    button: 0,
    buttons: 0,
    relatedTarget: function(s) {
        return s.relatedTarget === void 0 ? s.fromElement === s.srcElement ? s.toElement : s.fromElement : s.relatedTarget
    },
    movementX: function(s) {
        return "movementX"in s ? s.movementX : (s !== yd && (yd && s.type === "mousemove" ? (wd = s.screenX - yd.screenX,
        xd = s.screenY - yd.screenY) : xd = wd = 0,
        yd = s),
        wd)
    },
    movementY: function(s) {
        return "movementY"in s ? s.movementY : xd
    }
}), Bd = rd(Ad), Cd = A({}, Ad, {
    dataTransfer: 0
}), Dd = rd(Cd), Ed = A({}, ud, {
    relatedTarget: 0
}), Fd = rd(Ed), Gd = A({}, sd, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
}), Hd = rd(Gd), Id = A({}, sd, {
    clipboardData: function(s) {
        return "clipboardData"in s ? s.clipboardData : window.clipboardData
    }
}), Jd = rd(Id), Kd = A({}, sd, {
    data: 0
}), Ld = rd(Kd), Md = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
}, Nd = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
}, Od = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
};
function Pd(s) {
    var e = this.nativeEvent;
    return e.getModifierState ? e.getModifierState(s) : (s = Od[s]) ? !!e[s] : !1
}
function zd() {
    return Pd
}
var Qd = A({}, ud, {
    key: function(s) {
        if (s.key) {
            var e = Md[s.key] || s.key;
            if (e !== "Unidentified")
                return e
        }
        return s.type === "keypress" ? (s = od(s),
        s === 13 ? "Enter" : String.fromCharCode(s)) : s.type === "keydown" || s.type === "keyup" ? Nd[s.keyCode] || "Unidentified" : ""
    },
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: zd,
    charCode: function(s) {
        return s.type === "keypress" ? od(s) : 0
    },
    keyCode: function(s) {
        return s.type === "keydown" || s.type === "keyup" ? s.keyCode : 0
    },
    which: function(s) {
        return s.type === "keypress" ? od(s) : s.type === "keydown" || s.type === "keyup" ? s.keyCode : 0
    }
})
  , Rd = rd(Qd)
  , Sd = A({}, Ad, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
})
  , Td = rd(Sd)
  , Ud = A({}, ud, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: zd
})
  , Vd = rd(Ud)
  , Wd = A({}, sd, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
})
  , Xd = rd(Wd)
  , Yd = A({}, Ad, {
    deltaX: function(s) {
        return "deltaX"in s ? s.deltaX : "wheelDeltaX"in s ? -s.wheelDeltaX : 0
    },
    deltaY: function(s) {
        return "deltaY"in s ? s.deltaY : "wheelDeltaY"in s ? -s.wheelDeltaY : "wheelDelta"in s ? -s.wheelDelta : 0
    },
    deltaZ: 0,
    deltaMode: 0
})
  , Zd = rd(Yd)
  , $d = [9, 13, 27, 32]
  , ae$1 = ia && "CompositionEvent"in window
  , be = null;
ia && "documentMode"in document && (be = document.documentMode);
var ce = ia && "TextEvent"in window && !be
  , de = ia && (!ae$1 || be && 8 < be && 11 >= be)
  , ee$1 = " "
  , fe = !1;
function ge(s, e) {
    switch (s) {
    case "keyup":
        return $d.indexOf(e.keyCode) !== -1;
    case "keydown":
        return e.keyCode !== 229;
    case "keypress":
    case "mousedown":
    case "focusout":
        return !0;
    default:
        return !1
    }
}
function he(s) {
    return s = s.detail,
    typeof s == "object" && "data"in s ? s.data : null
}
var ie = !1;
function je(s, e) {
    switch (s) {
    case "compositionend":
        return he(e);
    case "keypress":
        return e.which !== 32 ? null : (fe = !0,
        ee$1);
    case "textInput":
        return s = e.data,
        s === ee$1 && fe ? null : s;
    default:
        return null
    }
}
function ke(s, e) {
    if (ie)
        return s === "compositionend" || !ae$1 && ge(s, e) ? (s = nd(),
        md = ld = kd = null,
        ie = !1,
        s) : null;
    switch (s) {
    case "paste":
        return null;
    case "keypress":
        if (!(e.ctrlKey || e.altKey || e.metaKey) || e.ctrlKey && e.altKey) {
            if (e.char && 1 < e.char.length)
                return e.char;
            if (e.which)
                return String.fromCharCode(e.which)
        }
        return null;
    case "compositionend":
        return de && e.locale !== "ko" ? null : e.data;
    default:
        return null
    }
}
var le = {
    color: !0,
    date: !0,
    datetime: !0,
    "datetime-local": !0,
    email: !0,
    month: !0,
    number: !0,
    password: !0,
    range: !0,
    search: !0,
    tel: !0,
    text: !0,
    time: !0,
    url: !0,
    week: !0
};
function me(s) {
    var e = s && s.nodeName && s.nodeName.toLowerCase();
    return e === "input" ? !!le[s.type] : e === "textarea"
}
function ne$1(s, e, i, o) {
    Eb(o),
    e = oe$1(e, "onChange"),
    0 < e.length && (i = new td("onChange","change",null,i,o),
    s.push({
        event: i,
        listeners: e
    }))
}
var pe = null
  , qe = null;
function re(s) {
    se$1(s, 0)
}
function te$1(s) {
    var e = ue(s);
    if (Wa(e))
        return s
}
function ve(s, e) {
    if (s === "change")
        return e
}
var we = !1;
if (ia) {
    var xe;
    if (ia) {
        var ye = "oninput"in document;
        if (!ye) {
            var ze = document.createElement("div");
            ze.setAttribute("oninput", "return;"),
            ye = typeof ze.oninput == "function"
        }
        xe = ye
    } else
        xe = !1;
    we = xe && (!document.documentMode || 9 < document.documentMode)
}
function Ae() {
    pe && (pe.detachEvent("onpropertychange", Be),
    qe = pe = null)
}
function Be(s) {
    if (s.propertyName === "value" && te$1(qe)) {
        var e = [];
        ne$1(e, qe, s, xb(s)),
        Jb(re, e)
    }
}
function Ce(s, e, i) {
    s === "focusin" ? (Ae(),
    pe = e,
    qe = i,
    pe.attachEvent("onpropertychange", Be)) : s === "focusout" && Ae()
}
function De(s) {
    if (s === "selectionchange" || s === "keyup" || s === "keydown")
        return te$1(qe)
}
function Ee(s, e) {
    if (s === "click")
        return te$1(e)
}
function Fe(s, e) {
    if (s === "input" || s === "change")
        return te$1(e)
}
function Ge(s, e) {
    return s === e && (s !== 0 || 1 / s === 1 / e) || s !== s && e !== e
}
var He = typeof Object.is == "function" ? Object.is : Ge;
function Ie(s, e) {
    if (He(s, e))
        return !0;
    if (typeof s != "object" || s === null || typeof e != "object" || e === null)
        return !1;
    var i = Object.keys(s)
      , o = Object.keys(e);
    if (i.length !== o.length)
        return !1;
    for (o = 0; o < i.length; o++) {
        var a = i[o];
        if (!ja.call(e, a) || !He(s[a], e[a]))
            return !1
    }
    return !0
}
function Je(s) {
    for (; s && s.firstChild; )
        s = s.firstChild;
    return s
}
function Ke(s, e) {
    var i = Je(s);
    s = 0;
    for (var o; i; ) {
        if (i.nodeType === 3) {
            if (o = s + i.textContent.length,
            s <= e && o >= e)
                return {
                    node: i,
                    offset: e - s
                };
            s = o
        }
        e: {
            for (; i; ) {
                if (i.nextSibling) {
                    i = i.nextSibling;
                    break e
                }
                i = i.parentNode
            }
            i = void 0
        }
        i = Je(i)
    }
}
function Le(s, e) {
    return s && e ? s === e ? !0 : s && s.nodeType === 3 ? !1 : e && e.nodeType === 3 ? Le(s, e.parentNode) : "contains"in s ? s.contains(e) : s.compareDocumentPosition ? !!(s.compareDocumentPosition(e) & 16) : !1 : !1
}
function Me() {
    for (var s = window, e = Xa(); e instanceof s.HTMLIFrameElement; ) {
        try {
            var i = typeof e.contentWindow.location.href == "string"
        } catch {
            i = !1
        }
        if (i)
            s = e.contentWindow;
        else
            break;
        e = Xa(s.document)
    }
    return e
}
function Ne(s) {
    var e = s && s.nodeName && s.nodeName.toLowerCase();
    return e && (e === "input" && (s.type === "text" || s.type === "search" || s.type === "tel" || s.type === "url" || s.type === "password") || e === "textarea" || s.contentEditable === "true")
}
function Oe(s) {
    var e = Me()
      , i = s.focusedElem
      , o = s.selectionRange;
    if (e !== i && i && i.ownerDocument && Le(i.ownerDocument.documentElement, i)) {
        if (o !== null && Ne(i)) {
            if (e = o.start,
            s = o.end,
            s === void 0 && (s = e),
            "selectionStart"in i)
                i.selectionStart = e,
                i.selectionEnd = Math.min(s, i.value.length);
            else if (s = (e = i.ownerDocument || document) && e.defaultView || window,
            s.getSelection) {
                s = s.getSelection();
                var a = i.textContent.length
                  , c = Math.min(o.start, a);
                o = o.end === void 0 ? c : Math.min(o.end, a),
                !s.extend && c > o && (a = o,
                o = c,
                c = a),
                a = Ke(i, c);
                var d = Ke(i, o);
                a && d && (s.rangeCount !== 1 || s.anchorNode !== a.node || s.anchorOffset !== a.offset || s.focusNode !== d.node || s.focusOffset !== d.offset) && (e = e.createRange(),
                e.setStart(a.node, a.offset),
                s.removeAllRanges(),
                c > o ? (s.addRange(e),
                s.extend(d.node, d.offset)) : (e.setEnd(d.node, d.offset),
                s.addRange(e)))
            }
        }
        for (e = [],
        s = i; s = s.parentNode; )
            s.nodeType === 1 && e.push({
                element: s,
                left: s.scrollLeft,
                top: s.scrollTop
            });
        for (typeof i.focus == "function" && i.focus(),
        i = 0; i < e.length; i++)
            s = e[i],
            s.element.scrollLeft = s.left,
            s.element.scrollTop = s.top
    }
}
var Pe = ia && "documentMode"in document && 11 >= document.documentMode
  , Qe = null
  , Re = null
  , Se = null
  , Te$1 = !1;
function Ue(s, e, i) {
    var o = i.window === i ? i.document : i.nodeType === 9 ? i : i.ownerDocument;
    Te$1 || Qe == null || Qe !== Xa(o) || (o = Qe,
    "selectionStart"in o && Ne(o) ? o = {
        start: o.selectionStart,
        end: o.selectionEnd
    } : (o = (o.ownerDocument && o.ownerDocument.defaultView || window).getSelection(),
    o = {
        anchorNode: o.anchorNode,
        anchorOffset: o.anchorOffset,
        focusNode: o.focusNode,
        focusOffset: o.focusOffset
    }),
    Se && Ie(Se, o) || (Se = o,
    o = oe$1(Re, "onSelect"),
    0 < o.length && (e = new td("onSelect","select",null,e,i),
    s.push({
        event: e,
        listeners: o
    }),
    e.target = Qe)))
}
function Ve(s, e) {
    var i = {};
    return i[s.toLowerCase()] = e.toLowerCase(),
    i["Webkit" + s] = "webkit" + e,
    i["Moz" + s] = "moz" + e,
    i
}
var We = {
    animationend: Ve("Animation", "AnimationEnd"),
    animationiteration: Ve("Animation", "AnimationIteration"),
    animationstart: Ve("Animation", "AnimationStart"),
    transitionend: Ve("Transition", "TransitionEnd")
}
  , Xe = {}
  , Ye = {};
ia && (Ye = document.createElement("div").style,
"AnimationEvent"in window || (delete We.animationend.animation,
delete We.animationiteration.animation,
delete We.animationstart.animation),
"TransitionEvent"in window || delete We.transitionend.transition);
function Ze(s) {
    if (Xe[s])
        return Xe[s];
    if (!We[s])
        return s;
    var e = We[s], i;
    for (i in e)
        if (e.hasOwnProperty(i) && i in Ye)
            return Xe[s] = e[i];
    return s
}
var $e = Ze("animationend")
  , af = Ze("animationiteration")
  , bf = Ze("animationstart")
  , cf = Ze("transitionend")
  , df = new Map
  , ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function ff(s, e) {
    df.set(s, e),
    fa(e, [s])
}
for (var gf = 0; gf < ef.length; gf++) {
    var hf = ef[gf]
      , jf = hf.toLowerCase()
      , kf = hf[0].toUpperCase() + hf.slice(1);
    ff(jf, "on" + kf)
}
ff($e, "onAnimationEnd");
ff(af, "onAnimationIteration");
ff(bf, "onAnimationStart");
ff("dblclick", "onDoubleClick");
ff("focusin", "onFocus");
ff("focusout", "onBlur");
ff(cf, "onTransitionEnd");
ha("onMouseEnter", ["mouseout", "mouseover"]);
ha("onMouseLeave", ["mouseout", "mouseover"]);
ha("onPointerEnter", ["pointerout", "pointerover"]);
ha("onPointerLeave", ["pointerout", "pointerover"]);
fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ")
  , mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
function nf(s, e, i) {
    var o = s.type || "unknown-event";
    s.currentTarget = i,
    Ub(o, e, void 0, s),
    s.currentTarget = null
}
function se$1(s, e) {
    e = (e & 4) !== 0;
    for (var i = 0; i < s.length; i++) {
        var o = s[i]
          , a = o.event;
        o = o.listeners;
        e: {
            var c = void 0;
            if (e)
                for (var d = o.length - 1; 0 <= d; d--) {
                    var h = o[d]
                      , g = h.instance
                      , b = h.currentTarget;
                    if (h = h.listener,
                    g !== c && a.isPropagationStopped())
                        break e;
                    nf(a, h, b),
                    c = g
                }
            else
                for (d = 0; d < o.length; d++) {
                    if (h = o[d],
                    g = h.instance,
                    b = h.currentTarget,
                    h = h.listener,
                    g !== c && a.isPropagationStopped())
                        break e;
                    nf(a, h, b),
                    c = g
                }
        }
    }
    if (Qb)
        throw s = Rb,
        Qb = !1,
        Rb = null,
        s
}
function D$1(s, e) {
    var i = e[of];
    i === void 0 && (i = e[of] = new Set);
    var o = s + "__bubble";
    i.has(o) || (pf(e, s, 2, !1),
    i.add(o))
}
function qf(s, e, i) {
    var o = 0;
    e && (o |= 4),
    pf(i, s, o, e)
}
var rf = "_reactListening" + Math.random().toString(36).slice(2);
function sf(s) {
    if (!s[rf]) {
        s[rf] = !0,
        da.forEach(function(i) {
            i !== "selectionchange" && (mf.has(i) || qf(i, !1, s),
            qf(i, !0, s))
        });
        var e = s.nodeType === 9 ? s : s.ownerDocument;
        e === null || e[rf] || (e[rf] = !0,
        qf("selectionchange", !1, e))
    }
}
function pf(s, e, i, o) {
    switch (jd(e)) {
    case 1:
        var a = ed;
        break;
    case 4:
        a = gd;
        break;
    default:
        a = fd
    }
    i = a.bind(null, e, i, s),
    a = void 0,
    !Lb || e !== "touchstart" && e !== "touchmove" && e !== "wheel" || (a = !0),
    o ? a !== void 0 ? s.addEventListener(e, i, {
        capture: !0,
        passive: a
    }) : s.addEventListener(e, i, !0) : a !== void 0 ? s.addEventListener(e, i, {
        passive: a
    }) : s.addEventListener(e, i, !1)
}
function hd(s, e, i, o, a) {
    var c = o;
    if (!(e & 1) && !(e & 2) && o !== null)
        e: for (; ; ) {
            if (o === null)
                return;
            var d = o.tag;
            if (d === 3 || d === 4) {
                var h = o.stateNode.containerInfo;
                if (h === a || h.nodeType === 8 && h.parentNode === a)
                    break;
                if (d === 4)
                    for (d = o.return; d !== null; ) {
                        var g = d.tag;
                        if ((g === 3 || g === 4) && (g = d.stateNode.containerInfo,
                        g === a || g.nodeType === 8 && g.parentNode === a))
                            return;
                        d = d.return
                    }
                for (; h !== null; ) {
                    if (d = Wc(h),
                    d === null)
                        return;
                    if (g = d.tag,
                    g === 5 || g === 6) {
                        o = c = d;
                        continue e
                    }
                    h = h.parentNode
                }
            }
            o = o.return
        }
    Jb(function() {
        var b = c
          , _ = xb(i)
          , $ = [];
        e: {
            var _e = df.get(s);
            if (_e !== void 0) {
                var tt = td
                  , rt = s;
                switch (s) {
                case "keypress":
                    if (od(i) === 0)
                        break e;
                case "keydown":
                case "keyup":
                    tt = Rd;
                    break;
                case "focusin":
                    rt = "focus",
                    tt = Fd;
                    break;
                case "focusout":
                    rt = "blur",
                    tt = Fd;
                    break;
                case "beforeblur":
                case "afterblur":
                    tt = Fd;
                    break;
                case "click":
                    if (i.button === 2)
                        break e;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                    tt = Bd;
                    break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                    tt = Dd;
                    break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                    tt = Vd;
                    break;
                case $e:
                case af:
                case bf:
                    tt = Hd;
                    break;
                case cf:
                    tt = Xd;
                    break;
                case "scroll":
                    tt = vd;
                    break;
                case "wheel":
                    tt = Zd;
                    break;
                case "copy":
                case "cut":
                case "paste":
                    tt = Jd;
                    break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                    tt = Td
                }
                var et = (e & 4) !== 0
                  , it = !et && s === "scroll"
                  , st = et ? _e !== null ? _e + "Capture" : null : _e;
                et = [];
                for (var nt = b, lt; nt !== null; ) {
                    lt = nt;
                    var dt = lt.stateNode;
                    if (lt.tag === 5 && dt !== null && (lt = dt,
                    st !== null && (dt = Kb(nt, st),
                    dt != null && et.push(tf(nt, dt, lt)))),
                    it)
                        break;
                    nt = nt.return
                }
                0 < et.length && (_e = new tt(_e,rt,null,i,_),
                $.push({
                    event: _e,
                    listeners: et
                }))
            }
        }
        if (!(e & 7)) {
            e: {
                if (_e = s === "mouseover" || s === "pointerover",
                tt = s === "mouseout" || s === "pointerout",
                _e && i !== wb && (rt = i.relatedTarget || i.fromElement) && (Wc(rt) || rt[uf]))
                    break e;
                if ((tt || _e) && (_e = _.window === _ ? _ : (_e = _.ownerDocument) ? _e.defaultView || _e.parentWindow : window,
                tt ? (rt = i.relatedTarget || i.toElement,
                tt = b,
                rt = rt ? Wc(rt) : null,
                rt !== null && (it = Vb(rt),
                rt !== it || rt.tag !== 5 && rt.tag !== 6) && (rt = null)) : (tt = null,
                rt = b),
                tt !== rt)) {
                    if (et = Bd,
                    dt = "onMouseLeave",
                    st = "onMouseEnter",
                    nt = "mouse",
                    (s === "pointerout" || s === "pointerover") && (et = Td,
                    dt = "onPointerLeave",
                    st = "onPointerEnter",
                    nt = "pointer"),
                    it = tt == null ? _e : ue(tt),
                    lt = rt == null ? _e : ue(rt),
                    _e = new et(dt,nt + "leave",tt,i,_),
                    _e.target = it,
                    _e.relatedTarget = lt,
                    dt = null,
                    Wc(_) === b && (et = new et(st,nt + "enter",rt,i,_),
                    et.target = lt,
                    et.relatedTarget = it,
                    dt = et),
                    it = dt,
                    tt && rt)
                        t: {
                            for (et = tt,
                            st = rt,
                            nt = 0,
                            lt = et; lt; lt = vf(lt))
                                nt++;
                            for (lt = 0,
                            dt = st; dt; dt = vf(dt))
                                lt++;
                            for (; 0 < nt - lt; )
                                et = vf(et),
                                nt--;
                            for (; 0 < lt - nt; )
                                st = vf(st),
                                lt--;
                            for (; nt--; ) {
                                if (et === st || st !== null && et === st.alternate)
                                    break t;
                                et = vf(et),
                                st = vf(st)
                            }
                            et = null
                        }
                    else
                        et = null;
                    tt !== null && wf($, _e, tt, et, !1),
                    rt !== null && it !== null && wf($, it, rt, et, !0)
                }
            }
            e: {
                if (_e = b ? ue(b) : window,
                tt = _e.nodeName && _e.nodeName.toLowerCase(),
                tt === "select" || tt === "input" && _e.type === "file")
                    var ot = ve;
                else if (me(_e))
                    if (we)
                        ot = Fe;
                    else {
                        ot = De;
                        var at = Ce
                    }
                else
                    (tt = _e.nodeName) && tt.toLowerCase() === "input" && (_e.type === "checkbox" || _e.type === "radio") && (ot = Ee);
                if (ot && (ot = ot(s, b))) {
                    ne$1($, ot, i, _);
                    break e
                }
                at && at(s, _e, b),
                s === "focusout" && (at = _e._wrapperState) && at.controlled && _e.type === "number" && cb(_e, "number", _e.value)
            }
            switch (at = b ? ue(b) : window,
            s) {
            case "focusin":
                (me(at) || at.contentEditable === "true") && (Qe = at,
                Re = b,
                Se = null);
                break;
            case "focusout":
                Se = Re = Qe = null;
                break;
            case "mousedown":
                Te$1 = !0;
                break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
                Te$1 = !1,
                Ue($, i, _);
                break;
            case "selectionchange":
                if (Pe)
                    break;
            case "keydown":
            case "keyup":
                Ue($, i, _)
            }
            var ht;
            if (ae$1)
                e: {
                    switch (s) {
                    case "compositionstart":
                        var pt = "onCompositionStart";
                        break e;
                    case "compositionend":
                        pt = "onCompositionEnd";
                        break e;
                    case "compositionupdate":
                        pt = "onCompositionUpdate";
                        break e
                    }
                    pt = void 0
                }
            else
                ie ? ge(s, i) && (pt = "onCompositionEnd") : s === "keydown" && i.keyCode === 229 && (pt = "onCompositionStart");
            pt && (de && i.locale !== "ko" && (ie || pt !== "onCompositionStart" ? pt === "onCompositionEnd" && ie && (ht = nd()) : (kd = _,
            ld = "value"in kd ? kd.value : kd.textContent,
            ie = !0)),
            at = oe$1(b, pt),
            0 < at.length && (pt = new Ld(pt,s,null,i,_),
            $.push({
                event: pt,
                listeners: at
            }),
            ht ? pt.data = ht : (ht = he(i),
            ht !== null && (pt.data = ht)))),
            (ht = ce ? je(s, i) : ke(s, i)) && (b = oe$1(b, "onBeforeInput"),
            0 < b.length && (_ = new Ld("onBeforeInput","beforeinput",null,i,_),
            $.push({
                event: _,
                listeners: b
            }),
            _.data = ht))
        }
        se$1($, e)
    })
}
function tf(s, e, i) {
    return {
        instance: s,
        listener: e,
        currentTarget: i
    }
}
function oe$1(s, e) {
    for (var i = e + "Capture", o = []; s !== null; ) {
        var a = s
          , c = a.stateNode;
        a.tag === 5 && c !== null && (a = c,
        c = Kb(s, i),
        c != null && o.unshift(tf(s, c, a)),
        c = Kb(s, e),
        c != null && o.push(tf(s, c, a))),
        s = s.return
    }
    return o
}
function vf(s) {
    if (s === null)
        return null;
    do
        s = s.return;
    while (s && s.tag !== 5);
    return s || null
}
function wf(s, e, i, o, a) {
    for (var c = e._reactName, d = []; i !== null && i !== o; ) {
        var h = i
          , g = h.alternate
          , b = h.stateNode;
        if (g !== null && g === o)
            break;
        h.tag === 5 && b !== null && (h = b,
        a ? (g = Kb(i, c),
        g != null && d.unshift(tf(i, g, h))) : a || (g = Kb(i, c),
        g != null && d.push(tf(i, g, h)))),
        i = i.return
    }
    d.length !== 0 && s.push({
        event: e,
        listeners: d
    })
}
var xf = /\r\n?/g
  , yf = /\u0000|\uFFFD/g;
function zf(s) {
    return (typeof s == "string" ? s : "" + s).replace(xf, `
`).replace(yf, "")
}
function Af(s, e, i) {
    if (e = zf(e),
    zf(s) !== e && i)
        throw Error(p(425))
}
function Bf() {}
var Cf = null
  , Df = null;
function Ef(s, e) {
    return s === "textarea" || s === "noscript" || typeof e.children == "string" || typeof e.children == "number" || typeof e.dangerouslySetInnerHTML == "object" && e.dangerouslySetInnerHTML !== null && e.dangerouslySetInnerHTML.__html != null
}
var Ff = typeof setTimeout == "function" ? setTimeout : void 0
  , Gf = typeof clearTimeout == "function" ? clearTimeout : void 0
  , Hf = typeof Promise == "function" ? Promise : void 0
  , Jf = typeof queueMicrotask == "function" ? queueMicrotask : typeof Hf < "u" ? function(s) {
    return Hf.resolve(null).then(s).catch(If)
}
: Ff;
function If(s) {
    setTimeout(function() {
        throw s
    })
}
function Kf(s, e) {
    var i = e
      , o = 0;
    do {
        var a = i.nextSibling;
        if (s.removeChild(i),
        a && a.nodeType === 8)
            if (i = a.data,
            i === "/$") {
                if (o === 0) {
                    s.removeChild(a),
                    bd(e);
                    return
                }
                o--
            } else
                i !== "$" && i !== "$?" && i !== "$!" || o++;
        i = a
    } while (i);
    bd(e)
}
function Lf(s) {
    for (; s != null; s = s.nextSibling) {
        var e = s.nodeType;
        if (e === 1 || e === 3)
            break;
        if (e === 8) {
            if (e = s.data,
            e === "$" || e === "$!" || e === "$?")
                break;
            if (e === "/$")
                return null
        }
    }
    return s
}
function Mf(s) {
    s = s.previousSibling;
    for (var e = 0; s; ) {
        if (s.nodeType === 8) {
            var i = s.data;
            if (i === "$" || i === "$!" || i === "$?") {
                if (e === 0)
                    return s;
                e--
            } else
                i === "/$" && e++
        }
        s = s.previousSibling
    }
    return null
}
var Nf = Math.random().toString(36).slice(2)
  , Of = "__reactFiber$" + Nf
  , Pf = "__reactProps$" + Nf
  , uf = "__reactContainer$" + Nf
  , of = "__reactEvents$" + Nf
  , Qf = "__reactListeners$" + Nf
  , Rf = "__reactHandles$" + Nf;
function Wc(s) {
    var e = s[Of];
    if (e)
        return e;
    for (var i = s.parentNode; i; ) {
        if (e = i[uf] || i[Of]) {
            if (i = e.alternate,
            e.child !== null || i !== null && i.child !== null)
                for (s = Mf(s); s !== null; ) {
                    if (i = s[Of])
                        return i;
                    s = Mf(s)
                }
            return e
        }
        s = i,
        i = s.parentNode
    }
    return null
}
function Cb(s) {
    return s = s[Of] || s[uf],
    !s || s.tag !== 5 && s.tag !== 6 && s.tag !== 13 && s.tag !== 3 ? null : s
}
function ue(s) {
    if (s.tag === 5 || s.tag === 6)
        return s.stateNode;
    throw Error(p(33))
}
function Db(s) {
    return s[Pf] || null
}
var Sf = []
  , Tf = -1;
function Uf(s) {
    return {
        current: s
    }
}
function E$1(s) {
    0 > Tf || (s.current = Sf[Tf],
    Sf[Tf] = null,
    Tf--)
}
function G(s, e) {
    Tf++,
    Sf[Tf] = s.current,
    s.current = e
}
var Vf = {}
  , H = Uf(Vf)
  , Wf = Uf(!1)
  , Xf = Vf;
function Yf(s, e) {
    var i = s.type.contextTypes;
    if (!i)
        return Vf;
    var o = s.stateNode;
    if (o && o.__reactInternalMemoizedUnmaskedChildContext === e)
        return o.__reactInternalMemoizedMaskedChildContext;
    var a = {}, c;
    for (c in i)
        a[c] = e[c];
    return o && (s = s.stateNode,
    s.__reactInternalMemoizedUnmaskedChildContext = e,
    s.__reactInternalMemoizedMaskedChildContext = a),
    a
}
function Zf(s) {
    return s = s.childContextTypes,
    s != null
}
function $f() {
    E$1(Wf),
    E$1(H)
}
function ag(s, e, i) {
    if (H.current !== Vf)
        throw Error(p(168));
    G(H, e),
    G(Wf, i)
}
function bg(s, e, i) {
    var o = s.stateNode;
    if (e = e.childContextTypes,
    typeof o.getChildContext != "function")
        return i;
    o = o.getChildContext();
    for (var a in o)
        if (!(a in e))
            throw Error(p(108, Ra(s) || "Unknown", a));
    return A({}, i, o)
}
function cg(s) {
    return s = (s = s.stateNode) && s.__reactInternalMemoizedMergedChildContext || Vf,
    Xf = H.current,
    G(H, s),
    G(Wf, Wf.current),
    !0
}
function dg(s, e, i) {
    var o = s.stateNode;
    if (!o)
        throw Error(p(169));
    i ? (s = bg(s, e, Xf),
    o.__reactInternalMemoizedMergedChildContext = s,
    E$1(Wf),
    E$1(H),
    G(H, s)) : E$1(Wf),
    G(Wf, i)
}
var eg = null
  , fg = !1
  , gg = !1;
function hg(s) {
    eg === null ? eg = [s] : eg.push(s)
}
function ig(s) {
    fg = !0,
    hg(s)
}
function jg() {
    if (!gg && eg !== null) {
        gg = !0;
        var s = 0
          , e = C;
        try {
            var i = eg;
            for (C = 1; s < i.length; s++) {
                var o = i[s];
                do
                    o = o(!0);
                while (o !== null)
            }
            eg = null,
            fg = !1
        } catch (a) {
            throw eg !== null && (eg = eg.slice(s + 1)),
            ac(fc, jg),
            a
        } finally {
            C = e,
            gg = !1
        }
    }
    return null
}
var kg = []
  , lg = 0
  , mg = null
  , ng = 0
  , og = []
  , pg = 0
  , qg = null
  , rg = 1
  , sg = "";
function tg(s, e) {
    kg[lg++] = ng,
    kg[lg++] = mg,
    mg = s,
    ng = e
}
function ug(s, e, i) {
    og[pg++] = rg,
    og[pg++] = sg,
    og[pg++] = qg,
    qg = s;
    var o = rg;
    s = sg;
    var a = 32 - oc(o) - 1;
    o &= ~(1 << a),
    i += 1;
    var c = 32 - oc(e) + a;
    if (30 < c) {
        var d = a - a % 5;
        c = (o & (1 << d) - 1).toString(32),
        o >>= d,
        a -= d,
        rg = 1 << 32 - oc(e) + a | i << a | o,
        sg = c + s
    } else
        rg = 1 << c | i << a | o,
        sg = s
}
function vg(s) {
    s.return !== null && (tg(s, 1),
    ug(s, 1, 0))
}
function wg(s) {
    for (; s === mg; )
        mg = kg[--lg],
        kg[lg] = null,
        ng = kg[--lg],
        kg[lg] = null;
    for (; s === qg; )
        qg = og[--pg],
        og[pg] = null,
        sg = og[--pg],
        og[pg] = null,
        rg = og[--pg],
        og[pg] = null
}
var xg = null
  , yg = null
  , I = !1
  , zg = null;
function Ag(s, e) {
    var i = Bg(5, null, null, 0);
    i.elementType = "DELETED",
    i.stateNode = e,
    i.return = s,
    e = s.deletions,
    e === null ? (s.deletions = [i],
    s.flags |= 16) : e.push(i)
}
function Cg(s, e) {
    switch (s.tag) {
    case 5:
        var i = s.type;
        return e = e.nodeType !== 1 || i.toLowerCase() !== e.nodeName.toLowerCase() ? null : e,
        e !== null ? (s.stateNode = e,
        xg = s,
        yg = Lf(e.firstChild),
        !0) : !1;
    case 6:
        return e = s.pendingProps === "" || e.nodeType !== 3 ? null : e,
        e !== null ? (s.stateNode = e,
        xg = s,
        yg = null,
        !0) : !1;
    case 13:
        return e = e.nodeType !== 8 ? null : e,
        e !== null ? (i = qg !== null ? {
            id: rg,
            overflow: sg
        } : null,
        s.memoizedState = {
            dehydrated: e,
            treeContext: i,
            retryLane: 1073741824
        },
        i = Bg(18, null, null, 0),
        i.stateNode = e,
        i.return = s,
        s.child = i,
        xg = s,
        yg = null,
        !0) : !1;
    default:
        return !1
    }
}
function Dg(s) {
    return (s.mode & 1) !== 0 && (s.flags & 128) === 0
}
function Eg(s) {
    if (I) {
        var e = yg;
        if (e) {
            var i = e;
            if (!Cg(s, e)) {
                if (Dg(s))
                    throw Error(p(418));
                e = Lf(i.nextSibling);
                var o = xg;
                e && Cg(s, e) ? Ag(o, i) : (s.flags = s.flags & -4097 | 2,
                I = !1,
                xg = s)
            }
        } else {
            if (Dg(s))
                throw Error(p(418));
            s.flags = s.flags & -4097 | 2,
            I = !1,
            xg = s
        }
    }
}
function Fg(s) {
    for (s = s.return; s !== null && s.tag !== 5 && s.tag !== 3 && s.tag !== 13; )
        s = s.return;
    xg = s
}
function Gg(s) {
    if (s !== xg)
        return !1;
    if (!I)
        return Fg(s),
        I = !0,
        !1;
    var e;
    if ((e = s.tag !== 3) && !(e = s.tag !== 5) && (e = s.type,
    e = e !== "head" && e !== "body" && !Ef(s.type, s.memoizedProps)),
    e && (e = yg)) {
        if (Dg(s))
            throw Hg(),
            Error(p(418));
        for (; e; )
            Ag(s, e),
            e = Lf(e.nextSibling)
    }
    if (Fg(s),
    s.tag === 13) {
        if (s = s.memoizedState,
        s = s !== null ? s.dehydrated : null,
        !s)
            throw Error(p(317));
        e: {
            for (s = s.nextSibling,
            e = 0; s; ) {
                if (s.nodeType === 8) {
                    var i = s.data;
                    if (i === "/$") {
                        if (e === 0) {
                            yg = Lf(s.nextSibling);
                            break e
                        }
                        e--
                    } else
                        i !== "$" && i !== "$!" && i !== "$?" || e++
                }
                s = s.nextSibling
            }
            yg = null
        }
    } else
        yg = xg ? Lf(s.stateNode.nextSibling) : null;
    return !0
}
function Hg() {
    for (var s = yg; s; )
        s = Lf(s.nextSibling)
}
function Ig() {
    yg = xg = null,
    I = !1
}
function Jg(s) {
    zg === null ? zg = [s] : zg.push(s)
}
var Kg = ua.ReactCurrentBatchConfig;
function Lg(s, e, i) {
    if (s = i.ref,
    s !== null && typeof s != "function" && typeof s != "object") {
        if (i._owner) {
            if (i = i._owner,
            i) {
                if (i.tag !== 1)
                    throw Error(p(309));
                var o = i.stateNode
            }
            if (!o)
                throw Error(p(147, s));
            var a = o
              , c = "" + s;
            return e !== null && e.ref !== null && typeof e.ref == "function" && e.ref._stringRef === c ? e.ref : (e = function(d) {
                var h = a.refs;
                d === null ? delete h[c] : h[c] = d
            }
            ,
            e._stringRef = c,
            e)
        }
        if (typeof s != "string")
            throw Error(p(284));
        if (!i._owner)
            throw Error(p(290, s))
    }
    return s
}
function Mg(s, e) {
    throw s = Object.prototype.toString.call(e),
    Error(p(31, s === "[object Object]" ? "object with keys {" + Object.keys(e).join(", ") + "}" : s))
}
function Ng(s) {
    var e = s._init;
    return e(s._payload)
}
function Og(s) {
    function e(st, nt) {
        if (s) {
            var lt = st.deletions;
            lt === null ? (st.deletions = [nt],
            st.flags |= 16) : lt.push(nt)
        }
    }
    function i(st, nt) {
        if (!s)
            return null;
        for (; nt !== null; )
            e(st, nt),
            nt = nt.sibling;
        return null
    }
    function o(st, nt) {
        for (st = new Map; nt !== null; )
            nt.key !== null ? st.set(nt.key, nt) : st.set(nt.index, nt),
            nt = nt.sibling;
        return st
    }
    function a(st, nt) {
        return st = Pg(st, nt),
        st.index = 0,
        st.sibling = null,
        st
    }
    function c(st, nt, lt) {
        return st.index = lt,
        s ? (lt = st.alternate,
        lt !== null ? (lt = lt.index,
        lt < nt ? (st.flags |= 2,
        nt) : lt) : (st.flags |= 2,
        nt)) : (st.flags |= 1048576,
        nt)
    }
    function d(st) {
        return s && st.alternate === null && (st.flags |= 2),
        st
    }
    function h(st, nt, lt, dt) {
        return nt === null || nt.tag !== 6 ? (nt = Qg(lt, st.mode, dt),
        nt.return = st,
        nt) : (nt = a(nt, lt),
        nt.return = st,
        nt)
    }
    function g(st, nt, lt, dt) {
        var ot = lt.type;
        return ot === ya ? _(st, nt, lt.props.children, dt, lt.key) : nt !== null && (nt.elementType === ot || typeof ot == "object" && ot !== null && ot.$$typeof === Ha && Ng(ot) === nt.type) ? (dt = a(nt, lt.props),
        dt.ref = Lg(st, nt, lt),
        dt.return = st,
        dt) : (dt = Rg(lt.type, lt.key, lt.props, null, st.mode, dt),
        dt.ref = Lg(st, nt, lt),
        dt.return = st,
        dt)
    }
    function b(st, nt, lt, dt) {
        return nt === null || nt.tag !== 4 || nt.stateNode.containerInfo !== lt.containerInfo || nt.stateNode.implementation !== lt.implementation ? (nt = Sg(lt, st.mode, dt),
        nt.return = st,
        nt) : (nt = a(nt, lt.children || []),
        nt.return = st,
        nt)
    }
    function _(st, nt, lt, dt, ot) {
        return nt === null || nt.tag !== 7 ? (nt = Tg(lt, st.mode, dt, ot),
        nt.return = st,
        nt) : (nt = a(nt, lt),
        nt.return = st,
        nt)
    }
    function $(st, nt, lt) {
        if (typeof nt == "string" && nt !== "" || typeof nt == "number")
            return nt = Qg("" + nt, st.mode, lt),
            nt.return = st,
            nt;
        if (typeof nt == "object" && nt !== null) {
            switch (nt.$$typeof) {
            case va:
                return lt = Rg(nt.type, nt.key, nt.props, null, st.mode, lt),
                lt.ref = Lg(st, null, nt),
                lt.return = st,
                lt;
            case wa:
                return nt = Sg(nt, st.mode, lt),
                nt.return = st,
                nt;
            case Ha:
                var dt = nt._init;
                return $(st, dt(nt._payload), lt)
            }
            if (eb(nt) || Ka(nt))
                return nt = Tg(nt, st.mode, lt, null),
                nt.return = st,
                nt;
            Mg(st, nt)
        }
        return null
    }
    function _e(st, nt, lt, dt) {
        var ot = nt !== null ? nt.key : null;
        if (typeof lt == "string" && lt !== "" || typeof lt == "number")
            return ot !== null ? null : h(st, nt, "" + lt, dt);
        if (typeof lt == "object" && lt !== null) {
            switch (lt.$$typeof) {
            case va:
                return lt.key === ot ? g(st, nt, lt, dt) : null;
            case wa:
                return lt.key === ot ? b(st, nt, lt, dt) : null;
            case Ha:
                return ot = lt._init,
                _e(st, nt, ot(lt._payload), dt)
            }
            if (eb(lt) || Ka(lt))
                return ot !== null ? null : _(st, nt, lt, dt, null);
            Mg(st, lt)
        }
        return null
    }
    function tt(st, nt, lt, dt, ot) {
        if (typeof dt == "string" && dt !== "" || typeof dt == "number")
            return st = st.get(lt) || null,
            h(nt, st, "" + dt, ot);
        if (typeof dt == "object" && dt !== null) {
            switch (dt.$$typeof) {
            case va:
                return st = st.get(dt.key === null ? lt : dt.key) || null,
                g(nt, st, dt, ot);
            case wa:
                return st = st.get(dt.key === null ? lt : dt.key) || null,
                b(nt, st, dt, ot);
            case Ha:
                var at = dt._init;
                return tt(st, nt, lt, at(dt._payload), ot)
            }
            if (eb(dt) || Ka(dt))
                return st = st.get(lt) || null,
                _(nt, st, dt, ot, null);
            Mg(nt, dt)
        }
        return null
    }
    function rt(st, nt, lt, dt) {
        for (var ot = null, at = null, ht = nt, pt = nt = 0, gt = null; ht !== null && pt < lt.length; pt++) {
            ht.index > pt ? (gt = ht,
            ht = null) : gt = ht.sibling;
            var wt = _e(st, ht, lt[pt], dt);
            if (wt === null) {
                ht === null && (ht = gt);
                break
            }
            s && ht && wt.alternate === null && e(st, ht),
            nt = c(wt, nt, pt),
            at === null ? ot = wt : at.sibling = wt,
            at = wt,
            ht = gt
        }
        if (pt === lt.length)
            return i(st, ht),
            I && tg(st, pt),
            ot;
        if (ht === null) {
            for (; pt < lt.length; pt++)
                ht = $(st, lt[pt], dt),
                ht !== null && (nt = c(ht, nt, pt),
                at === null ? ot = ht : at.sibling = ht,
                at = ht);
            return I && tg(st, pt),
            ot
        }
        for (ht = o(st, ht); pt < lt.length; pt++)
            gt = tt(ht, st, pt, lt[pt], dt),
            gt !== null && (s && gt.alternate !== null && ht.delete(gt.key === null ? pt : gt.key),
            nt = c(gt, nt, pt),
            at === null ? ot = gt : at.sibling = gt,
            at = gt);
        return s && ht.forEach(function(yt) {
            return e(st, yt)
        }),
        I && tg(st, pt),
        ot
    }
    function et(st, nt, lt, dt) {
        var ot = Ka(lt);
        if (typeof ot != "function")
            throw Error(p(150));
        if (lt = ot.call(lt),
        lt == null)
            throw Error(p(151));
        for (var at = ot = null, ht = nt, pt = nt = 0, gt = null, wt = lt.next(); ht !== null && !wt.done; pt++,
        wt = lt.next()) {
            ht.index > pt ? (gt = ht,
            ht = null) : gt = ht.sibling;
            var yt = _e(st, ht, wt.value, dt);
            if (yt === null) {
                ht === null && (ht = gt);
                break
            }
            s && ht && yt.alternate === null && e(st, ht),
            nt = c(yt, nt, pt),
            at === null ? ot = yt : at.sibling = yt,
            at = yt,
            ht = gt
        }
        if (wt.done)
            return i(st, ht),
            I && tg(st, pt),
            ot;
        if (ht === null) {
            for (; !wt.done; pt++,
            wt = lt.next())
                wt = $(st, wt.value, dt),
                wt !== null && (nt = c(wt, nt, pt),
                at === null ? ot = wt : at.sibling = wt,
                at = wt);
            return I && tg(st, pt),
            ot
        }
        for (ht = o(st, ht); !wt.done; pt++,
        wt = lt.next())
            wt = tt(ht, st, pt, wt.value, dt),
            wt !== null && (s && wt.alternate !== null && ht.delete(wt.key === null ? pt : wt.key),
            nt = c(wt, nt, pt),
            at === null ? ot = wt : at.sibling = wt,
            at = wt);
        return s && ht.forEach(function(Rt) {
            return e(st, Rt)
        }),
        I && tg(st, pt),
        ot
    }
    function it(st, nt, lt, dt) {
        if (typeof lt == "object" && lt !== null && lt.type === ya && lt.key === null && (lt = lt.props.children),
        typeof lt == "object" && lt !== null) {
            switch (lt.$$typeof) {
            case va:
                e: {
                    for (var ot = lt.key, at = nt; at !== null; ) {
                        if (at.key === ot) {
                            if (ot = lt.type,
                            ot === ya) {
                                if (at.tag === 7) {
                                    i(st, at.sibling),
                                    nt = a(at, lt.props.children),
                                    nt.return = st,
                                    st = nt;
                                    break e
                                }
                            } else if (at.elementType === ot || typeof ot == "object" && ot !== null && ot.$$typeof === Ha && Ng(ot) === at.type) {
                                i(st, at.sibling),
                                nt = a(at, lt.props),
                                nt.ref = Lg(st, at, lt),
                                nt.return = st,
                                st = nt;
                                break e
                            }
                            i(st, at);
                            break
                        } else
                            e(st, at);
                        at = at.sibling
                    }
                    lt.type === ya ? (nt = Tg(lt.props.children, st.mode, dt, lt.key),
                    nt.return = st,
                    st = nt) : (dt = Rg(lt.type, lt.key, lt.props, null, st.mode, dt),
                    dt.ref = Lg(st, nt, lt),
                    dt.return = st,
                    st = dt)
                }
                return d(st);
            case wa:
                e: {
                    for (at = lt.key; nt !== null; ) {
                        if (nt.key === at)
                            if (nt.tag === 4 && nt.stateNode.containerInfo === lt.containerInfo && nt.stateNode.implementation === lt.implementation) {
                                i(st, nt.sibling),
                                nt = a(nt, lt.children || []),
                                nt.return = st,
                                st = nt;
                                break e
                            } else {
                                i(st, nt);
                                break
                            }
                        else
                            e(st, nt);
                        nt = nt.sibling
                    }
                    nt = Sg(lt, st.mode, dt),
                    nt.return = st,
                    st = nt
                }
                return d(st);
            case Ha:
                return at = lt._init,
                it(st, nt, at(lt._payload), dt)
            }
            if (eb(lt))
                return rt(st, nt, lt, dt);
            if (Ka(lt))
                return et(st, nt, lt, dt);
            Mg(st, lt)
        }
        return typeof lt == "string" && lt !== "" || typeof lt == "number" ? (lt = "" + lt,
        nt !== null && nt.tag === 6 ? (i(st, nt.sibling),
        nt = a(nt, lt),
        nt.return = st,
        st = nt) : (i(st, nt),
        nt = Qg(lt, st.mode, dt),
        nt.return = st,
        st = nt),
        d(st)) : i(st, nt)
    }
    return it
}
var Ug = Og(!0)
  , Vg = Og(!1)
  , Wg = Uf(null)
  , Xg = null
  , Yg = null
  , Zg = null;
function $g() {
    Zg = Yg = Xg = null
}
function ah(s) {
    var e = Wg.current;
    E$1(Wg),
    s._currentValue = e
}
function bh(s, e, i) {
    for (; s !== null; ) {
        var o = s.alternate;
        if ((s.childLanes & e) !== e ? (s.childLanes |= e,
        o !== null && (o.childLanes |= e)) : o !== null && (o.childLanes & e) !== e && (o.childLanes |= e),
        s === i)
            break;
        s = s.return
    }
}
function ch(s, e) {
    Xg = s,
    Zg = Yg = null,
    s = s.dependencies,
    s !== null && s.firstContext !== null && (s.lanes & e && (dh = !0),
    s.firstContext = null)
}
function eh(s) {
    var e = s._currentValue;
    if (Zg !== s)
        if (s = {
            context: s,
            memoizedValue: e,
            next: null
        },
        Yg === null) {
            if (Xg === null)
                throw Error(p(308));
            Yg = s,
            Xg.dependencies = {
                lanes: 0,
                firstContext: s
            }
        } else
            Yg = Yg.next = s;
    return e
}
var fh = null;
function gh(s) {
    fh === null ? fh = [s] : fh.push(s)
}
function hh(s, e, i, o) {
    var a = e.interleaved;
    return a === null ? (i.next = i,
    gh(e)) : (i.next = a.next,
    a.next = i),
    e.interleaved = i,
    ih(s, o)
}
function ih(s, e) {
    s.lanes |= e;
    var i = s.alternate;
    for (i !== null && (i.lanes |= e),
    i = s,
    s = s.return; s !== null; )
        s.childLanes |= e,
        i = s.alternate,
        i !== null && (i.childLanes |= e),
        i = s,
        s = s.return;
    return i.tag === 3 ? i.stateNode : null
}
var jh = !1;
function kh(s) {
    s.updateQueue = {
        baseState: s.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
            pending: null,
            interleaved: null,
            lanes: 0
        },
        effects: null
    }
}
function lh(s, e) {
    s = s.updateQueue,
    e.updateQueue === s && (e.updateQueue = {
        baseState: s.baseState,
        firstBaseUpdate: s.firstBaseUpdate,
        lastBaseUpdate: s.lastBaseUpdate,
        shared: s.shared,
        effects: s.effects
    })
}
function mh(s, e) {
    return {
        eventTime: s,
        lane: e,
        tag: 0,
        payload: null,
        callback: null,
        next: null
    }
}
function nh(s, e, i) {
    var o = s.updateQueue;
    if (o === null)
        return null;
    if (o = o.shared,
    K & 2) {
        var a = o.pending;
        return a === null ? e.next = e : (e.next = a.next,
        a.next = e),
        o.pending = e,
        ih(s, i)
    }
    return a = o.interleaved,
    a === null ? (e.next = e,
    gh(o)) : (e.next = a.next,
    a.next = e),
    o.interleaved = e,
    ih(s, i)
}
function oh(s, e, i) {
    if (e = e.updateQueue,
    e !== null && (e = e.shared,
    (i & 4194240) !== 0)) {
        var o = e.lanes;
        o &= s.pendingLanes,
        i |= o,
        e.lanes = i,
        Cc(s, i)
    }
}
function ph(s, e) {
    var i = s.updateQueue
      , o = s.alternate;
    if (o !== null && (o = o.updateQueue,
    i === o)) {
        var a = null
          , c = null;
        if (i = i.firstBaseUpdate,
        i !== null) {
            do {
                var d = {
                    eventTime: i.eventTime,
                    lane: i.lane,
                    tag: i.tag,
                    payload: i.payload,
                    callback: i.callback,
                    next: null
                };
                c === null ? a = c = d : c = c.next = d,
                i = i.next
            } while (i !== null);
            c === null ? a = c = e : c = c.next = e
        } else
            a = c = e;
        i = {
            baseState: o.baseState,
            firstBaseUpdate: a,
            lastBaseUpdate: c,
            shared: o.shared,
            effects: o.effects
        },
        s.updateQueue = i;
        return
    }
    s = i.lastBaseUpdate,
    s === null ? i.firstBaseUpdate = e : s.next = e,
    i.lastBaseUpdate = e
}
function qh(s, e, i, o) {
    var a = s.updateQueue;
    jh = !1;
    var c = a.firstBaseUpdate
      , d = a.lastBaseUpdate
      , h = a.shared.pending;
    if (h !== null) {
        a.shared.pending = null;
        var g = h
          , b = g.next;
        g.next = null,
        d === null ? c = b : d.next = b,
        d = g;
        var _ = s.alternate;
        _ !== null && (_ = _.updateQueue,
        h = _.lastBaseUpdate,
        h !== d && (h === null ? _.firstBaseUpdate = b : h.next = b,
        _.lastBaseUpdate = g))
    }
    if (c !== null) {
        var $ = a.baseState;
        d = 0,
        _ = b = g = null,
        h = c;
        do {
            var _e = h.lane
              , tt = h.eventTime;
            if ((o & _e) === _e) {
                _ !== null && (_ = _.next = {
                    eventTime: tt,
                    lane: 0,
                    tag: h.tag,
                    payload: h.payload,
                    callback: h.callback,
                    next: null
                });
                e: {
                    var rt = s
                      , et = h;
                    switch (_e = e,
                    tt = i,
                    et.tag) {
                    case 1:
                        if (rt = et.payload,
                        typeof rt == "function") {
                            $ = rt.call(tt, $, _e);
                            break e
                        }
                        $ = rt;
                        break e;
                    case 3:
                        rt.flags = rt.flags & -65537 | 128;
                    case 0:
                        if (rt = et.payload,
                        _e = typeof rt == "function" ? rt.call(tt, $, _e) : rt,
                        _e == null)
                            break e;
                        $ = A({}, $, _e);
                        break e;
                    case 2:
                        jh = !0
                    }
                }
                h.callback !== null && h.lane !== 0 && (s.flags |= 64,
                _e = a.effects,
                _e === null ? a.effects = [h] : _e.push(h))
            } else
                tt = {
                    eventTime: tt,
                    lane: _e,
                    tag: h.tag,
                    payload: h.payload,
                    callback: h.callback,
                    next: null
                },
                _ === null ? (b = _ = tt,
                g = $) : _ = _.next = tt,
                d |= _e;
            if (h = h.next,
            h === null) {
                if (h = a.shared.pending,
                h === null)
                    break;
                _e = h,
                h = _e.next,
                _e.next = null,
                a.lastBaseUpdate = _e,
                a.shared.pending = null
            }
        } while (!0);
        if (_ === null && (g = $),
        a.baseState = g,
        a.firstBaseUpdate = b,
        a.lastBaseUpdate = _,
        e = a.shared.interleaved,
        e !== null) {
            a = e;
            do
                d |= a.lane,
                a = a.next;
            while (a !== e)
        } else
            c === null && (a.shared.lanes = 0);
        rh |= d,
        s.lanes = d,
        s.memoizedState = $
    }
}
function sh(s, e, i) {
    if (s = e.effects,
    e.effects = null,
    s !== null)
        for (e = 0; e < s.length; e++) {
            var o = s[e]
              , a = o.callback;
            if (a !== null) {
                if (o.callback = null,
                o = i,
                typeof a != "function")
                    throw Error(p(191, a));
                a.call(o)
            }
        }
}
var th = {}
  , uh = Uf(th)
  , vh$1 = Uf(th)
  , wh = Uf(th);
function xh(s) {
    if (s === th)
        throw Error(p(174));
    return s
}
function yh(s, e) {
    switch (G(wh, e),
    G(vh$1, s),
    G(uh, th),
    s = e.nodeType,
    s) {
    case 9:
    case 11:
        e = (e = e.documentElement) ? e.namespaceURI : lb(null, "");
        break;
    default:
        s = s === 8 ? e.parentNode : e,
        e = s.namespaceURI || null,
        s = s.tagName,
        e = lb(e, s)
    }
    E$1(uh),
    G(uh, e)
}
function zh() {
    E$1(uh),
    E$1(vh$1),
    E$1(wh)
}
function Ah(s) {
    xh(wh.current);
    var e = xh(uh.current)
      , i = lb(e, s.type);
    e !== i && (G(vh$1, s),
    G(uh, i))
}
function Bh(s) {
    vh$1.current === s && (E$1(uh),
    E$1(vh$1))
}
var L$1 = Uf(0);
function Ch(s) {
    for (var e = s; e !== null; ) {
        if (e.tag === 13) {
            var i = e.memoizedState;
            if (i !== null && (i = i.dehydrated,
            i === null || i.data === "$?" || i.data === "$!"))
                return e
        } else if (e.tag === 19 && e.memoizedProps.revealOrder !== void 0) {
            if (e.flags & 128)
                return e
        } else if (e.child !== null) {
            e.child.return = e,
            e = e.child;
            continue
        }
        if (e === s)
            break;
        for (; e.sibling === null; ) {
            if (e.return === null || e.return === s)
                return null;
            e = e.return
        }
        e.sibling.return = e.return,
        e = e.sibling
    }
    return null
}
var Dh = [];
function Eh() {
    for (var s = 0; s < Dh.length; s++)
        Dh[s]._workInProgressVersionPrimary = null;
    Dh.length = 0
}
var Fh = ua.ReactCurrentDispatcher
  , Gh = ua.ReactCurrentBatchConfig
  , Hh = 0
  , M = null
  , N = null
  , O = null
  , Ih = !1
  , Jh = !1
  , Kh = 0
  , Lh = 0;
function P$1() {
    throw Error(p(321))
}
function Mh(s, e) {
    if (e === null)
        return !1;
    for (var i = 0; i < e.length && i < s.length; i++)
        if (!He(s[i], e[i]))
            return !1;
    return !0
}
function Nh(s, e, i, o, a, c) {
    if (Hh = c,
    M = e,
    e.memoizedState = null,
    e.updateQueue = null,
    e.lanes = 0,
    Fh.current = s === null || s.memoizedState === null ? Oh : Ph,
    s = i(o, a),
    Jh) {
        c = 0;
        do {
            if (Jh = !1,
            Kh = 0,
            25 <= c)
                throw Error(p(301));
            c += 1,
            O = N = null,
            e.updateQueue = null,
            Fh.current = Qh,
            s = i(o, a)
        } while (Jh)
    }
    if (Fh.current = Rh,
    e = N !== null && N.next !== null,
    Hh = 0,
    O = N = M = null,
    Ih = !1,
    e)
        throw Error(p(300));
    return s
}
function Sh() {
    var s = Kh !== 0;
    return Kh = 0,
    s
}
function Th() {
    var s = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
    };
    return O === null ? M.memoizedState = O = s : O = O.next = s,
    O
}
function Uh() {
    if (N === null) {
        var s = M.alternate;
        s = s !== null ? s.memoizedState : null
    } else
        s = N.next;
    var e = O === null ? M.memoizedState : O.next;
    if (e !== null)
        O = e,
        N = s;
    else {
        if (s === null)
            throw Error(p(310));
        N = s,
        s = {
            memoizedState: N.memoizedState,
            baseState: N.baseState,
            baseQueue: N.baseQueue,
            queue: N.queue,
            next: null
        },
        O === null ? M.memoizedState = O = s : O = O.next = s
    }
    return O
}
function Vh(s, e) {
    return typeof e == "function" ? e(s) : e
}
function Wh(s) {
    var e = Uh()
      , i = e.queue;
    if (i === null)
        throw Error(p(311));
    i.lastRenderedReducer = s;
    var o = N
      , a = o.baseQueue
      , c = i.pending;
    if (c !== null) {
        if (a !== null) {
            var d = a.next;
            a.next = c.next,
            c.next = d
        }
        o.baseQueue = a = c,
        i.pending = null
    }
    if (a !== null) {
        c = a.next,
        o = o.baseState;
        var h = d = null
          , g = null
          , b = c;
        do {
            var _ = b.lane;
            if ((Hh & _) === _)
                g !== null && (g = g.next = {
                    lane: 0,
                    action: b.action,
                    hasEagerState: b.hasEagerState,
                    eagerState: b.eagerState,
                    next: null
                }),
                o = b.hasEagerState ? b.eagerState : s(o, b.action);
            else {
                var $ = {
                    lane: _,
                    action: b.action,
                    hasEagerState: b.hasEagerState,
                    eagerState: b.eagerState,
                    next: null
                };
                g === null ? (h = g = $,
                d = o) : g = g.next = $,
                M.lanes |= _,
                rh |= _
            }
            b = b.next
        } while (b !== null && b !== c);
        g === null ? d = o : g.next = h,
        He(o, e.memoizedState) || (dh = !0),
        e.memoizedState = o,
        e.baseState = d,
        e.baseQueue = g,
        i.lastRenderedState = o
    }
    if (s = i.interleaved,
    s !== null) {
        a = s;
        do
            c = a.lane,
            M.lanes |= c,
            rh |= c,
            a = a.next;
        while (a !== s)
    } else
        a === null && (i.lanes = 0);
    return [e.memoizedState, i.dispatch]
}
function Xh(s) {
    var e = Uh()
      , i = e.queue;
    if (i === null)
        throw Error(p(311));
    i.lastRenderedReducer = s;
    var o = i.dispatch
      , a = i.pending
      , c = e.memoizedState;
    if (a !== null) {
        i.pending = null;
        var d = a = a.next;
        do
            c = s(c, d.action),
            d = d.next;
        while (d !== a);
        He(c, e.memoizedState) || (dh = !0),
        e.memoizedState = c,
        e.baseQueue === null && (e.baseState = c),
        i.lastRenderedState = c
    }
    return [c, o]
}
function Yh() {}
function Zh(s, e) {
    var i = M
      , o = Uh()
      , a = e()
      , c = !He(o.memoizedState, a);
    if (c && (o.memoizedState = a,
    dh = !0),
    o = o.queue,
    $h(ai.bind(null, i, o, s), [s]),
    o.getSnapshot !== e || c || O !== null && O.memoizedState.tag & 1) {
        if (i.flags |= 2048,
        bi(9, ci.bind(null, i, o, a, e), void 0, null),
        Q === null)
            throw Error(p(349));
        Hh & 30 || di(i, e, a)
    }
    return a
}
function di(s, e, i) {
    s.flags |= 16384,
    s = {
        getSnapshot: e,
        value: i
    },
    e = M.updateQueue,
    e === null ? (e = {
        lastEffect: null,
        stores: null
    },
    M.updateQueue = e,
    e.stores = [s]) : (i = e.stores,
    i === null ? e.stores = [s] : i.push(s))
}
function ci(s, e, i, o) {
    e.value = i,
    e.getSnapshot = o,
    ei(e) && fi(s)
}
function ai(s, e, i) {
    return i(function() {
        ei(e) && fi(s)
    })
}
function ei(s) {
    var e = s.getSnapshot;
    s = s.value;
    try {
        var i = e();
        return !He(s, i)
    } catch {
        return !0
    }
}
function fi(s) {
    var e = ih(s, 1);
    e !== null && gi(e, s, 1, -1)
}
function hi(s) {
    var e = Th();
    return typeof s == "function" && (s = s()),
    e.memoizedState = e.baseState = s,
    s = {
        pending: null,
        interleaved: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: Vh,
        lastRenderedState: s
    },
    e.queue = s,
    s = s.dispatch = ii.bind(null, M, s),
    [e.memoizedState, s]
}
function bi(s, e, i, o) {
    return s = {
        tag: s,
        create: e,
        destroy: i,
        deps: o,
        next: null
    },
    e = M.updateQueue,
    e === null ? (e = {
        lastEffect: null,
        stores: null
    },
    M.updateQueue = e,
    e.lastEffect = s.next = s) : (i = e.lastEffect,
    i === null ? e.lastEffect = s.next = s : (o = i.next,
    i.next = s,
    s.next = o,
    e.lastEffect = s)),
    s
}
function ji() {
    return Uh().memoizedState
}
function ki(s, e, i, o) {
    var a = Th();
    M.flags |= s,
    a.memoizedState = bi(1 | e, i, void 0, o === void 0 ? null : o)
}
function li(s, e, i, o) {
    var a = Uh();
    o = o === void 0 ? null : o;
    var c = void 0;
    if (N !== null) {
        var d = N.memoizedState;
        if (c = d.destroy,
        o !== null && Mh(o, d.deps)) {
            a.memoizedState = bi(e, i, c, o);
            return
        }
    }
    M.flags |= s,
    a.memoizedState = bi(1 | e, i, c, o)
}
function mi(s, e) {
    return ki(8390656, 8, s, e)
}
function $h(s, e) {
    return li(2048, 8, s, e)
}
function ni(s, e) {
    return li(4, 2, s, e)
}
function oi(s, e) {
    return li(4, 4, s, e)
}
function pi(s, e) {
    if (typeof e == "function")
        return s = s(),
        e(s),
        function() {
            e(null)
        }
        ;
    if (e != null)
        return s = s(),
        e.current = s,
        function() {
            e.current = null
        }
}
function qi(s, e, i) {
    return i = i != null ? i.concat([s]) : null,
    li(4, 4, pi.bind(null, e, s), i)
}
function ri() {}
function si(s, e) {
    var i = Uh();
    e = e === void 0 ? null : e;
    var o = i.memoizedState;
    return o !== null && e !== null && Mh(e, o[1]) ? o[0] : (i.memoizedState = [s, e],
    s)
}
function ti(s, e) {
    var i = Uh();
    e = e === void 0 ? null : e;
    var o = i.memoizedState;
    return o !== null && e !== null && Mh(e, o[1]) ? o[0] : (s = s(),
    i.memoizedState = [s, e],
    s)
}
function ui(s, e, i) {
    return Hh & 21 ? (He(i, e) || (i = yc(),
    M.lanes |= i,
    rh |= i,
    s.baseState = !0),
    e) : (s.baseState && (s.baseState = !1,
    dh = !0),
    s.memoizedState = i)
}
function vi(s, e) {
    var i = C;
    C = i !== 0 && 4 > i ? i : 4,
    s(!0);
    var o = Gh.transition;
    Gh.transition = {};
    try {
        s(!1),
        e()
    } finally {
        C = i,
        Gh.transition = o
    }
}
function wi() {
    return Uh().memoizedState
}
function xi(s, e, i) {
    var o = yi(s);
    if (i = {
        lane: o,
        action: i,
        hasEagerState: !1,
        eagerState: null,
        next: null
    },
    zi(s))
        Ai(e, i);
    else if (i = hh(s, e, i, o),
    i !== null) {
        var a = R();
        gi(i, s, o, a),
        Bi(i, e, o)
    }
}
function ii(s, e, i) {
    var o = yi(s)
      , a = {
        lane: o,
        action: i,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    if (zi(s))
        Ai(e, a);
    else {
        var c = s.alternate;
        if (s.lanes === 0 && (c === null || c.lanes === 0) && (c = e.lastRenderedReducer,
        c !== null))
            try {
                var d = e.lastRenderedState
                  , h = c(d, i);
                if (a.hasEagerState = !0,
                a.eagerState = h,
                He(h, d)) {
                    var g = e.interleaved;
                    g === null ? (a.next = a,
                    gh(e)) : (a.next = g.next,
                    g.next = a),
                    e.interleaved = a;
                    return
                }
            } catch {} finally {}
        i = hh(s, e, a, o),
        i !== null && (a = R(),
        gi(i, s, o, a),
        Bi(i, e, o))
    }
}
function zi(s) {
    var e = s.alternate;
    return s === M || e !== null && e === M
}
function Ai(s, e) {
    Jh = Ih = !0;
    var i = s.pending;
    i === null ? e.next = e : (e.next = i.next,
    i.next = e),
    s.pending = e
}
function Bi(s, e, i) {
    if (i & 4194240) {
        var o = e.lanes;
        o &= s.pendingLanes,
        i |= o,
        e.lanes = i,
        Cc(s, i)
    }
}
var Rh = {
    readContext: eh,
    useCallback: P$1,
    useContext: P$1,
    useEffect: P$1,
    useImperativeHandle: P$1,
    useInsertionEffect: P$1,
    useLayoutEffect: P$1,
    useMemo: P$1,
    useReducer: P$1,
    useRef: P$1,
    useState: P$1,
    useDebugValue: P$1,
    useDeferredValue: P$1,
    useTransition: P$1,
    useMutableSource: P$1,
    useSyncExternalStore: P$1,
    useId: P$1,
    unstable_isNewReconciler: !1
}
  , Oh = {
    readContext: eh,
    useCallback: function(s, e) {
        return Th().memoizedState = [s, e === void 0 ? null : e],
        s
    },
    useContext: eh,
    useEffect: mi,
    useImperativeHandle: function(s, e, i) {
        return i = i != null ? i.concat([s]) : null,
        ki(4194308, 4, pi.bind(null, e, s), i)
    },
    useLayoutEffect: function(s, e) {
        return ki(4194308, 4, s, e)
    },
    useInsertionEffect: function(s, e) {
        return ki(4, 2, s, e)
    },
    useMemo: function(s, e) {
        var i = Th();
        return e = e === void 0 ? null : e,
        s = s(),
        i.memoizedState = [s, e],
        s
    },
    useReducer: function(s, e, i) {
        var o = Th();
        return e = i !== void 0 ? i(e) : e,
        o.memoizedState = o.baseState = e,
        s = {
            pending: null,
            interleaved: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: s,
            lastRenderedState: e
        },
        o.queue = s,
        s = s.dispatch = xi.bind(null, M, s),
        [o.memoizedState, s]
    },
    useRef: function(s) {
        var e = Th();
        return s = {
            current: s
        },
        e.memoizedState = s
    },
    useState: hi,
    useDebugValue: ri,
    useDeferredValue: function(s) {
        return Th().memoizedState = s
    },
    useTransition: function() {
        var s = hi(!1)
          , e = s[0];
        return s = vi.bind(null, s[1]),
        Th().memoizedState = s,
        [e, s]
    },
    useMutableSource: function() {},
    useSyncExternalStore: function(s, e, i) {
        var o = M
          , a = Th();
        if (I) {
            if (i === void 0)
                throw Error(p(407));
            i = i()
        } else {
            if (i = e(),
            Q === null)
                throw Error(p(349));
            Hh & 30 || di(o, e, i)
        }
        a.memoizedState = i;
        var c = {
            value: i,
            getSnapshot: e
        };
        return a.queue = c,
        mi(ai.bind(null, o, c, s), [s]),
        o.flags |= 2048,
        bi(9, ci.bind(null, o, c, i, e), void 0, null),
        i
    },
    useId: function() {
        var s = Th()
          , e = Q.identifierPrefix;
        if (I) {
            var i = sg
              , o = rg;
            i = (o & ~(1 << 32 - oc(o) - 1)).toString(32) + i,
            e = ":" + e + "R" + i,
            i = Kh++,
            0 < i && (e += "H" + i.toString(32)),
            e += ":"
        } else
            i = Lh++,
            e = ":" + e + "r" + i.toString(32) + ":";
        return s.memoizedState = e
    },
    unstable_isNewReconciler: !1
}
  , Ph = {
    readContext: eh,
    useCallback: si,
    useContext: eh,
    useEffect: $h,
    useImperativeHandle: qi,
    useInsertionEffect: ni,
    useLayoutEffect: oi,
    useMemo: ti,
    useReducer: Wh,
    useRef: ji,
    useState: function() {
        return Wh(Vh)
    },
    useDebugValue: ri,
    useDeferredValue: function(s) {
        var e = Uh();
        return ui(e, N.memoizedState, s)
    },
    useTransition: function() {
        var s = Wh(Vh)[0]
          , e = Uh().memoizedState;
        return [s, e]
    },
    useMutableSource: Yh,
    useSyncExternalStore: Zh,
    useId: wi,
    unstable_isNewReconciler: !1
}
  , Qh = {
    readContext: eh,
    useCallback: si,
    useContext: eh,
    useEffect: $h,
    useImperativeHandle: qi,
    useInsertionEffect: ni,
    useLayoutEffect: oi,
    useMemo: ti,
    useReducer: Xh,
    useRef: ji,
    useState: function() {
        return Xh(Vh)
    },
    useDebugValue: ri,
    useDeferredValue: function(s) {
        var e = Uh();
        return N === null ? e.memoizedState = s : ui(e, N.memoizedState, s)
    },
    useTransition: function() {
        var s = Xh(Vh)[0]
          , e = Uh().memoizedState;
        return [s, e]
    },
    useMutableSource: Yh,
    useSyncExternalStore: Zh,
    useId: wi,
    unstable_isNewReconciler: !1
};
function Ci(s, e) {
    if (s && s.defaultProps) {
        e = A({}, e),
        s = s.defaultProps;
        for (var i in s)
            e[i] === void 0 && (e[i] = s[i]);
        return e
    }
    return e
}
function Di(s, e, i, o) {
    e = s.memoizedState,
    i = i(o, e),
    i = i == null ? e : A({}, e, i),
    s.memoizedState = i,
    s.lanes === 0 && (s.updateQueue.baseState = i)
}
var Ei = {
    isMounted: function(s) {
        return (s = s._reactInternals) ? Vb(s) === s : !1
    },
    enqueueSetState: function(s, e, i) {
        s = s._reactInternals;
        var o = R()
          , a = yi(s)
          , c = mh(o, a);
        c.payload = e,
        i != null && (c.callback = i),
        e = nh(s, c, a),
        e !== null && (gi(e, s, a, o),
        oh(e, s, a))
    },
    enqueueReplaceState: function(s, e, i) {
        s = s._reactInternals;
        var o = R()
          , a = yi(s)
          , c = mh(o, a);
        c.tag = 1,
        c.payload = e,
        i != null && (c.callback = i),
        e = nh(s, c, a),
        e !== null && (gi(e, s, a, o),
        oh(e, s, a))
    },
    enqueueForceUpdate: function(s, e) {
        s = s._reactInternals;
        var i = R()
          , o = yi(s)
          , a = mh(i, o);
        a.tag = 2,
        e != null && (a.callback = e),
        e = nh(s, a, o),
        e !== null && (gi(e, s, o, i),
        oh(e, s, o))
    }
};
function Fi(s, e, i, o, a, c, d) {
    return s = s.stateNode,
    typeof s.shouldComponentUpdate == "function" ? s.shouldComponentUpdate(o, c, d) : e.prototype && e.prototype.isPureReactComponent ? !Ie(i, o) || !Ie(a, c) : !0
}
function Gi(s, e, i) {
    var o = !1
      , a = Vf
      , c = e.contextType;
    return typeof c == "object" && c !== null ? c = eh(c) : (a = Zf(e) ? Xf : H.current,
    o = e.contextTypes,
    c = (o = o != null) ? Yf(s, a) : Vf),
    e = new e(i,c),
    s.memoizedState = e.state !== null && e.state !== void 0 ? e.state : null,
    e.updater = Ei,
    s.stateNode = e,
    e._reactInternals = s,
    o && (s = s.stateNode,
    s.__reactInternalMemoizedUnmaskedChildContext = a,
    s.__reactInternalMemoizedMaskedChildContext = c),
    e
}
function Hi(s, e, i, o) {
    s = e.state,
    typeof e.componentWillReceiveProps == "function" && e.componentWillReceiveProps(i, o),
    typeof e.UNSAFE_componentWillReceiveProps == "function" && e.UNSAFE_componentWillReceiveProps(i, o),
    e.state !== s && Ei.enqueueReplaceState(e, e.state, null)
}
function Ii(s, e, i, o) {
    var a = s.stateNode;
    a.props = i,
    a.state = s.memoizedState,
    a.refs = {},
    kh(s);
    var c = e.contextType;
    typeof c == "object" && c !== null ? a.context = eh(c) : (c = Zf(e) ? Xf : H.current,
    a.context = Yf(s, c)),
    a.state = s.memoizedState,
    c = e.getDerivedStateFromProps,
    typeof c == "function" && (Di(s, e, c, i),
    a.state = s.memoizedState),
    typeof e.getDerivedStateFromProps == "function" || typeof a.getSnapshotBeforeUpdate == "function" || typeof a.UNSAFE_componentWillMount != "function" && typeof a.componentWillMount != "function" || (e = a.state,
    typeof a.componentWillMount == "function" && a.componentWillMount(),
    typeof a.UNSAFE_componentWillMount == "function" && a.UNSAFE_componentWillMount(),
    e !== a.state && Ei.enqueueReplaceState(a, a.state, null),
    qh(s, i, a, o),
    a.state = s.memoizedState),
    typeof a.componentDidMount == "function" && (s.flags |= 4194308)
}
function Ji(s, e) {
    try {
        var i = ""
          , o = e;
        do
            i += Pa(o),
            o = o.return;
        while (o);
        var a = i
    } catch (c) {
        a = `
Error generating stack: ` + c.message + `
` + c.stack
    }
    return {
        value: s,
        source: e,
        stack: a,
        digest: null
    }
}
function Ki(s, e, i) {
    return {
        value: s,
        source: null,
        stack: i ?? null,
        digest: e ?? null
    }
}
function Li(s, e) {
    try {
        console.error(e.value)
    } catch (i) {
        setTimeout(function() {
            throw i
        })
    }
}
var Mi = typeof WeakMap == "function" ? WeakMap : Map;
function Ni(s, e, i) {
    i = mh(-1, i),
    i.tag = 3,
    i.payload = {
        element: null
    };
    var o = e.value;
    return i.callback = function() {
        Oi || (Oi = !0,
        Pi = o),
        Li(s, e)
    }
    ,
    i
}
function Qi(s, e, i) {
    i = mh(-1, i),
    i.tag = 3;
    var o = s.type.getDerivedStateFromError;
    if (typeof o == "function") {
        var a = e.value;
        i.payload = function() {
            return o(a)
        }
        ,
        i.callback = function() {
            Li(s, e)
        }
    }
    var c = s.stateNode;
    return c !== null && typeof c.componentDidCatch == "function" && (i.callback = function() {
        Li(s, e),
        typeof o != "function" && (Ri === null ? Ri = new Set([this]) : Ri.add(this));
        var d = e.stack;
        this.componentDidCatch(e.value, {
            componentStack: d !== null ? d : ""
        })
    }
    ),
    i
}
function Si(s, e, i) {
    var o = s.pingCache;
    if (o === null) {
        o = s.pingCache = new Mi;
        var a = new Set;
        o.set(e, a)
    } else
        a = o.get(e),
        a === void 0 && (a = new Set,
        o.set(e, a));
    a.has(i) || (a.add(i),
    s = Ti.bind(null, s, e, i),
    e.then(s, s))
}
function Ui(s) {
    do {
        var e;
        if ((e = s.tag === 13) && (e = s.memoizedState,
        e = e !== null ? e.dehydrated !== null : !0),
        e)
            return s;
        s = s.return
    } while (s !== null);
    return null
}
function Vi(s, e, i, o, a) {
    return s.mode & 1 ? (s.flags |= 65536,
    s.lanes = a,
    s) : (s === e ? s.flags |= 65536 : (s.flags |= 128,
    i.flags |= 131072,
    i.flags &= -52805,
    i.tag === 1 && (i.alternate === null ? i.tag = 17 : (e = mh(-1, 1),
    e.tag = 2,
    nh(i, e, 1))),
    i.lanes |= 1),
    s)
}
var Wi = ua.ReactCurrentOwner
  , dh = !1;
function Xi(s, e, i, o) {
    e.child = s === null ? Vg(e, null, i, o) : Ug(e, s.child, i, o)
}
function Yi(s, e, i, o, a) {
    i = i.render;
    var c = e.ref;
    return ch(e, a),
    o = Nh(s, e, i, o, c, a),
    i = Sh(),
    s !== null && !dh ? (e.updateQueue = s.updateQueue,
    e.flags &= -2053,
    s.lanes &= ~a,
    Zi(s, e, a)) : (I && i && vg(e),
    e.flags |= 1,
    Xi(s, e, o, a),
    e.child)
}
function $i(s, e, i, o, a) {
    if (s === null) {
        var c = i.type;
        return typeof c == "function" && !aj(c) && c.defaultProps === void 0 && i.compare === null && i.defaultProps === void 0 ? (e.tag = 15,
        e.type = c,
        bj(s, e, c, o, a)) : (s = Rg(i.type, null, o, e, e.mode, a),
        s.ref = e.ref,
        s.return = e,
        e.child = s)
    }
    if (c = s.child,
    !(s.lanes & a)) {
        var d = c.memoizedProps;
        if (i = i.compare,
        i = i !== null ? i : Ie,
        i(d, o) && s.ref === e.ref)
            return Zi(s, e, a)
    }
    return e.flags |= 1,
    s = Pg(c, o),
    s.ref = e.ref,
    s.return = e,
    e.child = s
}
function bj(s, e, i, o, a) {
    if (s !== null) {
        var c = s.memoizedProps;
        if (Ie(c, o) && s.ref === e.ref)
            if (dh = !1,
            e.pendingProps = o = c,
            (s.lanes & a) !== 0)
                s.flags & 131072 && (dh = !0);
            else
                return e.lanes = s.lanes,
                Zi(s, e, a)
    }
    return cj(s, e, i, o, a)
}
function dj(s, e, i) {
    var o = e.pendingProps
      , a = o.children
      , c = s !== null ? s.memoizedState : null;
    if (o.mode === "hidden")
        if (!(e.mode & 1))
            e.memoizedState = {
                baseLanes: 0,
                cachePool: null,
                transitions: null
            },
            G(ej, fj),
            fj |= i;
        else {
            if (!(i & 1073741824))
                return s = c !== null ? c.baseLanes | i : i,
                e.lanes = e.childLanes = 1073741824,
                e.memoizedState = {
                    baseLanes: s,
                    cachePool: null,
                    transitions: null
                },
                e.updateQueue = null,
                G(ej, fj),
                fj |= s,
                null;
            e.memoizedState = {
                baseLanes: 0,
                cachePool: null,
                transitions: null
            },
            o = c !== null ? c.baseLanes : i,
            G(ej, fj),
            fj |= o
        }
    else
        c !== null ? (o = c.baseLanes | i,
        e.memoizedState = null) : o = i,
        G(ej, fj),
        fj |= o;
    return Xi(s, e, a, i),
    e.child
}
function gj(s, e) {
    var i = e.ref;
    (s === null && i !== null || s !== null && s.ref !== i) && (e.flags |= 512,
    e.flags |= 2097152)
}
function cj(s, e, i, o, a) {
    var c = Zf(i) ? Xf : H.current;
    return c = Yf(e, c),
    ch(e, a),
    i = Nh(s, e, i, o, c, a),
    o = Sh(),
    s !== null && !dh ? (e.updateQueue = s.updateQueue,
    e.flags &= -2053,
    s.lanes &= ~a,
    Zi(s, e, a)) : (I && o && vg(e),
    e.flags |= 1,
    Xi(s, e, i, a),
    e.child)
}
function hj(s, e, i, o, a) {
    if (Zf(i)) {
        var c = !0;
        cg(e)
    } else
        c = !1;
    if (ch(e, a),
    e.stateNode === null)
        ij(s, e),
        Gi(e, i, o),
        Ii(e, i, o, a),
        o = !0;
    else if (s === null) {
        var d = e.stateNode
          , h = e.memoizedProps;
        d.props = h;
        var g = d.context
          , b = i.contextType;
        typeof b == "object" && b !== null ? b = eh(b) : (b = Zf(i) ? Xf : H.current,
        b = Yf(e, b));
        var _ = i.getDerivedStateFromProps
          , $ = typeof _ == "function" || typeof d.getSnapshotBeforeUpdate == "function";
        $ || typeof d.UNSAFE_componentWillReceiveProps != "function" && typeof d.componentWillReceiveProps != "function" || (h !== o || g !== b) && Hi(e, d, o, b),
        jh = !1;
        var _e = e.memoizedState;
        d.state = _e,
        qh(e, o, d, a),
        g = e.memoizedState,
        h !== o || _e !== g || Wf.current || jh ? (typeof _ == "function" && (Di(e, i, _, o),
        g = e.memoizedState),
        (h = jh || Fi(e, i, h, o, _e, g, b)) ? ($ || typeof d.UNSAFE_componentWillMount != "function" && typeof d.componentWillMount != "function" || (typeof d.componentWillMount == "function" && d.componentWillMount(),
        typeof d.UNSAFE_componentWillMount == "function" && d.UNSAFE_componentWillMount()),
        typeof d.componentDidMount == "function" && (e.flags |= 4194308)) : (typeof d.componentDidMount == "function" && (e.flags |= 4194308),
        e.memoizedProps = o,
        e.memoizedState = g),
        d.props = o,
        d.state = g,
        d.context = b,
        o = h) : (typeof d.componentDidMount == "function" && (e.flags |= 4194308),
        o = !1)
    } else {
        d = e.stateNode,
        lh(s, e),
        h = e.memoizedProps,
        b = e.type === e.elementType ? h : Ci(e.type, h),
        d.props = b,
        $ = e.pendingProps,
        _e = d.context,
        g = i.contextType,
        typeof g == "object" && g !== null ? g = eh(g) : (g = Zf(i) ? Xf : H.current,
        g = Yf(e, g));
        var tt = i.getDerivedStateFromProps;
        (_ = typeof tt == "function" || typeof d.getSnapshotBeforeUpdate == "function") || typeof d.UNSAFE_componentWillReceiveProps != "function" && typeof d.componentWillReceiveProps != "function" || (h !== $ || _e !== g) && Hi(e, d, o, g),
        jh = !1,
        _e = e.memoizedState,
        d.state = _e,
        qh(e, o, d, a);
        var rt = e.memoizedState;
        h !== $ || _e !== rt || Wf.current || jh ? (typeof tt == "function" && (Di(e, i, tt, o),
        rt = e.memoizedState),
        (b = jh || Fi(e, i, b, o, _e, rt, g) || !1) ? (_ || typeof d.UNSAFE_componentWillUpdate != "function" && typeof d.componentWillUpdate != "function" || (typeof d.componentWillUpdate == "function" && d.componentWillUpdate(o, rt, g),
        typeof d.UNSAFE_componentWillUpdate == "function" && d.UNSAFE_componentWillUpdate(o, rt, g)),
        typeof d.componentDidUpdate == "function" && (e.flags |= 4),
        typeof d.getSnapshotBeforeUpdate == "function" && (e.flags |= 1024)) : (typeof d.componentDidUpdate != "function" || h === s.memoizedProps && _e === s.memoizedState || (e.flags |= 4),
        typeof d.getSnapshotBeforeUpdate != "function" || h === s.memoizedProps && _e === s.memoizedState || (e.flags |= 1024),
        e.memoizedProps = o,
        e.memoizedState = rt),
        d.props = o,
        d.state = rt,
        d.context = g,
        o = b) : (typeof d.componentDidUpdate != "function" || h === s.memoizedProps && _e === s.memoizedState || (e.flags |= 4),
        typeof d.getSnapshotBeforeUpdate != "function" || h === s.memoizedProps && _e === s.memoizedState || (e.flags |= 1024),
        o = !1)
    }
    return jj(s, e, i, o, c, a)
}
function jj(s, e, i, o, a, c) {
    gj(s, e);
    var d = (e.flags & 128) !== 0;
    if (!o && !d)
        return a && dg(e, i, !1),
        Zi(s, e, c);
    o = e.stateNode,
    Wi.current = e;
    var h = d && typeof i.getDerivedStateFromError != "function" ? null : o.render();
    return e.flags |= 1,
    s !== null && d ? (e.child = Ug(e, s.child, null, c),
    e.child = Ug(e, null, h, c)) : Xi(s, e, h, c),
    e.memoizedState = o.state,
    a && dg(e, i, !0),
    e.child
}
function kj(s) {
    var e = s.stateNode;
    e.pendingContext ? ag(s, e.pendingContext, e.pendingContext !== e.context) : e.context && ag(s, e.context, !1),
    yh(s, e.containerInfo)
}
function lj(s, e, i, o, a) {
    return Ig(),
    Jg(a),
    e.flags |= 256,
    Xi(s, e, i, o),
    e.child
}
var mj = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0
};
function nj(s) {
    return {
        baseLanes: s,
        cachePool: null,
        transitions: null
    }
}
function oj(s, e, i) {
    var o = e.pendingProps, a = L$1.current, c = !1, d = (e.flags & 128) !== 0, h;
    if ((h = d) || (h = s !== null && s.memoizedState === null ? !1 : (a & 2) !== 0),
    h ? (c = !0,
    e.flags &= -129) : (s === null || s.memoizedState !== null) && (a |= 1),
    G(L$1, a & 1),
    s === null)
        return Eg(e),
        s = e.memoizedState,
        s !== null && (s = s.dehydrated,
        s !== null) ? (e.mode & 1 ? s.data === "$!" ? e.lanes = 8 : e.lanes = 1073741824 : e.lanes = 1,
        null) : (d = o.children,
        s = o.fallback,
        c ? (o = e.mode,
        c = e.child,
        d = {
            mode: "hidden",
            children: d
        },
        !(o & 1) && c !== null ? (c.childLanes = 0,
        c.pendingProps = d) : c = pj(d, o, 0, null),
        s = Tg(s, o, i, null),
        c.return = e,
        s.return = e,
        c.sibling = s,
        e.child = c,
        e.child.memoizedState = nj(i),
        e.memoizedState = mj,
        s) : qj(e, d));
    if (a = s.memoizedState,
    a !== null && (h = a.dehydrated,
    h !== null))
        return rj(s, e, d, o, h, a, i);
    if (c) {
        c = o.fallback,
        d = e.mode,
        a = s.child,
        h = a.sibling;
        var g = {
            mode: "hidden",
            children: o.children
        };
        return !(d & 1) && e.child !== a ? (o = e.child,
        o.childLanes = 0,
        o.pendingProps = g,
        e.deletions = null) : (o = Pg(a, g),
        o.subtreeFlags = a.subtreeFlags & 14680064),
        h !== null ? c = Pg(h, c) : (c = Tg(c, d, i, null),
        c.flags |= 2),
        c.return = e,
        o.return = e,
        o.sibling = c,
        e.child = o,
        o = c,
        c = e.child,
        d = s.child.memoizedState,
        d = d === null ? nj(i) : {
            baseLanes: d.baseLanes | i,
            cachePool: null,
            transitions: d.transitions
        },
        c.memoizedState = d,
        c.childLanes = s.childLanes & ~i,
        e.memoizedState = mj,
        o
    }
    return c = s.child,
    s = c.sibling,
    o = Pg(c, {
        mode: "visible",
        children: o.children
    }),
    !(e.mode & 1) && (o.lanes = i),
    o.return = e,
    o.sibling = null,
    s !== null && (i = e.deletions,
    i === null ? (e.deletions = [s],
    e.flags |= 16) : i.push(s)),
    e.child = o,
    e.memoizedState = null,
    o
}
function qj(s, e) {
    return e = pj({
        mode: "visible",
        children: e
    }, s.mode, 0, null),
    e.return = s,
    s.child = e
}
function sj(s, e, i, o) {
    return o !== null && Jg(o),
    Ug(e, s.child, null, i),
    s = qj(e, e.pendingProps.children),
    s.flags |= 2,
    e.memoizedState = null,
    s
}
function rj(s, e, i, o, a, c, d) {
    if (i)
        return e.flags & 256 ? (e.flags &= -257,
        o = Ki(Error(p(422))),
        sj(s, e, d, o)) : e.memoizedState !== null ? (e.child = s.child,
        e.flags |= 128,
        null) : (c = o.fallback,
        a = e.mode,
        o = pj({
            mode: "visible",
            children: o.children
        }, a, 0, null),
        c = Tg(c, a, d, null),
        c.flags |= 2,
        o.return = e,
        c.return = e,
        o.sibling = c,
        e.child = o,
        e.mode & 1 && Ug(e, s.child, null, d),
        e.child.memoizedState = nj(d),
        e.memoizedState = mj,
        c);
    if (!(e.mode & 1))
        return sj(s, e, d, null);
    if (a.data === "$!") {
        if (o = a.nextSibling && a.nextSibling.dataset,
        o)
            var h = o.dgst;
        return o = h,
        c = Error(p(419)),
        o = Ki(c, o, void 0),
        sj(s, e, d, o)
    }
    if (h = (d & s.childLanes) !== 0,
    dh || h) {
        if (o = Q,
        o !== null) {
            switch (d & -d) {
            case 4:
                a = 2;
                break;
            case 16:
                a = 8;
                break;
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
                a = 32;
                break;
            case 536870912:
                a = 268435456;
                break;
            default:
                a = 0
            }
            a = a & (o.suspendedLanes | d) ? 0 : a,
            a !== 0 && a !== c.retryLane && (c.retryLane = a,
            ih(s, a),
            gi(o, s, a, -1))
        }
        return tj(),
        o = Ki(Error(p(421))),
        sj(s, e, d, o)
    }
    return a.data === "$?" ? (e.flags |= 128,
    e.child = s.child,
    e = uj.bind(null, s),
    a._reactRetry = e,
    null) : (s = c.treeContext,
    yg = Lf(a.nextSibling),
    xg = e,
    I = !0,
    zg = null,
    s !== null && (og[pg++] = rg,
    og[pg++] = sg,
    og[pg++] = qg,
    rg = s.id,
    sg = s.overflow,
    qg = e),
    e = qj(e, o.children),
    e.flags |= 4096,
    e)
}
function vj(s, e, i) {
    s.lanes |= e;
    var o = s.alternate;
    o !== null && (o.lanes |= e),
    bh(s.return, e, i)
}
function wj(s, e, i, o, a) {
    var c = s.memoizedState;
    c === null ? s.memoizedState = {
        isBackwards: e,
        rendering: null,
        renderingStartTime: 0,
        last: o,
        tail: i,
        tailMode: a
    } : (c.isBackwards = e,
    c.rendering = null,
    c.renderingStartTime = 0,
    c.last = o,
    c.tail = i,
    c.tailMode = a)
}
function xj(s, e, i) {
    var o = e.pendingProps
      , a = o.revealOrder
      , c = o.tail;
    if (Xi(s, e, o.children, i),
    o = L$1.current,
    o & 2)
        o = o & 1 | 2,
        e.flags |= 128;
    else {
        if (s !== null && s.flags & 128)
            e: for (s = e.child; s !== null; ) {
                if (s.tag === 13)
                    s.memoizedState !== null && vj(s, i, e);
                else if (s.tag === 19)
                    vj(s, i, e);
                else if (s.child !== null) {
                    s.child.return = s,
                    s = s.child;
                    continue
                }
                if (s === e)
                    break e;
                for (; s.sibling === null; ) {
                    if (s.return === null || s.return === e)
                        break e;
                    s = s.return
                }
                s.sibling.return = s.return,
                s = s.sibling
            }
        o &= 1
    }
    if (G(L$1, o),
    !(e.mode & 1))
        e.memoizedState = null;
    else
        switch (a) {
        case "forwards":
            for (i = e.child,
            a = null; i !== null; )
                s = i.alternate,
                s !== null && Ch(s) === null && (a = i),
                i = i.sibling;
            i = a,
            i === null ? (a = e.child,
            e.child = null) : (a = i.sibling,
            i.sibling = null),
            wj(e, !1, a, i, c);
            break;
        case "backwards":
            for (i = null,
            a = e.child,
            e.child = null; a !== null; ) {
                if (s = a.alternate,
                s !== null && Ch(s) === null) {
                    e.child = a;
                    break
                }
                s = a.sibling,
                a.sibling = i,
                i = a,
                a = s
            }
            wj(e, !0, i, null, c);
            break;
        case "together":
            wj(e, !1, null, null, void 0);
            break;
        default:
            e.memoizedState = null
        }
    return e.child
}
function ij(s, e) {
    !(e.mode & 1) && s !== null && (s.alternate = null,
    e.alternate = null,
    e.flags |= 2)
}
function Zi(s, e, i) {
    if (s !== null && (e.dependencies = s.dependencies),
    rh |= e.lanes,
    !(i & e.childLanes))
        return null;
    if (s !== null && e.child !== s.child)
        throw Error(p(153));
    if (e.child !== null) {
        for (s = e.child,
        i = Pg(s, s.pendingProps),
        e.child = i,
        i.return = e; s.sibling !== null; )
            s = s.sibling,
            i = i.sibling = Pg(s, s.pendingProps),
            i.return = e;
        i.sibling = null
    }
    return e.child
}
function yj(s, e, i) {
    switch (e.tag) {
    case 3:
        kj(e),
        Ig();
        break;
    case 5:
        Ah(e);
        break;
    case 1:
        Zf(e.type) && cg(e);
        break;
    case 4:
        yh(e, e.stateNode.containerInfo);
        break;
    case 10:
        var o = e.type._context
          , a = e.memoizedProps.value;
        G(Wg, o._currentValue),
        o._currentValue = a;
        break;
    case 13:
        if (o = e.memoizedState,
        o !== null)
            return o.dehydrated !== null ? (G(L$1, L$1.current & 1),
            e.flags |= 128,
            null) : i & e.child.childLanes ? oj(s, e, i) : (G(L$1, L$1.current & 1),
            s = Zi(s, e, i),
            s !== null ? s.sibling : null);
        G(L$1, L$1.current & 1);
        break;
    case 19:
        if (o = (i & e.childLanes) !== 0,
        s.flags & 128) {
            if (o)
                return xj(s, e, i);
            e.flags |= 128
        }
        if (a = e.memoizedState,
        a !== null && (a.rendering = null,
        a.tail = null,
        a.lastEffect = null),
        G(L$1, L$1.current),
        o)
            break;
        return null;
    case 22:
    case 23:
        return e.lanes = 0,
        dj(s, e, i)
    }
    return Zi(s, e, i)
}
var zj, Aj, Bj, Cj;
zj = function(s, e) {
    for (var i = e.child; i !== null; ) {
        if (i.tag === 5 || i.tag === 6)
            s.appendChild(i.stateNode);
        else if (i.tag !== 4 && i.child !== null) {
            i.child.return = i,
            i = i.child;
            continue
        }
        if (i === e)
            break;
        for (; i.sibling === null; ) {
            if (i.return === null || i.return === e)
                return;
            i = i.return
        }
        i.sibling.return = i.return,
        i = i.sibling
    }
}
;
Aj = function() {}
;
Bj = function(s, e, i, o) {
    var a = s.memoizedProps;
    if (a !== o) {
        s = e.stateNode,
        xh(uh.current);
        var c = null;
        switch (i) {
        case "input":
            a = Ya(s, a),
            o = Ya(s, o),
            c = [];
            break;
        case "select":
            a = A({}, a, {
                value: void 0
            }),
            o = A({}, o, {
                value: void 0
            }),
            c = [];
            break;
        case "textarea":
            a = gb(s, a),
            o = gb(s, o),
            c = [];
            break;
        default:
            typeof a.onClick != "function" && typeof o.onClick == "function" && (s.onclick = Bf)
        }
        ub(i, o);
        var d;
        i = null;
        for (b in a)
            if (!o.hasOwnProperty(b) && a.hasOwnProperty(b) && a[b] != null)
                if (b === "style") {
                    var h = a[b];
                    for (d in h)
                        h.hasOwnProperty(d) && (i || (i = {}),
                        i[d] = "")
                } else
                    b !== "dangerouslySetInnerHTML" && b !== "children" && b !== "suppressContentEditableWarning" && b !== "suppressHydrationWarning" && b !== "autoFocus" && (ea.hasOwnProperty(b) ? c || (c = []) : (c = c || []).push(b, null));
        for (b in o) {
            var g = o[b];
            if (h = a != null ? a[b] : void 0,
            o.hasOwnProperty(b) && g !== h && (g != null || h != null))
                if (b === "style")
                    if (h) {
                        for (d in h)
                            !h.hasOwnProperty(d) || g && g.hasOwnProperty(d) || (i || (i = {}),
                            i[d] = "");
                        for (d in g)
                            g.hasOwnProperty(d) && h[d] !== g[d] && (i || (i = {}),
                            i[d] = g[d])
                    } else
                        i || (c || (c = []),
                        c.push(b, i)),
                        i = g;
                else
                    b === "dangerouslySetInnerHTML" ? (g = g ? g.__html : void 0,
                    h = h ? h.__html : void 0,
                    g != null && h !== g && (c = c || []).push(b, g)) : b === "children" ? typeof g != "string" && typeof g != "number" || (c = c || []).push(b, "" + g) : b !== "suppressContentEditableWarning" && b !== "suppressHydrationWarning" && (ea.hasOwnProperty(b) ? (g != null && b === "onScroll" && D$1("scroll", s),
                    c || h === g || (c = [])) : (c = c || []).push(b, g))
        }
        i && (c = c || []).push("style", i);
        var b = c;
        (e.updateQueue = b) && (e.flags |= 4)
    }
}
;
Cj = function(s, e, i, o) {
    i !== o && (e.flags |= 4)
}
;
function Dj(s, e) {
    if (!I)
        switch (s.tailMode) {
        case "hidden":
            e = s.tail;
            for (var i = null; e !== null; )
                e.alternate !== null && (i = e),
                e = e.sibling;
            i === null ? s.tail = null : i.sibling = null;
            break;
        case "collapsed":
            i = s.tail;
            for (var o = null; i !== null; )
                i.alternate !== null && (o = i),
                i = i.sibling;
            o === null ? e || s.tail === null ? s.tail = null : s.tail.sibling = null : o.sibling = null
        }
}
function S(s) {
    var e = s.alternate !== null && s.alternate.child === s.child
      , i = 0
      , o = 0;
    if (e)
        for (var a = s.child; a !== null; )
            i |= a.lanes | a.childLanes,
            o |= a.subtreeFlags & 14680064,
            o |= a.flags & 14680064,
            a.return = s,
            a = a.sibling;
    else
        for (a = s.child; a !== null; )
            i |= a.lanes | a.childLanes,
            o |= a.subtreeFlags,
            o |= a.flags,
            a.return = s,
            a = a.sibling;
    return s.subtreeFlags |= o,
    s.childLanes = i,
    e
}
function Ej(s, e, i) {
    var o = e.pendingProps;
    switch (wg(e),
    e.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
        return S(e),
        null;
    case 1:
        return Zf(e.type) && $f(),
        S(e),
        null;
    case 3:
        return o = e.stateNode,
        zh(),
        E$1(Wf),
        E$1(H),
        Eh(),
        o.pendingContext && (o.context = o.pendingContext,
        o.pendingContext = null),
        (s === null || s.child === null) && (Gg(e) ? e.flags |= 4 : s === null || s.memoizedState.isDehydrated && !(e.flags & 256) || (e.flags |= 1024,
        zg !== null && (Fj(zg),
        zg = null))),
        Aj(s, e),
        S(e),
        null;
    case 5:
        Bh(e);
        var a = xh(wh.current);
        if (i = e.type,
        s !== null && e.stateNode != null)
            Bj(s, e, i, o, a),
            s.ref !== e.ref && (e.flags |= 512,
            e.flags |= 2097152);
        else {
            if (!o) {
                if (e.stateNode === null)
                    throw Error(p(166));
                return S(e),
                null
            }
            if (s = xh(uh.current),
            Gg(e)) {
                o = e.stateNode,
                i = e.type;
                var c = e.memoizedProps;
                switch (o[Of] = e,
                o[Pf] = c,
                s = (e.mode & 1) !== 0,
                i) {
                case "dialog":
                    D$1("cancel", o),
                    D$1("close", o);
                    break;
                case "iframe":
                case "object":
                case "embed":
                    D$1("load", o);
                    break;
                case "video":
                case "audio":
                    for (a = 0; a < lf.length; a++)
                        D$1(lf[a], o);
                    break;
                case "source":
                    D$1("error", o);
                    break;
                case "img":
                case "image":
                case "link":
                    D$1("error", o),
                    D$1("load", o);
                    break;
                case "details":
                    D$1("toggle", o);
                    break;
                case "input":
                    Za(o, c),
                    D$1("invalid", o);
                    break;
                case "select":
                    o._wrapperState = {
                        wasMultiple: !!c.multiple
                    },
                    D$1("invalid", o);
                    break;
                case "textarea":
                    hb(o, c),
                    D$1("invalid", o)
                }
                ub(i, c),
                a = null;
                for (var d in c)
                    if (c.hasOwnProperty(d)) {
                        var h = c[d];
                        d === "children" ? typeof h == "string" ? o.textContent !== h && (c.suppressHydrationWarning !== !0 && Af(o.textContent, h, s),
                        a = ["children", h]) : typeof h == "number" && o.textContent !== "" + h && (c.suppressHydrationWarning !== !0 && Af(o.textContent, h, s),
                        a = ["children", "" + h]) : ea.hasOwnProperty(d) && h != null && d === "onScroll" && D$1("scroll", o)
                    }
                switch (i) {
                case "input":
                    Va(o),
                    db(o, c, !0);
                    break;
                case "textarea":
                    Va(o),
                    jb(o);
                    break;
                case "select":
                case "option":
                    break;
                default:
                    typeof c.onClick == "function" && (o.onclick = Bf)
                }
                o = a,
                e.updateQueue = o,
                o !== null && (e.flags |= 4)
            } else {
                d = a.nodeType === 9 ? a : a.ownerDocument,
                s === "http://www.w3.org/1999/xhtml" && (s = kb(i)),
                s === "http://www.w3.org/1999/xhtml" ? i === "script" ? (s = d.createElement("div"),
                s.innerHTML = "<script><\/script>",
                s = s.removeChild(s.firstChild)) : typeof o.is == "string" ? s = d.createElement(i, {
                    is: o.is
                }) : (s = d.createElement(i),
                i === "select" && (d = s,
                o.multiple ? d.multiple = !0 : o.size && (d.size = o.size))) : s = d.createElementNS(s, i),
                s[Of] = e,
                s[Pf] = o,
                zj(s, e, !1, !1),
                e.stateNode = s;
                e: {
                    switch (d = vb(i, o),
                    i) {
                    case "dialog":
                        D$1("cancel", s),
                        D$1("close", s),
                        a = o;
                        break;
                    case "iframe":
                    case "object":
                    case "embed":
                        D$1("load", s),
                        a = o;
                        break;
                    case "video":
                    case "audio":
                        for (a = 0; a < lf.length; a++)
                            D$1(lf[a], s);
                        a = o;
                        break;
                    case "source":
                        D$1("error", s),
                        a = o;
                        break;
                    case "img":
                    case "image":
                    case "link":
                        D$1("error", s),
                        D$1("load", s),
                        a = o;
                        break;
                    case "details":
                        D$1("toggle", s),
                        a = o;
                        break;
                    case "input":
                        Za(s, o),
                        a = Ya(s, o),
                        D$1("invalid", s);
                        break;
                    case "option":
                        a = o;
                        break;
                    case "select":
                        s._wrapperState = {
                            wasMultiple: !!o.multiple
                        },
                        a = A({}, o, {
                            value: void 0
                        }),
                        D$1("invalid", s);
                        break;
                    case "textarea":
                        hb(s, o),
                        a = gb(s, o),
                        D$1("invalid", s);
                        break;
                    default:
                        a = o
                    }
                    ub(i, a),
                    h = a;
                    for (c in h)
                        if (h.hasOwnProperty(c)) {
                            var g = h[c];
                            c === "style" ? sb(s, g) : c === "dangerouslySetInnerHTML" ? (g = g ? g.__html : void 0,
                            g != null && nb(s, g)) : c === "children" ? typeof g == "string" ? (i !== "textarea" || g !== "") && ob(s, g) : typeof g == "number" && ob(s, "" + g) : c !== "suppressContentEditableWarning" && c !== "suppressHydrationWarning" && c !== "autoFocus" && (ea.hasOwnProperty(c) ? g != null && c === "onScroll" && D$1("scroll", s) : g != null && ta(s, c, g, d))
                        }
                    switch (i) {
                    case "input":
                        Va(s),
                        db(s, o, !1);
                        break;
                    case "textarea":
                        Va(s),
                        jb(s);
                        break;
                    case "option":
                        o.value != null && s.setAttribute("value", "" + Sa(o.value));
                        break;
                    case "select":
                        s.multiple = !!o.multiple,
                        c = o.value,
                        c != null ? fb(s, !!o.multiple, c, !1) : o.defaultValue != null && fb(s, !!o.multiple, o.defaultValue, !0);
                        break;
                    default:
                        typeof a.onClick == "function" && (s.onclick = Bf)
                    }
                    switch (i) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                        o = !!o.autoFocus;
                        break e;
                    case "img":
                        o = !0;
                        break e;
                    default:
                        o = !1
                    }
                }
                o && (e.flags |= 4)
            }
            e.ref !== null && (e.flags |= 512,
            e.flags |= 2097152)
        }
        return S(e),
        null;
    case 6:
        if (s && e.stateNode != null)
            Cj(s, e, s.memoizedProps, o);
        else {
            if (typeof o != "string" && e.stateNode === null)
                throw Error(p(166));
            if (i = xh(wh.current),
            xh(uh.current),
            Gg(e)) {
                if (o = e.stateNode,
                i = e.memoizedProps,
                o[Of] = e,
                (c = o.nodeValue !== i) && (s = xg,
                s !== null))
                    switch (s.tag) {
                    case 3:
                        Af(o.nodeValue, i, (s.mode & 1) !== 0);
                        break;
                    case 5:
                        s.memoizedProps.suppressHydrationWarning !== !0 && Af(o.nodeValue, i, (s.mode & 1) !== 0)
                    }
                c && (e.flags |= 4)
            } else
                o = (i.nodeType === 9 ? i : i.ownerDocument).createTextNode(o),
                o[Of] = e,
                e.stateNode = o
        }
        return S(e),
        null;
    case 13:
        if (E$1(L$1),
        o = e.memoizedState,
        s === null || s.memoizedState !== null && s.memoizedState.dehydrated !== null) {
            if (I && yg !== null && e.mode & 1 && !(e.flags & 128))
                Hg(),
                Ig(),
                e.flags |= 98560,
                c = !1;
            else if (c = Gg(e),
            o !== null && o.dehydrated !== null) {
                if (s === null) {
                    if (!c)
                        throw Error(p(318));
                    if (c = e.memoizedState,
                    c = c !== null ? c.dehydrated : null,
                    !c)
                        throw Error(p(317));
                    c[Of] = e
                } else
                    Ig(),
                    !(e.flags & 128) && (e.memoizedState = null),
                    e.flags |= 4;
                S(e),
                c = !1
            } else
                zg !== null && (Fj(zg),
                zg = null),
                c = !0;
            if (!c)
                return e.flags & 65536 ? e : null
        }
        return e.flags & 128 ? (e.lanes = i,
        e) : (o = o !== null,
        o !== (s !== null && s.memoizedState !== null) && o && (e.child.flags |= 8192,
        e.mode & 1 && (s === null || L$1.current & 1 ? T === 0 && (T = 3) : tj())),
        e.updateQueue !== null && (e.flags |= 4),
        S(e),
        null);
    case 4:
        return zh(),
        Aj(s, e),
        s === null && sf(e.stateNode.containerInfo),
        S(e),
        null;
    case 10:
        return ah(e.type._context),
        S(e),
        null;
    case 17:
        return Zf(e.type) && $f(),
        S(e),
        null;
    case 19:
        if (E$1(L$1),
        c = e.memoizedState,
        c === null)
            return S(e),
            null;
        if (o = (e.flags & 128) !== 0,
        d = c.rendering,
        d === null)
            if (o)
                Dj(c, !1);
            else {
                if (T !== 0 || s !== null && s.flags & 128)
                    for (s = e.child; s !== null; ) {
                        if (d = Ch(s),
                        d !== null) {
                            for (e.flags |= 128,
                            Dj(c, !1),
                            o = d.updateQueue,
                            o !== null && (e.updateQueue = o,
                            e.flags |= 4),
                            e.subtreeFlags = 0,
                            o = i,
                            i = e.child; i !== null; )
                                c = i,
                                s = o,
                                c.flags &= 14680066,
                                d = c.alternate,
                                d === null ? (c.childLanes = 0,
                                c.lanes = s,
                                c.child = null,
                                c.subtreeFlags = 0,
                                c.memoizedProps = null,
                                c.memoizedState = null,
                                c.updateQueue = null,
                                c.dependencies = null,
                                c.stateNode = null) : (c.childLanes = d.childLanes,
                                c.lanes = d.lanes,
                                c.child = d.child,
                                c.subtreeFlags = 0,
                                c.deletions = null,
                                c.memoizedProps = d.memoizedProps,
                                c.memoizedState = d.memoizedState,
                                c.updateQueue = d.updateQueue,
                                c.type = d.type,
                                s = d.dependencies,
                                c.dependencies = s === null ? null : {
                                    lanes: s.lanes,
                                    firstContext: s.firstContext
                                }),
                                i = i.sibling;
                            return G(L$1, L$1.current & 1 | 2),
                            e.child
                        }
                        s = s.sibling
                    }
                c.tail !== null && B() > Gj && (e.flags |= 128,
                o = !0,
                Dj(c, !1),
                e.lanes = 4194304)
            }
        else {
            if (!o)
                if (s = Ch(d),
                s !== null) {
                    if (e.flags |= 128,
                    o = !0,
                    i = s.updateQueue,
                    i !== null && (e.updateQueue = i,
                    e.flags |= 4),
                    Dj(c, !0),
                    c.tail === null && c.tailMode === "hidden" && !d.alternate && !I)
                        return S(e),
                        null
                } else
                    2 * B() - c.renderingStartTime > Gj && i !== 1073741824 && (e.flags |= 128,
                    o = !0,
                    Dj(c, !1),
                    e.lanes = 4194304);
            c.isBackwards ? (d.sibling = e.child,
            e.child = d) : (i = c.last,
            i !== null ? i.sibling = d : e.child = d,
            c.last = d)
        }
        return c.tail !== null ? (e = c.tail,
        c.rendering = e,
        c.tail = e.sibling,
        c.renderingStartTime = B(),
        e.sibling = null,
        i = L$1.current,
        G(L$1, o ? i & 1 | 2 : i & 1),
        e) : (S(e),
        null);
    case 22:
    case 23:
        return Hj(),
        o = e.memoizedState !== null,
        s !== null && s.memoizedState !== null !== o && (e.flags |= 8192),
        o && e.mode & 1 ? fj & 1073741824 && (S(e),
        e.subtreeFlags & 6 && (e.flags |= 8192)) : S(e),
        null;
    case 24:
        return null;
    case 25:
        return null
    }
    throw Error(p(156, e.tag))
}
function Ij(s, e) {
    switch (wg(e),
    e.tag) {
    case 1:
        return Zf(e.type) && $f(),
        s = e.flags,
        s & 65536 ? (e.flags = s & -65537 | 128,
        e) : null;
    case 3:
        return zh(),
        E$1(Wf),
        E$1(H),
        Eh(),
        s = e.flags,
        s & 65536 && !(s & 128) ? (e.flags = s & -65537 | 128,
        e) : null;
    case 5:
        return Bh(e),
        null;
    case 13:
        if (E$1(L$1),
        s = e.memoizedState,
        s !== null && s.dehydrated !== null) {
            if (e.alternate === null)
                throw Error(p(340));
            Ig()
        }
        return s = e.flags,
        s & 65536 ? (e.flags = s & -65537 | 128,
        e) : null;
    case 19:
        return E$1(L$1),
        null;
    case 4:
        return zh(),
        null;
    case 10:
        return ah(e.type._context),
        null;
    case 22:
    case 23:
        return Hj(),
        null;
    case 24:
        return null;
    default:
        return null
    }
}
var Jj = !1
  , U$1 = !1
  , Kj = typeof WeakSet == "function" ? WeakSet : Set
  , V = null;
function Lj(s, e) {
    var i = s.ref;
    if (i !== null)
        if (typeof i == "function")
            try {
                i(null)
            } catch (o) {
                W(s, e, o)
            }
        else
            i.current = null
}
function Mj(s, e, i) {
    try {
        i()
    } catch (o) {
        W(s, e, o)
    }
}
var Nj = !1;
function Oj(s, e) {
    if (Cf = dd,
    s = Me(),
    Ne(s)) {
        if ("selectionStart"in s)
            var i = {
                start: s.selectionStart,
                end: s.selectionEnd
            };
        else
            e: {
                i = (i = s.ownerDocument) && i.defaultView || window;
                var o = i.getSelection && i.getSelection();
                if (o && o.rangeCount !== 0) {
                    i = o.anchorNode;
                    var a = o.anchorOffset
                      , c = o.focusNode;
                    o = o.focusOffset;
                    try {
                        i.nodeType,
                        c.nodeType
                    } catch {
                        i = null;
                        break e
                    }
                    var d = 0
                      , h = -1
                      , g = -1
                      , b = 0
                      , _ = 0
                      , $ = s
                      , _e = null;
                    t: for (; ; ) {
                        for (var tt; $ !== i || a !== 0 && $.nodeType !== 3 || (h = d + a),
                        $ !== c || o !== 0 && $.nodeType !== 3 || (g = d + o),
                        $.nodeType === 3 && (d += $.nodeValue.length),
                        (tt = $.firstChild) !== null; )
                            _e = $,
                            $ = tt;
                        for (; ; ) {
                            if ($ === s)
                                break t;
                            if (_e === i && ++b === a && (h = d),
                            _e === c && ++_ === o && (g = d),
                            (tt = $.nextSibling) !== null)
                                break;
                            $ = _e,
                            _e = $.parentNode
                        }
                        $ = tt
                    }
                    i = h === -1 || g === -1 ? null : {
                        start: h,
                        end: g
                    }
                } else
                    i = null
            }
        i = i || {
            start: 0,
            end: 0
        }
    } else
        i = null;
    for (Df = {
        focusedElem: s,
        selectionRange: i
    },
    dd = !1,
    V = e; V !== null; )
        if (e = V,
        s = e.child,
        (e.subtreeFlags & 1028) !== 0 && s !== null)
            s.return = e,
            V = s;
        else
            for (; V !== null; ) {
                e = V;
                try {
                    var rt = e.alternate;
                    if (e.flags & 1024)
                        switch (e.tag) {
                        case 0:
                        case 11:
                        case 15:
                            break;
                        case 1:
                            if (rt !== null) {
                                var et = rt.memoizedProps
                                  , it = rt.memoizedState
                                  , st = e.stateNode
                                  , nt = st.getSnapshotBeforeUpdate(e.elementType === e.type ? et : Ci(e.type, et), it);
                                st.__reactInternalSnapshotBeforeUpdate = nt
                            }
                            break;
                        case 3:
                            var lt = e.stateNode.containerInfo;
                            lt.nodeType === 1 ? lt.textContent = "" : lt.nodeType === 9 && lt.documentElement && lt.removeChild(lt.documentElement);
                            break;
                        case 5:
                        case 6:
                        case 4:
                        case 17:
                            break;
                        default:
                            throw Error(p(163))
                        }
                } catch (dt) {
                    W(e, e.return, dt)
                }
                if (s = e.sibling,
                s !== null) {
                    s.return = e.return,
                    V = s;
                    break
                }
                V = e.return
            }
    return rt = Nj,
    Nj = !1,
    rt
}
function Pj(s, e, i) {
    var o = e.updateQueue;
    if (o = o !== null ? o.lastEffect : null,
    o !== null) {
        var a = o = o.next;
        do {
            if ((a.tag & s) === s) {
                var c = a.destroy;
                a.destroy = void 0,
                c !== void 0 && Mj(e, i, c)
            }
            a = a.next
        } while (a !== o)
    }
}
function Qj(s, e) {
    if (e = e.updateQueue,
    e = e !== null ? e.lastEffect : null,
    e !== null) {
        var i = e = e.next;
        do {
            if ((i.tag & s) === s) {
                var o = i.create;
                i.destroy = o()
            }
            i = i.next
        } while (i !== e)
    }
}
function Rj(s) {
    var e = s.ref;
    if (e !== null) {
        var i = s.stateNode;
        switch (s.tag) {
        case 5:
            s = i;
            break;
        default:
            s = i
        }
        typeof e == "function" ? e(s) : e.current = s
    }
}
function Sj(s) {
    var e = s.alternate;
    e !== null && (s.alternate = null,
    Sj(e)),
    s.child = null,
    s.deletions = null,
    s.sibling = null,
    s.tag === 5 && (e = s.stateNode,
    e !== null && (delete e[Of],
    delete e[Pf],
    delete e[of],
    delete e[Qf],
    delete e[Rf])),
    s.stateNode = null,
    s.return = null,
    s.dependencies = null,
    s.memoizedProps = null,
    s.memoizedState = null,
    s.pendingProps = null,
    s.stateNode = null,
    s.updateQueue = null
}
function Tj(s) {
    return s.tag === 5 || s.tag === 3 || s.tag === 4
}
function Uj(s) {
    e: for (; ; ) {
        for (; s.sibling === null; ) {
            if (s.return === null || Tj(s.return))
                return null;
            s = s.return
        }
        for (s.sibling.return = s.return,
        s = s.sibling; s.tag !== 5 && s.tag !== 6 && s.tag !== 18; ) {
            if (s.flags & 2 || s.child === null || s.tag === 4)
                continue e;
            s.child.return = s,
            s = s.child
        }
        if (!(s.flags & 2))
            return s.stateNode
    }
}
function Vj(s, e, i) {
    var o = s.tag;
    if (o === 5 || o === 6)
        s = s.stateNode,
        e ? i.nodeType === 8 ? i.parentNode.insertBefore(s, e) : i.insertBefore(s, e) : (i.nodeType === 8 ? (e = i.parentNode,
        e.insertBefore(s, i)) : (e = i,
        e.appendChild(s)),
        i = i._reactRootContainer,
        i != null || e.onclick !== null || (e.onclick = Bf));
    else if (o !== 4 && (s = s.child,
    s !== null))
        for (Vj(s, e, i),
        s = s.sibling; s !== null; )
            Vj(s, e, i),
            s = s.sibling
}
function Wj(s, e, i) {
    var o = s.tag;
    if (o === 5 || o === 6)
        s = s.stateNode,
        e ? i.insertBefore(s, e) : i.appendChild(s);
    else if (o !== 4 && (s = s.child,
    s !== null))
        for (Wj(s, e, i),
        s = s.sibling; s !== null; )
            Wj(s, e, i),
            s = s.sibling
}
var X$1 = null
  , Xj = !1;
function Yj(s, e, i) {
    for (i = i.child; i !== null; )
        Zj(s, e, i),
        i = i.sibling
}
function Zj(s, e, i) {
    if (lc && typeof lc.onCommitFiberUnmount == "function")
        try {
            lc.onCommitFiberUnmount(kc, i)
        } catch {}
    switch (i.tag) {
    case 5:
        U$1 || Lj(i, e);
    case 6:
        var o = X$1
          , a = Xj;
        X$1 = null,
        Yj(s, e, i),
        X$1 = o,
        Xj = a,
        X$1 !== null && (Xj ? (s = X$1,
        i = i.stateNode,
        s.nodeType === 8 ? s.parentNode.removeChild(i) : s.removeChild(i)) : X$1.removeChild(i.stateNode));
        break;
    case 18:
        X$1 !== null && (Xj ? (s = X$1,
        i = i.stateNode,
        s.nodeType === 8 ? Kf(s.parentNode, i) : s.nodeType === 1 && Kf(s, i),
        bd(s)) : Kf(X$1, i.stateNode));
        break;
    case 4:
        o = X$1,
        a = Xj,
        X$1 = i.stateNode.containerInfo,
        Xj = !0,
        Yj(s, e, i),
        X$1 = o,
        Xj = a;
        break;
    case 0:
    case 11:
    case 14:
    case 15:
        if (!U$1 && (o = i.updateQueue,
        o !== null && (o = o.lastEffect,
        o !== null))) {
            a = o = o.next;
            do {
                var c = a
                  , d = c.destroy;
                c = c.tag,
                d !== void 0 && (c & 2 || c & 4) && Mj(i, e, d),
                a = a.next
            } while (a !== o)
        }
        Yj(s, e, i);
        break;
    case 1:
        if (!U$1 && (Lj(i, e),
        o = i.stateNode,
        typeof o.componentWillUnmount == "function"))
            try {
                o.props = i.memoizedProps,
                o.state = i.memoizedState,
                o.componentWillUnmount()
            } catch (h) {
                W(i, e, h)
            }
        Yj(s, e, i);
        break;
    case 21:
        Yj(s, e, i);
        break;
    case 22:
        i.mode & 1 ? (U$1 = (o = U$1) || i.memoizedState !== null,
        Yj(s, e, i),
        U$1 = o) : Yj(s, e, i);
        break;
    default:
        Yj(s, e, i)
    }
}
function ak(s) {
    var e = s.updateQueue;
    if (e !== null) {
        s.updateQueue = null;
        var i = s.stateNode;
        i === null && (i = s.stateNode = new Kj),
        e.forEach(function(o) {
            var a = bk.bind(null, s, o);
            i.has(o) || (i.add(o),
            o.then(a, a))
        })
    }
}
function ck(s, e) {
    var i = e.deletions;
    if (i !== null)
        for (var o = 0; o < i.length; o++) {
            var a = i[o];
            try {
                var c = s
                  , d = e
                  , h = d;
                e: for (; h !== null; ) {
                    switch (h.tag) {
                    case 5:
                        X$1 = h.stateNode,
                        Xj = !1;
                        break e;
                    case 3:
                        X$1 = h.stateNode.containerInfo,
                        Xj = !0;
                        break e;
                    case 4:
                        X$1 = h.stateNode.containerInfo,
                        Xj = !0;
                        break e
                    }
                    h = h.return
                }
                if (X$1 === null)
                    throw Error(p(160));
                Zj(c, d, a),
                X$1 = null,
                Xj = !1;
                var g = a.alternate;
                g !== null && (g.return = null),
                a.return = null
            } catch (b) {
                W(a, e, b)
            }
        }
    if (e.subtreeFlags & 12854)
        for (e = e.child; e !== null; )
            dk(e, s),
            e = e.sibling
}
function dk(s, e) {
    var i = s.alternate
      , o = s.flags;
    switch (s.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
        if (ck(e, s),
        ek(s),
        o & 4) {
            try {
                Pj(3, s, s.return),
                Qj(3, s)
            } catch (et) {
                W(s, s.return, et)
            }
            try {
                Pj(5, s, s.return)
            } catch (et) {
                W(s, s.return, et)
            }
        }
        break;
    case 1:
        ck(e, s),
        ek(s),
        o & 512 && i !== null && Lj(i, i.return);
        break;
    case 5:
        if (ck(e, s),
        ek(s),
        o & 512 && i !== null && Lj(i, i.return),
        s.flags & 32) {
            var a = s.stateNode;
            try {
                ob(a, "")
            } catch (et) {
                W(s, s.return, et)
            }
        }
        if (o & 4 && (a = s.stateNode,
        a != null)) {
            var c = s.memoizedProps
              , d = i !== null ? i.memoizedProps : c
              , h = s.type
              , g = s.updateQueue;
            if (s.updateQueue = null,
            g !== null)
                try {
                    h === "input" && c.type === "radio" && c.name != null && ab(a, c),
                    vb(h, d);
                    var b = vb(h, c);
                    for (d = 0; d < g.length; d += 2) {
                        var _ = g[d]
                          , $ = g[d + 1];
                        _ === "style" ? sb(a, $) : _ === "dangerouslySetInnerHTML" ? nb(a, $) : _ === "children" ? ob(a, $) : ta(a, _, $, b)
                    }
                    switch (h) {
                    case "input":
                        bb(a, c);
                        break;
                    case "textarea":
                        ib(a, c);
                        break;
                    case "select":
                        var _e = a._wrapperState.wasMultiple;
                        a._wrapperState.wasMultiple = !!c.multiple;
                        var tt = c.value;
                        tt != null ? fb(a, !!c.multiple, tt, !1) : _e !== !!c.multiple && (c.defaultValue != null ? fb(a, !!c.multiple, c.defaultValue, !0) : fb(a, !!c.multiple, c.multiple ? [] : "", !1))
                    }
                    a[Pf] = c
                } catch (et) {
                    W(s, s.return, et)
                }
        }
        break;
    case 6:
        if (ck(e, s),
        ek(s),
        o & 4) {
            if (s.stateNode === null)
                throw Error(p(162));
            a = s.stateNode,
            c = s.memoizedProps;
            try {
                a.nodeValue = c
            } catch (et) {
                W(s, s.return, et)
            }
        }
        break;
    case 3:
        if (ck(e, s),
        ek(s),
        o & 4 && i !== null && i.memoizedState.isDehydrated)
            try {
                bd(e.containerInfo)
            } catch (et) {
                W(s, s.return, et)
            }
        break;
    case 4:
        ck(e, s),
        ek(s);
        break;
    case 13:
        ck(e, s),
        ek(s),
        a = s.child,
        a.flags & 8192 && (c = a.memoizedState !== null,
        a.stateNode.isHidden = c,
        !c || a.alternate !== null && a.alternate.memoizedState !== null || (fk = B())),
        o & 4 && ak(s);
        break;
    case 22:
        if (_ = i !== null && i.memoizedState !== null,
        s.mode & 1 ? (U$1 = (b = U$1) || _,
        ck(e, s),
        U$1 = b) : ck(e, s),
        ek(s),
        o & 8192) {
            if (b = s.memoizedState !== null,
            (s.stateNode.isHidden = b) && !_ && s.mode & 1)
                for (V = s,
                _ = s.child; _ !== null; ) {
                    for ($ = V = _; V !== null; ) {
                        switch (_e = V,
                        tt = _e.child,
                        _e.tag) {
                        case 0:
                        case 11:
                        case 14:
                        case 15:
                            Pj(4, _e, _e.return);
                            break;
                        case 1:
                            Lj(_e, _e.return);
                            var rt = _e.stateNode;
                            if (typeof rt.componentWillUnmount == "function") {
                                o = _e,
                                i = _e.return;
                                try {
                                    e = o,
                                    rt.props = e.memoizedProps,
                                    rt.state = e.memoizedState,
                                    rt.componentWillUnmount()
                                } catch (et) {
                                    W(o, i, et)
                                }
                            }
                            break;
                        case 5:
                            Lj(_e, _e.return);
                            break;
                        case 22:
                            if (_e.memoizedState !== null) {
                                gk($);
                                continue
                            }
                        }
                        tt !== null ? (tt.return = _e,
                        V = tt) : gk($)
                    }
                    _ = _.sibling
                }
            e: for (_ = null,
            $ = s; ; ) {
                if ($.tag === 5) {
                    if (_ === null) {
                        _ = $;
                        try {
                            a = $.stateNode,
                            b ? (c = a.style,
                            typeof c.setProperty == "function" ? c.setProperty("display", "none", "important") : c.display = "none") : (h = $.stateNode,
                            g = $.memoizedProps.style,
                            d = g != null && g.hasOwnProperty("display") ? g.display : null,
                            h.style.display = rb("display", d))
                        } catch (et) {
                            W(s, s.return, et)
                        }
                    }
                } else if ($.tag === 6) {
                    if (_ === null)
                        try {
                            $.stateNode.nodeValue = b ? "" : $.memoizedProps
                        } catch (et) {
                            W(s, s.return, et)
                        }
                } else if (($.tag !== 22 && $.tag !== 23 || $.memoizedState === null || $ === s) && $.child !== null) {
                    $.child.return = $,
                    $ = $.child;
                    continue
                }
                if ($ === s)
                    break e;
                for (; $.sibling === null; ) {
                    if ($.return === null || $.return === s)
                        break e;
                    _ === $ && (_ = null),
                    $ = $.return
                }
                _ === $ && (_ = null),
                $.sibling.return = $.return,
                $ = $.sibling
            }
        }
        break;
    case 19:
        ck(e, s),
        ek(s),
        o & 4 && ak(s);
        break;
    case 21:
        break;
    default:
        ck(e, s),
        ek(s)
    }
}
function ek(s) {
    var e = s.flags;
    if (e & 2) {
        try {
            e: {
                for (var i = s.return; i !== null; ) {
                    if (Tj(i)) {
                        var o = i;
                        break e
                    }
                    i = i.return
                }
                throw Error(p(160))
            }
            switch (o.tag) {
            case 5:
                var a = o.stateNode;
                o.flags & 32 && (ob(a, ""),
                o.flags &= -33);
                var c = Uj(s);
                Wj(s, c, a);
                break;
            case 3:
            case 4:
                var d = o.stateNode.containerInfo
                  , h = Uj(s);
                Vj(s, h, d);
                break;
            default:
                throw Error(p(161))
            }
        } catch (g) {
            W(s, s.return, g)
        }
        s.flags &= -3
    }
    e & 4096 && (s.flags &= -4097)
}
function hk(s, e, i) {
    V = s,
    ik(s)
}
function ik(s, e, i) {
    for (var o = (s.mode & 1) !== 0; V !== null; ) {
        var a = V
          , c = a.child;
        if (a.tag === 22 && o) {
            var d = a.memoizedState !== null || Jj;
            if (!d) {
                var h = a.alternate
                  , g = h !== null && h.memoizedState !== null || U$1;
                h = Jj;
                var b = U$1;
                if (Jj = d,
                (U$1 = g) && !b)
                    for (V = a; V !== null; )
                        d = V,
                        g = d.child,
                        d.tag === 22 && d.memoizedState !== null ? jk(a) : g !== null ? (g.return = d,
                        V = g) : jk(a);
                for (; c !== null; )
                    V = c,
                    ik(c),
                    c = c.sibling;
                V = a,
                Jj = h,
                U$1 = b
            }
            kk(s)
        } else
            a.subtreeFlags & 8772 && c !== null ? (c.return = a,
            V = c) : kk(s)
    }
}
function kk(s) {
    for (; V !== null; ) {
        var e = V;
        if (e.flags & 8772) {
            var i = e.alternate;
            try {
                if (e.flags & 8772)
                    switch (e.tag) {
                    case 0:
                    case 11:
                    case 15:
                        U$1 || Qj(5, e);
                        break;
                    case 1:
                        var o = e.stateNode;
                        if (e.flags & 4 && !U$1)
                            if (i === null)
                                o.componentDidMount();
                            else {
                                var a = e.elementType === e.type ? i.memoizedProps : Ci(e.type, i.memoizedProps);
                                o.componentDidUpdate(a, i.memoizedState, o.__reactInternalSnapshotBeforeUpdate)
                            }
                        var c = e.updateQueue;
                        c !== null && sh(e, c, o);
                        break;
                    case 3:
                        var d = e.updateQueue;
                        if (d !== null) {
                            if (i = null,
                            e.child !== null)
                                switch (e.child.tag) {
                                case 5:
                                    i = e.child.stateNode;
                                    break;
                                case 1:
                                    i = e.child.stateNode
                                }
                            sh(e, d, i)
                        }
                        break;
                    case 5:
                        var h = e.stateNode;
                        if (i === null && e.flags & 4) {
                            i = h;
                            var g = e.memoizedProps;
                            switch (e.type) {
                            case "button":
                            case "input":
                            case "select":
                            case "textarea":
                                g.autoFocus && i.focus();
                                break;
                            case "img":
                                g.src && (i.src = g.src)
                            }
                        }
                        break;
                    case 6:
                        break;
                    case 4:
                        break;
                    case 12:
                        break;
                    case 13:
                        if (e.memoizedState === null) {
                            var b = e.alternate;
                            if (b !== null) {
                                var _ = b.memoizedState;
                                if (_ !== null) {
                                    var $ = _.dehydrated;
                                    $ !== null && bd($)
                                }
                            }
                        }
                        break;
                    case 19:
                    case 17:
                    case 21:
                    case 22:
                    case 23:
                    case 25:
                        break;
                    default:
                        throw Error(p(163))
                    }
                U$1 || e.flags & 512 && Rj(e)
            } catch (_e) {
                W(e, e.return, _e)
            }
        }
        if (e === s) {
            V = null;
            break
        }
        if (i = e.sibling,
        i !== null) {
            i.return = e.return,
            V = i;
            break
        }
        V = e.return
    }
}
function gk(s) {
    for (; V !== null; ) {
        var e = V;
        if (e === s) {
            V = null;
            break
        }
        var i = e.sibling;
        if (i !== null) {
            i.return = e.return,
            V = i;
            break
        }
        V = e.return
    }
}
function jk(s) {
    for (; V !== null; ) {
        var e = V;
        try {
            switch (e.tag) {
            case 0:
            case 11:
            case 15:
                var i = e.return;
                try {
                    Qj(4, e)
                } catch (g) {
                    W(e, i, g)
                }
                break;
            case 1:
                var o = e.stateNode;
                if (typeof o.componentDidMount == "function") {
                    var a = e.return;
                    try {
                        o.componentDidMount()
                    } catch (g) {
                        W(e, a, g)
                    }
                }
                var c = e.return;
                try {
                    Rj(e)
                } catch (g) {
                    W(e, c, g)
                }
                break;
            case 5:
                var d = e.return;
                try {
                    Rj(e)
                } catch (g) {
                    W(e, d, g)
                }
            }
        } catch (g) {
            W(e, e.return, g)
        }
        if (e === s) {
            V = null;
            break
        }
        var h = e.sibling;
        if (h !== null) {
            h.return = e.return,
            V = h;
            break
        }
        V = e.return
    }
}
var lk = Math.ceil
  , mk = ua.ReactCurrentDispatcher
  , nk = ua.ReactCurrentOwner
  , ok = ua.ReactCurrentBatchConfig
  , K = 0
  , Q = null
  , Y = null
  , Z = 0
  , fj = 0
  , ej = Uf(0)
  , T = 0
  , pk = null
  , rh = 0
  , qk = 0
  , rk = 0
  , sk = null
  , tk = null
  , fk = 0
  , Gj = 1 / 0
  , uk = null
  , Oi = !1
  , Pi = null
  , Ri = null
  , vk = !1
  , wk = null
  , xk = 0
  , yk = 0
  , zk = null
  , Ak = -1
  , Bk = 0;
function R() {
    return K & 6 ? B() : Ak !== -1 ? Ak : Ak = B()
}
function yi(s) {
    return s.mode & 1 ? K & 2 && Z !== 0 ? Z & -Z : Kg.transition !== null ? (Bk === 0 && (Bk = yc()),
    Bk) : (s = C,
    s !== 0 || (s = window.event,
    s = s === void 0 ? 16 : jd(s.type)),
    s) : 1
}
function gi(s, e, i, o) {
    if (50 < yk)
        throw yk = 0,
        zk = null,
        Error(p(185));
    Ac(s, i, o),
    (!(K & 2) || s !== Q) && (s === Q && (!(K & 2) && (qk |= i),
    T === 4 && Ck(s, Z)),
    Dk(s, o),
    i === 1 && K === 0 && !(e.mode & 1) && (Gj = B() + 500,
    fg && jg()))
}
function Dk(s, e) {
    var i = s.callbackNode;
    wc(s, e);
    var o = uc(s, s === Q ? Z : 0);
    if (o === 0)
        i !== null && bc(i),
        s.callbackNode = null,
        s.callbackPriority = 0;
    else if (e = o & -o,
    s.callbackPriority !== e) {
        if (i != null && bc(i),
        e === 1)
            s.tag === 0 ? ig(Ek.bind(null, s)) : hg(Ek.bind(null, s)),
            Jf(function() {
                !(K & 6) && jg()
            }),
            i = null;
        else {
            switch (Dc(o)) {
            case 1:
                i = fc;
                break;
            case 4:
                i = gc;
                break;
            case 16:
                i = hc;
                break;
            case 536870912:
                i = jc;
                break;
            default:
                i = hc
            }
            i = Fk(i, Gk.bind(null, s))
        }
        s.callbackPriority = e,
        s.callbackNode = i
    }
}
function Gk(s, e) {
    if (Ak = -1,
    Bk = 0,
    K & 6)
        throw Error(p(327));
    var i = s.callbackNode;
    if (Hk() && s.callbackNode !== i)
        return null;
    var o = uc(s, s === Q ? Z : 0);
    if (o === 0)
        return null;
    if (o & 30 || o & s.expiredLanes || e)
        e = Ik(s, o);
    else {
        e = o;
        var a = K;
        K |= 2;
        var c = Jk();
        (Q !== s || Z !== e) && (uk = null,
        Gj = B() + 500,
        Kk(s, e));
        do
            try {
                Lk();
                break
            } catch (h) {
                Mk(s, h)
            }
        while (!0);
        $g(),
        mk.current = c,
        K = a,
        Y !== null ? e = 0 : (Q = null,
        Z = 0,
        e = T)
    }
    if (e !== 0) {
        if (e === 2 && (a = xc(s),
        a !== 0 && (o = a,
        e = Nk(s, a))),
        e === 1)
            throw i = pk,
            Kk(s, 0),
            Ck(s, o),
            Dk(s, B()),
            i;
        if (e === 6)
            Ck(s, o);
        else {
            if (a = s.current.alternate,
            !(o & 30) && !Ok(a) && (e = Ik(s, o),
            e === 2 && (c = xc(s),
            c !== 0 && (o = c,
            e = Nk(s, c))),
            e === 1))
                throw i = pk,
                Kk(s, 0),
                Ck(s, o),
                Dk(s, B()),
                i;
            switch (s.finishedWork = a,
            s.finishedLanes = o,
            e) {
            case 0:
            case 1:
                throw Error(p(345));
            case 2:
                Pk(s, tk, uk);
                break;
            case 3:
                if (Ck(s, o),
                (o & 130023424) === o && (e = fk + 500 - B(),
                10 < e)) {
                    if (uc(s, 0) !== 0)
                        break;
                    if (a = s.suspendedLanes,
                    (a & o) !== o) {
                        R(),
                        s.pingedLanes |= s.suspendedLanes & a;
                        break
                    }
                    s.timeoutHandle = Ff(Pk.bind(null, s, tk, uk), e);
                    break
                }
                Pk(s, tk, uk);
                break;
            case 4:
                if (Ck(s, o),
                (o & 4194240) === o)
                    break;
                for (e = s.eventTimes,
                a = -1; 0 < o; ) {
                    var d = 31 - oc(o);
                    c = 1 << d,
                    d = e[d],
                    d > a && (a = d),
                    o &= ~c
                }
                if (o = a,
                o = B() - o,
                o = (120 > o ? 120 : 480 > o ? 480 : 1080 > o ? 1080 : 1920 > o ? 1920 : 3e3 > o ? 3e3 : 4320 > o ? 4320 : 1960 * lk(o / 1960)) - o,
                10 < o) {
                    s.timeoutHandle = Ff(Pk.bind(null, s, tk, uk), o);
                    break
                }
                Pk(s, tk, uk);
                break;
            case 5:
                Pk(s, tk, uk);
                break;
            default:
                throw Error(p(329))
            }
        }
    }
    return Dk(s, B()),
    s.callbackNode === i ? Gk.bind(null, s) : null
}
function Nk(s, e) {
    var i = sk;
    return s.current.memoizedState.isDehydrated && (Kk(s, e).flags |= 256),
    s = Ik(s, e),
    s !== 2 && (e = tk,
    tk = i,
    e !== null && Fj(e)),
    s
}
function Fj(s) {
    tk === null ? tk = s : tk.push.apply(tk, s)
}
function Ok(s) {
    for (var e = s; ; ) {
        if (e.flags & 16384) {
            var i = e.updateQueue;
            if (i !== null && (i = i.stores,
            i !== null))
                for (var o = 0; o < i.length; o++) {
                    var a = i[o]
                      , c = a.getSnapshot;
                    a = a.value;
                    try {
                        if (!He(c(), a))
                            return !1
                    } catch {
                        return !1
                    }
                }
        }
        if (i = e.child,
        e.subtreeFlags & 16384 && i !== null)
            i.return = e,
            e = i;
        else {
            if (e === s)
                break;
            for (; e.sibling === null; ) {
                if (e.return === null || e.return === s)
                    return !0;
                e = e.return
            }
            e.sibling.return = e.return,
            e = e.sibling
        }
    }
    return !0
}
function Ck(s, e) {
    for (e &= ~rk,
    e &= ~qk,
    s.suspendedLanes |= e,
    s.pingedLanes &= ~e,
    s = s.expirationTimes; 0 < e; ) {
        var i = 31 - oc(e)
          , o = 1 << i;
        s[i] = -1,
        e &= ~o
    }
}
function Ek(s) {
    if (K & 6)
        throw Error(p(327));
    Hk();
    var e = uc(s, 0);
    if (!(e & 1))
        return Dk(s, B()),
        null;
    var i = Ik(s, e);
    if (s.tag !== 0 && i === 2) {
        var o = xc(s);
        o !== 0 && (e = o,
        i = Nk(s, o))
    }
    if (i === 1)
        throw i = pk,
        Kk(s, 0),
        Ck(s, e),
        Dk(s, B()),
        i;
    if (i === 6)
        throw Error(p(345));
    return s.finishedWork = s.current.alternate,
    s.finishedLanes = e,
    Pk(s, tk, uk),
    Dk(s, B()),
    null
}
function Qk(s, e) {
    var i = K;
    K |= 1;
    try {
        return s(e)
    } finally {
        K = i,
        K === 0 && (Gj = B() + 500,
        fg && jg())
    }
}
function Rk(s) {
    wk !== null && wk.tag === 0 && !(K & 6) && Hk();
    var e = K;
    K |= 1;
    var i = ok.transition
      , o = C;
    try {
        if (ok.transition = null,
        C = 1,
        s)
            return s()
    } finally {
        C = o,
        ok.transition = i,
        K = e,
        !(K & 6) && jg()
    }
}
function Hj() {
    fj = ej.current,
    E$1(ej)
}
function Kk(s, e) {
    s.finishedWork = null,
    s.finishedLanes = 0;
    var i = s.timeoutHandle;
    if (i !== -1 && (s.timeoutHandle = -1,
    Gf(i)),
    Y !== null)
        for (i = Y.return; i !== null; ) {
            var o = i;
            switch (wg(o),
            o.tag) {
            case 1:
                o = o.type.childContextTypes,
                o != null && $f();
                break;
            case 3:
                zh(),
                E$1(Wf),
                E$1(H),
                Eh();
                break;
            case 5:
                Bh(o);
                break;
            case 4:
                zh();
                break;
            case 13:
                E$1(L$1);
                break;
            case 19:
                E$1(L$1);
                break;
            case 10:
                ah(o.type._context);
                break;
            case 22:
            case 23:
                Hj()
            }
            i = i.return
        }
    if (Q = s,
    Y = s = Pg(s.current, null),
    Z = fj = e,
    T = 0,
    pk = null,
    rk = qk = rh = 0,
    tk = sk = null,
    fh !== null) {
        for (e = 0; e < fh.length; e++)
            if (i = fh[e],
            o = i.interleaved,
            o !== null) {
                i.interleaved = null;
                var a = o.next
                  , c = i.pending;
                if (c !== null) {
                    var d = c.next;
                    c.next = a,
                    o.next = d
                }
                i.pending = o
            }
        fh = null
    }
    return s
}
function Mk(s, e) {
    do {
        var i = Y;
        try {
            if ($g(),
            Fh.current = Rh,
            Ih) {
                for (var o = M.memoizedState; o !== null; ) {
                    var a = o.queue;
                    a !== null && (a.pending = null),
                    o = o.next
                }
                Ih = !1
            }
            if (Hh = 0,
            O = N = M = null,
            Jh = !1,
            Kh = 0,
            nk.current = null,
            i === null || i.return === null) {
                T = 1,
                pk = e,
                Y = null;
                break
            }
            e: {
                var c = s
                  , d = i.return
                  , h = i
                  , g = e;
                if (e = Z,
                h.flags |= 32768,
                g !== null && typeof g == "object" && typeof g.then == "function") {
                    var b = g
                      , _ = h
                      , $ = _.tag;
                    if (!(_.mode & 1) && ($ === 0 || $ === 11 || $ === 15)) {
                        var _e = _.alternate;
                        _e ? (_.updateQueue = _e.updateQueue,
                        _.memoizedState = _e.memoizedState,
                        _.lanes = _e.lanes) : (_.updateQueue = null,
                        _.memoizedState = null)
                    }
                    var tt = Ui(d);
                    if (tt !== null) {
                        tt.flags &= -257,
                        Vi(tt, d, h, c, e),
                        tt.mode & 1 && Si(c, b, e),
                        e = tt,
                        g = b;
                        var rt = e.updateQueue;
                        if (rt === null) {
                            var et = new Set;
                            et.add(g),
                            e.updateQueue = et
                        } else
                            rt.add(g);
                        break e
                    } else {
                        if (!(e & 1)) {
                            Si(c, b, e),
                            tj();
                            break e
                        }
                        g = Error(p(426))
                    }
                } else if (I && h.mode & 1) {
                    var it = Ui(d);
                    if (it !== null) {
                        !(it.flags & 65536) && (it.flags |= 256),
                        Vi(it, d, h, c, e),
                        Jg(Ji(g, h));
                        break e
                    }
                }
                c = g = Ji(g, h),
                T !== 4 && (T = 2),
                sk === null ? sk = [c] : sk.push(c),
                c = d;
                do {
                    switch (c.tag) {
                    case 3:
                        c.flags |= 65536,
                        e &= -e,
                        c.lanes |= e;
                        var st = Ni(c, g, e);
                        ph(c, st);
                        break e;
                    case 1:
                        h = g;
                        var nt = c.type
                          , lt = c.stateNode;
                        if (!(c.flags & 128) && (typeof nt.getDerivedStateFromError == "function" || lt !== null && typeof lt.componentDidCatch == "function" && (Ri === null || !Ri.has(lt)))) {
                            c.flags |= 65536,
                            e &= -e,
                            c.lanes |= e;
                            var dt = Qi(c, h, e);
                            ph(c, dt);
                            break e
                        }
                    }
                    c = c.return
                } while (c !== null)
            }
            Sk(i)
        } catch (ot) {
            e = ot,
            Y === i && i !== null && (Y = i = i.return);
            continue
        }
        break
    } while (!0)
}
function Jk() {
    var s = mk.current;
    return mk.current = Rh,
    s === null ? Rh : s
}
function tj() {
    (T === 0 || T === 3 || T === 2) && (T = 4),
    Q === null || !(rh & 268435455) && !(qk & 268435455) || Ck(Q, Z)
}
function Ik(s, e) {
    var i = K;
    K |= 2;
    var o = Jk();
    (Q !== s || Z !== e) && (uk = null,
    Kk(s, e));
    do
        try {
            Tk();
            break
        } catch (a) {
            Mk(s, a)
        }
    while (!0);
    if ($g(),
    K = i,
    mk.current = o,
    Y !== null)
        throw Error(p(261));
    return Q = null,
    Z = 0,
    T
}
function Tk() {
    for (; Y !== null; )
        Uk(Y)
}
function Lk() {
    for (; Y !== null && !cc(); )
        Uk(Y)
}
function Uk(s) {
    var e = Vk(s.alternate, s, fj);
    s.memoizedProps = s.pendingProps,
    e === null ? Sk(s) : Y = e,
    nk.current = null
}
function Sk(s) {
    var e = s;
    do {
        var i = e.alternate;
        if (s = e.return,
        e.flags & 32768) {
            if (i = Ij(i, e),
            i !== null) {
                i.flags &= 32767,
                Y = i;
                return
            }
            if (s !== null)
                s.flags |= 32768,
                s.subtreeFlags = 0,
                s.deletions = null;
            else {
                T = 6,
                Y = null;
                return
            }
        } else if (i = Ej(i, e, fj),
        i !== null) {
            Y = i;
            return
        }
        if (e = e.sibling,
        e !== null) {
            Y = e;
            return
        }
        Y = e = s
    } while (e !== null);
    T === 0 && (T = 5)
}
function Pk(s, e, i) {
    var o = C
      , a = ok.transition;
    try {
        ok.transition = null,
        C = 1,
        Wk(s, e, i, o)
    } finally {
        ok.transition = a,
        C = o
    }
    return null
}
function Wk(s, e, i, o) {
    do
        Hk();
    while (wk !== null);
    if (K & 6)
        throw Error(p(327));
    i = s.finishedWork;
    var a = s.finishedLanes;
    if (i === null)
        return null;
    if (s.finishedWork = null,
    s.finishedLanes = 0,
    i === s.current)
        throw Error(p(177));
    s.callbackNode = null,
    s.callbackPriority = 0;
    var c = i.lanes | i.childLanes;
    if (Bc(s, c),
    s === Q && (Y = Q = null,
    Z = 0),
    !(i.subtreeFlags & 2064) && !(i.flags & 2064) || vk || (vk = !0,
    Fk(hc, function() {
        return Hk(),
        null
    })),
    c = (i.flags & 15990) !== 0,
    i.subtreeFlags & 15990 || c) {
        c = ok.transition,
        ok.transition = null;
        var d = C;
        C = 1;
        var h = K;
        K |= 4,
        nk.current = null,
        Oj(s, i),
        dk(i, s),
        Oe(Df),
        dd = !!Cf,
        Df = Cf = null,
        s.current = i,
        hk(i),
        dc(),
        K = h,
        C = d,
        ok.transition = c
    } else
        s.current = i;
    if (vk && (vk = !1,
    wk = s,
    xk = a),
    c = s.pendingLanes,
    c === 0 && (Ri = null),
    mc(i.stateNode),
    Dk(s, B()),
    e !== null)
        for (o = s.onRecoverableError,
        i = 0; i < e.length; i++)
            a = e[i],
            o(a.value, {
                componentStack: a.stack,
                digest: a.digest
            });
    if (Oi)
        throw Oi = !1,
        s = Pi,
        Pi = null,
        s;
    return xk & 1 && s.tag !== 0 && Hk(),
    c = s.pendingLanes,
    c & 1 ? s === zk ? yk++ : (yk = 0,
    zk = s) : yk = 0,
    jg(),
    null
}
function Hk() {
    if (wk !== null) {
        var s = Dc(xk)
          , e = ok.transition
          , i = C;
        try {
            if (ok.transition = null,
            C = 16 > s ? 16 : s,
            wk === null)
                var o = !1;
            else {
                if (s = wk,
                wk = null,
                xk = 0,
                K & 6)
                    throw Error(p(331));
                var a = K;
                for (K |= 4,
                V = s.current; V !== null; ) {
                    var c = V
                      , d = c.child;
                    if (V.flags & 16) {
                        var h = c.deletions;
                        if (h !== null) {
                            for (var g = 0; g < h.length; g++) {
                                var b = h[g];
                                for (V = b; V !== null; ) {
                                    var _ = V;
                                    switch (_.tag) {
                                    case 0:
                                    case 11:
                                    case 15:
                                        Pj(8, _, c)
                                    }
                                    var $ = _.child;
                                    if ($ !== null)
                                        $.return = _,
                                        V = $;
                                    else
                                        for (; V !== null; ) {
                                            _ = V;
                                            var _e = _.sibling
                                              , tt = _.return;
                                            if (Sj(_),
                                            _ === b) {
                                                V = null;
                                                break
                                            }
                                            if (_e !== null) {
                                                _e.return = tt,
                                                V = _e;
                                                break
                                            }
                                            V = tt
                                        }
                                }
                            }
                            var rt = c.alternate;
                            if (rt !== null) {
                                var et = rt.child;
                                if (et !== null) {
                                    rt.child = null;
                                    do {
                                        var it = et.sibling;
                                        et.sibling = null,
                                        et = it
                                    } while (et !== null)
                                }
                            }
                            V = c
                        }
                    }
                    if (c.subtreeFlags & 2064 && d !== null)
                        d.return = c,
                        V = d;
                    else
                        e: for (; V !== null; ) {
                            if (c = V,
                            c.flags & 2048)
                                switch (c.tag) {
                                case 0:
                                case 11:
                                case 15:
                                    Pj(9, c, c.return)
                                }
                            var st = c.sibling;
                            if (st !== null) {
                                st.return = c.return,
                                V = st;
                                break e
                            }
                            V = c.return
                        }
                }
                var nt = s.current;
                for (V = nt; V !== null; ) {
                    d = V;
                    var lt = d.child;
                    if (d.subtreeFlags & 2064 && lt !== null)
                        lt.return = d,
                        V = lt;
                    else
                        e: for (d = nt; V !== null; ) {
                            if (h = V,
                            h.flags & 2048)
                                try {
                                    switch (h.tag) {
                                    case 0:
                                    case 11:
                                    case 15:
                                        Qj(9, h)
                                    }
                                } catch (ot) {
                                    W(h, h.return, ot)
                                }
                            if (h === d) {
                                V = null;
                                break e
                            }
                            var dt = h.sibling;
                            if (dt !== null) {
                                dt.return = h.return,
                                V = dt;
                                break e
                            }
                            V = h.return
                        }
                }
                if (K = a,
                jg(),
                lc && typeof lc.onPostCommitFiberRoot == "function")
                    try {
                        lc.onPostCommitFiberRoot(kc, s)
                    } catch {}
                o = !0
            }
            return o
        } finally {
            C = i,
            ok.transition = e
        }
    }
    return !1
}
function Xk(s, e, i) {
    e = Ji(i, e),
    e = Ni(s, e, 1),
    s = nh(s, e, 1),
    e = R(),
    s !== null && (Ac(s, 1, e),
    Dk(s, e))
}
function W(s, e, i) {
    if (s.tag === 3)
        Xk(s, s, i);
    else
        for (; e !== null; ) {
            if (e.tag === 3) {
                Xk(e, s, i);
                break
            } else if (e.tag === 1) {
                var o = e.stateNode;
                if (typeof e.type.getDerivedStateFromError == "function" || typeof o.componentDidCatch == "function" && (Ri === null || !Ri.has(o))) {
                    s = Ji(i, s),
                    s = Qi(e, s, 1),
                    e = nh(e, s, 1),
                    s = R(),
                    e !== null && (Ac(e, 1, s),
                    Dk(e, s));
                    break
                }
            }
            e = e.return
        }
}
function Ti(s, e, i) {
    var o = s.pingCache;
    o !== null && o.delete(e),
    e = R(),
    s.pingedLanes |= s.suspendedLanes & i,
    Q === s && (Z & i) === i && (T === 4 || T === 3 && (Z & 130023424) === Z && 500 > B() - fk ? Kk(s, 0) : rk |= i),
    Dk(s, e)
}
function Yk(s, e) {
    e === 0 && (s.mode & 1 ? (e = sc,
    sc <<= 1,
    !(sc & 130023424) && (sc = 4194304)) : e = 1);
    var i = R();
    s = ih(s, e),
    s !== null && (Ac(s, e, i),
    Dk(s, i))
}
function uj(s) {
    var e = s.memoizedState
      , i = 0;
    e !== null && (i = e.retryLane),
    Yk(s, i)
}
function bk(s, e) {
    var i = 0;
    switch (s.tag) {
    case 13:
        var o = s.stateNode
          , a = s.memoizedState;
        a !== null && (i = a.retryLane);
        break;
    case 19:
        o = s.stateNode;
        break;
    default:
        throw Error(p(314))
    }
    o !== null && o.delete(e),
    Yk(s, i)
}
var Vk;
Vk = function(s, e, i) {
    if (s !== null)
        if (s.memoizedProps !== e.pendingProps || Wf.current)
            dh = !0;
        else {
            if (!(s.lanes & i) && !(e.flags & 128))
                return dh = !1,
                yj(s, e, i);
            dh = !!(s.flags & 131072)
        }
    else
        dh = !1,
        I && e.flags & 1048576 && ug(e, ng, e.index);
    switch (e.lanes = 0,
    e.tag) {
    case 2:
        var o = e.type;
        ij(s, e),
        s = e.pendingProps;
        var a = Yf(e, H.current);
        ch(e, i),
        a = Nh(null, e, o, s, a, i);
        var c = Sh();
        return e.flags |= 1,
        typeof a == "object" && a !== null && typeof a.render == "function" && a.$$typeof === void 0 ? (e.tag = 1,
        e.memoizedState = null,
        e.updateQueue = null,
        Zf(o) ? (c = !0,
        cg(e)) : c = !1,
        e.memoizedState = a.state !== null && a.state !== void 0 ? a.state : null,
        kh(e),
        a.updater = Ei,
        e.stateNode = a,
        a._reactInternals = e,
        Ii(e, o, s, i),
        e = jj(null, e, o, !0, c, i)) : (e.tag = 0,
        I && c && vg(e),
        Xi(null, e, a, i),
        e = e.child),
        e;
    case 16:
        o = e.elementType;
        e: {
            switch (ij(s, e),
            s = e.pendingProps,
            a = o._init,
            o = a(o._payload),
            e.type = o,
            a = e.tag = Zk(o),
            s = Ci(o, s),
            a) {
            case 0:
                e = cj(null, e, o, s, i);
                break e;
            case 1:
                e = hj(null, e, o, s, i);
                break e;
            case 11:
                e = Yi(null, e, o, s, i);
                break e;
            case 14:
                e = $i(null, e, o, Ci(o.type, s), i);
                break e
            }
            throw Error(p(306, o, ""))
        }
        return e;
    case 0:
        return o = e.type,
        a = e.pendingProps,
        a = e.elementType === o ? a : Ci(o, a),
        cj(s, e, o, a, i);
    case 1:
        return o = e.type,
        a = e.pendingProps,
        a = e.elementType === o ? a : Ci(o, a),
        hj(s, e, o, a, i);
    case 3:
        e: {
            if (kj(e),
            s === null)
                throw Error(p(387));
            o = e.pendingProps,
            c = e.memoizedState,
            a = c.element,
            lh(s, e),
            qh(e, o, null, i);
            var d = e.memoizedState;
            if (o = d.element,
            c.isDehydrated)
                if (c = {
                    element: o,
                    isDehydrated: !1,
                    cache: d.cache,
                    pendingSuspenseBoundaries: d.pendingSuspenseBoundaries,
                    transitions: d.transitions
                },
                e.updateQueue.baseState = c,
                e.memoizedState = c,
                e.flags & 256) {
                    a = Ji(Error(p(423)), e),
                    e = lj(s, e, o, i, a);
                    break e
                } else if (o !== a) {
                    a = Ji(Error(p(424)), e),
                    e = lj(s, e, o, i, a);
                    break e
                } else
                    for (yg = Lf(e.stateNode.containerInfo.firstChild),
                    xg = e,
                    I = !0,
                    zg = null,
                    i = Vg(e, null, o, i),
                    e.child = i; i; )
                        i.flags = i.flags & -3 | 4096,
                        i = i.sibling;
            else {
                if (Ig(),
                o === a) {
                    e = Zi(s, e, i);
                    break e
                }
                Xi(s, e, o, i)
            }
            e = e.child
        }
        return e;
    case 5:
        return Ah(e),
        s === null && Eg(e),
        o = e.type,
        a = e.pendingProps,
        c = s !== null ? s.memoizedProps : null,
        d = a.children,
        Ef(o, a) ? d = null : c !== null && Ef(o, c) && (e.flags |= 32),
        gj(s, e),
        Xi(s, e, d, i),
        e.child;
    case 6:
        return s === null && Eg(e),
        null;
    case 13:
        return oj(s, e, i);
    case 4:
        return yh(e, e.stateNode.containerInfo),
        o = e.pendingProps,
        s === null ? e.child = Ug(e, null, o, i) : Xi(s, e, o, i),
        e.child;
    case 11:
        return o = e.type,
        a = e.pendingProps,
        a = e.elementType === o ? a : Ci(o, a),
        Yi(s, e, o, a, i);
    case 7:
        return Xi(s, e, e.pendingProps, i),
        e.child;
    case 8:
        return Xi(s, e, e.pendingProps.children, i),
        e.child;
    case 12:
        return Xi(s, e, e.pendingProps.children, i),
        e.child;
    case 10:
        e: {
            if (o = e.type._context,
            a = e.pendingProps,
            c = e.memoizedProps,
            d = a.value,
            G(Wg, o._currentValue),
            o._currentValue = d,
            c !== null)
                if (He(c.value, d)) {
                    if (c.children === a.children && !Wf.current) {
                        e = Zi(s, e, i);
                        break e
                    }
                } else
                    for (c = e.child,
                    c !== null && (c.return = e); c !== null; ) {
                        var h = c.dependencies;
                        if (h !== null) {
                            d = c.child;
                            for (var g = h.firstContext; g !== null; ) {
                                if (g.context === o) {
                                    if (c.tag === 1) {
                                        g = mh(-1, i & -i),
                                        g.tag = 2;
                                        var b = c.updateQueue;
                                        if (b !== null) {
                                            b = b.shared;
                                            var _ = b.pending;
                                            _ === null ? g.next = g : (g.next = _.next,
                                            _.next = g),
                                            b.pending = g
                                        }
                                    }
                                    c.lanes |= i,
                                    g = c.alternate,
                                    g !== null && (g.lanes |= i),
                                    bh(c.return, i, e),
                                    h.lanes |= i;
                                    break
                                }
                                g = g.next
                            }
                        } else if (c.tag === 10)
                            d = c.type === e.type ? null : c.child;
                        else if (c.tag === 18) {
                            if (d = c.return,
                            d === null)
                                throw Error(p(341));
                            d.lanes |= i,
                            h = d.alternate,
                            h !== null && (h.lanes |= i),
                            bh(d, i, e),
                            d = c.sibling
                        } else
                            d = c.child;
                        if (d !== null)
                            d.return = c;
                        else
                            for (d = c; d !== null; ) {
                                if (d === e) {
                                    d = null;
                                    break
                                }
                                if (c = d.sibling,
                                c !== null) {
                                    c.return = d.return,
                                    d = c;
                                    break
                                }
                                d = d.return
                            }
                        c = d
                    }
            Xi(s, e, a.children, i),
            e = e.child
        }
        return e;
    case 9:
        return a = e.type,
        o = e.pendingProps.children,
        ch(e, i),
        a = eh(a),
        o = o(a),
        e.flags |= 1,
        Xi(s, e, o, i),
        e.child;
    case 14:
        return o = e.type,
        a = Ci(o, e.pendingProps),
        a = Ci(o.type, a),
        $i(s, e, o, a, i);
    case 15:
        return bj(s, e, e.type, e.pendingProps, i);
    case 17:
        return o = e.type,
        a = e.pendingProps,
        a = e.elementType === o ? a : Ci(o, a),
        ij(s, e),
        e.tag = 1,
        Zf(o) ? (s = !0,
        cg(e)) : s = !1,
        ch(e, i),
        Gi(e, o, a),
        Ii(e, o, a, i),
        jj(null, e, o, !0, s, i);
    case 19:
        return xj(s, e, i);
    case 22:
        return dj(s, e, i)
    }
    throw Error(p(156, e.tag))
}
;
function Fk(s, e) {
    return ac(s, e)
}
function $k(s, e, i, o) {
    this.tag = s,
    this.key = i,
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null,
    this.index = 0,
    this.ref = null,
    this.pendingProps = e,
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null,
    this.mode = o,
    this.subtreeFlags = this.flags = 0,
    this.deletions = null,
    this.childLanes = this.lanes = 0,
    this.alternate = null
}
function Bg(s, e, i, o) {
    return new $k(s,e,i,o)
}
function aj(s) {
    return s = s.prototype,
    !(!s || !s.isReactComponent)
}
function Zk(s) {
    if (typeof s == "function")
        return aj(s) ? 1 : 0;
    if (s != null) {
        if (s = s.$$typeof,
        s === Da)
            return 11;
        if (s === Ga)
            return 14
    }
    return 2
}
function Pg(s, e) {
    var i = s.alternate;
    return i === null ? (i = Bg(s.tag, e, s.key, s.mode),
    i.elementType = s.elementType,
    i.type = s.type,
    i.stateNode = s.stateNode,
    i.alternate = s,
    s.alternate = i) : (i.pendingProps = e,
    i.type = s.type,
    i.flags = 0,
    i.subtreeFlags = 0,
    i.deletions = null),
    i.flags = s.flags & 14680064,
    i.childLanes = s.childLanes,
    i.lanes = s.lanes,
    i.child = s.child,
    i.memoizedProps = s.memoizedProps,
    i.memoizedState = s.memoizedState,
    i.updateQueue = s.updateQueue,
    e = s.dependencies,
    i.dependencies = e === null ? null : {
        lanes: e.lanes,
        firstContext: e.firstContext
    },
    i.sibling = s.sibling,
    i.index = s.index,
    i.ref = s.ref,
    i
}
function Rg(s, e, i, o, a, c) {
    var d = 2;
    if (o = s,
    typeof s == "function")
        aj(s) && (d = 1);
    else if (typeof s == "string")
        d = 5;
    else
        e: switch (s) {
        case ya:
            return Tg(i.children, a, c, e);
        case za:
            d = 8,
            a |= 8;
            break;
        case Aa:
            return s = Bg(12, i, e, a | 2),
            s.elementType = Aa,
            s.lanes = c,
            s;
        case Ea:
            return s = Bg(13, i, e, a),
            s.elementType = Ea,
            s.lanes = c,
            s;
        case Fa:
            return s = Bg(19, i, e, a),
            s.elementType = Fa,
            s.lanes = c,
            s;
        case Ia:
            return pj(i, a, c, e);
        default:
            if (typeof s == "object" && s !== null)
                switch (s.$$typeof) {
                case Ba:
                    d = 10;
                    break e;
                case Ca:
                    d = 9;
                    break e;
                case Da:
                    d = 11;
                    break e;
                case Ga:
                    d = 14;
                    break e;
                case Ha:
                    d = 16,
                    o = null;
                    break e
                }
            throw Error(p(130, s == null ? s : typeof s, ""))
        }
    return e = Bg(d, i, e, a),
    e.elementType = s,
    e.type = o,
    e.lanes = c,
    e
}
function Tg(s, e, i, o) {
    return s = Bg(7, s, o, e),
    s.lanes = i,
    s
}
function pj(s, e, i, o) {
    return s = Bg(22, s, o, e),
    s.elementType = Ia,
    s.lanes = i,
    s.stateNode = {
        isHidden: !1
    },
    s
}
function Qg(s, e, i) {
    return s = Bg(6, s, null, e),
    s.lanes = i,
    s
}
function Sg(s, e, i) {
    return e = Bg(4, s.children !== null ? s.children : [], s.key, e),
    e.lanes = i,
    e.stateNode = {
        containerInfo: s.containerInfo,
        pendingChildren: null,
        implementation: s.implementation
    },
    e
}
function al(s, e, i, o, a) {
    this.tag = e,
    this.containerInfo = s,
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null,
    this.timeoutHandle = -1,
    this.callbackNode = this.pendingContext = this.context = null,
    this.callbackPriority = 0,
    this.eventTimes = zc(0),
    this.expirationTimes = zc(-1),
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0,
    this.entanglements = zc(0),
    this.identifierPrefix = o,
    this.onRecoverableError = a,
    this.mutableSourceEagerHydrationData = null
}
function bl(s, e, i, o, a, c, d, h, g) {
    return s = new al(s,e,i,h,g),
    e === 1 ? (e = 1,
    c === !0 && (e |= 8)) : e = 0,
    c = Bg(3, null, null, e),
    s.current = c,
    c.stateNode = s,
    c.memoizedState = {
        element: o,
        isDehydrated: i,
        cache: null,
        transitions: null,
        pendingSuspenseBoundaries: null
    },
    kh(c),
    s
}
function cl(s, e, i) {
    var o = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
    return {
        $$typeof: wa,
        key: o == null ? null : "" + o,
        children: s,
        containerInfo: e,
        implementation: i
    }
}
function dl(s) {
    if (!s)
        return Vf;
    s = s._reactInternals;
    e: {
        if (Vb(s) !== s || s.tag !== 1)
            throw Error(p(170));
        var e = s;
        do {
            switch (e.tag) {
            case 3:
                e = e.stateNode.context;
                break e;
            case 1:
                if (Zf(e.type)) {
                    e = e.stateNode.__reactInternalMemoizedMergedChildContext;
                    break e
                }
            }
            e = e.return
        } while (e !== null);
        throw Error(p(171))
    }
    if (s.tag === 1) {
        var i = s.type;
        if (Zf(i))
            return bg(s, i, e)
    }
    return e
}
function el(s, e, i, o, a, c, d, h, g) {
    return s = bl(i, o, !0, s, a, c, d, h, g),
    s.context = dl(null),
    i = s.current,
    o = R(),
    a = yi(i),
    c = mh(o, a),
    c.callback = e ?? null,
    nh(i, c, a),
    s.current.lanes = a,
    Ac(s, a, o),
    Dk(s, o),
    s
}
function fl(s, e, i, o) {
    var a = e.current
      , c = R()
      , d = yi(a);
    return i = dl(i),
    e.context === null ? e.context = i : e.pendingContext = i,
    e = mh(c, d),
    e.payload = {
        element: s
    },
    o = o === void 0 ? null : o,
    o !== null && (e.callback = o),
    s = nh(a, e, d),
    s !== null && (gi(s, a, d, c),
    oh(s, a, d)),
    d
}
function gl(s) {
    if (s = s.current,
    !s.child)
        return null;
    switch (s.child.tag) {
    case 5:
        return s.child.stateNode;
    default:
        return s.child.stateNode
    }
}
function hl(s, e) {
    if (s = s.memoizedState,
    s !== null && s.dehydrated !== null) {
        var i = s.retryLane;
        s.retryLane = i !== 0 && i < e ? i : e
    }
}
function il(s, e) {
    hl(s, e),
    (s = s.alternate) && hl(s, e)
}
function jl() {
    return null
}
var kl = typeof reportError == "function" ? reportError : function(s) {
    console.error(s)
}
;
function ll(s) {
    this._internalRoot = s
}
ml.prototype.render = ll.prototype.render = function(s) {
    var e = this._internalRoot;
    if (e === null)
        throw Error(p(409));
    fl(s, e, null, null)
}
;
ml.prototype.unmount = ll.prototype.unmount = function() {
    var s = this._internalRoot;
    if (s !== null) {
        this._internalRoot = null;
        var e = s.containerInfo;
        Rk(function() {
            fl(null, s, null, null)
        }),
        e[uf] = null
    }
}
;
function ml(s) {
    this._internalRoot = s
}
ml.prototype.unstable_scheduleHydration = function(s) {
    if (s) {
        var e = Hc();
        s = {
            blockedOn: null,
            target: s,
            priority: e
        };
        for (var i = 0; i < Qc.length && e !== 0 && e < Qc[i].priority; i++)
            ;
        Qc.splice(i, 0, s),
        i === 0 && Vc(s)
    }
}
;
function nl(s) {
    return !(!s || s.nodeType !== 1 && s.nodeType !== 9 && s.nodeType !== 11)
}
function ol(s) {
    return !(!s || s.nodeType !== 1 && s.nodeType !== 9 && s.nodeType !== 11 && (s.nodeType !== 8 || s.nodeValue !== " react-mount-point-unstable "))
}
function pl() {}
function ql(s, e, i, o, a) {
    if (a) {
        if (typeof o == "function") {
            var c = o;
            o = function() {
                var b = gl(d);
                c.call(b)
            }
        }
        var d = el(e, o, s, 0, null, !1, !1, "", pl);
        return s._reactRootContainer = d,
        s[uf] = d.current,
        sf(s.nodeType === 8 ? s.parentNode : s),
        Rk(),
        d
    }
    for (; a = s.lastChild; )
        s.removeChild(a);
    if (typeof o == "function") {
        var h = o;
        o = function() {
            var b = gl(g);
            h.call(b)
        }
    }
    var g = bl(s, 0, !1, null, null, !1, !1, "", pl);
    return s._reactRootContainer = g,
    s[uf] = g.current,
    sf(s.nodeType === 8 ? s.parentNode : s),
    Rk(function() {
        fl(e, g, i, o)
    }),
    g
}
function rl(s, e, i, o, a) {
    var c = i._reactRootContainer;
    if (c) {
        var d = c;
        if (typeof a == "function") {
            var h = a;
            a = function() {
                var g = gl(d);
                h.call(g)
            }
        }
        fl(e, d, s, a)
    } else
        d = ql(i, e, s, a, o);
    return gl(d)
}
Ec = function(s) {
    switch (s.tag) {
    case 3:
        var e = s.stateNode;
        if (e.current.memoizedState.isDehydrated) {
            var i = tc(e.pendingLanes);
            i !== 0 && (Cc(e, i | 1),
            Dk(e, B()),
            !(K & 6) && (Gj = B() + 500,
            jg()))
        }
        break;
    case 13:
        Rk(function() {
            var o = ih(s, 1);
            if (o !== null) {
                var a = R();
                gi(o, s, 1, a)
            }
        }),
        il(s, 1)
    }
}
;
Fc = function(s) {
    if (s.tag === 13) {
        var e = ih(s, 134217728);
        if (e !== null) {
            var i = R();
            gi(e, s, 134217728, i)
        }
        il(s, 134217728)
    }
}
;
Gc = function(s) {
    if (s.tag === 13) {
        var e = yi(s)
          , i = ih(s, e);
        if (i !== null) {
            var o = R();
            gi(i, s, e, o)
        }
        il(s, e)
    }
}
;
Hc = function() {
    return C
}
;
Ic = function(s, e) {
    var i = C;
    try {
        return C = s,
        e()
    } finally {
        C = i
    }
}
;
yb = function(s, e, i) {
    switch (e) {
    case "input":
        if (bb(s, i),
        e = i.name,
        i.type === "radio" && e != null) {
            for (i = s; i.parentNode; )
                i = i.parentNode;
            for (i = i.querySelectorAll("input[name=" + JSON.stringify("" + e) + '][type="radio"]'),
            e = 0; e < i.length; e++) {
                var o = i[e];
                if (o !== s && o.form === s.form) {
                    var a = Db(o);
                    if (!a)
                        throw Error(p(90));
                    Wa(o),
                    bb(o, a)
                }
            }
        }
        break;
    case "textarea":
        ib(s, i);
        break;
    case "select":
        e = i.value,
        e != null && fb(s, !!i.multiple, e, !1)
    }
}
;
Gb = Qk;
Hb = Rk;
var sl = {
    usingClientEntryPoint: !1,
    Events: [Cb, ue, Db, Eb, Fb, Qk]
}
  , tl = {
    findFiberByHostInstance: Wc,
    bundleType: 0,
    version: "18.3.1",
    rendererPackageName: "react-dom"
}
  , ul = {
    bundleType: tl.bundleType,
    version: tl.version,
    rendererPackageName: tl.rendererPackageName,
    rendererConfig: tl.rendererConfig,
    overrideHookState: null,
    overrideHookStateDeletePath: null,
    overrideHookStateRenamePath: null,
    overrideProps: null,
    overridePropsDeletePath: null,
    overridePropsRenamePath: null,
    setErrorHandler: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: ua.ReactCurrentDispatcher,
    findHostInstanceByFiber: function(s) {
        return s = Zb(s),
        s === null ? null : s.stateNode
    },
    findFiberByHostInstance: tl.findFiberByHostInstance || jl,
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null,
    reconcilerVersion: "18.3.1-next-f1338f8080-20240426"
};
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u") {
    var vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!vl.isDisabled && vl.supportsFiber)
        try {
            kc = vl.inject(ul),
            lc = vl
        } catch {}
}
reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
reactDom_production_min.createPortal = function(s, e) {
    var i = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
    if (!nl(e))
        throw Error(p(200));
    return cl(s, e, null, i)
}
;
reactDom_production_min.createRoot = function(s, e) {
    if (!nl(s))
        throw Error(p(299));
    var i = !1
      , o = ""
      , a = kl;
    return e != null && (e.unstable_strictMode === !0 && (i = !0),
    e.identifierPrefix !== void 0 && (o = e.identifierPrefix),
    e.onRecoverableError !== void 0 && (a = e.onRecoverableError)),
    e = bl(s, 1, !1, null, null, i, !1, o, a),
    s[uf] = e.current,
    sf(s.nodeType === 8 ? s.parentNode : s),
    new ll(e)
}
;
reactDom_production_min.findDOMNode = function(s) {
    if (s == null)
        return null;
    if (s.nodeType === 1)
        return s;
    var e = s._reactInternals;
    if (e === void 0)
        throw typeof s.render == "function" ? Error(p(188)) : (s = Object.keys(s).join(","),
        Error(p(268, s)));
    return s = Zb(e),
    s = s === null ? null : s.stateNode,
    s
}
;
reactDom_production_min.flushSync = function(s) {
    return Rk(s)
}
;
reactDom_production_min.hydrate = function(s, e, i) {
    if (!ol(e))
        throw Error(p(200));
    return rl(null, s, e, !0, i)
}
;
reactDom_production_min.hydrateRoot = function(s, e, i) {
    if (!nl(s))
        throw Error(p(405));
    var o = i != null && i.hydratedSources || null
      , a = !1
      , c = ""
      , d = kl;
    if (i != null && (i.unstable_strictMode === !0 && (a = !0),
    i.identifierPrefix !== void 0 && (c = i.identifierPrefix),
    i.onRecoverableError !== void 0 && (d = i.onRecoverableError)),
    e = el(e, null, s, 1, i ?? null, a, !1, c, d),
    s[uf] = e.current,
    sf(s),
    o)
        for (s = 0; s < o.length; s++)
            i = o[s],
            a = i._getVersion,
            a = a(i._source),
            e.mutableSourceEagerHydrationData == null ? e.mutableSourceEagerHydrationData = [i, a] : e.mutableSourceEagerHydrationData.push(i, a);
    return new ml(e)
}
;
reactDom_production_min.render = function(s, e, i) {
    if (!ol(e))
        throw Error(p(200));
    return rl(null, s, e, !1, i)
}
;
reactDom_production_min.unmountComponentAtNode = function(s) {
    if (!ol(s))
        throw Error(p(40));
    return s._reactRootContainer ? (Rk(function() {
        rl(null, null, s, !1, function() {
            s._reactRootContainer = null,
            s[uf] = null
        })
    }),
    !0) : !1
}
;
reactDom_production_min.unstable_batchedUpdates = Qk;
reactDom_production_min.unstable_renderSubtreeIntoContainer = function(s, e, i, o) {
    if (!ol(i))
        throw Error(p(200));
    if (s == null || s._reactInternals === void 0)
        throw Error(p(38));
    return rl(s, e, i, !1, o)
}
;
reactDom_production_min.version = "18.3.1-next-f1338f8080-20240426";
function checkDCE() {
    if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function"))
        try {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE)
        } catch (s) {
            console.error(s)
        }
}
checkDCE(),
reactDom.exports = reactDom_production_min;
var reactDomExports = reactDom.exports;
const Gt = getDefaultExportFromCjs(reactDomExports);
var createRoot, m = reactDomExports;
createRoot = m.createRoot,
m.hydrateRoot;
const TOAST_LIMIT = 1
  , TOAST_REMOVE_DELAY = 1e6;
let count$2 = 0;
function genId() {
    return count$2 = (count$2 + 1) % Number.MAX_SAFE_INTEGER,
    count$2.toString()
}
const toastTimeouts = new Map
  , addToRemoveQueue = s => {
    if (toastTimeouts.has(s))
        return;
    const e = setTimeout( () => {
        toastTimeouts.delete(s),
        dispatch({
            type: "REMOVE_TOAST",
            toastId: s
        })
    }
    , TOAST_REMOVE_DELAY);
    toastTimeouts.set(s, e)
}
  , reducer = (s, e) => {
    switch (e.type) {
    case "ADD_TOAST":
        return {
            ...s,
            toasts: [e.toast, ...s.toasts].slice(0, TOAST_LIMIT)
        };
    case "UPDATE_TOAST":
        return {
            ...s,
            toasts: s.toasts.map(i => i.id === e.toast.id ? {
                ...i,
                ...e.toast
            } : i)
        };
    case "DISMISS_TOAST":
        {
            const {toastId: i} = e;
            return i ? addToRemoveQueue(i) : s.toasts.forEach(o => {
                addToRemoveQueue(o.id)
            }
            ),
            {
                ...s,
                toasts: s.toasts.map(o => o.id === i || i === void 0 ? {
                    ...o,
                    open: !1
                } : o)
            }
        }
    case "REMOVE_TOAST":
        return e.toastId === void 0 ? {
            ...s,
            toasts: []
        } : {
            ...s,
            toasts: s.toasts.filter(i => i.id !== e.toastId)
        }
    }
}
  , listeners = [];
let memoryState = {
    toasts: []
};
function dispatch(s) {
    memoryState = reducer(memoryState, s),
    listeners.forEach(e => {
        e(memoryState)
    }
    )
}
function toast({...s}) {
    const e = genId()
      , i = a => dispatch({
        type: "UPDATE_TOAST",
        toast: {
            ...a,
            id: e
        }
    })
      , o = () => dispatch({
        type: "DISMISS_TOAST",
        toastId: e
    });
    return dispatch({
        type: "ADD_TOAST",
        toast: {
            ...s,
            id: e,
            open: !0,
            onOpenChange: a => {
                a || o()
            }
        }
    }),
    {
        id: e,
        dismiss: o,
        update: i
    }
}
function useToast() {
    const [s,e] = reactExports.useState(memoryState);
    return reactExports.useEffect( () => (listeners.push(e),
    () => {
        const i = listeners.indexOf(e);
        i > -1 && listeners.splice(i, 1)
    }
    ), [s]),
    {
        ...s,
        toast,
        dismiss: i => dispatch({
            type: "DISMISS_TOAST",
            toastId: i
        })
    }
}
function composeEventHandlers(s, e, {checkForDefaultPrevented: i=!0}={}) {
    return function(a) {
        if (s == null || s(a),
        i === !1 || !a.defaultPrevented)
            return e == null ? void 0 : e(a)
    }
}
function setRef$1(s, e) {
    typeof s == "function" ? s(e) : s != null && (s.current = e)
}
function composeRefs$1(...s) {
    return e => s.forEach(i => setRef$1(i, e))
}
function useComposedRefs(...s) {
    return reactExports.useCallback(composeRefs$1(...s), s)
}
function createContextScope$4(s, e=[]) {
    let i = [];
    function o(c, d) {
        const h = reactExports.createContext(d)
          , g = i.length;
        i = [...i, d];
        function b($) {
            const {scope: _e, children: tt, ...rt} = $
              , et = (_e == null ? void 0 : _e[s][g]) || h
              , it = reactExports.useMemo( () => rt, Object.values(rt));
            return jsxRuntimeExports.jsx(et.Provider, {
                value: it,
                children: tt
            })
        }
        function _($, _e) {
            const tt = (_e == null ? void 0 : _e[s][g]) || h
              , rt = reactExports.useContext(tt);
            if (rt)
                return rt;
            if (d !== void 0)
                return d;
            throw new Error(`\`${$}\` must be used within \`${c}\``)
        }
        return b.displayName = c + "Provider",
        [b, _]
    }
    const a = () => {
        const c = i.map(d => reactExports.createContext(d));
        return function(h) {
            const g = (h == null ? void 0 : h[s]) || c;
            return reactExports.useMemo( () => ({
                [`__scope${s}`]: {
                    ...h,
                    [s]: g
                }
            }), [h, g])
        }
    }
    ;
    return a.scopeName = s,
    [o, composeContextScopes$4(a, ...e)]
}
function composeContextScopes$4(...s) {
    const e = s[0];
    if (s.length === 1)
        return e;
    const i = () => {
        const o = s.map(a => ({
            useScope: a(),
            scopeName: a.scopeName
        }));
        return function(c) {
            const d = o.reduce( (h, {useScope: g, scopeName: b}) => {
                const $ = g(c)[`__scope${b}`];
                return {
                    ...h,
                    ...$
                }
            }
            , {});
            return reactExports.useMemo( () => ({
                [`__scope${e.scopeName}`]: d
            }), [d])
        }
    }
    ;
    return i.scopeName = e.scopeName,
    i
}
var Slot = reactExports.forwardRef( (s, e) => {
    const {children: i, ...o} = s
      , a = reactExports.Children.toArray(i)
      , c = a.find(isSlottable$1);
    if (c) {
        const d = c.props.children
          , h = a.map(g => g === c ? reactExports.Children.count(d) > 1 ? reactExports.Children.only(null) : reactExports.isValidElement(d) ? d.props.children : null : g);
        return jsxRuntimeExports.jsx(SlotClone, {
            ...o,
            ref: e,
            children: reactExports.isValidElement(d) ? reactExports.cloneElement(d, void 0, h) : null
        })
    }
    return jsxRuntimeExports.jsx(SlotClone, {
        ...o,
        ref: e,
        children: i
    })
}
);
Slot.displayName = "Slot";
var SlotClone = reactExports.forwardRef( (s, e) => {
    const {children: i, ...o} = s;
    if (reactExports.isValidElement(i)) {
        const a = getElementRef$2(i);
        return reactExports.cloneElement(i, {
            ...mergeProps$1(o, i.props),
            ref: e ? composeRefs$1(e, a) : a
        })
    }
    return reactExports.Children.count(i) > 1 ? reactExports.Children.only(null) : null
}
);
SlotClone.displayName = "SlotClone";
var Slottable = ({children: s}) => jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
    children: s
});
function isSlottable$1(s) {
    return reactExports.isValidElement(s) && s.type === Slottable
}
function mergeProps$1(s, e) {
    const i = {
        ...e
    };
    for (const o in e) {
        const a = s[o]
          , c = e[o];
        /^on[A-Z]/.test(o) ? a && c ? i[o] = (...h) => {
            c(...h),
            a(...h)
        }
        : a && (i[o] = a) : o === "style" ? i[o] = {
            ...a,
            ...c
        } : o === "className" && (i[o] = [a, c].filter(Boolean).join(" "))
    }
    return {
        ...s,
        ...i
    }
}
function getElementRef$2(s) {
    var o, a;
    let e = (o = Object.getOwnPropertyDescriptor(s.props, "ref")) == null ? void 0 : o.get
      , i = e && "isReactWarning"in e && e.isReactWarning;
    return i ? s.ref : (e = (a = Object.getOwnPropertyDescriptor(s, "ref")) == null ? void 0 : a.get,
    i = e && "isReactWarning"in e && e.isReactWarning,
    i ? s.props.ref : s.props.ref || s.ref)
}
function createCollection(s) {
    const e = s + "CollectionProvider"
      , [i,o] = createContextScope$4(e)
      , [a,c] = i(e, {
        collectionRef: {
            current: null
        },
        itemMap: new Map
    })
      , d = tt => {
        const {scope: rt, children: et} = tt
          , it = React.useRef(null)
          , st = React.useRef(new Map).current;
        return jsxRuntimeExports.jsx(a, {
            scope: rt,
            itemMap: st,
            collectionRef: it,
            children: et
        })
    }
    ;
    d.displayName = e;
    const h = s + "CollectionSlot"
      , g = React.forwardRef( (tt, rt) => {
        const {scope: et, children: it} = tt
          , st = c(h, et)
          , nt = useComposedRefs(rt, st.collectionRef);
        return jsxRuntimeExports.jsx(Slot, {
            ref: nt,
            children: it
        })
    }
    );
    g.displayName = h;
    const b = s + "CollectionItemSlot"
      , _ = "data-radix-collection-item"
      , $ = React.forwardRef( (tt, rt) => {
        const {scope: et, children: it, ...st} = tt
          , nt = React.useRef(null)
          , lt = useComposedRefs(rt, nt)
          , dt = c(b, et);
        return React.useEffect( () => (dt.itemMap.set(nt, {
            ref: nt,
            ...st
        }),
        () => void dt.itemMap.delete(nt))),
        jsxRuntimeExports.jsx(Slot, {
            [_]: "",
            ref: lt,
            children: it
        })
    }
    );
    $.displayName = b;
    function _e(tt) {
        const rt = c(s + "CollectionConsumer", tt);
        return React.useCallback( () => {
            const it = rt.collectionRef.current;
            if (!it)
                return [];
            const st = Array.from(it.querySelectorAll(`[${_}]`));
            return Array.from(rt.itemMap.values()).sort( (dt, ot) => st.indexOf(dt.ref.current) - st.indexOf(ot.ref.current))
        }
        , [rt.collectionRef, rt.itemMap])
    }
    return [{
        Provider: d,
        Slot: g,
        ItemSlot: $
    }, _e, o]
}
function createContext2(s, e) {
    const i = reactExports.createContext(e)
      , o = c => {
        const {children: d, ...h} = c
          , g = reactExports.useMemo( () => h, Object.values(h));
        return jsxRuntimeExports.jsx(i.Provider, {
            value: g,
            children: d
        })
    }
    ;
    o.displayName = s + "Provider";
    function a(c) {
        const d = reactExports.useContext(i);
        if (d)
            return d;
        if (e !== void 0)
            return e;
        throw new Error(`\`${c}\` must be used within \`${s}\``)
    }
    return [o, a]
}
function createContextScope$3(s, e=[]) {
    let i = [];
    function o(c, d) {
        const h = reactExports.createContext(d)
          , g = i.length;
        i = [...i, d];
        const b = $ => {
            var st;
            const {scope: _e, children: tt, ...rt} = $
              , et = ((st = _e == null ? void 0 : _e[s]) == null ? void 0 : st[g]) || h
              , it = reactExports.useMemo( () => rt, Object.values(rt));
            return jsxRuntimeExports.jsx(et.Provider, {
                value: it,
                children: tt
            })
        }
        ;
        b.displayName = c + "Provider";
        function _($, _e) {
            var et;
            const tt = ((et = _e == null ? void 0 : _e[s]) == null ? void 0 : et[g]) || h
              , rt = reactExports.useContext(tt);
            if (rt)
                return rt;
            if (d !== void 0)
                return d;
            throw new Error(`\`${$}\` must be used within \`${c}\``)
        }
        return [b, _]
    }
    const a = () => {
        const c = i.map(d => reactExports.createContext(d));
        return function(h) {
            const g = (h == null ? void 0 : h[s]) || c;
            return reactExports.useMemo( () => ({
                [`__scope${s}`]: {
                    ...h,
                    [s]: g
                }
            }), [h, g])
        }
    }
    ;
    return a.scopeName = s,
    [o, composeContextScopes$3(a, ...e)]
}
function composeContextScopes$3(...s) {
    const e = s[0];
    if (s.length === 1)
        return e;
    const i = () => {
        const o = s.map(a => ({
            useScope: a(),
            scopeName: a.scopeName
        }));
        return function(c) {
            const d = o.reduce( (h, {useScope: g, scopeName: b}) => {
                const $ = g(c)[`__scope${b}`];
                return {
                    ...h,
                    ...$
                }
            }
            , {});
            return reactExports.useMemo( () => ({
                [`__scope${e.scopeName}`]: d
            }), [d])
        }
    }
    ;
    return i.scopeName = e.scopeName,
    i
}
var NODES$1 = ["a", "button", "div", "form", "h2", "h3", "img", "input", "label", "li", "nav", "ol", "p", "span", "svg", "ul"]
  , Primitive$1 = NODES$1.reduce( (s, e) => {
    const i = reactExports.forwardRef( (o, a) => {
        const {asChild: c, ...d} = o
          , h = c ? Slot : e;
        return typeof window < "u" && (window[Symbol.for("radix-ui")] = !0),
        jsxRuntimeExports.jsx(h, {
            ...d,
            ref: a
        })
    }
    );
    return i.displayName = `Primitive.${e}`,
    {
        ...s,
        [e]: i
    }
}
, {});
function dispatchDiscreteCustomEvent(s, e) {
    s && reactDomExports.flushSync( () => s.dispatchEvent(e))
}
function useCallbackRef$1(s) {
    const e = reactExports.useRef(s);
    return reactExports.useEffect( () => {
        e.current = s
    }
    ),
    reactExports.useMemo( () => (...i) => {
        var o;
        return (o = e.current) == null ? void 0 : o.call(e, ...i)
    }
    , [])
}
function useEscapeKeydown(s, e=globalThis == null ? void 0 : globalThis.document) {
    const i = useCallbackRef$1(s);
    reactExports.useEffect( () => {
        const o = a => {
            a.key === "Escape" && i(a)
        }
        ;
        return e.addEventListener("keydown", o, {
            capture: !0
        }),
        () => e.removeEventListener("keydown", o, {
            capture: !0
        })
    }
    , [i, e])
}
var DISMISSABLE_LAYER_NAME = "DismissableLayer", CONTEXT_UPDATE = "dismissableLayer.update", POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside", FOCUS_OUTSIDE = "dismissableLayer.focusOutside", originalBodyPointerEvents, DismissableLayerContext = reactExports.createContext({
    layers: new Set,
    layersWithOutsidePointerEventsDisabled: new Set,
    branches: new Set
}), DismissableLayer = reactExports.forwardRef( (s, e) => {
    const {disableOutsidePointerEvents: i=!1, onEscapeKeyDown: o, onPointerDownOutside: a, onFocusOutside: c, onInteractOutside: d, onDismiss: h, ...g} = s
      , b = reactExports.useContext(DismissableLayerContext)
      , [_,$] = reactExports.useState(null)
      , _e = (_ == null ? void 0 : _.ownerDocument) ?? (globalThis == null ? void 0 : globalThis.document)
      , [,tt] = reactExports.useState({})
      , rt = useComposedRefs(e, ht => $(ht))
      , et = Array.from(b.layers)
      , [it] = [...b.layersWithOutsidePointerEventsDisabled].slice(-1)
      , st = et.indexOf(it)
      , nt = _ ? et.indexOf(_) : -1
      , lt = b.layersWithOutsidePointerEventsDisabled.size > 0
      , dt = nt >= st
      , ot = usePointerDownOutside(ht => {
        const pt = ht.target
          , gt = [...b.branches].some(wt => wt.contains(pt));
        !dt || gt || (a == null || a(ht),
        d == null || d(ht),
        ht.defaultPrevented || h == null || h())
    }
    , _e)
      , at = useFocusOutside(ht => {
        const pt = ht.target;
        [...b.branches].some(wt => wt.contains(pt)) || (c == null || c(ht),
        d == null || d(ht),
        ht.defaultPrevented || h == null || h())
    }
    , _e);
    return useEscapeKeydown(ht => {
        nt === b.layers.size - 1 && (o == null || o(ht),
        !ht.defaultPrevented && h && (ht.preventDefault(),
        h()))
    }
    , _e),
    reactExports.useEffect( () => {
        if (_)
            return i && (b.layersWithOutsidePointerEventsDisabled.size === 0 && (originalBodyPointerEvents = _e.body.style.pointerEvents,
            _e.body.style.pointerEvents = "none"),
            b.layersWithOutsidePointerEventsDisabled.add(_)),
            b.layers.add(_),
            dispatchUpdate(),
            () => {
                i && b.layersWithOutsidePointerEventsDisabled.size === 1 && (_e.body.style.pointerEvents = originalBodyPointerEvents)
            }
    }
    , [_, _e, i, b]),
    reactExports.useEffect( () => () => {
        _ && (b.layers.delete(_),
        b.layersWithOutsidePointerEventsDisabled.delete(_),
        dispatchUpdate())
    }
    , [_, b]),
    reactExports.useEffect( () => {
        const ht = () => tt({});
        return document.addEventListener(CONTEXT_UPDATE, ht),
        () => document.removeEventListener(CONTEXT_UPDATE, ht)
    }
    , []),
    jsxRuntimeExports.jsx(Primitive$1.div, {
        ...g,
        ref: rt,
        style: {
            pointerEvents: lt ? dt ? "auto" : "none" : void 0,
            ...s.style
        },
        onFocusCapture: composeEventHandlers(s.onFocusCapture, at.onFocusCapture),
        onBlurCapture: composeEventHandlers(s.onBlurCapture, at.onBlurCapture),
        onPointerDownCapture: composeEventHandlers(s.onPointerDownCapture, ot.onPointerDownCapture)
    })
}
);
DismissableLayer.displayName = DISMISSABLE_LAYER_NAME;
var BRANCH_NAME = "DismissableLayerBranch"
  , DismissableLayerBranch = reactExports.forwardRef( (s, e) => {
    const i = reactExports.useContext(DismissableLayerContext)
      , o = reactExports.useRef(null)
      , a = useComposedRefs(e, o);
    return reactExports.useEffect( () => {
        const c = o.current;
        if (c)
            return i.branches.add(c),
            () => {
                i.branches.delete(c)
            }
    }
    , [i.branches]),
    jsxRuntimeExports.jsx(Primitive$1.div, {
        ...s,
        ref: a
    })
}
);
DismissableLayerBranch.displayName = BRANCH_NAME;
function usePointerDownOutside(s, e=globalThis == null ? void 0 : globalThis.document) {
    const i = useCallbackRef$1(s)
      , o = reactExports.useRef(!1)
      , a = reactExports.useRef( () => {}
    );
    return reactExports.useEffect( () => {
        const c = h => {
            if (h.target && !o.current) {
                let g = function() {
                    handleAndDispatchCustomEvent$1(POINTER_DOWN_OUTSIDE, i, b, {
                        discrete: !0
                    })
                };
                const b = {
                    originalEvent: h
                };
                h.pointerType === "touch" ? (e.removeEventListener("click", a.current),
                a.current = g,
                e.addEventListener("click", a.current, {
                    once: !0
                })) : g()
            } else
                e.removeEventListener("click", a.current);
            o.current = !1
        }
          , d = window.setTimeout( () => {
            e.addEventListener("pointerdown", c)
        }
        , 0);
        return () => {
            window.clearTimeout(d),
            e.removeEventListener("pointerdown", c),
            e.removeEventListener("click", a.current)
        }
    }
    , [e, i]),
    {
        onPointerDownCapture: () => o.current = !0
    }
}
function useFocusOutside(s, e=globalThis == null ? void 0 : globalThis.document) {
    const i = useCallbackRef$1(s)
      , o = reactExports.useRef(!1);
    return reactExports.useEffect( () => {
        const a = c => {
            c.target && !o.current && handleAndDispatchCustomEvent$1(FOCUS_OUTSIDE, i, {
                originalEvent: c
            }, {
                discrete: !1
            })
        }
        ;
        return e.addEventListener("focusin", a),
        () => e.removeEventListener("focusin", a)
    }
    , [e, i]),
    {
        onFocusCapture: () => o.current = !0,
        onBlurCapture: () => o.current = !1
    }
}
function dispatchUpdate() {
    const s = new CustomEvent(CONTEXT_UPDATE);
    document.dispatchEvent(s)
}
function handleAndDispatchCustomEvent$1(s, e, i, {discrete: o}) {
    const a = i.originalEvent.target
      , c = new CustomEvent(s,{
        bubbles: !1,
        cancelable: !0,
        detail: i
    });
    e && a.addEventListener(s, e, {
        once: !0
    }),
    o ? dispatchDiscreteCustomEvent(a, c) : a.dispatchEvent(c)
}
var Root$b = DismissableLayer
  , Branch = DismissableLayerBranch
  , useLayoutEffect2 = globalThis != null && globalThis.document ? reactExports.useLayoutEffect : () => {}
  , PORTAL_NAME$5 = "Portal"
  , Portal$3 = reactExports.forwardRef( (s, e) => {
    var h;
    const {container: i, ...o} = s
      , [a,c] = reactExports.useState(!1);
    useLayoutEffect2( () => c(!0), []);
    const d = i || a && ((h = globalThis == null ? void 0 : globalThis.document) == null ? void 0 : h.body);
    return d ? Gt.createPortal(jsxRuntimeExports.jsx(Primitive$1.div, {
        ...o,
        ref: e
    }), d) : null
}
);
Portal$3.displayName = PORTAL_NAME$5;
function useStateMachine$1(s, e) {
    return reactExports.useReducer( (i, o) => e[i][o] ?? i, s)
}
var Presence = s => {
    const {present: e, children: i} = s
      , o = usePresence$1(e)
      , a = typeof i == "function" ? i({
        present: o.isPresent
    }) : reactExports.Children.only(i)
      , c = useComposedRefs(o.ref, getElementRef$1(a));
    return typeof i == "function" || o.isPresent ? reactExports.cloneElement(a, {
        ref: c
    }) : null
}
;
Presence.displayName = "Presence";
function usePresence$1(s) {
    const [e,i] = reactExports.useState()
      , o = reactExports.useRef({})
      , a = reactExports.useRef(s)
      , c = reactExports.useRef("none")
      , d = s ? "mounted" : "unmounted"
      , [h,g] = useStateMachine$1(d, {
        mounted: {
            UNMOUNT: "unmounted",
            ANIMATION_OUT: "unmountSuspended"
        },
        unmountSuspended: {
            MOUNT: "mounted",
            ANIMATION_END: "unmounted"
        },
        unmounted: {
            MOUNT: "mounted"
        }
    });
    return reactExports.useEffect( () => {
        const b = getAnimationName(o.current);
        c.current = h === "mounted" ? b : "none"
    }
    , [h]),
    useLayoutEffect2( () => {
        const b = o.current
          , _ = a.current;
        if (_ !== s) {
            const _e = c.current
              , tt = getAnimationName(b);
            s ? g("MOUNT") : tt === "none" || (b == null ? void 0 : b.display) === "none" ? g("UNMOUNT") : g(_ && _e !== tt ? "ANIMATION_OUT" : "UNMOUNT"),
            a.current = s
        }
    }
    , [s, g]),
    useLayoutEffect2( () => {
        if (e) {
            let b;
            const _ = e.ownerDocument.defaultView ?? window
              , $ = tt => {
                const et = getAnimationName(o.current).includes(tt.animationName);
                if (tt.target === e && et && (g("ANIMATION_END"),
                !a.current)) {
                    const it = e.style.animationFillMode;
                    e.style.animationFillMode = "forwards",
                    b = _.setTimeout( () => {
                        e.style.animationFillMode === "forwards" && (e.style.animationFillMode = it)
                    }
                    )
                }
            }
              , _e = tt => {
                tt.target === e && (c.current = getAnimationName(o.current))
            }
            ;
            return e.addEventListener("animationstart", _e),
            e.addEventListener("animationcancel", $),
            e.addEventListener("animationend", $),
            () => {
                _.clearTimeout(b),
                e.removeEventListener("animationstart", _e),
                e.removeEventListener("animationcancel", $),
                e.removeEventListener("animationend", $)
            }
        } else
            g("ANIMATION_END")
    }
    , [e, g]),
    {
        isPresent: ["mounted", "unmountSuspended"].includes(h),
        ref: reactExports.useCallback(b => {
            b && (o.current = getComputedStyle(b)),
            i(b)
        }
        , [])
    }
}
function getAnimationName(s) {
    return (s == null ? void 0 : s.animationName) || "none"
}
function getElementRef$1(s) {
    var o, a;
    let e = (o = Object.getOwnPropertyDescriptor(s.props, "ref")) == null ? void 0 : o.get
      , i = e && "isReactWarning"in e && e.isReactWarning;
    return i ? s.ref : (e = (a = Object.getOwnPropertyDescriptor(s, "ref")) == null ? void 0 : a.get,
    i = e && "isReactWarning"in e && e.isReactWarning,
    i ? s.props.ref : s.props.ref || s.ref)
}
function useControllableState({prop: s, defaultProp: e, onChange: i= () => {}
}) {
    const [o,a] = useUncontrolledState({
        defaultProp: e,
        onChange: i
    })
      , c = s !== void 0
      , d = c ? s : o
      , h = useCallbackRef$1(i)
      , g = reactExports.useCallback(b => {
        if (c) {
            const $ = typeof b == "function" ? b(s) : b;
            $ !== s && h($)
        } else
            a(b)
    }
    , [c, s, a, h]);
    return [d, g]
}
function useUncontrolledState({defaultProp: s, onChange: e}) {
    const i = reactExports.useState(s)
      , [o] = i
      , a = reactExports.useRef(o)
      , c = useCallbackRef$1(e);
    return reactExports.useEffect( () => {
        a.current !== o && (c(o),
        a.current = o)
    }
    , [o, a, c]),
    i
}
var NAME$3 = "VisuallyHidden"
  , VisuallyHidden = reactExports.forwardRef( (s, e) => jsxRuntimeExports.jsx(Primitive$1.span, {
    ...s,
    ref: e,
    style: {
        position: "absolute",
        border: 0,
        width: 1,
        height: 1,
        padding: 0,
        margin: -1,
        overflow: "hidden",
        clip: "rect(0, 0, 0, 0)",
        whiteSpace: "nowrap",
        wordWrap: "normal",
        ...s.style
    }
}));
VisuallyHidden.displayName = NAME$3;
var Root$a = VisuallyHidden
  , PROVIDER_NAME$1 = "ToastProvider"
  , [Collection$4,useCollection$4,createCollectionScope$4] = createCollection("Toast")
  , [createToastContext,createToastScope] = createContextScope$3("Toast", [createCollectionScope$4])
  , [ToastProviderProvider,useToastProviderContext] = createToastContext(PROVIDER_NAME$1)
  , ToastProvider$1 = s => {
    const {__scopeToast: e, label: i="Notification", duration: o=5e3, swipeDirection: a="right", swipeThreshold: c=50, children: d} = s
      , [h,g] = reactExports.useState(null)
      , [b,_] = reactExports.useState(0)
      , $ = reactExports.useRef(!1)
      , _e = reactExports.useRef(!1);
    return i.trim() || console.error(`Invalid prop \`label\` supplied to \`${PROVIDER_NAME$1}\`. Expected non-empty \`string\`.`),
    jsxRuntimeExports.jsx(Collection$4.Provider, {
        scope: e,
        children: jsxRuntimeExports.jsx(ToastProviderProvider, {
            scope: e,
            label: i,
            duration: o,
            swipeDirection: a,
            swipeThreshold: c,
            toastCount: b,
            viewport: h,
            onViewportChange: g,
            onToastAdd: reactExports.useCallback( () => _(tt => tt + 1), []),
            onToastRemove: reactExports.useCallback( () => _(tt => tt - 1), []),
            isFocusedToastEscapeKeyDownRef: $,
            isClosePausedRef: _e,
            children: d
        })
    })
}
;
ToastProvider$1.displayName = PROVIDER_NAME$1;
var VIEWPORT_NAME$2 = "ToastViewport"
  , VIEWPORT_DEFAULT_HOTKEY = ["F8"]
  , VIEWPORT_PAUSE = "toast.viewportPause"
  , VIEWPORT_RESUME = "toast.viewportResume"
  , ToastViewport$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeToast: i, hotkey: o=VIEWPORT_DEFAULT_HOTKEY, label: a="Notifications ({hotkey})", ...c} = s
      , d = useToastProviderContext(VIEWPORT_NAME$2, i)
      , h = useCollection$4(i)
      , g = reactExports.useRef(null)
      , b = reactExports.useRef(null)
      , _ = reactExports.useRef(null)
      , $ = reactExports.useRef(null)
      , _e = useComposedRefs(e, $, d.onViewportChange)
      , tt = o.join("+").replace(/Key/g, "").replace(/Digit/g, "")
      , rt = d.toastCount > 0;
    reactExports.useEffect( () => {
        const it = st => {
            var lt;
            o.length !== 0 && o.every(dt => st[dt] || st.code === dt) && ((lt = $.current) == null || lt.focus())
        }
        ;
        return document.addEventListener("keydown", it),
        () => document.removeEventListener("keydown", it)
    }
    , [o]),
    reactExports.useEffect( () => {
        const it = g.current
          , st = $.current;
        if (rt && it && st) {
            const nt = () => {
                if (!d.isClosePausedRef.current) {
                    const at = new CustomEvent(VIEWPORT_PAUSE);
                    st.dispatchEvent(at),
                    d.isClosePausedRef.current = !0
                }
            }
              , lt = () => {
                if (d.isClosePausedRef.current) {
                    const at = new CustomEvent(VIEWPORT_RESUME);
                    st.dispatchEvent(at),
                    d.isClosePausedRef.current = !1
                }
            }
              , dt = at => {
                !it.contains(at.relatedTarget) && lt()
            }
              , ot = () => {
                it.contains(document.activeElement) || lt()
            }
            ;
            return it.addEventListener("focusin", nt),
            it.addEventListener("focusout", dt),
            it.addEventListener("pointermove", nt),
            it.addEventListener("pointerleave", ot),
            window.addEventListener("blur", nt),
            window.addEventListener("focus", lt),
            () => {
                it.removeEventListener("focusin", nt),
                it.removeEventListener("focusout", dt),
                it.removeEventListener("pointermove", nt),
                it.removeEventListener("pointerleave", ot),
                window.removeEventListener("blur", nt),
                window.removeEventListener("focus", lt)
            }
        }
    }
    , [rt, d.isClosePausedRef]);
    const et = reactExports.useCallback( ({tabbingDirection: it}) => {
        const nt = h().map(lt => {
            const dt = lt.ref.current
              , ot = [dt, ...getTabbableCandidates$1(dt)];
            return it === "forwards" ? ot : ot.reverse()
        }
        );
        return (it === "forwards" ? nt.reverse() : nt).flat()
    }
    , [h]);
    return reactExports.useEffect( () => {
        const it = $.current;
        if (it) {
            const st = nt => {
                var ot, at, ht;
                const lt = nt.altKey || nt.ctrlKey || nt.metaKey;
                if (nt.key === "Tab" && !lt) {
                    const pt = document.activeElement
                      , gt = nt.shiftKey;
                    if (nt.target === it && gt) {
                        (ot = b.current) == null || ot.focus();
                        return
                    }
                    const Rt = et({
                        tabbingDirection: gt ? "backwards" : "forwards"
                    })
                      , Mt = Rt.findIndex(ss => ss === pt);
                    focusFirst$3(Rt.slice(Mt + 1)) ? nt.preventDefault() : gt ? (at = b.current) == null || at.focus() : (ht = _.current) == null || ht.focus()
                }
            }
            ;
            return it.addEventListener("keydown", st),
            () => it.removeEventListener("keydown", st)
        }
    }
    , [h, et]),
    jsxRuntimeExports.jsxs(Branch, {
        ref: g,
        role: "region",
        "aria-label": a.replace("{hotkey}", tt),
        tabIndex: -1,
        style: {
            pointerEvents: rt ? void 0 : "none"
        },
        children: [rt && jsxRuntimeExports.jsx(FocusProxy, {
            ref: b,
            onFocusFromOutsideViewport: () => {
                const it = et({
                    tabbingDirection: "forwards"
                });
                focusFirst$3(it)
            }
        }), jsxRuntimeExports.jsx(Collection$4.Slot, {
            scope: i,
            children: jsxRuntimeExports.jsx(Primitive$1.ol, {
                tabIndex: -1,
                ...c,
                ref: _e
            })
        }), rt && jsxRuntimeExports.jsx(FocusProxy, {
            ref: _,
            onFocusFromOutsideViewport: () => {
                const it = et({
                    tabbingDirection: "backwards"
                });
                focusFirst$3(it)
            }
        })]
    })
}
);
ToastViewport$1.displayName = VIEWPORT_NAME$2;
var FOCUS_PROXY_NAME = "ToastFocusProxy"
  , FocusProxy = reactExports.forwardRef( (s, e) => {
    const {__scopeToast: i, onFocusFromOutsideViewport: o, ...a} = s
      , c = useToastProviderContext(FOCUS_PROXY_NAME, i);
    return jsxRuntimeExports.jsx(VisuallyHidden, {
        "aria-hidden": !0,
        tabIndex: 0,
        ...a,
        ref: e,
        style: {
            position: "fixed"
        },
        onFocus: d => {
            var b;
            const h = d.relatedTarget;
            !((b = c.viewport) != null && b.contains(h)) && o()
        }
    })
}
);
FocusProxy.displayName = FOCUS_PROXY_NAME;
var TOAST_NAME = "Toast"
  , TOAST_SWIPE_START = "toast.swipeStart"
  , TOAST_SWIPE_MOVE = "toast.swipeMove"
  , TOAST_SWIPE_CANCEL = "toast.swipeCancel"
  , TOAST_SWIPE_END = "toast.swipeEnd"
  , Toast$1 = reactExports.forwardRef( (s, e) => {
    const {forceMount: i, open: o, defaultOpen: a, onOpenChange: c, ...d} = s
      , [h=!0,g] = useControllableState({
        prop: o,
        defaultProp: a,
        onChange: c
    });
    return jsxRuntimeExports.jsx(Presence, {
        present: i || h,
        children: jsxRuntimeExports.jsx(ToastImpl, {
            open: h,
            ...d,
            ref: e,
            onClose: () => g(!1),
            onPause: useCallbackRef$1(s.onPause),
            onResume: useCallbackRef$1(s.onResume),
            onSwipeStart: composeEventHandlers(s.onSwipeStart, b => {
                b.currentTarget.setAttribute("data-swipe", "start")
            }
            ),
            onSwipeMove: composeEventHandlers(s.onSwipeMove, b => {
                const {x: _, y: $} = b.detail.delta;
                b.currentTarget.setAttribute("data-swipe", "move"),
                b.currentTarget.style.setProperty("--radix-toast-swipe-move-x", `${_}px`),
                b.currentTarget.style.setProperty("--radix-toast-swipe-move-y", `${$}px`)
            }
            ),
            onSwipeCancel: composeEventHandlers(s.onSwipeCancel, b => {
                b.currentTarget.setAttribute("data-swipe", "cancel"),
                b.currentTarget.style.removeProperty("--radix-toast-swipe-move-x"),
                b.currentTarget.style.removeProperty("--radix-toast-swipe-move-y"),
                b.currentTarget.style.removeProperty("--radix-toast-swipe-end-x"),
                b.currentTarget.style.removeProperty("--radix-toast-swipe-end-y")
            }
            ),
            onSwipeEnd: composeEventHandlers(s.onSwipeEnd, b => {
                const {x: _, y: $} = b.detail.delta;
                b.currentTarget.setAttribute("data-swipe", "end"),
                b.currentTarget.style.removeProperty("--radix-toast-swipe-move-x"),
                b.currentTarget.style.removeProperty("--radix-toast-swipe-move-y"),
                b.currentTarget.style.setProperty("--radix-toast-swipe-end-x", `${_}px`),
                b.currentTarget.style.setProperty("--radix-toast-swipe-end-y", `${$}px`),
                g(!1)
            }
            )
        })
    })
}
);
Toast$1.displayName = TOAST_NAME;
var [ToastInteractiveProvider,useToastInteractiveContext] = createToastContext(TOAST_NAME, {
    onClose() {}
})
  , ToastImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeToast: i, type: o="foreground", duration: a, open: c, onClose: d, onEscapeKeyDown: h, onPause: g, onResume: b, onSwipeStart: _, onSwipeMove: $, onSwipeCancel: _e, onSwipeEnd: tt, ...rt} = s
      , et = useToastProviderContext(TOAST_NAME, i)
      , [it,st] = reactExports.useState(null)
      , nt = useComposedRefs(e, ss => st(ss))
      , lt = reactExports.useRef(null)
      , dt = reactExports.useRef(null)
      , ot = a || et.duration
      , at = reactExports.useRef(0)
      , ht = reactExports.useRef(ot)
      , pt = reactExports.useRef(0)
      , {onToastAdd: gt, onToastRemove: wt} = et
      , yt = useCallbackRef$1( () => {
        var zt;
        (it == null ? void 0 : it.contains(document.activeElement)) && ((zt = et.viewport) == null || zt.focus()),
        d()
    }
    )
      , Rt = reactExports.useCallback(ss => {
        !ss || ss === 1 / 0 || (window.clearTimeout(pt.current),
        at.current = new Date().getTime(),
        pt.current = window.setTimeout(yt, ss))
    }
    , [yt]);
    reactExports.useEffect( () => {
        const ss = et.viewport;
        if (ss) {
            const zt = () => {
                Rt(ht.current),
                b == null || b()
            }
              , At = () => {
                const kt = new Date().getTime() - at.current;
                ht.current = ht.current - kt,
                window.clearTimeout(pt.current),
                g == null || g()
            }
            ;
            return ss.addEventListener(VIEWPORT_PAUSE, At),
            ss.addEventListener(VIEWPORT_RESUME, zt),
            () => {
                ss.removeEventListener(VIEWPORT_PAUSE, At),
                ss.removeEventListener(VIEWPORT_RESUME, zt)
            }
        }
    }
    , [et.viewport, ot, g, b, Rt]),
    reactExports.useEffect( () => {
        c && !et.isClosePausedRef.current && Rt(ot)
    }
    , [c, ot, et.isClosePausedRef, Rt]),
    reactExports.useEffect( () => (gt(),
    () => wt()), [gt, wt]);
    const Mt = reactExports.useMemo( () => it ? getAnnounceTextContent(it) : null, [it]);
    return et.viewport ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [Mt && jsxRuntimeExports.jsx(ToastAnnounce, {
            __scopeToast: i,
            role: "status",
            "aria-live": o === "foreground" ? "assertive" : "polite",
            "aria-atomic": !0,
            children: Mt
        }), jsxRuntimeExports.jsx(ToastInteractiveProvider, {
            scope: i,
            onClose: yt,
            children: reactDomExports.createPortal(jsxRuntimeExports.jsx(Collection$4.ItemSlot, {
                scope: i,
                children: jsxRuntimeExports.jsx(Root$b, {
                    asChild: !0,
                    onEscapeKeyDown: composeEventHandlers(h, () => {
                        et.isFocusedToastEscapeKeyDownRef.current || yt(),
                        et.isFocusedToastEscapeKeyDownRef.current = !1
                    }
                    ),
                    children: jsxRuntimeExports.jsx(Primitive$1.li, {
                        role: "status",
                        "aria-live": "off",
                        "aria-atomic": !0,
                        tabIndex: 0,
                        "data-state": c ? "open" : "closed",
                        "data-swipe-direction": et.swipeDirection,
                        ...rt,
                        ref: nt,
                        style: {
                            userSelect: "none",
                            touchAction: "none",
                            ...s.style
                        },
                        onKeyDown: composeEventHandlers(s.onKeyDown, ss => {
                            ss.key === "Escape" && (h == null || h(ss.nativeEvent),
                            ss.nativeEvent.defaultPrevented || (et.isFocusedToastEscapeKeyDownRef.current = !0,
                            yt()))
                        }
                        ),
                        onPointerDown: composeEventHandlers(s.onPointerDown, ss => {
                            ss.button === 0 && (lt.current = {
                                x: ss.clientX,
                                y: ss.clientY
                            })
                        }
                        ),
                        onPointerMove: composeEventHandlers(s.onPointerMove, ss => {
                            if (!lt.current)
                                return;
                            const zt = ss.clientX - lt.current.x
                              , At = ss.clientY - lt.current.y
                              , kt = !!dt.current
                              , vt = ["left", "right"].includes(et.swipeDirection)
                              , bt = ["left", "up"].includes(et.swipeDirection) ? Math.min : Math.max
                              , Tt = vt ? bt(0, zt) : 0
                              , Yt = vt ? 0 : bt(0, At)
                              , Nt = ss.pointerType === "touch" ? 10 : 2
                              , jt = {
                                x: Tt,
                                y: Yt
                            }
                              , xt = {
                                originalEvent: ss,
                                delta: jt
                            };
                            kt ? (dt.current = jt,
                            handleAndDispatchCustomEvent(TOAST_SWIPE_MOVE, $, xt, {
                                discrete: !1
                            })) : isDeltaInDirection(jt, et.swipeDirection, Nt) ? (dt.current = jt,
                            handleAndDispatchCustomEvent(TOAST_SWIPE_START, _, xt, {
                                discrete: !1
                            }),
                            ss.target.setPointerCapture(ss.pointerId)) : (Math.abs(zt) > Nt || Math.abs(At) > Nt) && (lt.current = null)
                        }
                        ),
                        onPointerUp: composeEventHandlers(s.onPointerUp, ss => {
                            const zt = dt.current
                              , At = ss.target;
                            if (At.hasPointerCapture(ss.pointerId) && At.releasePointerCapture(ss.pointerId),
                            dt.current = null,
                            lt.current = null,
                            zt) {
                                const kt = ss.currentTarget
                                  , vt = {
                                    originalEvent: ss,
                                    delta: zt
                                };
                                isDeltaInDirection(zt, et.swipeDirection, et.swipeThreshold) ? handleAndDispatchCustomEvent(TOAST_SWIPE_END, tt, vt, {
                                    discrete: !0
                                }) : handleAndDispatchCustomEvent(TOAST_SWIPE_CANCEL, _e, vt, {
                                    discrete: !0
                                }),
                                kt.addEventListener("click", bt => bt.preventDefault(), {
                                    once: !0
                                })
                            }
                        }
                        )
                    })
                })
            }), et.viewport)
        })]
    }) : null
}
)
  , ToastAnnounce = s => {
    const {__scopeToast: e, children: i, ...o} = s
      , a = useToastProviderContext(TOAST_NAME, e)
      , [c,d] = reactExports.useState(!1)
      , [h,g] = reactExports.useState(!1);
    return useNextFrame( () => d(!0)),
    reactExports.useEffect( () => {
        const b = window.setTimeout( () => g(!0), 1e3);
        return () => window.clearTimeout(b)
    }
    , []),
    h ? null : jsxRuntimeExports.jsx(Portal$3, {
        asChild: !0,
        children: jsxRuntimeExports.jsx(VisuallyHidden, {
            ...o,
            children: c && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [a.label, " ", i]
            })
        })
    })
}
  , TITLE_NAME$1 = "ToastTitle"
  , ToastTitle$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeToast: i, ...o} = s;
    return jsxRuntimeExports.jsx(Primitive$1.div, {
        ...o,
        ref: e
    })
}
);
ToastTitle$1.displayName = TITLE_NAME$1;
var DESCRIPTION_NAME$1 = "ToastDescription"
  , ToastDescription$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeToast: i, ...o} = s;
    return jsxRuntimeExports.jsx(Primitive$1.div, {
        ...o,
        ref: e
    })
}
);
ToastDescription$1.displayName = DESCRIPTION_NAME$1;
var ACTION_NAME = "ToastAction"
  , ToastAction$1 = reactExports.forwardRef( (s, e) => {
    const {altText: i, ...o} = s;
    return i.trim() ? jsxRuntimeExports.jsx(ToastAnnounceExclude, {
        altText: i,
        asChild: !0,
        children: jsxRuntimeExports.jsx(ToastClose$1, {
            ...o,
            ref: e
        })
    }) : (console.error(`Invalid prop \`altText\` supplied to \`${ACTION_NAME}\`. Expected non-empty \`string\`.`),
    null)
}
);
ToastAction$1.displayName = ACTION_NAME;
var CLOSE_NAME$1 = "ToastClose"
  , ToastClose$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeToast: i, ...o} = s
      , a = useToastInteractiveContext(CLOSE_NAME$1, i);
    return jsxRuntimeExports.jsx(ToastAnnounceExclude, {
        asChild: !0,
        children: jsxRuntimeExports.jsx(Primitive$1.button, {
            type: "button",
            ...o,
            ref: e,
            onClick: composeEventHandlers(s.onClick, a.onClose)
        })
    })
}
);
ToastClose$1.displayName = CLOSE_NAME$1;
var ToastAnnounceExclude = reactExports.forwardRef( (s, e) => {
    const {__scopeToast: i, altText: o, ...a} = s;
    return jsxRuntimeExports.jsx(Primitive$1.div, {
        "data-radix-toast-announce-exclude": "",
        "data-radix-toast-announce-alt": o || void 0,
        ...a,
        ref: e
    })
}
);
function getAnnounceTextContent(s) {
    const e = [];
    return Array.from(s.childNodes).forEach(o => {
        if (o.nodeType === o.TEXT_NODE && o.textContent && e.push(o.textContent),
        isHTMLElement$2(o)) {
            const a = o.ariaHidden || o.hidden || o.style.display === "none"
              , c = o.dataset.radixToastAnnounceExclude === "";
            if (!a)
                if (c) {
                    const d = o.dataset.radixToastAnnounceAlt;
                    d && e.push(d)
                } else
                    e.push(...getAnnounceTextContent(o))
        }
    }
    ),
    e
}
function handleAndDispatchCustomEvent(s, e, i, {discrete: o}) {
    const a = i.originalEvent.currentTarget
      , c = new CustomEvent(s,{
        bubbles: !0,
        cancelable: !0,
        detail: i
    });
    e && a.addEventListener(s, e, {
        once: !0
    }),
    o ? dispatchDiscreteCustomEvent(a, c) : a.dispatchEvent(c)
}
var isDeltaInDirection = (s, e, i=0) => {
    const o = Math.abs(s.x)
      , a = Math.abs(s.y)
      , c = o > a;
    return e === "left" || e === "right" ? c && o > i : !c && a > i
}
;
function useNextFrame(s= () => {}
) {
    const e = useCallbackRef$1(s);
    useLayoutEffect2( () => {
        let i = 0
          , o = 0;
        return i = window.requestAnimationFrame( () => o = window.requestAnimationFrame(e)),
        () => {
            window.cancelAnimationFrame(i),
            window.cancelAnimationFrame(o)
        }
    }
    , [e])
}
function isHTMLElement$2(s) {
    return s.nodeType === s.ELEMENT_NODE
}
function getTabbableCandidates$1(s) {
    const e = []
      , i = document.createTreeWalker(s, NodeFilter.SHOW_ELEMENT, {
        acceptNode: o => {
            const a = o.tagName === "INPUT" && o.type === "hidden";
            return o.disabled || o.hidden || a ? NodeFilter.FILTER_SKIP : o.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP
        }
    });
    for (; i.nextNode(); )
        e.push(i.currentNode);
    return e
}
function focusFirst$3(s) {
    const e = document.activeElement;
    return s.some(i => i === e ? !0 : (i.focus(),
    document.activeElement !== e))
}
var Provider$1 = ToastProvider$1
  , Viewport$2 = ToastViewport$1
  , Root2$4 = Toast$1
  , Title$1 = ToastTitle$1
  , Description$1 = ToastDescription$1
  , Action$1 = ToastAction$1
  , Close$1 = ToastClose$1;
function r(s) {
    var e, i, o = "";
    if (typeof s == "string" || typeof s == "number")
        o += s;
    else if (typeof s == "object")
        if (Array.isArray(s)) {
            var a = s.length;
            for (e = 0; e < a; e++)
                s[e] && (i = r(s[e])) && (o && (o += " "),
                o += i)
        } else
            for (i in s)
                s[i] && (o && (o += " "),
                o += i);
    return o
}
function clsx() {
    for (var s, e, i = 0, o = "", a = arguments.length; i < a; i++)
        (s = arguments[i]) && (e = r(s)) && (o && (o += " "),
        o += e);
    return o
}
const falsyToString = s => typeof s == "boolean" ? `${s}` : s === 0 ? "0" : s
  , cx = clsx
  , cva = (s, e) => i => {
    var o;
    if ((e == null ? void 0 : e.variants) == null)
        return cx(s, i == null ? void 0 : i.class, i == null ? void 0 : i.className);
    const {variants: a, defaultVariants: c} = e
      , d = Object.keys(a).map(b => {
        const _ = i == null ? void 0 : i[b]
          , $ = c == null ? void 0 : c[b];
        if (_ === null)
            return null;
        const _e = falsyToString(_) || falsyToString($);
        return a[b][_e]
    }
    )
      , h = i && Object.entries(i).reduce( (b, _) => {
        let[$,_e] = _;
        return _e === void 0 || (b[$] = _e),
        b
    }
    , {})
      , g = e == null || (o = e.compoundVariants) === null || o === void 0 ? void 0 : o.reduce( (b, _) => {
        let {class: $, className: _e, ...tt} = _;
        return Object.entries(tt).every(rt => {
            let[et,it] = rt;
            return Array.isArray(it) ? it.includes({
                ...c,
                ...h
            }[et]) : {
                ...c,
                ...h
            }[et] === it
        }
        ) ? [...b, $, _e] : b
    }
    , []);
    return cx(s, d, g, i == null ? void 0 : i.class, i == null ? void 0 : i.className)
}
;
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const toKebabCase = s => s.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase()
  , mergeClasses = (...s) => s.filter( (e, i, o) => !!e && e.trim() !== "" && o.indexOf(e) === i).join(" ").trim();
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
var defaultAttributes = {
    xmlns: "http://www.w3.org/2000/svg",
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 2,
    strokeLinecap: "round",
    strokeLinejoin: "round"
};
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Icon$1 = reactExports.forwardRef( ({color: s="currentColor", size: e=24, strokeWidth: i=2, absoluteStrokeWidth: o, className: a="", children: c, iconNode: d, ...h}, g) => reactExports.createElement("svg", {
    ref: g,
    ...defaultAttributes,
    width: e,
    height: e,
    stroke: s,
    strokeWidth: o ? Number(i) * 24 / Number(e) : i,
    className: mergeClasses("lucide", a),
    ...h
}, [...d.map( ([b,_]) => reactExports.createElement(b, _)), ...Array.isArray(c) ? c : [c]]));
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const createLucideIcon = (s, e) => {
    const i = reactExports.forwardRef( ({className: o, ...a}, c) => reactExports.createElement(Icon$1, {
        ref: c,
        iconNode: e,
        className: mergeClasses(`lucide-${toKebabCase(s)}`, o),
        ...a
    }));
    return i.displayName = `${s}`,
    i
}
;
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ArrowLeft = createLucideIcon("ArrowLeft", [["path", {
    d: "m12 19-7-7 7-7",
    key: "1l729n"
}], ["path", {
    d: "M19 12H5",
    key: "x3x0zl"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ArrowRight = createLucideIcon("ArrowRight", [["path", {
    d: "M5 12h14",
    key: "1ays0h"
}], ["path", {
    d: "m12 5 7 7-7 7",
    key: "xquz4c"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ArrowUpRight = createLucideIcon("ArrowUpRight", [["path", {
    d: "M7 7h10v10",
    key: "1tivn9"
}], ["path", {
    d: "M7 17 17 7",
    key: "1vkiza"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Award = createLucideIcon("Award", [["path", {
    d: "m15.477 12.89 1.515 8.526a.5.5 0 0 1-.81.47l-3.58-2.687a1 1 0 0 0-1.197 0l-3.586 2.686a.5.5 0 0 1-.81-.469l1.514-8.526",
    key: "1yiouv"
}], ["circle", {
    cx: "12",
    cy: "8",
    r: "6",
    key: "1vp47v"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Brain = createLucideIcon("Brain", [["path", {
    d: "M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z",
    key: "l5xja"
}], ["path", {
    d: "M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z",
    key: "ep3f8r"
}], ["path", {
    d: "M15 13a4.5 4.5 0 0 1-3-4 4.5 4.5 0 0 1-3 4",
    key: "1p4c4q"
}], ["path", {
    d: "M17.599 6.5a3 3 0 0 0 .399-1.375",
    key: "tmeiqw"
}], ["path", {
    d: "M6.003 5.125A3 3 0 0 0 6.401 6.5",
    key: "105sqy"
}], ["path", {
    d: "M3.477 10.896a4 4 0 0 1 .585-.396",
    key: "ql3yin"
}], ["path", {
    d: "M19.938 10.5a4 4 0 0 1 .585.396",
    key: "1qfode"
}], ["path", {
    d: "M6 18a4 4 0 0 1-1.967-.516",
    key: "2e4loj"
}], ["path", {
    d: "M19.967 17.484A4 4 0 0 1 18 18",
    key: "159ez6"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Briefcase = createLucideIcon("Briefcase", [["path", {
    d: "M16 20V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16",
    key: "jecpp"
}], ["rect", {
    width: "20",
    height: "14",
    x: "2",
    y: "6",
    rx: "2",
    key: "i6l2r4"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Building2 = createLucideIcon("Building2", [["path", {
    d: "M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z",
    key: "1b4qmf"
}], ["path", {
    d: "M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2",
    key: "i71pzd"
}], ["path", {
    d: "M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2",
    key: "10jefs"
}], ["path", {
    d: "M10 6h4",
    key: "1itunk"
}], ["path", {
    d: "M10 10h4",
    key: "tcdvrf"
}], ["path", {
    d: "M10 14h4",
    key: "kelpxr"
}], ["path", {
    d: "M10 18h4",
    key: "1ulq68"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Building = createLucideIcon("Building", [["rect", {
    width: "16",
    height: "20",
    x: "4",
    y: "2",
    rx: "2",
    ry: "2",
    key: "76otgf"
}], ["path", {
    d: "M9 22v-4h6v4",
    key: "r93iot"
}], ["path", {
    d: "M8 6h.01",
    key: "1dz90k"
}], ["path", {
    d: "M16 6h.01",
    key: "1x0f13"
}], ["path", {
    d: "M12 6h.01",
    key: "1vi96p"
}], ["path", {
    d: "M12 10h.01",
    key: "1nrarc"
}], ["path", {
    d: "M12 14h.01",
    key: "1etili"
}], ["path", {
    d: "M16 10h.01",
    key: "1m94wz"
}], ["path", {
    d: "M16 14h.01",
    key: "1gbofw"
}], ["path", {
    d: "M8 10h.01",
    key: "19clt8"
}], ["path", {
    d: "M8 14h.01",
    key: "6423bh"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Calendar = createLucideIcon("Calendar", [["path", {
    d: "M8 2v4",
    key: "1cmpym"
}], ["path", {
    d: "M16 2v4",
    key: "4m81vk"
}], ["rect", {
    width: "18",
    height: "18",
    x: "3",
    y: "4",
    rx: "2",
    key: "1hopcy"
}], ["path", {
    d: "M3 10h18",
    key: "8toen8"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Camera = createLucideIcon("Camera", [["path", {
    d: "M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z",
    key: "1tc9qg"
}], ["circle", {
    cx: "12",
    cy: "13",
    r: "3",
    key: "1vg3eu"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const CheckCheck = createLucideIcon("CheckCheck", [["path", {
    d: "M18 6 7 17l-5-5",
    key: "116fxf"
}], ["path", {
    d: "m22 10-7.5 7.5L13 16",
    key: "ke71qq"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Check = createLucideIcon("Check", [["path", {
    d: "M20 6 9 17l-5-5",
    key: "1gmf2c"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ChevronDown = createLucideIcon("ChevronDown", [["path", {
    d: "m6 9 6 6 6-6",
    key: "qrunsl"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ChevronLeft = createLucideIcon("ChevronLeft", [["path", {
    d: "m15 18-6-6 6-6",
    key: "1wnfg3"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ChevronRight = createLucideIcon("ChevronRight", [["path", {
    d: "m9 18 6-6-6-6",
    key: "mthhwq"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ChevronUp = createLucideIcon("ChevronUp", [["path", {
    d: "m18 15-6-6-6 6",
    key: "153udz"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const CircleAlert = createLucideIcon("CircleAlert", [["circle", {
    cx: "12",
    cy: "12",
    r: "10",
    key: "1mglay"
}], ["line", {
    x1: "12",
    x2: "12",
    y1: "8",
    y2: "12",
    key: "1pkeuh"
}], ["line", {
    x1: "12",
    x2: "12.01",
    y1: "16",
    y2: "16",
    key: "4dfq90"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const CircleCheckBig = createLucideIcon("CircleCheckBig", [["path", {
    d: "M21.801 10A10 10 0 1 1 17 3.335",
    key: "yps3ct"
}], ["path", {
    d: "m9 11 3 3L22 4",
    key: "1pflzl"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const CircleCheck = createLucideIcon("CircleCheck", [["circle", {
    cx: "12",
    cy: "12",
    r: "10",
    key: "1mglay"
}], ["path", {
    d: "m9 12 2 2 4-4",
    key: "dzmm74"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const CircleX = createLucideIcon("CircleX", [["circle", {
    cx: "12",
    cy: "12",
    r: "10",
    key: "1mglay"
}], ["path", {
    d: "m15 9-6 6",
    key: "1uzhvr"
}], ["path", {
    d: "m9 9 6 6",
    key: "z0biqf"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Circle = createLucideIcon("Circle", [["circle", {
    cx: "12",
    cy: "12",
    r: "10",
    key: "1mglay"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Clock = createLucideIcon("Clock", [["circle", {
    cx: "12",
    cy: "12",
    r: "10",
    key: "1mglay"
}], ["polyline", {
    points: "12 6 12 12 16 14",
    key: "68esgv"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Code = createLucideIcon("Code", [["polyline", {
    points: "16 18 22 12 16 6",
    key: "z7tu5w"
}], ["polyline", {
    points: "8 6 2 12 8 18",
    key: "1eg1df"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Coffee = createLucideIcon("Coffee", [["path", {
    d: "M10 2v2",
    key: "7u0qdc"
}], ["path", {
    d: "M14 2v2",
    key: "6buw04"
}], ["path", {
    d: "M16 8a1 1 0 0 1 1 1v8a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4V9a1 1 0 0 1 1-1h14a4 4 0 1 1 0 8h-1",
    key: "pwadti"
}], ["path", {
    d: "M6 2v2",
    key: "colzsn"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Copy = createLucideIcon("Copy", [["rect", {
    width: "14",
    height: "14",
    x: "8",
    y: "8",
    rx: "2",
    ry: "2",
    key: "17jyea"
}], ["path", {
    d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2",
    key: "zix9uf"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const CreditCard = createLucideIcon("CreditCard", [["rect", {
    width: "20",
    height: "14",
    x: "2",
    y: "5",
    rx: "2",
    key: "ynyp8z"
}], ["line", {
    x1: "2",
    x2: "22",
    y1: "10",
    y2: "10",
    key: "1b3vmo"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Crown = createLucideIcon("Crown", [["path", {
    d: "M11.562 3.266a.5.5 0 0 1 .876 0L15.39 8.87a1 1 0 0 0 1.516.294L21.183 5.5a.5.5 0 0 1 .798.519l-2.834 10.246a1 1 0 0 1-.956.734H5.81a1 1 0 0 1-.957-.734L2.02 6.02a.5.5 0 0 1 .798-.519l4.276 3.664a1 1 0 0 0 1.516-.294z",
    key: "1vdc57"
}], ["path", {
    d: "M5 21h14",
    key: "11awu3"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Database = createLucideIcon("Database", [["ellipse", {
    cx: "12",
    cy: "5",
    rx: "9",
    ry: "3",
    key: "msslwz"
}], ["path", {
    d: "M3 5V19A9 3 0 0 0 21 19V5",
    key: "1wlel7"
}], ["path", {
    d: "M3 12A9 3 0 0 0 21 12",
    key: "mv7ke4"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const DollarSign = createLucideIcon("DollarSign", [["line", {
    x1: "12",
    x2: "12",
    y1: "2",
    y2: "22",
    key: "7eqyqh"
}], ["path", {
    d: "M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6",
    key: "1b0p4s"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Download = createLucideIcon("Download", [["path", {
    d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4",
    key: "ih7n3h"
}], ["polyline", {
    points: "7 10 12 15 17 10",
    key: "2ggqvy"
}], ["line", {
    x1: "12",
    x2: "12",
    y1: "15",
    y2: "3",
    key: "1vk2je"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Ellipsis = createLucideIcon("Ellipsis", [["circle", {
    cx: "12",
    cy: "12",
    r: "1",
    key: "41hilf"
}], ["circle", {
    cx: "19",
    cy: "12",
    r: "1",
    key: "1wjl8i"
}], ["circle", {
    cx: "5",
    cy: "12",
    r: "1",
    key: "1pcz8c"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ExternalLink = createLucideIcon("ExternalLink", [["path", {
    d: "M15 3h6v6",
    key: "1q9fwt"
}], ["path", {
    d: "M10 14 21 3",
    key: "gplh6r"
}], ["path", {
    d: "M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6",
    key: "a6xqqp"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Eye = createLucideIcon("Eye", [["path", {
    d: "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0",
    key: "1nclc0"
}], ["circle", {
    cx: "12",
    cy: "12",
    r: "3",
    key: "1v7zrd"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const FileCheck = createLucideIcon("FileCheck", [["path", {
    d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z",
    key: "1rqfz7"
}], ["path", {
    d: "M14 2v4a2 2 0 0 0 2 2h4",
    key: "tnqrlb"
}], ["path", {
    d: "m9 15 2 2 4-4",
    key: "1grp1n"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const FileSearch = createLucideIcon("FileSearch", [["path", {
    d: "M14 2v4a2 2 0 0 0 2 2h4",
    key: "tnqrlb"
}], ["path", {
    d: "M4.268 21a2 2 0 0 0 1.727 1H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3",
    key: "ms7g94"
}], ["path", {
    d: "m9 18-1.5-1.5",
    key: "1j6qii"
}], ["circle", {
    cx: "5",
    cy: "14",
    r: "3",
    key: "ufru5t"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const FileText = createLucideIcon("FileText", [["path", {
    d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z",
    key: "1rqfz7"
}], ["path", {
    d: "M14 2v4a2 2 0 0 0 2 2h4",
    key: "tnqrlb"
}], ["path", {
    d: "M10 9H8",
    key: "b1mrlr"
}], ["path", {
    d: "M16 13H8",
    key: "t4e002"
}], ["path", {
    d: "M16 17H8",
    key: "z1uh3a"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Filter = createLucideIcon("Filter", [["polygon", {
    points: "22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3",
    key: "1yg77f"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Github = createLucideIcon("Github", [["path", {
    d: "M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4",
    key: "tonef"
}], ["path", {
    d: "M9 18c-4.51 2-5-2-7-2",
    key: "9comsn"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Globe = createLucideIcon("Globe", [["circle", {
    cx: "12",
    cy: "12",
    r: "10",
    key: "1mglay"
}], ["path", {
    d: "M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20",
    key: "13o1zl"
}], ["path", {
    d: "M2 12h20",
    key: "9i4pu4"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const GraduationCap = createLucideIcon("GraduationCap", [["path", {
    d: "M21.42 10.922a1 1 0 0 0-.019-1.838L12.83 5.18a2 2 0 0 0-1.66 0L2.6 9.08a1 1 0 0 0 0 1.832l8.57 3.908a2 2 0 0 0 1.66 0z",
    key: "j76jl0"
}], ["path", {
    d: "M22 10v6",
    key: "1lu8f3"
}], ["path", {
    d: "M6 12.5V16a6 3 0 0 0 12 0v-3.5",
    key: "1r8lef"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const GripVertical = createLucideIcon("GripVertical", [["circle", {
    cx: "9",
    cy: "12",
    r: "1",
    key: "1vctgf"
}], ["circle", {
    cx: "9",
    cy: "5",
    r: "1",
    key: "hp0tcf"
}], ["circle", {
    cx: "9",
    cy: "19",
    r: "1",
    key: "fkjjf6"
}], ["circle", {
    cx: "15",
    cy: "12",
    r: "1",
    key: "1tmaij"
}], ["circle", {
    cx: "15",
    cy: "5",
    r: "1",
    key: "19l28e"
}], ["circle", {
    cx: "15",
    cy: "19",
    r: "1",
    key: "f4zoj3"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Hash = createLucideIcon("Hash", [["line", {
    x1: "4",
    x2: "20",
    y1: "9",
    y2: "9",
    key: "4lhtct"
}], ["line", {
    x1: "4",
    x2: "20",
    y1: "15",
    y2: "15",
    key: "vyu0kd"
}], ["line", {
    x1: "10",
    x2: "8",
    y1: "3",
    y2: "21",
    key: "1ggp8o"
}], ["line", {
    x1: "16",
    x2: "14",
    y1: "3",
    y2: "21",
    key: "weycgp"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Heart = createLucideIcon("Heart", [["path", {
    d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
    key: "c3ymky"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Info = createLucideIcon("Info", [["circle", {
    cx: "12",
    cy: "12",
    r: "10",
    key: "1mglay"
}], ["path", {
    d: "M12 16v-4",
    key: "1dtifu"
}], ["path", {
    d: "M12 8h.01",
    key: "e9boi3"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Languages = createLucideIcon("Languages", [["path", {
    d: "m5 8 6 6",
    key: "1wu5hv"
}], ["path", {
    d: "m4 14 6-6 2-3",
    key: "1k1g8d"
}], ["path", {
    d: "M2 5h12",
    key: "or177f"
}], ["path", {
    d: "M7 2h1",
    key: "1t2jsx"
}], ["path", {
    d: "m22 22-5-10-5 10",
    key: "don7ne"
}], ["path", {
    d: "M14 18h6",
    key: "1m8k6r"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const LayoutDashboard = createLucideIcon("LayoutDashboard", [["rect", {
    width: "7",
    height: "9",
    x: "3",
    y: "3",
    rx: "1",
    key: "10lvy0"
}], ["rect", {
    width: "7",
    height: "5",
    x: "14",
    y: "3",
    rx: "1",
    key: "16une8"
}], ["rect", {
    width: "7",
    height: "9",
    x: "14",
    y: "12",
    rx: "1",
    key: "1hutg5"
}], ["rect", {
    width: "7",
    height: "5",
    x: "3",
    y: "16",
    rx: "1",
    key: "ldoo1y"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Lightbulb = createLucideIcon("Lightbulb", [["path", {
    d: "M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5",
    key: "1gvzjb"
}], ["path", {
    d: "M9 18h6",
    key: "x1upvd"
}], ["path", {
    d: "M10 22h4",
    key: "ceow96"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Linkedin = createLucideIcon("Linkedin", [["path", {
    d: "M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z",
    key: "c2jq9f"
}], ["rect", {
    width: "4",
    height: "12",
    x: "2",
    y: "9",
    key: "mk3on5"
}], ["circle", {
    cx: "4",
    cy: "4",
    r: "2",
    key: "bt5ra8"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const LoaderCircle = createLucideIcon("LoaderCircle", [["path", {
    d: "M21 12a9 9 0 1 1-6.219-8.56",
    key: "13zald"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Lock = createLucideIcon("Lock", [["rect", {
    width: "18",
    height: "11",
    x: "3",
    y: "11",
    rx: "2",
    ry: "2",
    key: "1w4ew1"
}], ["path", {
    d: "M7 11V7a5 5 0 0 1 10 0v4",
    key: "fwvmzm"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const LogOut = createLucideIcon("LogOut", [["path", {
    d: "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4",
    key: "1uf3rs"
}], ["polyline", {
    points: "16 17 21 12 16 7",
    key: "1gabdz"
}], ["line", {
    x1: "21",
    x2: "9",
    y1: "12",
    y2: "12",
    key: "1uyos4"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Mail = createLucideIcon("Mail", [["rect", {
    width: "20",
    height: "16",
    x: "2",
    y: "4",
    rx: "2",
    key: "18n3k1"
}], ["path", {
    d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",
    key: "1ocrg3"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const MapPin = createLucideIcon("MapPin", [["path", {
    d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0",
    key: "1r0f0z"
}], ["circle", {
    cx: "12",
    cy: "10",
    r: "3",
    key: "ilqhr7"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Menu$1 = createLucideIcon("Menu", [["line", {
    x1: "4",
    x2: "20",
    y1: "12",
    y2: "12",
    key: "1e0a9i"
}], ["line", {
    x1: "4",
    x2: "20",
    y1: "6",
    y2: "6",
    key: "1owob3"
}], ["line", {
    x1: "4",
    x2: "20",
    y1: "18",
    y2: "18",
    key: "yk5zj1"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const MessageSquare = createLucideIcon("MessageSquare", [["path", {
    d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z",
    key: "1lielz"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Minus = createLucideIcon("Minus", [["path", {
    d: "M5 12h14",
    key: "1ays0h"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const PanelsTopLeft = createLucideIcon("PanelsTopLeft", [["rect", {
    width: "18",
    height: "18",
    x: "3",
    y: "3",
    rx: "2",
    key: "afitv7"
}], ["path", {
    d: "M3 9h18",
    key: "1pudct"
}], ["path", {
    d: "M9 21V9",
    key: "1oto5p"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Paperclip = createLucideIcon("Paperclip", [["path", {
    d: "m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.57a2 2 0 0 1-2.83-2.83l8.49-8.48",
    key: "1u3ebp"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Phone = createLucideIcon("Phone", [["path", {
    d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
    key: "foiqr5"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Plus = createLucideIcon("Plus", [["path", {
    d: "M5 12h14",
    key: "1ays0h"
}], ["path", {
    d: "M12 5v14",
    key: "s699le"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const RefreshCw = createLucideIcon("RefreshCw", [["path", {
    d: "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8",
    key: "v9h5vc"
}], ["path", {
    d: "M21 3v5h-5",
    key: "1q7to0"
}], ["path", {
    d: "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16",
    key: "3uifl3"
}], ["path", {
    d: "M8 16H3v5",
    key: "1cv678"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Rocket = createLucideIcon("Rocket", [["path", {
    d: "M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z",
    key: "m3kijz"
}], ["path", {
    d: "m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z",
    key: "1fmvmk"
}], ["path", {
    d: "M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0",
    key: "1f8sc4"
}], ["path", {
    d: "M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5",
    key: "qeys4"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const RotateCcw = createLucideIcon("RotateCcw", [["path", {
    d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8",
    key: "1357e3"
}], ["path", {
    d: "M3 3v5h5",
    key: "1xhq8a"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Save = createLucideIcon("Save", [["path", {
    d: "M15.2 3a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2z",
    key: "1c8476"
}], ["path", {
    d: "M17 21v-7a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v7",
    key: "1ydtos"
}], ["path", {
    d: "M7 3v4a1 1 0 0 0 1 1h7",
    key: "t51u73"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Search = createLucideIcon("Search", [["circle", {
    cx: "11",
    cy: "11",
    r: "8",
    key: "4ej97u"
}], ["path", {
    d: "m21 21-4.3-4.3",
    key: "1qie3q"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Send = createLucideIcon("Send", [["path", {
    d: "M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z",
    key: "1ffxy3"
}], ["path", {
    d: "m21.854 2.147-10.94 10.939",
    key: "12cjpa"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Settings = createLucideIcon("Settings", [["path", {
    d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",
    key: "1qme2f"
}], ["circle", {
    cx: "12",
    cy: "12",
    r: "3",
    key: "1v7zrd"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ShieldCheck = createLucideIcon("ShieldCheck", [["path", {
    d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
    key: "oel41y"
}], ["path", {
    d: "m9 12 2 2 4-4",
    key: "dzmm74"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Shield = createLucideIcon("Shield", [["path", {
    d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
    key: "oel41y"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const SlidersHorizontal = createLucideIcon("SlidersHorizontal", [["line", {
    x1: "21",
    x2: "14",
    y1: "4",
    y2: "4",
    key: "obuewd"
}], ["line", {
    x1: "10",
    x2: "3",
    y1: "4",
    y2: "4",
    key: "1q6298"
}], ["line", {
    x1: "21",
    x2: "12",
    y1: "12",
    y2: "12",
    key: "1iu8h1"
}], ["line", {
    x1: "8",
    x2: "3",
    y1: "12",
    y2: "12",
    key: "ntss68"
}], ["line", {
    x1: "21",
    x2: "16",
    y1: "20",
    y2: "20",
    key: "14d8ph"
}], ["line", {
    x1: "12",
    x2: "3",
    y1: "20",
    y2: "20",
    key: "m0wm8r"
}], ["line", {
    x1: "14",
    x2: "14",
    y1: "2",
    y2: "6",
    key: "14e1ph"
}], ["line", {
    x1: "8",
    x2: "8",
    y1: "10",
    y2: "14",
    key: "1i6ji0"
}], ["line", {
    x1: "16",
    x2: "16",
    y1: "18",
    y2: "22",
    key: "1lctlv"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Sparkles = createLucideIcon("Sparkles", [["path", {
    d: "M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z",
    key: "4pj2yx"
}], ["path", {
    d: "M20 3v4",
    key: "1olli1"
}], ["path", {
    d: "M22 5h-4",
    key: "1gvqau"
}], ["path", {
    d: "M4 17v2",
    key: "vumght"
}], ["path", {
    d: "M5 18H3",
    key: "zchphs"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const SquarePen = createLucideIcon("SquarePen", [["path", {
    d: "M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7",
    key: "1m0v6g"
}], ["path", {
    d: "M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z",
    key: "ohrbg2"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Star = createLucideIcon("Star", [["path", {
    d: "M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z",
    key: "r04s7s"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Target = createLucideIcon("Target", [["circle", {
    cx: "12",
    cy: "12",
    r: "10",
    key: "1mglay"
}], ["circle", {
    cx: "12",
    cy: "12",
    r: "6",
    key: "1vlfrh"
}], ["circle", {
    cx: "12",
    cy: "12",
    r: "2",
    key: "1c9p78"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Trash2 = createLucideIcon("Trash2", [["path", {
    d: "M3 6h18",
    key: "d0wm0j"
}], ["path", {
    d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6",
    key: "4alrt4"
}], ["path", {
    d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2",
    key: "v07s0e"
}], ["line", {
    x1: "10",
    x2: "10",
    y1: "11",
    y2: "17",
    key: "1uufr5"
}], ["line", {
    x1: "14",
    x2: "14",
    y1: "11",
    y2: "17",
    key: "xtxkd"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const TrendingDown = createLucideIcon("TrendingDown", [["polyline", {
    points: "22 17 13.5 8.5 8.5 13.5 2 7",
    key: "1r2t7k"
}], ["polyline", {
    points: "16 17 22 17 22 11",
    key: "11uiuu"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const TrendingUp = createLucideIcon("TrendingUp", [["polyline", {
    points: "22 7 13.5 15.5 8.5 10.5 2 17",
    key: "126l90"
}], ["polyline", {
    points: "16 7 22 7 22 13",
    key: "kwv8wd"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const TriangleAlert = createLucideIcon("TriangleAlert", [["path", {
    d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3",
    key: "wmoenq"
}], ["path", {
    d: "M12 9v4",
    key: "juzpu7"
}], ["path", {
    d: "M12 17h.01",
    key: "p32p05"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Trophy = createLucideIcon("Trophy", [["path", {
    d: "M6 9H4.5a2.5 2.5 0 0 1 0-5H6",
    key: "17hqa7"
}], ["path", {
    d: "M18 9h1.5a2.5 2.5 0 0 0 0-5H18",
    key: "lmptdp"
}], ["path", {
    d: "M4 22h16",
    key: "57wxv0"
}], ["path", {
    d: "M10 14.66V17c0 .55-.47.98-.97 1.21C7.85 18.75 7 20.24 7 22",
    key: "1nw9bq"
}], ["path", {
    d: "M14 14.66V17c0 .55.47.98.97 1.21C16.15 18.75 17 20.24 17 22",
    key: "1np0yb"
}], ["path", {
    d: "M18 2H6v7a6 6 0 0 0 12 0V2Z",
    key: "u46fv3"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Upload = createLucideIcon("Upload", [["path", {
    d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4",
    key: "ih7n3h"
}], ["polyline", {
    points: "17 8 12 3 7 8",
    key: "t8dd8p"
}], ["line", {
    x1: "12",
    x2: "12",
    y1: "3",
    y2: "15",
    key: "widbto"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const User = createLucideIcon("User", [["path", {
    d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2",
    key: "975kel"
}], ["circle", {
    cx: "12",
    cy: "7",
    r: "4",
    key: "17ys0d"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Users = createLucideIcon("Users", [["path", {
    d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2",
    key: "1yyitq"
}], ["circle", {
    cx: "9",
    cy: "7",
    r: "4",
    key: "nufk8"
}], ["path", {
    d: "M22 21v-2a4 4 0 0 0-3-3.87",
    key: "kshegd"
}], ["path", {
    d: "M16 3.13a4 4 0 0 1 0 7.75",
    key: "1da9ce"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const WandSparkles = createLucideIcon("WandSparkles", [["path", {
    d: "m21.64 3.64-1.28-1.28a1.21 1.21 0 0 0-1.72 0L2.36 18.64a1.21 1.21 0 0 0 0 1.72l1.28 1.28a1.2 1.2 0 0 0 1.72 0L21.64 5.36a1.2 1.2 0 0 0 0-1.72",
    key: "ul74o6"
}], ["path", {
    d: "m14 7 3 3",
    key: "1r5n42"
}], ["path", {
    d: "M5 6v4",
    key: "ilb8ba"
}], ["path", {
    d: "M19 14v4",
    key: "blhpug"
}], ["path", {
    d: "M10 2v2",
    key: "7u0qdc"
}], ["path", {
    d: "M7 8H3",
    key: "zfb6yr"
}], ["path", {
    d: "M21 16h-4",
    key: "1cnmox"
}], ["path", {
    d: "M11 3H9",
    key: "1obp7u"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const X = createLucideIcon("X", [["path", {
    d: "M18 6 6 18",
    key: "1bl5f8"
}], ["path", {
    d: "m6 6 12 12",
    key: "d8bk6v"
}]]);
/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Zap = createLucideIcon("Zap", [["path", {
    d: "M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z",
    key: "1xq2db"
}]])
  , CLASS_PART_SEPARATOR = "-"
  , createClassGroupUtils = s => {
    const e = createClassMap(s)
      , {conflictingClassGroups: i, conflictingClassGroupModifiers: o} = s;
    return {
        getClassGroupId: d => {
            const h = d.split(CLASS_PART_SEPARATOR);
            return h[0] === "" && h.length !== 1 && h.shift(),
            getGroupRecursive(h, e) || getGroupIdForArbitraryProperty(d)
        }
        ,
        getConflictingClassGroupIds: (d, h) => {
            const g = i[d] || [];
            return h && o[d] ? [...g, ...o[d]] : g
        }
    }
}
  , getGroupRecursive = (s, e) => {
    var d;
    if (s.length === 0)
        return e.classGroupId;
    const i = s[0]
      , o = e.nextPart.get(i)
      , a = o ? getGroupRecursive(s.slice(1), o) : void 0;
    if (a)
        return a;
    if (e.validators.length === 0)
        return;
    const c = s.join(CLASS_PART_SEPARATOR);
    return (d = e.validators.find( ({validator: h}) => h(c))) == null ? void 0 : d.classGroupId
}
  , arbitraryPropertyRegex = /^\[(.+)\]$/
  , getGroupIdForArbitraryProperty = s => {
    if (arbitraryPropertyRegex.test(s)) {
        const e = arbitraryPropertyRegex.exec(s)[1]
          , i = e == null ? void 0 : e.substring(0, e.indexOf(":"));
        if (i)
            return "arbitrary.." + i
    }
}
  , createClassMap = s => {
    const {theme: e, prefix: i} = s
      , o = {
        nextPart: new Map,
        validators: []
    };
    return getPrefixedClassGroupEntries(Object.entries(s.classGroups), i).forEach( ([c,d]) => {
        processClassesRecursively(d, o, c, e)
    }
    ),
    o
}
  , processClassesRecursively = (s, e, i, o) => {
    s.forEach(a => {
        if (typeof a == "string") {
            const c = a === "" ? e : getPart(e, a);
            c.classGroupId = i;
            return
        }
        if (typeof a == "function") {
            if (isThemeGetter(a)) {
                processClassesRecursively(a(o), e, i, o);
                return
            }
            e.validators.push({
                validator: a,
                classGroupId: i
            });
            return
        }
        Object.entries(a).forEach( ([c,d]) => {
            processClassesRecursively(d, getPart(e, c), i, o)
        }
        )
    }
    )
}
  , getPart = (s, e) => {
    let i = s;
    return e.split(CLASS_PART_SEPARATOR).forEach(o => {
        i.nextPart.has(o) || i.nextPart.set(o, {
            nextPart: new Map,
            validators: []
        }),
        i = i.nextPart.get(o)
    }
    ),
    i
}
  , isThemeGetter = s => s.isThemeGetter
  , getPrefixedClassGroupEntries = (s, e) => e ? s.map( ([i,o]) => {
    const a = o.map(c => typeof c == "string" ? e + c : typeof c == "object" ? Object.fromEntries(Object.entries(c).map( ([d,h]) => [e + d, h])) : c);
    return [i, a]
}
) : s
  , createLruCache = s => {
    if (s < 1)
        return {
            get: () => {}
            ,
            set: () => {}
        };
    let e = 0
      , i = new Map
      , o = new Map;
    const a = (c, d) => {
        i.set(c, d),
        e++,
        e > s && (e = 0,
        o = i,
        i = new Map)
    }
    ;
    return {
        get(c) {
            let d = i.get(c);
            if (d !== void 0)
                return d;
            if ((d = o.get(c)) !== void 0)
                return a(c, d),
                d
        },
        set(c, d) {
            i.has(c) ? i.set(c, d) : a(c, d)
        }
    }
}
  , IMPORTANT_MODIFIER = "!"
  , createParseClassName = s => {
    const {separator: e, experimentalParseClassName: i} = s
      , o = e.length === 1
      , a = e[0]
      , c = e.length
      , d = h => {
        const g = [];
        let b = 0, _ = 0, $;
        for (let it = 0; it < h.length; it++) {
            let st = h[it];
            if (b === 0) {
                if (st === a && (o || h.slice(it, it + c) === e)) {
                    g.push(h.slice(_, it)),
                    _ = it + c;
                    continue
                }
                if (st === "/") {
                    $ = it;
                    continue
                }
            }
            st === "[" ? b++ : st === "]" && b--
        }
        const _e = g.length === 0 ? h : h.substring(_)
          , tt = _e.startsWith(IMPORTANT_MODIFIER)
          , rt = tt ? _e.substring(1) : _e
          , et = $ && $ > _ ? $ - _ : void 0;
        return {
            modifiers: g,
            hasImportantModifier: tt,
            baseClassName: rt,
            maybePostfixModifierPosition: et
        }
    }
    ;
    return i ? h => i({
        className: h,
        parseClassName: d
    }) : d
}
  , sortModifiers = s => {
    if (s.length <= 1)
        return s;
    const e = [];
    let i = [];
    return s.forEach(o => {
        o[0] === "[" ? (e.push(...i.sort(), o),
        i = []) : i.push(o)
    }
    ),
    e.push(...i.sort()),
    e
}
  , createConfigUtils = s => ({
    cache: createLruCache(s.cacheSize),
    parseClassName: createParseClassName(s),
    ...createClassGroupUtils(s)
})
  , SPLIT_CLASSES_REGEX = /\s+/
  , mergeClassList = (s, e) => {
    const {parseClassName: i, getClassGroupId: o, getConflictingClassGroupIds: a} = e
      , c = []
      , d = s.trim().split(SPLIT_CLASSES_REGEX);
    let h = "";
    for (let g = d.length - 1; g >= 0; g -= 1) {
        const b = d[g]
          , {modifiers: _, hasImportantModifier: $, baseClassName: _e, maybePostfixModifierPosition: tt} = i(b);
        let rt = !!tt
          , et = o(rt ? _e.substring(0, tt) : _e);
        if (!et) {
            if (!rt) {
                h = b + (h.length > 0 ? " " + h : h);
                continue
            }
            if (et = o(_e),
            !et) {
                h = b + (h.length > 0 ? " " + h : h);
                continue
            }
            rt = !1
        }
        const it = sortModifiers(_).join(":")
          , st = $ ? it + IMPORTANT_MODIFIER : it
          , nt = st + et;
        if (c.includes(nt))
            continue;
        c.push(nt);
        const lt = a(et, rt);
        for (let dt = 0; dt < lt.length; ++dt) {
            const ot = lt[dt];
            c.push(st + ot)
        }
        h = b + (h.length > 0 ? " " + h : h)
    }
    return h
}
;
function twJoin() {
    let s = 0, e, i, o = "";
    for (; s < arguments.length; )
        (e = arguments[s++]) && (i = toValue(e)) && (o && (o += " "),
        o += i);
    return o
}
const toValue = s => {
    if (typeof s == "string")
        return s;
    let e, i = "";
    for (let o = 0; o < s.length; o++)
        s[o] && (e = toValue(s[o])) && (i && (i += " "),
        i += e);
    return i
}
;
function createTailwindMerge(s, ...e) {
    let i, o, a, c = d;
    function d(g) {
        const b = e.reduce( (_, $) => $(_), s());
        return i = createConfigUtils(b),
        o = i.cache.get,
        a = i.cache.set,
        c = h,
        h(g)
    }
    function h(g) {
        const b = o(g);
        if (b)
            return b;
        const _ = mergeClassList(g, i);
        return a(g, _),
        _
    }
    return function() {
        return c(twJoin.apply(null, arguments))
    }
}
const fromTheme = s => {
    const e = i => i[s] || [];
    return e.isThemeGetter = !0,
    e
}
  , arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i
  , fractionRegex = /^\d+\/\d+$/
  , stringLengths = new Set(["px", "full", "screen"])
  , tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/
  , lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/
  , colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/
  , shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/
  , imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/
  , isLength = s => isNumber$1(s) || stringLengths.has(s) || fractionRegex.test(s)
  , isArbitraryLength = s => getIsArbitraryValue(s, "length", isLengthOnly)
  , isNumber$1 = s => !!s && !Number.isNaN(Number(s))
  , isArbitraryNumber = s => getIsArbitraryValue(s, "number", isNumber$1)
  , isInteger = s => !!s && Number.isInteger(Number(s))
  , isPercent = s => s.endsWith("%") && isNumber$1(s.slice(0, -1))
  , isArbitraryValue = s => arbitraryValueRegex.test(s)
  , isTshirtSize = s => tshirtUnitRegex.test(s)
  , sizeLabels = new Set(["length", "size", "percentage"])
  , isArbitrarySize = s => getIsArbitraryValue(s, sizeLabels, isNever)
  , isArbitraryPosition = s => getIsArbitraryValue(s, "position", isNever)
  , imageLabels = new Set(["image", "url"])
  , isArbitraryImage = s => getIsArbitraryValue(s, imageLabels, isImage)
  , isArbitraryShadow = s => getIsArbitraryValue(s, "", isShadow)
  , isAny = () => !0
  , getIsArbitraryValue = (s, e, i) => {
    const o = arbitraryValueRegex.exec(s);
    return o ? o[1] ? typeof e == "string" ? o[1] === e : e.has(o[1]) : i(o[2]) : !1
}
  , isLengthOnly = s => lengthUnitRegex.test(s) && !colorFunctionRegex.test(s)
  , isNever = () => !1
  , isShadow = s => shadowRegex.test(s)
  , isImage = s => imageRegex.test(s)
  , getDefaultConfig = () => {
    const s = fromTheme("colors")
      , e = fromTheme("spacing")
      , i = fromTheme("blur")
      , o = fromTheme("brightness")
      , a = fromTheme("borderColor")
      , c = fromTheme("borderRadius")
      , d = fromTheme("borderSpacing")
      , h = fromTheme("borderWidth")
      , g = fromTheme("contrast")
      , b = fromTheme("grayscale")
      , _ = fromTheme("hueRotate")
      , $ = fromTheme("invert")
      , _e = fromTheme("gap")
      , tt = fromTheme("gradientColorStops")
      , rt = fromTheme("gradientColorStopPositions")
      , et = fromTheme("inset")
      , it = fromTheme("margin")
      , st = fromTheme("opacity")
      , nt = fromTheme("padding")
      , lt = fromTheme("saturate")
      , dt = fromTheme("scale")
      , ot = fromTheme("sepia")
      , at = fromTheme("skew")
      , ht = fromTheme("space")
      , pt = fromTheme("translate")
      , gt = () => ["auto", "contain", "none"]
      , wt = () => ["auto", "hidden", "clip", "visible", "scroll"]
      , yt = () => ["auto", isArbitraryValue, e]
      , Rt = () => [isArbitraryValue, e]
      , Mt = () => ["", isLength, isArbitraryLength]
      , ss = () => ["auto", isNumber$1, isArbitraryValue]
      , zt = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"]
      , At = () => ["solid", "dashed", "dotted", "double", "none"]
      , kt = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"]
      , vt = () => ["start", "end", "center", "between", "around", "evenly", "stretch"]
      , bt = () => ["", "0", isArbitraryValue]
      , Tt = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"]
      , Yt = () => [isNumber$1, isArbitraryValue];
    return {
        cacheSize: 500,
        separator: ":",
        theme: {
            colors: [isAny],
            spacing: [isLength, isArbitraryLength],
            blur: ["none", "", isTshirtSize, isArbitraryValue],
            brightness: Yt(),
            borderColor: [s],
            borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
            borderSpacing: Rt(),
            borderWidth: Mt(),
            contrast: Yt(),
            grayscale: bt(),
            hueRotate: Yt(),
            invert: bt(),
            gap: Rt(),
            gradientColorStops: [s],
            gradientColorStopPositions: [isPercent, isArbitraryLength],
            inset: yt(),
            margin: yt(),
            opacity: Yt(),
            padding: Rt(),
            saturate: Yt(),
            scale: Yt(),
            sepia: bt(),
            skew: Yt(),
            space: Rt(),
            translate: Rt()
        },
        classGroups: {
            aspect: [{
                aspect: ["auto", "square", "video", isArbitraryValue]
            }],
            container: ["container"],
            columns: [{
                columns: [isTshirtSize]
            }],
            "break-after": [{
                "break-after": Tt()
            }],
            "break-before": [{
                "break-before": Tt()
            }],
            "break-inside": [{
                "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
            }],
            "box-decoration": [{
                "box-decoration": ["slice", "clone"]
            }],
            box: [{
                box: ["border", "content"]
            }],
            display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
            float: [{
                float: ["right", "left", "none", "start", "end"]
            }],
            clear: [{
                clear: ["left", "right", "both", "none", "start", "end"]
            }],
            isolation: ["isolate", "isolation-auto"],
            "object-fit": [{
                object: ["contain", "cover", "fill", "none", "scale-down"]
            }],
            "object-position": [{
                object: [...zt(), isArbitraryValue]
            }],
            overflow: [{
                overflow: wt()
            }],
            "overflow-x": [{
                "overflow-x": wt()
            }],
            "overflow-y": [{
                "overflow-y": wt()
            }],
            overscroll: [{
                overscroll: gt()
            }],
            "overscroll-x": [{
                "overscroll-x": gt()
            }],
            "overscroll-y": [{
                "overscroll-y": gt()
            }],
            position: ["static", "fixed", "absolute", "relative", "sticky"],
            inset: [{
                inset: [et]
            }],
            "inset-x": [{
                "inset-x": [et]
            }],
            "inset-y": [{
                "inset-y": [et]
            }],
            start: [{
                start: [et]
            }],
            end: [{
                end: [et]
            }],
            top: [{
                top: [et]
            }],
            right: [{
                right: [et]
            }],
            bottom: [{
                bottom: [et]
            }],
            left: [{
                left: [et]
            }],
            visibility: ["visible", "invisible", "collapse"],
            z: [{
                z: ["auto", isInteger, isArbitraryValue]
            }],
            basis: [{
                basis: yt()
            }],
            "flex-direction": [{
                flex: ["row", "row-reverse", "col", "col-reverse"]
            }],
            "flex-wrap": [{
                flex: ["wrap", "wrap-reverse", "nowrap"]
            }],
            flex: [{
                flex: ["1", "auto", "initial", "none", isArbitraryValue]
            }],
            grow: [{
                grow: bt()
            }],
            shrink: [{
                shrink: bt()
            }],
            order: [{
                order: ["first", "last", "none", isInteger, isArbitraryValue]
            }],
            "grid-cols": [{
                "grid-cols": [isAny]
            }],
            "col-start-end": [{
                col: ["auto", {
                    span: ["full", isInteger, isArbitraryValue]
                }, isArbitraryValue]
            }],
            "col-start": [{
                "col-start": ss()
            }],
            "col-end": [{
                "col-end": ss()
            }],
            "grid-rows": [{
                "grid-rows": [isAny]
            }],
            "row-start-end": [{
                row: ["auto", {
                    span: [isInteger, isArbitraryValue]
                }, isArbitraryValue]
            }],
            "row-start": [{
                "row-start": ss()
            }],
            "row-end": [{
                "row-end": ss()
            }],
            "grid-flow": [{
                "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
            }],
            "auto-cols": [{
                "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
            }],
            "auto-rows": [{
                "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
            }],
            gap: [{
                gap: [_e]
            }],
            "gap-x": [{
                "gap-x": [_e]
            }],
            "gap-y": [{
                "gap-y": [_e]
            }],
            "justify-content": [{
                justify: ["normal", ...vt()]
            }],
            "justify-items": [{
                "justify-items": ["start", "end", "center", "stretch"]
            }],
            "justify-self": [{
                "justify-self": ["auto", "start", "end", "center", "stretch"]
            }],
            "align-content": [{
                content: ["normal", ...vt(), "baseline"]
            }],
            "align-items": [{
                items: ["start", "end", "center", "baseline", "stretch"]
            }],
            "align-self": [{
                self: ["auto", "start", "end", "center", "stretch", "baseline"]
            }],
            "place-content": [{
                "place-content": [...vt(), "baseline"]
            }],
            "place-items": [{
                "place-items": ["start", "end", "center", "baseline", "stretch"]
            }],
            "place-self": [{
                "place-self": ["auto", "start", "end", "center", "stretch"]
            }],
            p: [{
                p: [nt]
            }],
            px: [{
                px: [nt]
            }],
            py: [{
                py: [nt]
            }],
            ps: [{
                ps: [nt]
            }],
            pe: [{
                pe: [nt]
            }],
            pt: [{
                pt: [nt]
            }],
            pr: [{
                pr: [nt]
            }],
            pb: [{
                pb: [nt]
            }],
            pl: [{
                pl: [nt]
            }],
            m: [{
                m: [it]
            }],
            mx: [{
                mx: [it]
            }],
            my: [{
                my: [it]
            }],
            ms: [{
                ms: [it]
            }],
            me: [{
                me: [it]
            }],
            mt: [{
                mt: [it]
            }],
            mr: [{
                mr: [it]
            }],
            mb: [{
                mb: [it]
            }],
            ml: [{
                ml: [it]
            }],
            "space-x": [{
                "space-x": [ht]
            }],
            "space-x-reverse": ["space-x-reverse"],
            "space-y": [{
                "space-y": [ht]
            }],
            "space-y-reverse": ["space-y-reverse"],
            w: [{
                w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", isArbitraryValue, e]
            }],
            "min-w": [{
                "min-w": [isArbitraryValue, e, "min", "max", "fit"]
            }],
            "max-w": [{
                "max-w": [isArbitraryValue, e, "none", "full", "min", "max", "fit", "prose", {
                    screen: [isTshirtSize]
                }, isTshirtSize]
            }],
            h: [{
                h: [isArbitraryValue, e, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
            }],
            "min-h": [{
                "min-h": [isArbitraryValue, e, "min", "max", "fit", "svh", "lvh", "dvh"]
            }],
            "max-h": [{
                "max-h": [isArbitraryValue, e, "min", "max", "fit", "svh", "lvh", "dvh"]
            }],
            size: [{
                size: [isArbitraryValue, e, "auto", "min", "max", "fit"]
            }],
            "font-size": [{
                text: ["base", isTshirtSize, isArbitraryLength]
            }],
            "font-smoothing": ["antialiased", "subpixel-antialiased"],
            "font-style": ["italic", "not-italic"],
            "font-weight": [{
                font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
            }],
            "font-family": [{
                font: [isAny]
            }],
            "fvn-normal": ["normal-nums"],
            "fvn-ordinal": ["ordinal"],
            "fvn-slashed-zero": ["slashed-zero"],
            "fvn-figure": ["lining-nums", "oldstyle-nums"],
            "fvn-spacing": ["proportional-nums", "tabular-nums"],
            "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
            tracking: [{
                tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
            }],
            "line-clamp": [{
                "line-clamp": ["none", isNumber$1, isArbitraryNumber]
            }],
            leading: [{
                leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength, isArbitraryValue]
            }],
            "list-image": [{
                "list-image": ["none", isArbitraryValue]
            }],
            "list-style-type": [{
                list: ["none", "disc", "decimal", isArbitraryValue]
            }],
            "list-style-position": [{
                list: ["inside", "outside"]
            }],
            "placeholder-color": [{
                placeholder: [s]
            }],
            "placeholder-opacity": [{
                "placeholder-opacity": [st]
            }],
            "text-alignment": [{
                text: ["left", "center", "right", "justify", "start", "end"]
            }],
            "text-color": [{
                text: [s]
            }],
            "text-opacity": [{
                "text-opacity": [st]
            }],
            "text-decoration": ["underline", "overline", "line-through", "no-underline"],
            "text-decoration-style": [{
                decoration: [...At(), "wavy"]
            }],
            "text-decoration-thickness": [{
                decoration: ["auto", "from-font", isLength, isArbitraryLength]
            }],
            "underline-offset": [{
                "underline-offset": ["auto", isLength, isArbitraryValue]
            }],
            "text-decoration-color": [{
                decoration: [s]
            }],
            "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
            "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
            "text-wrap": [{
                text: ["wrap", "nowrap", "balance", "pretty"]
            }],
            indent: [{
                indent: Rt()
            }],
            "vertical-align": [{
                align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
            }],
            whitespace: [{
                whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
            }],
            break: [{
                break: ["normal", "words", "all", "keep"]
            }],
            hyphens: [{
                hyphens: ["none", "manual", "auto"]
            }],
            content: [{
                content: ["none", isArbitraryValue]
            }],
            "bg-attachment": [{
                bg: ["fixed", "local", "scroll"]
            }],
            "bg-clip": [{
                "bg-clip": ["border", "padding", "content", "text"]
            }],
            "bg-opacity": [{
                "bg-opacity": [st]
            }],
            "bg-origin": [{
                "bg-origin": ["border", "padding", "content"]
            }],
            "bg-position": [{
                bg: [...zt(), isArbitraryPosition]
            }],
            "bg-repeat": [{
                bg: ["no-repeat", {
                    repeat: ["", "x", "y", "round", "space"]
                }]
            }],
            "bg-size": [{
                bg: ["auto", "cover", "contain", isArbitrarySize]
            }],
            "bg-image": [{
                bg: ["none", {
                    "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
                }, isArbitraryImage]
            }],
            "bg-color": [{
                bg: [s]
            }],
            "gradient-from-pos": [{
                from: [rt]
            }],
            "gradient-via-pos": [{
                via: [rt]
            }],
            "gradient-to-pos": [{
                to: [rt]
            }],
            "gradient-from": [{
                from: [tt]
            }],
            "gradient-via": [{
                via: [tt]
            }],
            "gradient-to": [{
                to: [tt]
            }],
            rounded: [{
                rounded: [c]
            }],
            "rounded-s": [{
                "rounded-s": [c]
            }],
            "rounded-e": [{
                "rounded-e": [c]
            }],
            "rounded-t": [{
                "rounded-t": [c]
            }],
            "rounded-r": [{
                "rounded-r": [c]
            }],
            "rounded-b": [{
                "rounded-b": [c]
            }],
            "rounded-l": [{
                "rounded-l": [c]
            }],
            "rounded-ss": [{
                "rounded-ss": [c]
            }],
            "rounded-se": [{
                "rounded-se": [c]
            }],
            "rounded-ee": [{
                "rounded-ee": [c]
            }],
            "rounded-es": [{
                "rounded-es": [c]
            }],
            "rounded-tl": [{
                "rounded-tl": [c]
            }],
            "rounded-tr": [{
                "rounded-tr": [c]
            }],
            "rounded-br": [{
                "rounded-br": [c]
            }],
            "rounded-bl": [{
                "rounded-bl": [c]
            }],
            "border-w": [{
                border: [h]
            }],
            "border-w-x": [{
                "border-x": [h]
            }],
            "border-w-y": [{
                "border-y": [h]
            }],
            "border-w-s": [{
                "border-s": [h]
            }],
            "border-w-e": [{
                "border-e": [h]
            }],
            "border-w-t": [{
                "border-t": [h]
            }],
            "border-w-r": [{
                "border-r": [h]
            }],
            "border-w-b": [{
                "border-b": [h]
            }],
            "border-w-l": [{
                "border-l": [h]
            }],
            "border-opacity": [{
                "border-opacity": [st]
            }],
            "border-style": [{
                border: [...At(), "hidden"]
            }],
            "divide-x": [{
                "divide-x": [h]
            }],
            "divide-x-reverse": ["divide-x-reverse"],
            "divide-y": [{
                "divide-y": [h]
            }],
            "divide-y-reverse": ["divide-y-reverse"],
            "divide-opacity": [{
                "divide-opacity": [st]
            }],
            "divide-style": [{
                divide: At()
            }],
            "border-color": [{
                border: [a]
            }],
            "border-color-x": [{
                "border-x": [a]
            }],
            "border-color-y": [{
                "border-y": [a]
            }],
            "border-color-s": [{
                "border-s": [a]
            }],
            "border-color-e": [{
                "border-e": [a]
            }],
            "border-color-t": [{
                "border-t": [a]
            }],
            "border-color-r": [{
                "border-r": [a]
            }],
            "border-color-b": [{
                "border-b": [a]
            }],
            "border-color-l": [{
                "border-l": [a]
            }],
            "divide-color": [{
                divide: [a]
            }],
            "outline-style": [{
                outline: ["", ...At()]
            }],
            "outline-offset": [{
                "outline-offset": [isLength, isArbitraryValue]
            }],
            "outline-w": [{
                outline: [isLength, isArbitraryLength]
            }],
            "outline-color": [{
                outline: [s]
            }],
            "ring-w": [{
                ring: Mt()
            }],
            "ring-w-inset": ["ring-inset"],
            "ring-color": [{
                ring: [s]
            }],
            "ring-opacity": [{
                "ring-opacity": [st]
            }],
            "ring-offset-w": [{
                "ring-offset": [isLength, isArbitraryLength]
            }],
            "ring-offset-color": [{
                "ring-offset": [s]
            }],
            shadow: [{
                shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
            }],
            "shadow-color": [{
                shadow: [isAny]
            }],
            opacity: [{
                opacity: [st]
            }],
            "mix-blend": [{
                "mix-blend": [...kt(), "plus-lighter", "plus-darker"]
            }],
            "bg-blend": [{
                "bg-blend": kt()
            }],
            filter: [{
                filter: ["", "none"]
            }],
            blur: [{
                blur: [i]
            }],
            brightness: [{
                brightness: [o]
            }],
            contrast: [{
                contrast: [g]
            }],
            "drop-shadow": [{
                "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
            }],
            grayscale: [{
                grayscale: [b]
            }],
            "hue-rotate": [{
                "hue-rotate": [_]
            }],
            invert: [{
                invert: [$]
            }],
            saturate: [{
                saturate: [lt]
            }],
            sepia: [{
                sepia: [ot]
            }],
            "backdrop-filter": [{
                "backdrop-filter": ["", "none"]
            }],
            "backdrop-blur": [{
                "backdrop-blur": [i]
            }],
            "backdrop-brightness": [{
                "backdrop-brightness": [o]
            }],
            "backdrop-contrast": [{
                "backdrop-contrast": [g]
            }],
            "backdrop-grayscale": [{
                "backdrop-grayscale": [b]
            }],
            "backdrop-hue-rotate": [{
                "backdrop-hue-rotate": [_]
            }],
            "backdrop-invert": [{
                "backdrop-invert": [$]
            }],
            "backdrop-opacity": [{
                "backdrop-opacity": [st]
            }],
            "backdrop-saturate": [{
                "backdrop-saturate": [lt]
            }],
            "backdrop-sepia": [{
                "backdrop-sepia": [ot]
            }],
            "border-collapse": [{
                border: ["collapse", "separate"]
            }],
            "border-spacing": [{
                "border-spacing": [d]
            }],
            "border-spacing-x": [{
                "border-spacing-x": [d]
            }],
            "border-spacing-y": [{
                "border-spacing-y": [d]
            }],
            "table-layout": [{
                table: ["auto", "fixed"]
            }],
            caption: [{
                caption: ["top", "bottom"]
            }],
            transition: [{
                transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
            }],
            duration: [{
                duration: Yt()
            }],
            ease: [{
                ease: ["linear", "in", "out", "in-out", isArbitraryValue]
            }],
            delay: [{
                delay: Yt()
            }],
            animate: [{
                animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
            }],
            transform: [{
                transform: ["", "gpu", "none"]
            }],
            scale: [{
                scale: [dt]
            }],
            "scale-x": [{
                "scale-x": [dt]
            }],
            "scale-y": [{
                "scale-y": [dt]
            }],
            rotate: [{
                rotate: [isInteger, isArbitraryValue]
            }],
            "translate-x": [{
                "translate-x": [pt]
            }],
            "translate-y": [{
                "translate-y": [pt]
            }],
            "skew-x": [{
                "skew-x": [at]
            }],
            "skew-y": [{
                "skew-y": [at]
            }],
            "transform-origin": [{
                origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
            }],
            accent: [{
                accent: ["auto", s]
            }],
            appearance: [{
                appearance: ["none", "auto"]
            }],
            cursor: [{
                cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
            }],
            "caret-color": [{
                caret: [s]
            }],
            "pointer-events": [{
                "pointer-events": ["none", "auto"]
            }],
            resize: [{
                resize: ["none", "y", "x", ""]
            }],
            "scroll-behavior": [{
                scroll: ["auto", "smooth"]
            }],
            "scroll-m": [{
                "scroll-m": Rt()
            }],
            "scroll-mx": [{
                "scroll-mx": Rt()
            }],
            "scroll-my": [{
                "scroll-my": Rt()
            }],
            "scroll-ms": [{
                "scroll-ms": Rt()
            }],
            "scroll-me": [{
                "scroll-me": Rt()
            }],
            "scroll-mt": [{
                "scroll-mt": Rt()
            }],
            "scroll-mr": [{
                "scroll-mr": Rt()
            }],
            "scroll-mb": [{
                "scroll-mb": Rt()
            }],
            "scroll-ml": [{
                "scroll-ml": Rt()
            }],
            "scroll-p": [{
                "scroll-p": Rt()
            }],
            "scroll-px": [{
                "scroll-px": Rt()
            }],
            "scroll-py": [{
                "scroll-py": Rt()
            }],
            "scroll-ps": [{
                "scroll-ps": Rt()
            }],
            "scroll-pe": [{
                "scroll-pe": Rt()
            }],
            "scroll-pt": [{
                "scroll-pt": Rt()
            }],
            "scroll-pr": [{
                "scroll-pr": Rt()
            }],
            "scroll-pb": [{
                "scroll-pb": Rt()
            }],
            "scroll-pl": [{
                "scroll-pl": Rt()
            }],
            "snap-align": [{
                snap: ["start", "end", "center", "align-none"]
            }],
            "snap-stop": [{
                snap: ["normal", "always"]
            }],
            "snap-type": [{
                snap: ["none", "x", "y", "both"]
            }],
            "snap-strictness": [{
                snap: ["mandatory", "proximity"]
            }],
            touch: [{
                touch: ["auto", "none", "manipulation"]
            }],
            "touch-x": [{
                "touch-pan": ["x", "left", "right"]
            }],
            "touch-y": [{
                "touch-pan": ["y", "up", "down"]
            }],
            "touch-pz": ["touch-pinch-zoom"],
            select: [{
                select: ["none", "text", "all", "auto"]
            }],
            "will-change": [{
                "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
            }],
            fill: [{
                fill: [s, "none"]
            }],
            "stroke-w": [{
                stroke: [isLength, isArbitraryLength, isArbitraryNumber]
            }],
            stroke: [{
                stroke: [s, "none"]
            }],
            sr: ["sr-only", "not-sr-only"],
            "forced-color-adjust": [{
                "forced-color-adjust": ["auto", "none"]
            }]
        },
        conflictingClassGroups: {
            overflow: ["overflow-x", "overflow-y"],
            overscroll: ["overscroll-x", "overscroll-y"],
            inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
            "inset-x": ["right", "left"],
            "inset-y": ["top", "bottom"],
            flex: ["basis", "grow", "shrink"],
            gap: ["gap-x", "gap-y"],
            p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
            px: ["pr", "pl"],
            py: ["pt", "pb"],
            m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
            mx: ["mr", "ml"],
            my: ["mt", "mb"],
            size: ["w", "h"],
            "font-size": ["leading"],
            "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
            "fvn-ordinal": ["fvn-normal"],
            "fvn-slashed-zero": ["fvn-normal"],
            "fvn-figure": ["fvn-normal"],
            "fvn-spacing": ["fvn-normal"],
            "fvn-fraction": ["fvn-normal"],
            "line-clamp": ["display", "overflow"],
            rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
            "rounded-s": ["rounded-ss", "rounded-es"],
            "rounded-e": ["rounded-se", "rounded-ee"],
            "rounded-t": ["rounded-tl", "rounded-tr"],
            "rounded-r": ["rounded-tr", "rounded-br"],
            "rounded-b": ["rounded-br", "rounded-bl"],
            "rounded-l": ["rounded-tl", "rounded-bl"],
            "border-spacing": ["border-spacing-x", "border-spacing-y"],
            "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
            "border-w-x": ["border-w-r", "border-w-l"],
            "border-w-y": ["border-w-t", "border-w-b"],
            "border-color": ["border-color-s", "border-color-e", "border-color-t", "border-color-r", "border-color-b", "border-color-l"],
            "border-color-x": ["border-color-r", "border-color-l"],
            "border-color-y": ["border-color-t", "border-color-b"],
            "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
            "scroll-mx": ["scroll-mr", "scroll-ml"],
            "scroll-my": ["scroll-mt", "scroll-mb"],
            "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
            "scroll-px": ["scroll-pr", "scroll-pl"],
            "scroll-py": ["scroll-pt", "scroll-pb"],
            touch: ["touch-x", "touch-y", "touch-pz"],
            "touch-x": ["touch"],
            "touch-y": ["touch"],
            "touch-pz": ["touch"]
        },
        conflictingClassGroupModifiers: {
            "font-size": ["leading"]
        }
    }
}
  , twMerge = createTailwindMerge(getDefaultConfig);
function cn(...s) {
    return twMerge(clsx(s))
}
function calculateProfileCompletion(s, e=[]) {
    if (!s)
        return 0;
    const i = [{
        key: "full_name",
        weight: 15
    }, {
        key: "location",
        weight: 10
    }, {
        key: "phone",
        weight: 10
    }, {
        key: "bio",
        weight: 20
    }, {
        key: "skills",
        weight: 15
    }, {
        key: "college",
        weight: 10
    }, {
        key: "linkedin",
        weight: 5
    }, {
        key: "github",
        weight: 5
    }, {
        key: "website",
        weight: 5
    }, {
        key: "resume_url",
        weight: 15
    }];
    let o = 0;
    const a = i.reduce( (d, h) => d + h.weight, 0);
    i.forEach(d => {
        const h = s[d.key];
        h && (Array.isArray(h) && h.length > 0 || typeof h == "string" && h.trim().length > 0 || typeof h == "boolean" || typeof h == "number") && (o += d.weight)
    }
    ),
    e && e.length > 0 && (o += 10);
    const c = Math.round(o / (a + 10) * 100);
    return !s.resume_url && c >= 80 ? 80 : c
}
function checkEmailPermission(s, e=[], i=85) {
    const o = calculateProfileCompletion(s, e)
      , a = o >= i
      , c = [];
    return s ? ([{
        key: "full_name",
        label: "Full Name"
    }, {
        key: "bio",
        label: "Bio/Summary"
    }, {
        key: "skills",
        label: "Skills"
    }, {
        key: "resume_url",
        label: "Resume"
    }, {
        key: "location",
        label: "Location"
    }, {
        key: "phone",
        label: "Phone Number"
    }].forEach(h => {
        const g = s[h.key];
        (!g || Array.isArray(g) && g.length === 0 || typeof g == "string" && g.trim().length === 0) && c.push(h.label)
    }
    ),
    (!e || e.length === 0) && c.push("Work Experience"),
    {
        canSendEmail: a,
        completionPercentage: o,
        missingFields: c
    }) : (c.push("profile"),
    {
        canSendEmail: !1,
        completionPercentage: 0,
        missingFields: c
    })
}
function checkJobApplicationPermission(s, e=[], i=85) {
    const o = calculateProfileCompletion(s, e)
      , a = o >= i
      , c = [];
    return s ? ([{
        key: "full_name",
        label: "Full Name"
    }, {
        key: "bio",
        label: "Bio/Summary"
    }, {
        key: "skills",
        label: "Skills"
    }, {
        key: "resume_url",
        label: "Resume"
    }, {
        key: "location",
        label: "Location"
    }, {
        key: "phone",
        label: "Phone Number"
    }].forEach(h => {
        const g = s[h.key];
        (!g || Array.isArray(g) && g.length === 0 || typeof g == "string" && g.trim().length === 0) && c.push(h.label)
    }
    ),
    (!e || e.length === 0) && c.push("Work Experience"),
    {
        canApply: a,
        completionPercentage: o,
        missingFields: c
    }) : (c.push("profile"),
    {
        canApply: !1,
        completionPercentage: 0,
        missingFields: c
    })
}
function isNewUser(s) {
    if (!s)
        return !1;
    const e = new Date(s.created_at);
    return (new Date().getTime() - e.getTime()) / (1e3 * 60) <= 5
}
const ToastProvider = Provider$1
  , ToastViewport = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Viewport$2, {
    ref: i,
    className: cn("fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]", s),
    ...e
}));
ToastViewport.displayName = Viewport$2.displayName;
const toastVariants = cva("group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full", {
    variants: {
        variant: {
            default: "border bg-background text-foreground",
            destructive: "destructive group border-destructive bg-destructive text-destructive-foreground"
        }
    },
    defaultVariants: {
        variant: "default"
    }
})
  , Toast = reactExports.forwardRef( ({className: s, variant: e, ...i}, o) => jsxRuntimeExports.jsx(Root2$4, {
    ref: o,
    className: cn(toastVariants({
        variant: e
    }), s),
    ...i
}));
Toast.displayName = Root2$4.displayName;
const ToastAction = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Action$1, {
    ref: i,
    className: cn("inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive", s),
    ...e
}));
ToastAction.displayName = Action$1.displayName;
const ToastClose = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Close$1, {
    ref: i,
    className: cn("absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600", s),
    "toast-close": "",
    ...e,
    children: jsxRuntimeExports.jsx(X, {
        className: "h-4 w-4"
    })
}));
ToastClose.displayName = Close$1.displayName;
const ToastTitle = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Title$1, {
    ref: i,
    className: cn("text-sm font-semibold", s),
    ...e
}));
ToastTitle.displayName = Title$1.displayName;
const ToastDescription = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Description$1, {
    ref: i,
    className: cn("text-sm opacity-90", s),
    ...e
}));
ToastDescription.displayName = Description$1.displayName;
function Toaster$1() {
    const {toasts: s} = useToast();
    return jsxRuntimeExports.jsxs(ToastProvider, {
        children: [s.map(function({id: e, title: i, description: o, action: a, ...c}) {
            return jsxRuntimeExports.jsxs(Toast, {
                ...c,
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "grid gap-1",
                    children: [i && jsxRuntimeExports.jsx(ToastTitle, {
                        children: i
                    }), o && jsxRuntimeExports.jsx(ToastDescription, {
                        children: o
                    })]
                }), a, jsxRuntimeExports.jsx(ToastClose, {})]
            }, e)
        }), jsxRuntimeExports.jsx(ToastViewport, {})]
    })
}
var P = ["light", "dark"]
  , E = "(prefers-color-scheme: dark)"
  , L = reactExports.createContext(void 0)
  , D = {
    setTheme: s => {}
    ,
    themes: []
}
  , j = () => {
    var s;
    return (s = reactExports.useContext(L)) != null ? s : D
}
;
reactExports.memo( ({forcedTheme: s, storageKey: e, attribute: i, enableSystem: o, enableColorScheme: a, defaultTheme: c, value: d, attrs: h, nonce: g}) => {
    let b = c === "system"
      , _ = i === "class" ? `var d=document.documentElement,c=d.classList;${`c.remove(${h.map(rt => `'${rt}'`).join(",")})`};` : `var d=document.documentElement,n='${i}',s='setAttribute';`
      , $ = a ? P.includes(c) && c ? `if(e==='light'||e==='dark'||!e)d.style.colorScheme=e||'${c}'` : "if(e==='light'||e==='dark')d.style.colorScheme=e" : ""
      , _e = (rt, et=!1, it=!0) => {
        let st = d ? d[rt] : rt
          , nt = et ? rt + "|| ''" : `'${st}'`
          , lt = "";
        return a && it && !et && P.includes(rt) && (lt += `d.style.colorScheme = '${rt}';`),
        i === "class" ? et || st ? lt += `c.add(${nt})` : lt += "null" : st && (lt += `d[s](n,${nt})`),
        lt
    }
      , tt = s ? `!function(){${_}${_e(s)}}()` : o ? `!function(){try{${_}var e=localStorage.getItem('${e}');if('system'===e||(!e&&${b})){var t='${E}',m=window.matchMedia(t);if(m.media!==t||m.matches){${_e("dark")}}else{${_e("light")}}}else if(e){${d ? `var x=${JSON.stringify(d)};` : ""}${_e(d ? "x[e]" : "e", !0)}}${b ? "" : "else{" + _e(c, !1, !1) + "}"}${$}}catch(e){}}()` : `!function(){try{${_}var e=localStorage.getItem('${e}');if(e){${d ? `var x=${JSON.stringify(d)};` : ""}${_e(d ? "x[e]" : "e", !0)}}else{${_e(c, !1, !1)};}${$}}catch(t){}}();`;
    return reactExports.createElement("script", {
        nonce: g,
        dangerouslySetInnerHTML: {
            __html: tt
        }
    })
}
);
var Ct = s => {
    switch (s) {
    case "success":
        return $t;
    case "info":
        return _t;
    case "warning":
        return Wt;
    case "error":
        return Ut;
    default:
        return null
    }
}
  , Ft = Array(12).fill(0)
  , It = ({visible: s}) => React.createElement("div", {
    className: "sonner-loading-wrapper",
    "data-visible": s
}, React.createElement("div", {
    className: "sonner-spinner"
}, Ft.map( (e, i) => React.createElement("div", {
    className: "sonner-loading-bar",
    key: `spinner-bar-${i}`
}))))
  , $t = React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 20 20",
    fill: "currentColor",
    height: "20",
    width: "20"
}, React.createElement("path", {
    fillRule: "evenodd",
    d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z",
    clipRule: "evenodd"
}))
  , Wt = React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "currentColor",
    height: "20",
    width: "20"
}, React.createElement("path", {
    fillRule: "evenodd",
    d: "M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z",
    clipRule: "evenodd"
}))
  , _t = React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 20 20",
    fill: "currentColor",
    height: "20",
    width: "20"
}, React.createElement("path", {
    fillRule: "evenodd",
    d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z",
    clipRule: "evenodd"
}))
  , Ut = React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 20 20",
    fill: "currentColor",
    height: "20",
    width: "20"
}, React.createElement("path", {
    fillRule: "evenodd",
    d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z",
    clipRule: "evenodd"
}))
  , Dt = () => {
    let[s,e] = React.useState(document.hidden);
    return React.useEffect( () => {
        let i = () => {
            e(document.hidden)
        }
        ;
        return document.addEventListener("visibilitychange", i),
        () => window.removeEventListener("visibilitychange", i)
    }
    , []),
    s
}
  , ct = 1
  , ut = class {
    constructor() {
        this.subscribe = s => (this.subscribers.push(s),
        () => {
            let e = this.subscribers.indexOf(s);
            this.subscribers.splice(e, 1)
        }
        ),
        this.publish = s => {
            this.subscribers.forEach(e => e(s))
        }
        ,
        this.addToast = s => {
            this.publish(s),
            this.toasts = [...this.toasts, s]
        }
        ,
        this.create = s => {
            var e;
            let {message: i, ...o} = s
              , a = typeof (s == null ? void 0 : s.id) == "number" || ((e = s.id) == null ? void 0 : e.length) > 0 ? s.id : ct++
              , c = this.toasts.find(h => h.id === a)
              , d = s.dismissible === void 0 ? !0 : s.dismissible;
            return c ? this.toasts = this.toasts.map(h => h.id === a ? (this.publish({
                ...h,
                ...s,
                id: a,
                title: i
            }),
            {
                ...h,
                ...s,
                id: a,
                dismissible: d,
                title: i
            }) : h) : this.addToast({
                title: i,
                ...o,
                dismissible: d,
                id: a
            }),
            a
        }
        ,
        this.dismiss = s => (s || this.toasts.forEach(e => {
            this.subscribers.forEach(i => i({
                id: e.id,
                dismiss: !0
            }))
        }
        ),
        this.subscribers.forEach(e => e({
            id: s,
            dismiss: !0
        })),
        s),
        this.message = (s, e) => this.create({
            ...e,
            message: s
        }),
        this.error = (s, e) => this.create({
            ...e,
            message: s,
            type: "error"
        }),
        this.success = (s, e) => this.create({
            ...e,
            type: "success",
            message: s
        }),
        this.info = (s, e) => this.create({
            ...e,
            type: "info",
            message: s
        }),
        this.warning = (s, e) => this.create({
            ...e,
            type: "warning",
            message: s
        }),
        this.loading = (s, e) => this.create({
            ...e,
            type: "loading",
            message: s
        }),
        this.promise = (s, e) => {
            if (!e)
                return;
            let i;
            e.loading !== void 0 && (i = this.create({
                ...e,
                promise: s,
                type: "loading",
                message: e.loading,
                description: typeof e.description != "function" ? e.description : void 0
            }));
            let o = s instanceof Promise ? s : s()
              , a = i !== void 0;
            return o.then(async c => {
                if (Ot(c) && !c.ok) {
                    a = !1;
                    let d = typeof e.error == "function" ? await e.error(`HTTP error! status: ${c.status}`) : e.error
                      , h = typeof e.description == "function" ? await e.description(`HTTP error! status: ${c.status}`) : e.description;
                    this.create({
                        id: i,
                        type: "error",
                        message: d,
                        description: h
                    })
                } else if (e.success !== void 0) {
                    a = !1;
                    let d = typeof e.success == "function" ? await e.success(c) : e.success
                      , h = typeof e.description == "function" ? await e.description(c) : e.description;
                    this.create({
                        id: i,
                        type: "success",
                        message: d,
                        description: h
                    })
                }
            }
            ).catch(async c => {
                if (e.error !== void 0) {
                    a = !1;
                    let d = typeof e.error == "function" ? await e.error(c) : e.error
                      , h = typeof e.description == "function" ? await e.description(c) : e.description;
                    this.create({
                        id: i,
                        type: "error",
                        message: d,
                        description: h
                    })
                }
            }
            ).finally( () => {
                var c;
                a && (this.dismiss(i),
                i = void 0),
                (c = e.finally) == null || c.call(e)
            }
            ),
            i
        }
        ,
        this.custom = (s, e) => {
            let i = (e == null ? void 0 : e.id) || ct++;
            return this.create({
                jsx: s(i),
                id: i,
                ...e
            }),
            i
        }
        ,
        this.subscribers = [],
        this.toasts = []
    }
}
  , v = new ut
  , Vt = (s, e) => {
    let i = (e == null ? void 0 : e.id) || ct++;
    return v.addToast({
        title: s,
        ...e,
        id: i
    }),
    i
}
  , Ot = s => s && typeof s == "object" && "ok"in s && typeof s.ok == "boolean" && "status"in s && typeof s.status == "number"
  , Kt = Vt
  , Xt = () => v.toasts
  , Jt = Object.assign(Kt, {
    success: v.success,
    info: v.info,
    warning: v.warning,
    error: v.error,
    custom: v.custom,
    message: v.message,
    promise: v.promise,
    dismiss: v.dismiss,
    loading: v.loading
}, {
    getHistory: Xt
});
function ft(s, {insertAt: e}={}) {
    if (typeof document > "u")
        return;
    let i = document.head || document.getElementsByTagName("head")[0]
      , o = document.createElement("style");
    o.type = "text/css",
    e === "top" && i.firstChild ? i.insertBefore(o, i.firstChild) : i.appendChild(o),
    o.styleSheet ? o.styleSheet.cssText = s : o.appendChild(document.createTextNode(s))
}
ft(`:where(html[dir="ltr"]),:where([data-sonner-toaster][dir="ltr"]){--toast-icon-margin-start: -3px;--toast-icon-margin-end: 4px;--toast-svg-margin-start: -1px;--toast-svg-margin-end: 0px;--toast-button-margin-start: auto;--toast-button-margin-end: 0;--toast-close-button-start: 0;--toast-close-button-end: unset;--toast-close-button-transform: translate(-35%, -35%)}:where(html[dir="rtl"]),:where([data-sonner-toaster][dir="rtl"]){--toast-icon-margin-start: 4px;--toast-icon-margin-end: -3px;--toast-svg-margin-start: 0px;--toast-svg-margin-end: -1px;--toast-button-margin-start: 0;--toast-button-margin-end: auto;--toast-close-button-start: unset;--toast-close-button-end: 0;--toast-close-button-transform: translate(35%, -35%)}:where([data-sonner-toaster]){position:fixed;width:var(--width);font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;--gray1: hsl(0, 0%, 99%);--gray2: hsl(0, 0%, 97.3%);--gray3: hsl(0, 0%, 95.1%);--gray4: hsl(0, 0%, 93%);--gray5: hsl(0, 0%, 90.9%);--gray6: hsl(0, 0%, 88.7%);--gray7: hsl(0, 0%, 85.8%);--gray8: hsl(0, 0%, 78%);--gray9: hsl(0, 0%, 56.1%);--gray10: hsl(0, 0%, 52.3%);--gray11: hsl(0, 0%, 43.5%);--gray12: hsl(0, 0%, 9%);--border-radius: 8px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:none;z-index:999999999}:where([data-sonner-toaster][data-x-position="right"]){right:max(var(--offset),env(safe-area-inset-right))}:where([data-sonner-toaster][data-x-position="left"]){left:max(var(--offset),env(safe-area-inset-left))}:where([data-sonner-toaster][data-x-position="center"]){left:50%;transform:translate(-50%)}:where([data-sonner-toaster][data-y-position="top"]){top:max(var(--offset),env(safe-area-inset-top))}:where([data-sonner-toaster][data-y-position="bottom"]){bottom:max(var(--offset),env(safe-area-inset-bottom))}:where([data-sonner-toast]){--y: translateY(100%);--lift-amount: calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);filter:blur(0);touch-action:none;transition:transform .4s,opacity .4s,height .4s,box-shadow .2s;box-sizing:border-box;outline:none;overflow-wrap:anywhere}:where([data-sonner-toast][data-styled="true"]){padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0 4px 12px #0000001a;width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}:where([data-sonner-toast]:focus-visible){box-shadow:0 4px 12px #0000001a,0 0 0 2px #0003}:where([data-sonner-toast][data-y-position="top"]){top:0;--y: translateY(-100%);--lift: 1;--lift-amount: calc(1 * var(--gap))}:where([data-sonner-toast][data-y-position="bottom"]){bottom:0;--y: translateY(100%);--lift: -1;--lift-amount: calc(var(--lift) * var(--gap))}:where([data-sonner-toast]) :where([data-description]){font-weight:400;line-height:1.4;color:inherit}:where([data-sonner-toast]) :where([data-title]){font-weight:500;line-height:1.5;color:inherit}:where([data-sonner-toast]) :where([data-icon]){display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:var(--toast-icon-margin-start);margin-right:var(--toast-icon-margin-end)}:where([data-sonner-toast][data-promise="true"]) :where([data-icon])>svg{opacity:0;transform:scale(.8);transform-origin:center;animation:sonner-fade-in .3s ease forwards}:where([data-sonner-toast]) :where([data-icon])>*{flex-shrink:0}:where([data-sonner-toast]) :where([data-icon]) svg{margin-left:var(--toast-svg-margin-start);margin-right:var(--toast-svg-margin-end)}:where([data-sonner-toast]) :where([data-content]){display:flex;flex-direction:column;gap:2px}[data-sonner-toast][data-styled=true] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end);border:none;cursor:pointer;outline:none;display:flex;align-items:center;flex-shrink:0;transition:opacity .4s,box-shadow .2s}:where([data-sonner-toast]) :where([data-button]):focus-visible{box-shadow:0 0 0 2px #0006}:where([data-sonner-toast]) :where([data-button]):first-of-type{margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end)}:where([data-sonner-toast]) :where([data-cancel]){color:var(--normal-text);background:rgba(0,0,0,.08)}:where([data-sonner-toast][data-theme="dark"]) :where([data-cancel]){background:rgba(255,255,255,.3)}:where([data-sonner-toast]) :where([data-close-button]){position:absolute;left:var(--toast-close-button-start);right:var(--toast-close-button-end);top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;background:var(--gray1);color:var(--gray12);border:1px solid var(--gray4);transform:var(--toast-close-button-transform);border-radius:50%;cursor:pointer;z-index:1;transition:opacity .1s,background .2s,border-color .2s}:where([data-sonner-toast]) :where([data-close-button]):focus-visible{box-shadow:0 4px 12px #0000001a,0 0 0 2px #0003}:where([data-sonner-toast]) :where([data-disabled="true"]){cursor:not-allowed}:where([data-sonner-toast]):hover :where([data-close-button]):hover{background:var(--gray2);border-color:var(--gray5)}:where([data-sonner-toast][data-swiping="true"]):before{content:"";position:absolute;left:0;right:0;height:100%;z-index:-1}:where([data-sonner-toast][data-y-position="top"][data-swiping="true"]):before{bottom:50%;transform:scaleY(3) translateY(50%)}:where([data-sonner-toast][data-y-position="bottom"][data-swiping="true"]):before{top:50%;transform:scaleY(3) translateY(-50%)}:where([data-sonner-toast][data-swiping="false"][data-removed="true"]):before{content:"";position:absolute;inset:0;transform:scaleY(2)}:where([data-sonner-toast]):after{content:"";position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}:where([data-sonner-toast][data-mounted="true"]){--y: translateY(0);opacity:1}:where([data-sonner-toast][data-expanded="false"][data-front="false"]){--scale: var(--toasts-before) * .05 + 1;--y: translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}:where([data-sonner-toast])>*{transition:opacity .4s}:where([data-sonner-toast][data-expanded="false"][data-front="false"][data-styled="true"])>*{opacity:0}:where([data-sonner-toast][data-visible="false"]){opacity:0;pointer-events:none}:where([data-sonner-toast][data-mounted="true"][data-expanded="true"]){--y: translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}:where([data-sonner-toast][data-removed="true"][data-front="true"][data-swipe-out="false"]){--y: translateY(calc(var(--lift) * -100%));opacity:0}:where([data-sonner-toast][data-removed="true"][data-front="false"][data-swipe-out="false"][data-expanded="true"]){--y: translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));opacity:0}:where([data-sonner-toast][data-removed="true"][data-front="false"][data-swipe-out="false"][data-expanded="false"]){--y: translateY(40%);opacity:0;transition:transform .5s,opacity .2s}:where([data-sonner-toast][data-removed="true"][data-front="false"]):before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping=true]{transform:var(--y) translateY(var(--swipe-amount, 0px));transition:none}[data-sonner-toast][data-swipe-out=true][data-y-position=bottom],[data-sonner-toast][data-swipe-out=true][data-y-position=top]{animation:swipe-out .2s ease-out forwards}@keyframes swipe-out{0%{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount)));opacity:1}to{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount) + var(--lift) * -100%));opacity:0}}@media (max-width: 600px){[data-sonner-toaster]{position:fixed;--mobile-offset: 16px;right:var(--mobile-offset);left:var(--mobile-offset);width:100%}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - var(--mobile-offset) * 2)}[data-sonner-toaster][data-x-position=left]{left:var(--mobile-offset)}[data-sonner-toaster][data-y-position=bottom]{bottom:20px}[data-sonner-toaster][data-y-position=top]{top:20px}[data-sonner-toaster][data-x-position=center]{left:var(--mobile-offset);right:var(--mobile-offset);transform:none}}[data-sonner-toaster][data-theme=light]{--normal-bg: #fff;--normal-border: var(--gray4);--normal-text: var(--gray12);--success-bg: hsl(143, 85%, 96%);--success-border: hsl(145, 92%, 91%);--success-text: hsl(140, 100%, 27%);--info-bg: hsl(208, 100%, 97%);--info-border: hsl(221, 91%, 91%);--info-text: hsl(210, 92%, 45%);--warning-bg: hsl(49, 100%, 97%);--warning-border: hsl(49, 91%, 91%);--warning-text: hsl(31, 92%, 45%);--error-bg: hsl(359, 100%, 97%);--error-border: hsl(359, 100%, 94%);--error-text: hsl(360, 100%, 45%)}[data-sonner-toaster][data-theme=light] [data-sonner-toast][data-invert=true]{--normal-bg: #000;--normal-border: hsl(0, 0%, 20%);--normal-text: var(--gray1)}[data-sonner-toaster][data-theme=dark] [data-sonner-toast][data-invert=true]{--normal-bg: #fff;--normal-border: var(--gray3);--normal-text: var(--gray12)}[data-sonner-toaster][data-theme=dark]{--normal-bg: #000;--normal-border: hsl(0, 0%, 20%);--normal-text: var(--gray1);--success-bg: hsl(150, 100%, 6%);--success-border: hsl(147, 100%, 12%);--success-text: hsl(150, 86%, 65%);--info-bg: hsl(215, 100%, 6%);--info-border: hsl(223, 100%, 12%);--info-text: hsl(216, 87%, 65%);--warning-bg: hsl(64, 100%, 6%);--warning-border: hsl(60, 100%, 12%);--warning-text: hsl(46, 87%, 65%);--error-bg: hsl(358, 76%, 10%);--error-border: hsl(357, 89%, 16%);--error-text: hsl(358, 100%, 81%)}[data-rich-colors=true][data-sonner-toast][data-type=success],[data-rich-colors=true][data-sonner-toast][data-type=success] [data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=info],[data-rich-colors=true][data-sonner-toast][data-type=info] [data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning],[data-rich-colors=true][data-sonner-toast][data-type=warning] [data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=error],[data-rich-colors=true][data-sonner-toast][data-type=error] [data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}.sonner-loading-wrapper{--size: 16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible=false]{transform-origin:center;animation:sonner-fade-out .2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:nth-child(1){animation-delay:-1.2s;transform:rotate(.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(.8)}to{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}to{opacity:0;transform:scale(.8)}}@keyframes sonner-spin{0%{opacity:1}to{opacity:.15}}@media (prefers-reduced-motion){[data-sonner-toast],[data-sonner-toast]>*,.sonner-loading-bar{transition:none!important;animation:none!important}}.sonner-loader{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);transform-origin:center;transition:opacity .2s,transform .2s}.sonner-loader[data-visible=false]{opacity:0;transform:scale(.8) translate(-50%,-50%)}
`);
function U(s) {
    return s.label !== void 0
}
var qt = 3
  , Qt = "32px"
  , Zt = 4e3
  , te = 356
  , ee = 14
  , oe = 20
  , ae = 200;
function ne(...s) {
    return s.filter(Boolean).join(" ")
}
var se = s => {
    var e, i, o, a, c, d, h, g, b, _;
    let {invert: $, toast: _e, unstyled: tt, interacting: rt, setHeights: et, visibleToasts: it, heights: st, index: nt, toasts: lt, expanded: dt, removeToast: ot, defaultRichColors: at, closeButton: ht, style: pt, cancelButtonStyle: gt, actionButtonStyle: wt, className: yt="", descriptionClassName: Rt="", duration: Mt, position: ss, gap: zt, loadingIcon: At, expandByDefault: kt, classNames: vt, icons: bt, closeButtonAriaLabel: Tt="Close toast", pauseWhenPageIsHidden: Yt, cn: Nt} = s
      , [jt,xt] = React.useState(!1)
      , [Et,Pt] = React.useState(!1)
      , [St,Bt] = React.useState(!1)
      , [os,ds] = React.useState(!1)
      , [js,ys] = React.useState(0)
      , [vs,Ss] = React.useState(0)
      , _s = React.useRef(null)
      , ns = React.useRef(null)
      , xs = nt === 0
      , Lt = nt + 1 <= it
      , ts = _e.type
      , ms = _e.dismissible !== !1
      , hs = _e.className || ""
      , bs = _e.descriptionClassName || ""
      , ks = React.useMemo( () => st.findIndex(as => as.toastId === _e.id) || 0, [st, _e.id])
      , Ts = React.useMemo( () => {
        var as;
        return (as = _e.closeButton) != null ? as : ht
    }
    , [_e.closeButton, ht])
      , ls = React.useMemo( () => _e.duration || Mt || Zt, [_e.duration, Mt])
      , Ds = React.useRef(0)
      , Ms = React.useRef(0)
      , Hs = React.useRef(0)
      , Vs = React.useRef(null)
      , [Xs,$s] = ss.split("-")
      , zs = React.useMemo( () => st.reduce( (as, Ps, gs) => gs >= ks ? as : as + Ps.height, 0), [st, ks])
      , Zs = Dt()
      , sr = _e.invert || $
      , As = ts === "loading";
    Ms.current = React.useMemo( () => ks * zt + zs, [ks, zs]),
    React.useEffect( () => {
        xt(!0)
    }
    , []),
    React.useLayoutEffect( () => {
        if (!jt)
            return;
        let as = ns.current
          , Ps = as.style.height;
        as.style.height = "auto";
        let gs = as.getBoundingClientRect().height;
        as.style.height = Ps,
        Ss(gs),
        et(es => es.find(ws => ws.toastId === _e.id) ? es.map(ws => ws.toastId === _e.id ? {
            ...ws,
            height: gs
        } : ws) : [{
            toastId: _e.id,
            height: gs,
            position: _e.position
        }, ...es])
    }
    , [jt, _e.title, _e.description, et, _e.id]);
    let Es = React.useCallback( () => {
        Pt(!0),
        ys(Ms.current),
        et(as => as.filter(Ps => Ps.toastId !== _e.id)),
        setTimeout( () => {
            ot(_e)
        }
        , ae)
    }
    , [_e, ot, et, Ms]);
    React.useEffect( () => {
        if (_e.promise && ts === "loading" || _e.duration === 1 / 0 || _e.type === "loading")
            return;
        let as, Ps = ls;
        return dt || rt || Yt && Zs ? ( () => {
            if (Hs.current < Ds.current) {
                let gs = new Date().getTime() - Ds.current;
                Ps = Ps - gs
            }
            Hs.current = new Date().getTime()
        }
        )() : Ps !== 1 / 0 && (Ds.current = new Date().getTime(),
        as = setTimeout( () => {
            var gs;
            (gs = _e.onAutoClose) == null || gs.call(_e, _e),
            Es()
        }
        , Ps)),
        () => clearTimeout(as)
    }
    , [dt, rt, kt, _e, ls, Es, _e.promise, ts, Yt, Zs]),
    React.useEffect( () => {
        let as = ns.current;
        if (as) {
            let Ps = as.getBoundingClientRect().height;
            return Ss(Ps),
            et(gs => [{
                toastId: _e.id,
                height: Ps,
                position: _e.position
            }, ...gs]),
            () => et(gs => gs.filter(es => es.toastId !== _e.id))
        }
    }
    , [et, _e.id]),
    React.useEffect( () => {
        _e.delete && Es()
    }
    , [Es, _e.delete]);
    function Rs() {
        return bt != null && bt.loading ? React.createElement("div", {
            className: "sonner-loader",
            "data-visible": ts === "loading"
        }, bt.loading) : At ? React.createElement("div", {
            className: "sonner-loader",
            "data-visible": ts === "loading"
        }, At) : React.createElement(It, {
            visible: ts === "loading"
        })
    }
    return React.createElement("li", {
        "aria-live": _e.important ? "assertive" : "polite",
        "aria-atomic": "true",
        role: "status",
        tabIndex: 0,
        ref: ns,
        className: Nt(yt, hs, vt == null ? void 0 : vt.toast, (e = _e == null ? void 0 : _e.classNames) == null ? void 0 : e.toast, vt == null ? void 0 : vt.default, vt == null ? void 0 : vt[ts], (i = _e == null ? void 0 : _e.classNames) == null ? void 0 : i[ts]),
        "data-sonner-toast": "",
        "data-rich-colors": (o = _e.richColors) != null ? o : at,
        "data-styled": !(_e.jsx || _e.unstyled || tt),
        "data-mounted": jt,
        "data-promise": !!_e.promise,
        "data-removed": Et,
        "data-visible": Lt,
        "data-y-position": Xs,
        "data-x-position": $s,
        "data-index": nt,
        "data-front": xs,
        "data-swiping": St,
        "data-dismissible": ms,
        "data-type": ts,
        "data-invert": sr,
        "data-swipe-out": os,
        "data-expanded": !!(dt || kt && jt),
        style: {
            "--index": nt,
            "--toasts-before": nt,
            "--z-index": lt.length - nt,
            "--offset": `${Et ? js : Ms.current}px`,
            "--initial-height": kt ? "auto" : `${vs}px`,
            ...pt,
            ..._e.style
        },
        onPointerDown: as => {
            As || !ms || (_s.current = new Date,
            ys(Ms.current),
            as.target.setPointerCapture(as.pointerId),
            as.target.tagName !== "BUTTON" && (Bt(!0),
            Vs.current = {
                x: as.clientX,
                y: as.clientY
            }))
        }
        ,
        onPointerUp: () => {
            var as, Ps, gs, es;
            if (os || !ms)
                return;
            Vs.current = null;
            let ws = Number(((as = ns.current) == null ? void 0 : as.style.getPropertyValue("--swipe-amount").replace("px", "")) || 0)
              , Is = new Date().getTime() - ((Ps = _s.current) == null ? void 0 : Ps.getTime())
              , Fs = Math.abs(ws) / Is;
            if (Math.abs(ws) >= oe || Fs > .11) {
                ys(Ms.current),
                (gs = _e.onDismiss) == null || gs.call(_e, _e),
                Es(),
                ds(!0);
                return
            }
            (es = ns.current) == null || es.style.setProperty("--swipe-amount", "0px"),
            Bt(!1)
        }
        ,
        onPointerMove: as => {
            var Ps;
            if (!Vs.current || !ms)
                return;
            let gs = as.clientY - Vs.current.y
              , es = as.clientX - Vs.current.x
              , ws = (Xs === "top" ? Math.min : Math.max)(0, gs)
              , Is = as.pointerType === "touch" ? 10 : 2;
            Math.abs(ws) > Is ? (Ps = ns.current) == null || Ps.style.setProperty("--swipe-amount", `${gs}px`) : Math.abs(es) > Is && (Vs.current = null)
        }
    }, Ts && !_e.jsx ? React.createElement("button", {
        "aria-label": Tt,
        "data-disabled": As,
        "data-close-button": !0,
        onClick: As || !ms ? () => {}
        : () => {
            var as;
            Es(),
            (as = _e.onDismiss) == null || as.call(_e, _e)
        }
        ,
        className: Nt(vt == null ? void 0 : vt.closeButton, (a = _e == null ? void 0 : _e.classNames) == null ? void 0 : a.closeButton)
    }, React.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        width: "12",
        height: "12",
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, React.createElement("line", {
        x1: "18",
        y1: "6",
        x2: "6",
        y2: "18"
    }), React.createElement("line", {
        x1: "6",
        y1: "6",
        x2: "18",
        y2: "18"
    }))) : null, _e.jsx || React.isValidElement(_e.title) ? _e.jsx || _e.title : React.createElement(React.Fragment, null, ts || _e.icon || _e.promise ? React.createElement("div", {
        "data-icon": "",
        className: Nt(vt == null ? void 0 : vt.icon, (c = _e == null ? void 0 : _e.classNames) == null ? void 0 : c.icon)
    }, _e.promise || _e.type === "loading" && !_e.icon ? _e.icon || Rs() : null, _e.type !== "loading" ? _e.icon || (bt == null ? void 0 : bt[ts]) || Ct(ts) : null) : null, React.createElement("div", {
        "data-content": "",
        className: Nt(vt == null ? void 0 : vt.content, (d = _e == null ? void 0 : _e.classNames) == null ? void 0 : d.content)
    }, React.createElement("div", {
        "data-title": "",
        className: Nt(vt == null ? void 0 : vt.title, (h = _e == null ? void 0 : _e.classNames) == null ? void 0 : h.title)
    }, _e.title), _e.description ? React.createElement("div", {
        "data-description": "",
        className: Nt(Rt, bs, vt == null ? void 0 : vt.description, (g = _e == null ? void 0 : _e.classNames) == null ? void 0 : g.description)
    }, _e.description) : null), React.isValidElement(_e.cancel) ? _e.cancel : _e.cancel && U(_e.cancel) ? React.createElement("button", {
        "data-button": !0,
        "data-cancel": !0,
        style: _e.cancelButtonStyle || gt,
        onClick: as => {
            var Ps, gs;
            U(_e.cancel) && ms && ((gs = (Ps = _e.cancel).onClick) == null || gs.call(Ps, as),
            Es())
        }
        ,
        className: Nt(vt == null ? void 0 : vt.cancelButton, (b = _e == null ? void 0 : _e.classNames) == null ? void 0 : b.cancelButton)
    }, _e.cancel.label) : null, React.isValidElement(_e.action) ? _e.action : _e.action && U(_e.action) ? React.createElement("button", {
        "data-button": !0,
        "data-action": !0,
        style: _e.actionButtonStyle || wt,
        onClick: as => {
            var Ps, gs;
            U(_e.action) && (as.defaultPrevented || ((gs = (Ps = _e.action).onClick) == null || gs.call(Ps, as),
            Es()))
        }
        ,
        className: Nt(vt == null ? void 0 : vt.actionButton, (_ = _e == null ? void 0 : _e.classNames) == null ? void 0 : _.actionButton)
    }, _e.action.label) : null))
}
;
function Ht() {
    if (typeof window > "u" || typeof document > "u")
        return "ltr";
    let s = document.documentElement.getAttribute("dir");
    return s === "auto" || !s ? window.getComputedStyle(document.documentElement).direction : s
}
var Te = s => {
    let {invert: e, position: i="bottom-right", hotkey: o=["altKey", "KeyT"], expand: a, closeButton: c, className: d, offset: h, theme: g="light", richColors: b, duration: _, style: $, visibleToasts: _e=qt, toastOptions: tt, dir: rt=Ht(), gap: et=ee, loadingIcon: it, icons: st, containerAriaLabel: nt="Notifications", pauseWhenPageIsHidden: lt, cn: dt=ne} = s
      , [ot,at] = React.useState([])
      , ht = React.useMemo( () => Array.from(new Set([i].concat(ot.filter(Yt => Yt.position).map(Yt => Yt.position)))), [ot, i])
      , [pt,gt] = React.useState([])
      , [wt,yt] = React.useState(!1)
      , [Rt,Mt] = React.useState(!1)
      , [ss,zt] = React.useState(g !== "system" ? g : typeof window < "u" && window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light")
      , At = React.useRef(null)
      , kt = o.join("+").replace(/Key/g, "").replace(/Digit/g, "")
      , vt = React.useRef(null)
      , bt = React.useRef(!1)
      , Tt = React.useCallback(Yt => {
        var Nt;
        (Nt = ot.find(jt => jt.id === Yt.id)) != null && Nt.delete || v.dismiss(Yt.id),
        at(jt => jt.filter( ({id: xt}) => xt !== Yt.id))
    }
    , [ot]);
    return React.useEffect( () => v.subscribe(Yt => {
        if (Yt.dismiss) {
            at(Nt => Nt.map(jt => jt.id === Yt.id ? {
                ...jt,
                delete: !0
            } : jt));
            return
        }
        setTimeout( () => {
            Gt.flushSync( () => {
                at(Nt => {
                    let jt = Nt.findIndex(xt => xt.id === Yt.id);
                    return jt !== -1 ? [...Nt.slice(0, jt), {
                        ...Nt[jt],
                        ...Yt
                    }, ...Nt.slice(jt + 1)] : [Yt, ...Nt]
                }
                )
            }
            )
        }
        )
    }
    ), []),
    React.useEffect( () => {
        if (g !== "system") {
            zt(g);
            return
        }
        g === "system" && (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? zt("dark") : zt("light")),
        typeof window < "u" && window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", ({matches: Yt}) => {
            zt(Yt ? "dark" : "light")
        }
        )
    }
    , [g]),
    React.useEffect( () => {
        ot.length <= 1 && yt(!1)
    }
    , [ot]),
    React.useEffect( () => {
        let Yt = Nt => {
            var jt, xt;
            o.every(Et => Nt[Et] || Nt.code === Et) && (yt(!0),
            (jt = At.current) == null || jt.focus()),
            Nt.code === "Escape" && (document.activeElement === At.current || (xt = At.current) != null && xt.contains(document.activeElement)) && yt(!1)
        }
        ;
        return document.addEventListener("keydown", Yt),
        () => document.removeEventListener("keydown", Yt)
    }
    , [o]),
    React.useEffect( () => {
        if (At.current)
            return () => {
                vt.current && (vt.current.focus({
                    preventScroll: !0
                }),
                vt.current = null,
                bt.current = !1)
            }
    }
    , [At.current]),
    ot.length ? React.createElement("section", {
        "aria-label": `${nt} ${kt}`,
        tabIndex: -1
    }, ht.map( (Yt, Nt) => {
        var jt;
        let[xt,Et] = Yt.split("-");
        return React.createElement("ol", {
            key: Yt,
            dir: rt === "auto" ? Ht() : rt,
            tabIndex: -1,
            ref: At,
            className: d,
            "data-sonner-toaster": !0,
            "data-theme": ss,
            "data-y-position": xt,
            "data-x-position": Et,
            style: {
                "--front-toast-height": `${((jt = pt[0]) == null ? void 0 : jt.height) || 0}px`,
                "--offset": typeof h == "number" ? `${h}px` : h || Qt,
                "--width": `${te}px`,
                "--gap": `${et}px`,
                ...$
            },
            onBlur: Pt => {
                bt.current && !Pt.currentTarget.contains(Pt.relatedTarget) && (bt.current = !1,
                vt.current && (vt.current.focus({
                    preventScroll: !0
                }),
                vt.current = null))
            }
            ,
            onFocus: Pt => {
                Pt.target instanceof HTMLElement && Pt.target.dataset.dismissible === "false" || bt.current || (bt.current = !0,
                vt.current = Pt.relatedTarget)
            }
            ,
            onMouseEnter: () => yt(!0),
            onMouseMove: () => yt(!0),
            onMouseLeave: () => {
                Rt || yt(!1)
            }
            ,
            onPointerDown: Pt => {
                Pt.target instanceof HTMLElement && Pt.target.dataset.dismissible === "false" || Mt(!0)
            }
            ,
            onPointerUp: () => Mt(!1)
        }, ot.filter(Pt => !Pt.position && Nt === 0 || Pt.position === Yt).map( (Pt, St) => {
            var Bt, os;
            return React.createElement(se, {
                key: Pt.id,
                icons: st,
                index: St,
                toast: Pt,
                defaultRichColors: b,
                duration: (Bt = tt == null ? void 0 : tt.duration) != null ? Bt : _,
                className: tt == null ? void 0 : tt.className,
                descriptionClassName: tt == null ? void 0 : tt.descriptionClassName,
                invert: e,
                visibleToasts: _e,
                closeButton: (os = tt == null ? void 0 : tt.closeButton) != null ? os : c,
                interacting: Rt,
                position: Yt,
                style: tt == null ? void 0 : tt.style,
                unstyled: tt == null ? void 0 : tt.unstyled,
                classNames: tt == null ? void 0 : tt.classNames,
                cancelButtonStyle: tt == null ? void 0 : tt.cancelButtonStyle,
                actionButtonStyle: tt == null ? void 0 : tt.actionButtonStyle,
                removeToast: Tt,
                toasts: ot.filter(ds => ds.position == Pt.position),
                heights: pt.filter(ds => ds.position == Pt.position),
                setHeights: gt,
                expandByDefault: a,
                gap: et,
                loadingIcon: it,
                expanded: wt,
                pauseWhenPageIsHidden: lt,
                cn: dt
            })
        }
        ))
    }
    )) : null
}
;
const Toaster = ({...s}) => {
    const {theme: e="system"} = j();
    return jsxRuntimeExports.jsx(Te, {
        theme: e,
        className: "toaster group",
        toastOptions: {
            classNames: {
                toast: "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
                description: "group-[.toast]:text-muted-foreground",
                actionButton: "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
                cancelButton: "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground"
            }
        },
        ...s
    })
}
;
var useReactId = React$1.useId || ( () => {}
)
  , count$1 = 0;
function useId$1(s) {
    const [e,i] = reactExports.useState(useReactId());
    return useLayoutEffect2( () => {
        i(o => o ?? String(count$1++))
    }
    , [s]),
    e ? `radix-${e}` : ""
}
const sides = ["top", "right", "bottom", "left"]
  , min = Math.min
  , max = Math.max
  , round = Math.round
  , floor = Math.floor
  , createCoords = s => ({
    x: s,
    y: s
})
  , oppositeSideMap = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
}
  , oppositeAlignmentMap = {
    start: "end",
    end: "start"
};
function clamp$2(s, e, i) {
    return max(s, min(e, i))
}
function evaluate(s, e) {
    return typeof s == "function" ? s(e) : s
}
function getSide(s) {
    return s.split("-")[0]
}
function getAlignment(s) {
    return s.split("-")[1]
}
function getOppositeAxis(s) {
    return s === "x" ? "y" : "x"
}
function getAxisLength(s) {
    return s === "y" ? "height" : "width"
}
function getSideAxis(s) {
    return ["top", "bottom"].includes(getSide(s)) ? "y" : "x"
}
function getAlignmentAxis(s) {
    return getOppositeAxis(getSideAxis(s))
}
function getAlignmentSides(s, e, i) {
    i === void 0 && (i = !1);
    const o = getAlignment(s)
      , a = getAlignmentAxis(s)
      , c = getAxisLength(a);
    let d = a === "x" ? o === (i ? "end" : "start") ? "right" : "left" : o === "start" ? "bottom" : "top";
    return e.reference[c] > e.floating[c] && (d = getOppositePlacement(d)),
    [d, getOppositePlacement(d)]
}
function getExpandedPlacements(s) {
    const e = getOppositePlacement(s);
    return [getOppositeAlignmentPlacement(s), e, getOppositeAlignmentPlacement(e)]
}
function getOppositeAlignmentPlacement(s) {
    return s.replace(/start|end/g, e => oppositeAlignmentMap[e])
}
function getSideList(s, e, i) {
    const o = ["left", "right"]
      , a = ["right", "left"]
      , c = ["top", "bottom"]
      , d = ["bottom", "top"];
    switch (s) {
    case "top":
    case "bottom":
        return i ? e ? a : o : e ? o : a;
    case "left":
    case "right":
        return e ? c : d;
    default:
        return []
    }
}
function getOppositeAxisPlacements(s, e, i, o) {
    const a = getAlignment(s);
    let c = getSideList(getSide(s), i === "start", o);
    return a && (c = c.map(d => d + "-" + a),
    e && (c = c.concat(c.map(getOppositeAlignmentPlacement)))),
    c
}
function getOppositePlacement(s) {
    return s.replace(/left|right|bottom|top/g, e => oppositeSideMap[e])
}
function expandPaddingObject(s) {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        ...s
    }
}
function getPaddingObject(s) {
    return typeof s != "number" ? expandPaddingObject(s) : {
        top: s,
        right: s,
        bottom: s,
        left: s
    }
}
function rectToClientRect(s) {
    const {x: e, y: i, width: o, height: a} = s;
    return {
        width: o,
        height: a,
        top: i,
        left: e,
        right: e + o,
        bottom: i + a,
        x: e,
        y: i
    }
}
function computeCoordsFromPlacement(s, e, i) {
    let {reference: o, floating: a} = s;
    const c = getSideAxis(e)
      , d = getAlignmentAxis(e)
      , h = getAxisLength(d)
      , g = getSide(e)
      , b = c === "y"
      , _ = o.x + o.width / 2 - a.width / 2
      , $ = o.y + o.height / 2 - a.height / 2
      , _e = o[h] / 2 - a[h] / 2;
    let tt;
    switch (g) {
    case "top":
        tt = {
            x: _,
            y: o.y - a.height
        };
        break;
    case "bottom":
        tt = {
            x: _,
            y: o.y + o.height
        };
        break;
    case "right":
        tt = {
            x: o.x + o.width,
            y: $
        };
        break;
    case "left":
        tt = {
            x: o.x - a.width,
            y: $
        };
        break;
    default:
        tt = {
            x: o.x,
            y: o.y
        }
    }
    switch (getAlignment(e)) {
    case "start":
        tt[d] -= _e * (i && b ? -1 : 1);
        break;
    case "end":
        tt[d] += _e * (i && b ? -1 : 1);
        break
    }
    return tt
}
const computePosition$1 = async (s, e, i) => {
    const {placement: o="bottom", strategy: a="absolute", middleware: c=[], platform: d} = i
      , h = c.filter(Boolean)
      , g = await (d.isRTL == null ? void 0 : d.isRTL(e));
    let b = await d.getElementRects({
        reference: s,
        floating: e,
        strategy: a
    })
      , {x: _, y: $} = computeCoordsFromPlacement(b, o, g)
      , _e = o
      , tt = {}
      , rt = 0;
    for (let et = 0; et < h.length; et++) {
        const {name: it, fn: st} = h[et]
          , {x: nt, y: lt, data: dt, reset: ot} = await st({
            x: _,
            y: $,
            initialPlacement: o,
            placement: _e,
            strategy: a,
            middlewareData: tt,
            rects: b,
            platform: d,
            elements: {
                reference: s,
                floating: e
            }
        });
        _ = nt ?? _,
        $ = lt ?? $,
        tt = {
            ...tt,
            [it]: {
                ...tt[it],
                ...dt
            }
        },
        ot && rt <= 50 && (rt++,
        typeof ot == "object" && (ot.placement && (_e = ot.placement),
        ot.rects && (b = ot.rects === !0 ? await d.getElementRects({
            reference: s,
            floating: e,
            strategy: a
        }) : ot.rects),
        {x: _, y: $} = computeCoordsFromPlacement(b, _e, g)),
        et = -1)
    }
    return {
        x: _,
        y: $,
        placement: _e,
        strategy: a,
        middlewareData: tt
    }
}
;
async function detectOverflow(s, e) {
    var i;
    e === void 0 && (e = {});
    const {x: o, y: a, platform: c, rects: d, elements: h, strategy: g} = s
      , {boundary: b="clippingAncestors", rootBoundary: _="viewport", elementContext: $="floating", altBoundary: _e=!1, padding: tt=0} = evaluate(e, s)
      , rt = getPaddingObject(tt)
      , it = h[_e ? $ === "floating" ? "reference" : "floating" : $]
      , st = rectToClientRect(await c.getClippingRect({
        element: (i = await (c.isElement == null ? void 0 : c.isElement(it))) == null || i ? it : it.contextElement || await (c.getDocumentElement == null ? void 0 : c.getDocumentElement(h.floating)),
        boundary: b,
        rootBoundary: _,
        strategy: g
    }))
      , nt = $ === "floating" ? {
        x: o,
        y: a,
        width: d.floating.width,
        height: d.floating.height
    } : d.reference
      , lt = await (c.getOffsetParent == null ? void 0 : c.getOffsetParent(h.floating))
      , dt = await (c.isElement == null ? void 0 : c.isElement(lt)) ? await (c.getScale == null ? void 0 : c.getScale(lt)) || {
        x: 1,
        y: 1
    } : {
        x: 1,
        y: 1
    }
      , ot = rectToClientRect(c.convertOffsetParentRelativeRectToViewportRelativeRect ? await c.convertOffsetParentRelativeRectToViewportRelativeRect({
        elements: h,
        rect: nt,
        offsetParent: lt,
        strategy: g
    }) : nt);
    return {
        top: (st.top - ot.top + rt.top) / dt.y,
        bottom: (ot.bottom - st.bottom + rt.bottom) / dt.y,
        left: (st.left - ot.left + rt.left) / dt.x,
        right: (ot.right - st.right + rt.right) / dt.x
    }
}
const arrow$3 = s => ({
    name: "arrow",
    options: s,
    async fn(e) {
        const {x: i, y: o, placement: a, rects: c, platform: d, elements: h, middlewareData: g} = e
          , {element: b, padding: _=0} = evaluate(s, e) || {};
        if (b == null)
            return {};
        const $ = getPaddingObject(_)
          , _e = {
            x: i,
            y: o
        }
          , tt = getAlignmentAxis(a)
          , rt = getAxisLength(tt)
          , et = await d.getDimensions(b)
          , it = tt === "y"
          , st = it ? "top" : "left"
          , nt = it ? "bottom" : "right"
          , lt = it ? "clientHeight" : "clientWidth"
          , dt = c.reference[rt] + c.reference[tt] - _e[tt] - c.floating[rt]
          , ot = _e[tt] - c.reference[tt]
          , at = await (d.getOffsetParent == null ? void 0 : d.getOffsetParent(b));
        let ht = at ? at[lt] : 0;
        (!ht || !await (d.isElement == null ? void 0 : d.isElement(at))) && (ht = h.floating[lt] || c.floating[rt]);
        const pt = dt / 2 - ot / 2
          , gt = ht / 2 - et[rt] / 2 - 1
          , wt = min($[st], gt)
          , yt = min($[nt], gt)
          , Rt = wt
          , Mt = ht - et[rt] - yt
          , ss = ht / 2 - et[rt] / 2 + pt
          , zt = clamp$2(Rt, ss, Mt)
          , At = !g.arrow && getAlignment(a) != null && ss !== zt && c.reference[rt] / 2 - (ss < Rt ? wt : yt) - et[rt] / 2 < 0
          , kt = At ? ss < Rt ? ss - Rt : ss - Mt : 0;
        return {
            [tt]: _e[tt] + kt,
            data: {
                [tt]: zt,
                centerOffset: ss - zt - kt,
                ...At && {
                    alignmentOffset: kt
                }
            },
            reset: At
        }
    }
})
  , flip$2 = function(s) {
    return s === void 0 && (s = {}),
    {
        name: "flip",
        options: s,
        async fn(e) {
            var i, o;
            const {placement: a, middlewareData: c, rects: d, initialPlacement: h, platform: g, elements: b} = e
              , {mainAxis: _=!0, crossAxis: $=!0, fallbackPlacements: _e, fallbackStrategy: tt="bestFit", fallbackAxisSideDirection: rt="none", flipAlignment: et=!0, ...it} = evaluate(s, e);
            if ((i = c.arrow) != null && i.alignmentOffset)
                return {};
            const st = getSide(a)
              , nt = getSideAxis(h)
              , lt = getSide(h) === h
              , dt = await (g.isRTL == null ? void 0 : g.isRTL(b.floating))
              , ot = _e || (lt || !et ? [getOppositePlacement(h)] : getExpandedPlacements(h))
              , at = rt !== "none";
            !_e && at && ot.push(...getOppositeAxisPlacements(h, et, rt, dt));
            const ht = [h, ...ot]
              , pt = await detectOverflow(e, it)
              , gt = [];
            let wt = ((o = c.flip) == null ? void 0 : o.overflows) || [];
            if (_ && gt.push(pt[st]),
            $) {
                const ss = getAlignmentSides(a, d, dt);
                gt.push(pt[ss[0]], pt[ss[1]])
            }
            if (wt = [...wt, {
                placement: a,
                overflows: gt
            }],
            !gt.every(ss => ss <= 0)) {
                var yt, Rt;
                const ss = (((yt = c.flip) == null ? void 0 : yt.index) || 0) + 1
                  , zt = ht[ss];
                if (zt)
                    return {
                        data: {
                            index: ss,
                            overflows: wt
                        },
                        reset: {
                            placement: zt
                        }
                    };
                let At = (Rt = wt.filter(kt => kt.overflows[0] <= 0).sort( (kt, vt) => kt.overflows[1] - vt.overflows[1])[0]) == null ? void 0 : Rt.placement;
                if (!At)
                    switch (tt) {
                    case "bestFit":
                        {
                            var Mt;
                            const kt = (Mt = wt.filter(vt => {
                                if (at) {
                                    const bt = getSideAxis(vt.placement);
                                    return bt === nt || bt === "y"
                                }
                                return !0
                            }
                            ).map(vt => [vt.placement, vt.overflows.filter(bt => bt > 0).reduce( (bt, Tt) => bt + Tt, 0)]).sort( (vt, bt) => vt[1] - bt[1])[0]) == null ? void 0 : Mt[0];
                            kt && (At = kt);
                            break
                        }
                    case "initialPlacement":
                        At = h;
                        break
                    }
                if (a !== At)
                    return {
                        reset: {
                            placement: At
                        }
                    }
            }
            return {}
        }
    }
};
function getSideOffsets(s, e) {
    return {
        top: s.top - e.height,
        right: s.right - e.width,
        bottom: s.bottom - e.height,
        left: s.left - e.width
    }
}
function isAnySideFullyClipped(s) {
    return sides.some(e => s[e] >= 0)
}
const hide$2 = function(s) {
    return s === void 0 && (s = {}),
    {
        name: "hide",
        options: s,
        async fn(e) {
            const {rects: i} = e
              , {strategy: o="referenceHidden", ...a} = evaluate(s, e);
            switch (o) {
            case "referenceHidden":
                {
                    const c = await detectOverflow(e, {
                        ...a,
                        elementContext: "reference"
                    })
                      , d = getSideOffsets(c, i.reference);
                    return {
                        data: {
                            referenceHiddenOffsets: d,
                            referenceHidden: isAnySideFullyClipped(d)
                        }
                    }
                }
            case "escaped":
                {
                    const c = await detectOverflow(e, {
                        ...a,
                        altBoundary: !0
                    })
                      , d = getSideOffsets(c, i.floating);
                    return {
                        data: {
                            escapedOffsets: d,
                            escaped: isAnySideFullyClipped(d)
                        }
                    }
                }
            default:
                return {}
            }
        }
    }
};
async function convertValueToCoords(s, e) {
    const {placement: i, platform: o, elements: a} = s
      , c = await (o.isRTL == null ? void 0 : o.isRTL(a.floating))
      , d = getSide(i)
      , h = getAlignment(i)
      , g = getSideAxis(i) === "y"
      , b = ["left", "top"].includes(d) ? -1 : 1
      , _ = c && g ? -1 : 1
      , $ = evaluate(e, s);
    let {mainAxis: _e, crossAxis: tt, alignmentAxis: rt} = typeof $ == "number" ? {
        mainAxis: $,
        crossAxis: 0,
        alignmentAxis: null
    } : {
        mainAxis: $.mainAxis || 0,
        crossAxis: $.crossAxis || 0,
        alignmentAxis: $.alignmentAxis
    };
    return h && typeof rt == "number" && (tt = h === "end" ? rt * -1 : rt),
    g ? {
        x: tt * _,
        y: _e * b
    } : {
        x: _e * b,
        y: tt * _
    }
}
const offset$2 = function(s) {
    return s === void 0 && (s = 0),
    {
        name: "offset",
        options: s,
        async fn(e) {
            var i, o;
            const {x: a, y: c, placement: d, middlewareData: h} = e
              , g = await convertValueToCoords(e, s);
            return d === ((i = h.offset) == null ? void 0 : i.placement) && (o = h.arrow) != null && o.alignmentOffset ? {} : {
                x: a + g.x,
                y: c + g.y,
                data: {
                    ...g,
                    placement: d
                }
            }
        }
    }
}
  , shift$2 = function(s) {
    return s === void 0 && (s = {}),
    {
        name: "shift",
        options: s,
        async fn(e) {
            const {x: i, y: o, placement: a} = e
              , {mainAxis: c=!0, crossAxis: d=!1, limiter: h={
                fn: it => {
                    let {x: st, y: nt} = it;
                    return {
                        x: st,
                        y: nt
                    }
                }
            }, ...g} = evaluate(s, e)
              , b = {
                x: i,
                y: o
            }
              , _ = await detectOverflow(e, g)
              , $ = getSideAxis(getSide(a))
              , _e = getOppositeAxis($);
            let tt = b[_e]
              , rt = b[$];
            if (c) {
                const it = _e === "y" ? "top" : "left"
                  , st = _e === "y" ? "bottom" : "right"
                  , nt = tt + _[it]
                  , lt = tt - _[st];
                tt = clamp$2(nt, tt, lt)
            }
            if (d) {
                const it = $ === "y" ? "top" : "left"
                  , st = $ === "y" ? "bottom" : "right"
                  , nt = rt + _[it]
                  , lt = rt - _[st];
                rt = clamp$2(nt, rt, lt)
            }
            const et = h.fn({
                ...e,
                [_e]: tt,
                [$]: rt
            });
            return {
                ...et,
                data: {
                    x: et.x - i,
                    y: et.y - o,
                    enabled: {
                        [_e]: c,
                        [$]: d
                    }
                }
            }
        }
    }
}
  , limitShift$2 = function(s) {
    return s === void 0 && (s = {}),
    {
        options: s,
        fn(e) {
            const {x: i, y: o, placement: a, rects: c, middlewareData: d} = e
              , {offset: h=0, mainAxis: g=!0, crossAxis: b=!0} = evaluate(s, e)
              , _ = {
                x: i,
                y: o
            }
              , $ = getSideAxis(a)
              , _e = getOppositeAxis($);
            let tt = _[_e]
              , rt = _[$];
            const et = evaluate(h, e)
              , it = typeof et == "number" ? {
                mainAxis: et,
                crossAxis: 0
            } : {
                mainAxis: 0,
                crossAxis: 0,
                ...et
            };
            if (g) {
                const lt = _e === "y" ? "height" : "width"
                  , dt = c.reference[_e] - c.floating[lt] + it.mainAxis
                  , ot = c.reference[_e] + c.reference[lt] - it.mainAxis;
                tt < dt ? tt = dt : tt > ot && (tt = ot)
            }
            if (b) {
                var st, nt;
                const lt = _e === "y" ? "width" : "height"
                  , dt = ["top", "left"].includes(getSide(a))
                  , ot = c.reference[$] - c.floating[lt] + (dt && ((st = d.offset) == null ? void 0 : st[$]) || 0) + (dt ? 0 : it.crossAxis)
                  , at = c.reference[$] + c.reference[lt] + (dt ? 0 : ((nt = d.offset) == null ? void 0 : nt[$]) || 0) - (dt ? it.crossAxis : 0);
                rt < ot ? rt = ot : rt > at && (rt = at)
            }
            return {
                [_e]: tt,
                [$]: rt
            }
        }
    }
}
  , size$2 = function(s) {
    return s === void 0 && (s = {}),
    {
        name: "size",
        options: s,
        async fn(e) {
            var i, o;
            const {placement: a, rects: c, platform: d, elements: h} = e
              , {apply: g= () => {}
            , ...b} = evaluate(s, e)
              , _ = await detectOverflow(e, b)
              , $ = getSide(a)
              , _e = getAlignment(a)
              , tt = getSideAxis(a) === "y"
              , {width: rt, height: et} = c.floating;
            let it, st;
            $ === "top" || $ === "bottom" ? (it = $,
            st = _e === (await (d.isRTL == null ? void 0 : d.isRTL(h.floating)) ? "start" : "end") ? "left" : "right") : (st = $,
            it = _e === "end" ? "top" : "bottom");
            const nt = et - _.top - _.bottom
              , lt = rt - _.left - _.right
              , dt = min(et - _[it], nt)
              , ot = min(rt - _[st], lt)
              , at = !e.middlewareData.shift;
            let ht = dt
              , pt = ot;
            if ((i = e.middlewareData.shift) != null && i.enabled.x && (pt = lt),
            (o = e.middlewareData.shift) != null && o.enabled.y && (ht = nt),
            at && !_e) {
                const wt = max(_.left, 0)
                  , yt = max(_.right, 0)
                  , Rt = max(_.top, 0)
                  , Mt = max(_.bottom, 0);
                tt ? pt = rt - 2 * (wt !== 0 || yt !== 0 ? wt + yt : max(_.left, _.right)) : ht = et - 2 * (Rt !== 0 || Mt !== 0 ? Rt + Mt : max(_.top, _.bottom))
            }
            await g({
                ...e,
                availableWidth: pt,
                availableHeight: ht
            });
            const gt = await d.getDimensions(h.floating);
            return rt !== gt.width || et !== gt.height ? {
                reset: {
                    rects: !0
                }
            } : {}
        }
    }
};
function hasWindow() {
    return typeof window < "u"
}
function getNodeName(s) {
    return isNode(s) ? (s.nodeName || "").toLowerCase() : "#document"
}
function getWindow(s) {
    var e;
    return (s == null || (e = s.ownerDocument) == null ? void 0 : e.defaultView) || window
}
function getDocumentElement(s) {
    var e;
    return (e = (isNode(s) ? s.ownerDocument : s.document) || window.document) == null ? void 0 : e.documentElement
}
function isNode(s) {
    return hasWindow() ? s instanceof Node || s instanceof getWindow(s).Node : !1
}
function isElement(s) {
    return hasWindow() ? s instanceof Element || s instanceof getWindow(s).Element : !1
}
function isHTMLElement$1(s) {
    return hasWindow() ? s instanceof HTMLElement || s instanceof getWindow(s).HTMLElement : !1
}
function isShadowRoot(s) {
    return !hasWindow() || typeof ShadowRoot > "u" ? !1 : s instanceof ShadowRoot || s instanceof getWindow(s).ShadowRoot
}
function isOverflowElement(s) {
    const {overflow: e, overflowX: i, overflowY: o, display: a} = getComputedStyle$2(s);
    return /auto|scroll|overlay|hidden|clip/.test(e + o + i) && !["inline", "contents"].includes(a)
}
function isTableElement(s) {
    return ["table", "td", "th"].includes(getNodeName(s))
}
function isTopLayer(s) {
    return [":popover-open", ":modal"].some(e => {
        try {
            return s.matches(e)
        } catch {
            return !1
        }
    }
    )
}
function isContainingBlock(s) {
    const e = isWebKit()
      , i = isElement(s) ? getComputedStyle$2(s) : s;
    return i.transform !== "none" || i.perspective !== "none" || (i.containerType ? i.containerType !== "normal" : !1) || !e && (i.backdropFilter ? i.backdropFilter !== "none" : !1) || !e && (i.filter ? i.filter !== "none" : !1) || ["transform", "perspective", "filter"].some(o => (i.willChange || "").includes(o)) || ["paint", "layout", "strict", "content"].some(o => (i.contain || "").includes(o))
}
function getContainingBlock(s) {
    let e = getParentNode(s);
    for (; isHTMLElement$1(e) && !isLastTraversableNode(e); ) {
        if (isContainingBlock(e))
            return e;
        if (isTopLayer(e))
            return null;
        e = getParentNode(e)
    }
    return null
}
function isWebKit() {
    return typeof CSS > "u" || !CSS.supports ? !1 : CSS.supports("-webkit-backdrop-filter", "none")
}
function isLastTraversableNode(s) {
    return ["html", "body", "#document"].includes(getNodeName(s))
}
function getComputedStyle$2(s) {
    return getWindow(s).getComputedStyle(s)
}
function getNodeScroll(s) {
    return isElement(s) ? {
        scrollLeft: s.scrollLeft,
        scrollTop: s.scrollTop
    } : {
        scrollLeft: s.scrollX,
        scrollTop: s.scrollY
    }
}
function getParentNode(s) {
    if (getNodeName(s) === "html")
        return s;
    const e = s.assignedSlot || s.parentNode || isShadowRoot(s) && s.host || getDocumentElement(s);
    return isShadowRoot(e) ? e.host : e
}
function getNearestOverflowAncestor(s) {
    const e = getParentNode(s);
    return isLastTraversableNode(e) ? s.ownerDocument ? s.ownerDocument.body : s.body : isHTMLElement$1(e) && isOverflowElement(e) ? e : getNearestOverflowAncestor(e)
}
function getOverflowAncestors(s, e, i) {
    var o;
    e === void 0 && (e = []),
    i === void 0 && (i = !0);
    const a = getNearestOverflowAncestor(s)
      , c = a === ((o = s.ownerDocument) == null ? void 0 : o.body)
      , d = getWindow(a);
    if (c) {
        const h = getFrameElement(d);
        return e.concat(d, d.visualViewport || [], isOverflowElement(a) ? a : [], h && i ? getOverflowAncestors(h) : [])
    }
    return e.concat(a, getOverflowAncestors(a, [], i))
}
function getFrameElement(s) {
    return s.parent && Object.getPrototypeOf(s.parent) ? s.frameElement : null
}
function getCssDimensions(s) {
    const e = getComputedStyle$2(s);
    let i = parseFloat(e.width) || 0
      , o = parseFloat(e.height) || 0;
    const a = isHTMLElement$1(s)
      , c = a ? s.offsetWidth : i
      , d = a ? s.offsetHeight : o
      , h = round(i) !== c || round(o) !== d;
    return h && (i = c,
    o = d),
    {
        width: i,
        height: o,
        $: h
    }
}
function unwrapElement(s) {
    return isElement(s) ? s : s.contextElement
}
function getScale(s) {
    const e = unwrapElement(s);
    if (!isHTMLElement$1(e))
        return createCoords(1);
    const i = e.getBoundingClientRect()
      , {width: o, height: a, $: c} = getCssDimensions(e);
    let d = (c ? round(i.width) : i.width) / o
      , h = (c ? round(i.height) : i.height) / a;
    return (!d || !Number.isFinite(d)) && (d = 1),
    (!h || !Number.isFinite(h)) && (h = 1),
    {
        x: d,
        y: h
    }
}
const noOffsets = createCoords(0);
function getVisualOffsets(s) {
    const e = getWindow(s);
    return !isWebKit() || !e.visualViewport ? noOffsets : {
        x: e.visualViewport.offsetLeft,
        y: e.visualViewport.offsetTop
    }
}
function shouldAddVisualOffsets(s, e, i) {
    return e === void 0 && (e = !1),
    !i || e && i !== getWindow(s) ? !1 : e
}
function getBoundingClientRect(s, e, i, o) {
    e === void 0 && (e = !1),
    i === void 0 && (i = !1);
    const a = s.getBoundingClientRect()
      , c = unwrapElement(s);
    let d = createCoords(1);
    e && (o ? isElement(o) && (d = getScale(o)) : d = getScale(s));
    const h = shouldAddVisualOffsets(c, i, o) ? getVisualOffsets(c) : createCoords(0);
    let g = (a.left + h.x) / d.x
      , b = (a.top + h.y) / d.y
      , _ = a.width / d.x
      , $ = a.height / d.y;
    if (c) {
        const _e = getWindow(c)
          , tt = o && isElement(o) ? getWindow(o) : o;
        let rt = _e
          , et = getFrameElement(rt);
        for (; et && o && tt !== rt; ) {
            const it = getScale(et)
              , st = et.getBoundingClientRect()
              , nt = getComputedStyle$2(et)
              , lt = st.left + (et.clientLeft + parseFloat(nt.paddingLeft)) * it.x
              , dt = st.top + (et.clientTop + parseFloat(nt.paddingTop)) * it.y;
            g *= it.x,
            b *= it.y,
            _ *= it.x,
            $ *= it.y,
            g += lt,
            b += dt,
            rt = getWindow(et),
            et = getFrameElement(rt)
        }
    }
    return rectToClientRect({
        width: _,
        height: $,
        x: g,
        y: b
    })
}
function convertOffsetParentRelativeRectToViewportRelativeRect(s) {
    let {elements: e, rect: i, offsetParent: o, strategy: a} = s;
    const c = a === "fixed"
      , d = getDocumentElement(o)
      , h = e ? isTopLayer(e.floating) : !1;
    if (o === d || h && c)
        return i;
    let g = {
        scrollLeft: 0,
        scrollTop: 0
    }
      , b = createCoords(1);
    const _ = createCoords(0)
      , $ = isHTMLElement$1(o);
    if (($ || !$ && !c) && ((getNodeName(o) !== "body" || isOverflowElement(d)) && (g = getNodeScroll(o)),
    isHTMLElement$1(o))) {
        const _e = getBoundingClientRect(o);
        b = getScale(o),
        _.x = _e.x + o.clientLeft,
        _.y = _e.y + o.clientTop
    }
    return {
        width: i.width * b.x,
        height: i.height * b.y,
        x: i.x * b.x - g.scrollLeft * b.x + _.x,
        y: i.y * b.y - g.scrollTop * b.y + _.y
    }
}
function getClientRects(s) {
    return Array.from(s.getClientRects())
}
function getWindowScrollBarX(s, e) {
    const i = getNodeScroll(s).scrollLeft;
    return e ? e.left + i : getBoundingClientRect(getDocumentElement(s)).left + i
}
function getDocumentRect(s) {
    const e = getDocumentElement(s)
      , i = getNodeScroll(s)
      , o = s.ownerDocument.body
      , a = max(e.scrollWidth, e.clientWidth, o.scrollWidth, o.clientWidth)
      , c = max(e.scrollHeight, e.clientHeight, o.scrollHeight, o.clientHeight);
    let d = -i.scrollLeft + getWindowScrollBarX(s);
    const h = -i.scrollTop;
    return getComputedStyle$2(o).direction === "rtl" && (d += max(e.clientWidth, o.clientWidth) - a),
    {
        width: a,
        height: c,
        x: d,
        y: h
    }
}
function getViewportRect(s, e) {
    const i = getWindow(s)
      , o = getDocumentElement(s)
      , a = i.visualViewport;
    let c = o.clientWidth
      , d = o.clientHeight
      , h = 0
      , g = 0;
    if (a) {
        c = a.width,
        d = a.height;
        const b = isWebKit();
        (!b || b && e === "fixed") && (h = a.offsetLeft,
        g = a.offsetTop)
    }
    return {
        width: c,
        height: d,
        x: h,
        y: g
    }
}
function getInnerBoundingClientRect(s, e) {
    const i = getBoundingClientRect(s, !0, e === "fixed")
      , o = i.top + s.clientTop
      , a = i.left + s.clientLeft
      , c = isHTMLElement$1(s) ? getScale(s) : createCoords(1)
      , d = s.clientWidth * c.x
      , h = s.clientHeight * c.y
      , g = a * c.x
      , b = o * c.y;
    return {
        width: d,
        height: h,
        x: g,
        y: b
    }
}
function getClientRectFromClippingAncestor(s, e, i) {
    let o;
    if (e === "viewport")
        o = getViewportRect(s, i);
    else if (e === "document")
        o = getDocumentRect(getDocumentElement(s));
    else if (isElement(e))
        o = getInnerBoundingClientRect(e, i);
    else {
        const a = getVisualOffsets(s);
        o = {
            ...e,
            x: e.x - a.x,
            y: e.y - a.y
        }
    }
    return rectToClientRect(o)
}
function hasFixedPositionAncestor(s, e) {
    const i = getParentNode(s);
    return i === e || !isElement(i) || isLastTraversableNode(i) ? !1 : getComputedStyle$2(i).position === "fixed" || hasFixedPositionAncestor(i, e)
}
function getClippingElementAncestors(s, e) {
    const i = e.get(s);
    if (i)
        return i;
    let o = getOverflowAncestors(s, [], !1).filter(h => isElement(h) && getNodeName(h) !== "body")
      , a = null;
    const c = getComputedStyle$2(s).position === "fixed";
    let d = c ? getParentNode(s) : s;
    for (; isElement(d) && !isLastTraversableNode(d); ) {
        const h = getComputedStyle$2(d)
          , g = isContainingBlock(d);
        !g && h.position === "fixed" && (a = null),
        (c ? !g && !a : !g && h.position === "static" && !!a && ["absolute", "fixed"].includes(a.position) || isOverflowElement(d) && !g && hasFixedPositionAncestor(s, d)) ? o = o.filter(_ => _ !== d) : a = h,
        d = getParentNode(d)
    }
    return e.set(s, o),
    o
}
function getClippingRect(s) {
    let {element: e, boundary: i, rootBoundary: o, strategy: a} = s;
    const d = [...i === "clippingAncestors" ? isTopLayer(e) ? [] : getClippingElementAncestors(e, this._c) : [].concat(i), o]
      , h = d[0]
      , g = d.reduce( (b, _) => {
        const $ = getClientRectFromClippingAncestor(e, _, a);
        return b.top = max($.top, b.top),
        b.right = min($.right, b.right),
        b.bottom = min($.bottom, b.bottom),
        b.left = max($.left, b.left),
        b
    }
    , getClientRectFromClippingAncestor(e, h, a));
    return {
        width: g.right - g.left,
        height: g.bottom - g.top,
        x: g.left,
        y: g.top
    }
}
function getDimensions(s) {
    const {width: e, height: i} = getCssDimensions(s);
    return {
        width: e,
        height: i
    }
}
function getRectRelativeToOffsetParent(s, e, i) {
    const o = isHTMLElement$1(e)
      , a = getDocumentElement(e)
      , c = i === "fixed"
      , d = getBoundingClientRect(s, !0, c, e);
    let h = {
        scrollLeft: 0,
        scrollTop: 0
    };
    const g = createCoords(0);
    if (o || !o && !c)
        if ((getNodeName(e) !== "body" || isOverflowElement(a)) && (h = getNodeScroll(e)),
        o) {
            const tt = getBoundingClientRect(e, !0, c, e);
            g.x = tt.x + e.clientLeft,
            g.y = tt.y + e.clientTop
        } else
            a && (g.x = getWindowScrollBarX(a));
    let b = 0
      , _ = 0;
    if (a && !o && !c) {
        const tt = a.getBoundingClientRect();
        _ = tt.top + h.scrollTop,
        b = tt.left + h.scrollLeft - getWindowScrollBarX(a, tt)
    }
    const $ = d.left + h.scrollLeft - g.x - b
      , _e = d.top + h.scrollTop - g.y - _;
    return {
        x: $,
        y: _e,
        width: d.width,
        height: d.height
    }
}
function isStaticPositioned(s) {
    return getComputedStyle$2(s).position === "static"
}
function getTrueOffsetParent(s, e) {
    if (!isHTMLElement$1(s) || getComputedStyle$2(s).position === "fixed")
        return null;
    if (e)
        return e(s);
    let i = s.offsetParent;
    return getDocumentElement(s) === i && (i = i.ownerDocument.body),
    i
}
function getOffsetParent(s, e) {
    const i = getWindow(s);
    if (isTopLayer(s))
        return i;
    if (!isHTMLElement$1(s)) {
        let a = getParentNode(s);
        for (; a && !isLastTraversableNode(a); ) {
            if (isElement(a) && !isStaticPositioned(a))
                return a;
            a = getParentNode(a)
        }
        return i
    }
    let o = getTrueOffsetParent(s, e);
    for (; o && isTableElement(o) && isStaticPositioned(o); )
        o = getTrueOffsetParent(o, e);
    return o && isLastTraversableNode(o) && isStaticPositioned(o) && !isContainingBlock(o) ? i : o || getContainingBlock(s) || i
}
const getElementRects = async function(s) {
    const e = this.getOffsetParent || getOffsetParent
      , i = this.getDimensions
      , o = await i(s.floating);
    return {
        reference: getRectRelativeToOffsetParent(s.reference, await e(s.floating), s.strategy),
        floating: {
            x: 0,
            y: 0,
            width: o.width,
            height: o.height
        }
    }
};
function isRTL(s) {
    return getComputedStyle$2(s).direction === "rtl"
}
const platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement,
    isRTL
};
function observeMove(s, e) {
    let i = null, o;
    const a = getDocumentElement(s);
    function c() {
        var h;
        clearTimeout(o),
        (h = i) == null || h.disconnect(),
        i = null
    }
    function d(h, g) {
        h === void 0 && (h = !1),
        g === void 0 && (g = 1),
        c();
        const {left: b, top: _, width: $, height: _e} = s.getBoundingClientRect();
        if (h || e(),
        !$ || !_e)
            return;
        const tt = floor(_)
          , rt = floor(a.clientWidth - (b + $))
          , et = floor(a.clientHeight - (_ + _e))
          , it = floor(b)
          , nt = {
            rootMargin: -tt + "px " + -rt + "px " + -et + "px " + -it + "px",
            threshold: max(0, min(1, g)) || 1
        };
        let lt = !0;
        function dt(ot) {
            const at = ot[0].intersectionRatio;
            if (at !== g) {
                if (!lt)
                    return d();
                at ? d(!1, at) : o = setTimeout( () => {
                    d(!1, 1e-7)
                }
                , 1e3)
            }
            lt = !1
        }
        try {
            i = new IntersectionObserver(dt,{
                ...nt,
                root: a.ownerDocument
            })
        } catch {
            i = new IntersectionObserver(dt,nt)
        }
        i.observe(s)
    }
    return d(!0),
    c
}
function autoUpdate(s, e, i, o) {
    o === void 0 && (o = {});
    const {ancestorScroll: a=!0, ancestorResize: c=!0, elementResize: d=typeof ResizeObserver == "function", layoutShift: h=typeof IntersectionObserver == "function", animationFrame: g=!1} = o
      , b = unwrapElement(s)
      , _ = a || c ? [...b ? getOverflowAncestors(b) : [], ...getOverflowAncestors(e)] : [];
    _.forEach(st => {
        a && st.addEventListener("scroll", i, {
            passive: !0
        }),
        c && st.addEventListener("resize", i)
    }
    );
    const $ = b && h ? observeMove(b, i) : null;
    let _e = -1
      , tt = null;
    d && (tt = new ResizeObserver(st => {
        let[nt] = st;
        nt && nt.target === b && tt && (tt.unobserve(e),
        cancelAnimationFrame(_e),
        _e = requestAnimationFrame( () => {
            var lt;
            (lt = tt) == null || lt.observe(e)
        }
        )),
        i()
    }
    ),
    b && !g && tt.observe(b),
    tt.observe(e));
    let rt, et = g ? getBoundingClientRect(s) : null;
    g && it();
    function it() {
        const st = getBoundingClientRect(s);
        et && (st.x !== et.x || st.y !== et.y || st.width !== et.width || st.height !== et.height) && i(),
        et = st,
        rt = requestAnimationFrame(it)
    }
    return i(),
    () => {
        var st;
        _.forEach(nt => {
            a && nt.removeEventListener("scroll", i),
            c && nt.removeEventListener("resize", i)
        }
        ),
        $ == null || $(),
        (st = tt) == null || st.disconnect(),
        tt = null,
        g && cancelAnimationFrame(rt)
    }
}
const offset$1 = offset$2
  , shift$1 = shift$2
  , flip$1 = flip$2
  , size$1 = size$2
  , hide$1 = hide$2
  , arrow$2 = arrow$3
  , limitShift$1 = limitShift$2
  , computePosition = (s, e, i) => {
    const o = new Map
      , a = {
        platform,
        ...i
    }
      , c = {
        ...a.platform,
        _c: o
    };
    return computePosition$1(s, e, {
        ...a,
        platform: c
    })
}
;
var index = typeof document < "u" ? reactExports.useLayoutEffect : reactExports.useEffect;
function deepEqual(s, e) {
    if (s === e)
        return !0;
    if (typeof s != typeof e)
        return !1;
    if (typeof s == "function" && s.toString() === e.toString())
        return !0;
    let i, o, a;
    if (s && e && typeof s == "object") {
        if (Array.isArray(s)) {
            if (i = s.length,
            i !== e.length)
                return !1;
            for (o = i; o-- !== 0; )
                if (!deepEqual(s[o], e[o]))
                    return !1;
            return !0
        }
        if (a = Object.keys(s),
        i = a.length,
        i !== Object.keys(e).length)
            return !1;
        for (o = i; o-- !== 0; )
            if (!{}.hasOwnProperty.call(e, a[o]))
                return !1;
        for (o = i; o-- !== 0; ) {
            const c = a[o];
            if (!(c === "_owner" && s.$$typeof) && !deepEqual(s[c], e[c]))
                return !1
        }
        return !0
    }
    return s !== s && e !== e
}
function getDPR(s) {
    return typeof window > "u" ? 1 : (s.ownerDocument.defaultView || window).devicePixelRatio || 1
}
function roundByDPR(s, e) {
    const i = getDPR(s);
    return Math.round(e * i) / i
}
function useLatestRef(s) {
    const e = reactExports.useRef(s);
    return index( () => {
        e.current = s
    }
    ),
    e
}
function useFloating(s) {
    s === void 0 && (s = {});
    const {placement: e="bottom", strategy: i="absolute", middleware: o=[], platform: a, elements: {reference: c, floating: d}={}, transform: h=!0, whileElementsMounted: g, open: b} = s
      , [_,$] = reactExports.useState({
        x: 0,
        y: 0,
        strategy: i,
        placement: e,
        middlewareData: {},
        isPositioned: !1
    })
      , [_e,tt] = reactExports.useState(o);
    deepEqual(_e, o) || tt(o);
    const [rt,et] = reactExports.useState(null)
      , [it,st] = reactExports.useState(null)
      , nt = reactExports.useCallback(vt => {
        vt !== at.current && (at.current = vt,
        et(vt))
    }
    , [])
      , lt = reactExports.useCallback(vt => {
        vt !== ht.current && (ht.current = vt,
        st(vt))
    }
    , [])
      , dt = c || rt
      , ot = d || it
      , at = reactExports.useRef(null)
      , ht = reactExports.useRef(null)
      , pt = reactExports.useRef(_)
      , gt = g != null
      , wt = useLatestRef(g)
      , yt = useLatestRef(a)
      , Rt = useLatestRef(b)
      , Mt = reactExports.useCallback( () => {
        if (!at.current || !ht.current)
            return;
        const vt = {
            placement: e,
            strategy: i,
            middleware: _e
        };
        yt.current && (vt.platform = yt.current),
        computePosition(at.current, ht.current, vt).then(bt => {
            const Tt = {
                ...bt,
                isPositioned: Rt.current !== !1
            };
            ss.current && !deepEqual(pt.current, Tt) && (pt.current = Tt,
            reactDomExports.flushSync( () => {
                $(Tt)
            }
            ))
        }
        )
    }
    , [_e, e, i, yt, Rt]);
    index( () => {
        b === !1 && pt.current.isPositioned && (pt.current.isPositioned = !1,
        $(vt => ({
            ...vt,
            isPositioned: !1
        })))
    }
    , [b]);
    const ss = reactExports.useRef(!1);
    index( () => (ss.current = !0,
    () => {
        ss.current = !1
    }
    ), []),
    index( () => {
        if (dt && (at.current = dt),
        ot && (ht.current = ot),
        dt && ot) {
            if (wt.current)
                return wt.current(dt, ot, Mt);
            Mt()
        }
    }
    , [dt, ot, Mt, wt, gt]);
    const zt = reactExports.useMemo( () => ({
        reference: at,
        floating: ht,
        setReference: nt,
        setFloating: lt
    }), [nt, lt])
      , At = reactExports.useMemo( () => ({
        reference: dt,
        floating: ot
    }), [dt, ot])
      , kt = reactExports.useMemo( () => {
        const vt = {
            position: i,
            left: 0,
            top: 0
        };
        if (!At.floating)
            return vt;
        const bt = roundByDPR(At.floating, _.x)
          , Tt = roundByDPR(At.floating, _.y);
        return h ? {
            ...vt,
            transform: "translate(" + bt + "px, " + Tt + "px)",
            ...getDPR(At.floating) >= 1.5 && {
                willChange: "transform"
            }
        } : {
            position: i,
            left: bt,
            top: Tt
        }
    }
    , [i, h, At.floating, _.x, _.y]);
    return reactExports.useMemo( () => ({
        ..._,
        update: Mt,
        refs: zt,
        elements: At,
        floatingStyles: kt
    }), [_, Mt, zt, At, kt])
}
const arrow$1 = s => {
    function e(i) {
        return {}.hasOwnProperty.call(i, "current")
    }
    return {
        name: "arrow",
        options: s,
        fn(i) {
            const {element: o, padding: a} = typeof s == "function" ? s(i) : s;
            return o && e(o) ? o.current != null ? arrow$2({
                element: o.current,
                padding: a
            }).fn(i) : {} : o ? arrow$2({
                element: o,
                padding: a
            }).fn(i) : {}
        }
    }
}
  , offset = (s, e) => ({
    ...offset$1(s),
    options: [s, e]
})
  , shift = (s, e) => ({
    ...shift$1(s),
    options: [s, e]
})
  , limitShift = (s, e) => ({
    ...limitShift$1(s),
    options: [s, e]
})
  , flip = (s, e) => ({
    ...flip$1(s),
    options: [s, e]
})
  , size = (s, e) => ({
    ...size$1(s),
    options: [s, e]
})
  , hide = (s, e) => ({
    ...hide$1(s),
    options: [s, e]
})
  , arrow = (s, e) => ({
    ...arrow$1(s),
    options: [s, e]
});
var NAME$2 = "Arrow"
  , Arrow$1 = reactExports.forwardRef( (s, e) => {
    const {children: i, width: o=10, height: a=5, ...c} = s;
    return jsxRuntimeExports.jsx(Primitive$1.svg, {
        ...c,
        ref: e,
        width: o,
        height: a,
        viewBox: "0 0 30 10",
        preserveAspectRatio: "none",
        children: s.asChild ? i : jsxRuntimeExports.jsx("polygon", {
            points: "0,0 30,0 15,10"
        })
    })
}
);
Arrow$1.displayName = NAME$2;
var Root$9 = Arrow$1;
function createContextScope$2(s, e=[]) {
    let i = [];
    function o(c, d) {
        const h = reactExports.createContext(d)
          , g = i.length;
        i = [...i, d];
        function b($) {
            const {scope: _e, children: tt, ...rt} = $
              , et = (_e == null ? void 0 : _e[s][g]) || h
              , it = reactExports.useMemo( () => rt, Object.values(rt));
            return jsxRuntimeExports.jsx(et.Provider, {
                value: it,
                children: tt
            })
        }
        function _($, _e) {
            const tt = (_e == null ? void 0 : _e[s][g]) || h
              , rt = reactExports.useContext(tt);
            if (rt)
                return rt;
            if (d !== void 0)
                return d;
            throw new Error(`\`${$}\` must be used within \`${c}\``)
        }
        return b.displayName = c + "Provider",
        [b, _]
    }
    const a = () => {
        const c = i.map(d => reactExports.createContext(d));
        return function(h) {
            const g = (h == null ? void 0 : h[s]) || c;
            return reactExports.useMemo( () => ({
                [`__scope${s}`]: {
                    ...h,
                    [s]: g
                }
            }), [h, g])
        }
    }
    ;
    return a.scopeName = s,
    [o, composeContextScopes$2(a, ...e)]
}
function composeContextScopes$2(...s) {
    const e = s[0];
    if (s.length === 1)
        return e;
    const i = () => {
        const o = s.map(a => ({
            useScope: a(),
            scopeName: a.scopeName
        }));
        return function(c) {
            const d = o.reduce( (h, {useScope: g, scopeName: b}) => {
                const $ = g(c)[`__scope${b}`];
                return {
                    ...h,
                    ...$
                }
            }
            , {});
            return reactExports.useMemo( () => ({
                [`__scope${e.scopeName}`]: d
            }), [d])
        }
    }
    ;
    return i.scopeName = e.scopeName,
    i
}
function useSize(s) {
    const [e,i] = reactExports.useState(void 0);
    return useLayoutEffect2( () => {
        if (s) {
            i({
                width: s.offsetWidth,
                height: s.offsetHeight
            });
            const o = new ResizeObserver(a => {
                if (!Array.isArray(a) || !a.length)
                    return;
                const c = a[0];
                let d, h;
                if ("borderBoxSize"in c) {
                    const g = c.borderBoxSize
                      , b = Array.isArray(g) ? g[0] : g;
                    d = b.inlineSize,
                    h = b.blockSize
                } else
                    d = s.offsetWidth,
                    h = s.offsetHeight;
                i({
                    width: d,
                    height: h
                })
            }
            );
            return o.observe(s, {
                box: "border-box"
            }),
            () => o.unobserve(s)
        } else
            i(void 0)
    }
    , [s]),
    e
}
var POPPER_NAME = "Popper"
  , [createPopperContext,createPopperScope] = createContextScope$2(POPPER_NAME)
  , [PopperProvider,usePopperContext] = createPopperContext(POPPER_NAME)
  , Popper = s => {
    const {__scopePopper: e, children: i} = s
      , [o,a] = reactExports.useState(null);
    return jsxRuntimeExports.jsx(PopperProvider, {
        scope: e,
        anchor: o,
        onAnchorChange: a,
        children: i
    })
}
;
Popper.displayName = POPPER_NAME;
var ANCHOR_NAME$1 = "PopperAnchor"
  , PopperAnchor = reactExports.forwardRef( (s, e) => {
    const {__scopePopper: i, virtualRef: o, ...a} = s
      , c = usePopperContext(ANCHOR_NAME$1, i)
      , d = reactExports.useRef(null)
      , h = useComposedRefs(e, d);
    return reactExports.useEffect( () => {
        c.onAnchorChange((o == null ? void 0 : o.current) || d.current)
    }
    ),
    o ? null : jsxRuntimeExports.jsx(Primitive$1.div, {
        ...a,
        ref: h
    })
}
);
PopperAnchor.displayName = ANCHOR_NAME$1;
var CONTENT_NAME$6 = "PopperContent"
  , [PopperContentProvider,useContentContext] = createPopperContext(CONTENT_NAME$6)
  , PopperContent = reactExports.forwardRef( (s, e) => {
    var St, Bt, os, ds, js, ys;
    const {__scopePopper: i, side: o="bottom", sideOffset: a=0, align: c="center", alignOffset: d=0, arrowPadding: h=0, avoidCollisions: g=!0, collisionBoundary: b=[], collisionPadding: _=0, sticky: $="partial", hideWhenDetached: _e=!1, updatePositionStrategy: tt="optimized", onPlaced: rt, ...et} = s
      , it = usePopperContext(CONTENT_NAME$6, i)
      , [st,nt] = reactExports.useState(null)
      , lt = useComposedRefs(e, vs => nt(vs))
      , [dt,ot] = reactExports.useState(null)
      , at = useSize(dt)
      , ht = (at == null ? void 0 : at.width) ?? 0
      , pt = (at == null ? void 0 : at.height) ?? 0
      , gt = o + (c !== "center" ? "-" + c : "")
      , wt = typeof _ == "number" ? _ : {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        ..._
    }
      , yt = Array.isArray(b) ? b : [b]
      , Rt = yt.length > 0
      , Mt = {
        padding: wt,
        boundary: yt.filter(isNotNull$2),
        altBoundary: Rt
    }
      , {refs: ss, floatingStyles: zt, placement: At, isPositioned: kt, middlewareData: vt} = useFloating({
        strategy: "fixed",
        placement: gt,
        whileElementsMounted: (...vs) => autoUpdate(...vs, {
            animationFrame: tt === "always"
        }),
        elements: {
            reference: it.anchor
        },
        middleware: [offset({
            mainAxis: a + pt,
            alignmentAxis: d
        }), g && shift({
            mainAxis: !0,
            crossAxis: !1,
            limiter: $ === "partial" ? limitShift() : void 0,
            ...Mt
        }), g && flip({
            ...Mt
        }), size({
            ...Mt,
            apply: ({elements: vs, rects: Ss, availableWidth: _s, availableHeight: ns}) => {
                const {width: xs, height: Lt} = Ss.reference
                  , ts = vs.floating.style;
                ts.setProperty("--radix-popper-available-width", `${_s}px`),
                ts.setProperty("--radix-popper-available-height", `${ns}px`),
                ts.setProperty("--radix-popper-anchor-width", `${xs}px`),
                ts.setProperty("--radix-popper-anchor-height", `${Lt}px`)
            }
        }), dt && arrow({
            element: dt,
            padding: h
        }), transformOrigin({
            arrowWidth: ht,
            arrowHeight: pt
        }), _e && hide({
            strategy: "referenceHidden",
            ...Mt
        })]
    })
      , [bt,Tt] = getSideAndAlignFromPlacement(At)
      , Yt = useCallbackRef$1(rt);
    useLayoutEffect2( () => {
        kt && (Yt == null || Yt())
    }
    , [kt, Yt]);
    const Nt = (St = vt.arrow) == null ? void 0 : St.x
      , jt = (Bt = vt.arrow) == null ? void 0 : Bt.y
      , xt = ((os = vt.arrow) == null ? void 0 : os.centerOffset) !== 0
      , [Et,Pt] = reactExports.useState();
    return useLayoutEffect2( () => {
        st && Pt(window.getComputedStyle(st).zIndex)
    }
    , [st]),
    jsxRuntimeExports.jsx("div", {
        ref: ss.setFloating,
        "data-radix-popper-content-wrapper": "",
        style: {
            ...zt,
            transform: kt ? zt.transform : "translate(0, -200%)",
            minWidth: "max-content",
            zIndex: Et,
            "--radix-popper-transform-origin": [(ds = vt.transformOrigin) == null ? void 0 : ds.x, (js = vt.transformOrigin) == null ? void 0 : js.y].join(" "),
            ...((ys = vt.hide) == null ? void 0 : ys.referenceHidden) && {
                visibility: "hidden",
                pointerEvents: "none"
            }
        },
        dir: s.dir,
        children: jsxRuntimeExports.jsx(PopperContentProvider, {
            scope: i,
            placedSide: bt,
            onArrowChange: ot,
            arrowX: Nt,
            arrowY: jt,
            shouldHideArrow: xt,
            children: jsxRuntimeExports.jsx(Primitive$1.div, {
                "data-side": bt,
                "data-align": Tt,
                ...et,
                ref: lt,
                style: {
                    ...et.style,
                    animation: kt ? void 0 : "none"
                }
            })
        })
    })
}
);
PopperContent.displayName = CONTENT_NAME$6;
var ARROW_NAME$4 = "PopperArrow"
  , OPPOSITE_SIDE = {
    top: "bottom",
    right: "left",
    bottom: "top",
    left: "right"
}
  , PopperArrow = reactExports.forwardRef(function(e, i) {
    const {__scopePopper: o, ...a} = e
      , c = useContentContext(ARROW_NAME$4, o)
      , d = OPPOSITE_SIDE[c.placedSide];
    return jsxRuntimeExports.jsx("span", {
        ref: c.onArrowChange,
        style: {
            position: "absolute",
            left: c.arrowX,
            top: c.arrowY,
            [d]: 0,
            transformOrigin: {
                top: "",
                right: "0 0",
                bottom: "center 0",
                left: "100% 0"
            }[c.placedSide],
            transform: {
                top: "translateY(100%)",
                right: "translateY(50%) rotate(90deg) translateX(-50%)",
                bottom: "rotate(180deg)",
                left: "translateY(50%) rotate(-90deg) translateX(50%)"
            }[c.placedSide],
            visibility: c.shouldHideArrow ? "hidden" : void 0
        },
        children: jsxRuntimeExports.jsx(Root$9, {
            ...a,
            ref: i,
            style: {
                ...a.style,
                display: "block"
            }
        })
    })
});
PopperArrow.displayName = ARROW_NAME$4;
function isNotNull$2(s) {
    return s !== null
}
var transformOrigin = s => ({
    name: "transformOrigin",
    options: s,
    fn(e) {
        var it, st, nt;
        const {placement: i, rects: o, middlewareData: a} = e
          , d = ((it = a.arrow) == null ? void 0 : it.centerOffset) !== 0
          , h = d ? 0 : s.arrowWidth
          , g = d ? 0 : s.arrowHeight
          , [b,_] = getSideAndAlignFromPlacement(i)
          , $ = {
            start: "0%",
            center: "50%",
            end: "100%"
        }[_]
          , _e = (((st = a.arrow) == null ? void 0 : st.x) ?? 0) + h / 2
          , tt = (((nt = a.arrow) == null ? void 0 : nt.y) ?? 0) + g / 2;
        let rt = ""
          , et = "";
        return b === "bottom" ? (rt = d ? $ : `${_e}px`,
        et = `${-g}px`) : b === "top" ? (rt = d ? $ : `${_e}px`,
        et = `${o.floating.height + g}px`) : b === "right" ? (rt = `${-g}px`,
        et = d ? $ : `${tt}px`) : b === "left" && (rt = `${o.floating.width + g}px`,
        et = d ? $ : `${tt}px`),
        {
            data: {
                x: rt,
                y: et
            }
        }
    }
});
function getSideAndAlignFromPlacement(s) {
    const [e,i="center"] = s.split("-");
    return [e, i]
}
var Root2$3 = Popper
  , Anchor = PopperAnchor
  , Content$2 = PopperContent
  , Arrow = PopperArrow
  , [createTooltipContext,createTooltipScope] = createContextScope$3("Tooltip", [createPopperScope])
  , usePopperScope$2 = createPopperScope()
  , PROVIDER_NAME = "TooltipProvider"
  , DEFAULT_DELAY_DURATION = 700
  , TOOLTIP_OPEN = "tooltip.open"
  , [TooltipProviderContextProvider,useTooltipProviderContext] = createTooltipContext(PROVIDER_NAME)
  , TooltipProvider$1 = s => {
    const {__scopeTooltip: e, delayDuration: i=DEFAULT_DELAY_DURATION, skipDelayDuration: o=300, disableHoverableContent: a=!1, children: c} = s
      , [d,h] = reactExports.useState(!0)
      , g = reactExports.useRef(!1)
      , b = reactExports.useRef(0);
    return reactExports.useEffect( () => {
        const _ = b.current;
        return () => window.clearTimeout(_)
    }
    , []),
    jsxRuntimeExports.jsx(TooltipProviderContextProvider, {
        scope: e,
        isOpenDelayed: d,
        delayDuration: i,
        onOpen: reactExports.useCallback( () => {
            window.clearTimeout(b.current),
            h(!1)
        }
        , []),
        onClose: reactExports.useCallback( () => {
            window.clearTimeout(b.current),
            b.current = window.setTimeout( () => h(!0), o)
        }
        , [o]),
        isPointerInTransitRef: g,
        onPointerInTransitChange: reactExports.useCallback(_ => {
            g.current = _
        }
        , []),
        disableHoverableContent: a,
        children: c
    })
}
;
TooltipProvider$1.displayName = PROVIDER_NAME;
var TOOLTIP_NAME = "Tooltip"
  , [TooltipContextProvider,useTooltipContext] = createTooltipContext(TOOLTIP_NAME)
  , Tooltip$1 = s => {
    const {__scopeTooltip: e, children: i, open: o, defaultOpen: a=!1, onOpenChange: c, disableHoverableContent: d, delayDuration: h} = s
      , g = useTooltipProviderContext(TOOLTIP_NAME, s.__scopeTooltip)
      , b = usePopperScope$2(e)
      , [_,$] = reactExports.useState(null)
      , _e = useId$1()
      , tt = reactExports.useRef(0)
      , rt = d ?? g.disableHoverableContent
      , et = h ?? g.delayDuration
      , it = reactExports.useRef(!1)
      , [st=!1,nt] = useControllableState({
        prop: o,
        defaultProp: a,
        onChange: ht => {
            ht ? (g.onOpen(),
            document.dispatchEvent(new CustomEvent(TOOLTIP_OPEN))) : g.onClose(),
            c == null || c(ht)
        }
    })
      , lt = reactExports.useMemo( () => st ? it.current ? "delayed-open" : "instant-open" : "closed", [st])
      , dt = reactExports.useCallback( () => {
        window.clearTimeout(tt.current),
        tt.current = 0,
        it.current = !1,
        nt(!0)
    }
    , [nt])
      , ot = reactExports.useCallback( () => {
        window.clearTimeout(tt.current),
        tt.current = 0,
        nt(!1)
    }
    , [nt])
      , at = reactExports.useCallback( () => {
        window.clearTimeout(tt.current),
        tt.current = window.setTimeout( () => {
            it.current = !0,
            nt(!0),
            tt.current = 0
        }
        , et)
    }
    , [et, nt]);
    return reactExports.useEffect( () => () => {
        tt.current && (window.clearTimeout(tt.current),
        tt.current = 0)
    }
    , []),
    jsxRuntimeExports.jsx(Root2$3, {
        ...b,
        children: jsxRuntimeExports.jsx(TooltipContextProvider, {
            scope: e,
            contentId: _e,
            open: st,
            stateAttribute: lt,
            trigger: _,
            onTriggerChange: $,
            onTriggerEnter: reactExports.useCallback( () => {
                g.isOpenDelayed ? at() : dt()
            }
            , [g.isOpenDelayed, at, dt]),
            onTriggerLeave: reactExports.useCallback( () => {
                rt ? ot() : (window.clearTimeout(tt.current),
                tt.current = 0)
            }
            , [ot, rt]),
            onOpen: dt,
            onClose: ot,
            disableHoverableContent: rt,
            children: i
        })
    })
}
;
Tooltip$1.displayName = TOOLTIP_NAME;
var TRIGGER_NAME$4 = "TooltipTrigger"
  , TooltipTrigger$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeTooltip: i, ...o} = s
      , a = useTooltipContext(TRIGGER_NAME$4, i)
      , c = useTooltipProviderContext(TRIGGER_NAME$4, i)
      , d = usePopperScope$2(i)
      , h = reactExports.useRef(null)
      , g = useComposedRefs(e, h, a.onTriggerChange)
      , b = reactExports.useRef(!1)
      , _ = reactExports.useRef(!1)
      , $ = reactExports.useCallback( () => b.current = !1, []);
    return reactExports.useEffect( () => () => document.removeEventListener("pointerup", $), [$]),
    jsxRuntimeExports.jsx(Anchor, {
        asChild: !0,
        ...d,
        children: jsxRuntimeExports.jsx(Primitive$1.button, {
            "aria-describedby": a.open ? a.contentId : void 0,
            "data-state": a.stateAttribute,
            ...o,
            ref: g,
            onPointerMove: composeEventHandlers(s.onPointerMove, _e => {
                _e.pointerType !== "touch" && !_.current && !c.isPointerInTransitRef.current && (a.onTriggerEnter(),
                _.current = !0)
            }
            ),
            onPointerLeave: composeEventHandlers(s.onPointerLeave, () => {
                a.onTriggerLeave(),
                _.current = !1
            }
            ),
            onPointerDown: composeEventHandlers(s.onPointerDown, () => {
                b.current = !0,
                document.addEventListener("pointerup", $, {
                    once: !0
                })
            }
            ),
            onFocus: composeEventHandlers(s.onFocus, () => {
                b.current || a.onOpen()
            }
            ),
            onBlur: composeEventHandlers(s.onBlur, a.onClose),
            onClick: composeEventHandlers(s.onClick, a.onClose)
        })
    })
}
);
TooltipTrigger$1.displayName = TRIGGER_NAME$4;
var PORTAL_NAME$4 = "TooltipPortal"
  , [PortalProvider$2,usePortalContext$2] = createTooltipContext(PORTAL_NAME$4, {
    forceMount: void 0
})
  , CONTENT_NAME$5 = "TooltipContent"
  , TooltipContent$1 = reactExports.forwardRef( (s, e) => {
    const i = usePortalContext$2(CONTENT_NAME$5, s.__scopeTooltip)
      , {forceMount: o=i.forceMount, side: a="top", ...c} = s
      , d = useTooltipContext(CONTENT_NAME$5, s.__scopeTooltip);
    return jsxRuntimeExports.jsx(Presence, {
        present: o || d.open,
        children: d.disableHoverableContent ? jsxRuntimeExports.jsx(TooltipContentImpl, {
            side: a,
            ...c,
            ref: e
        }) : jsxRuntimeExports.jsx(TooltipContentHoverable, {
            side: a,
            ...c,
            ref: e
        })
    })
}
)
  , TooltipContentHoverable = reactExports.forwardRef( (s, e) => {
    const i = useTooltipContext(CONTENT_NAME$5, s.__scopeTooltip)
      , o = useTooltipProviderContext(CONTENT_NAME$5, s.__scopeTooltip)
      , a = reactExports.useRef(null)
      , c = useComposedRefs(e, a)
      , [d,h] = reactExports.useState(null)
      , {trigger: g, onClose: b} = i
      , _ = a.current
      , {onPointerInTransitChange: $} = o
      , _e = reactExports.useCallback( () => {
        h(null),
        $(!1)
    }
    , [$])
      , tt = reactExports.useCallback( (rt, et) => {
        const it = rt.currentTarget
          , st = {
            x: rt.clientX,
            y: rt.clientY
        }
          , nt = getExitSideFromRect(st, it.getBoundingClientRect())
          , lt = getPaddedExitPoints(st, nt)
          , dt = getPointsFromRect(et.getBoundingClientRect())
          , ot = getHull([...lt, ...dt]);
        h(ot),
        $(!0)
    }
    , [$]);
    return reactExports.useEffect( () => () => _e(), [_e]),
    reactExports.useEffect( () => {
        if (g && _) {
            const rt = it => tt(it, _)
              , et = it => tt(it, g);
            return g.addEventListener("pointerleave", rt),
            _.addEventListener("pointerleave", et),
            () => {
                g.removeEventListener("pointerleave", rt),
                _.removeEventListener("pointerleave", et)
            }
        }
    }
    , [g, _, tt, _e]),
    reactExports.useEffect( () => {
        if (d) {
            const rt = et => {
                const it = et.target
                  , st = {
                    x: et.clientX,
                    y: et.clientY
                }
                  , nt = (g == null ? void 0 : g.contains(it)) || (_ == null ? void 0 : _.contains(it))
                  , lt = !isPointInPolygon$1(st, d);
                nt ? _e() : lt && (_e(),
                b())
            }
            ;
            return document.addEventListener("pointermove", rt),
            () => document.removeEventListener("pointermove", rt)
        }
    }
    , [g, _, d, b, _e]),
    jsxRuntimeExports.jsx(TooltipContentImpl, {
        ...s,
        ref: c
    })
}
)
  , [VisuallyHiddenContentContextProvider,useVisuallyHiddenContentContext] = createTooltipContext(TOOLTIP_NAME, {
    isInside: !1
})
  , TooltipContentImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeTooltip: i, children: o, "aria-label": a, onEscapeKeyDown: c, onPointerDownOutside: d, ...h} = s
      , g = useTooltipContext(CONTENT_NAME$5, i)
      , b = usePopperScope$2(i)
      , {onClose: _} = g;
    return reactExports.useEffect( () => (document.addEventListener(TOOLTIP_OPEN, _),
    () => document.removeEventListener(TOOLTIP_OPEN, _)), [_]),
    reactExports.useEffect( () => {
        if (g.trigger) {
            const $ = _e => {
                const tt = _e.target;
                tt != null && tt.contains(g.trigger) && _()
            }
            ;
            return window.addEventListener("scroll", $, {
                capture: !0
            }),
            () => window.removeEventListener("scroll", $, {
                capture: !0
            })
        }
    }
    , [g.trigger, _]),
    jsxRuntimeExports.jsx(DismissableLayer, {
        asChild: !0,
        disableOutsidePointerEvents: !1,
        onEscapeKeyDown: c,
        onPointerDownOutside: d,
        onFocusOutside: $ => $.preventDefault(),
        onDismiss: _,
        children: jsxRuntimeExports.jsxs(Content$2, {
            "data-state": g.stateAttribute,
            ...b,
            ...h,
            ref: e,
            style: {
                ...h.style,
                "--radix-tooltip-content-transform-origin": "var(--radix-popper-transform-origin)",
                "--radix-tooltip-content-available-width": "var(--radix-popper-available-width)",
                "--radix-tooltip-content-available-height": "var(--radix-popper-available-height)",
                "--radix-tooltip-trigger-width": "var(--radix-popper-anchor-width)",
                "--radix-tooltip-trigger-height": "var(--radix-popper-anchor-height)"
            },
            children: [jsxRuntimeExports.jsx(Slottable, {
                children: o
            }), jsxRuntimeExports.jsx(VisuallyHiddenContentContextProvider, {
                scope: i,
                isInside: !0,
                children: jsxRuntimeExports.jsx(Root$a, {
                    id: g.contentId,
                    role: "tooltip",
                    children: a || o
                })
            })]
        })
    })
}
);
TooltipContent$1.displayName = CONTENT_NAME$5;
var ARROW_NAME$3 = "TooltipArrow"
  , TooltipArrow = reactExports.forwardRef( (s, e) => {
    const {__scopeTooltip: i, ...o} = s
      , a = usePopperScope$2(i);
    return useVisuallyHiddenContentContext(ARROW_NAME$3, i).isInside ? null : jsxRuntimeExports.jsx(Arrow, {
        ...a,
        ...o,
        ref: e
    })
}
);
TooltipArrow.displayName = ARROW_NAME$3;
function getExitSideFromRect(s, e) {
    const i = Math.abs(e.top - s.y)
      , o = Math.abs(e.bottom - s.y)
      , a = Math.abs(e.right - s.x)
      , c = Math.abs(e.left - s.x);
    switch (Math.min(i, o, a, c)) {
    case c:
        return "left";
    case a:
        return "right";
    case i:
        return "top";
    case o:
        return "bottom";
    default:
        throw new Error("unreachable")
    }
}
function getPaddedExitPoints(s, e, i=5) {
    const o = [];
    switch (e) {
    case "top":
        o.push({
            x: s.x - i,
            y: s.y + i
        }, {
            x: s.x + i,
            y: s.y + i
        });
        break;
    case "bottom":
        o.push({
            x: s.x - i,
            y: s.y - i
        }, {
            x: s.x + i,
            y: s.y - i
        });
        break;
    case "left":
        o.push({
            x: s.x + i,
            y: s.y - i
        }, {
            x: s.x + i,
            y: s.y + i
        });
        break;
    case "right":
        o.push({
            x: s.x - i,
            y: s.y - i
        }, {
            x: s.x - i,
            y: s.y + i
        });
        break
    }
    return o
}
function getPointsFromRect(s) {
    const {top: e, right: i, bottom: o, left: a} = s;
    return [{
        x: a,
        y: e
    }, {
        x: i,
        y: e
    }, {
        x: i,
        y: o
    }, {
        x: a,
        y: o
    }]
}
function isPointInPolygon$1(s, e) {
    const {x: i, y: o} = s;
    let a = !1;
    for (let c = 0, d = e.length - 1; c < e.length; d = c++) {
        const h = e[c].x
          , g = e[c].y
          , b = e[d].x
          , _ = e[d].y;
        g > o != _ > o && i < (b - h) * (o - g) / (_ - g) + h && (a = !a)
    }
    return a
}
function getHull(s) {
    const e = s.slice();
    return e.sort( (i, o) => i.x < o.x ? -1 : i.x > o.x ? 1 : i.y < o.y ? -1 : i.y > o.y ? 1 : 0),
    getHullPresorted(e)
}
function getHullPresorted(s) {
    if (s.length <= 1)
        return s.slice();
    const e = [];
    for (let o = 0; o < s.length; o++) {
        const a = s[o];
        for (; e.length >= 2; ) {
            const c = e[e.length - 1]
              , d = e[e.length - 2];
            if ((c.x - d.x) * (a.y - d.y) >= (c.y - d.y) * (a.x - d.x))
                e.pop();
            else
                break
        }
        e.push(a)
    }
    e.pop();
    const i = [];
    for (let o = s.length - 1; o >= 0; o--) {
        const a = s[o];
        for (; i.length >= 2; ) {
            const c = i[i.length - 1]
              , d = i[i.length - 2];
            if ((c.x - d.x) * (a.y - d.y) >= (c.y - d.y) * (a.x - d.x))
                i.pop();
            else
                break
        }
        i.push(a)
    }
    return i.pop(),
    e.length === 1 && i.length === 1 && e[0].x === i[0].x && e[0].y === i[0].y ? e : e.concat(i)
}
var Provider = TooltipProvider$1
  , Root3$1 = Tooltip$1
  , Trigger$4 = TooltipTrigger$1
  , Content2$3 = TooltipContent$1;
const TooltipProvider = Provider
  , Tooltip = Root3$1
  , TooltipTrigger = Trigger$4
  , TooltipContent = reactExports.forwardRef( ({className: s, sideOffset: e=4, ...i}, o) => jsxRuntimeExports.jsx(Content2$3, {
    ref: o,
    sideOffset: e,
    className: cn("z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", s),
    ...i
}));
TooltipContent.displayName = Content2$3.displayName;
var Subscribable = class {
    constructor() {
        this.listeners = new Set,
        this.subscribe = this.subscribe.bind(this)
    }
    subscribe(s) {
        return this.listeners.add(s),
        this.onSubscribe(),
        () => {
            this.listeners.delete(s),
            this.onUnsubscribe()
        }
    }
    hasListeners() {
        return this.listeners.size > 0
    }
    onSubscribe() {}
    onUnsubscribe() {}
}
  , isServer = typeof window > "u" || "Deno"in globalThis;
function noop$4() {}
function functionalUpdate(s, e) {
    return typeof s == "function" ? s(e) : s
}
function isValidTimeout(s) {
    return typeof s == "number" && s >= 0 && s !== 1 / 0
}
function timeUntilStale(s, e) {
    return Math.max(s + (e || 0) - Date.now(), 0)
}
function resolveStaleTime(s, e) {
    return typeof s == "function" ? s(e) : s
}
function resolveEnabled(s, e) {
    return typeof s == "function" ? s(e) : s
}
function matchQuery(s, e) {
    const {type: i="all", exact: o, fetchStatus: a, predicate: c, queryKey: d, stale: h} = s;
    if (d) {
        if (o) {
            if (e.queryHash !== hashQueryKeyByOptions(d, e.options))
                return !1
        } else if (!partialMatchKey(e.queryKey, d))
            return !1
    }
    if (i !== "all") {
        const g = e.isActive();
        if (i === "active" && !g || i === "inactive" && g)
            return !1
    }
    return !(typeof h == "boolean" && e.isStale() !== h || a && a !== e.state.fetchStatus || c && !c(e))
}
function matchMutation(s, e) {
    const {exact: i, status: o, predicate: a, mutationKey: c} = s;
    if (c) {
        if (!e.options.mutationKey)
            return !1;
        if (i) {
            if (hashKey(e.options.mutationKey) !== hashKey(c))
                return !1
        } else if (!partialMatchKey(e.options.mutationKey, c))
            return !1
    }
    return !(o && e.state.status !== o || a && !a(e))
}
function hashQueryKeyByOptions(s, e) {
    return ((e == null ? void 0 : e.queryKeyHashFn) || hashKey)(s)
}
function hashKey(s) {
    return JSON.stringify(s, (e, i) => isPlainObject(i) ? Object.keys(i).sort().reduce( (o, a) => (o[a] = i[a],
    o), {}) : i)
}
function partialMatchKey(s, e) {
    return s === e ? !0 : typeof s != typeof e ? !1 : s && e && typeof s == "object" && typeof e == "object" ? !Object.keys(e).some(i => !partialMatchKey(s[i], e[i])) : !1
}
function replaceEqualDeep(s, e) {
    if (s === e)
        return s;
    const i = isPlainArray(s) && isPlainArray(e);
    if (i || isPlainObject(s) && isPlainObject(e)) {
        const o = i ? s : Object.keys(s)
          , a = o.length
          , c = i ? e : Object.keys(e)
          , d = c.length
          , h = i ? [] : {};
        let g = 0;
        for (let b = 0; b < d; b++) {
            const _ = i ? b : c[b];
            (!i && o.includes(_) || i) && s[_] === void 0 && e[_] === void 0 ? (h[_] = void 0,
            g++) : (h[_] = replaceEqualDeep(s[_], e[_]),
            h[_] === s[_] && s[_] !== void 0 && g++)
        }
        return a === d && g === a ? s : h
    }
    return e
}
function shallowEqualObjects(s, e) {
    if (!e || Object.keys(s).length !== Object.keys(e).length)
        return !1;
    for (const i in s)
        if (s[i] !== e[i])
            return !1;
    return !0
}
function isPlainArray(s) {
    return Array.isArray(s) && s.length === Object.keys(s).length
}
function isPlainObject(s) {
    if (!hasObjectPrototype(s))
        return !1;
    const e = s.constructor;
    if (e === void 0)
        return !0;
    const i = e.prototype;
    return !(!hasObjectPrototype(i) || !i.hasOwnProperty("isPrototypeOf") || Object.getPrototypeOf(s) !== Object.prototype)
}
function hasObjectPrototype(s) {
    return Object.prototype.toString.call(s) === "[object Object]"
}
function sleep$1(s) {
    return new Promise(e => {
        setTimeout(e, s)
    }
    )
}
function replaceData(s, e, i) {
    return typeof i.structuralSharing == "function" ? i.structuralSharing(s, e) : i.structuralSharing !== !1 ? replaceEqualDeep(s, e) : e
}
function addToEnd(s, e, i=0) {
    const o = [...s, e];
    return i && o.length > i ? o.slice(1) : o
}
function addToStart(s, e, i=0) {
    const o = [e, ...s];
    return i && o.length > i ? o.slice(0, -1) : o
}
var skipToken = Symbol();
function ensureQueryFn(s, e) {
    return !s.queryFn && (e != null && e.initialPromise) ? () => e.initialPromise : !s.queryFn || s.queryFn === skipToken ? () => Promise.reject(new Error(`Missing queryFn: '${s.queryHash}'`)) : s.queryFn
}
var zr, Pr, en, Io, FocusManager = (Io = class extends Subscribable {
    constructor() {
        super();
        ps(this, zr);
        ps(this, Pr);
        ps(this, en);
        us(this, en, e => {
            if (!isServer && window.addEventListener) {
                const i = () => e();
                return window.addEventListener("visibilitychange", i, !1),
                () => {
                    window.removeEventListener("visibilitychange", i)
                }
            }
        }
        )
    }
    onSubscribe() {
        mt(this, Pr) || this.setEventListener(mt(this, en))
    }
    onUnsubscribe() {
        var e;
        this.hasListeners() || ((e = mt(this, Pr)) == null || e.call(this),
        us(this, Pr, void 0))
    }
    setEventListener(e) {
        var i;
        us(this, en, e),
        (i = mt(this, Pr)) == null || i.call(this),
        us(this, Pr, e(o => {
            typeof o == "boolean" ? this.setFocused(o) : this.onFocus()
        }
        ))
    }
    setFocused(e) {
        mt(this, zr) !== e && (us(this, zr, e),
        this.onFocus())
    }
    onFocus() {
        const e = this.isFocused();
        this.listeners.forEach(i => {
            i(e)
        }
        )
    }
    isFocused() {
        var e;
        return typeof mt(this, zr) == "boolean" ? mt(this, zr) : ((e = globalThis.document) == null ? void 0 : e.visibilityState) !== "hidden"
    }
}
,
zr = new WeakMap,
Pr = new WeakMap,
en = new WeakMap,
Io), focusManager = new FocusManager, tn, Ir, sn, Mo, OnlineManager = (Mo = class extends Subscribable {
    constructor() {
        super();
        ps(this, tn, !0);
        ps(this, Ir);
        ps(this, sn);
        us(this, sn, e => {
            if (!isServer && window.addEventListener) {
                const i = () => e(!0)
                  , o = () => e(!1);
                return window.addEventListener("online", i, !1),
                window.addEventListener("offline", o, !1),
                () => {
                    window.removeEventListener("online", i),
                    window.removeEventListener("offline", o)
                }
            }
        }
        )
    }
    onSubscribe() {
        mt(this, Ir) || this.setEventListener(mt(this, sn))
    }
    onUnsubscribe() {
        var e;
        this.hasListeners() || ((e = mt(this, Ir)) == null || e.call(this),
        us(this, Ir, void 0))
    }
    setEventListener(e) {
        var i;
        us(this, sn, e),
        (i = mt(this, Ir)) == null || i.call(this),
        us(this, Ir, e(this.setOnline.bind(this)))
    }
    setOnline(e) {
        mt(this, tn) !== e && (us(this, tn, e),
        this.listeners.forEach(o => {
            o(e)
        }
        ))
    }
    isOnline() {
        return mt(this, tn)
    }
}
,
tn = new WeakMap,
Ir = new WeakMap,
sn = new WeakMap,
Mo), onlineManager = new OnlineManager;
function pendingThenable() {
    let s, e;
    const i = new Promise( (a, c) => {
        s = a,
        e = c
    }
    );
    i.status = "pending",
    i.catch( () => {}
    );
    function o(a) {
        Object.assign(i, a),
        delete i.resolve,
        delete i.reject
    }
    return i.resolve = a => {
        o({
            status: "fulfilled",
            value: a
        }),
        s(a)
    }
    ,
    i.reject = a => {
        o({
            status: "rejected",
            reason: a
        }),
        e(a)
    }
    ,
    i
}
function defaultRetryDelay(s) {
    return Math.min(1e3 * 2 ** s, 3e4)
}
function canFetch(s) {
    return (s ?? "online") === "online" ? onlineManager.isOnline() : !0
}
var CancelledError = class extends Error {
    constructor(s) {
        super("CancelledError"),
        this.revert = s == null ? void 0 : s.revert,
        this.silent = s == null ? void 0 : s.silent
    }
}
;
function isCancelledError(s) {
    return s instanceof CancelledError
}
function createRetryer(s) {
    let e = !1, i = 0, o = !1, a;
    const c = pendingThenable()
      , d = et => {
        var it;
        o || (_e(new CancelledError(et)),
        (it = s.abort) == null || it.call(s))
    }
      , h = () => {
        e = !0
    }
      , g = () => {
        e = !1
    }
      , b = () => focusManager.isFocused() && (s.networkMode === "always" || onlineManager.isOnline()) && s.canRun()
      , _ = () => canFetch(s.networkMode) && s.canRun()
      , $ = et => {
        var it;
        o || (o = !0,
        (it = s.onSuccess) == null || it.call(s, et),
        a == null || a(),
        c.resolve(et))
    }
      , _e = et => {
        var it;
        o || (o = !0,
        (it = s.onError) == null || it.call(s, et),
        a == null || a(),
        c.reject(et))
    }
      , tt = () => new Promise(et => {
        var it;
        a = st => {
            (o || b()) && et(st)
        }
        ,
        (it = s.onPause) == null || it.call(s)
    }
    ).then( () => {
        var et;
        a = void 0,
        o || (et = s.onContinue) == null || et.call(s)
    }
    )
      , rt = () => {
        if (o)
            return;
        let et;
        const it = i === 0 ? s.initialPromise : void 0;
        try {
            et = it ?? s.fn()
        } catch (st) {
            et = Promise.reject(st)
        }
        Promise.resolve(et).then($).catch(st => {
            var at;
            if (o)
                return;
            const nt = s.retry ?? (isServer ? 0 : 3)
              , lt = s.retryDelay ?? defaultRetryDelay
              , dt = typeof lt == "function" ? lt(i, st) : lt
              , ot = nt === !0 || typeof nt == "number" && i < nt || typeof nt == "function" && nt(i, st);
            if (e || !ot) {
                _e(st);
                return
            }
            i++,
            (at = s.onFail) == null || at.call(s, i, st),
            sleep$1(dt).then( () => b() ? void 0 : tt()).then( () => {
                e ? _e(st) : rt()
            }
            )
        }
        )
    }
    ;
    return {
        promise: c,
        cancel: d,
        continue: () => (a == null || a(),
        c),
        cancelRetry: h,
        continueRetry: g,
        canStart: _,
        start: () => (_() ? rt() : tt().then(rt),
        c)
    }
}
function createNotifyManager() {
    let s = []
      , e = 0
      , i = h => {
        h()
    }
      , o = h => {
        h()
    }
      , a = h => setTimeout(h, 0);
    const c = h => {
        e ? s.push(h) : a( () => {
            i(h)
        }
        )
    }
      , d = () => {
        const h = s;
        s = [],
        h.length && a( () => {
            o( () => {
                h.forEach(g => {
                    i(g)
                }
                )
            }
            )
        }
        )
    }
    ;
    return {
        batch: h => {
            let g;
            e++;
            try {
                g = h()
            } finally {
                e--,
                e || d()
            }
            return g
        }
        ,
        batchCalls: h => (...g) => {
            c( () => {
                h(...g)
            }
            )
        }
        ,
        schedule: c,
        setNotifyFunction: h => {
            i = h
        }
        ,
        setBatchNotifyFunction: h => {
            o = h
        }
        ,
        setScheduler: h => {
            a = h
        }
    }
}
var notifyManager = createNotifyManager(), Vr, Lo, Removable = (Lo = class {
    constructor() {
        ps(this, Vr)
    }
    destroy() {
        this.clearGcTimeout()
    }
    scheduleGc() {
        this.clearGcTimeout(),
        isValidTimeout(this.gcTime) && us(this, Vr, setTimeout( () => {
            this.optionalRemove()
        }
        , this.gcTime))
    }
    updateGcTime(s) {
        this.gcTime = Math.max(this.gcTime || 0, s ?? (isServer ? 1 / 0 : 5 * 60 * 1e3))
    }
    clearGcTimeout() {
        mt(this, Vr) && (clearTimeout(mt(this, Vr)),
        us(this, Vr, void 0))
    }
}
,
Vr = new WeakMap,
Lo), rn, nn, gr, ur, Rn, Hr, jr, wr, Do, Query = (Do = class extends Removable {
    constructor(e) {
        super();
        ps(this, jr);
        ps(this, rn);
        ps(this, nn);
        ps(this, gr);
        ps(this, ur);
        ps(this, Rn);
        ps(this, Hr);
        us(this, Hr, !1),
        us(this, Rn, e.defaultOptions),
        this.setOptions(e.options),
        this.observers = [],
        us(this, gr, e.cache),
        this.queryKey = e.queryKey,
        this.queryHash = e.queryHash,
        us(this, rn, getDefaultState$1(this.options)),
        this.state = e.state ?? mt(this, rn),
        this.scheduleGc()
    }
    get meta() {
        return this.options.meta
    }
    get promise() {
        var e;
        return (e = mt(this, ur)) == null ? void 0 : e.promise
    }
    setOptions(e) {
        this.options = {
            ...mt(this, Rn),
            ...e
        },
        this.updateGcTime(this.options.gcTime)
    }
    optionalRemove() {
        !this.observers.length && this.state.fetchStatus === "idle" && mt(this, gr).remove(this)
    }
    setData(e, i) {
        const o = replaceData(this.state.data, e, this.options);
        return cs(this, jr, wr).call(this, {
            data: o,
            type: "success",
            dataUpdatedAt: i == null ? void 0 : i.updatedAt,
            manual: i == null ? void 0 : i.manual
        }),
        o
    }
    setState(e, i) {
        cs(this, jr, wr).call(this, {
            type: "setState",
            state: e,
            setStateOptions: i
        })
    }
    cancel(e) {
        var o, a;
        const i = (o = mt(this, ur)) == null ? void 0 : o.promise;
        return (a = mt(this, ur)) == null || a.cancel(e),
        i ? i.then(noop$4).catch(noop$4) : Promise.resolve()
    }
    destroy() {
        super.destroy(),
        this.cancel({
            silent: !0
        })
    }
    reset() {
        this.destroy(),
        this.setState(mt(this, rn))
    }
    isActive() {
        return this.observers.some(e => resolveEnabled(e.options.enabled, this) !== !1)
    }
    isDisabled() {
        return this.getObserversCount() > 0 ? !this.isActive() : this.options.queryFn === skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0
    }
    isStale() {
        return this.state.isInvalidated ? !0 : this.getObserversCount() > 0 ? this.observers.some(e => e.getCurrentResult().isStale) : this.state.data === void 0
    }
    isStaleByTime(e=0) {
        return this.state.isInvalidated || this.state.data === void 0 || !timeUntilStale(this.state.dataUpdatedAt, e)
    }
    onFocus() {
        var i;
        const e = this.observers.find(o => o.shouldFetchOnWindowFocus());
        e == null || e.refetch({
            cancelRefetch: !1
        }),
        (i = mt(this, ur)) == null || i.continue()
    }
    onOnline() {
        var i;
        const e = this.observers.find(o => o.shouldFetchOnReconnect());
        e == null || e.refetch({
            cancelRefetch: !1
        }),
        (i = mt(this, ur)) == null || i.continue()
    }
    addObserver(e) {
        this.observers.includes(e) || (this.observers.push(e),
        this.clearGcTimeout(),
        mt(this, gr).notify({
            type: "observerAdded",
            query: this,
            observer: e
        }))
    }
    removeObserver(e) {
        this.observers.includes(e) && (this.observers = this.observers.filter(i => i !== e),
        this.observers.length || (mt(this, ur) && (mt(this, Hr) ? mt(this, ur).cancel({
            revert: !0
        }) : mt(this, ur).cancelRetry()),
        this.scheduleGc()),
        mt(this, gr).notify({
            type: "observerRemoved",
            query: this,
            observer: e
        }))
    }
    getObserversCount() {
        return this.observers.length
    }
    invalidate() {
        this.state.isInvalidated || cs(this, jr, wr).call(this, {
            type: "invalidate"
        })
    }
    fetch(e, i) {
        var g, b, _;
        if (this.state.fetchStatus !== "idle") {
            if (this.state.data !== void 0 && (i != null && i.cancelRefetch))
                this.cancel({
                    silent: !0
                });
            else if (mt(this, ur))
                return mt(this, ur).continueRetry(),
                mt(this, ur).promise
        }
        if (e && this.setOptions(e),
        !this.options.queryFn) {
            const $ = this.observers.find(_e => _e.options.queryFn);
            $ && this.setOptions($.options)
        }
        const o = new AbortController
          , a = $ => {
            Object.defineProperty($, "signal", {
                enumerable: !0,
                get: () => (us(this, Hr, !0),
                o.signal)
            })
        }
          , c = () => {
            const $ = ensureQueryFn(this.options, i)
              , _e = {
                queryKey: this.queryKey,
                meta: this.meta
            };
            return a(_e),
            us(this, Hr, !1),
            this.options.persister ? this.options.persister($, _e, this) : $(_e)
        }
          , d = {
            fetchOptions: i,
            options: this.options,
            queryKey: this.queryKey,
            state: this.state,
            fetchFn: c
        };
        a(d),
        (g = this.options.behavior) == null || g.onFetch(d, this),
        us(this, nn, this.state),
        (this.state.fetchStatus === "idle" || this.state.fetchMeta !== ((b = d.fetchOptions) == null ? void 0 : b.meta)) && cs(this, jr, wr).call(this, {
            type: "fetch",
            meta: (_ = d.fetchOptions) == null ? void 0 : _.meta
        });
        const h = $ => {
            var _e, tt, rt, et;
            isCancelledError($) && $.silent || cs(this, jr, wr).call(this, {
                type: "error",
                error: $
            }),
            isCancelledError($) || ((tt = (_e = mt(this, gr).config).onError) == null || tt.call(_e, $, this),
            (et = (rt = mt(this, gr).config).onSettled) == null || et.call(rt, this.state.data, $, this)),
            this.scheduleGc()
        }
        ;
        return us(this, ur, createRetryer({
            initialPromise: i == null ? void 0 : i.initialPromise,
            fn: d.fetchFn,
            abort: o.abort.bind(o),
            onSuccess: $ => {
                var _e, tt, rt, et;
                if ($ === void 0) {
                    h(new Error(`${this.queryHash} data is undefined`));
                    return
                }
                try {
                    this.setData($)
                } catch (it) {
                    h(it);
                    return
                }
                (tt = (_e = mt(this, gr).config).onSuccess) == null || tt.call(_e, $, this),
                (et = (rt = mt(this, gr).config).onSettled) == null || et.call(rt, $, this.state.error, this),
                this.scheduleGc()
            }
            ,
            onError: h,
            onFail: ($, _e) => {
                cs(this, jr, wr).call(this, {
                    type: "failed",
                    failureCount: $,
                    error: _e
                })
            }
            ,
            onPause: () => {
                cs(this, jr, wr).call(this, {
                    type: "pause"
                })
            }
            ,
            onContinue: () => {
                cs(this, jr, wr).call(this, {
                    type: "continue"
                })
            }
            ,
            retry: d.options.retry,
            retryDelay: d.options.retryDelay,
            networkMode: d.options.networkMode,
            canRun: () => !0
        })),
        mt(this, ur).start()
    }
}
,
rn = new WeakMap,
nn = new WeakMap,
gr = new WeakMap,
ur = new WeakMap,
Rn = new WeakMap,
Hr = new WeakMap,
jr = new WeakSet,
wr = function(e) {
    const i = o => {
        switch (e.type) {
        case "failed":
            return {
                ...o,
                fetchFailureCount: e.failureCount,
                fetchFailureReason: e.error
            };
        case "pause":
            return {
                ...o,
                fetchStatus: "paused"
            };
        case "continue":
            return {
                ...o,
                fetchStatus: "fetching"
            };
        case "fetch":
            return {
                ...o,
                ...fetchState(o.data, this.options),
                fetchMeta: e.meta ?? null
            };
        case "success":
            return {
                ...o,
                data: e.data,
                dataUpdateCount: o.dataUpdateCount + 1,
                dataUpdatedAt: e.dataUpdatedAt ?? Date.now(),
                error: null,
                isInvalidated: !1,
                status: "success",
                ...!e.manual && {
                    fetchStatus: "idle",
                    fetchFailureCount: 0,
                    fetchFailureReason: null
                }
            };
        case "error":
            const a = e.error;
            return isCancelledError(a) && a.revert && mt(this, nn) ? {
                ...mt(this, nn),
                fetchStatus: "idle"
            } : {
                ...o,
                error: a,
                errorUpdateCount: o.errorUpdateCount + 1,
                errorUpdatedAt: Date.now(),
                fetchFailureCount: o.fetchFailureCount + 1,
                fetchFailureReason: a,
                fetchStatus: "idle",
                status: "error"
            };
        case "invalidate":
            return {
                ...o,
                isInvalidated: !0
            };
        case "setState":
            return {
                ...o,
                ...e.state
            }
        }
    }
    ;
    this.state = i(this.state),
    notifyManager.batch( () => {
        this.observers.forEach(o => {
            o.onQueryUpdate()
        }
        ),
        mt(this, gr).notify({
            query: this,
            type: "updated",
            action: e
        })
    }
    )
}
,
Do);
function fetchState(s, e) {
    return {
        fetchFailureCount: 0,
        fetchFailureReason: null,
        fetchStatus: canFetch(e.networkMode) ? "fetching" : "paused",
        ...s === void 0 && {
            error: null,
            status: "pending"
        }
    }
}
function getDefaultState$1(s) {
    const e = typeof s.initialData == "function" ? s.initialData() : s.initialData
      , i = e !== void 0
      , o = i ? typeof s.initialDataUpdatedAt == "function" ? s.initialDataUpdatedAt() : s.initialDataUpdatedAt : 0;
    return {
        data: e,
        dataUpdateCount: 0,
        dataUpdatedAt: i ? o ?? Date.now() : 0,
        error: null,
        errorUpdateCount: 0,
        errorUpdatedAt: 0,
        fetchFailureCount: 0,
        fetchFailureReason: null,
        fetchMeta: null,
        isInvalidated: !1,
        status: i ? "success" : "pending",
        fetchStatus: "idle"
    }
}
var yr, Oo, QueryCache = (Oo = class extends Subscribable {
    constructor(e={}) {
        super();
        ps(this, yr);
        this.config = e,
        us(this, yr, new Map)
    }
    build(e, i, o) {
        const a = i.queryKey
          , c = i.queryHash ?? hashQueryKeyByOptions(a, i);
        let d = this.get(c);
        return d || (d = new Query({
            cache: this,
            queryKey: a,
            queryHash: c,
            options: e.defaultQueryOptions(i),
            state: o,
            defaultOptions: e.getQueryDefaults(a)
        }),
        this.add(d)),
        d
    }
    add(e) {
        mt(this, yr).has(e.queryHash) || (mt(this, yr).set(e.queryHash, e),
        this.notify({
            type: "added",
            query: e
        }))
    }
    remove(e) {
        const i = mt(this, yr).get(e.queryHash);
        i && (e.destroy(),
        i === e && mt(this, yr).delete(e.queryHash),
        this.notify({
            type: "removed",
            query: e
        }))
    }
    clear() {
        notifyManager.batch( () => {
            this.getAll().forEach(e => {
                this.remove(e)
            }
            )
        }
        )
    }
    get(e) {
        return mt(this, yr).get(e)
    }
    getAll() {
        return [...mt(this, yr).values()]
    }
    find(e) {
        const i = {
            exact: !0,
            ...e
        };
        return this.getAll().find(o => matchQuery(i, o))
    }
    findAll(e={}) {
        const i = this.getAll();
        return Object.keys(e).length > 0 ? i.filter(o => matchQuery(e, o)) : i
    }
    notify(e) {
        notifyManager.batch( () => {
            this.listeners.forEach(i => {
                i(e)
            }
            )
        }
        )
    }
    onFocus() {
        notifyManager.batch( () => {
            this.getAll().forEach(e => {
                e.onFocus()
            }
            )
        }
        )
    }
    onOnline() {
        notifyManager.batch( () => {
            this.getAll().forEach(e => {
                e.onOnline()
            }
            )
        }
        )
    }
}
,
yr = new WeakMap,
Oo), Er, dr, Wr, vr, Tr, Fo, Mutation = (Fo = class extends Removable {
    constructor(e) {
        super();
        ps(this, vr);
        ps(this, Er);
        ps(this, dr);
        ps(this, Wr);
        this.mutationId = e.mutationId,
        us(this, dr, e.mutationCache),
        us(this, Er, []),
        this.state = e.state || getDefaultState(),
        this.setOptions(e.options),
        this.scheduleGc()
    }
    setOptions(e) {
        this.options = e,
        this.updateGcTime(this.options.gcTime)
    }
    get meta() {
        return this.options.meta
    }
    addObserver(e) {
        mt(this, Er).includes(e) || (mt(this, Er).push(e),
        this.clearGcTimeout(),
        mt(this, dr).notify({
            type: "observerAdded",
            mutation: this,
            observer: e
        }))
    }
    removeObserver(e) {
        us(this, Er, mt(this, Er).filter(i => i !== e)),
        this.scheduleGc(),
        mt(this, dr).notify({
            type: "observerRemoved",
            mutation: this,
            observer: e
        })
    }
    optionalRemove() {
        mt(this, Er).length || (this.state.status === "pending" ? this.scheduleGc() : mt(this, dr).remove(this))
    }
    continue() {
        var e;
        return ((e = mt(this, Wr)) == null ? void 0 : e.continue()) ?? this.execute(this.state.variables)
    }
    async execute(e) {
        var a, c, d, h, g, b, _, $, _e, tt, rt, et, it, st, nt, lt, dt, ot, at, ht;
        us(this, Wr, createRetryer({
            fn: () => this.options.mutationFn ? this.options.mutationFn(e) : Promise.reject(new Error("No mutationFn found")),
            onFail: (pt, gt) => {
                cs(this, vr, Tr).call(this, {
                    type: "failed",
                    failureCount: pt,
                    error: gt
                })
            }
            ,
            onPause: () => {
                cs(this, vr, Tr).call(this, {
                    type: "pause"
                })
            }
            ,
            onContinue: () => {
                cs(this, vr, Tr).call(this, {
                    type: "continue"
                })
            }
            ,
            retry: this.options.retry ?? 0,
            retryDelay: this.options.retryDelay,
            networkMode: this.options.networkMode,
            canRun: () => mt(this, dr).canRun(this)
        }));
        const i = this.state.status === "pending"
          , o = !mt(this, Wr).canStart();
        try {
            if (!i) {
                cs(this, vr, Tr).call(this, {
                    type: "pending",
                    variables: e,
                    isPaused: o
                }),
                await ((c = (a = mt(this, dr).config).onMutate) == null ? void 0 : c.call(a, e, this));
                const gt = await ((h = (d = this.options).onMutate) == null ? void 0 : h.call(d, e));
                gt !== this.state.context && cs(this, vr, Tr).call(this, {
                    type: "pending",
                    context: gt,
                    variables: e,
                    isPaused: o
                })
            }
            const pt = await mt(this, Wr).start();
            return await ((b = (g = mt(this, dr).config).onSuccess) == null ? void 0 : b.call(g, pt, e, this.state.context, this)),
            await (($ = (_ = this.options).onSuccess) == null ? void 0 : $.call(_, pt, e, this.state.context)),
            await ((tt = (_e = mt(this, dr).config).onSettled) == null ? void 0 : tt.call(_e, pt, null, this.state.variables, this.state.context, this)),
            await ((et = (rt = this.options).onSettled) == null ? void 0 : et.call(rt, pt, null, e, this.state.context)),
            cs(this, vr, Tr).call(this, {
                type: "success",
                data: pt
            }),
            pt
        } catch (pt) {
            try {
                throw await ((st = (it = mt(this, dr).config).onError) == null ? void 0 : st.call(it, pt, e, this.state.context, this)),
                await ((lt = (nt = this.options).onError) == null ? void 0 : lt.call(nt, pt, e, this.state.context)),
                await ((ot = (dt = mt(this, dr).config).onSettled) == null ? void 0 : ot.call(dt, void 0, pt, this.state.variables, this.state.context, this)),
                await ((ht = (at = this.options).onSettled) == null ? void 0 : ht.call(at, void 0, pt, e, this.state.context)),
                pt
            } finally {
                cs(this, vr, Tr).call(this, {
                    type: "error",
                    error: pt
                })
            }
        } finally {
            mt(this, dr).runNext(this)
        }
    }
}
,
Er = new WeakMap,
dr = new WeakMap,
Wr = new WeakMap,
vr = new WeakSet,
Tr = function(e) {
    const i = o => {
        switch (e.type) {
        case "failed":
            return {
                ...o,
                failureCount: e.failureCount,
                failureReason: e.error
            };
        case "pause":
            return {
                ...o,
                isPaused: !0
            };
        case "continue":
            return {
                ...o,
                isPaused: !1
            };
        case "pending":
            return {
                ...o,
                context: e.context,
                data: void 0,
                failureCount: 0,
                failureReason: null,
                error: null,
                isPaused: e.isPaused,
                status: "pending",
                variables: e.variables,
                submittedAt: Date.now()
            };
        case "success":
            return {
                ...o,
                data: e.data,
                failureCount: 0,
                failureReason: null,
                error: null,
                status: "success",
                isPaused: !1
            };
        case "error":
            return {
                ...o,
                data: void 0,
                error: e.error,
                failureCount: o.failureCount + 1,
                failureReason: e.error,
                isPaused: !1,
                status: "error"
            }
        }
    }
    ;
    this.state = i(this.state),
    notifyManager.batch( () => {
        mt(this, Er).forEach(o => {
            o.onMutationUpdate(e)
        }
        ),
        mt(this, dr).notify({
            mutation: this,
            type: "updated",
            action: e
        })
    }
    )
}
,
Fo);
function getDefaultState() {
    return {
        context: void 0,
        data: void 0,
        error: null,
        failureCount: 0,
        failureReason: null,
        isPaused: !1,
        status: "idle",
        variables: void 0,
        submittedAt: 0
    }
}
var xr, wn, $o, MutationCache = ($o = class extends Subscribable {
    constructor(e={}) {
        super();
        ps(this, xr);
        ps(this, wn);
        this.config = e,
        us(this, xr, new Map),
        us(this, wn, Date.now())
    }
    build(e, i, o) {
        const a = new Mutation({
            mutationCache: this,
            mutationId: ++kr(this, wn)._,
            options: e.defaultMutationOptions(i),
            state: o
        });
        return this.add(a),
        a
    }
    add(e) {
        const i = scopeFor(e)
          , o = mt(this, xr).get(i) ?? [];
        o.push(e),
        mt(this, xr).set(i, o),
        this.notify({
            type: "added",
            mutation: e
        })
    }
    remove(e) {
        var o;
        const i = scopeFor(e);
        if (mt(this, xr).has(i)) {
            const a = (o = mt(this, xr).get(i)) == null ? void 0 : o.filter(c => c !== e);
            a && (a.length === 0 ? mt(this, xr).delete(i) : mt(this, xr).set(i, a))
        }
        this.notify({
            type: "removed",
            mutation: e
        })
    }
    canRun(e) {
        var o;
        const i = (o = mt(this, xr).get(scopeFor(e))) == null ? void 0 : o.find(a => a.state.status === "pending");
        return !i || i === e
    }
    runNext(e) {
        var o;
        const i = (o = mt(this, xr).get(scopeFor(e))) == null ? void 0 : o.find(a => a !== e && a.state.isPaused);
        return (i == null ? void 0 : i.continue()) ?? Promise.resolve()
    }
    clear() {
        notifyManager.batch( () => {
            this.getAll().forEach(e => {
                this.remove(e)
            }
            )
        }
        )
    }
    getAll() {
        return [...mt(this, xr).values()].flat()
    }
    find(e) {
        const i = {
            exact: !0,
            ...e
        };
        return this.getAll().find(o => matchMutation(i, o))
    }
    findAll(e={}) {
        return this.getAll().filter(i => matchMutation(e, i))
    }
    notify(e) {
        notifyManager.batch( () => {
            this.listeners.forEach(i => {
                i(e)
            }
            )
        }
        )
    }
    resumePausedMutations() {
        const e = this.getAll().filter(i => i.state.isPaused);
        return notifyManager.batch( () => Promise.all(e.map(i => i.continue().catch(noop$4))))
    }
}
,
xr = new WeakMap,
wn = new WeakMap,
$o);
function scopeFor(s) {
    var e;
    return ((e = s.options.scope) == null ? void 0 : e.id) ?? String(s.mutationId)
}
function infiniteQueryBehavior(s) {
    return {
        onFetch: (e, i) => {
            var _, $, _e, tt, rt;
            const o = e.options
              , a = (_e = ($ = (_ = e.fetchOptions) == null ? void 0 : _.meta) == null ? void 0 : $.fetchMore) == null ? void 0 : _e.direction
              , c = ((tt = e.state.data) == null ? void 0 : tt.pages) || []
              , d = ((rt = e.state.data) == null ? void 0 : rt.pageParams) || [];
            let h = {
                pages: [],
                pageParams: []
            }
              , g = 0;
            const b = async () => {
                let et = !1;
                const it = lt => {
                    Object.defineProperty(lt, "signal", {
                        enumerable: !0,
                        get: () => (e.signal.aborted ? et = !0 : e.signal.addEventListener("abort", () => {
                            et = !0
                        }
                        ),
                        e.signal)
                    })
                }
                  , st = ensureQueryFn(e.options, e.fetchOptions)
                  , nt = async (lt, dt, ot) => {
                    if (et)
                        return Promise.reject();
                    if (dt == null && lt.pages.length)
                        return Promise.resolve(lt);
                    const at = {
                        queryKey: e.queryKey,
                        pageParam: dt,
                        direction: ot ? "backward" : "forward",
                        meta: e.options.meta
                    };
                    it(at);
                    const ht = await st(at)
                      , {maxPages: pt} = e.options
                      , gt = ot ? addToStart : addToEnd;
                    return {
                        pages: gt(lt.pages, ht, pt),
                        pageParams: gt(lt.pageParams, dt, pt)
                    }
                }
                ;
                if (a && c.length) {
                    const lt = a === "backward"
                      , dt = lt ? getPreviousPageParam : getNextPageParam
                      , ot = {
                        pages: c,
                        pageParams: d
                    }
                      , at = dt(o, ot);
                    h = await nt(ot, at, lt)
                } else {
                    const lt = s ?? c.length;
                    do {
                        const dt = g === 0 ? d[0] ?? o.initialPageParam : getNextPageParam(o, h);
                        if (g > 0 && dt == null)
                            break;
                        h = await nt(h, dt),
                        g++
                    } while (g < lt)
                }
                return h
            }
            ;
            e.options.persister ? e.fetchFn = () => {
                var et, it;
                return (it = (et = e.options).persister) == null ? void 0 : it.call(et, b, {
                    queryKey: e.queryKey,
                    meta: e.options.meta,
                    signal: e.signal
                }, i)
            }
            : e.fetchFn = b
        }
    }
}
function getNextPageParam(s, {pages: e, pageParams: i}) {
    const o = e.length - 1;
    return e.length > 0 ? s.getNextPageParam(e[o], e, i[o], i) : void 0
}
function getPreviousPageParam(s, {pages: e, pageParams: i}) {
    var o;
    return e.length > 0 ? (o = s.getPreviousPageParam) == null ? void 0 : o.call(s, e[0], e, i[0], i) : void 0
}
function hasNextPage(s, e) {
    return e ? getNextPageParam(s, e) != null : !1
}
function hasPreviousPage(s, e) {
    return !e || !s.getPreviousPageParam ? !1 : getPreviousPageParam(s, e) != null
}
var lr, Mr, Lr, on, an, Dr, ln, un, Bo, QueryClient = (Bo = class {
    constructor(s={}) {
        ps(this, lr);
        ps(this, Mr);
        ps(this, Lr);
        ps(this, on);
        ps(this, an);
        ps(this, Dr);
        ps(this, ln);
        ps(this, un);
        us(this, lr, s.queryCache || new QueryCache),
        us(this, Mr, s.mutationCache || new MutationCache),
        us(this, Lr, s.defaultOptions || {}),
        us(this, on, new Map),
        us(this, an, new Map),
        us(this, Dr, 0)
    }
    mount() {
        kr(this, Dr)._++,
        mt(this, Dr) === 1 && (us(this, ln, focusManager.subscribe(async s => {
            s && (await this.resumePausedMutations(),
            mt(this, lr).onFocus())
        }
        )),
        us(this, un, onlineManager.subscribe(async s => {
            s && (await this.resumePausedMutations(),
            mt(this, lr).onOnline())
        }
        )))
    }
    unmount() {
        var s, e;
        kr(this, Dr)._--,
        mt(this, Dr) === 0 && ((s = mt(this, ln)) == null || s.call(this),
        us(this, ln, void 0),
        (e = mt(this, un)) == null || e.call(this),
        us(this, un, void 0))
    }
    isFetching(s) {
        return mt(this, lr).findAll({
            ...s,
            fetchStatus: "fetching"
        }).length
    }
    isMutating(s) {
        return mt(this, Mr).findAll({
            ...s,
            status: "pending"
        }).length
    }
    getQueryData(s) {
        var i;
        const e = this.defaultQueryOptions({
            queryKey: s
        });
        return (i = mt(this, lr).get(e.queryHash)) == null ? void 0 : i.state.data
    }
    ensureQueryData(s) {
        const e = this.getQueryData(s.queryKey);
        if (e === void 0)
            return this.fetchQuery(s);
        {
            const i = this.defaultQueryOptions(s)
              , o = mt(this, lr).build(this, i);
            return s.revalidateIfStale && o.isStaleByTime(resolveStaleTime(i.staleTime, o)) && this.prefetchQuery(i),
            Promise.resolve(e)
        }
    }
    getQueriesData(s) {
        return mt(this, lr).findAll(s).map( ({queryKey: e, state: i}) => {
            const o = i.data;
            return [e, o]
        }
        )
    }
    setQueryData(s, e, i) {
        const o = this.defaultQueryOptions({
            queryKey: s
        })
          , a = mt(this, lr).get(o.queryHash)
          , c = a == null ? void 0 : a.state.data
          , d = functionalUpdate(e, c);
        if (d !== void 0)
            return mt(this, lr).build(this, o).setData(d, {
                ...i,
                manual: !0
            })
    }
    setQueriesData(s, e, i) {
        return notifyManager.batch( () => mt(this, lr).findAll(s).map( ({queryKey: o}) => [o, this.setQueryData(o, e, i)]))
    }
    getQueryState(s) {
        var i;
        const e = this.defaultQueryOptions({
            queryKey: s
        });
        return (i = mt(this, lr).get(e.queryHash)) == null ? void 0 : i.state
    }
    removeQueries(s) {
        const e = mt(this, lr);
        notifyManager.batch( () => {
            e.findAll(s).forEach(i => {
                e.remove(i)
            }
            )
        }
        )
    }
    resetQueries(s, e) {
        const i = mt(this, lr)
          , o = {
            type: "active",
            ...s
        };
        return notifyManager.batch( () => (i.findAll(s).forEach(a => {
            a.reset()
        }
        ),
        this.refetchQueries(o, e)))
    }
    cancelQueries(s={}, e={}) {
        const i = {
            revert: !0,
            ...e
        }
          , o = notifyManager.batch( () => mt(this, lr).findAll(s).map(a => a.cancel(i)));
        return Promise.all(o).then(noop$4).catch(noop$4)
    }
    invalidateQueries(s={}, e={}) {
        return notifyManager.batch( () => {
            if (mt(this, lr).findAll(s).forEach(o => {
                o.invalidate()
            }
            ),
            s.refetchType === "none")
                return Promise.resolve();
            const i = {
                ...s,
                type: s.refetchType ?? s.type ?? "active"
            };
            return this.refetchQueries(i, e)
        }
        )
    }
    refetchQueries(s={}, e) {
        const i = {
            ...e,
            cancelRefetch: (e == null ? void 0 : e.cancelRefetch) ?? !0
        }
          , o = notifyManager.batch( () => mt(this, lr).findAll(s).filter(a => !a.isDisabled()).map(a => {
            let c = a.fetch(void 0, i);
            return i.throwOnError || (c = c.catch(noop$4)),
            a.state.fetchStatus === "paused" ? Promise.resolve() : c
        }
        ));
        return Promise.all(o).then(noop$4)
    }
    fetchQuery(s) {
        const e = this.defaultQueryOptions(s);
        e.retry === void 0 && (e.retry = !1);
        const i = mt(this, lr).build(this, e);
        return i.isStaleByTime(resolveStaleTime(e.staleTime, i)) ? i.fetch(e) : Promise.resolve(i.state.data)
    }
    prefetchQuery(s) {
        return this.fetchQuery(s).then(noop$4).catch(noop$4)
    }
    fetchInfiniteQuery(s) {
        return s.behavior = infiniteQueryBehavior(s.pages),
        this.fetchQuery(s)
    }
    prefetchInfiniteQuery(s) {
        return this.fetchInfiniteQuery(s).then(noop$4).catch(noop$4)
    }
    ensureInfiniteQueryData(s) {
        return s.behavior = infiniteQueryBehavior(s.pages),
        this.ensureQueryData(s)
    }
    resumePausedMutations() {
        return onlineManager.isOnline() ? mt(this, Mr).resumePausedMutations() : Promise.resolve()
    }
    getQueryCache() {
        return mt(this, lr)
    }
    getMutationCache() {
        return mt(this, Mr)
    }
    getDefaultOptions() {
        return mt(this, Lr)
    }
    setDefaultOptions(s) {
        us(this, Lr, s)
    }
    setQueryDefaults(s, e) {
        mt(this, on).set(hashKey(s), {
            queryKey: s,
            defaultOptions: e
        })
    }
    getQueryDefaults(s) {
        const e = [...mt(this, on).values()];
        let i = {};
        return e.forEach(o => {
            partialMatchKey(s, o.queryKey) && (i = {
                ...i,
                ...o.defaultOptions
            })
        }
        ),
        i
    }
    setMutationDefaults(s, e) {
        mt(this, an).set(hashKey(s), {
            mutationKey: s,
            defaultOptions: e
        })
    }
    getMutationDefaults(s) {
        const e = [...mt(this, an).values()];
        let i = {};
        return e.forEach(o => {
            partialMatchKey(s, o.mutationKey) && (i = {
                ...i,
                ...o.defaultOptions
            })
        }
        ),
        i
    }
    defaultQueryOptions(s) {
        if (s._defaulted)
            return s;
        const e = {
            ...mt(this, Lr).queries,
            ...this.getQueryDefaults(s.queryKey),
            ...s,
            _defaulted: !0
        };
        return e.queryHash || (e.queryHash = hashQueryKeyByOptions(e.queryKey, e)),
        e.refetchOnReconnect === void 0 && (e.refetchOnReconnect = e.networkMode !== "always"),
        e.throwOnError === void 0 && (e.throwOnError = !!e.suspense),
        !e.networkMode && e.persister && (e.networkMode = "offlineFirst"),
        e.enabled !== !0 && e.queryFn === skipToken && (e.enabled = !1),
        e
    }
    defaultMutationOptions(s) {
        return s != null && s._defaulted ? s : {
            ...mt(this, Lr).mutations,
            ...(s == null ? void 0 : s.mutationKey) && this.getMutationDefaults(s.mutationKey),
            ...s,
            _defaulted: !0
        }
    }
    clear() {
        mt(this, lr).clear(),
        mt(this, Mr).clear()
    }
}
,
lr = new WeakMap,
Mr = new WeakMap,
Lr = new WeakMap,
on = new WeakMap,
an = new WeakMap,
Dr = new WeakMap,
ln = new WeakMap,
un = new WeakMap,
Bo), hr, nr, Sn, mr, Gr, dn, Or, br, Nn, mn, hn, qr, Kr, Fr, pn, or, xn, Vn, Hn, Wn, Gn, qn, Kn, Jn, Vo, Uo, QueryObserver = (Uo = class extends Subscribable {
    constructor(e, i) {
        super();
        ps(this, or);
        ps(this, hr);
        ps(this, nr);
        ps(this, Sn);
        ps(this, mr);
        ps(this, Gr);
        ps(this, dn);
        ps(this, Or);
        ps(this, br);
        ps(this, Nn);
        ps(this, mn);
        ps(this, hn);
        ps(this, qr);
        ps(this, Kr);
        ps(this, Fr);
        ps(this, pn, new Set);
        this.options = i,
        us(this, hr, e),
        us(this, br, null),
        us(this, Or, pendingThenable()),
        this.options.experimental_prefetchInRender || mt(this, Or).reject(new Error("experimental_prefetchInRender feature flag is not enabled")),
        this.bindMethods(),
        this.setOptions(i)
    }
    bindMethods() {
        this.refetch = this.refetch.bind(this)
    }
    onSubscribe() {
        this.listeners.size === 1 && (mt(this, nr).addObserver(this),
        shouldFetchOnMount(mt(this, nr), this.options) ? cs(this, or, xn).call(this) : this.updateResult(),
        cs(this, or, Gn).call(this))
    }
    onUnsubscribe() {
        this.hasListeners() || this.destroy()
    }
    shouldFetchOnReconnect() {
        return shouldFetchOn(mt(this, nr), this.options, this.options.refetchOnReconnect)
    }
    shouldFetchOnWindowFocus() {
        return shouldFetchOn(mt(this, nr), this.options, this.options.refetchOnWindowFocus)
    }
    destroy() {
        this.listeners = new Set,
        cs(this, or, qn).call(this),
        cs(this, or, Kn).call(this),
        mt(this, nr).removeObserver(this)
    }
    setOptions(e, i) {
        const o = this.options
          , a = mt(this, nr);
        if (this.options = mt(this, hr).defaultQueryOptions(e),
        this.options.enabled !== void 0 && typeof this.options.enabled != "boolean" && typeof this.options.enabled != "function" && typeof resolveEnabled(this.options.enabled, mt(this, nr)) != "boolean")
            throw new Error("Expected enabled to be a boolean or a callback that returns a boolean");
        cs(this, or, Jn).call(this),
        mt(this, nr).setOptions(this.options),
        o._defaulted && !shallowEqualObjects(this.options, o) && mt(this, hr).getQueryCache().notify({
            type: "observerOptionsUpdated",
            query: mt(this, nr),
            observer: this
        });
        const c = this.hasListeners();
        c && shouldFetchOptionally(mt(this, nr), a, this.options, o) && cs(this, or, xn).call(this),
        this.updateResult(i),
        c && (mt(this, nr) !== a || resolveEnabled(this.options.enabled, mt(this, nr)) !== resolveEnabled(o.enabled, mt(this, nr)) || resolveStaleTime(this.options.staleTime, mt(this, nr)) !== resolveStaleTime(o.staleTime, mt(this, nr))) && cs(this, or, Vn).call(this);
        const d = cs(this, or, Hn).call(this);
        c && (mt(this, nr) !== a || resolveEnabled(this.options.enabled, mt(this, nr)) !== resolveEnabled(o.enabled, mt(this, nr)) || d !== mt(this, Fr)) && cs(this, or, Wn).call(this, d)
    }
    getOptimisticResult(e) {
        const i = mt(this, hr).getQueryCache().build(mt(this, hr), e)
          , o = this.createResult(i, e);
        return shouldAssignObserverCurrentProperties(this, o) && (us(this, mr, o),
        us(this, dn, this.options),
        us(this, Gr, mt(this, nr).state)),
        o
    }
    getCurrentResult() {
        return mt(this, mr)
    }
    trackResult(e, i) {
        const o = {};
        return Object.keys(e).forEach(a => {
            Object.defineProperty(o, a, {
                configurable: !1,
                enumerable: !0,
                get: () => (this.trackProp(a),
                i == null || i(a),
                e[a])
            })
        }
        ),
        o
    }
    trackProp(e) {
        mt(this, pn).add(e)
    }
    getCurrentQuery() {
        return mt(this, nr)
    }
    refetch({...e}={}) {
        return this.fetch({
            ...e
        })
    }
    fetchOptimistic(e) {
        const i = mt(this, hr).defaultQueryOptions(e)
          , o = mt(this, hr).getQueryCache().build(mt(this, hr), i);
        return o.fetch().then( () => this.createResult(o, i))
    }
    fetch(e) {
        return cs(this, or, xn).call(this, {
            ...e,
            cancelRefetch: e.cancelRefetch ?? !0
        }).then( () => (this.updateResult(),
        mt(this, mr)))
    }
    createResult(e, i) {
        var pt;
        const o = mt(this, nr)
          , a = this.options
          , c = mt(this, mr)
          , d = mt(this, Gr)
          , h = mt(this, dn)
          , b = e !== o ? e.state : mt(this, Sn)
          , {state: _} = e;
        let $ = {
            ..._
        }, _e = !1, tt;
        if (i._optimisticResults) {
            const gt = this.hasListeners()
              , wt = !gt && shouldFetchOnMount(e, i)
              , yt = gt && shouldFetchOptionally(e, o, i, a);
            (wt || yt) && ($ = {
                ...$,
                ...fetchState(_.data, e.options)
            }),
            i._optimisticResults === "isRestoring" && ($.fetchStatus = "idle")
        }
        let {error: rt, errorUpdatedAt: et, status: it} = $;
        if (i.select && $.data !== void 0)
            if (c && $.data === (d == null ? void 0 : d.data) && i.select === mt(this, Nn))
                tt = mt(this, mn);
            else
                try {
                    us(this, Nn, i.select),
                    tt = i.select($.data),
                    tt = replaceData(c == null ? void 0 : c.data, tt, i),
                    us(this, mn, tt),
                    us(this, br, null)
                } catch (gt) {
                    us(this, br, gt)
                }
        else
            tt = $.data;
        if (i.placeholderData !== void 0 && tt === void 0 && it === "pending") {
            let gt;
            if (c != null && c.isPlaceholderData && i.placeholderData === (h == null ? void 0 : h.placeholderData))
                gt = c.data;
            else if (gt = typeof i.placeholderData == "function" ? i.placeholderData((pt = mt(this, hn)) == null ? void 0 : pt.state.data, mt(this, hn)) : i.placeholderData,
            i.select && gt !== void 0)
                try {
                    gt = i.select(gt),
                    us(this, br, null)
                } catch (wt) {
                    us(this, br, wt)
                }
            gt !== void 0 && (it = "success",
            tt = replaceData(c == null ? void 0 : c.data, gt, i),
            _e = !0)
        }
        mt(this, br) && (rt = mt(this, br),
        tt = mt(this, mn),
        et = Date.now(),
        it = "error");
        const st = $.fetchStatus === "fetching"
          , nt = it === "pending"
          , lt = it === "error"
          , dt = nt && st
          , ot = tt !== void 0
          , ht = {
            status: it,
            fetchStatus: $.fetchStatus,
            isPending: nt,
            isSuccess: it === "success",
            isError: lt,
            isInitialLoading: dt,
            isLoading: dt,
            data: tt,
            dataUpdatedAt: $.dataUpdatedAt,
            error: rt,
            errorUpdatedAt: et,
            failureCount: $.fetchFailureCount,
            failureReason: $.fetchFailureReason,
            errorUpdateCount: $.errorUpdateCount,
            isFetched: $.dataUpdateCount > 0 || $.errorUpdateCount > 0,
            isFetchedAfterMount: $.dataUpdateCount > b.dataUpdateCount || $.errorUpdateCount > b.errorUpdateCount,
            isFetching: st,
            isRefetching: st && !nt,
            isLoadingError: lt && !ot,
            isPaused: $.fetchStatus === "paused",
            isPlaceholderData: _e,
            isRefetchError: lt && ot,
            isStale: isStale(e, i),
            refetch: this.refetch,
            promise: mt(this, Or)
        };
        if (this.options.experimental_prefetchInRender) {
            const gt = Rt => {
                ht.status === "error" ? Rt.reject(ht.error) : ht.data !== void 0 && Rt.resolve(ht.data)
            }
              , wt = () => {
                const Rt = us(this, Or, ht.promise = pendingThenable());
                gt(Rt)
            }
              , yt = mt(this, Or);
            switch (yt.status) {
            case "pending":
                e.queryHash === o.queryHash && gt(yt);
                break;
            case "fulfilled":
                (ht.status === "error" || ht.data !== yt.value) && wt();
                break;
            case "rejected":
                (ht.status !== "error" || ht.error !== yt.reason) && wt();
                break
            }
        }
        return ht
    }
    updateResult(e) {
        const i = mt(this, mr)
          , o = this.createResult(mt(this, nr), this.options);
        if (us(this, Gr, mt(this, nr).state),
        us(this, dn, this.options),
        mt(this, Gr).data !== void 0 && us(this, hn, mt(this, nr)),
        shallowEqualObjects(o, i))
            return;
        us(this, mr, o);
        const a = {}
          , c = () => {
            if (!i)
                return !0;
            const {notifyOnChangeProps: d} = this.options
              , h = typeof d == "function" ? d() : d;
            if (h === "all" || !h && !mt(this, pn).size)
                return !0;
            const g = new Set(h ?? mt(this, pn));
            return this.options.throwOnError && g.add("error"),
            Object.keys(mt(this, mr)).some(b => {
                const _ = b;
                return mt(this, mr)[_] !== i[_] && g.has(_)
            }
            )
        }
        ;
        (e == null ? void 0 : e.listeners) !== !1 && c() && (a.listeners = !0),
        cs(this, or, Vo).call(this, {
            ...a,
            ...e
        })
    }
    onQueryUpdate() {
        this.updateResult(),
        this.hasListeners() && cs(this, or, Gn).call(this)
    }
}
,
hr = new WeakMap,
nr = new WeakMap,
Sn = new WeakMap,
mr = new WeakMap,
Gr = new WeakMap,
dn = new WeakMap,
Or = new WeakMap,
br = new WeakMap,
Nn = new WeakMap,
mn = new WeakMap,
hn = new WeakMap,
qr = new WeakMap,
Kr = new WeakMap,
Fr = new WeakMap,
pn = new WeakMap,
or = new WeakSet,
xn = function(e) {
    cs(this, or, Jn).call(this);
    let i = mt(this, nr).fetch(this.options, e);
    return e != null && e.throwOnError || (i = i.catch(noop$4)),
    i
}
,
Vn = function() {
    cs(this, or, qn).call(this);
    const e = resolveStaleTime(this.options.staleTime, mt(this, nr));
    if (isServer || mt(this, mr).isStale || !isValidTimeout(e))
        return;
    const o = timeUntilStale(mt(this, mr).dataUpdatedAt, e) + 1;
    us(this, qr, setTimeout( () => {
        mt(this, mr).isStale || this.updateResult()
    }
    , o))
}
,
Hn = function() {
    return (typeof this.options.refetchInterval == "function" ? this.options.refetchInterval(mt(this, nr)) : this.options.refetchInterval) ?? !1
}
,
Wn = function(e) {
    cs(this, or, Kn).call(this),
    us(this, Fr, e),
    !(isServer || resolveEnabled(this.options.enabled, mt(this, nr)) === !1 || !isValidTimeout(mt(this, Fr)) || mt(this, Fr) === 0) && us(this, Kr, setInterval( () => {
        (this.options.refetchIntervalInBackground || focusManager.isFocused()) && cs(this, or, xn).call(this)
    }
    , mt(this, Fr)))
}
,
Gn = function() {
    cs(this, or, Vn).call(this),
    cs(this, or, Wn).call(this, cs(this, or, Hn).call(this))
}
,
qn = function() {
    mt(this, qr) && (clearTimeout(mt(this, qr)),
    us(this, qr, void 0))
}
,
Kn = function() {
    mt(this, Kr) && (clearInterval(mt(this, Kr)),
    us(this, Kr, void 0))
}
,
Jn = function() {
    const e = mt(this, hr).getQueryCache().build(mt(this, hr), this.options);
    if (e === mt(this, nr))
        return;
    const i = mt(this, nr);
    us(this, nr, e),
    us(this, Sn, e.state),
    this.hasListeners() && (i == null || i.removeObserver(this),
    e.addObserver(this))
}
,
Vo = function(e) {
    notifyManager.batch( () => {
        e.listeners && this.listeners.forEach(i => {
            i(mt(this, mr))
        }
        ),
        mt(this, hr).getQueryCache().notify({
            query: mt(this, nr),
            type: "observerResultsUpdated"
        })
    }
    )
}
,
Uo);
function shouldLoadOnMount(s, e) {
    return resolveEnabled(e.enabled, s) !== !1 && s.state.data === void 0 && !(s.state.status === "error" && e.retryOnMount === !1)
}
function shouldFetchOnMount(s, e) {
    return shouldLoadOnMount(s, e) || s.state.data !== void 0 && shouldFetchOn(s, e, e.refetchOnMount)
}
function shouldFetchOn(s, e, i) {
    if (resolveEnabled(e.enabled, s) !== !1) {
        const o = typeof i == "function" ? i(s) : i;
        return o === "always" || o !== !1 && isStale(s, e)
    }
    return !1
}
function shouldFetchOptionally(s, e, i, o) {
    return (s !== e || resolveEnabled(o.enabled, s) === !1) && (!i.suspense || s.state.status !== "error") && isStale(s, i)
}
function isStale(s, e) {
    return resolveEnabled(e.enabled, s) !== !1 && s.isStaleByTime(resolveStaleTime(e.staleTime, s))
}
function shouldAssignObserverCurrentProperties(s, e) {
    return !shallowEqualObjects(s.getCurrentResult(), e)
}
var InfiniteQueryObserver = class extends QueryObserver {
    constructor(s, e) {
        super(s, e)
    }
    bindMethods() {
        super.bindMethods(),
        this.fetchNextPage = this.fetchNextPage.bind(this),
        this.fetchPreviousPage = this.fetchPreviousPage.bind(this)
    }
    setOptions(s, e) {
        super.setOptions({
            ...s,
            behavior: infiniteQueryBehavior()
        }, e)
    }
    getOptimisticResult(s) {
        return s.behavior = infiniteQueryBehavior(),
        super.getOptimisticResult(s)
    }
    fetchNextPage(s) {
        return this.fetch({
            ...s,
            meta: {
                fetchMore: {
                    direction: "forward"
                }
            }
        })
    }
    fetchPreviousPage(s) {
        return this.fetch({
            ...s,
            meta: {
                fetchMore: {
                    direction: "backward"
                }
            }
        })
    }
    createResult(s, e) {
        var rt, et;
        const {state: i} = s
          , o = super.createResult(s, e)
          , {isFetching: a, isRefetching: c, isError: d, isRefetchError: h} = o
          , g = (et = (rt = i.fetchMeta) == null ? void 0 : rt.fetchMore) == null ? void 0 : et.direction
          , b = d && g === "forward"
          , _ = a && g === "forward"
          , $ = d && g === "backward"
          , _e = a && g === "backward";
        return {
            ...o,
            fetchNextPage: this.fetchNextPage,
            fetchPreviousPage: this.fetchPreviousPage,
            hasNextPage: hasNextPage(e, i.data),
            hasPreviousPage: hasPreviousPage(e, i.data),
            isFetchNextPageError: b,
            isFetchingNextPage: _,
            isFetchPreviousPageError: $,
            isFetchingPreviousPage: _e,
            isRefetchError: h && !b && !$,
            isRefetching: c && !_ && !_e
        }
    }
}
, $r, Br, pr, Nr, Cr, Cn, Yn, zo, MutationObserver$1 = (zo = class extends Subscribable {
    constructor(i, o) {
        super();
        ps(this, Cr);
        ps(this, $r);
        ps(this, Br);
        ps(this, pr);
        ps(this, Nr);
        us(this, $r, i),
        this.setOptions(o),
        this.bindMethods(),
        cs(this, Cr, Cn).call(this)
    }
    bindMethods() {
        this.mutate = this.mutate.bind(this),
        this.reset = this.reset.bind(this)
    }
    setOptions(i) {
        var a;
        const o = this.options;
        this.options = mt(this, $r).defaultMutationOptions(i),
        shallowEqualObjects(this.options, o) || mt(this, $r).getMutationCache().notify({
            type: "observerOptionsUpdated",
            mutation: mt(this, pr),
            observer: this
        }),
        o != null && o.mutationKey && this.options.mutationKey && hashKey(o.mutationKey) !== hashKey(this.options.mutationKey) ? this.reset() : ((a = mt(this, pr)) == null ? void 0 : a.state.status) === "pending" && mt(this, pr).setOptions(this.options)
    }
    onUnsubscribe() {
        var i;
        this.hasListeners() || (i = mt(this, pr)) == null || i.removeObserver(this)
    }
    onMutationUpdate(i) {
        cs(this, Cr, Cn).call(this),
        cs(this, Cr, Yn).call(this, i)
    }
    getCurrentResult() {
        return mt(this, Br)
    }
    reset() {
        var i;
        (i = mt(this, pr)) == null || i.removeObserver(this),
        us(this, pr, void 0),
        cs(this, Cr, Cn).call(this),
        cs(this, Cr, Yn).call(this)
    }
    mutate(i, o) {
        var a;
        return us(this, Nr, o),
        (a = mt(this, pr)) == null || a.removeObserver(this),
        us(this, pr, mt(this, $r).getMutationCache().build(mt(this, $r), this.options)),
        mt(this, pr).addObserver(this),
        mt(this, pr).execute(i)
    }
}
,
$r = new WeakMap,
Br = new WeakMap,
pr = new WeakMap,
Nr = new WeakMap,
Cr = new WeakSet,
Cn = function() {
    var o;
    const i = ((o = mt(this, pr)) == null ? void 0 : o.state) ?? getDefaultState();
    us(this, Br, {
        ...i,
        isPending: i.status === "pending",
        isSuccess: i.status === "success",
        isError: i.status === "error",
        isIdle: i.status === "idle",
        mutate: this.mutate,
        reset: this.reset
    })
}
,
Yn = function(i) {
    notifyManager.batch( () => {
        var o, a, c, d, h, g, b, _;
        if (mt(this, Nr) && this.hasListeners()) {
            const $ = mt(this, Br).variables
              , _e = mt(this, Br).context;
            (i == null ? void 0 : i.type) === "success" ? ((a = (o = mt(this, Nr)).onSuccess) == null || a.call(o, i.data, $, _e),
            (d = (c = mt(this, Nr)).onSettled) == null || d.call(c, i.data, null, $, _e)) : (i == null ? void 0 : i.type) === "error" && ((g = (h = mt(this, Nr)).onError) == null || g.call(h, i.error, $, _e),
            (_ = (b = mt(this, Nr)).onSettled) == null || _.call(b, void 0, i.error, $, _e))
        }
        this.listeners.forEach($ => {
            $(mt(this, Br))
        }
        )
    }
    )
}
,
zo), QueryClientContext = reactExports.createContext(void 0), useQueryClient = s => {
    const e = reactExports.useContext(QueryClientContext);
    if (!e)
        throw new Error("No QueryClient set, use QueryClientProvider to set one");
    return e
}
, QueryClientProvider = ({client: s, children: e}) => (reactExports.useEffect( () => (s.mount(),
() => {
    s.unmount()
}
), [s]),
jsxRuntimeExports.jsx(QueryClientContext.Provider, {
    value: s,
    children: e
})), IsRestoringContext = reactExports.createContext(!1), useIsRestoring = () => reactExports.useContext(IsRestoringContext);
IsRestoringContext.Provider;
function createValue() {
    let s = !1;
    return {
        clearReset: () => {
            s = !1
        }
        ,
        reset: () => {
            s = !0
        }
        ,
        isReset: () => s
    }
}
var QueryErrorResetBoundaryContext = reactExports.createContext(createValue())
  , useQueryErrorResetBoundary = () => reactExports.useContext(QueryErrorResetBoundaryContext);
function shouldThrowError(s, e) {
    return typeof s == "function" ? s(...e) : !!s
}
function noop$3() {}
var ensurePreventErrorBoundaryRetry = (s, e) => {
    (s.suspense || s.throwOnError) && (e.isReset() || (s.retryOnMount = !1))
}
  , useClearResetErrorBoundary = s => {
    reactExports.useEffect( () => {
        s.clearReset()
    }
    , [s])
}
  , getHasError = ({result: s, errorResetBoundary: e, throwOnError: i, query: o}) => s.isError && !e.isReset() && !s.isFetching && o && shouldThrowError(i, [s.error, o])
  , ensureSuspenseTimers = s => {
    s.suspense && (s.staleTime === void 0 && (s.staleTime = 1e3),
    typeof s.gcTime == "number" && (s.gcTime = Math.max(s.gcTime, 1e3)))
}
  , willFetch = (s, e) => s.isLoading && s.isFetching && !e
  , shouldSuspend = (s, e) => (s == null ? void 0 : s.suspense) && e.isPending
  , fetchOptimistic = (s, e, i) => e.fetchOptimistic(s).catch( () => {
    i.clearReset()
}
);
function useBaseQuery(s, e, i) {
    var _, $, _e, tt, rt;
    const o = useQueryClient()
      , a = useIsRestoring()
      , c = useQueryErrorResetBoundary()
      , d = o.defaultQueryOptions(s);
    ($ = (_ = o.getDefaultOptions().queries) == null ? void 0 : _._experimental_beforeQuery) == null || $.call(_, d),
    d._optimisticResults = a ? "isRestoring" : "optimistic",
    ensureSuspenseTimers(d),
    ensurePreventErrorBoundaryRetry(d, c),
    useClearResetErrorBoundary(c);
    const h = !o.getQueryCache().get(d.queryHash)
      , [g] = reactExports.useState( () => new e(o,d))
      , b = g.getOptimisticResult(d);
    if (reactExports.useSyncExternalStore(reactExports.useCallback(et => {
        const it = a ? () => {}
        : g.subscribe(notifyManager.batchCalls(et));
        return g.updateResult(),
        it
    }
    , [g, a]), () => g.getCurrentResult(), () => g.getCurrentResult()),
    reactExports.useEffect( () => {
        g.setOptions(d, {
            listeners: !1
        })
    }
    , [d, g]),
    shouldSuspend(d, b))
        throw fetchOptimistic(d, g, c);
    if (getHasError({
        result: b,
        errorResetBoundary: c,
        throwOnError: d.throwOnError,
        query: o.getQueryCache().get(d.queryHash)
    }))
        throw b.error;
    if ((tt = (_e = o.getDefaultOptions().queries) == null ? void 0 : _e._experimental_afterQuery) == null || tt.call(_e, d, b),
    d.experimental_prefetchInRender && !isServer && willFetch(b, a)) {
        const et = h ? fetchOptimistic(d, g, c) : (rt = o.getQueryCache().get(d.queryHash)) == null ? void 0 : rt.promise;
        et == null || et.catch(noop$3).finally( () => {
            g.updateResult()
        }
        )
    }
    return d.notifyOnChangeProps ? b : g.trackResult(b)
}
function useQuery(s, e) {
    return useBaseQuery(s, QueryObserver)
}
function useMutation(s, e) {
    const i = useQueryClient()
      , [o] = reactExports.useState( () => new MutationObserver$1(i,s));
    reactExports.useEffect( () => {
        o.setOptions(s)
    }
    , [o, s]);
    const a = reactExports.useSyncExternalStore(reactExports.useCallback(d => o.subscribe(notifyManager.batchCalls(d)), [o]), () => o.getCurrentResult(), () => o.getCurrentResult())
      , c = reactExports.useCallback( (d, h) => {
        o.mutate(d, h).catch(noop$3)
    }
    , [o]);
    if (a.error && shouldThrowError(o.options.throwOnError, [a.error]))
        throw a.error;
    return {
        ...a,
        mutate: c,
        mutateAsync: a.mutate
    }
}
function useInfiniteQuery(s, e) {
    return useBaseQuery(s, InfiniteQueryObserver)
}
/**
 * @remix-run/router v1.20.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$2() {
    return _extends$2 = Object.assign ? Object.assign.bind() : function(s) {
        for (var e = 1; e < arguments.length; e++) {
            var i = arguments[e];
            for (var o in i)
                Object.prototype.hasOwnProperty.call(i, o) && (s[o] = i[o])
        }
        return s
    }
    ,
    _extends$2.apply(this, arguments)
}
var Action;
(function(s) {
    s.Pop = "POP",
    s.Push = "PUSH",
    s.Replace = "REPLACE"
}
)(Action || (Action = {}));
const PopStateEventType = "popstate";
function createBrowserHistory(s) {
    s === void 0 && (s = {});
    function e(o, a) {
        let {pathname: c, search: d, hash: h} = o.location;
        return createLocation("", {
            pathname: c,
            search: d,
            hash: h
        }, a.state && a.state.usr || null, a.state && a.state.key || "default")
    }
    function i(o, a) {
        return typeof a == "string" ? a : createPath(a)
    }
    return getUrlBasedHistory(e, i, null, s)
}
function invariant$1(s, e) {
    if (s === !1 || s === null || typeof s > "u")
        throw new Error(e)
}
function warning(s, e) {
    if (!s) {
        typeof console < "u" && console.warn(e);
        try {
            throw new Error(e)
        } catch {}
    }
}
function createKey() {
    return Math.random().toString(36).substr(2, 8)
}
function getHistoryState(s, e) {
    return {
        usr: s.state,
        key: s.key,
        idx: e
    }
}
function createLocation(s, e, i, o) {
    return i === void 0 && (i = null),
    _extends$2({
        pathname: typeof s == "string" ? s : s.pathname,
        search: "",
        hash: ""
    }, typeof e == "string" ? parsePath(e) : e, {
        state: i,
        key: e && e.key || o || createKey()
    })
}
function createPath(s) {
    let {pathname: e="/", search: i="", hash: o=""} = s;
    return i && i !== "?" && (e += i.charAt(0) === "?" ? i : "?" + i),
    o && o !== "#" && (e += o.charAt(0) === "#" ? o : "#" + o),
    e
}
function parsePath(s) {
    let e = {};
    if (s) {
        let i = s.indexOf("#");
        i >= 0 && (e.hash = s.substr(i),
        s = s.substr(0, i));
        let o = s.indexOf("?");
        o >= 0 && (e.search = s.substr(o),
        s = s.substr(0, o)),
        s && (e.pathname = s)
    }
    return e
}
function getUrlBasedHistory(s, e, i, o) {
    o === void 0 && (o = {});
    let {window: a=document.defaultView, v5Compat: c=!1} = o
      , d = a.history
      , h = Action.Pop
      , g = null
      , b = _();
    b == null && (b = 0,
    d.replaceState(_extends$2({}, d.state, {
        idx: b
    }), ""));
    function _() {
        return (d.state || {
            idx: null
        }).idx
    }
    function $() {
        h = Action.Pop;
        let it = _()
          , st = it == null ? null : it - b;
        b = it,
        g && g({
            action: h,
            location: et.location,
            delta: st
        })
    }
    function _e(it, st) {
        h = Action.Push;
        let nt = createLocation(et.location, it, st);
        b = _() + 1;
        let lt = getHistoryState(nt, b)
          , dt = et.createHref(nt);
        try {
            d.pushState(lt, "", dt)
        } catch (ot) {
            if (ot instanceof DOMException && ot.name === "DataCloneError")
                throw ot;
            a.location.assign(dt)
        }
        c && g && g({
            action: h,
            location: et.location,
            delta: 1
        })
    }
    function tt(it, st) {
        h = Action.Replace;
        let nt = createLocation(et.location, it, st);
        b = _();
        let lt = getHistoryState(nt, b)
          , dt = et.createHref(nt);
        d.replaceState(lt, "", dt),
        c && g && g({
            action: h,
            location: et.location,
            delta: 0
        })
    }
    function rt(it) {
        let st = a.location.origin !== "null" ? a.location.origin : a.location.href
          , nt = typeof it == "string" ? it : createPath(it);
        return nt = nt.replace(/ $/, "%20"),
        invariant$1(st, "No window.location.(origin|href) available to create URL for href: " + nt),
        new URL(nt,st)
    }
    let et = {
        get action() {
            return h
        },
        get location() {
            return s(a, d)
        },
        listen(it) {
            if (g)
                throw new Error("A history only accepts one active listener");
            return a.addEventListener(PopStateEventType, $),
            g = it,
            () => {
                a.removeEventListener(PopStateEventType, $),
                g = null
            }
        },
        createHref(it) {
            return e(a, it)
        },
        createURL: rt,
        encodeLocation(it) {
            let st = rt(it);
            return {
                pathname: st.pathname,
                search: st.search,
                hash: st.hash
            }
        },
        push: _e,
        replace: tt,
        go(it) {
            return d.go(it)
        }
    };
    return et
}
var ResultType;
(function(s) {
    s.data = "data",
    s.deferred = "deferred",
    s.redirect = "redirect",
    s.error = "error"
}
)(ResultType || (ResultType = {}));
function matchRoutes(s, e, i) {
    return i === void 0 && (i = "/"),
    matchRoutesImpl(s, e, i, !1)
}
function matchRoutesImpl(s, e, i, o) {
    let a = typeof e == "string" ? parsePath(e) : e
      , c = stripBasename(a.pathname || "/", i);
    if (c == null)
        return null;
    let d = flattenRoutes(s);
    rankRouteBranches(d);
    let h = null;
    for (let g = 0; h == null && g < d.length; ++g) {
        let b = decodePath(c);
        h = matchRouteBranch(d[g], b, o)
    }
    return h
}
function flattenRoutes(s, e, i, o) {
    e === void 0 && (e = []),
    i === void 0 && (i = []),
    o === void 0 && (o = "");
    let a = (c, d, h) => {
        let g = {
            relativePath: h === void 0 ? c.path || "" : h,
            caseSensitive: c.caseSensitive === !0,
            childrenIndex: d,
            route: c
        };
        g.relativePath.startsWith("/") && (invariant$1(g.relativePath.startsWith(o), 'Absolute route path "' + g.relativePath + '" nested under path ' + ('"' + o + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes."),
        g.relativePath = g.relativePath.slice(o.length));
        let b = joinPaths([o, g.relativePath])
          , _ = i.concat(g);
        c.children && c.children.length > 0 && (invariant$1(c.index !== !0, "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + b + '".')),
        flattenRoutes(c.children, e, _, b)),
        !(c.path == null && !c.index) && e.push({
            path: b,
            score: computeScore(b, c.index),
            routesMeta: _
        })
    }
    ;
    return s.forEach( (c, d) => {
        var h;
        if (c.path === "" || !((h = c.path) != null && h.includes("?")))
            a(c, d);
        else
            for (let g of explodeOptionalSegments(c.path))
                a(c, d, g)
    }
    ),
    e
}
function explodeOptionalSegments(s) {
    let e = s.split("/");
    if (e.length === 0)
        return [];
    let[i,...o] = e
      , a = i.endsWith("?")
      , c = i.replace(/\?$/, "");
    if (o.length === 0)
        return a ? [c, ""] : [c];
    let d = explodeOptionalSegments(o.join("/"))
      , h = [];
    return h.push(...d.map(g => g === "" ? c : [c, g].join("/"))),
    a && h.push(...d),
    h.map(g => s.startsWith("/") && g === "" ? "/" : g)
}
function rankRouteBranches(s) {
    s.sort( (e, i) => e.score !== i.score ? i.score - e.score : compareIndexes(e.routesMeta.map(o => o.childrenIndex), i.routesMeta.map(o => o.childrenIndex)))
}
const paramRe = /^:[\w-]+$/
  , dynamicSegmentValue = 3
  , indexRouteValue = 2
  , emptySegmentValue = 1
  , staticSegmentValue = 10
  , splatPenalty = -2
  , isSplat = s => s === "*";
function computeScore(s, e) {
    let i = s.split("/")
      , o = i.length;
    return i.some(isSplat) && (o += splatPenalty),
    e && (o += indexRouteValue),
    i.filter(a => !isSplat(a)).reduce( (a, c) => a + (paramRe.test(c) ? dynamicSegmentValue : c === "" ? emptySegmentValue : staticSegmentValue), o)
}
function compareIndexes(s, e) {
    return s.length === e.length && s.slice(0, -1).every( (o, a) => o === e[a]) ? s[s.length - 1] - e[e.length - 1] : 0
}
function matchRouteBranch(s, e, i) {
    let {routesMeta: o} = s
      , a = {}
      , c = "/"
      , d = [];
    for (let h = 0; h < o.length; ++h) {
        let g = o[h]
          , b = h === o.length - 1
          , _ = c === "/" ? e : e.slice(c.length) || "/"
          , $ = matchPath({
            path: g.relativePath,
            caseSensitive: g.caseSensitive,
            end: b
        }, _)
          , _e = g.route;
        if (!$ && b && i && !o[o.length - 1].route.index && ($ = matchPath({
            path: g.relativePath,
            caseSensitive: g.caseSensitive,
            end: !1
        }, _)),
        !$)
            return null;
        Object.assign(a, $.params),
        d.push({
            params: a,
            pathname: joinPaths([c, $.pathname]),
            pathnameBase: normalizePathname(joinPaths([c, $.pathnameBase])),
            route: _e
        }),
        $.pathnameBase !== "/" && (c = joinPaths([c, $.pathnameBase]))
    }
    return d
}
function matchPath(s, e) {
    typeof s == "string" && (s = {
        path: s,
        caseSensitive: !1,
        end: !0
    });
    let[i,o] = compilePath(s.path, s.caseSensitive, s.end)
      , a = e.match(i);
    if (!a)
        return null;
    let c = a[0]
      , d = c.replace(/(.)\/+$/, "$1")
      , h = a.slice(1);
    return {
        params: o.reduce( (b, _, $) => {
            let {paramName: _e, isOptional: tt} = _;
            if (_e === "*") {
                let et = h[$] || "";
                d = c.slice(0, c.length - et.length).replace(/(.)\/+$/, "$1")
            }
            const rt = h[$];
            return tt && !rt ? b[_e] = void 0 : b[_e] = (rt || "").replace(/%2F/g, "/"),
            b
        }
        , {}),
        pathname: c,
        pathnameBase: d,
        pattern: s
    }
}
function compilePath(s, e, i) {
    e === void 0 && (e = !1),
    i === void 0 && (i = !0),
    warning(s === "*" || !s.endsWith("*") || s.endsWith("/*"), 'Route path "' + s + '" will be treated as if it were ' + ('"' + s.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + s.replace(/\*$/, "/*") + '".'));
    let o = []
      , a = "^" + s.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (d, h, g) => (o.push({
        paramName: h,
        isOptional: g != null
    }),
    g ? "/?([^\\/]+)?" : "/([^\\/]+)"));
    return s.endsWith("*") ? (o.push({
        paramName: "*"
    }),
    a += s === "*" || s === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$") : i ? a += "\\/*$" : s !== "" && s !== "/" && (a += "(?:(?=\\/|$))"),
    [new RegExp(a,e ? void 0 : "i"), o]
}
function decodePath(s) {
    try {
        return s.split("/").map(e => decodeURIComponent(e).replace(/\//g, "%2F")).join("/")
    } catch (e) {
        return warning(!1, 'The URL path "' + s + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + e + ").")),
        s
    }
}
function stripBasename(s, e) {
    if (e === "/")
        return s;
    if (!s.toLowerCase().startsWith(e.toLowerCase()))
        return null;
    let i = e.endsWith("/") ? e.length - 1 : e.length
      , o = s.charAt(i);
    return o && o !== "/" ? null : s.slice(i) || "/"
}
function resolvePath(s, e) {
    e === void 0 && (e = "/");
    let {pathname: i, search: o="", hash: a=""} = typeof s == "string" ? parsePath(s) : s;
    return {
        pathname: i ? i.startsWith("/") ? i : resolvePathname(i, e) : e,
        search: normalizeSearch(o),
        hash: normalizeHash(a)
    }
}
function resolvePathname(s, e) {
    let i = e.replace(/\/+$/, "").split("/");
    return s.split("/").forEach(a => {
        a === ".." ? i.length > 1 && i.pop() : a !== "." && i.push(a)
    }
    ),
    i.length > 1 ? i.join("/") : "/"
}
function getInvalidPathError(s, e, i, o) {
    return "Cannot include a '" + s + "' character in a manually specified " + ("`to." + e + "` field [" + JSON.stringify(o) + "].  Please separate it out to the ") + ("`to." + i + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.'
}
function getPathContributingMatches(s) {
    return s.filter( (e, i) => i === 0 || e.route.path && e.route.path.length > 0)
}
function getResolveToMatches(s, e) {
    let i = getPathContributingMatches(s);
    return e ? i.map( (o, a) => a === i.length - 1 ? o.pathname : o.pathnameBase) : i.map(o => o.pathnameBase)
}
function resolveTo(s, e, i, o) {
    o === void 0 && (o = !1);
    let a;
    typeof s == "string" ? a = parsePath(s) : (a = _extends$2({}, s),
    invariant$1(!a.pathname || !a.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", a)),
    invariant$1(!a.pathname || !a.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", a)),
    invariant$1(!a.search || !a.search.includes("#"), getInvalidPathError("#", "search", "hash", a)));
    let c = s === "" || a.pathname === "", d = c ? "/" : a.pathname, h;
    if (d == null)
        h = i;
    else {
        let $ = e.length - 1;
        if (!o && d.startsWith("..")) {
            let _e = d.split("/");
            for (; _e[0] === ".."; )
                _e.shift(),
                $ -= 1;
            a.pathname = _e.join("/")
        }
        h = $ >= 0 ? e[$] : "/"
    }
    let g = resolvePath(a, h)
      , b = d && d !== "/" && d.endsWith("/")
      , _ = (c || d === ".") && i.endsWith("/");
    return !g.pathname.endsWith("/") && (b || _) && (g.pathname += "/"),
    g
}
const joinPaths = s => s.join("/").replace(/\/\/+/g, "/")
  , normalizePathname = s => s.replace(/\/+$/, "").replace(/^\/*/, "/")
  , normalizeSearch = s => !s || s === "?" ? "" : s.startsWith("?") ? s : "?" + s
  , normalizeHash = s => !s || s === "#" ? "" : s.startsWith("#") ? s : "#" + s;
function isRouteErrorResponse(s) {
    return s != null && typeof s.status == "number" && typeof s.statusText == "string" && typeof s.internal == "boolean" && "data"in s
}
const validMutationMethodsArr = ["post", "put", "patch", "delete"];
new Set(validMutationMethodsArr);
const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
new Set(validRequestMethodsArr);
/**
 * React Router v6.27.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$1() {
    return _extends$1 = Object.assign ? Object.assign.bind() : function(s) {
        for (var e = 1; e < arguments.length; e++) {
            var i = arguments[e];
            for (var o in i)
                Object.prototype.hasOwnProperty.call(i, o) && (s[o] = i[o])
        }
        return s
    }
    ,
    _extends$1.apply(this, arguments)
}
const DataRouterContext = reactExports.createContext(null)
  , DataRouterStateContext = reactExports.createContext(null)
  , NavigationContext = reactExports.createContext(null)
  , LocationContext = reactExports.createContext(null)
  , RouteContext = reactExports.createContext({
    outlet: null,
    matches: [],
    isDataRoute: !1
})
  , RouteErrorContext = reactExports.createContext(null);
function useHref(s, e) {
    let {relative: i} = e === void 0 ? {} : e;
    useInRouterContext() || invariant$1(!1);
    let {basename: o, navigator: a} = reactExports.useContext(NavigationContext)
      , {hash: c, pathname: d, search: h} = useResolvedPath(s, {
        relative: i
    })
      , g = d;
    return o !== "/" && (g = d === "/" ? o : joinPaths([o, d])),
    a.createHref({
        pathname: g,
        search: h,
        hash: c
    })
}
function useInRouterContext() {
    return reactExports.useContext(LocationContext) != null
}
function useLocation() {
    return useInRouterContext() || invariant$1(!1),
    reactExports.useContext(LocationContext).location
}
function useIsomorphicLayoutEffect$3(s) {
    reactExports.useContext(NavigationContext).static || reactExports.useLayoutEffect(s)
}
function useNavigate() {
    let {isDataRoute: s} = reactExports.useContext(RouteContext);
    return s ? useNavigateStable() : useNavigateUnstable()
}
function useNavigateUnstable() {
    useInRouterContext() || invariant$1(!1);
    let s = reactExports.useContext(DataRouterContext)
      , {basename: e, future: i, navigator: o} = reactExports.useContext(NavigationContext)
      , {matches: a} = reactExports.useContext(RouteContext)
      , {pathname: c} = useLocation()
      , d = JSON.stringify(getResolveToMatches(a, i.v7_relativeSplatPath))
      , h = reactExports.useRef(!1);
    return useIsomorphicLayoutEffect$3( () => {
        h.current = !0
    }
    ),
    reactExports.useCallback(function(b, _) {
        if (_ === void 0 && (_ = {}),
        !h.current)
            return;
        if (typeof b == "number") {
            o.go(b);
            return
        }
        let $ = resolveTo(b, JSON.parse(d), c, _.relative === "path");
        s == null && e !== "/" && ($.pathname = $.pathname === "/" ? e : joinPaths([e, $.pathname])),
        (_.replace ? o.replace : o.push)($, _.state, _)
    }, [e, o, d, c, s])
}
function useResolvedPath(s, e) {
    let {relative: i} = e === void 0 ? {} : e
      , {future: o} = reactExports.useContext(NavigationContext)
      , {matches: a} = reactExports.useContext(RouteContext)
      , {pathname: c} = useLocation()
      , d = JSON.stringify(getResolveToMatches(a, o.v7_relativeSplatPath));
    return reactExports.useMemo( () => resolveTo(s, JSON.parse(d), c, i === "path"), [s, d, c, i])
}
function useRoutes(s, e) {
    return useRoutesImpl(s, e)
}
function useRoutesImpl(s, e, i, o) {
    useInRouterContext() || invariant$1(!1);
    let {navigator: a} = reactExports.useContext(NavigationContext)
      , {matches: c} = reactExports.useContext(RouteContext)
      , d = c[c.length - 1]
      , h = d ? d.params : {};
    d && d.pathname;
    let g = d ? d.pathnameBase : "/";
    d && d.route;
    let b = useLocation(), _;
    if (e) {
        var $;
        let it = typeof e == "string" ? parsePath(e) : e;
        g === "/" || ($ = it.pathname) != null && $.startsWith(g) || invariant$1(!1),
        _ = it
    } else
        _ = b;
    let _e = _.pathname || "/"
      , tt = _e;
    if (g !== "/") {
        let it = g.replace(/^\//, "").split("/");
        tt = "/" + _e.replace(/^\//, "").split("/").slice(it.length).join("/")
    }
    let rt = matchRoutes(s, {
        pathname: tt
    })
      , et = _renderMatches(rt && rt.map(it => Object.assign({}, it, {
        params: Object.assign({}, h, it.params),
        pathname: joinPaths([g, a.encodeLocation ? a.encodeLocation(it.pathname).pathname : it.pathname]),
        pathnameBase: it.pathnameBase === "/" ? g : joinPaths([g, a.encodeLocation ? a.encodeLocation(it.pathnameBase).pathname : it.pathnameBase])
    })), c, i, o);
    return e && et ? reactExports.createElement(LocationContext.Provider, {
        value: {
            location: _extends$1({
                pathname: "/",
                search: "",
                hash: "",
                state: null,
                key: "default"
            }, _),
            navigationType: Action.Pop
        }
    }, et) : et
}
function DefaultErrorComponent() {
    let s = useRouteError()
      , e = isRouteErrorResponse(s) ? s.status + " " + s.statusText : s instanceof Error ? s.message : JSON.stringify(s)
      , i = s instanceof Error ? s.stack : null
      , a = {
        padding: "0.5rem",
        backgroundColor: "rgba(200,200,200, 0.5)"
    };
    return reactExports.createElement(reactExports.Fragment, null, reactExports.createElement("h2", null, "Unexpected Application Error!"), reactExports.createElement("h3", {
        style: {
            fontStyle: "italic"
        }
    }, e), i ? reactExports.createElement("pre", {
        style: a
    }, i) : null, null)
}
const defaultErrorElement = reactExports.createElement(DefaultErrorComponent, null);
class RenderErrorBoundary extends reactExports.Component {
    constructor(e) {
        super(e),
        this.state = {
            location: e.location,
            revalidation: e.revalidation,
            error: e.error
        }
    }
    static getDerivedStateFromError(e) {
        return {
            error: e
        }
    }
    static getDerivedStateFromProps(e, i) {
        return i.location !== e.location || i.revalidation !== "idle" && e.revalidation === "idle" ? {
            error: e.error,
            location: e.location,
            revalidation: e.revalidation
        } : {
            error: e.error !== void 0 ? e.error : i.error,
            location: i.location,
            revalidation: e.revalidation || i.revalidation
        }
    }
    componentDidCatch(e, i) {
        console.error("React Router caught the following error during render", e, i)
    }
    render() {
        return this.state.error !== void 0 ? reactExports.createElement(RouteContext.Provider, {
            value: this.props.routeContext
        }, reactExports.createElement(RouteErrorContext.Provider, {
            value: this.state.error,
            children: this.props.component
        })) : this.props.children
    }
}
function RenderedRoute(s) {
    let {routeContext: e, match: i, children: o} = s
      , a = reactExports.useContext(DataRouterContext);
    return a && a.static && a.staticContext && (i.route.errorElement || i.route.ErrorBoundary) && (a.staticContext._deepestRenderedBoundaryId = i.route.id),
    reactExports.createElement(RouteContext.Provider, {
        value: e
    }, o)
}
function _renderMatches(s, e, i, o) {
    var a;
    if (e === void 0 && (e = []),
    i === void 0 && (i = null),
    o === void 0 && (o = null),
    s == null) {
        var c;
        if (!i)
            return null;
        if (i.errors)
            s = i.matches;
        else if ((c = o) != null && c.v7_partialHydration && e.length === 0 && !i.initialized && i.matches.length > 0)
            s = i.matches;
        else
            return null
    }
    let d = s
      , h = (a = i) == null ? void 0 : a.errors;
    if (h != null) {
        let _ = d.findIndex($ => $.route.id && (h == null ? void 0 : h[$.route.id]) !== void 0);
        _ >= 0 || invariant$1(!1),
        d = d.slice(0, Math.min(d.length, _ + 1))
    }
    let g = !1
      , b = -1;
    if (i && o && o.v7_partialHydration)
        for (let _ = 0; _ < d.length; _++) {
            let $ = d[_];
            if (($.route.HydrateFallback || $.route.hydrateFallbackElement) && (b = _),
            $.route.id) {
                let {loaderData: _e, errors: tt} = i
                  , rt = $.route.loader && _e[$.route.id] === void 0 && (!tt || tt[$.route.id] === void 0);
                if ($.route.lazy || rt) {
                    g = !0,
                    b >= 0 ? d = d.slice(0, b + 1) : d = [d[0]];
                    break
                }
            }
        }
    return d.reduceRight( (_, $, _e) => {
        let tt, rt = !1, et = null, it = null;
        i && (tt = h && $.route.id ? h[$.route.id] : void 0,
        et = $.route.errorElement || defaultErrorElement,
        g && (b < 0 && _e === 0 ? (rt = !0,
        it = null) : b === _e && (rt = !0,
        it = $.route.hydrateFallbackElement || null)));
        let st = e.concat(d.slice(0, _e + 1))
          , nt = () => {
            let lt;
            return tt ? lt = et : rt ? lt = it : $.route.Component ? lt = reactExports.createElement($.route.Component, null) : $.route.element ? lt = $.route.element : lt = _,
            reactExports.createElement(RenderedRoute, {
                match: $,
                routeContext: {
                    outlet: _,
                    matches: st,
                    isDataRoute: i != null
                },
                children: lt
            })
        }
        ;
        return i && ($.route.ErrorBoundary || $.route.errorElement || _e === 0) ? reactExports.createElement(RenderErrorBoundary, {
            location: i.location,
            revalidation: i.revalidation,
            component: et,
            error: tt,
            children: nt(),
            routeContext: {
                outlet: null,
                matches: st,
                isDataRoute: !0
            }
        }) : nt()
    }
    , null)
}
var DataRouterHook$1 = function(s) {
    return s.UseBlocker = "useBlocker",
    s.UseRevalidator = "useRevalidator",
    s.UseNavigateStable = "useNavigate",
    s
}(DataRouterHook$1 || {})
  , DataRouterStateHook$1 = function(s) {
    return s.UseBlocker = "useBlocker",
    s.UseLoaderData = "useLoaderData",
    s.UseActionData = "useActionData",
    s.UseRouteError = "useRouteError",
    s.UseNavigation = "useNavigation",
    s.UseRouteLoaderData = "useRouteLoaderData",
    s.UseMatches = "useMatches",
    s.UseRevalidator = "useRevalidator",
    s.UseNavigateStable = "useNavigate",
    s.UseRouteId = "useRouteId",
    s
}(DataRouterStateHook$1 || {});
function useDataRouterContext$1(s) {
    let e = reactExports.useContext(DataRouterContext);
    return e || invariant$1(!1),
    e
}
function useDataRouterState(s) {
    let e = reactExports.useContext(DataRouterStateContext);
    return e || invariant$1(!1),
    e
}
function useRouteContext(s) {
    let e = reactExports.useContext(RouteContext);
    return e || invariant$1(!1),
    e
}
function useCurrentRouteId(s) {
    let e = useRouteContext()
      , i = e.matches[e.matches.length - 1];
    return i.route.id || invariant$1(!1),
    i.route.id
}
function useRouteError() {
    var s;
    let e = reactExports.useContext(RouteErrorContext)
      , i = useDataRouterState(DataRouterStateHook$1.UseRouteError)
      , o = useCurrentRouteId(DataRouterStateHook$1.UseRouteError);
    return e !== void 0 ? e : (s = i.errors) == null ? void 0 : s[o]
}
function useNavigateStable() {
    let {router: s} = useDataRouterContext$1(DataRouterHook$1.UseNavigateStable)
      , e = useCurrentRouteId(DataRouterStateHook$1.UseNavigateStable)
      , i = reactExports.useRef(!1);
    return useIsomorphicLayoutEffect$3( () => {
        i.current = !0
    }
    ),
    reactExports.useCallback(function(a, c) {
        c === void 0 && (c = {}),
        i.current && (typeof a == "number" ? s.navigate(a) : s.navigate(a, _extends$1({
            fromRouteId: e
        }, c)))
    }, [s, e])
}
function Navigate(s) {
    let {to: e, replace: i, state: o, relative: a} = s;
    useInRouterContext() || invariant$1(!1);
    let {future: c, static: d} = reactExports.useContext(NavigationContext)
      , {matches: h} = reactExports.useContext(RouteContext)
      , {pathname: g} = useLocation()
      , b = useNavigate()
      , _ = resolveTo(e, getResolveToMatches(h, c.v7_relativeSplatPath), g, a === "path")
      , $ = JSON.stringify(_);
    return reactExports.useEffect( () => b(JSON.parse($), {
        replace: i,
        state: o,
        relative: a
    }), [b, $, a, i, o]),
    null
}
function Route(s) {
    invariant$1(!1)
}
function Router(s) {
    let {basename: e="/", children: i=null, location: o, navigationType: a=Action.Pop, navigator: c, static: d=!1, future: h} = s;
    useInRouterContext() && invariant$1(!1);
    let g = e.replace(/^\/*/, "/")
      , b = reactExports.useMemo( () => ({
        basename: g,
        navigator: c,
        static: d,
        future: _extends$1({
            v7_relativeSplatPath: !1
        }, h)
    }), [g, h, c, d]);
    typeof o == "string" && (o = parsePath(o));
    let {pathname: _="/", search: $="", hash: _e="", state: tt=null, key: rt="default"} = o
      , et = reactExports.useMemo( () => {
        let it = stripBasename(_, g);
        return it == null ? null : {
            location: {
                pathname: it,
                search: $,
                hash: _e,
                state: tt,
                key: rt
            },
            navigationType: a
        }
    }
    , [g, _, $, _e, tt, rt, a]);
    return et == null ? null : reactExports.createElement(NavigationContext.Provider, {
        value: b
    }, reactExports.createElement(LocationContext.Provider, {
        children: i,
        value: et
    }))
}
function Routes(s) {
    let {children: e, location: i} = s;
    return useRoutes(createRoutesFromChildren(e), i)
}
new Promise( () => {}
);
function createRoutesFromChildren(s, e) {
    e === void 0 && (e = []);
    let i = [];
    return reactExports.Children.forEach(s, (o, a) => {
        if (!reactExports.isValidElement(o))
            return;
        let c = [...e, a];
        if (o.type === reactExports.Fragment) {
            i.push.apply(i, createRoutesFromChildren(o.props.children, c));
            return
        }
        o.type !== Route && invariant$1(!1),
        !o.props.index || !o.props.children || invariant$1(!1);
        let d = {
            id: o.props.id || c.join("-"),
            caseSensitive: o.props.caseSensitive,
            element: o.props.element,
            Component: o.props.Component,
            index: o.props.index,
            path: o.props.path,
            loader: o.props.loader,
            action: o.props.action,
            errorElement: o.props.errorElement,
            ErrorBoundary: o.props.ErrorBoundary,
            hasErrorBoundary: o.props.ErrorBoundary != null || o.props.errorElement != null,
            shouldRevalidate: o.props.shouldRevalidate,
            handle: o.props.handle,
            lazy: o.props.lazy
        };
        o.props.children && (d.children = createRoutesFromChildren(o.props.children, c)),
        i.push(d)
    }
    ),
    i
}
/**
 * React Router DOM v6.27.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(s) {
        for (var e = 1; e < arguments.length; e++) {
            var i = arguments[e];
            for (var o in i)
                Object.prototype.hasOwnProperty.call(i, o) && (s[o] = i[o])
        }
        return s
    }
    ,
    _extends.apply(this, arguments)
}
function _objectWithoutPropertiesLoose(s, e) {
    if (s == null)
        return {};
    var i = {}, o = Object.keys(s), a, c;
    for (c = 0; c < o.length; c++)
        a = o[c],
        !(e.indexOf(a) >= 0) && (i[a] = s[a]);
    return i
}
function isModifiedEvent(s) {
    return !!(s.metaKey || s.altKey || s.ctrlKey || s.shiftKey)
}
function shouldProcessLinkClick(s, e) {
    return s.button === 0 && (!e || e === "_self") && !isModifiedEvent(s)
}
function createSearchParams(s) {
    return s === void 0 && (s = ""),
    new URLSearchParams(typeof s == "string" || Array.isArray(s) || s instanceof URLSearchParams ? s : Object.keys(s).reduce( (e, i) => {
        let o = s[i];
        return e.concat(Array.isArray(o) ? o.map(a => [i, a]) : [[i, o]])
    }
    , []))
}
function getSearchParamsForLocation(s, e) {
    let i = createSearchParams(s);
    return e && e.forEach( (o, a) => {
        i.has(a) || e.getAll(a).forEach(c => {
            i.append(a, c)
        }
        )
    }
    ),
    i
}
const _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "viewTransition"]
  , _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "viewTransition", "children"]
  , REACT_ROUTER_VERSION = "6";
try {
    window.__reactRouterVersion = REACT_ROUTER_VERSION
} catch {}
const ViewTransitionContext = reactExports.createContext({
    isTransitioning: !1
})
  , START_TRANSITION = "startTransition"
  , startTransitionImpl = React$1[START_TRANSITION];
function BrowserRouter(s) {
    let {basename: e, children: i, future: o, window: a} = s
      , c = reactExports.useRef();
    c.current == null && (c.current = createBrowserHistory({
        window: a,
        v5Compat: !0
    }));
    let d = c.current
      , [h,g] = reactExports.useState({
        action: d.action,
        location: d.location
    })
      , {v7_startTransition: b} = o || {}
      , _ = reactExports.useCallback($ => {
        b && startTransitionImpl ? startTransitionImpl( () => g($)) : g($)
    }
    , [g, b]);
    return reactExports.useLayoutEffect( () => d.listen(_), [d, _]),
    reactExports.createElement(Router, {
        basename: e,
        children: i,
        location: h.location,
        navigationType: h.action,
        navigator: d,
        future: o
    })
}
const isBrowser$2 = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u"
  , ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i
  , Link = reactExports.forwardRef(function(e, i) {
    let {onClick: o, relative: a, reloadDocument: c, replace: d, state: h, target: g, to: b, preventScrollReset: _, viewTransition: $} = e, _e = _objectWithoutPropertiesLoose(e, _excluded), {basename: tt} = reactExports.useContext(NavigationContext), rt, et = !1;
    if (typeof b == "string" && ABSOLUTE_URL_REGEX.test(b) && (rt = b,
    isBrowser$2))
        try {
            let lt = new URL(window.location.href)
              , dt = b.startsWith("//") ? new URL(lt.protocol + b) : new URL(b)
              , ot = stripBasename(dt.pathname, tt);
            dt.origin === lt.origin && ot != null ? b = ot + dt.search + dt.hash : et = !0
        } catch {}
    let it = useHref(b, {
        relative: a
    })
      , st = useLinkClickHandler(b, {
        replace: d,
        state: h,
        target: g,
        preventScrollReset: _,
        relative: a,
        viewTransition: $
    });
    function nt(lt) {
        o && o(lt),
        lt.defaultPrevented || st(lt)
    }
    return reactExports.createElement("a", _extends({}, _e, {
        href: rt || it,
        onClick: et || c ? o : nt,
        ref: i,
        target: g
    }))
})
  , NavLink = reactExports.forwardRef(function(e, i) {
    let {"aria-current": o="page", caseSensitive: a=!1, className: c="", end: d=!1, style: h, to: g, viewTransition: b, children: _} = e
      , $ = _objectWithoutPropertiesLoose(e, _excluded2)
      , _e = useResolvedPath(g, {
        relative: $.relative
    })
      , tt = useLocation()
      , rt = reactExports.useContext(DataRouterStateContext)
      , {navigator: et, basename: it} = reactExports.useContext(NavigationContext)
      , st = rt != null && useViewTransitionState(_e) && b === !0
      , nt = et.encodeLocation ? et.encodeLocation(_e).pathname : _e.pathname
      , lt = tt.pathname
      , dt = rt && rt.navigation && rt.navigation.location ? rt.navigation.location.pathname : null;
    a || (lt = lt.toLowerCase(),
    dt = dt ? dt.toLowerCase() : null,
    nt = nt.toLowerCase()),
    dt && it && (dt = stripBasename(dt, it) || dt);
    const ot = nt !== "/" && nt.endsWith("/") ? nt.length - 1 : nt.length;
    let at = lt === nt || !d && lt.startsWith(nt) && lt.charAt(ot) === "/", ht = dt != null && (dt === nt || !d && dt.startsWith(nt) && dt.charAt(nt.length) === "/"), pt = {
        isActive: at,
        isPending: ht,
        isTransitioning: st
    }, gt = at ? o : void 0, wt;
    typeof c == "function" ? wt = c(pt) : wt = [c, at ? "active" : null, ht ? "pending" : null, st ? "transitioning" : null].filter(Boolean).join(" ");
    let yt = typeof h == "function" ? h(pt) : h;
    return reactExports.createElement(Link, _extends({}, $, {
        "aria-current": gt,
        className: wt,
        ref: i,
        style: yt,
        to: g,
        viewTransition: b
    }), typeof _ == "function" ? _(pt) : _)
});
var DataRouterHook;
(function(s) {
    s.UseScrollRestoration = "useScrollRestoration",
    s.UseSubmit = "useSubmit",
    s.UseSubmitFetcher = "useSubmitFetcher",
    s.UseFetcher = "useFetcher",
    s.useViewTransitionState = "useViewTransitionState"
}
)(DataRouterHook || (DataRouterHook = {}));
var DataRouterStateHook;
(function(s) {
    s.UseFetcher = "useFetcher",
    s.UseFetchers = "useFetchers",
    s.UseScrollRestoration = "useScrollRestoration"
}
)(DataRouterStateHook || (DataRouterStateHook = {}));
function useDataRouterContext(s) {
    let e = reactExports.useContext(DataRouterContext);
    return e || invariant$1(!1),
    e
}
function useLinkClickHandler(s, e) {
    let {target: i, replace: o, state: a, preventScrollReset: c, relative: d, viewTransition: h} = e === void 0 ? {} : e
      , g = useNavigate()
      , b = useLocation()
      , _ = useResolvedPath(s, {
        relative: d
    });
    return reactExports.useCallback($ => {
        if (shouldProcessLinkClick($, i)) {
            $.preventDefault();
            let _e = o !== void 0 ? o : createPath(b) === createPath(_);
            g(s, {
                replace: _e,
                state: a,
                preventScrollReset: c,
                relative: d,
                viewTransition: h
            })
        }
    }
    , [b, g, _, o, a, i, s, c, d, h])
}
function useSearchParams(s) {
    let e = reactExports.useRef(createSearchParams(s))
      , i = reactExports.useRef(!1)
      , o = useLocation()
      , a = reactExports.useMemo( () => getSearchParamsForLocation(o.search, i.current ? null : e.current), [o.search])
      , c = useNavigate()
      , d = reactExports.useCallback( (h, g) => {
        const b = createSearchParams(typeof h == "function" ? h(a) : h);
        i.current = !0,
        c("?" + b, g)
    }
    , [c, a]);
    return [a, d]
}
function useViewTransitionState(s, e) {
    e === void 0 && (e = {});
    let i = reactExports.useContext(ViewTransitionContext);
    i == null && invariant$1(!1);
    let {basename: o} = useDataRouterContext(DataRouterHook.useViewTransitionState)
      , a = useResolvedPath(s, {
        relative: e.relative
    });
    if (!i.isTransitioning)
        return !1;
    let c = stripBasename(i.currentLocation.pathname, o) || i.currentLocation.pathname
      , d = stripBasename(i.nextLocation.pathname, o) || i.nextLocation.pathname;
    return matchPath(a.pathname, d) != null || matchPath(a.pathname, c) != null
}
const scriptRel = "modulepreload"
  , assetsURL = function(s) {
    return "/" + s
}
  , seen = {}
  , __vitePreload = function(e, i, o) {
    let a = Promise.resolve();
    if (i && i.length > 0) {
        document.getElementsByTagName("link");
        const d = document.querySelector("meta[property=csp-nonce]")
          , h = (d == null ? void 0 : d.nonce) || (d == null ? void 0 : d.getAttribute("nonce"));
        a = Promise.allSettled(i.map(g => {
            if (g = assetsURL(g),
            g in seen)
                return;
            seen[g] = !0;
            const b = g.endsWith(".css")
              , _ = b ? '[rel="stylesheet"]' : "";
            if (document.querySelector(`link[href="${g}"]${_}`))
                return;
            const $ = document.createElement("link");
            if ($.rel = b ? "stylesheet" : scriptRel,
            b || ($.as = "script"),
            $.crossOrigin = "",
            $.href = g,
            h && $.setAttribute("nonce", h),
            document.head.appendChild($),
            b)
                return new Promise( (_e, tt) => {
                    $.addEventListener("load", _e),
                    $.addEventListener("error", () => tt(new Error(`Unable to preload CSS for ${g}`)))
                }
                )
        }
        ))
    }
    function c(d) {
        const h = new Event("vite:preloadError",{
            cancelable: !0
        });
        if (h.payload = d,
        window.dispatchEvent(h),
        !h.defaultPrevented)
            throw d
    }
    return a.then(d => {
        for (const h of d || [])
            h.status === "rejected" && c(h.reason);
        return e().catch(c)
    }
    )
}
  , resolveFetch$3 = s => {
    let e;
    return s ? e = s : typeof fetch > "u" ? e = (...i) => __vitePreload(async () => {
        const {default: o} = await Promise.resolve().then( () => browser);
        return {
            default: o
        }
    }
    , void 0).then( ({default: o}) => o(...i)) : e = fetch,
    (...i) => e(...i)
}
;
class FunctionsError extends Error {
    constructor(e, i="FunctionsError", o) {
        super(e),
        this.name = i,
        this.context = o
    }
}
class FunctionsFetchError extends FunctionsError {
    constructor(e) {
        super("Failed to send a request to the Edge Function", "FunctionsFetchError", e)
    }
}
class FunctionsRelayError extends FunctionsError {
    constructor(e) {
        super("Relay Error invoking the Edge Function", "FunctionsRelayError", e)
    }
}
class FunctionsHttpError extends FunctionsError {
    constructor(e) {
        super("Edge Function returned a non-2xx status code", "FunctionsHttpError", e)
    }
}
var FunctionRegion;
(function(s) {
    s.Any = "any",
    s.ApNortheast1 = "ap-northeast-1",
    s.ApNortheast2 = "ap-northeast-2",
    s.ApSouth1 = "ap-south-1",
    s.ApSoutheast1 = "ap-southeast-1",
    s.ApSoutheast2 = "ap-southeast-2",
    s.CaCentral1 = "ca-central-1",
    s.EuCentral1 = "eu-central-1",
    s.EuWest1 = "eu-west-1",
    s.EuWest2 = "eu-west-2",
    s.EuWest3 = "eu-west-3",
    s.SaEast1 = "sa-east-1",
    s.UsEast1 = "us-east-1",
    s.UsWest1 = "us-west-1",
    s.UsWest2 = "us-west-2"
}
)(FunctionRegion || (FunctionRegion = {}));
var __awaiter$7 = function(s, e, i, o) {
    function a(c) {
        return c instanceof i ? c : new i(function(d) {
            d(c)
        }
        )
    }
    return new (i || (i = Promise))(function(c, d) {
        function h(_) {
            try {
                b(o.next(_))
            } catch ($) {
                d($)
            }
        }
        function g(_) {
            try {
                b(o.throw(_))
            } catch ($) {
                d($)
            }
        }
        function b(_) {
            _.done ? c(_.value) : a(_.value).then(h, g)
        }
        b((o = o.apply(s, e || [])).next())
    }
    )
};
class FunctionsClient {
    constructor(e, {headers: i={}, customFetch: o, region: a=FunctionRegion.Any}={}) {
        this.url = e,
        this.headers = i,
        this.region = a,
        this.fetch = resolveFetch$3(o)
    }
    setAuth(e) {
        this.headers.Authorization = `Bearer ${e}`
    }
    invoke(e, i={}) {
        var o;
        return __awaiter$7(this, void 0, void 0, function*() {
            try {
                const {headers: a, method: c, body: d} = i;
                let h = {}
                  , {region: g} = i;
                g || (g = this.region),
                g && g !== "any" && (h["x-region"] = g);
                let b;
                d && (a && !Object.prototype.hasOwnProperty.call(a, "Content-Type") || !a) && (typeof Blob < "u" && d instanceof Blob || d instanceof ArrayBuffer ? (h["Content-Type"] = "application/octet-stream",
                b = d) : typeof d == "string" ? (h["Content-Type"] = "text/plain",
                b = d) : typeof FormData < "u" && d instanceof FormData ? b = d : (h["Content-Type"] = "application/json",
                b = JSON.stringify(d)));
                const _ = yield this.fetch(`${this.url}/${e}`, {
                    method: c || "POST",
                    headers: Object.assign(Object.assign(Object.assign({}, h), this.headers), a),
                    body: b
                }).catch(rt => {
                    throw new FunctionsFetchError(rt)
                }
                )
                  , $ = _.headers.get("x-relay-error");
                if ($ && $ === "true")
                    throw new FunctionsRelayError(_);
                if (!_.ok)
                    throw new FunctionsHttpError(_);
                let _e = ((o = _.headers.get("Content-Type")) !== null && o !== void 0 ? o : "text/plain").split(";")[0].trim(), tt;
                return _e === "application/json" ? tt = yield _.json() : _e === "application/octet-stream" ? tt = yield _.blob() : _e === "text/event-stream" ? tt = _ : _e === "multipart/form-data" ? tt = yield _.formData() : tt = yield _.text(),
                {
                    data: tt,
                    error: null
                }
            } catch (a) {
                return {
                    data: null,
                    error: a
                }
            }
        })
    }
}
var cjs = {}
  , PostgrestClient$2 = {}
  , PostgrestQueryBuilder$2 = {}
  , PostgrestFilterBuilder$2 = {}
  , PostgrestTransformBuilder$2 = {}
  , PostgrestBuilder$2 = {}
  , getGlobal = function() {
    if (typeof self < "u")
        return self;
    if (typeof window < "u")
        return window;
    if (typeof global < "u")
        return global;
    throw new Error("unable to locate global object")
}
  , globalObject = getGlobal();
const fetch$1 = globalObject.fetch
  , nodeFetch = globalObject.fetch.bind(globalObject)
  , Headers$1 = globalObject.Headers
  , Request = globalObject.Request
  , Response$1 = globalObject.Response
  , browser = Object.freeze(Object.defineProperty({
    __proto__: null,
    Headers: Headers$1,
    Request,
    Response: Response$1,
    default: nodeFetch,
    fetch: fetch$1
}, Symbol.toStringTag, {
    value: "Module"
}))
  , require$$0 = getAugmentedNamespace(browser);
var PostgrestError$2 = {};
Object.defineProperty(PostgrestError$2, "__esModule", {
    value: !0
});
let PostgrestError$1 = class extends Error {
    constructor(e) {
        super(e.message),
        this.name = "PostgrestError",
        this.details = e.details,
        this.hint = e.hint,
        this.code = e.code
    }
}
;
PostgrestError$2.default = PostgrestError$1;
var __importDefault$5 = commonjsGlobal && commonjsGlobal.__importDefault || function(s) {
    return s && s.__esModule ? s : {
        default: s
    }
}
;
Object.defineProperty(PostgrestBuilder$2, "__esModule", {
    value: !0
});
const node_fetch_1 = __importDefault$5(require$$0)
  , PostgrestError_1$1 = __importDefault$5(PostgrestError$2);
let PostgrestBuilder$1 = class {
    constructor(e) {
        this.shouldThrowOnError = !1,
        this.method = e.method,
        this.url = e.url,
        this.headers = e.headers,
        this.schema = e.schema,
        this.body = e.body,
        this.shouldThrowOnError = e.shouldThrowOnError,
        this.signal = e.signal,
        this.isMaybeSingle = e.isMaybeSingle,
        e.fetch ? this.fetch = e.fetch : typeof fetch > "u" ? this.fetch = node_fetch_1.default : this.fetch = fetch
    }
    throwOnError() {
        return this.shouldThrowOnError = !0,
        this
    }
    setHeader(e, i) {
        return this.headers = Object.assign({}, this.headers),
        this.headers[e] = i,
        this
    }
    then(e, i) {
        this.schema === void 0 || (["GET", "HEAD"].includes(this.method) ? this.headers["Accept-Profile"] = this.schema : this.headers["Content-Profile"] = this.schema),
        this.method !== "GET" && this.method !== "HEAD" && (this.headers["Content-Type"] = "application/json");
        const o = this.fetch;
        let a = o(this.url.toString(), {
            method: this.method,
            headers: this.headers,
            body: JSON.stringify(this.body),
            signal: this.signal
        }).then(async c => {
            var d, h, g;
            let b = null
              , _ = null
              , $ = null
              , _e = c.status
              , tt = c.statusText;
            if (c.ok) {
                if (this.method !== "HEAD") {
                    const st = await c.text();
                    st === "" || (this.headers.Accept === "text/csv" || this.headers.Accept && this.headers.Accept.includes("application/vnd.pgrst.plan+text") ? _ = st : _ = JSON.parse(st))
                }
                const et = (d = this.headers.Prefer) === null || d === void 0 ? void 0 : d.match(/count=(exact|planned|estimated)/)
                  , it = (h = c.headers.get("content-range")) === null || h === void 0 ? void 0 : h.split("/");
                et && it && it.length > 1 && ($ = parseInt(it[1])),
                this.isMaybeSingle && this.method === "GET" && Array.isArray(_) && (_.length > 1 ? (b = {
                    code: "PGRST116",
                    details: `Results contain ${_.length} rows, application/vnd.pgrst.object+json requires 1 row`,
                    hint: null,
                    message: "JSON object requested, multiple (or no) rows returned"
                },
                _ = null,
                $ = null,
                _e = 406,
                tt = "Not Acceptable") : _.length === 1 ? _ = _[0] : _ = null)
            } else {
                const et = await c.text();
                try {
                    b = JSON.parse(et),
                    Array.isArray(b) && c.status === 404 && (_ = [],
                    b = null,
                    _e = 200,
                    tt = "OK")
                } catch {
                    c.status === 404 && et === "" ? (_e = 204,
                    tt = "No Content") : b = {
                        message: et
                    }
                }
                if (b && this.isMaybeSingle && (!((g = b == null ? void 0 : b.details) === null || g === void 0) && g.includes("0 rows")) && (b = null,
                _e = 200,
                tt = "OK"),
                b && this.shouldThrowOnError)
                    throw new PostgrestError_1$1.default(b)
            }
            return {
                error: b,
                data: _,
                count: $,
                status: _e,
                statusText: tt
            }
        }
        );
        return this.shouldThrowOnError || (a = a.catch(c => {
            var d, h, g;
            return {
                error: {
                    message: `${(d = c == null ? void 0 : c.name) !== null && d !== void 0 ? d : "FetchError"}: ${c == null ? void 0 : c.message}`,
                    details: `${(h = c == null ? void 0 : c.stack) !== null && h !== void 0 ? h : ""}`,
                    hint: "",
                    code: `${(g = c == null ? void 0 : c.code) !== null && g !== void 0 ? g : ""}`
                },
                data: null,
                count: null,
                status: 0,
                statusText: ""
            }
        }
        )),
        a.then(e, i)
    }
    returns() {
        return this
    }
    overrideTypes() {
        return this
    }
}
;
PostgrestBuilder$2.default = PostgrestBuilder$1;
var __importDefault$4 = commonjsGlobal && commonjsGlobal.__importDefault || function(s) {
    return s && s.__esModule ? s : {
        default: s
    }
}
;
Object.defineProperty(PostgrestTransformBuilder$2, "__esModule", {
    value: !0
});
const PostgrestBuilder_1$1 = __importDefault$4(PostgrestBuilder$2);
let PostgrestTransformBuilder$1 = class extends PostgrestBuilder_1$1.default {
    select(e) {
        let i = !1;
        const o = (e ?? "*").split("").map(a => /\s/.test(a) && !i ? "" : (a === '"' && (i = !i),
        a)).join("");
        return this.url.searchParams.set("select", o),
        this.headers.Prefer && (this.headers.Prefer += ","),
        this.headers.Prefer += "return=representation",
        this
    }
    order(e, {ascending: i=!0, nullsFirst: o, foreignTable: a, referencedTable: c=a}={}) {
        const d = c ? `${c}.order` : "order"
          , h = this.url.searchParams.get(d);
        return this.url.searchParams.set(d, `${h ? `${h},` : ""}${e}.${i ? "asc" : "desc"}${o === void 0 ? "" : o ? ".nullsfirst" : ".nullslast"}`),
        this
    }
    limit(e, {foreignTable: i, referencedTable: o=i}={}) {
        const a = typeof o > "u" ? "limit" : `${o}.limit`;
        return this.url.searchParams.set(a, `${e}`),
        this
    }
    range(e, i, {foreignTable: o, referencedTable: a=o}={}) {
        const c = typeof a > "u" ? "offset" : `${a}.offset`
          , d = typeof a > "u" ? "limit" : `${a}.limit`;
        return this.url.searchParams.set(c, `${e}`),
        this.url.searchParams.set(d, `${i - e + 1}`),
        this
    }
    abortSignal(e) {
        return this.signal = e,
        this
    }
    single() {
        return this.headers.Accept = "application/vnd.pgrst.object+json",
        this
    }
    maybeSingle() {
        return this.method === "GET" ? this.headers.Accept = "application/json" : this.headers.Accept = "application/vnd.pgrst.object+json",
        this.isMaybeSingle = !0,
        this
    }
    csv() {
        return this.headers.Accept = "text/csv",
        this
    }
    geojson() {
        return this.headers.Accept = "application/geo+json",
        this
    }
    explain({analyze: e=!1, verbose: i=!1, settings: o=!1, buffers: a=!1, wal: c=!1, format: d="text"}={}) {
        var h;
        const g = [e ? "analyze" : null, i ? "verbose" : null, o ? "settings" : null, a ? "buffers" : null, c ? "wal" : null].filter(Boolean).join("|")
          , b = (h = this.headers.Accept) !== null && h !== void 0 ? h : "application/json";
        return this.headers.Accept = `application/vnd.pgrst.plan+${d}; for="${b}"; options=${g};`,
        d === "json" ? this : this
    }
    rollback() {
        var e;
        return ((e = this.headers.Prefer) !== null && e !== void 0 ? e : "").trim().length > 0 ? this.headers.Prefer += ",tx=rollback" : this.headers.Prefer = "tx=rollback",
        this
    }
    returns() {
        return this
    }
}
;
PostgrestTransformBuilder$2.default = PostgrestTransformBuilder$1;
var __importDefault$3 = commonjsGlobal && commonjsGlobal.__importDefault || function(s) {
    return s && s.__esModule ? s : {
        default: s
    }
}
;
Object.defineProperty(PostgrestFilterBuilder$2, "__esModule", {
    value: !0
});
const PostgrestTransformBuilder_1$1 = __importDefault$3(PostgrestTransformBuilder$2);
let PostgrestFilterBuilder$1 = class extends PostgrestTransformBuilder_1$1.default {
    eq(e, i) {
        return this.url.searchParams.append(e, `eq.${i}`),
        this
    }
    neq(e, i) {
        return this.url.searchParams.append(e, `neq.${i}`),
        this
    }
    gt(e, i) {
        return this.url.searchParams.append(e, `gt.${i}`),
        this
    }
    gte(e, i) {
        return this.url.searchParams.append(e, `gte.${i}`),
        this
    }
    lt(e, i) {
        return this.url.searchParams.append(e, `lt.${i}`),
        this
    }
    lte(e, i) {
        return this.url.searchParams.append(e, `lte.${i}`),
        this
    }
    like(e, i) {
        return this.url.searchParams.append(e, `like.${i}`),
        this
    }
    likeAllOf(e, i) {
        return this.url.searchParams.append(e, `like(all).{${i.join(",")}}`),
        this
    }
    likeAnyOf(e, i) {
        return this.url.searchParams.append(e, `like(any).{${i.join(",")}}`),
        this
    }
    ilike(e, i) {
        return this.url.searchParams.append(e, `ilike.${i}`),
        this
    }
    ilikeAllOf(e, i) {
        return this.url.searchParams.append(e, `ilike(all).{${i.join(",")}}`),
        this
    }
    ilikeAnyOf(e, i) {
        return this.url.searchParams.append(e, `ilike(any).{${i.join(",")}}`),
        this
    }
    is(e, i) {
        return this.url.searchParams.append(e, `is.${i}`),
        this
    }
    in(e, i) {
        const o = Array.from(new Set(i)).map(a => typeof a == "string" && new RegExp("[,()]").test(a) ? `"${a}"` : `${a}`).join(",");
        return this.url.searchParams.append(e, `in.(${o})`),
        this
    }
    contains(e, i) {
        return typeof i == "string" ? this.url.searchParams.append(e, `cs.${i}`) : Array.isArray(i) ? this.url.searchParams.append(e, `cs.{${i.join(",")}}`) : this.url.searchParams.append(e, `cs.${JSON.stringify(i)}`),
        this
    }
    containedBy(e, i) {
        return typeof i == "string" ? this.url.searchParams.append(e, `cd.${i}`) : Array.isArray(i) ? this.url.searchParams.append(e, `cd.{${i.join(",")}}`) : this.url.searchParams.append(e, `cd.${JSON.stringify(i)}`),
        this
    }
    rangeGt(e, i) {
        return this.url.searchParams.append(e, `sr.${i}`),
        this
    }
    rangeGte(e, i) {
        return this.url.searchParams.append(e, `nxl.${i}`),
        this
    }
    rangeLt(e, i) {
        return this.url.searchParams.append(e, `sl.${i}`),
        this
    }
    rangeLte(e, i) {
        return this.url.searchParams.append(e, `nxr.${i}`),
        this
    }
    rangeAdjacent(e, i) {
        return this.url.searchParams.append(e, `adj.${i}`),
        this
    }
    overlaps(e, i) {
        return typeof i == "string" ? this.url.searchParams.append(e, `ov.${i}`) : this.url.searchParams.append(e, `ov.{${i.join(",")}}`),
        this
    }
    textSearch(e, i, {config: o, type: a}={}) {
        let c = "";
        a === "plain" ? c = "pl" : a === "phrase" ? c = "ph" : a === "websearch" && (c = "w");
        const d = o === void 0 ? "" : `(${o})`;
        return this.url.searchParams.append(e, `${c}fts${d}.${i}`),
        this
    }
    match(e) {
        return Object.entries(e).forEach( ([i,o]) => {
            this.url.searchParams.append(i, `eq.${o}`)
        }
        ),
        this
    }
    not(e, i, o) {
        return this.url.searchParams.append(e, `not.${i}.${o}`),
        this
    }
    or(e, {foreignTable: i, referencedTable: o=i}={}) {
        const a = o ? `${o}.or` : "or";
        return this.url.searchParams.append(a, `(${e})`),
        this
    }
    filter(e, i, o) {
        return this.url.searchParams.append(e, `${i}.${o}`),
        this
    }
}
;
PostgrestFilterBuilder$2.default = PostgrestFilterBuilder$1;
var __importDefault$2 = commonjsGlobal && commonjsGlobal.__importDefault || function(s) {
    return s && s.__esModule ? s : {
        default: s
    }
}
;
Object.defineProperty(PostgrestQueryBuilder$2, "__esModule", {
    value: !0
});
const PostgrestFilterBuilder_1$2 = __importDefault$2(PostgrestFilterBuilder$2);
let PostgrestQueryBuilder$1 = class {
    constructor(e, {headers: i={}, schema: o, fetch: a}) {
        this.url = e,
        this.headers = i,
        this.schema = o,
        this.fetch = a
    }
    select(e, {head: i=!1, count: o}={}) {
        const a = i ? "HEAD" : "GET";
        let c = !1;
        const d = (e ?? "*").split("").map(h => /\s/.test(h) && !c ? "" : (h === '"' && (c = !c),
        h)).join("");
        return this.url.searchParams.set("select", d),
        o && (this.headers.Prefer = `count=${o}`),
        new PostgrestFilterBuilder_1$2.default({
            method: a,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            fetch: this.fetch,
            allowEmpty: !1
        })
    }
    insert(e, {count: i, defaultToNull: o=!0}={}) {
        const a = "POST"
          , c = [];
        if (this.headers.Prefer && c.push(this.headers.Prefer),
        i && c.push(`count=${i}`),
        o || c.push("missing=default"),
        this.headers.Prefer = c.join(","),
        Array.isArray(e)) {
            const d = e.reduce( (h, g) => h.concat(Object.keys(g)), []);
            if (d.length > 0) {
                const h = [...new Set(d)].map(g => `"${g}"`);
                this.url.searchParams.set("columns", h.join(","))
            }
        }
        return new PostgrestFilterBuilder_1$2.default({
            method: a,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            body: e,
            fetch: this.fetch,
            allowEmpty: !1
        })
    }
    upsert(e, {onConflict: i, ignoreDuplicates: o=!1, count: a, defaultToNull: c=!0}={}) {
        const d = "POST"
          , h = [`resolution=${o ? "ignore" : "merge"}-duplicates`];
        if (i !== void 0 && this.url.searchParams.set("on_conflict", i),
        this.headers.Prefer && h.push(this.headers.Prefer),
        a && h.push(`count=${a}`),
        c || h.push("missing=default"),
        this.headers.Prefer = h.join(","),
        Array.isArray(e)) {
            const g = e.reduce( (b, _) => b.concat(Object.keys(_)), []);
            if (g.length > 0) {
                const b = [...new Set(g)].map(_ => `"${_}"`);
                this.url.searchParams.set("columns", b.join(","))
            }
        }
        return new PostgrestFilterBuilder_1$2.default({
            method: d,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            body: e,
            fetch: this.fetch,
            allowEmpty: !1
        })
    }
    update(e, {count: i}={}) {
        const o = "PATCH"
          , a = [];
        return this.headers.Prefer && a.push(this.headers.Prefer),
        i && a.push(`count=${i}`),
        this.headers.Prefer = a.join(","),
        new PostgrestFilterBuilder_1$2.default({
            method: o,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            body: e,
            fetch: this.fetch,
            allowEmpty: !1
        })
    }
    delete({count: e}={}) {
        const i = "DELETE"
          , o = [];
        return e && o.push(`count=${e}`),
        this.headers.Prefer && o.unshift(this.headers.Prefer),
        this.headers.Prefer = o.join(","),
        new PostgrestFilterBuilder_1$2.default({
            method: i,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            fetch: this.fetch,
            allowEmpty: !1
        })
    }
}
;
PostgrestQueryBuilder$2.default = PostgrestQueryBuilder$1;
var constants = {}
  , version$4 = {};
Object.defineProperty(version$4, "__esModule", {
    value: !0
});
version$4.version = void 0;
version$4.version = "0.0.0-automated";
Object.defineProperty(constants, "__esModule", {
    value: !0
});
constants.DEFAULT_HEADERS = void 0;
const version_1 = version$4;
constants.DEFAULT_HEADERS = {
    "X-Client-Info": `postgrest-js/${version_1.version}`
};
var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function(s) {
    return s && s.__esModule ? s : {
        default: s
    }
}
;
Object.defineProperty(PostgrestClient$2, "__esModule", {
    value: !0
});
const PostgrestQueryBuilder_1$1 = __importDefault$1(PostgrestQueryBuilder$2)
  , PostgrestFilterBuilder_1$1 = __importDefault$1(PostgrestFilterBuilder$2)
  , constants_1 = constants;
let PostgrestClient$1 = class Ho {
    constructor(e, {headers: i={}, schema: o, fetch: a}={}) {
        this.url = e,
        this.headers = Object.assign(Object.assign({}, constants_1.DEFAULT_HEADERS), i),
        this.schemaName = o,
        this.fetch = a
    }
    from(e) {
        const i = new URL(`${this.url}/${e}`);
        return new PostgrestQueryBuilder_1$1.default(i,{
            headers: Object.assign({}, this.headers),
            schema: this.schemaName,
            fetch: this.fetch
        })
    }
    schema(e) {
        return new Ho(this.url,{
            headers: this.headers,
            schema: e,
            fetch: this.fetch
        })
    }
    rpc(e, i={}, {head: o=!1, get: a=!1, count: c}={}) {
        let d;
        const h = new URL(`${this.url}/rpc/${e}`);
        let g;
        o || a ? (d = o ? "HEAD" : "GET",
        Object.entries(i).filter( ([_,$]) => $ !== void 0).map( ([_,$]) => [_, Array.isArray($) ? `{${$.join(",")}}` : `${$}`]).forEach( ([_,$]) => {
            h.searchParams.append(_, $)
        }
        )) : (d = "POST",
        g = i);
        const b = Object.assign({}, this.headers);
        return c && (b.Prefer = `count=${c}`),
        new PostgrestFilterBuilder_1$1.default({
            method: d,
            url: h,
            headers: b,
            schema: this.schemaName,
            body: g,
            fetch: this.fetch,
            allowEmpty: !1
        })
    }
}
;
PostgrestClient$2.default = PostgrestClient$1;
var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(s) {
    return s && s.__esModule ? s : {
        default: s
    }
}
;
Object.defineProperty(cjs, "__esModule", {
    value: !0
});
cjs.PostgrestError = cjs.PostgrestBuilder = cjs.PostgrestTransformBuilder = cjs.PostgrestFilterBuilder = cjs.PostgrestQueryBuilder = cjs.PostgrestClient = void 0;
const PostgrestClient_1 = __importDefault(PostgrestClient$2);
cjs.PostgrestClient = PostgrestClient_1.default;
const PostgrestQueryBuilder_1 = __importDefault(PostgrestQueryBuilder$2);
cjs.PostgrestQueryBuilder = PostgrestQueryBuilder_1.default;
const PostgrestFilterBuilder_1 = __importDefault(PostgrestFilterBuilder$2);
cjs.PostgrestFilterBuilder = PostgrestFilterBuilder_1.default;
const PostgrestTransformBuilder_1 = __importDefault(PostgrestTransformBuilder$2);
cjs.PostgrestTransformBuilder = PostgrestTransformBuilder_1.default;
const PostgrestBuilder_1 = __importDefault(PostgrestBuilder$2);
cjs.PostgrestBuilder = PostgrestBuilder_1.default;
const PostgrestError_1 = __importDefault(PostgrestError$2);
cjs.PostgrestError = PostgrestError_1.default;
var _default = cjs.default = {
    PostgrestClient: PostgrestClient_1.default,
    PostgrestQueryBuilder: PostgrestQueryBuilder_1.default,
    PostgrestFilterBuilder: PostgrestFilterBuilder_1.default,
    PostgrestTransformBuilder: PostgrestTransformBuilder_1.default,
    PostgrestBuilder: PostgrestBuilder_1.default,
    PostgrestError: PostgrestError_1.default
};
const {PostgrestClient, PostgrestQueryBuilder, PostgrestFilterBuilder, PostgrestTransformBuilder, PostgrestBuilder, PostgrestError} = _default;
let WebSocketImpl;
typeof window > "u" ? WebSocketImpl = require("ws") : WebSocketImpl = window.WebSocket;
const WebSocket = WebSocketImpl
  , version$3 = "2.11.9"
  , DEFAULT_HEADERS$3 = {
    "X-Client-Info": `realtime-js/${version$3}`
}
  , VSN = "1.0.0"
  , DEFAULT_TIMEOUT = 1e4
  , WS_CLOSE_NORMAL = 1e3;
var SOCKET_STATES;
(function(s) {
    s[s.connecting = 0] = "connecting",
    s[s.open = 1] = "open",
    s[s.closing = 2] = "closing",
    s[s.closed = 3] = "closed"
}
)(SOCKET_STATES || (SOCKET_STATES = {}));
var CHANNEL_STATES;
(function(s) {
    s.closed = "closed",
    s.errored = "errored",
    s.joined = "joined",
    s.joining = "joining",
    s.leaving = "leaving"
}
)(CHANNEL_STATES || (CHANNEL_STATES = {}));
var CHANNEL_EVENTS;
(function(s) {
    s.close = "phx_close",
    s.error = "phx_error",
    s.join = "phx_join",
    s.reply = "phx_reply",
    s.leave = "phx_leave",
    s.access_token = "access_token"
}
)(CHANNEL_EVENTS || (CHANNEL_EVENTS = {}));
var TRANSPORTS;
(function(s) {
    s.websocket = "websocket"
}
)(TRANSPORTS || (TRANSPORTS = {}));
var CONNECTION_STATE;
(function(s) {
    s.Connecting = "connecting",
    s.Open = "open",
    s.Closing = "closing",
    s.Closed = "closed"
}
)(CONNECTION_STATE || (CONNECTION_STATE = {}));
class Serializer {
    constructor() {
        this.HEADER_LENGTH = 1
    }
    decode(e, i) {
        return e.constructor === ArrayBuffer ? i(this._binaryDecode(e)) : i(typeof e == "string" ? JSON.parse(e) : {})
    }
    _binaryDecode(e) {
        const i = new DataView(e)
          , o = new TextDecoder;
        return this._decodeBroadcast(e, i, o)
    }
    _decodeBroadcast(e, i, o) {
        const a = i.getUint8(1)
          , c = i.getUint8(2);
        let d = this.HEADER_LENGTH + 2;
        const h = o.decode(e.slice(d, d + a));
        d = d + a;
        const g = o.decode(e.slice(d, d + c));
        d = d + c;
        const b = JSON.parse(o.decode(e.slice(d, e.byteLength)));
        return {
            ref: null,
            topic: h,
            event: g,
            payload: b
        }
    }
}
class Timer {
    constructor(e, i) {
        this.callback = e,
        this.timerCalc = i,
        this.timer = void 0,
        this.tries = 0,
        this.callback = e,
        this.timerCalc = i
    }
    reset() {
        this.tries = 0,
        clearTimeout(this.timer)
    }
    scheduleTimeout() {
        clearTimeout(this.timer),
        this.timer = setTimeout( () => {
            this.tries = this.tries + 1,
            this.callback()
        }
        , this.timerCalc(this.tries + 1))
    }
}
var PostgresTypes;
(function(s) {
    s.abstime = "abstime",
    s.bool = "bool",
    s.date = "date",
    s.daterange = "daterange",
    s.float4 = "float4",
    s.float8 = "float8",
    s.int2 = "int2",
    s.int4 = "int4",
    s.int4range = "int4range",
    s.int8 = "int8",
    s.int8range = "int8range",
    s.json = "json",
    s.jsonb = "jsonb",
    s.money = "money",
    s.numeric = "numeric",
    s.oid = "oid",
    s.reltime = "reltime",
    s.text = "text",
    s.time = "time",
    s.timestamp = "timestamp",
    s.timestamptz = "timestamptz",
    s.timetz = "timetz",
    s.tsrange = "tsrange",
    s.tstzrange = "tstzrange"
}
)(PostgresTypes || (PostgresTypes = {}));
const convertChangeData = (s, e, i={}) => {
    var o;
    const a = (o = i.skipTypes) !== null && o !== void 0 ? o : [];
    return Object.keys(e).reduce( (c, d) => (c[d] = convertColumn(d, s, e, a),
    c), {})
}
  , convertColumn = (s, e, i, o) => {
    const a = e.find(h => h.name === s)
      , c = a == null ? void 0 : a.type
      , d = i[s];
    return c && !o.includes(c) ? convertCell(c, d) : noop$2(d)
}
  , convertCell = (s, e) => {
    if (s.charAt(0) === "_") {
        const i = s.slice(1, s.length);
        return toArray(e, i)
    }
    switch (s) {
    case PostgresTypes.bool:
        return toBoolean(e);
    case PostgresTypes.float4:
    case PostgresTypes.float8:
    case PostgresTypes.int2:
    case PostgresTypes.int4:
    case PostgresTypes.int8:
    case PostgresTypes.numeric:
    case PostgresTypes.oid:
        return toNumber(e);
    case PostgresTypes.json:
    case PostgresTypes.jsonb:
        return toJson(e);
    case PostgresTypes.timestamp:
        return toTimestampString(e);
    case PostgresTypes.abstime:
    case PostgresTypes.date:
    case PostgresTypes.daterange:
    case PostgresTypes.int4range:
    case PostgresTypes.int8range:
    case PostgresTypes.money:
    case PostgresTypes.reltime:
    case PostgresTypes.text:
    case PostgresTypes.time:
    case PostgresTypes.timestamptz:
    case PostgresTypes.timetz:
    case PostgresTypes.tsrange:
    case PostgresTypes.tstzrange:
        return noop$2(e);
    default:
        return noop$2(e)
    }
}
  , noop$2 = s => s
  , toBoolean = s => {
    switch (s) {
    case "t":
        return !0;
    case "f":
        return !1;
    default:
        return s
    }
}
  , toNumber = s => {
    if (typeof s == "string") {
        const e = parseFloat(s);
        if (!Number.isNaN(e))
            return e
    }
    return s
}
  , toJson = s => {
    if (typeof s == "string")
        try {
            return JSON.parse(s)
        } catch (e) {
            return console.log(`JSON parse error: ${e}`),
            s
        }
    return s
}
  , toArray = (s, e) => {
    if (typeof s != "string")
        return s;
    const i = s.length - 1
      , o = s[i];
    if (s[0] === "{" && o === "}") {
        let c;
        const d = s.slice(1, i);
        try {
            c = JSON.parse("[" + d + "]")
        } catch {
            c = d ? d.split(",") : []
        }
        return c.map(h => convertCell(e, h))
    }
    return s
}
  , toTimestampString = s => typeof s == "string" ? s.replace(" ", "T") : s
  , httpEndpointURL = s => {
    let e = s;
    return e = e.replace(/^ws/i, "http"),
    e = e.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i, ""),
    e.replace(/\/+$/, "")
}
;
class Push {
    constructor(e, i, o={}, a=DEFAULT_TIMEOUT) {
        this.channel = e,
        this.event = i,
        this.payload = o,
        this.timeout = a,
        this.sent = !1,
        this.timeoutTimer = void 0,
        this.ref = "",
        this.receivedResp = null,
        this.recHooks = [],
        this.refEvent = null
    }
    resend(e) {
        this.timeout = e,
        this._cancelRefEvent(),
        this.ref = "",
        this.refEvent = null,
        this.receivedResp = null,
        this.sent = !1,
        this.send()
    }
    send() {
        this._hasReceived("timeout") || (this.startTimeout(),
        this.sent = !0,
        this.channel.socket.push({
            topic: this.channel.topic,
            event: this.event,
            payload: this.payload,
            ref: this.ref,
            join_ref: this.channel._joinRef()
        }))
    }
    updatePayload(e) {
        this.payload = Object.assign(Object.assign({}, this.payload), e)
    }
    receive(e, i) {
        var o;
        return this._hasReceived(e) && i((o = this.receivedResp) === null || o === void 0 ? void 0 : o.response),
        this.recHooks.push({
            status: e,
            callback: i
        }),
        this
    }
    startTimeout() {
        if (this.timeoutTimer)
            return;
        this.ref = this.channel.socket._makeRef(),
        this.refEvent = this.channel._replyEventName(this.ref);
        const e = i => {
            this._cancelRefEvent(),
            this._cancelTimeout(),
            this.receivedResp = i,
            this._matchReceive(i)
        }
        ;
        this.channel._on(this.refEvent, {}, e),
        this.timeoutTimer = setTimeout( () => {
            this.trigger("timeout", {})
        }
        , this.timeout)
    }
    trigger(e, i) {
        this.refEvent && this.channel._trigger(this.refEvent, {
            status: e,
            response: i
        })
    }
    destroy() {
        this._cancelRefEvent(),
        this._cancelTimeout()
    }
    _cancelRefEvent() {
        this.refEvent && this.channel._off(this.refEvent, {})
    }
    _cancelTimeout() {
        clearTimeout(this.timeoutTimer),
        this.timeoutTimer = void 0
    }
    _matchReceive({status: e, response: i}) {
        this.recHooks.filter(o => o.status === e).forEach(o => o.callback(i))
    }
    _hasReceived(e) {
        return this.receivedResp && this.receivedResp.status === e
    }
}
var REALTIME_PRESENCE_LISTEN_EVENTS;
(function(s) {
    s.SYNC = "sync",
    s.JOIN = "join",
    s.LEAVE = "leave"
}
)(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));
class RealtimePresence {
    constructor(e, i) {
        this.channel = e,
        this.state = {},
        this.pendingDiffs = [],
        this.joinRef = null,
        this.caller = {
            onJoin: () => {}
            ,
            onLeave: () => {}
            ,
            onSync: () => {}
        };
        const o = (i == null ? void 0 : i.events) || {
            state: "presence_state",
            diff: "presence_diff"
        };
        this.channel._on(o.state, {}, a => {
            const {onJoin: c, onLeave: d, onSync: h} = this.caller;
            this.joinRef = this.channel._joinRef(),
            this.state = RealtimePresence.syncState(this.state, a, c, d),
            this.pendingDiffs.forEach(g => {
                this.state = RealtimePresence.syncDiff(this.state, g, c, d)
            }
            ),
            this.pendingDiffs = [],
            h()
        }
        ),
        this.channel._on(o.diff, {}, a => {
            const {onJoin: c, onLeave: d, onSync: h} = this.caller;
            this.inPendingSyncState() ? this.pendingDiffs.push(a) : (this.state = RealtimePresence.syncDiff(this.state, a, c, d),
            h())
        }
        ),
        this.onJoin( (a, c, d) => {
            this.channel._trigger("presence", {
                event: "join",
                key: a,
                currentPresences: c,
                newPresences: d
            })
        }
        ),
        this.onLeave( (a, c, d) => {
            this.channel._trigger("presence", {
                event: "leave",
                key: a,
                currentPresences: c,
                leftPresences: d
            })
        }
        ),
        this.onSync( () => {
            this.channel._trigger("presence", {
                event: "sync"
            })
        }
        )
    }
    static syncState(e, i, o, a) {
        const c = this.cloneDeep(e)
          , d = this.transformState(i)
          , h = {}
          , g = {};
        return this.map(c, (b, _) => {
            d[b] || (g[b] = _)
        }
        ),
        this.map(d, (b, _) => {
            const $ = c[b];
            if ($) {
                const _e = _.map(it => it.presence_ref)
                  , tt = $.map(it => it.presence_ref)
                  , rt = _.filter(it => tt.indexOf(it.presence_ref) < 0)
                  , et = $.filter(it => _e.indexOf(it.presence_ref) < 0);
                rt.length > 0 && (h[b] = rt),
                et.length > 0 && (g[b] = et)
            } else
                h[b] = _
        }
        ),
        this.syncDiff(c, {
            joins: h,
            leaves: g
        }, o, a)
    }
    static syncDiff(e, i, o, a) {
        const {joins: c, leaves: d} = {
            joins: this.transformState(i.joins),
            leaves: this.transformState(i.leaves)
        };
        return o || (o = () => {}
        ),
        a || (a = () => {}
        ),
        this.map(c, (h, g) => {
            var b;
            const _ = (b = e[h]) !== null && b !== void 0 ? b : [];
            if (e[h] = this.cloneDeep(g),
            _.length > 0) {
                const $ = e[h].map(tt => tt.presence_ref)
                  , _e = _.filter(tt => $.indexOf(tt.presence_ref) < 0);
                e[h].unshift(..._e)
            }
            o(h, _, g)
        }
        ),
        this.map(d, (h, g) => {
            let b = e[h];
            if (!b)
                return;
            const _ = g.map($ => $.presence_ref);
            b = b.filter($ => _.indexOf($.presence_ref) < 0),
            e[h] = b,
            a(h, b, g),
            b.length === 0 && delete e[h]
        }
        ),
        e
    }
    static map(e, i) {
        return Object.getOwnPropertyNames(e).map(o => i(o, e[o]))
    }
    static transformState(e) {
        return e = this.cloneDeep(e),
        Object.getOwnPropertyNames(e).reduce( (i, o) => {
            const a = e[o];
            return "metas"in a ? i[o] = a.metas.map(c => (c.presence_ref = c.phx_ref,
            delete c.phx_ref,
            delete c.phx_ref_prev,
            c)) : i[o] = a,
            i
        }
        , {})
    }
    static cloneDeep(e) {
        return JSON.parse(JSON.stringify(e))
    }
    onJoin(e) {
        this.caller.onJoin = e
    }
    onLeave(e) {
        this.caller.onLeave = e
    }
    onSync(e) {
        this.caller.onSync = e
    }
    inPendingSyncState() {
        return !this.joinRef || this.joinRef !== this.channel._joinRef()
    }
}
var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;
(function(s) {
    s.ALL = "*",
    s.INSERT = "INSERT",
    s.UPDATE = "UPDATE",
    s.DELETE = "DELETE"
}
)(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));
var REALTIME_LISTEN_TYPES;
(function(s) {
    s.BROADCAST = "broadcast",
    s.PRESENCE = "presence",
    s.POSTGRES_CHANGES = "postgres_changes",
    s.SYSTEM = "system"
}
)(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));
var REALTIME_SUBSCRIBE_STATES;
(function(s) {
    s.SUBSCRIBED = "SUBSCRIBED",
    s.TIMED_OUT = "TIMED_OUT",
    s.CLOSED = "CLOSED",
    s.CHANNEL_ERROR = "CHANNEL_ERROR"
}
)(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));
class RealtimeChannel {
    constructor(e, i={
        config: {}
    }, o) {
        this.topic = e,
        this.params = i,
        this.socket = o,
        this.bindings = {},
        this.state = CHANNEL_STATES.closed,
        this.joinedOnce = !1,
        this.pushBuffer = [],
        this.subTopic = e.replace(/^realtime:/i, ""),
        this.params.config = Object.assign({
            broadcast: {
                ack: !1,
                self: !1
            },
            presence: {
                key: ""
            },
            private: !1
        }, i.config),
        this.timeout = this.socket.timeout,
        this.joinPush = new Push(this,CHANNEL_EVENTS.join,this.params,this.timeout),
        this.rejoinTimer = new Timer( () => this._rejoinUntilConnected(),this.socket.reconnectAfterMs),
        this.joinPush.receive("ok", () => {
            this.state = CHANNEL_STATES.joined,
            this.rejoinTimer.reset(),
            this.pushBuffer.forEach(a => a.send()),
            this.pushBuffer = []
        }
        ),
        this._onClose( () => {
            this.rejoinTimer.reset(),
            this.socket.log("channel", `close ${this.topic} ${this._joinRef()}`),
            this.state = CHANNEL_STATES.closed,
            this.socket._remove(this)
        }
        ),
        this._onError(a => {
            this._isLeaving() || this._isClosed() || (this.socket.log("channel", `error ${this.topic}`, a),
            this.state = CHANNEL_STATES.errored,
            this.rejoinTimer.scheduleTimeout())
        }
        ),
        this.joinPush.receive("timeout", () => {
            this._isJoining() && (this.socket.log("channel", `timeout ${this.topic}`, this.joinPush.timeout),
            this.state = CHANNEL_STATES.errored,
            this.rejoinTimer.scheduleTimeout())
        }
        ),
        this._on(CHANNEL_EVENTS.reply, {}, (a, c) => {
            this._trigger(this._replyEventName(c), a)
        }
        ),
        this.presence = new RealtimePresence(this),
        this.broadcastEndpointURL = httpEndpointURL(this.socket.endPoint) + "/api/broadcast",
        this.private = this.params.config.private || !1
    }
    subscribe(e, i=this.timeout) {
        var o, a;
        if (this.socket.isConnected() || this.socket.connect(),
        this.joinedOnce)
            throw "tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance";
        {
            const {config: {broadcast: c, presence: d, private: h}} = this.params;
            this._onError(_ => e == null ? void 0 : e(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, _)),
            this._onClose( () => e == null ? void 0 : e(REALTIME_SUBSCRIBE_STATES.CLOSED));
            const g = {}
              , b = {
                broadcast: c,
                presence: d,
                postgres_changes: (a = (o = this.bindings.postgres_changes) === null || o === void 0 ? void 0 : o.map(_ => _.filter)) !== null && a !== void 0 ? a : [],
                private: h
            };
            this.socket.accessTokenValue && (g.access_token = this.socket.accessTokenValue),
            this.updateJoinPayload(Object.assign({
                config: b
            }, g)),
            this.joinedOnce = !0,
            this._rejoin(i),
            this.joinPush.receive("ok", async ({postgres_changes: _}) => {
                var $;
                if (this.socket.setAuth(),
                _ === void 0) {
                    e == null || e(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);
                    return
                } else {
                    const _e = this.bindings.postgres_changes
                      , tt = ($ = _e == null ? void 0 : _e.length) !== null && $ !== void 0 ? $ : 0
                      , rt = [];
                    for (let et = 0; et < tt; et++) {
                        const it = _e[et]
                          , {filter: {event: st, schema: nt, table: lt, filter: dt}} = it
                          , ot = _ && _[et];
                        if (ot && ot.event === st && ot.schema === nt && ot.table === lt && ot.filter === dt)
                            rt.push(Object.assign(Object.assign({}, it), {
                                id: ot.id
                            }));
                        else {
                            this.unsubscribe(),
                            this.state = CHANNEL_STATES.errored,
                            e == null || e(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error("mismatch between server and client bindings for postgres changes"));
                            return
                        }
                    }
                    this.bindings.postgres_changes = rt,
                    e && e(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);
                    return
                }
            }
            ).receive("error", _ => {
                this.state = CHANNEL_STATES.errored,
                e == null || e(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error(JSON.stringify(Object.values(_).join(", ") || "error")))
            }
            ).receive("timeout", () => {
                e == null || e(REALTIME_SUBSCRIBE_STATES.TIMED_OUT)
            }
            )
        }
        return this
    }
    presenceState() {
        return this.presence.state
    }
    async track(e, i={}) {
        return await this.send({
            type: "presence",
            event: "track",
            payload: e
        }, i.timeout || this.timeout)
    }
    async untrack(e={}) {
        return await this.send({
            type: "presence",
            event: "untrack"
        }, e)
    }
    on(e, i, o) {
        return this._on(e, i, o)
    }
    async send(e, i={}) {
        var o, a;
        if (!this._canPush() && e.type === "broadcast") {
            const {event: c, payload: d} = e
              , g = {
                method: "POST",
                headers: {
                    Authorization: this.socket.accessTokenValue ? `Bearer ${this.socket.accessTokenValue}` : "",
                    apikey: this.socket.apiKey ? this.socket.apiKey : "",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    messages: [{
                        topic: this.subTopic,
                        event: c,
                        payload: d,
                        private: this.private
                    }]
                })
            };
            try {
                const b = await this._fetchWithTimeout(this.broadcastEndpointURL, g, (o = i.timeout) !== null && o !== void 0 ? o : this.timeout);
                return await ((a = b.body) === null || a === void 0 ? void 0 : a.cancel()),
                b.ok ? "ok" : "error"
            } catch (b) {
                return b.name === "AbortError" ? "timed out" : "error"
            }
        } else
            return new Promise(c => {
                var d, h, g;
                const b = this._push(e.type, e, i.timeout || this.timeout);
                e.type === "broadcast" && !(!((g = (h = (d = this.params) === null || d === void 0 ? void 0 : d.config) === null || h === void 0 ? void 0 : h.broadcast) === null || g === void 0) && g.ack) && c("ok"),
                b.receive("ok", () => c("ok")),
                b.receive("error", () => c("error")),
                b.receive("timeout", () => c("timed out"))
            }
            )
    }
    updateJoinPayload(e) {
        this.joinPush.updatePayload(e)
    }
    unsubscribe(e=this.timeout) {
        this.state = CHANNEL_STATES.leaving;
        const i = () => {
            this.socket.log("channel", `leave ${this.topic}`),
            this._trigger(CHANNEL_EVENTS.close, "leave", this._joinRef())
        }
        ;
        return this.joinPush.destroy(),
        new Promise(o => {
            const a = new Push(this,CHANNEL_EVENTS.leave,{},e);
            a.receive("ok", () => {
                i(),
                o("ok")
            }
            ).receive("timeout", () => {
                i(),
                o("timed out")
            }
            ).receive("error", () => {
                o("error")
            }
            ),
            a.send(),
            this._canPush() || a.trigger("ok", {})
        }
        )
    }
    teardown() {
        this.pushBuffer.forEach(e => e.destroy()),
        this.rejoinTimer && clearTimeout(this.rejoinTimer.timer),
        this.joinPush.destroy()
    }
    async _fetchWithTimeout(e, i, o) {
        const a = new AbortController
          , c = setTimeout( () => a.abort(), o)
          , d = await this.socket.fetch(e, Object.assign(Object.assign({}, i), {
            signal: a.signal
        }));
        return clearTimeout(c),
        d
    }
    _push(e, i, o=this.timeout) {
        if (!this.joinedOnce)
            throw `tried to push '${e}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;
        let a = new Push(this,e,i,o);
        return this._canPush() ? a.send() : (a.startTimeout(),
        this.pushBuffer.push(a)),
        a
    }
    _onMessage(e, i, o) {
        return i
    }
    _isMember(e) {
        return this.topic === e
    }
    _joinRef() {
        return this.joinPush.ref
    }
    _trigger(e, i, o) {
        var a, c;
        const d = e.toLocaleLowerCase()
          , {close: h, error: g, leave: b, join: _} = CHANNEL_EVENTS;
        if (o && [h, g, b, _].indexOf(d) >= 0 && o !== this._joinRef())
            return;
        let _e = this._onMessage(d, i, o);
        if (i && !_e)
            throw "channel onMessage callbacks must return the payload, modified or unmodified";
        ["insert", "update", "delete"].includes(d) ? (a = this.bindings.postgres_changes) === null || a === void 0 || a.filter(tt => {
            var rt, et, it;
            return ((rt = tt.filter) === null || rt === void 0 ? void 0 : rt.event) === "*" || ((it = (et = tt.filter) === null || et === void 0 ? void 0 : et.event) === null || it === void 0 ? void 0 : it.toLocaleLowerCase()) === d
        }
        ).map(tt => tt.callback(_e, o)) : (c = this.bindings[d]) === null || c === void 0 || c.filter(tt => {
            var rt, et, it, st, nt, lt;
            if (["broadcast", "presence", "postgres_changes"].includes(d))
                if ("id"in tt) {
                    const dt = tt.id
                      , ot = (rt = tt.filter) === null || rt === void 0 ? void 0 : rt.event;
                    return dt && ((et = i.ids) === null || et === void 0 ? void 0 : et.includes(dt)) && (ot === "*" || (ot == null ? void 0 : ot.toLocaleLowerCase()) === ((it = i.data) === null || it === void 0 ? void 0 : it.type.toLocaleLowerCase()))
                } else {
                    const dt = (nt = (st = tt == null ? void 0 : tt.filter) === null || st === void 0 ? void 0 : st.event) === null || nt === void 0 ? void 0 : nt.toLocaleLowerCase();
                    return dt === "*" || dt === ((lt = i == null ? void 0 : i.event) === null || lt === void 0 ? void 0 : lt.toLocaleLowerCase())
                }
            else
                return tt.type.toLocaleLowerCase() === d
        }
        ).map(tt => {
            if (typeof _e == "object" && "ids"in _e) {
                const rt = _e.data
                  , {schema: et, table: it, commit_timestamp: st, type: nt, errors: lt} = rt;
                _e = Object.assign(Object.assign({}, {
                    schema: et,
                    table: it,
                    commit_timestamp: st,
                    eventType: nt,
                    new: {},
                    old: {},
                    errors: lt
                }), this._getPayloadRecords(rt))
            }
            tt.callback(_e, o)
        }
        )
    }
    _isClosed() {
        return this.state === CHANNEL_STATES.closed
    }
    _isJoined() {
        return this.state === CHANNEL_STATES.joined
    }
    _isJoining() {
        return this.state === CHANNEL_STATES.joining
    }
    _isLeaving() {
        return this.state === CHANNEL_STATES.leaving
    }
    _replyEventName(e) {
        return `chan_reply_${e}`
    }
    _on(e, i, o) {
        const a = e.toLocaleLowerCase()
          , c = {
            type: a,
            filter: i,
            callback: o
        };
        return this.bindings[a] ? this.bindings[a].push(c) : this.bindings[a] = [c],
        this
    }
    _off(e, i) {
        const o = e.toLocaleLowerCase();
        return this.bindings[o] = this.bindings[o].filter(a => {
            var c;
            return !(((c = a.type) === null || c === void 0 ? void 0 : c.toLocaleLowerCase()) === o && RealtimeChannel.isEqual(a.filter, i))
        }
        ),
        this
    }
    static isEqual(e, i) {
        if (Object.keys(e).length !== Object.keys(i).length)
            return !1;
        for (const o in e)
            if (e[o] !== i[o])
                return !1;
        return !0
    }
    _rejoinUntilConnected() {
        this.rejoinTimer.scheduleTimeout(),
        this.socket.isConnected() && this._rejoin()
    }
    _onClose(e) {
        this._on(CHANNEL_EVENTS.close, {}, e)
    }
    _onError(e) {
        this._on(CHANNEL_EVENTS.error, {}, i => e(i))
    }
    _canPush() {
        return this.socket.isConnected() && this._isJoined()
    }
    _rejoin(e=this.timeout) {
        this._isLeaving() || (this.socket._leaveOpenTopic(this.topic),
        this.state = CHANNEL_STATES.joining,
        this.joinPush.resend(e))
    }
    _getPayloadRecords(e) {
        const i = {
            new: {},
            old: {}
        };
        return (e.type === "INSERT" || e.type === "UPDATE") && (i.new = convertChangeData(e.columns, e.record)),
        (e.type === "UPDATE" || e.type === "DELETE") && (i.old = convertChangeData(e.columns, e.old_record)),
        i
    }
}
const noop$1 = () => {}
  , WORKER_SCRIPT = `
  addEventListener("message", (e) => {
    if (e.data.event === "start") {
      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);
    }
  });`;
class RealtimeClient {
    constructor(e, i) {
        var o;
        this.accessTokenValue = null,
        this.apiKey = null,
        this.channels = new Array,
        this.endPoint = "",
        this.httpEndpoint = "",
        this.headers = DEFAULT_HEADERS$3,
        this.params = {},
        this.timeout = DEFAULT_TIMEOUT,
        this.heartbeatIntervalMs = 25e3,
        this.heartbeatTimer = void 0,
        this.pendingHeartbeatRef = null,
        this.heartbeatCallback = noop$1,
        this.ref = 0,
        this.logger = noop$1,
        this.conn = null,
        this.sendBuffer = [],
        this.serializer = new Serializer,
        this.stateChangeCallbacks = {
            open: [],
            close: [],
            error: [],
            message: []
        },
        this.accessToken = null,
        this._resolveFetch = c => {
            let d;
            return c ? d = c : typeof fetch > "u" ? d = (...h) => __vitePreload(async () => {
                const {default: g} = await Promise.resolve().then( () => browser);
                return {
                    default: g
                }
            }
            , void 0).then( ({default: g}) => g(...h)) : d = fetch,
            (...h) => d(...h)
        }
        ,
        this.endPoint = `${e}/${TRANSPORTS.websocket}`,
        this.httpEndpoint = httpEndpointURL(e),
        i != null && i.transport ? this.transport = i.transport : this.transport = null,
        i != null && i.params && (this.params = i.params),
        i != null && i.headers && (this.headers = Object.assign(Object.assign({}, this.headers), i.headers)),
        i != null && i.timeout && (this.timeout = i.timeout),
        i != null && i.logger && (this.logger = i.logger),
        (i != null && i.logLevel || i != null && i.log_level) && (this.logLevel = i.logLevel || i.log_level,
        this.params = Object.assign(Object.assign({}, this.params), {
            log_level: this.logLevel
        })),
        i != null && i.heartbeatIntervalMs && (this.heartbeatIntervalMs = i.heartbeatIntervalMs);
        const a = (o = i == null ? void 0 : i.params) === null || o === void 0 ? void 0 : o.apikey;
        if (a && (this.accessTokenValue = a,
        this.apiKey = a),
        this.reconnectAfterMs = i != null && i.reconnectAfterMs ? i.reconnectAfterMs : c => [1e3, 2e3, 5e3, 1e4][c - 1] || 1e4,
        this.encode = i != null && i.encode ? i.encode : (c, d) => d(JSON.stringify(c)),
        this.decode = i != null && i.decode ? i.decode : this.serializer.decode.bind(this.serializer),
        this.reconnectTimer = new Timer(async () => {
            this.disconnect(),
            this.connect()
        }
        ,this.reconnectAfterMs),
        this.fetch = this._resolveFetch(i == null ? void 0 : i.fetch),
        i != null && i.worker) {
            if (typeof window < "u" && !window.Worker)
                throw new Error("Web Worker is not supported");
            this.worker = (i == null ? void 0 : i.worker) || !1,
            this.workerUrl = i == null ? void 0 : i.workerUrl
        }
        this.accessToken = (i == null ? void 0 : i.accessToken) || null
    }
    connect() {
        if (!this.conn) {
            if (this.transport || (this.transport = WebSocket),
            this.transport) {
                typeof window < "u" && this.transport === window.WebSocket ? this.conn = new this.transport(this.endpointURL()) : this.conn = new this.transport(this.endpointURL(),void 0,{
                    headers: this.headers
                }),
                this.setupConnection();
                return
            }
            this.conn = new WSWebSocketDummy(this.endpointURL(),void 0,{
                close: () => {
                    this.conn = null
                }
            })
        }
    }
    endpointURL() {
        return this._appendParams(this.endPoint, Object.assign({}, this.params, {
            vsn: VSN
        }))
    }
    disconnect(e, i) {
        this.conn && (this.conn.onclose = function() {}
        ,
        e ? this.conn.close(e, i ?? "") : this.conn.close(),
        this.conn = null,
        this.heartbeatTimer && clearInterval(this.heartbeatTimer),
        this.reconnectTimer.reset(),
        this.channels.forEach(o => o.teardown()))
    }
    getChannels() {
        return this.channels
    }
    async removeChannel(e) {
        const i = await e.unsubscribe();
        return this.channels = this.channels.filter(o => o._joinRef !== e._joinRef),
        this.channels.length === 0 && this.disconnect(),
        i
    }
    async removeAllChannels() {
        const e = await Promise.all(this.channels.map(i => i.unsubscribe()));
        return this.channels = [],
        this.disconnect(),
        e
    }
    log(e, i, o) {
        this.logger(e, i, o)
    }
    connectionState() {
        switch (this.conn && this.conn.readyState) {
        case SOCKET_STATES.connecting:
            return CONNECTION_STATE.Connecting;
        case SOCKET_STATES.open:
            return CONNECTION_STATE.Open;
        case SOCKET_STATES.closing:
            return CONNECTION_STATE.Closing;
        default:
            return CONNECTION_STATE.Closed
        }
    }
    isConnected() {
        return this.connectionState() === CONNECTION_STATE.Open
    }
    channel(e, i={
        config: {}
    }) {
        const o = `realtime:${e}`
          , a = this.getChannels().find(c => c.topic === o);
        if (a)
            return a;
        {
            const c = new RealtimeChannel(`realtime:${e}`,i,this);
            return this.channels.push(c),
            c
        }
    }
    push(e) {
        const {topic: i, event: o, payload: a, ref: c} = e
          , d = () => {
            this.encode(e, h => {
                var g;
                (g = this.conn) === null || g === void 0 || g.send(h)
            }
            )
        }
        ;
        this.log("push", `${i} ${o} (${c})`, a),
        this.isConnected() ? d() : this.sendBuffer.push(d)
    }
    async setAuth(e=null) {
        let i = e || this.accessToken && await this.accessToken() || this.accessTokenValue;
        this.accessTokenValue != i && (this.accessTokenValue = i,
        this.channels.forEach(o => {
            i && o.updateJoinPayload({
                access_token: i,
                version: this.headers && this.headers["X-Client-Info"]
            }),
            o.joinedOnce && o._isJoined() && o._push(CHANNEL_EVENTS.access_token, {
                access_token: i
            })
        }
        ))
    }
    async sendHeartbeat() {
        var e;
        if (!this.isConnected()) {
            this.heartbeatCallback("disconnected");
            return
        }
        if (this.pendingHeartbeatRef) {
            this.pendingHeartbeatRef = null,
            this.log("transport", "heartbeat timeout. Attempting to re-establish connection"),
            this.heartbeatCallback("timeout"),
            (e = this.conn) === null || e === void 0 || e.close(WS_CLOSE_NORMAL, "hearbeat timeout");
            return
        }
        this.pendingHeartbeatRef = this._makeRef(),
        this.push({
            topic: "phoenix",
            event: "heartbeat",
            payload: {},
            ref: this.pendingHeartbeatRef
        }),
        this.heartbeatCallback("sent"),
        await this.setAuth()
    }
    onHeartbeat(e) {
        this.heartbeatCallback = e
    }
    flushSendBuffer() {
        this.isConnected() && this.sendBuffer.length > 0 && (this.sendBuffer.forEach(e => e()),
        this.sendBuffer = [])
    }
    _makeRef() {
        let e = this.ref + 1;
        return e === this.ref ? this.ref = 0 : this.ref = e,
        this.ref.toString()
    }
    _leaveOpenTopic(e) {
        let i = this.channels.find(o => o.topic === e && (o._isJoined() || o._isJoining()));
        i && (this.log("transport", `leaving duplicate topic "${e}"`),
        i.unsubscribe())
    }
    _remove(e) {
        this.channels = this.channels.filter(i => i.topic !== e.topic)
    }
    setupConnection() {
        this.conn && (this.conn.binaryType = "arraybuffer",
        this.conn.onopen = () => this._onConnOpen(),
        this.conn.onerror = e => this._onConnError(e),
        this.conn.onmessage = e => this._onConnMessage(e),
        this.conn.onclose = e => this._onConnClose(e))
    }
    _onConnMessage(e) {
        this.decode(e.data, i => {
            let {topic: o, event: a, payload: c, ref: d} = i;
            o === "phoenix" && a === "phx_reply" && this.heartbeatCallback(i.payload.status == "ok" ? "ok" : "error"),
            d && d === this.pendingHeartbeatRef && (this.pendingHeartbeatRef = null),
            this.log("receive", `${c.status || ""} ${o} ${a} ${d && "(" + d + ")" || ""}`, c),
            Array.from(this.channels).filter(h => h._isMember(o)).forEach(h => h._trigger(a, c, d)),
            this.stateChangeCallbacks.message.forEach(h => h(i))
        }
        )
    }
    _onConnOpen() {
        if (this.log("transport", `connected to ${this.endpointURL()}`),
        this.flushSendBuffer(),
        this.reconnectTimer.reset(),
        !this.worker)
            this.heartbeatTimer && clearInterval(this.heartbeatTimer),
            this.heartbeatTimer = setInterval( () => this.sendHeartbeat(), this.heartbeatIntervalMs);
        else {
            this.workerUrl ? this.log("worker", `starting worker for from ${this.workerUrl}`) : this.log("worker", "starting default worker");
            const e = this._workerObjectUrl(this.workerUrl);
            this.workerRef = new Worker(e),
            this.workerRef.onerror = i => {
                this.log("worker", "worker error", i.message),
                this.workerRef.terminate()
            }
            ,
            this.workerRef.onmessage = i => {
                i.data.event === "keepAlive" && this.sendHeartbeat()
            }
            ,
            this.workerRef.postMessage({
                event: "start",
                interval: this.heartbeatIntervalMs
            })
        }
        this.stateChangeCallbacks.open.forEach(e => e())
    }
    _onConnClose(e) {
        this.log("transport", "close", e),
        this._triggerChanError(),
        this.heartbeatTimer && clearInterval(this.heartbeatTimer),
        this.reconnectTimer.scheduleTimeout(),
        this.stateChangeCallbacks.close.forEach(i => i(e))
    }
    _onConnError(e) {
        this.log("transport", e.message),
        this._triggerChanError(),
        this.stateChangeCallbacks.error.forEach(i => i(e))
    }
    _triggerChanError() {
        this.channels.forEach(e => e._trigger(CHANNEL_EVENTS.error))
    }
    _appendParams(e, i) {
        if (Object.keys(i).length === 0)
            return e;
        const o = e.match(/\?/) ? "&" : "?"
          , a = new URLSearchParams(i);
        return `${e}${o}${a}`
    }
    _workerObjectUrl(e) {
        let i;
        if (e)
            i = e;
        else {
            const o = new Blob([WORKER_SCRIPT],{
                type: "application/javascript"
            });
            i = URL.createObjectURL(o)
        }
        return i
    }
}
class WSWebSocketDummy {
    constructor(e, i, o) {
        this.binaryType = "arraybuffer",
        this.onclose = () => {}
        ,
        this.onerror = () => {}
        ,
        this.onmessage = () => {}
        ,
        this.onopen = () => {}
        ,
        this.readyState = SOCKET_STATES.connecting,
        this.send = () => {}
        ,
        this.url = null,
        this.url = e,
        this.close = o.close
    }
}
class StorageError extends Error {
    constructor(e) {
        super(e),
        this.__isStorageError = !0,
        this.name = "StorageError"
    }
}
function isStorageError(s) {
    return typeof s == "object" && s !== null && "__isStorageError"in s
}
class StorageApiError extends StorageError {
    constructor(e, i) {
        super(e),
        this.name = "StorageApiError",
        this.status = i
    }
    toJSON() {
        return {
            name: this.name,
            message: this.message,
            status: this.status
        }
    }
}
class StorageUnknownError extends StorageError {
    constructor(e, i) {
        super(e),
        this.name = "StorageUnknownError",
        this.originalError = i
    }
}
var __awaiter$6 = function(s, e, i, o) {
    function a(c) {
        return c instanceof i ? c : new i(function(d) {
            d(c)
        }
        )
    }
    return new (i || (i = Promise))(function(c, d) {
        function h(_) {
            try {
                b(o.next(_))
            } catch ($) {
                d($)
            }
        }
        function g(_) {
            try {
                b(o.throw(_))
            } catch ($) {
                d($)
            }
        }
        function b(_) {
            _.done ? c(_.value) : a(_.value).then(h, g)
        }
        b((o = o.apply(s, e || [])).next())
    }
    )
};
const resolveFetch$2 = s => {
    let e;
    return s ? e = s : typeof fetch > "u" ? e = (...i) => __vitePreload(async () => {
        const {default: o} = await Promise.resolve().then( () => browser);
        return {
            default: o
        }
    }
    , void 0).then( ({default: o}) => o(...i)) : e = fetch,
    (...i) => e(...i)
}
  , resolveResponse = () => __awaiter$6(void 0, void 0, void 0, function*() {
    return typeof Response > "u" ? (yield __vitePreload( () => Promise.resolve().then( () => browser), void 0)).Response : Response
})
  , recursiveToCamel = s => {
    if (Array.isArray(s))
        return s.map(i => recursiveToCamel(i));
    if (typeof s == "function" || s !== Object(s))
        return s;
    const e = {};
    return Object.entries(s).forEach( ([i,o]) => {
        const a = i.replace(/([-_][a-z])/gi, c => c.toUpperCase().replace(/[-_]/g, ""));
        e[a] = recursiveToCamel(o)
    }
    ),
    e
}
;
var __awaiter$5 = function(s, e, i, o) {
    function a(c) {
        return c instanceof i ? c : new i(function(d) {
            d(c)
        }
        )
    }
    return new (i || (i = Promise))(function(c, d) {
        function h(_) {
            try {
                b(o.next(_))
            } catch ($) {
                d($)
            }
        }
        function g(_) {
            try {
                b(o.throw(_))
            } catch ($) {
                d($)
            }
        }
        function b(_) {
            _.done ? c(_.value) : a(_.value).then(h, g)
        }
        b((o = o.apply(s, e || [])).next())
    }
    )
};
const _getErrorMessage$1 = s => s.msg || s.message || s.error_description || s.error || JSON.stringify(s)
  , handleError$1 = (s, e, i) => __awaiter$5(void 0, void 0, void 0, function*() {
    const o = yield resolveResponse();
    s instanceof o && !(i != null && i.noResolveJson) ? s.json().then(a => {
        e(new StorageApiError(_getErrorMessage$1(a),s.status || 500))
    }
    ).catch(a => {
        e(new StorageUnknownError(_getErrorMessage$1(a),a))
    }
    ) : e(new StorageUnknownError(_getErrorMessage$1(s),s))
})
  , _getRequestParams$1 = (s, e, i, o) => {
    const a = {
        method: s,
        headers: (e == null ? void 0 : e.headers) || {}
    };
    return s === "GET" ? a : (a.headers = Object.assign({
        "Content-Type": "application/json"
    }, e == null ? void 0 : e.headers),
    o && (a.body = JSON.stringify(o)),
    Object.assign(Object.assign({}, a), i))
}
;
function _handleRequest$1(s, e, i, o, a, c) {
    return __awaiter$5(this, void 0, void 0, function*() {
        return new Promise( (d, h) => {
            s(i, _getRequestParams$1(e, o, a, c)).then(g => {
                if (!g.ok)
                    throw g;
                return o != null && o.noResolveJson ? g : g.json()
            }
            ).then(g => d(g)).catch(g => handleError$1(g, h, o))
        }
        )
    })
}
function get(s, e, i, o) {
    return __awaiter$5(this, void 0, void 0, function*() {
        return _handleRequest$1(s, "GET", e, i, o)
    })
}
function post(s, e, i, o, a) {
    return __awaiter$5(this, void 0, void 0, function*() {
        return _handleRequest$1(s, "POST", e, o, a, i)
    })
}
function put(s, e, i, o, a) {
    return __awaiter$5(this, void 0, void 0, function*() {
        return _handleRequest$1(s, "PUT", e, o, a, i)
    })
}
function head(s, e, i, o) {
    return __awaiter$5(this, void 0, void 0, function*() {
        return _handleRequest$1(s, "HEAD", e, Object.assign(Object.assign({}, i), {
            noResolveJson: !0
        }), o)
    })
}
function remove(s, e, i, o, a) {
    return __awaiter$5(this, void 0, void 0, function*() {
        return _handleRequest$1(s, "DELETE", e, o, a, i)
    })
}
var __awaiter$4 = function(s, e, i, o) {
    function a(c) {
        return c instanceof i ? c : new i(function(d) {
            d(c)
        }
        )
    }
    return new (i || (i = Promise))(function(c, d) {
        function h(_) {
            try {
                b(o.next(_))
            } catch ($) {
                d($)
            }
        }
        function g(_) {
            try {
                b(o.throw(_))
            } catch ($) {
                d($)
            }
        }
        function b(_) {
            _.done ? c(_.value) : a(_.value).then(h, g)
        }
        b((o = o.apply(s, e || [])).next())
    }
    )
};
const DEFAULT_SEARCH_OPTIONS = {
    limit: 100,
    offset: 0,
    sortBy: {
        column: "name",
        order: "asc"
    }
}
  , DEFAULT_FILE_OPTIONS = {
    cacheControl: "3600",
    contentType: "text/plain;charset=UTF-8",
    upsert: !1
};
class StorageFileApi {
    constructor(e, i={}, o, a) {
        this.url = e,
        this.headers = i,
        this.bucketId = o,
        this.fetch = resolveFetch$2(a)
    }
    uploadOrUpdate(e, i, o, a) {
        return __awaiter$4(this, void 0, void 0, function*() {
            try {
                let c;
                const d = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), a);
                let h = Object.assign(Object.assign({}, this.headers), e === "POST" && {
                    "x-upsert": String(d.upsert)
                });
                const g = d.metadata;
                typeof Blob < "u" && o instanceof Blob ? (c = new FormData,
                c.append("cacheControl", d.cacheControl),
                g && c.append("metadata", this.encodeMetadata(g)),
                c.append("", o)) : typeof FormData < "u" && o instanceof FormData ? (c = o,
                c.append("cacheControl", d.cacheControl),
                g && c.append("metadata", this.encodeMetadata(g))) : (c = o,
                h["cache-control"] = `max-age=${d.cacheControl}`,
                h["content-type"] = d.contentType,
                g && (h["x-metadata"] = this.toBase64(this.encodeMetadata(g)))),
                a != null && a.headers && (h = Object.assign(Object.assign({}, h), a.headers));
                const b = this._removeEmptyFolders(i)
                  , _ = this._getFinalPath(b)
                  , $ = yield this.fetch(`${this.url}/object/${_}`, Object.assign({
                    method: e,
                    body: c,
                    headers: h
                }, d != null && d.duplex ? {
                    duplex: d.duplex
                } : {}))
                  , _e = yield $.json();
                return $.ok ? {
                    data: {
                        path: b,
                        id: _e.Id,
                        fullPath: _e.Key
                    },
                    error: null
                } : {
                    data: null,
                    error: _e
                }
            } catch (c) {
                if (isStorageError(c))
                    return {
                        data: null,
                        error: c
                    };
                throw c
            }
        })
    }
    upload(e, i, o) {
        return __awaiter$4(this, void 0, void 0, function*() {
            return this.uploadOrUpdate("POST", e, i, o)
        })
    }
    uploadToSignedUrl(e, i, o, a) {
        return __awaiter$4(this, void 0, void 0, function*() {
            const c = this._removeEmptyFolders(e)
              , d = this._getFinalPath(c)
              , h = new URL(this.url + `/object/upload/sign/${d}`);
            h.searchParams.set("token", i);
            try {
                let g;
                const b = Object.assign({
                    upsert: DEFAULT_FILE_OPTIONS.upsert
                }, a)
                  , _ = Object.assign(Object.assign({}, this.headers), {
                    "x-upsert": String(b.upsert)
                });
                typeof Blob < "u" && o instanceof Blob ? (g = new FormData,
                g.append("cacheControl", b.cacheControl),
                g.append("", o)) : typeof FormData < "u" && o instanceof FormData ? (g = o,
                g.append("cacheControl", b.cacheControl)) : (g = o,
                _["cache-control"] = `max-age=${b.cacheControl}`,
                _["content-type"] = b.contentType);
                const $ = yield this.fetch(h.toString(), {
                    method: "PUT",
                    body: g,
                    headers: _
                })
                  , _e = yield $.json();
                return $.ok ? {
                    data: {
                        path: c,
                        fullPath: _e.Key
                    },
                    error: null
                } : {
                    data: null,
                    error: _e
                }
            } catch (g) {
                if (isStorageError(g))
                    return {
                        data: null,
                        error: g
                    };
                throw g
            }
        })
    }
    createSignedUploadUrl(e, i) {
        return __awaiter$4(this, void 0, void 0, function*() {
            try {
                let o = this._getFinalPath(e);
                const a = Object.assign({}, this.headers);
                i != null && i.upsert && (a["x-upsert"] = "true");
                const c = yield post(this.fetch, `${this.url}/object/upload/sign/${o}`, {}, {
                    headers: a
                })
                  , d = new URL(this.url + c.url)
                  , h = d.searchParams.get("token");
                if (!h)
                    throw new StorageError("No token returned by API");
                return {
                    data: {
                        signedUrl: d.toString(),
                        path: e,
                        token: h
                    },
                    error: null
                }
            } catch (o) {
                if (isStorageError(o))
                    return {
                        data: null,
                        error: o
                    };
                throw o
            }
        })
    }
    update(e, i, o) {
        return __awaiter$4(this, void 0, void 0, function*() {
            return this.uploadOrUpdate("PUT", e, i, o)
        })
    }
    move(e, i, o) {
        return __awaiter$4(this, void 0, void 0, function*() {
            try {
                return {
                    data: yield post(this.fetch, `${this.url}/object/move`, {
                        bucketId: this.bucketId,
                        sourceKey: e,
                        destinationKey: i,
                        destinationBucket: o == null ? void 0 : o.destinationBucket
                    }, {
                        headers: this.headers
                    }),
                    error: null
                }
            } catch (a) {
                if (isStorageError(a))
                    return {
                        data: null,
                        error: a
                    };
                throw a
            }
        })
    }
    copy(e, i, o) {
        return __awaiter$4(this, void 0, void 0, function*() {
            try {
                return {
                    data: {
                        path: (yield post(this.fetch, `${this.url}/object/copy`, {
                            bucketId: this.bucketId,
                            sourceKey: e,
                            destinationKey: i,
                            destinationBucket: o == null ? void 0 : o.destinationBucket
                        }, {
                            headers: this.headers
                        })).Key
                    },
                    error: null
                }
            } catch (a) {
                if (isStorageError(a))
                    return {
                        data: null,
                        error: a
                    };
                throw a
            }
        })
    }
    createSignedUrl(e, i, o) {
        return __awaiter$4(this, void 0, void 0, function*() {
            try {
                let a = this._getFinalPath(e)
                  , c = yield post(this.fetch, `${this.url}/object/sign/${a}`, Object.assign({
                    expiresIn: i
                }, o != null && o.transform ? {
                    transform: o.transform
                } : {}), {
                    headers: this.headers
                });
                const d = o != null && o.download ? `&download=${o.download === !0 ? "" : o.download}` : "";
                return c = {
                    signedUrl: encodeURI(`${this.url}${c.signedURL}${d}`)
                },
                {
                    data: c,
                    error: null
                }
            } catch (a) {
                if (isStorageError(a))
                    return {
                        data: null,
                        error: a
                    };
                throw a
            }
        })
    }
    createSignedUrls(e, i, o) {
        return __awaiter$4(this, void 0, void 0, function*() {
            try {
                const a = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {
                    expiresIn: i,
                    paths: e
                }, {
                    headers: this.headers
                })
                  , c = o != null && o.download ? `&download=${o.download === !0 ? "" : o.download}` : "";
                return {
                    data: a.map(d => Object.assign(Object.assign({}, d), {
                        signedUrl: d.signedURL ? encodeURI(`${this.url}${d.signedURL}${c}`) : null
                    })),
                    error: null
                }
            } catch (a) {
                if (isStorageError(a))
                    return {
                        data: null,
                        error: a
                    };
                throw a
            }
        })
    }
    download(e, i) {
        return __awaiter$4(this, void 0, void 0, function*() {
            const a = typeof (i == null ? void 0 : i.transform) < "u" ? "render/image/authenticated" : "object"
              , c = this.transformOptsToQueryString((i == null ? void 0 : i.transform) || {})
              , d = c ? `?${c}` : "";
            try {
                const h = this._getFinalPath(e);
                return {
                    data: yield(yield get(this.fetch, `${this.url}/${a}/${h}${d}`, {
                        headers: this.headers,
                        noResolveJson: !0
                    })).blob(),
                    error: null
                }
            } catch (h) {
                if (isStorageError(h))
                    return {
                        data: null,
                        error: h
                    };
                throw h
            }
        })
    }
    info(e) {
        return __awaiter$4(this, void 0, void 0, function*() {
            const i = this._getFinalPath(e);
            try {
                const o = yield get(this.fetch, `${this.url}/object/info/${i}`, {
                    headers: this.headers
                });
                return {
                    data: recursiveToCamel(o),
                    error: null
                }
            } catch (o) {
                if (isStorageError(o))
                    return {
                        data: null,
                        error: o
                    };
                throw o
            }
        })
    }
    exists(e) {
        return __awaiter$4(this, void 0, void 0, function*() {
            const i = this._getFinalPath(e);
            try {
                return yield head(this.fetch, `${this.url}/object/${i}`, {
                    headers: this.headers
                }),
                {
                    data: !0,
                    error: null
                }
            } catch (o) {
                if (isStorageError(o) && o instanceof StorageUnknownError) {
                    const a = o.originalError;
                    if ([400, 404].includes(a == null ? void 0 : a.status))
                        return {
                            data: !1,
                            error: o
                        }
                }
                throw o
            }
        })
    }
    getPublicUrl(e, i) {
        const o = this._getFinalPath(e)
          , a = []
          , c = i != null && i.download ? `download=${i.download === !0 ? "" : i.download}` : "";
        c !== "" && a.push(c);
        const h = typeof (i == null ? void 0 : i.transform) < "u" ? "render/image" : "object"
          , g = this.transformOptsToQueryString((i == null ? void 0 : i.transform) || {});
        g !== "" && a.push(g);
        let b = a.join("&");
        return b !== "" && (b = `?${b}`),
        {
            data: {
                publicUrl: encodeURI(`${this.url}/${h}/public/${o}${b}`)
            }
        }
    }
    remove(e) {
        return __awaiter$4(this, void 0, void 0, function*() {
            try {
                return {
                    data: yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, {
                        prefixes: e
                    }, {
                        headers: this.headers
                    }),
                    error: null
                }
            } catch (i) {
                if (isStorageError(i))
                    return {
                        data: null,
                        error: i
                    };
                throw i
            }
        })
    }
    list(e, i, o) {
        return __awaiter$4(this, void 0, void 0, function*() {
            try {
                const a = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), i), {
                    prefix: e || ""
                });
                return {
                    data: yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, a, {
                        headers: this.headers
                    }, o),
                    error: null
                }
            } catch (a) {
                if (isStorageError(a))
                    return {
                        data: null,
                        error: a
                    };
                throw a
            }
        })
    }
    encodeMetadata(e) {
        return JSON.stringify(e)
    }
    toBase64(e) {
        return typeof Buffer < "u" ? Buffer.from(e).toString("base64") : btoa(e)
    }
    _getFinalPath(e) {
        return `${this.bucketId}/${e}`
    }
    _removeEmptyFolders(e) {
        return e.replace(/^\/|\/$/g, "").replace(/\/+/g, "/")
    }
    transformOptsToQueryString(e) {
        const i = [];
        return e.width && i.push(`width=${e.width}`),
        e.height && i.push(`height=${e.height}`),
        e.resize && i.push(`resize=${e.resize}`),
        e.format && i.push(`format=${e.format}`),
        e.quality && i.push(`quality=${e.quality}`),
        i.join("&")
    }
}
const version$2 = "2.7.1"
  , DEFAULT_HEADERS$2 = {
    "X-Client-Info": `storage-js/${version$2}`
};
var __awaiter$3 = function(s, e, i, o) {
    function a(c) {
        return c instanceof i ? c : new i(function(d) {
            d(c)
        }
        )
    }
    return new (i || (i = Promise))(function(c, d) {
        function h(_) {
            try {
                b(o.next(_))
            } catch ($) {
                d($)
            }
        }
        function g(_) {
            try {
                b(o.throw(_))
            } catch ($) {
                d($)
            }
        }
        function b(_) {
            _.done ? c(_.value) : a(_.value).then(h, g)
        }
        b((o = o.apply(s, e || [])).next())
    }
    )
};
class StorageBucketApi {
    constructor(e, i={}, o) {
        this.url = e,
        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS$2), i),
        this.fetch = resolveFetch$2(o)
    }
    listBuckets() {
        return __awaiter$3(this, void 0, void 0, function*() {
            try {
                return {
                    data: yield get(this.fetch, `${this.url}/bucket`, {
                        headers: this.headers
                    }),
                    error: null
                }
            } catch (e) {
                if (isStorageError(e))
                    return {
                        data: null,
                        error: e
                    };
                throw e
            }
        })
    }
    getBucket(e) {
        return __awaiter$3(this, void 0, void 0, function*() {
            try {
                return {
                    data: yield get(this.fetch, `${this.url}/bucket/${e}`, {
                        headers: this.headers
                    }),
                    error: null
                }
            } catch (i) {
                if (isStorageError(i))
                    return {
                        data: null,
                        error: i
                    };
                throw i
            }
        })
    }
    createBucket(e, i={
        public: !1
    }) {
        return __awaiter$3(this, void 0, void 0, function*() {
            try {
                return {
                    data: yield post(this.fetch, `${this.url}/bucket`, {
                        id: e,
                        name: e,
                        public: i.public,
                        file_size_limit: i.fileSizeLimit,
                        allowed_mime_types: i.allowedMimeTypes
                    }, {
                        headers: this.headers
                    }),
                    error: null
                }
            } catch (o) {
                if (isStorageError(o))
                    return {
                        data: null,
                        error: o
                    };
                throw o
            }
        })
    }
    updateBucket(e, i) {
        return __awaiter$3(this, void 0, void 0, function*() {
            try {
                return {
                    data: yield put(this.fetch, `${this.url}/bucket/${e}`, {
                        id: e,
                        name: e,
                        public: i.public,
                        file_size_limit: i.fileSizeLimit,
                        allowed_mime_types: i.allowedMimeTypes
                    }, {
                        headers: this.headers
                    }),
                    error: null
                }
            } catch (o) {
                if (isStorageError(o))
                    return {
                        data: null,
                        error: o
                    };
                throw o
            }
        })
    }
    emptyBucket(e) {
        return __awaiter$3(this, void 0, void 0, function*() {
            try {
                return {
                    data: yield post(this.fetch, `${this.url}/bucket/${e}/empty`, {}, {
                        headers: this.headers
                    }),
                    error: null
                }
            } catch (i) {
                if (isStorageError(i))
                    return {
                        data: null,
                        error: i
                    };
                throw i
            }
        })
    }
    deleteBucket(e) {
        return __awaiter$3(this, void 0, void 0, function*() {
            try {
                return {
                    data: yield remove(this.fetch, `${this.url}/bucket/${e}`, {}, {
                        headers: this.headers
                    }),
                    error: null
                }
            } catch (i) {
                if (isStorageError(i))
                    return {
                        data: null,
                        error: i
                    };
                throw i
            }
        })
    }
}
class StorageClient extends StorageBucketApi {
    constructor(e, i={}, o) {
        super(e, i, o)
    }
    from(e) {
        return new StorageFileApi(this.url,this.headers,e,this.fetch)
    }
}
const version$1 = "2.49.9";
let JS_ENV = "";
typeof Deno < "u" ? JS_ENV = "deno" : typeof document < "u" ? JS_ENV = "web" : typeof navigator < "u" && navigator.product === "ReactNative" ? JS_ENV = "react-native" : JS_ENV = "node";
const DEFAULT_HEADERS$1 = {
    "X-Client-Info": `supabase-js-${JS_ENV}/${version$1}`
}
  , DEFAULT_GLOBAL_OPTIONS = {
    headers: DEFAULT_HEADERS$1
}
  , DEFAULT_DB_OPTIONS = {
    schema: "public"
}
  , DEFAULT_AUTH_OPTIONS = {
    autoRefreshToken: !0,
    persistSession: !0,
    detectSessionInUrl: !0,
    flowType: "implicit"
}
  , DEFAULT_REALTIME_OPTIONS = {};
var __awaiter$2 = function(s, e, i, o) {
    function a(c) {
        return c instanceof i ? c : new i(function(d) {
            d(c)
        }
        )
    }
    return new (i || (i = Promise))(function(c, d) {
        function h(_) {
            try {
                b(o.next(_))
            } catch ($) {
                d($)
            }
        }
        function g(_) {
            try {
                b(o.throw(_))
            } catch ($) {
                d($)
            }
        }
        function b(_) {
            _.done ? c(_.value) : a(_.value).then(h, g)
        }
        b((o = o.apply(s, e || [])).next())
    }
    )
};
const resolveFetch$1 = s => {
    let e;
    return s ? e = s : typeof fetch > "u" ? e = nodeFetch : e = fetch,
    (...i) => e(...i)
}
  , resolveHeadersConstructor = () => typeof Headers > "u" ? Headers$1 : Headers
  , fetchWithAuth = (s, e, i) => {
    const o = resolveFetch$1(i)
      , a = resolveHeadersConstructor();
    return (c, d) => __awaiter$2(void 0, void 0, void 0, function*() {
        var h;
        const g = (h = yield e()) !== null && h !== void 0 ? h : s;
        let b = new a(d == null ? void 0 : d.headers);
        return b.has("apikey") || b.set("apikey", s),
        b.has("Authorization") || b.set("Authorization", `Bearer ${g}`),
        o(c, Object.assign(Object.assign({}, d), {
            headers: b
        }))
    })
}
;
var __awaiter$1 = function(s, e, i, o) {
    function a(c) {
        return c instanceof i ? c : new i(function(d) {
            d(c)
        }
        )
    }
    return new (i || (i = Promise))(function(c, d) {
        function h(_) {
            try {
                b(o.next(_))
            } catch ($) {
                d($)
            }
        }
        function g(_) {
            try {
                b(o.throw(_))
            } catch ($) {
                d($)
            }
        }
        function b(_) {
            _.done ? c(_.value) : a(_.value).then(h, g)
        }
        b((o = o.apply(s, e || [])).next())
    }
    )
};
function ensureTrailingSlash(s) {
    return s.endsWith("/") ? s : s + "/"
}
function applySettingDefaults(s, e) {
    var i, o;
    const {db: a, auth: c, realtime: d, global: h} = s
      , {db: g, auth: b, realtime: _, global: $} = e
      , _e = {
        db: Object.assign(Object.assign({}, g), a),
        auth: Object.assign(Object.assign({}, b), c),
        realtime: Object.assign(Object.assign({}, _), d),
        global: Object.assign(Object.assign(Object.assign({}, $), h), {
            headers: Object.assign(Object.assign({}, (i = $ == null ? void 0 : $.headers) !== null && i !== void 0 ? i : {}), (o = h == null ? void 0 : h.headers) !== null && o !== void 0 ? o : {})
        }),
        accessToken: () => __awaiter$1(this, void 0, void 0, function*() {
            return ""
        })
    };
    return s.accessToken ? _e.accessToken = s.accessToken : delete _e.accessToken,
    _e
}
const version = "2.69.1"
  , AUTO_REFRESH_TICK_DURATION_MS = 30 * 1e3
  , AUTO_REFRESH_TICK_THRESHOLD = 3
  , EXPIRY_MARGIN_MS = AUTO_REFRESH_TICK_THRESHOLD * AUTO_REFRESH_TICK_DURATION_MS
  , GOTRUE_URL = "http://localhost:9999"
  , STORAGE_KEY = "supabase.auth.token"
  , DEFAULT_HEADERS = {
    "X-Client-Info": `gotrue-js/${version}`
}
  , API_VERSION_HEADER_NAME = "X-Supabase-Api-Version"
  , API_VERSIONS = {
    "2024-01-01": {
        timestamp: Date.parse("2024-01-01T00:00:00.0Z"),
        name: "2024-01-01"
    }
}
  , BASE64URL_REGEX = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i
  , JWKS_TTL = 6e5;
class AuthError extends Error {
    constructor(e, i, o) {
        super(e),
        this.__isAuthError = !0,
        this.name = "AuthError",
        this.status = i,
        this.code = o
    }
}
function isAuthError(s) {
    return typeof s == "object" && s !== null && "__isAuthError"in s
}
class AuthApiError extends AuthError {
    constructor(e, i, o) {
        super(e, i, o),
        this.name = "AuthApiError",
        this.status = i,
        this.code = o
    }
}
function isAuthApiError(s) {
    return isAuthError(s) && s.name === "AuthApiError"
}
class AuthUnknownError extends AuthError {
    constructor(e, i) {
        super(e),
        this.name = "AuthUnknownError",
        this.originalError = i
    }
}
class CustomAuthError extends AuthError {
    constructor(e, i, o, a) {
        super(e, o, a),
        this.name = i,
        this.status = o
    }
}
class AuthSessionMissingError extends CustomAuthError {
    constructor() {
        super("Auth session missing!", "AuthSessionMissingError", 400, void 0)
    }
}
function isAuthSessionMissingError(s) {
    return isAuthError(s) && s.name === "AuthSessionMissingError"
}
class AuthInvalidTokenResponseError extends CustomAuthError {
    constructor() {
        super("Auth session or user missing", "AuthInvalidTokenResponseError", 500, void 0)
    }
}
class AuthInvalidCredentialsError extends CustomAuthError {
    constructor(e) {
        super(e, "AuthInvalidCredentialsError", 400, void 0)
    }
}
class AuthImplicitGrantRedirectError extends CustomAuthError {
    constructor(e, i=null) {
        super(e, "AuthImplicitGrantRedirectError", 500, void 0),
        this.details = null,
        this.details = i
    }
    toJSON() {
        return {
            name: this.name,
            message: this.message,
            status: this.status,
            details: this.details
        }
    }
}
function isAuthImplicitGrantRedirectError(s) {
    return isAuthError(s) && s.name === "AuthImplicitGrantRedirectError"
}
class AuthPKCEGrantCodeExchangeError extends CustomAuthError {
    constructor(e, i=null) {
        super(e, "AuthPKCEGrantCodeExchangeError", 500, void 0),
        this.details = null,
        this.details = i
    }
    toJSON() {
        return {
            name: this.name,
            message: this.message,
            status: this.status,
            details: this.details
        }
    }
}
class AuthRetryableFetchError extends CustomAuthError {
    constructor(e, i) {
        super(e, "AuthRetryableFetchError", i, void 0)
    }
}
function isAuthRetryableFetchError(s) {
    return isAuthError(s) && s.name === "AuthRetryableFetchError"
}
class AuthWeakPasswordError extends CustomAuthError {
    constructor(e, i, o) {
        super(e, "AuthWeakPasswordError", i, "weak_password"),
        this.reasons = o
    }
}
class AuthInvalidJwtError extends CustomAuthError {
    constructor(e) {
        super(e, "AuthInvalidJwtError", 400, "invalid_jwt")
    }
}
const TO_BASE64URL = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split("")
  , IGNORE_BASE64URL = ` 	
\r=`.split("")
  , FROM_BASE64URL = ( () => {
    const s = new Array(128);
    for (let e = 0; e < s.length; e += 1)
        s[e] = -1;
    for (let e = 0; e < IGNORE_BASE64URL.length; e += 1)
        s[IGNORE_BASE64URL[e].charCodeAt(0)] = -2;
    for (let e = 0; e < TO_BASE64URL.length; e += 1)
        s[TO_BASE64URL[e].charCodeAt(0)] = e;
    return s
}
)();
function byteFromBase64URL(s, e, i) {
    const o = FROM_BASE64URL[s];
    if (o > -1)
        for (e.queue = e.queue << 6 | o,
        e.queuedBits += 6; e.queuedBits >= 8; )
            i(e.queue >> e.queuedBits - 8 & 255),
            e.queuedBits -= 8;
    else {
        if (o === -2)
            return;
        throw new Error(`Invalid Base64-URL character "${String.fromCharCode(s)}"`)
    }
}
function stringFromBase64URL(s) {
    const e = []
      , i = d => {
        e.push(String.fromCodePoint(d))
    }
      , o = {
        utf8seq: 0,
        codepoint: 0
    }
      , a = {
        queue: 0,
        queuedBits: 0
    }
      , c = d => {
        stringFromUTF8(d, o, i)
    }
    ;
    for (let d = 0; d < s.length; d += 1)
        byteFromBase64URL(s.charCodeAt(d), a, c);
    return e.join("")
}
function codepointToUTF8(s, e) {
    if (s <= 127) {
        e(s);
        return
    } else if (s <= 2047) {
        e(192 | s >> 6),
        e(128 | s & 63);
        return
    } else if (s <= 65535) {
        e(224 | s >> 12),
        e(128 | s >> 6 & 63),
        e(128 | s & 63);
        return
    } else if (s <= 1114111) {
        e(240 | s >> 18),
        e(128 | s >> 12 & 63),
        e(128 | s >> 6 & 63),
        e(128 | s & 63);
        return
    }
    throw new Error(`Unrecognized Unicode codepoint: ${s.toString(16)}`)
}
function stringToUTF8(s, e) {
    for (let i = 0; i < s.length; i += 1) {
        let o = s.charCodeAt(i);
        if (o > 55295 && o <= 56319) {
            const a = (o - 55296) * 1024 & 65535;
            o = (s.charCodeAt(i + 1) - 56320 & 65535 | a) + 65536,
            i += 1
        }
        codepointToUTF8(o, e)
    }
}
function stringFromUTF8(s, e, i) {
    if (e.utf8seq === 0) {
        if (s <= 127) {
            i(s);
            return
        }
        for (let o = 1; o < 6; o += 1)
            if (!(s >> 7 - o & 1)) {
                e.utf8seq = o;
                break
            }
        if (e.utf8seq === 2)
            e.codepoint = s & 31;
        else if (e.utf8seq === 3)
            e.codepoint = s & 15;
        else if (e.utf8seq === 4)
            e.codepoint = s & 7;
        else
            throw new Error("Invalid UTF-8 sequence");
        e.utf8seq -= 1
    } else if (e.utf8seq > 0) {
        if (s <= 127)
            throw new Error("Invalid UTF-8 sequence");
        e.codepoint = e.codepoint << 6 | s & 63,
        e.utf8seq -= 1,
        e.utf8seq === 0 && i(e.codepoint)
    }
}
function base64UrlToUint8Array(s) {
    const e = []
      , i = {
        queue: 0,
        queuedBits: 0
    }
      , o = a => {
        e.push(a)
    }
    ;
    for (let a = 0; a < s.length; a += 1)
        byteFromBase64URL(s.charCodeAt(a), i, o);
    return new Uint8Array(e)
}
function stringToUint8Array(s) {
    const e = [];
    return stringToUTF8(s, i => e.push(i)),
    new Uint8Array(e)
}
function expiresAt(s) {
    return Math.round(Date.now() / 1e3) + s
}
function uuid() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(s) {
        const e = Math.random() * 16 | 0;
        return (s == "x" ? e : e & 3 | 8).toString(16)
    })
}
const isBrowser$1 = () => typeof window < "u" && typeof document < "u"
  , localStorageWriteTests = {
    tested: !1,
    writable: !1
}
  , supportsLocalStorage = () => {
    if (!isBrowser$1())
        return !1;
    try {
        if (typeof globalThis.localStorage != "object")
            return !1
    } catch {
        return !1
    }
    if (localStorageWriteTests.tested)
        return localStorageWriteTests.writable;
    const s = `lswt-${Math.random()}${Math.random()}`;
    try {
        globalThis.localStorage.setItem(s, s),
        globalThis.localStorage.removeItem(s),
        localStorageWriteTests.tested = !0,
        localStorageWriteTests.writable = !0
    } catch {
        localStorageWriteTests.tested = !0,
        localStorageWriteTests.writable = !1
    }
    return localStorageWriteTests.writable
}
;
function parseParametersFromURL(s) {
    const e = {}
      , i = new URL(s);
    if (i.hash && i.hash[0] === "#")
        try {
            new URLSearchParams(i.hash.substring(1)).forEach( (a, c) => {
                e[c] = a
            }
            )
        } catch {}
    return i.searchParams.forEach( (o, a) => {
        e[a] = o
    }
    ),
    e
}
const resolveFetch = s => {
    let e;
    return s ? e = s : typeof fetch > "u" ? e = (...i) => __vitePreload(async () => {
        const {default: o} = await Promise.resolve().then( () => browser);
        return {
            default: o
        }
    }
    , void 0).then( ({default: o}) => o(...i)) : e = fetch,
    (...i) => e(...i)
}
  , looksLikeFetchResponse = s => typeof s == "object" && s !== null && "status"in s && "ok"in s && "json"in s && typeof s.json == "function"
  , setItemAsync = async (s, e, i) => {
    await s.setItem(e, JSON.stringify(i))
}
  , getItemAsync = async (s, e) => {
    const i = await s.getItem(e);
    if (!i)
        return null;
    try {
        return JSON.parse(i)
    } catch {
        return i
    }
}
  , removeItemAsync = async (s, e) => {
    await s.removeItem(e)
}
;
class Deferred {
    constructor() {
        this.promise = new Deferred.promiseConstructor( (e, i) => {
            this.resolve = e,
            this.reject = i
        }
        )
    }
}
Deferred.promiseConstructor = Promise;
function decodeJWT(s) {
    const e = s.split(".");
    if (e.length !== 3)
        throw new AuthInvalidJwtError("Invalid JWT structure");
    for (let o = 0; o < e.length; o++)
        if (!BASE64URL_REGEX.test(e[o]))
            throw new AuthInvalidJwtError("JWT not in base64url format");
    return {
        header: JSON.parse(stringFromBase64URL(e[0])),
        payload: JSON.parse(stringFromBase64URL(e[1])),
        signature: base64UrlToUint8Array(e[2]),
        raw: {
            header: e[0],
            payload: e[1]
        }
    }
}
async function sleep(s) {
    return await new Promise(e => {
        setTimeout( () => e(null), s)
    }
    )
}
function retryable(s, e) {
    return new Promise( (o, a) => {
        (async () => {
            for (let c = 0; c < 1 / 0; c++)
                try {
                    const d = await s(c);
                    if (!e(c, null, d)) {
                        o(d);
                        return
                    }
                } catch (d) {
                    if (!e(c, d)) {
                        a(d);
                        return
                    }
                }
        }
        )()
    }
    )
}
function dec2hex(s) {
    return ("0" + s.toString(16)).substr(-2)
}
function generatePKCEVerifier() {
    const e = new Uint32Array(56);
    if (typeof crypto > "u") {
        const i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
          , o = i.length;
        let a = "";
        for (let c = 0; c < 56; c++)
            a += i.charAt(Math.floor(Math.random() * o));
        return a
    }
    return crypto.getRandomValues(e),
    Array.from(e, dec2hex).join("")
}
async function sha256(s) {
    const i = new TextEncoder().encode(s)
      , o = await crypto.subtle.digest("SHA-256", i)
      , a = new Uint8Array(o);
    return Array.from(a).map(c => String.fromCharCode(c)).join("")
}
async function generatePKCEChallenge(s) {
    if (!(typeof crypto < "u" && typeof crypto.subtle < "u" && typeof TextEncoder < "u"))
        return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."),
        s;
    const i = await sha256(s);
    return btoa(i).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "")
}
async function getCodeChallengeAndMethod(s, e, i=!1) {
    const o = generatePKCEVerifier();
    let a = o;
    i && (a += "/PASSWORD_RECOVERY"),
    await setItemAsync(s, `${e}-code-verifier`, a);
    const c = await generatePKCEChallenge(o);
    return [c, o === c ? "plain" : "s256"]
}
const API_VERSION_REGEX = /^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i;
function parseResponseAPIVersion(s) {
    const e = s.headers.get(API_VERSION_HEADER_NAME);
    if (!e || !e.match(API_VERSION_REGEX))
        return null;
    try {
        return new Date(`${e}T00:00:00.0Z`)
    } catch {
        return null
    }
}
function validateExp(s) {
    if (!s)
        throw new Error("Missing exp claim");
    const e = Math.floor(Date.now() / 1e3);
    if (s <= e)
        throw new Error("JWT has expired")
}
function getAlgorithm(s) {
    switch (s) {
    case "RS256":
        return {
            name: "RSASSA-PKCS1-v1_5",
            hash: {
                name: "SHA-256"
            }
        };
    case "ES256":
        return {
            name: "ECDSA",
            namedCurve: "P-256",
            hash: {
                name: "SHA-256"
            }
        };
    default:
        throw new Error("Invalid alg claim")
    }
}
var __rest$2 = function(s, e) {
    var i = {};
    for (var o in s)
        Object.prototype.hasOwnProperty.call(s, o) && e.indexOf(o) < 0 && (i[o] = s[o]);
    if (s != null && typeof Object.getOwnPropertySymbols == "function")
        for (var a = 0, o = Object.getOwnPropertySymbols(s); a < o.length; a++)
            e.indexOf(o[a]) < 0 && Object.prototype.propertyIsEnumerable.call(s, o[a]) && (i[o[a]] = s[o[a]]);
    return i
};
const _getErrorMessage = s => s.msg || s.message || s.error_description || s.error || JSON.stringify(s)
  , NETWORK_ERROR_CODES = [502, 503, 504];
async function handleError(s) {
    var e;
    if (!looksLikeFetchResponse(s))
        throw new AuthRetryableFetchError(_getErrorMessage(s),0);
    if (NETWORK_ERROR_CODES.includes(s.status))
        throw new AuthRetryableFetchError(_getErrorMessage(s),s.status);
    let i;
    try {
        i = await s.json()
    } catch (c) {
        throw new AuthUnknownError(_getErrorMessage(c),c)
    }
    let o;
    const a = parseResponseAPIVersion(s);
    if (a && a.getTime() >= API_VERSIONS["2024-01-01"].timestamp && typeof i == "object" && i && typeof i.code == "string" ? o = i.code : typeof i == "object" && i && typeof i.error_code == "string" && (o = i.error_code),
    o) {
        if (o === "weak_password")
            throw new AuthWeakPasswordError(_getErrorMessage(i),s.status,((e = i.weak_password) === null || e === void 0 ? void 0 : e.reasons) || []);
        if (o === "session_not_found")
            throw new AuthSessionMissingError
    } else if (typeof i == "object" && i && typeof i.weak_password == "object" && i.weak_password && Array.isArray(i.weak_password.reasons) && i.weak_password.reasons.length && i.weak_password.reasons.reduce( (c, d) => c && typeof d == "string", !0))
        throw new AuthWeakPasswordError(_getErrorMessage(i),s.status,i.weak_password.reasons);
    throw new AuthApiError(_getErrorMessage(i),s.status || 500,o)
}
const _getRequestParams = (s, e, i, o) => {
    const a = {
        method: s,
        headers: (e == null ? void 0 : e.headers) || {}
    };
    return s === "GET" ? a : (a.headers = Object.assign({
        "Content-Type": "application/json;charset=UTF-8"
    }, e == null ? void 0 : e.headers),
    a.body = JSON.stringify(o),
    Object.assign(Object.assign({}, a), i))
}
;
async function _request(s, e, i, o) {
    var a;
    const c = Object.assign({}, o == null ? void 0 : o.headers);
    c[API_VERSION_HEADER_NAME] || (c[API_VERSION_HEADER_NAME] = API_VERSIONS["2024-01-01"].name),
    o != null && o.jwt && (c.Authorization = `Bearer ${o.jwt}`);
    const d = (a = o == null ? void 0 : o.query) !== null && a !== void 0 ? a : {};
    o != null && o.redirectTo && (d.redirect_to = o.redirectTo);
    const h = Object.keys(d).length ? "?" + new URLSearchParams(d).toString() : ""
      , g = await _handleRequest(s, e, i + h, {
        headers: c,
        noResolveJson: o == null ? void 0 : o.noResolveJson
    }, {}, o == null ? void 0 : o.body);
    return o != null && o.xform ? o == null ? void 0 : o.xform(g) : {
        data: Object.assign({}, g),
        error: null
    }
}
async function _handleRequest(s, e, i, o, a, c) {
    const d = _getRequestParams(e, o, a, c);
    let h;
    try {
        h = await s(i, Object.assign({}, d))
    } catch (g) {
        throw console.error(g),
        new AuthRetryableFetchError(_getErrorMessage(g),0)
    }
    if (h.ok || await handleError(h),
    o != null && o.noResolveJson)
        return h;
    try {
        return await h.json()
    } catch (g) {
        await handleError(g)
    }
}
function _sessionResponse(s) {
    var e;
    let i = null;
    hasSession(s) && (i = Object.assign({}, s),
    s.expires_at || (i.expires_at = expiresAt(s.expires_in)));
    const o = (e = s.user) !== null && e !== void 0 ? e : s;
    return {
        data: {
            session: i,
            user: o
        },
        error: null
    }
}
function _sessionResponsePassword(s) {
    const e = _sessionResponse(s);
    return !e.error && s.weak_password && typeof s.weak_password == "object" && Array.isArray(s.weak_password.reasons) && s.weak_password.reasons.length && s.weak_password.message && typeof s.weak_password.message == "string" && s.weak_password.reasons.reduce( (i, o) => i && typeof o == "string", !0) && (e.data.weak_password = s.weak_password),
    e
}
function _userResponse(s) {
    var e;
    return {
        data: {
            user: (e = s.user) !== null && e !== void 0 ? e : s
        },
        error: null
    }
}
function _ssoResponse(s) {
    return {
        data: s,
        error: null
    }
}
function _generateLinkResponse(s) {
    const {action_link: e, email_otp: i, hashed_token: o, redirect_to: a, verification_type: c} = s
      , d = __rest$2(s, ["action_link", "email_otp", "hashed_token", "redirect_to", "verification_type"])
      , h = {
        action_link: e,
        email_otp: i,
        hashed_token: o,
        redirect_to: a,
        verification_type: c
    }
      , g = Object.assign({}, d);
    return {
        data: {
            properties: h,
            user: g
        },
        error: null
    }
}
function _noResolveJsonResponse(s) {
    return s
}
function hasSession(s) {
    return s.access_token && s.refresh_token && s.expires_in
}
var __rest$1 = function(s, e) {
    var i = {};
    for (var o in s)
        Object.prototype.hasOwnProperty.call(s, o) && e.indexOf(o) < 0 && (i[o] = s[o]);
    if (s != null && typeof Object.getOwnPropertySymbols == "function")
        for (var a = 0, o = Object.getOwnPropertySymbols(s); a < o.length; a++)
            e.indexOf(o[a]) < 0 && Object.prototype.propertyIsEnumerable.call(s, o[a]) && (i[o[a]] = s[o[a]]);
    return i
};
class GoTrueAdminApi {
    constructor({url: e="", headers: i={}, fetch: o}) {
        this.url = e,
        this.headers = i,
        this.fetch = resolveFetch(o),
        this.mfa = {
            listFactors: this._listFactors.bind(this),
            deleteFactor: this._deleteFactor.bind(this)
        }
    }
    async signOut(e, i="global") {
        try {
            return await _request(this.fetch, "POST", `${this.url}/logout?scope=${i}`, {
                headers: this.headers,
                jwt: e,
                noResolveJson: !0
            }),
            {
                data: null,
                error: null
            }
        } catch (o) {
            if (isAuthError(o))
                return {
                    data: null,
                    error: o
                };
            throw o
        }
    }
    async inviteUserByEmail(e, i={}) {
        try {
            return await _request(this.fetch, "POST", `${this.url}/invite`, {
                body: {
                    email: e,
                    data: i.data
                },
                headers: this.headers,
                redirectTo: i.redirectTo,
                xform: _userResponse
            })
        } catch (o) {
            if (isAuthError(o))
                return {
                    data: {
                        user: null
                    },
                    error: o
                };
            throw o
        }
    }
    async generateLink(e) {
        try {
            const {options: i} = e
              , o = __rest$1(e, ["options"])
              , a = Object.assign(Object.assign({}, o), i);
            return "newEmail"in o && (a.new_email = o == null ? void 0 : o.newEmail,
            delete a.newEmail),
            await _request(this.fetch, "POST", `${this.url}/admin/generate_link`, {
                body: a,
                headers: this.headers,
                xform: _generateLinkResponse,
                redirectTo: i == null ? void 0 : i.redirectTo
            })
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: {
                        properties: null,
                        user: null
                    },
                    error: i
                };
            throw i
        }
    }
    async createUser(e) {
        try {
            return await _request(this.fetch, "POST", `${this.url}/admin/users`, {
                body: e,
                headers: this.headers,
                xform: _userResponse
            })
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: {
                        user: null
                    },
                    error: i
                };
            throw i
        }
    }
    async listUsers(e) {
        var i, o, a, c, d, h, g;
        try {
            const b = {
                nextPage: null,
                lastPage: 0,
                total: 0
            }
              , _ = await _request(this.fetch, "GET", `${this.url}/admin/users`, {
                headers: this.headers,
                noResolveJson: !0,
                query: {
                    page: (o = (i = e == null ? void 0 : e.page) === null || i === void 0 ? void 0 : i.toString()) !== null && o !== void 0 ? o : "",
                    per_page: (c = (a = e == null ? void 0 : e.perPage) === null || a === void 0 ? void 0 : a.toString()) !== null && c !== void 0 ? c : ""
                },
                xform: _noResolveJsonResponse
            });
            if (_.error)
                throw _.error;
            const $ = await _.json()
              , _e = (d = _.headers.get("x-total-count")) !== null && d !== void 0 ? d : 0
              , tt = (g = (h = _.headers.get("link")) === null || h === void 0 ? void 0 : h.split(",")) !== null && g !== void 0 ? g : [];
            return tt.length > 0 && (tt.forEach(rt => {
                const et = parseInt(rt.split(";")[0].split("=")[1].substring(0, 1))
                  , it = JSON.parse(rt.split(";")[1].split("=")[1]);
                b[`${it}Page`] = et
            }
            ),
            b.total = parseInt(_e)),
            {
                data: Object.assign(Object.assign({}, $), b),
                error: null
            }
        } catch (b) {
            if (isAuthError(b))
                return {
                    data: {
                        users: []
                    },
                    error: b
                };
            throw b
        }
    }
    async getUserById(e) {
        try {
            return await _request(this.fetch, "GET", `${this.url}/admin/users/${e}`, {
                headers: this.headers,
                xform: _userResponse
            })
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: {
                        user: null
                    },
                    error: i
                };
            throw i
        }
    }
    async updateUserById(e, i) {
        try {
            return await _request(this.fetch, "PUT", `${this.url}/admin/users/${e}`, {
                body: i,
                headers: this.headers,
                xform: _userResponse
            })
        } catch (o) {
            if (isAuthError(o))
                return {
                    data: {
                        user: null
                    },
                    error: o
                };
            throw o
        }
    }
    async deleteUser(e, i=!1) {
        try {
            return await _request(this.fetch, "DELETE", `${this.url}/admin/users/${e}`, {
                headers: this.headers,
                body: {
                    should_soft_delete: i
                },
                xform: _userResponse
            })
        } catch (o) {
            if (isAuthError(o))
                return {
                    data: {
                        user: null
                    },
                    error: o
                };
            throw o
        }
    }
    async _listFactors(e) {
        try {
            const {data: i, error: o} = await _request(this.fetch, "GET", `${this.url}/admin/users/${e.userId}/factors`, {
                headers: this.headers,
                xform: a => ({
                    data: {
                        factors: a
                    },
                    error: null
                })
            });
            return {
                data: i,
                error: o
            }
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: null,
                    error: i
                };
            throw i
        }
    }
    async _deleteFactor(e) {
        try {
            return {
                data: await _request(this.fetch, "DELETE", `${this.url}/admin/users/${e.userId}/factors/${e.id}`, {
                    headers: this.headers
                }),
                error: null
            }
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: null,
                    error: i
                };
            throw i
        }
    }
}
const localStorageAdapter = {
    getItem: s => supportsLocalStorage() ? globalThis.localStorage.getItem(s) : null,
    setItem: (s, e) => {
        supportsLocalStorage() && globalThis.localStorage.setItem(s, e)
    }
    ,
    removeItem: s => {
        supportsLocalStorage() && globalThis.localStorage.removeItem(s)
    }
};
function memoryLocalStorageAdapter(s={}) {
    return {
        getItem: e => s[e] || null,
        setItem: (e, i) => {
            s[e] = i
        }
        ,
        removeItem: e => {
            delete s[e]
        }
    }
}
function polyfillGlobalThis() {
    if (typeof globalThis != "object")
        try {
            Object.defineProperty(Object.prototype, "__magic__", {
                get: function() {
                    return this
                },
                configurable: !0
            }),
            __magic__.globalThis = __magic__,
            delete Object.prototype.__magic__
        } catch {
            typeof self < "u" && (self.globalThis = self)
        }
}
const internals = {
    debug: !!(globalThis && supportsLocalStorage() && globalThis.localStorage && globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug") === "true")
};
class LockAcquireTimeoutError extends Error {
    constructor(e) {
        super(e),
        this.isAcquireTimeout = !0
    }
}
class NavigatorLockAcquireTimeoutError extends LockAcquireTimeoutError {
}
async function navigatorLock(s, e, i) {
    internals.debug && console.log("@supabase/gotrue-js: navigatorLock: acquire lock", s, e);
    const o = new globalThis.AbortController;
    return e > 0 && setTimeout( () => {
        o.abort(),
        internals.debug && console.log("@supabase/gotrue-js: navigatorLock acquire timed out", s)
    }
    , e),
    await Promise.resolve().then( () => globalThis.navigator.locks.request(s, e === 0 ? {
        mode: "exclusive",
        ifAvailable: !0
    } : {
        mode: "exclusive",
        signal: o.signal
    }, async a => {
        if (a) {
            internals.debug && console.log("@supabase/gotrue-js: navigatorLock: acquired", s, a.name);
            try {
                return await i()
            } finally {
                internals.debug && console.log("@supabase/gotrue-js: navigatorLock: released", s, a.name)
            }
        } else {
            if (e === 0)
                throw internals.debug && console.log("@supabase/gotrue-js: navigatorLock: not immediately available", s),
                new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock "${s}" immediately failed`);
            if (internals.debug)
                try {
                    const c = await globalThis.navigator.locks.query();
                    console.log("@supabase/gotrue-js: Navigator LockManager state", JSON.stringify(c, null, "  "))
                } catch (c) {
                    console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state", c)
                }
            return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"),
            await i()
        }
    }
    ))
}
polyfillGlobalThis();
const DEFAULT_OPTIONS = {
    url: GOTRUE_URL,
    storageKey: STORAGE_KEY,
    autoRefreshToken: !0,
    persistSession: !0,
    detectSessionInUrl: !0,
    headers: DEFAULT_HEADERS,
    flowType: "implicit",
    debug: !1,
    hasCustomAuthorizationHeader: !1
};
async function lockNoOp(s, e, i) {
    return await i()
}
class GoTrueClient {
    constructor(e) {
        var i, o;
        this.memoryStorage = null,
        this.stateChangeEmitters = new Map,
        this.autoRefreshTicker = null,
        this.visibilityChangedCallback = null,
        this.refreshingDeferred = null,
        this.initializePromise = null,
        this.detectSessionInUrl = !0,
        this.hasCustomAuthorizationHeader = !1,
        this.suppressGetSessionWarning = !1,
        this.lockAcquired = !1,
        this.pendingInLock = [],
        this.broadcastChannel = null,
        this.logger = console.log,
        this.instanceID = GoTrueClient.nextInstanceID,
        GoTrueClient.nextInstanceID += 1,
        this.instanceID > 0 && isBrowser$1() && console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");
        const a = Object.assign(Object.assign({}, DEFAULT_OPTIONS), e);
        if (this.logDebugMessages = !!a.debug,
        typeof a.debug == "function" && (this.logger = a.debug),
        this.persistSession = a.persistSession,
        this.storageKey = a.storageKey,
        this.autoRefreshToken = a.autoRefreshToken,
        this.admin = new GoTrueAdminApi({
            url: a.url,
            headers: a.headers,
            fetch: a.fetch
        }),
        this.url = a.url,
        this.headers = a.headers,
        this.fetch = resolveFetch(a.fetch),
        this.lock = a.lock || lockNoOp,
        this.detectSessionInUrl = a.detectSessionInUrl,
        this.flowType = a.flowType,
        this.hasCustomAuthorizationHeader = a.hasCustomAuthorizationHeader,
        a.lock ? this.lock = a.lock : isBrowser$1() && (!((i = globalThis == null ? void 0 : globalThis.navigator) === null || i === void 0) && i.locks) ? this.lock = navigatorLock : this.lock = lockNoOp,
        this.jwks = {
            keys: []
        },
        this.jwks_cached_at = Number.MIN_SAFE_INTEGER,
        this.mfa = {
            verify: this._verify.bind(this),
            enroll: this._enroll.bind(this),
            unenroll: this._unenroll.bind(this),
            challenge: this._challenge.bind(this),
            listFactors: this._listFactors.bind(this),
            challengeAndVerify: this._challengeAndVerify.bind(this),
            getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this)
        },
        this.persistSession ? a.storage ? this.storage = a.storage : supportsLocalStorage() ? this.storage = localStorageAdapter : (this.memoryStorage = {},
        this.storage = memoryLocalStorageAdapter(this.memoryStorage)) : (this.memoryStorage = {},
        this.storage = memoryLocalStorageAdapter(this.memoryStorage)),
        isBrowser$1() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {
            try {
                this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey)
            } catch (c) {
                console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available", c)
            }
            (o = this.broadcastChannel) === null || o === void 0 || o.addEventListener("message", async c => {
                this._debug("received broadcast notification from other tab or client", c),
                await this._notifyAllSubscribers(c.data.event, c.data.session, !1)
            }
            )
        }
        this.initialize()
    }
    _debug(...e) {
        return this.logDebugMessages && this.logger(`GoTrueClient@${this.instanceID} (${version}) ${new Date().toISOString()}`, ...e),
        this
    }
    async initialize() {
        return this.initializePromise ? await this.initializePromise : (this.initializePromise = (async () => await this._acquireLock(-1, async () => await this._initialize()))(),
        await this.initializePromise)
    }
    async _initialize() {
        var e;
        try {
            const i = parseParametersFromURL(window.location.href);
            let o = "none";
            if (this._isImplicitGrantCallback(i) ? o = "implicit" : await this._isPKCECallback(i) && (o = "pkce"),
            isBrowser$1() && this.detectSessionInUrl && o !== "none") {
                const {data: a, error: c} = await this._getSessionFromURL(i, o);
                if (c) {
                    if (this._debug("#_initialize()", "error detecting session from URL", c),
                    isAuthImplicitGrantRedirectError(c)) {
                        const g = (e = c.details) === null || e === void 0 ? void 0 : e.code;
                        if (g === "identity_already_exists" || g === "identity_not_found" || g === "single_identity_not_deletable")
                            return {
                                error: c
                            }
                    }
                    return await this._removeSession(),
                    {
                        error: c
                    }
                }
                const {session: d, redirectType: h} = a;
                return this._debug("#_initialize()", "detected session in URL", d, "redirect type", h),
                await this._saveSession(d),
                setTimeout(async () => {
                    h === "recovery" ? await this._notifyAllSubscribers("PASSWORD_RECOVERY", d) : await this._notifyAllSubscribers("SIGNED_IN", d)
                }
                , 0),
                {
                    error: null
                }
            }
            return await this._recoverAndRefresh(),
            {
                error: null
            }
        } catch (i) {
            return isAuthError(i) ? {
                error: i
            } : {
                error: new AuthUnknownError("Unexpected error during initialization",i)
            }
        } finally {
            await this._handleVisibilityChange(),
            this._debug("#_initialize()", "end")
        }
    }
    async signInAnonymously(e) {
        var i, o, a;
        try {
            const c = await _request(this.fetch, "POST", `${this.url}/signup`, {
                headers: this.headers,
                body: {
                    data: (o = (i = e == null ? void 0 : e.options) === null || i === void 0 ? void 0 : i.data) !== null && o !== void 0 ? o : {},
                    gotrue_meta_security: {
                        captcha_token: (a = e == null ? void 0 : e.options) === null || a === void 0 ? void 0 : a.captchaToken
                    }
                },
                xform: _sessionResponse
            })
              , {data: d, error: h} = c;
            if (h || !d)
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: h
                };
            const g = d.session
              , b = d.user;
            return d.session && (await this._saveSession(d.session),
            await this._notifyAllSubscribers("SIGNED_IN", g)),
            {
                data: {
                    user: b,
                    session: g
                },
                error: null
            }
        } catch (c) {
            if (isAuthError(c))
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: c
                };
            throw c
        }
    }
    async signUp(e) {
        var i, o, a;
        try {
            let c;
            if ("email"in e) {
                const {email: _, password: $, options: _e} = e;
                let tt = null
                  , rt = null;
                this.flowType === "pkce" && ([tt,rt] = await getCodeChallengeAndMethod(this.storage, this.storageKey)),
                c = await _request(this.fetch, "POST", `${this.url}/signup`, {
                    headers: this.headers,
                    redirectTo: _e == null ? void 0 : _e.emailRedirectTo,
                    body: {
                        email: _,
                        password: $,
                        data: (i = _e == null ? void 0 : _e.data) !== null && i !== void 0 ? i : {},
                        gotrue_meta_security: {
                            captcha_token: _e == null ? void 0 : _e.captchaToken
                        },
                        code_challenge: tt,
                        code_challenge_method: rt
                    },
                    xform: _sessionResponse
                })
            } else if ("phone"in e) {
                const {phone: _, password: $, options: _e} = e;
                c = await _request(this.fetch, "POST", `${this.url}/signup`, {
                    headers: this.headers,
                    body: {
                        phone: _,
                        password: $,
                        data: (o = _e == null ? void 0 : _e.data) !== null && o !== void 0 ? o : {},
                        channel: (a = _e == null ? void 0 : _e.channel) !== null && a !== void 0 ? a : "sms",
                        gotrue_meta_security: {
                            captcha_token: _e == null ? void 0 : _e.captchaToken
                        }
                    },
                    xform: _sessionResponse
                })
            } else
                throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
            const {data: d, error: h} = c;
            if (h || !d)
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: h
                };
            const g = d.session
              , b = d.user;
            return d.session && (await this._saveSession(d.session),
            await this._notifyAllSubscribers("SIGNED_IN", g)),
            {
                data: {
                    user: b,
                    session: g
                },
                error: null
            }
        } catch (c) {
            if (isAuthError(c))
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: c
                };
            throw c
        }
    }
    async signInWithPassword(e) {
        try {
            let i;
            if ("email"in e) {
                const {email: c, password: d, options: h} = e;
                i = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
                    headers: this.headers,
                    body: {
                        email: c,
                        password: d,
                        gotrue_meta_security: {
                            captcha_token: h == null ? void 0 : h.captchaToken
                        }
                    },
                    xform: _sessionResponsePassword
                })
            } else if ("phone"in e) {
                const {phone: c, password: d, options: h} = e;
                i = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
                    headers: this.headers,
                    body: {
                        phone: c,
                        password: d,
                        gotrue_meta_security: {
                            captcha_token: h == null ? void 0 : h.captchaToken
                        }
                    },
                    xform: _sessionResponsePassword
                })
            } else
                throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
            const {data: o, error: a} = i;
            return a ? {
                data: {
                    user: null,
                    session: null
                },
                error: a
            } : !o || !o.session || !o.user ? {
                data: {
                    user: null,
                    session: null
                },
                error: new AuthInvalidTokenResponseError
            } : (o.session && (await this._saveSession(o.session),
            await this._notifyAllSubscribers("SIGNED_IN", o.session)),
            {
                data: Object.assign({
                    user: o.user,
                    session: o.session
                }, o.weak_password ? {
                    weakPassword: o.weak_password
                } : null),
                error: a
            })
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: i
                };
            throw i
        }
    }
    async signInWithOAuth(e) {
        var i, o, a, c;
        return await this._handleProviderSignIn(e.provider, {
            redirectTo: (i = e.options) === null || i === void 0 ? void 0 : i.redirectTo,
            scopes: (o = e.options) === null || o === void 0 ? void 0 : o.scopes,
            queryParams: (a = e.options) === null || a === void 0 ? void 0 : a.queryParams,
            skipBrowserRedirect: (c = e.options) === null || c === void 0 ? void 0 : c.skipBrowserRedirect
        })
    }
    async exchangeCodeForSession(e) {
        return await this.initializePromise,
        this._acquireLock(-1, async () => this._exchangeCodeForSession(e))
    }
    async _exchangeCodeForSession(e) {
        const i = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`)
          , [o,a] = (i ?? "").split("/");
        try {
            const {data: c, error: d} = await _request(this.fetch, "POST", `${this.url}/token?grant_type=pkce`, {
                headers: this.headers,
                body: {
                    auth_code: e,
                    code_verifier: o
                },
                xform: _sessionResponse
            });
            if (await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`),
            d)
                throw d;
            return !c || !c.session || !c.user ? {
                data: {
                    user: null,
                    session: null,
                    redirectType: null
                },
                error: new AuthInvalidTokenResponseError
            } : (c.session && (await this._saveSession(c.session),
            await this._notifyAllSubscribers("SIGNED_IN", c.session)),
            {
                data: Object.assign(Object.assign({}, c), {
                    redirectType: a ?? null
                }),
                error: d
            })
        } catch (c) {
            if (isAuthError(c))
                return {
                    data: {
                        user: null,
                        session: null,
                        redirectType: null
                    },
                    error: c
                };
            throw c
        }
    }
    async signInWithIdToken(e) {
        try {
            const {options: i, provider: o, token: a, access_token: c, nonce: d} = e
              , h = await _request(this.fetch, "POST", `${this.url}/token?grant_type=id_token`, {
                headers: this.headers,
                body: {
                    provider: o,
                    id_token: a,
                    access_token: c,
                    nonce: d,
                    gotrue_meta_security: {
                        captcha_token: i == null ? void 0 : i.captchaToken
                    }
                },
                xform: _sessionResponse
            })
              , {data: g, error: b} = h;
            return b ? {
                data: {
                    user: null,
                    session: null
                },
                error: b
            } : !g || !g.session || !g.user ? {
                data: {
                    user: null,
                    session: null
                },
                error: new AuthInvalidTokenResponseError
            } : (g.session && (await this._saveSession(g.session),
            await this._notifyAllSubscribers("SIGNED_IN", g.session)),
            {
                data: g,
                error: b
            })
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: i
                };
            throw i
        }
    }
    async signInWithOtp(e) {
        var i, o, a, c, d;
        try {
            if ("email"in e) {
                const {email: h, options: g} = e;
                let b = null
                  , _ = null;
                this.flowType === "pkce" && ([b,_] = await getCodeChallengeAndMethod(this.storage, this.storageKey));
                const {error: $} = await _request(this.fetch, "POST", `${this.url}/otp`, {
                    headers: this.headers,
                    body: {
                        email: h,
                        data: (i = g == null ? void 0 : g.data) !== null && i !== void 0 ? i : {},
                        create_user: (o = g == null ? void 0 : g.shouldCreateUser) !== null && o !== void 0 ? o : !0,
                        gotrue_meta_security: {
                            captcha_token: g == null ? void 0 : g.captchaToken
                        },
                        code_challenge: b,
                        code_challenge_method: _
                    },
                    redirectTo: g == null ? void 0 : g.emailRedirectTo
                });
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: $
                }
            }
            if ("phone"in e) {
                const {phone: h, options: g} = e
                  , {data: b, error: _} = await _request(this.fetch, "POST", `${this.url}/otp`, {
                    headers: this.headers,
                    body: {
                        phone: h,
                        data: (a = g == null ? void 0 : g.data) !== null && a !== void 0 ? a : {},
                        create_user: (c = g == null ? void 0 : g.shouldCreateUser) !== null && c !== void 0 ? c : !0,
                        gotrue_meta_security: {
                            captcha_token: g == null ? void 0 : g.captchaToken
                        },
                        channel: (d = g == null ? void 0 : g.channel) !== null && d !== void 0 ? d : "sms"
                    }
                });
                return {
                    data: {
                        user: null,
                        session: null,
                        messageId: b == null ? void 0 : b.message_id
                    },
                    error: _
                }
            }
            throw new AuthInvalidCredentialsError("You must provide either an email or phone number.")
        } catch (h) {
            if (isAuthError(h))
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: h
                };
            throw h
        }
    }
    async verifyOtp(e) {
        var i, o;
        try {
            let a, c;
            "options"in e && (a = (i = e.options) === null || i === void 0 ? void 0 : i.redirectTo,
            c = (o = e.options) === null || o === void 0 ? void 0 : o.captchaToken);
            const {data: d, error: h} = await _request(this.fetch, "POST", `${this.url}/verify`, {
                headers: this.headers,
                body: Object.assign(Object.assign({}, e), {
                    gotrue_meta_security: {
                        captcha_token: c
                    }
                }),
                redirectTo: a,
                xform: _sessionResponse
            });
            if (h)
                throw h;
            if (!d)
                throw new Error("An error occurred on token verification.");
            const g = d.session
              , b = d.user;
            return g != null && g.access_token && (await this._saveSession(g),
            await this._notifyAllSubscribers(e.type == "recovery" ? "PASSWORD_RECOVERY" : "SIGNED_IN", g)),
            {
                data: {
                    user: b,
                    session: g
                },
                error: null
            }
        } catch (a) {
            if (isAuthError(a))
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: a
                };
            throw a
        }
    }
    async signInWithSSO(e) {
        var i, o, a;
        try {
            let c = null
              , d = null;
            return this.flowType === "pkce" && ([c,d] = await getCodeChallengeAndMethod(this.storage, this.storageKey)),
            await _request(this.fetch, "POST", `${this.url}/sso`, {
                body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, "providerId"in e ? {
                    provider_id: e.providerId
                } : null), "domain"in e ? {
                    domain: e.domain
                } : null), {
                    redirect_to: (o = (i = e.options) === null || i === void 0 ? void 0 : i.redirectTo) !== null && o !== void 0 ? o : void 0
                }), !((a = e == null ? void 0 : e.options) === null || a === void 0) && a.captchaToken ? {
                    gotrue_meta_security: {
                        captcha_token: e.options.captchaToken
                    }
                } : null), {
                    skip_http_redirect: !0,
                    code_challenge: c,
                    code_challenge_method: d
                }),
                headers: this.headers,
                xform: _ssoResponse
            })
        } catch (c) {
            if (isAuthError(c))
                return {
                    data: null,
                    error: c
                };
            throw c
        }
    }
    async reauthenticate() {
        return await this.initializePromise,
        await this._acquireLock(-1, async () => await this._reauthenticate())
    }
    async _reauthenticate() {
        try {
            return await this._useSession(async e => {
                const {data: {session: i}, error: o} = e;
                if (o)
                    throw o;
                if (!i)
                    throw new AuthSessionMissingError;
                const {error: a} = await _request(this.fetch, "GET", `${this.url}/reauthenticate`, {
                    headers: this.headers,
                    jwt: i.access_token
                });
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: a
                }
            }
            )
        } catch (e) {
            if (isAuthError(e))
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: e
                };
            throw e
        }
    }
    async resend(e) {
        try {
            const i = `${this.url}/resend`;
            if ("email"in e) {
                const {email: o, type: a, options: c} = e
                  , {error: d} = await _request(this.fetch, "POST", i, {
                    headers: this.headers,
                    body: {
                        email: o,
                        type: a,
                        gotrue_meta_security: {
                            captcha_token: c == null ? void 0 : c.captchaToken
                        }
                    },
                    redirectTo: c == null ? void 0 : c.emailRedirectTo
                });
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: d
                }
            } else if ("phone"in e) {
                const {phone: o, type: a, options: c} = e
                  , {data: d, error: h} = await _request(this.fetch, "POST", i, {
                    headers: this.headers,
                    body: {
                        phone: o,
                        type: a,
                        gotrue_meta_security: {
                            captcha_token: c == null ? void 0 : c.captchaToken
                        }
                    }
                });
                return {
                    data: {
                        user: null,
                        session: null,
                        messageId: d == null ? void 0 : d.message_id
                    },
                    error: h
                }
            }
            throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a type")
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: i
                };
            throw i
        }
    }
    async getSession() {
        return await this.initializePromise,
        await this._acquireLock(-1, async () => this._useSession(async i => i))
    }
    async _acquireLock(e, i) {
        this._debug("#_acquireLock", "begin", e);
        try {
            if (this.lockAcquired) {
                const o = this.pendingInLock.length ? this.pendingInLock[this.pendingInLock.length - 1] : Promise.resolve()
                  , a = (async () => (await o,
                await i()))();
                return this.pendingInLock.push((async () => {
                    try {
                        await a
                    } catch {}
                }
                )()),
                a
            }
            return await this.lock(`lock:${this.storageKey}`, e, async () => {
                this._debug("#_acquireLock", "lock acquired for storage key", this.storageKey);
                try {
                    this.lockAcquired = !0;
                    const o = i();
                    for (this.pendingInLock.push((async () => {
                        try {
                            await o
                        } catch {}
                    }
                    )()),
                    await o; this.pendingInLock.length; ) {
                        const a = [...this.pendingInLock];
                        await Promise.all(a),
                        this.pendingInLock.splice(0, a.length)
                    }
                    return await o
                } finally {
                    this._debug("#_acquireLock", "lock released for storage key", this.storageKey),
                    this.lockAcquired = !1
                }
            }
            )
        } finally {
            this._debug("#_acquireLock", "end")
        }
    }
    async _useSession(e) {
        this._debug("#_useSession", "begin");
        try {
            const i = await this.__loadSession();
            return await e(i)
        } finally {
            this._debug("#_useSession", "end")
        }
    }
    async __loadSession() {
        this._debug("#__loadSession()", "begin"),
        this.lockAcquired || this._debug("#__loadSession()", "used outside of an acquired lock!", new Error().stack);
        try {
            let e = null;
            const i = await getItemAsync(this.storage, this.storageKey);
            if (this._debug("#getSession()", "session from storage", i),
            i !== null && (this._isValidSession(i) ? e = i : (this._debug("#getSession()", "session from storage is not valid"),
            await this._removeSession())),
            !e)
                return {
                    data: {
                        session: null
                    },
                    error: null
                };
            const o = e.expires_at ? e.expires_at * 1e3 - Date.now() < EXPIRY_MARGIN_MS : !1;
            if (this._debug("#__loadSession()", `session has${o ? "" : " not"} expired`, "expires_at", e.expires_at),
            !o) {
                if (this.storage.isServer) {
                    let d = this.suppressGetSessionWarning;
                    e = new Proxy(e,{
                        get: (g, b, _) => (!d && b === "user" && (console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server."),
                        d = !0,
                        this.suppressGetSessionWarning = !0),
                        Reflect.get(g, b, _))
                    })
                }
                return {
                    data: {
                        session: e
                    },
                    error: null
                }
            }
            const {session: a, error: c} = await this._callRefreshToken(e.refresh_token);
            return c ? {
                data: {
                    session: null
                },
                error: c
            } : {
                data: {
                    session: a
                },
                error: null
            }
        } finally {
            this._debug("#__loadSession()", "end")
        }
    }
    async getUser(e) {
        return e ? await this._getUser(e) : (await this.initializePromise,
        await this._acquireLock(-1, async () => await this._getUser()))
    }
    async _getUser(e) {
        try {
            return e ? await _request(this.fetch, "GET", `${this.url}/user`, {
                headers: this.headers,
                jwt: e,
                xform: _userResponse
            }) : await this._useSession(async i => {
                var o, a, c;
                const {data: d, error: h} = i;
                if (h)
                    throw h;
                return !(!((o = d.session) === null || o === void 0) && o.access_token) && !this.hasCustomAuthorizationHeader ? {
                    data: {
                        user: null
                    },
                    error: new AuthSessionMissingError
                } : await _request(this.fetch, "GET", `${this.url}/user`, {
                    headers: this.headers,
                    jwt: (c = (a = d.session) === null || a === void 0 ? void 0 : a.access_token) !== null && c !== void 0 ? c : void 0,
                    xform: _userResponse
                })
            }
            )
        } catch (i) {
            if (isAuthError(i))
                return isAuthSessionMissingError(i) && (await this._removeSession(),
                await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`)),
                {
                    data: {
                        user: null
                    },
                    error: i
                };
            throw i
        }
    }
    async updateUser(e, i={}) {
        return await this.initializePromise,
        await this._acquireLock(-1, async () => await this._updateUser(e, i))
    }
    async _updateUser(e, i={}) {
        try {
            return await this._useSession(async o => {
                const {data: a, error: c} = o;
                if (c)
                    throw c;
                if (!a.session)
                    throw new AuthSessionMissingError;
                const d = a.session;
                let h = null
                  , g = null;
                this.flowType === "pkce" && e.email != null && ([h,g] = await getCodeChallengeAndMethod(this.storage, this.storageKey));
                const {data: b, error: _} = await _request(this.fetch, "PUT", `${this.url}/user`, {
                    headers: this.headers,
                    redirectTo: i == null ? void 0 : i.emailRedirectTo,
                    body: Object.assign(Object.assign({}, e), {
                        code_challenge: h,
                        code_challenge_method: g
                    }),
                    jwt: d.access_token,
                    xform: _userResponse
                });
                if (_)
                    throw _;
                return d.user = b.user,
                await this._saveSession(d),
                await this._notifyAllSubscribers("USER_UPDATED", d),
                {
                    data: {
                        user: d.user
                    },
                    error: null
                }
            }
            )
        } catch (o) {
            if (isAuthError(o))
                return {
                    data: {
                        user: null
                    },
                    error: o
                };
            throw o
        }
    }
    async setSession(e) {
        return await this.initializePromise,
        await this._acquireLock(-1, async () => await this._setSession(e))
    }
    async _setSession(e) {
        try {
            if (!e.access_token || !e.refresh_token)
                throw new AuthSessionMissingError;
            const i = Date.now() / 1e3;
            let o = i
              , a = !0
              , c = null;
            const {payload: d} = decodeJWT(e.access_token);
            if (d.exp && (o = d.exp,
            a = o <= i),
            a) {
                const {session: h, error: g} = await this._callRefreshToken(e.refresh_token);
                if (g)
                    return {
                        data: {
                            user: null,
                            session: null
                        },
                        error: g
                    };
                if (!h)
                    return {
                        data: {
                            user: null,
                            session: null
                        },
                        error: null
                    };
                c = h
            } else {
                const {data: h, error: g} = await this._getUser(e.access_token);
                if (g)
                    throw g;
                c = {
                    access_token: e.access_token,
                    refresh_token: e.refresh_token,
                    user: h.user,
                    token_type: "bearer",
                    expires_in: o - i,
                    expires_at: o
                },
                await this._saveSession(c),
                await this._notifyAllSubscribers("SIGNED_IN", c)
            }
            return {
                data: {
                    user: c.user,
                    session: c
                },
                error: null
            }
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: {
                        session: null,
                        user: null
                    },
                    error: i
                };
            throw i
        }
    }
    async refreshSession(e) {
        return await this.initializePromise,
        await this._acquireLock(-1, async () => await this._refreshSession(e))
    }
    async _refreshSession(e) {
        try {
            return await this._useSession(async i => {
                var o;
                if (!e) {
                    const {data: d, error: h} = i;
                    if (h)
                        throw h;
                    e = (o = d.session) !== null && o !== void 0 ? o : void 0
                }
                if (!(e != null && e.refresh_token))
                    throw new AuthSessionMissingError;
                const {session: a, error: c} = await this._callRefreshToken(e.refresh_token);
                return c ? {
                    data: {
                        user: null,
                        session: null
                    },
                    error: c
                } : a ? {
                    data: {
                        user: a.user,
                        session: a
                    },
                    error: null
                } : {
                    data: {
                        user: null,
                        session: null
                    },
                    error: null
                }
            }
            )
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: {
                        user: null,
                        session: null
                    },
                    error: i
                };
            throw i
        }
    }
    async _getSessionFromURL(e, i) {
        try {
            if (!isBrowser$1())
                throw new AuthImplicitGrantRedirectError("No browser detected.");
            if (e.error || e.error_description || e.error_code)
                throw new AuthImplicitGrantRedirectError(e.error_description || "Error in URL with unspecified error_description",{
                    error: e.error || "unspecified_error",
                    code: e.error_code || "unspecified_code"
                });
            switch (i) {
            case "implicit":
                if (this.flowType === "pkce")
                    throw new AuthPKCEGrantCodeExchangeError("Not a valid PKCE flow url.");
                break;
            case "pkce":
                if (this.flowType === "implicit")
                    throw new AuthImplicitGrantRedirectError("Not a valid implicit grant flow url.");
                break;
            default:
            }
            if (i === "pkce") {
                if (this._debug("#_initialize()", "begin", "is PKCE flow", !0),
                !e.code)
                    throw new AuthPKCEGrantCodeExchangeError("No code detected.");
                const {data: nt, error: lt} = await this._exchangeCodeForSession(e.code);
                if (lt)
                    throw lt;
                const dt = new URL(window.location.href);
                return dt.searchParams.delete("code"),
                window.history.replaceState(window.history.state, "", dt.toString()),
                {
                    data: {
                        session: nt.session,
                        redirectType: null
                    },
                    error: null
                }
            }
            const {provider_token: o, provider_refresh_token: a, access_token: c, refresh_token: d, expires_in: h, expires_at: g, token_type: b} = e;
            if (!c || !h || !d || !b)
                throw new AuthImplicitGrantRedirectError("No session defined in URL");
            const _ = Math.round(Date.now() / 1e3)
              , $ = parseInt(h);
            let _e = _ + $;
            g && (_e = parseInt(g));
            const tt = _e - _;
            tt * 1e3 <= AUTO_REFRESH_TICK_DURATION_MS && console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${tt}s, should have been closer to ${$}s`);
            const rt = _e - $;
            _ - rt >= 120 ? console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale", rt, _e, _) : _ - rt < 0 && console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew", rt, _e, _);
            const {data: et, error: it} = await this._getUser(c);
            if (it)
                throw it;
            const st = {
                provider_token: o,
                provider_refresh_token: a,
                access_token: c,
                expires_in: $,
                expires_at: _e,
                refresh_token: d,
                token_type: b,
                user: et.user
            };
            return window.location.hash = "",
            this._debug("#_getSessionFromURL()", "clearing window.location.hash"),
            {
                data: {
                    session: st,
                    redirectType: e.type
                },
                error: null
            }
        } catch (o) {
            if (isAuthError(o))
                return {
                    data: {
                        session: null,
                        redirectType: null
                    },
                    error: o
                };
            throw o
        }
    }
    _isImplicitGrantCallback(e) {
        return !!(e.access_token || e.error_description)
    }
    async _isPKCECallback(e) {
        const i = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);
        return !!(e.code && i)
    }
    async signOut(e={
        scope: "global"
    }) {
        return await this.initializePromise,
        await this._acquireLock(-1, async () => await this._signOut(e))
    }
    async _signOut({scope: e}={
        scope: "global"
    }) {
        return await this._useSession(async i => {
            var o;
            const {data: a, error: c} = i;
            if (c)
                return {
                    error: c
                };
            const d = (o = a.session) === null || o === void 0 ? void 0 : o.access_token;
            if (d) {
                const {error: h} = await this.admin.signOut(d, e);
                if (h && !(isAuthApiError(h) && (h.status === 404 || h.status === 401 || h.status === 403)))
                    return {
                        error: h
                    }
            }
            return e !== "others" && (await this._removeSession(),
            await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`)),
            {
                error: null
            }
        }
        )
    }
    onAuthStateChange(e) {
        const i = uuid()
          , o = {
            id: i,
            callback: e,
            unsubscribe: () => {
                this._debug("#unsubscribe()", "state change callback with id removed", i),
                this.stateChangeEmitters.delete(i)
            }
        };
        return this._debug("#onAuthStateChange()", "registered callback with id", i),
        this.stateChangeEmitters.set(i, o),
        (async () => (await this.initializePromise,
        await this._acquireLock(-1, async () => {
            this._emitInitialSession(i)
        }
        )))(),
        {
            data: {
                subscription: o
            }
        }
    }
    async _emitInitialSession(e) {
        return await this._useSession(async i => {
            var o, a;
            try {
                const {data: {session: c}, error: d} = i;
                if (d)
                    throw d;
                await ((o = this.stateChangeEmitters.get(e)) === null || o === void 0 ? void 0 : o.callback("INITIAL_SESSION", c)),
                this._debug("INITIAL_SESSION", "callback id", e, "session", c)
            } catch (c) {
                await ((a = this.stateChangeEmitters.get(e)) === null || a === void 0 ? void 0 : a.callback("INITIAL_SESSION", null)),
                this._debug("INITIAL_SESSION", "callback id", e, "error", c),
                console.error(c)
            }
        }
        )
    }
    async resetPasswordForEmail(e, i={}) {
        let o = null
          , a = null;
        this.flowType === "pkce" && ([o,a] = await getCodeChallengeAndMethod(this.storage, this.storageKey, !0));
        try {
            return await _request(this.fetch, "POST", `${this.url}/recover`, {
                body: {
                    email: e,
                    code_challenge: o,
                    code_challenge_method: a,
                    gotrue_meta_security: {
                        captcha_token: i.captchaToken
                    }
                },
                headers: this.headers,
                redirectTo: i.redirectTo
            })
        } catch (c) {
            if (isAuthError(c))
                return {
                    data: null,
                    error: c
                };
            throw c
        }
    }
    async getUserIdentities() {
        var e;
        try {
            const {data: i, error: o} = await this.getUser();
            if (o)
                throw o;
            return {
                data: {
                    identities: (e = i.user.identities) !== null && e !== void 0 ? e : []
                },
                error: null
            }
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: null,
                    error: i
                };
            throw i
        }
    }
    async linkIdentity(e) {
        var i;
        try {
            const {data: o, error: a} = await this._useSession(async c => {
                var d, h, g, b, _;
                const {data: $, error: _e} = c;
                if (_e)
                    throw _e;
                const tt = await this._getUrlForProvider(`${this.url}/user/identities/authorize`, e.provider, {
                    redirectTo: (d = e.options) === null || d === void 0 ? void 0 : d.redirectTo,
                    scopes: (h = e.options) === null || h === void 0 ? void 0 : h.scopes,
                    queryParams: (g = e.options) === null || g === void 0 ? void 0 : g.queryParams,
                    skipBrowserRedirect: !0
                });
                return await _request(this.fetch, "GET", tt, {
                    headers: this.headers,
                    jwt: (_ = (b = $.session) === null || b === void 0 ? void 0 : b.access_token) !== null && _ !== void 0 ? _ : void 0
                })
            }
            );
            if (a)
                throw a;
            return isBrowser$1() && !(!((i = e.options) === null || i === void 0) && i.skipBrowserRedirect) && window.location.assign(o == null ? void 0 : o.url),
            {
                data: {
                    provider: e.provider,
                    url: o == null ? void 0 : o.url
                },
                error: null
            }
        } catch (o) {
            if (isAuthError(o))
                return {
                    data: {
                        provider: e.provider,
                        url: null
                    },
                    error: o
                };
            throw o
        }
    }
    async unlinkIdentity(e) {
        try {
            return await this._useSession(async i => {
                var o, a;
                const {data: c, error: d} = i;
                if (d)
                    throw d;
                return await _request(this.fetch, "DELETE", `${this.url}/user/identities/${e.identity_id}`, {
                    headers: this.headers,
                    jwt: (a = (o = c.session) === null || o === void 0 ? void 0 : o.access_token) !== null && a !== void 0 ? a : void 0
                })
            }
            )
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: null,
                    error: i
                };
            throw i
        }
    }
    async _refreshAccessToken(e) {
        const i = `#_refreshAccessToken(${e.substring(0, 5)}...)`;
        this._debug(i, "begin");
        try {
            const o = Date.now();
            return await retryable(async a => (a > 0 && await sleep(200 * Math.pow(2, a - 1)),
            this._debug(i, "refreshing attempt", a),
            await _request(this.fetch, "POST", `${this.url}/token?grant_type=refresh_token`, {
                body: {
                    refresh_token: e
                },
                headers: this.headers,
                xform: _sessionResponse
            })), (a, c) => {
                const d = 200 * Math.pow(2, a);
                return c && isAuthRetryableFetchError(c) && Date.now() + d - o < AUTO_REFRESH_TICK_DURATION_MS
            }
            )
        } catch (o) {
            if (this._debug(i, "error", o),
            isAuthError(o))
                return {
                    data: {
                        session: null,
                        user: null
                    },
                    error: o
                };
            throw o
        } finally {
            this._debug(i, "end")
        }
    }
    _isValidSession(e) {
        return typeof e == "object" && e !== null && "access_token"in e && "refresh_token"in e && "expires_at"in e
    }
    async _handleProviderSignIn(e, i) {
        const o = await this._getUrlForProvider(`${this.url}/authorize`, e, {
            redirectTo: i.redirectTo,
            scopes: i.scopes,
            queryParams: i.queryParams
        });
        return this._debug("#_handleProviderSignIn()", "provider", e, "options", i, "url", o),
        isBrowser$1() && !i.skipBrowserRedirect && window.location.assign(o),
        {
            data: {
                provider: e,
                url: o
            },
            error: null
        }
    }
    async _recoverAndRefresh() {
        var e;
        const i = "#_recoverAndRefresh()";
        this._debug(i, "begin");
        try {
            const o = await getItemAsync(this.storage, this.storageKey);
            if (this._debug(i, "session from storage", o),
            !this._isValidSession(o)) {
                this._debug(i, "session is not valid"),
                o !== null && await this._removeSession();
                return
            }
            const a = ((e = o.expires_at) !== null && e !== void 0 ? e : 1 / 0) * 1e3 - Date.now() < EXPIRY_MARGIN_MS;
            if (this._debug(i, `session has${a ? "" : " not"} expired with margin of ${EXPIRY_MARGIN_MS}s`),
            a) {
                if (this.autoRefreshToken && o.refresh_token) {
                    const {error: c} = await this._callRefreshToken(o.refresh_token);
                    c && (console.error(c),
                    isAuthRetryableFetchError(c) || (this._debug(i, "refresh failed with a non-retryable error, removing the session", c),
                    await this._removeSession()))
                }
            } else
                await this._notifyAllSubscribers("SIGNED_IN", o)
        } catch (o) {
            this._debug(i, "error", o),
            console.error(o);
            return
        } finally {
            this._debug(i, "end")
        }
    }
    async _callRefreshToken(e) {
        var i, o;
        if (!e)
            throw new AuthSessionMissingError;
        if (this.refreshingDeferred)
            return this.refreshingDeferred.promise;
        const a = `#_callRefreshToken(${e.substring(0, 5)}...)`;
        this._debug(a, "begin");
        try {
            this.refreshingDeferred = new Deferred;
            const {data: c, error: d} = await this._refreshAccessToken(e);
            if (d)
                throw d;
            if (!c.session)
                throw new AuthSessionMissingError;
            await this._saveSession(c.session),
            await this._notifyAllSubscribers("TOKEN_REFRESHED", c.session);
            const h = {
                session: c.session,
                error: null
            };
            return this.refreshingDeferred.resolve(h),
            h
        } catch (c) {
            if (this._debug(a, "error", c),
            isAuthError(c)) {
                const d = {
                    session: null,
                    error: c
                };
                return isAuthRetryableFetchError(c) || await this._removeSession(),
                (i = this.refreshingDeferred) === null || i === void 0 || i.resolve(d),
                d
            }
            throw (o = this.refreshingDeferred) === null || o === void 0 || o.reject(c),
            c
        } finally {
            this.refreshingDeferred = null,
            this._debug(a, "end")
        }
    }
    async _notifyAllSubscribers(e, i, o=!0) {
        const a = `#_notifyAllSubscribers(${e})`;
        this._debug(a, "begin", i, `broadcast = ${o}`);
        try {
            this.broadcastChannel && o && this.broadcastChannel.postMessage({
                event: e,
                session: i
            });
            const c = []
              , d = Array.from(this.stateChangeEmitters.values()).map(async h => {
                try {
                    await h.callback(e, i)
                } catch (g) {
                    c.push(g)
                }
            }
            );
            if (await Promise.all(d),
            c.length > 0) {
                for (let h = 0; h < c.length; h += 1)
                    console.error(c[h]);
                throw c[0]
            }
        } finally {
            this._debug(a, "end")
        }
    }
    async _saveSession(e) {
        this._debug("#_saveSession()", e),
        this.suppressGetSessionWarning = !0,
        await setItemAsync(this.storage, this.storageKey, e)
    }
    async _removeSession() {
        this._debug("#_removeSession()"),
        await removeItemAsync(this.storage, this.storageKey),
        await this._notifyAllSubscribers("SIGNED_OUT", null)
    }
    _removeVisibilityChangedCallback() {
        this._debug("#_removeVisibilityChangedCallback()");
        const e = this.visibilityChangedCallback;
        this.visibilityChangedCallback = null;
        try {
            e && isBrowser$1() && (window != null && window.removeEventListener) && window.removeEventListener("visibilitychange", e)
        } catch (i) {
            console.error("removing visibilitychange callback failed", i)
        }
    }
    async _startAutoRefresh() {
        await this._stopAutoRefresh(),
        this._debug("#_startAutoRefresh()");
        const e = setInterval( () => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION_MS);
        this.autoRefreshTicker = e,
        e && typeof e == "object" && typeof e.unref == "function" ? e.unref() : typeof Deno < "u" && typeof Deno.unrefTimer == "function" && Deno.unrefTimer(e),
        setTimeout(async () => {
            await this.initializePromise,
            await this._autoRefreshTokenTick()
        }
        , 0)
    }
    async _stopAutoRefresh() {
        this._debug("#_stopAutoRefresh()");
        const e = this.autoRefreshTicker;
        this.autoRefreshTicker = null,
        e && clearInterval(e)
    }
    async startAutoRefresh() {
        this._removeVisibilityChangedCallback(),
        await this._startAutoRefresh()
    }
    async stopAutoRefresh() {
        this._removeVisibilityChangedCallback(),
        await this._stopAutoRefresh()
    }
    async _autoRefreshTokenTick() {
        this._debug("#_autoRefreshTokenTick()", "begin");
        try {
            await this._acquireLock(0, async () => {
                try {
                    const e = Date.now();
                    try {
                        return await this._useSession(async i => {
                            const {data: {session: o}} = i;
                            if (!o || !o.refresh_token || !o.expires_at) {
                                this._debug("#_autoRefreshTokenTick()", "no session");
                                return
                            }
                            const a = Math.floor((o.expires_at * 1e3 - e) / AUTO_REFRESH_TICK_DURATION_MS);
                            this._debug("#_autoRefreshTokenTick()", `access token expires in ${a} ticks, a tick lasts ${AUTO_REFRESH_TICK_DURATION_MS}ms, refresh threshold is ${AUTO_REFRESH_TICK_THRESHOLD} ticks`),
                            a <= AUTO_REFRESH_TICK_THRESHOLD && await this._callRefreshToken(o.refresh_token)
                        }
                        )
                    } catch (i) {
                        console.error("Auto refresh tick failed with error. This is likely a transient error.", i)
                    }
                } finally {
                    this._debug("#_autoRefreshTokenTick()", "end")
                }
            }
            )
        } catch (e) {
            if (e.isAcquireTimeout || e instanceof LockAcquireTimeoutError)
                this._debug("auto refresh token tick lock not available");
            else
                throw e
        }
    }
    async _handleVisibilityChange() {
        if (this._debug("#_handleVisibilityChange()"),
        !isBrowser$1() || !(window != null && window.addEventListener))
            return this.autoRefreshToken && this.startAutoRefresh(),
            !1;
        try {
            this.visibilityChangedCallback = async () => await this._onVisibilityChanged(!1),
            window == null || window.addEventListener("visibilitychange", this.visibilityChangedCallback),
            await this._onVisibilityChanged(!0)
        } catch (e) {
            console.error("_handleVisibilityChange", e)
        }
    }
    async _onVisibilityChanged(e) {
        const i = `#_onVisibilityChanged(${e})`;
        this._debug(i, "visibilityState", document.visibilityState),
        document.visibilityState === "visible" ? (this.autoRefreshToken && this._startAutoRefresh(),
        e || (await this.initializePromise,
        await this._acquireLock(-1, async () => {
            if (document.visibilityState !== "visible") {
                this._debug(i, "acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting");
                return
            }
            await this._recoverAndRefresh()
        }
        ))) : document.visibilityState === "hidden" && this.autoRefreshToken && this._stopAutoRefresh()
    }
    async _getUrlForProvider(e, i, o) {
        const a = [`provider=${encodeURIComponent(i)}`];
        if (o != null && o.redirectTo && a.push(`redirect_to=${encodeURIComponent(o.redirectTo)}`),
        o != null && o.scopes && a.push(`scopes=${encodeURIComponent(o.scopes)}`),
        this.flowType === "pkce") {
            const [c,d] = await getCodeChallengeAndMethod(this.storage, this.storageKey)
              , h = new URLSearchParams({
                code_challenge: `${encodeURIComponent(c)}`,
                code_challenge_method: `${encodeURIComponent(d)}`
            });
            a.push(h.toString())
        }
        if (o != null && o.queryParams) {
            const c = new URLSearchParams(o.queryParams);
            a.push(c.toString())
        }
        return o != null && o.skipBrowserRedirect && a.push(`skip_http_redirect=${o.skipBrowserRedirect}`),
        `${e}?${a.join("&")}`
    }
    async _unenroll(e) {
        try {
            return await this._useSession(async i => {
                var o;
                const {data: a, error: c} = i;
                return c ? {
                    data: null,
                    error: c
                } : await _request(this.fetch, "DELETE", `${this.url}/factors/${e.factorId}`, {
                    headers: this.headers,
                    jwt: (o = a == null ? void 0 : a.session) === null || o === void 0 ? void 0 : o.access_token
                })
            }
            )
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: null,
                    error: i
                };
            throw i
        }
    }
    async _enroll(e) {
        try {
            return await this._useSession(async i => {
                var o, a;
                const {data: c, error: d} = i;
                if (d)
                    return {
                        data: null,
                        error: d
                    };
                const h = Object.assign({
                    friendly_name: e.friendlyName,
                    factor_type: e.factorType
                }, e.factorType === "phone" ? {
                    phone: e.phone
                } : {
                    issuer: e.issuer
                })
                  , {data: g, error: b} = await _request(this.fetch, "POST", `${this.url}/factors`, {
                    body: h,
                    headers: this.headers,
                    jwt: (o = c == null ? void 0 : c.session) === null || o === void 0 ? void 0 : o.access_token
                });
                return b ? {
                    data: null,
                    error: b
                } : (e.factorType === "totp" && (!((a = g == null ? void 0 : g.totp) === null || a === void 0) && a.qr_code) && (g.totp.qr_code = `data:image/svg+xml;utf-8,${g.totp.qr_code}`),
                {
                    data: g,
                    error: null
                })
            }
            )
        } catch (i) {
            if (isAuthError(i))
                return {
                    data: null,
                    error: i
                };
            throw i
        }
    }
    async _verify(e) {
        return this._acquireLock(-1, async () => {
            try {
                return await this._useSession(async i => {
                    var o;
                    const {data: a, error: c} = i;
                    if (c)
                        return {
                            data: null,
                            error: c
                        };
                    const {data: d, error: h} = await _request(this.fetch, "POST", `${this.url}/factors/${e.factorId}/verify`, {
                        body: {
                            code: e.code,
                            challenge_id: e.challengeId
                        },
                        headers: this.headers,
                        jwt: (o = a == null ? void 0 : a.session) === null || o === void 0 ? void 0 : o.access_token
                    });
                    return h ? {
                        data: null,
                        error: h
                    } : (await this._saveSession(Object.assign({
                        expires_at: Math.round(Date.now() / 1e3) + d.expires_in
                    }, d)),
                    await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED", d),
                    {
                        data: d,
                        error: h
                    })
                }
                )
            } catch (i) {
                if (isAuthError(i))
                    return {
                        data: null,
                        error: i
                    };
                throw i
            }
        }
        )
    }
    async _challenge(e) {
        return this._acquireLock(-1, async () => {
            try {
                return await this._useSession(async i => {
                    var o;
                    const {data: a, error: c} = i;
                    return c ? {
                        data: null,
                        error: c
                    } : await _request(this.fetch, "POST", `${this.url}/factors/${e.factorId}/challenge`, {
                        body: {
                            channel: e.channel
                        },
                        headers: this.headers,
                        jwt: (o = a == null ? void 0 : a.session) === null || o === void 0 ? void 0 : o.access_token
                    })
                }
                )
            } catch (i) {
                if (isAuthError(i))
                    return {
                        data: null,
                        error: i
                    };
                throw i
            }
        }
        )
    }
    async _challengeAndVerify(e) {
        const {data: i, error: o} = await this._challenge({
            factorId: e.factorId
        });
        return o ? {
            data: null,
            error: o
        } : await this._verify({
            factorId: e.factorId,
            challengeId: i.id,
            code: e.code
        })
    }
    async _listFactors() {
        const {data: {user: e}, error: i} = await this.getUser();
        if (i)
            return {
                data: null,
                error: i
            };
        const o = (e == null ? void 0 : e.factors) || []
          , a = o.filter(d => d.factor_type === "totp" && d.status === "verified")
          , c = o.filter(d => d.factor_type === "phone" && d.status === "verified");
        return {
            data: {
                all: o,
                totp: a,
                phone: c
            },
            error: null
        }
    }
    async _getAuthenticatorAssuranceLevel() {
        return this._acquireLock(-1, async () => await this._useSession(async e => {
            var i, o;
            const {data: {session: a}, error: c} = e;
            if (c)
                return {
                    data: null,
                    error: c
                };
            if (!a)
                return {
                    data: {
                        currentLevel: null,
                        nextLevel: null,
                        currentAuthenticationMethods: []
                    },
                    error: null
                };
            const {payload: d} = decodeJWT(a.access_token);
            let h = null;
            d.aal && (h = d.aal);
            let g = h;
            ((o = (i = a.user.factors) === null || i === void 0 ? void 0 : i.filter($ => $.status === "verified")) !== null && o !== void 0 ? o : []).length > 0 && (g = "aal2");
            const _ = d.amr || [];
            return {
                data: {
                    currentLevel: h,
                    nextLevel: g,
                    currentAuthenticationMethods: _
                },
                error: null
            }
        }
        ))
    }
    async fetchJwk(e, i={
        keys: []
    }) {
        let o = i.keys.find(d => d.kid === e);
        if (o || (o = this.jwks.keys.find(d => d.kid === e),
        o && this.jwks_cached_at + JWKS_TTL > Date.now()))
            return o;
        const {data: a, error: c} = await _request(this.fetch, "GET", `${this.url}/.well-known/jwks.json`, {
            headers: this.headers
        });
        if (c)
            throw c;
        if (!a.keys || a.keys.length === 0)
            throw new AuthInvalidJwtError("JWKS is empty");
        if (this.jwks = a,
        this.jwks_cached_at = Date.now(),
        o = a.keys.find(d => d.kid === e),
        !o)
            throw new AuthInvalidJwtError("No matching signing key found in JWKS");
        return o
    }
    async getClaims(e, i={
        keys: []
    }) {
        try {
            let o = e;
            if (!o) {
                const {data: tt, error: rt} = await this.getSession();
                if (rt || !tt.session)
                    return {
                        data: null,
                        error: rt
                    };
                o = tt.session.access_token
            }
            const {header: a, payload: c, signature: d, raw: {header: h, payload: g}} = decodeJWT(o);
            if (validateExp(c.exp),
            !a.kid || a.alg === "HS256" || !("crypto"in globalThis && "subtle"in globalThis.crypto)) {
                const {error: tt} = await this.getUser(o);
                if (tt)
                    throw tt;
                return {
                    data: {
                        claims: c,
                        header: a,
                        signature: d
                    },
                    error: null
                }
            }
            const b = getAlgorithm(a.alg)
              , _ = await this.fetchJwk(a.kid, i)
              , $ = await crypto.subtle.importKey("jwk", _, b, !0, ["verify"]);
            if (!await crypto.subtle.verify(b, $, d, stringToUint8Array(`${h}.${g}`)))
                throw new AuthInvalidJwtError("Invalid JWT signature");
            return {
                data: {
                    claims: c,
                    header: a,
                    signature: d
                },
                error: null
            }
        } catch (o) {
            if (isAuthError(o))
                return {
                    data: null,
                    error: o
                };
            throw o
        }
    }
}
GoTrueClient.nextInstanceID = 0;
const AuthClient = GoTrueClient;
class SupabaseAuthClient extends AuthClient {
    constructor(e) {
        super(e)
    }
}
var __awaiter = function(s, e, i, o) {
    function a(c) {
        return c instanceof i ? c : new i(function(d) {
            d(c)
        }
        )
    }
    return new (i || (i = Promise))(function(c, d) {
        function h(_) {
            try {
                b(o.next(_))
            } catch ($) {
                d($)
            }
        }
        function g(_) {
            try {
                b(o.throw(_))
            } catch ($) {
                d($)
            }
        }
        function b(_) {
            _.done ? c(_.value) : a(_.value).then(h, g)
        }
        b((o = o.apply(s, e || [])).next())
    }
    )
};
class SupabaseClient {
    constructor(e, i, o) {
        var a, c, d;
        if (this.supabaseUrl = e,
        this.supabaseKey = i,
        !e)
            throw new Error("supabaseUrl is required.");
        if (!i)
            throw new Error("supabaseKey is required.");
        const h = ensureTrailingSlash(e)
          , g = new URL(h);
        this.realtimeUrl = new URL("realtime/v1",g),
        this.realtimeUrl.protocol = this.realtimeUrl.protocol.replace("http", "ws"),
        this.authUrl = new URL("auth/v1",g),
        this.storageUrl = new URL("storage/v1",g),
        this.functionsUrl = new URL("functions/v1",g);
        const b = `sb-${g.hostname.split(".")[0]}-auth-token`
          , _ = {
            db: DEFAULT_DB_OPTIONS,
            realtime: DEFAULT_REALTIME_OPTIONS,
            auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), {
                storageKey: b
            }),
            global: DEFAULT_GLOBAL_OPTIONS
        }
          , $ = applySettingDefaults(o ?? {}, _);
        this.storageKey = (a = $.auth.storageKey) !== null && a !== void 0 ? a : "",
        this.headers = (c = $.global.headers) !== null && c !== void 0 ? c : {},
        $.accessToken ? (this.accessToken = $.accessToken,
        this.auth = new Proxy({},{
            get: (_e, tt) => {
                throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(tt)} is not possible`)
            }
        })) : this.auth = this._initSupabaseAuthClient((d = $.auth) !== null && d !== void 0 ? d : {}, this.headers, $.global.fetch),
        this.fetch = fetchWithAuth(i, this._getAccessToken.bind(this), $.global.fetch),
        this.realtime = this._initRealtimeClient(Object.assign({
            headers: this.headers,
            accessToken: this._getAccessToken.bind(this)
        }, $.realtime)),
        this.rest = new PostgrestClient(new URL("rest/v1",g).href,{
            headers: this.headers,
            schema: $.db.schema,
            fetch: this.fetch
        }),
        $.accessToken || this._listenForAuthEvents()
    }
    get functions() {
        return new FunctionsClient(this.functionsUrl.href,{
            headers: this.headers,
            customFetch: this.fetch
        })
    }
    get storage() {
        return new StorageClient(this.storageUrl.href,this.headers,this.fetch)
    }
    from(e) {
        return this.rest.from(e)
    }
    schema(e) {
        return this.rest.schema(e)
    }
    rpc(e, i={}, o={}) {
        return this.rest.rpc(e, i, o)
    }
    channel(e, i={
        config: {}
    }) {
        return this.realtime.channel(e, i)
    }
    getChannels() {
        return this.realtime.getChannels()
    }
    removeChannel(e) {
        return this.realtime.removeChannel(e)
    }
    removeAllChannels() {
        return this.realtime.removeAllChannels()
    }
    _getAccessToken() {
        var e, i;
        return __awaiter(this, void 0, void 0, function*() {
            if (this.accessToken)
                return yield this.accessToken();
            const {data: o} = yield this.auth.getSession();
            return (i = (e = o.session) === null || e === void 0 ? void 0 : e.access_token) !== null && i !== void 0 ? i : null
        })
    }
    _initSupabaseAuthClient({autoRefreshToken: e, persistSession: i, detectSessionInUrl: o, storage: a, storageKey: c, flowType: d, lock: h, debug: g}, b, _) {
        const $ = {
            Authorization: `Bearer ${this.supabaseKey}`,
            apikey: `${this.supabaseKey}`
        };
        return new SupabaseAuthClient({
            url: this.authUrl.href,
            headers: Object.assign(Object.assign({}, $), b),
            storageKey: c,
            autoRefreshToken: e,
            persistSession: i,
            detectSessionInUrl: o,
            storage: a,
            flowType: d,
            lock: h,
            debug: g,
            fetch: _,
            hasCustomAuthorizationHeader: "Authorization"in this.headers
        })
    }
    _initRealtimeClient(e) {
        return new RealtimeClient(this.realtimeUrl.href,Object.assign(Object.assign({}, e), {
            params: Object.assign({
                apikey: this.supabaseKey
            }, e == null ? void 0 : e.params)
        }))
    }
    _listenForAuthEvents() {
        return this.auth.onAuthStateChange( (i, o) => {
            this._handleTokenChanged(i, "CLIENT", o == null ? void 0 : o.access_token)
        }
        )
    }
    _handleTokenChanged(e, i, o) {
        (e === "TOKEN_REFRESHED" || e === "SIGNED_IN") && this.changedAccessToken !== o ? this.changedAccessToken = o : e === "SIGNED_OUT" && (this.realtime.setAuth(),
        i == "STORAGE" && this.auth.signOut(),
        this.changedAccessToken = void 0)
    }
}
const createClient = (s, e, i) => new SupabaseClient(s,e,i)
  , config$1 = {
    supabase: {
        url: "https://xthxutsliqptoodkzrcp.supabase.co",
        anonKey: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh0aHh1dHNsaXFwdG9vZGt6cmNwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4NTY5MTQsImV4cCI6MjA2NDQzMjkxNH0.K4XzmJauoydPB5jAECh4041MmZIvQLA3WaeACy8Y8mI"
    },
    google: {
        clientId: "185854441835-abbsuhu3tgrol1p5kcllvf92ftcsh7id.apps.googleusercontent.com"
    },
    api: {
        baseUrl: "https://xigzlt6zoj.execute-api.us-east-1.amazonaws.com/dev",
        awsBaseUrl: "https://a2wzu306xj.execute-api.us-east-1.amazonaws.com"
    },
    stack: {
        publishableKey: ""
    },
    isDevelopment: !1,
    isProduction: !0
};
function validatePublicConfig() {
    const s = [];
    return {
        isValid: s.length === 0,
        missingVars: s
    }
}
function getConfig() {
    const s = validatePublicConfig();
    if (!s.isValid)
        throw console.error("Missing required environment variables:", s.missingVars),
        new Error(`Missing required environment variables: ${s.missingVars.join(", ")}`);
    return config$1
}
const config = getConfig()
  , supabaseUrl = config.supabase.url
  , supabaseAnonKey = config.supabase.anonKey
  , supabase = createClient(supabaseUrl, supabaseAnonKey, {
    auth: {
        persistSession: !0,
        autoRefreshToken: !0
    },
    global: {
        headers: {
            "X-Client-Info": "hirebuddy-dashboard"
        }
    }
})
  , AuthContext = reactExports.createContext(void 0);
function AuthProvider({children: s}) {
    const [e,i] = reactExports.useState(null)
      , [o,a] = reactExports.useState(null)
      , [c,d] = reactExports.useState(!0)
      , [h,g] = reactExports.useState(!1)
      , b = st => {
        if (st) {
            const nt = isNewUser(st);
            g(nt),
            nt && (localStorage.setItem("isFirstTimeUser", "true"),
            setTimeout( () => {
                window.location.pathname !== "/profile" && (window.location.href = "/profile?newUser=true")
            }
            , 1e3))
        } else
            g(!1),
            localStorage.removeItem("isFirstTimeUser")
    }
    ;
    reactExports.useEffect( () => {
        supabase.auth.getSession().then( ({data: {session: nt}}) => {
            a(nt),
            i((nt == null ? void 0 : nt.user) ?? null),
            nt != null && nt.user && b(nt.user),
            d(!1)
        }
        );
        const {data: {subscription: st}} = supabase.auth.onAuthStateChange( (nt, lt) => {
            a(lt),
            i((lt == null ? void 0 : lt.user) ?? null),
            nt === "SIGNED_IN" && (lt != null && lt.user) ? b(lt.user) : nt === "SIGNED_OUT" && (g(!1),
            localStorage.removeItem("isFirstTimeUser")),
            d(!1)
        }
        );
        return () => {
            st.unsubscribe()
        }
    }
    , []),
    reactExports.useEffect( () => {
        localStorage.getItem("isFirstTimeUser") === "true" && g(!0)
    }
    , []);
    const it = {
        session: o,
        user: e,
        loading: c,
        isFirstTimeUser: h,
        signIn: async (st, nt) => {
            const {data: lt, error: dt} = await supabase.auth.signInWithPassword({
                email: st,
                password: nt
            });
            return {
                data: lt.session,
                error: dt
            }
        }
        ,
        signUp: async (st, nt) => {
            const {data: lt, error: dt} = await supabase.auth.signUp({
                email: st,
                password: nt
            });
            return {
                data: lt.session,
                error: dt
            }
        }
        ,
        signInWithGoogle: async () => {
            await supabase.auth.signInWithOAuth({
                provider: "google",
                options: {
                    redirectTo: `${window.location.origin}`
                }
            })
        }
        ,
        signInWithGithub: async () => {
            await supabase.auth.signInWithOAuth({
                provider: "github",
                options: {
                    redirectTo: `${window.location.origin}`
                }
            })
        }
        ,
        signOut: async () => {
            await supabase.auth.signOut()
        }
        ,
        markUserAsReturning: () => {
            g(!1),
            localStorage.removeItem("isFirstTimeUser")
        }
    };
    return jsxRuntimeExports.jsx(AuthContext.Provider, {
        value: it,
        children: s
    })
}
function useAuth() {
    const s = reactExports.useContext(AuthContext);
    if (s === void 0)
        throw new Error("useAuth must be used within an AuthProvider");
    return s
}
class OnboardingService {
    static async checkOnboardingStatus(e) {
        try {
            const {data: i, error: o} = await supabase.from("user_profiles").select("*").eq("user_id", e.id).single();
            return o ? (console.error("Error checking onboarding status:", o),
            {
                needsOnboarding: !0,
                profile: null
            }) : {
                needsOnboarding: !i || !i.onboarding_completed,
                profile: i
            }
        } catch (i) {
            return console.error("Error in checkOnboardingStatus:", i),
            {
                needsOnboarding: !0,
                profile: null
            }
        }
    }
    static async createInitialProfile(e) {
        var i, o;
        try {
            const {data: a, error: c} = await supabase.from("user_profiles").insert({
                user_id: e.id,
                full_name: ((i = e.user_metadata) == null ? void 0 : i.full_name) || ((o = e.email) == null ? void 0 : o.split("@")[0]) || null,
                onboarding_completed: !1
            }).select().single();
            return c ? (console.error("Error creating initial profile:", c),
            null) : a
        } catch (a) {
            return console.error("Error in createInitialProfile:", a),
            null
        }
    }
    static async completeOnboarding(e, i) {
        try {
            const {error: o} = await supabase.from("user_profiles").update({
                ...i,
                onboarding_completed: !0,
                onboarding_completed_at: new Date().toISOString()
            }).eq("user_id", e);
            return o ? (console.error("Error completing onboarding:", o),
            {
                success: !1,
                error: o.message
            }) : {
                success: !0
            }
        } catch (o) {
            return console.error("Error in completeOnboarding:", o),
            {
                success: !1,
                error: "Failed to complete onboarding"
            }
        }
    }
    static async getUserProfile(e) {
        try {
            const {data: i, error: o} = await supabase.from("user_profiles").select("*").eq("user_id", e).single();
            return o ? (console.error("Error getting user profile:", o),
            null) : i
        } catch (i) {
            return console.error("Error in getUserProfile:", i),
            null
        }
    }
}
const LayoutGroupContext = reactExports.createContext({});
function useConstant(s) {
    const e = reactExports.useRef(null);
    return e.current === null && (e.current = s()),
    e.current
}
const isBrowser = typeof window < "u"
  , useIsomorphicLayoutEffect$2 = isBrowser ? reactExports.useLayoutEffect : reactExports.useEffect
  , PresenceContext = reactExports.createContext(null);
function addUniqueItem(s, e) {
    s.indexOf(e) === -1 && s.push(e)
}
function removeItem(s, e) {
    const i = s.indexOf(e);
    i > -1 && s.splice(i, 1)
}
const clamp$1 = (s, e, i) => i > e ? e : i < s ? s : i;
let invariant = () => {}
;
const MotionGlobalConfig = {}
  , isNumericalString = s => /^-?(?:\d+(?:\.\d+)?|\.\d+)$/u.test(s);
function isObject(s) {
    return typeof s == "object" && s !== null
}
const isZeroValueString = s => /^0[^.\s]+$/u.test(s);
function memo(s) {
    let e;
    return () => (e === void 0 && (e = s()),
    e)
}
const noop = s => s
  , combineFunctions = (s, e) => i => e(s(i))
  , pipe = (...s) => s.reduce(combineFunctions)
  , progress = (s, e, i) => {
    const o = e - s;
    return o === 0 ? 1 : (i - s) / o
}
;
class SubscriptionManager {
    constructor() {
        this.subscriptions = []
    }
    add(e) {
        return addUniqueItem(this.subscriptions, e),
        () => removeItem(this.subscriptions, e)
    }
    notify(e, i, o) {
        const a = this.subscriptions.length;
        if (a)
            if (a === 1)
                this.subscriptions[0](e, i, o);
            else
                for (let c = 0; c < a; c++) {
                    const d = this.subscriptions[c];
                    d && d(e, i, o)
                }
    }
    getSize() {
        return this.subscriptions.length
    }
    clear() {
        this.subscriptions.length = 0
    }
}
const secondsToMilliseconds = s => s * 1e3
  , millisecondsToSeconds = s => s / 1e3;
function velocityPerSecond(s, e) {
    return e ? s * (1e3 / e) : 0
}
const calcBezier = (s, e, i) => (((1 - 3 * i + 3 * e) * s + (3 * i - 6 * e)) * s + 3 * e) * s
  , subdivisionPrecision = 1e-7
  , subdivisionMaxIterations = 12;
function binarySubdivide(s, e, i, o, a) {
    let c, d, h = 0;
    do
        d = e + (i - e) / 2,
        c = calcBezier(d, o, a) - s,
        c > 0 ? i = d : e = d;
    while (Math.abs(c) > subdivisionPrecision && ++h < subdivisionMaxIterations);
    return d
}
function cubicBezier(s, e, i, o) {
    if (s === e && i === o)
        return noop;
    const a = c => binarySubdivide(c, 0, 1, s, i);
    return c => c === 0 || c === 1 ? c : calcBezier(a(c), e, o)
}
const mirrorEasing = s => e => e <= .5 ? s(2 * e) / 2 : (2 - s(2 * (1 - e))) / 2
  , reverseEasing = s => e => 1 - s(1 - e)
  , backOut = cubicBezier(.33, 1.53, .69, .99)
  , backIn = reverseEasing(backOut)
  , backInOut = mirrorEasing(backIn)
  , anticipate = s => (s *= 2) < 1 ? .5 * backIn(s) : .5 * (2 - Math.pow(2, -10 * (s - 1)))
  , circIn = s => 1 - Math.sin(Math.acos(s))
  , circOut = reverseEasing(circIn)
  , circInOut = mirrorEasing(circIn)
  , easeIn = cubicBezier(.42, 0, 1, 1)
  , easeOut = cubicBezier(0, 0, .58, 1)
  , easeInOut = cubicBezier(.42, 0, .58, 1)
  , isEasingArray = s => Array.isArray(s) && typeof s[0] != "number"
  , isBezierDefinition = s => Array.isArray(s) && typeof s[0] == "number"
  , easingLookup = {
    linear: noop,
    easeIn,
    easeInOut,
    easeOut,
    circIn,
    circInOut,
    circOut,
    backIn,
    backInOut,
    backOut,
    anticipate
}
  , isValidEasing = s => typeof s == "string"
  , easingDefinitionToFunction = s => {
    if (isBezierDefinition(s)) {
        invariant(s.length === 4);
        const [e,i,o,a] = s;
        return cubicBezier(e, i, o, a)
    } else if (isValidEasing(s))
        return invariant(easingLookup[s] !== void 0),
        easingLookup[s];
    return s
}
  , stepsOrder = ["setup", "read", "resolveKeyframes", "preUpdate", "update", "preRender", "render", "postRender"]
  , statsBuffer = {
    value: null,
    addProjectionMetrics: null
};
function createRenderStep(s, e) {
    let i = new Set
      , o = new Set
      , a = !1
      , c = !1;
    const d = new WeakSet;
    let h = {
        delta: 0,
        timestamp: 0,
        isProcessing: !1
    }
      , g = 0;
    function b($) {
        d.has($) && (_.schedule($),
        s()),
        g++,
        $(h)
    }
    const _ = {
        schedule: ($, _e=!1, tt=!1) => {
            const et = tt && a ? i : o;
            return _e && d.add($),
            et.has($) || et.add($),
            $
        }
        ,
        cancel: $ => {
            o.delete($),
            d.delete($)
        }
        ,
        process: $ => {
            if (h = $,
            a) {
                c = !0;
                return
            }
            a = !0,
            [i,o] = [o, i],
            i.forEach(b),
            e && statsBuffer.value && statsBuffer.value.frameloop[e].push(g),
            g = 0,
            i.clear(),
            a = !1,
            c && (c = !1,
            _.process($))
        }
    };
    return _
}
const maxElapsed = 40;
function createRenderBatcher(s, e) {
    let i = !1
      , o = !0;
    const a = {
        delta: 0,
        timestamp: 0,
        isProcessing: !1
    }
      , c = () => i = !0
      , d = stepsOrder.reduce( (lt, dt) => (lt[dt] = createRenderStep(c, e ? dt : void 0),
    lt), {})
      , {setup: h, read: g, resolveKeyframes: b, preUpdate: _, update: $, preRender: _e, render: tt, postRender: rt} = d
      , et = () => {
        const lt = MotionGlobalConfig.useManualTiming ? a.timestamp : performance.now();
        i = !1,
        MotionGlobalConfig.useManualTiming || (a.delta = o ? 1e3 / 60 : Math.max(Math.min(lt - a.timestamp, maxElapsed), 1)),
        a.timestamp = lt,
        a.isProcessing = !0,
        h.process(a),
        g.process(a),
        b.process(a),
        _.process(a),
        $.process(a),
        _e.process(a),
        tt.process(a),
        rt.process(a),
        a.isProcessing = !1,
        i && e && (o = !1,
        s(et))
    }
      , it = () => {
        i = !0,
        o = !0,
        a.isProcessing || s(et)
    }
    ;
    return {
        schedule: stepsOrder.reduce( (lt, dt) => {
            const ot = d[dt];
            return lt[dt] = (at, ht=!1, pt=!1) => (i || it(),
            ot.schedule(at, ht, pt)),
            lt
        }
        , {}),
        cancel: lt => {
            for (let dt = 0; dt < stepsOrder.length; dt++)
                d[stepsOrder[dt]].cancel(lt)
        }
        ,
        state: a,
        steps: d
    }
}
const {schedule: frame, cancel: cancelFrame, state: frameData, steps: frameSteps} = createRenderBatcher(typeof requestAnimationFrame < "u" ? requestAnimationFrame : noop, !0);
let now;
function clearTime() {
    now = void 0
}
const time = {
    now: () => (now === void 0 && time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming ? frameData.timestamp : performance.now()),
    now),
    set: s => {
        now = s,
        queueMicrotask(clearTime)
    }
}
  , checkStringStartsWith = s => e => typeof e == "string" && e.startsWith(s)
  , isCSSVariableName = checkStringStartsWith("--")
  , startsAsVariableToken = checkStringStartsWith("var(--")
  , isCSSVariableToken = s => startsAsVariableToken(s) ? singleCssVariableRegex.test(s.split("/*")[0].trim()) : !1
  , singleCssVariableRegex = /var\(--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)$/iu
  , number = {
    test: s => typeof s == "number",
    parse: parseFloat,
    transform: s => s
}
  , alpha = {
    ...number,
    transform: s => clamp$1(0, 1, s)
}
  , scale = {
    ...number,
    default: 1
}
  , sanitize = s => Math.round(s * 1e5) / 1e5
  , floatRegex = /-?(?:\d+(?:\.\d+)?|\.\d+)/gu;
function isNullish(s) {
    return s == null
}
const singleColorRegex = /^(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))$/iu
  , isColorString = (s, e) => i => !!(typeof i == "string" && singleColorRegex.test(i) && i.startsWith(s) || e && !isNullish(i) && Object.prototype.hasOwnProperty.call(i, e))
  , splitColor = (s, e, i) => o => {
    if (typeof o != "string")
        return o;
    const [a,c,d,h] = o.match(floatRegex);
    return {
        [s]: parseFloat(a),
        [e]: parseFloat(c),
        [i]: parseFloat(d),
        alpha: h !== void 0 ? parseFloat(h) : 1
    }
}
  , clampRgbUnit = s => clamp$1(0, 255, s)
  , rgbUnit = {
    ...number,
    transform: s => Math.round(clampRgbUnit(s))
}
  , rgba = {
    test: isColorString("rgb", "red"),
    parse: splitColor("red", "green", "blue"),
    transform: ({red: s, green: e, blue: i, alpha: o=1}) => "rgba(" + rgbUnit.transform(s) + ", " + rgbUnit.transform(e) + ", " + rgbUnit.transform(i) + ", " + sanitize(alpha.transform(o)) + ")"
};
function parseHex(s) {
    let e = ""
      , i = ""
      , o = ""
      , a = "";
    return s.length > 5 ? (e = s.substring(1, 3),
    i = s.substring(3, 5),
    o = s.substring(5, 7),
    a = s.substring(7, 9)) : (e = s.substring(1, 2),
    i = s.substring(2, 3),
    o = s.substring(3, 4),
    a = s.substring(4, 5),
    e += e,
    i += i,
    o += o,
    a += a),
    {
        red: parseInt(e, 16),
        green: parseInt(i, 16),
        blue: parseInt(o, 16),
        alpha: a ? parseInt(a, 16) / 255 : 1
    }
}
const hex = {
    test: isColorString("#"),
    parse: parseHex,
    transform: rgba.transform
}
  , createUnitType = s => ({
    test: e => typeof e == "string" && e.endsWith(s) && e.split(" ").length === 1,
    parse: parseFloat,
    transform: e => `${e}${s}`
})
  , degrees = createUnitType("deg")
  , percent = createUnitType("%")
  , px = createUnitType("px")
  , vh = createUnitType("vh")
  , vw = createUnitType("vw")
  , progressPercentage = {
    ...percent,
    parse: s => percent.parse(s) / 100,
    transform: s => percent.transform(s * 100)
}
  , hsla = {
    test: isColorString("hsl", "hue"),
    parse: splitColor("hue", "saturation", "lightness"),
    transform: ({hue: s, saturation: e, lightness: i, alpha: o=1}) => "hsla(" + Math.round(s) + ", " + percent.transform(sanitize(e)) + ", " + percent.transform(sanitize(i)) + ", " + sanitize(alpha.transform(o)) + ")"
}
  , color = {
    test: s => rgba.test(s) || hex.test(s) || hsla.test(s),
    parse: s => rgba.test(s) ? rgba.parse(s) : hsla.test(s) ? hsla.parse(s) : hex.parse(s),
    transform: s => typeof s == "string" ? s : s.hasOwnProperty("red") ? rgba.transform(s) : hsla.transform(s)
}
  , colorRegex = /(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))/giu;
function test(s) {
    var e, i;
    return isNaN(s) && typeof s == "string" && (((e = s.match(floatRegex)) == null ? void 0 : e.length) || 0) + (((i = s.match(colorRegex)) == null ? void 0 : i.length) || 0) > 0
}
const NUMBER_TOKEN = "number"
  , COLOR_TOKEN = "color"
  , VAR_TOKEN = "var"
  , VAR_FUNCTION_TOKEN = "var("
  , SPLIT_TOKEN = "${}"
  , complexRegex = /var\s*\(\s*--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)|#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\)|-?(?:\d+(?:\.\d+)?|\.\d+)/giu;
function analyseComplexValue(s) {
    const e = s.toString()
      , i = []
      , o = {
        color: [],
        number: [],
        var: []
    }
      , a = [];
    let c = 0;
    const h = e.replace(complexRegex, g => (color.test(g) ? (o.color.push(c),
    a.push(COLOR_TOKEN),
    i.push(color.parse(g))) : g.startsWith(VAR_FUNCTION_TOKEN) ? (o.var.push(c),
    a.push(VAR_TOKEN),
    i.push(g)) : (o.number.push(c),
    a.push(NUMBER_TOKEN),
    i.push(parseFloat(g))),
    ++c,
    SPLIT_TOKEN)).split(SPLIT_TOKEN);
    return {
        values: i,
        split: h,
        indexes: o,
        types: a
    }
}
function parseComplexValue(s) {
    return analyseComplexValue(s).values
}
function createTransformer(s) {
    const {split: e, types: i} = analyseComplexValue(s)
      , o = e.length;
    return a => {
        let c = "";
        for (let d = 0; d < o; d++)
            if (c += e[d],
            a[d] !== void 0) {
                const h = i[d];
                h === NUMBER_TOKEN ? c += sanitize(a[d]) : h === COLOR_TOKEN ? c += color.transform(a[d]) : c += a[d]
            }
        return c
    }
}
const convertNumbersToZero = s => typeof s == "number" ? 0 : s;
function getAnimatableNone$1(s) {
    const e = parseComplexValue(s);
    return createTransformer(s)(e.map(convertNumbersToZero))
}
const complex = {
    test,
    parse: parseComplexValue,
    createTransformer,
    getAnimatableNone: getAnimatableNone$1
};
function hueToRgb(s, e, i) {
    return i < 0 && (i += 1),
    i > 1 && (i -= 1),
    i < 1 / 6 ? s + (e - s) * 6 * i : i < 1 / 2 ? e : i < 2 / 3 ? s + (e - s) * (2 / 3 - i) * 6 : s
}
function hslaToRgba({hue: s, saturation: e, lightness: i, alpha: o}) {
    s /= 360,
    e /= 100,
    i /= 100;
    let a = 0
      , c = 0
      , d = 0;
    if (!e)
        a = c = d = i;
    else {
        const h = i < .5 ? i * (1 + e) : i + e - i * e
          , g = 2 * i - h;
        a = hueToRgb(g, h, s + 1 / 3),
        c = hueToRgb(g, h, s),
        d = hueToRgb(g, h, s - 1 / 3)
    }
    return {
        red: Math.round(a * 255),
        green: Math.round(c * 255),
        blue: Math.round(d * 255),
        alpha: o
    }
}
function mixImmediate(s, e) {
    return i => i > 0 ? e : s
}
const mixNumber$1 = (s, e, i) => s + (e - s) * i
  , mixLinearColor = (s, e, i) => {
    const o = s * s
      , a = i * (e * e - o) + o;
    return a < 0 ? 0 : Math.sqrt(a)
}
  , colorTypes = [hex, rgba, hsla]
  , getColorType = s => colorTypes.find(e => e.test(s));
function asRGBA(s) {
    const e = getColorType(s);
    if (!e)
        return !1;
    let i = e.parse(s);
    return e === hsla && (i = hslaToRgba(i)),
    i
}
const mixColor = (s, e) => {
    const i = asRGBA(s)
      , o = asRGBA(e);
    if (!i || !o)
        return mixImmediate(s, e);
    const a = {
        ...i
    };
    return c => (a.red = mixLinearColor(i.red, o.red, c),
    a.green = mixLinearColor(i.green, o.green, c),
    a.blue = mixLinearColor(i.blue, o.blue, c),
    a.alpha = mixNumber$1(i.alpha, o.alpha, c),
    rgba.transform(a))
}
  , invisibleValues = new Set(["none", "hidden"]);
function mixVisibility(s, e) {
    return invisibleValues.has(s) ? i => i <= 0 ? s : e : i => i >= 1 ? e : s
}
function mixNumber(s, e) {
    return i => mixNumber$1(s, e, i)
}
function getMixer(s) {
    return typeof s == "number" ? mixNumber : typeof s == "string" ? isCSSVariableToken(s) ? mixImmediate : color.test(s) ? mixColor : mixComplex : Array.isArray(s) ? mixArray : typeof s == "object" ? color.test(s) ? mixColor : mixObject : mixImmediate
}
function mixArray(s, e) {
    const i = [...s]
      , o = i.length
      , a = s.map( (c, d) => getMixer(c)(c, e[d]));
    return c => {
        for (let d = 0; d < o; d++)
            i[d] = a[d](c);
        return i
    }
}
function mixObject(s, e) {
    const i = {
        ...s,
        ...e
    }
      , o = {};
    for (const a in i)
        s[a] !== void 0 && e[a] !== void 0 && (o[a] = getMixer(s[a])(s[a], e[a]));
    return a => {
        for (const c in o)
            i[c] = o[c](a);
        return i
    }
}
function matchOrder(s, e) {
    const i = []
      , o = {
        color: 0,
        var: 0,
        number: 0
    };
    for (let a = 0; a < e.values.length; a++) {
        const c = e.types[a]
          , d = s.indexes[c][o[c]]
          , h = s.values[d] ?? 0;
        i[a] = h,
        o[c]++
    }
    return i
}
const mixComplex = (s, e) => {
    const i = complex.createTransformer(e)
      , o = analyseComplexValue(s)
      , a = analyseComplexValue(e);
    return o.indexes.var.length === a.indexes.var.length && o.indexes.color.length === a.indexes.color.length && o.indexes.number.length >= a.indexes.number.length ? invisibleValues.has(s) && !a.values.length || invisibleValues.has(e) && !o.values.length ? mixVisibility(s, e) : pipe(mixArray(matchOrder(o, a), a.values), i) : mixImmediate(s, e)
}
;
function mix(s, e, i) {
    return typeof s == "number" && typeof e == "number" && typeof i == "number" ? mixNumber$1(s, e, i) : getMixer(s)(s, e)
}
const frameloopDriver = s => {
    const e = ({timestamp: i}) => s(i);
    return {
        start: (i=!0) => frame.update(e, i),
        stop: () => cancelFrame(e),
        now: () => frameData.isProcessing ? frameData.timestamp : time.now()
    }
}
  , generateLinearEasing = (s, e, i=10) => {
    let o = "";
    const a = Math.max(Math.round(e / i), 2);
    for (let c = 0; c < a; c++)
        o += s(c / (a - 1)) + ", ";
    return `linear(${o.substring(0, o.length - 2)})`
}
  , maxGeneratorDuration = 2e4;
function calcGeneratorDuration(s) {
    let e = 0;
    const i = 50;
    let o = s.next(e);
    for (; !o.done && e < maxGeneratorDuration; )
        e += i,
        o = s.next(e);
    return e >= maxGeneratorDuration ? 1 / 0 : e
}
function createGeneratorEasing(s, e=100, i) {
    const o = i({
        ...s,
        keyframes: [0, e]
    })
      , a = Math.min(calcGeneratorDuration(o), maxGeneratorDuration);
    return {
        type: "keyframes",
        ease: c => o.next(a * c).value / e,
        duration: millisecondsToSeconds(a)
    }
}
const velocitySampleDuration = 5;
function calcGeneratorVelocity(s, e, i) {
    const o = Math.max(e - velocitySampleDuration, 0);
    return velocityPerSecond(i - s(o), e - o)
}
const springDefaults = {
    stiffness: 100,
    damping: 10,
    mass: 1,
    velocity: 0,
    duration: 800,
    bounce: .3,
    visualDuration: .3,
    restSpeed: {
        granular: .01,
        default: 2
    },
    restDelta: {
        granular: .005,
        default: .5
    },
    minDuration: .01,
    maxDuration: 10,
    minDamping: .05,
    maxDamping: 1
}
  , safeMin = .001;
function findSpring({duration: s=springDefaults.duration, bounce: e=springDefaults.bounce, velocity: i=springDefaults.velocity, mass: o=springDefaults.mass}) {
    let a, c, d = 1 - e;
    d = clamp$1(springDefaults.minDamping, springDefaults.maxDamping, d),
    s = clamp$1(springDefaults.minDuration, springDefaults.maxDuration, millisecondsToSeconds(s)),
    d < 1 ? (a = b => {
        const _ = b * d
          , $ = _ * s
          , _e = _ - i
          , tt = calcAngularFreq(b, d)
          , rt = Math.exp(-$);
        return safeMin - _e / tt * rt
    }
    ,
    c = b => {
        const $ = b * d * s
          , _e = $ * i + i
          , tt = Math.pow(d, 2) * Math.pow(b, 2) * s
          , rt = Math.exp(-$)
          , et = calcAngularFreq(Math.pow(b, 2), d);
        return (-a(b) + safeMin > 0 ? -1 : 1) * ((_e - tt) * rt) / et
    }
    ) : (a = b => {
        const _ = Math.exp(-b * s)
          , $ = (b - i) * s + 1;
        return -safeMin + _ * $
    }
    ,
    c = b => {
        const _ = Math.exp(-b * s)
          , $ = (i - b) * (s * s);
        return _ * $
    }
    );
    const h = 5 / s
      , g = approximateRoot(a, c, h);
    if (s = secondsToMilliseconds(s),
    isNaN(g))
        return {
            stiffness: springDefaults.stiffness,
            damping: springDefaults.damping,
            duration: s
        };
    {
        const b = Math.pow(g, 2) * o;
        return {
            stiffness: b,
            damping: d * 2 * Math.sqrt(o * b),
            duration: s
        }
    }
}
const rootIterations = 12;
function approximateRoot(s, e, i) {
    let o = i;
    for (let a = 1; a < rootIterations; a++)
        o = o - s(o) / e(o);
    return o
}
function calcAngularFreq(s, e) {
    return s * Math.sqrt(1 - e * e)
}
const durationKeys = ["duration", "bounce"]
  , physicsKeys = ["stiffness", "damping", "mass"];
function isSpringType(s, e) {
    return e.some(i => s[i] !== void 0)
}
function getSpringOptions(s) {
    let e = {
        velocity: springDefaults.velocity,
        stiffness: springDefaults.stiffness,
        damping: springDefaults.damping,
        mass: springDefaults.mass,
        isResolvedFromDuration: !1,
        ...s
    };
    if (!isSpringType(s, physicsKeys) && isSpringType(s, durationKeys))
        if (s.visualDuration) {
            const i = s.visualDuration
              , o = 2 * Math.PI / (i * 1.2)
              , a = o * o
              , c = 2 * clamp$1(.05, 1, 1 - (s.bounce || 0)) * Math.sqrt(a);
            e = {
                ...e,
                mass: springDefaults.mass,
                stiffness: a,
                damping: c
            }
        } else {
            const i = findSpring(s);
            e = {
                ...e,
                ...i,
                mass: springDefaults.mass
            },
            e.isResolvedFromDuration = !0
        }
    return e
}
function spring(s=springDefaults.visualDuration, e=springDefaults.bounce) {
    const i = typeof s != "object" ? {
        visualDuration: s,
        keyframes: [0, 1],
        bounce: e
    } : s;
    let {restSpeed: o, restDelta: a} = i;
    const c = i.keyframes[0]
      , d = i.keyframes[i.keyframes.length - 1]
      , h = {
        done: !1,
        value: c
    }
      , {stiffness: g, damping: b, mass: _, duration: $, velocity: _e, isResolvedFromDuration: tt} = getSpringOptions({
        ...i,
        velocity: -millisecondsToSeconds(i.velocity || 0)
    })
      , rt = _e || 0
      , et = b / (2 * Math.sqrt(g * _))
      , it = d - c
      , st = millisecondsToSeconds(Math.sqrt(g / _))
      , nt = Math.abs(it) < 5;
    o || (o = nt ? springDefaults.restSpeed.granular : springDefaults.restSpeed.default),
    a || (a = nt ? springDefaults.restDelta.granular : springDefaults.restDelta.default);
    let lt;
    if (et < 1) {
        const ot = calcAngularFreq(st, et);
        lt = at => {
            const ht = Math.exp(-et * st * at);
            return d - ht * ((rt + et * st * it) / ot * Math.sin(ot * at) + it * Math.cos(ot * at))
        }
    } else if (et === 1)
        lt = ot => d - Math.exp(-st * ot) * (it + (rt + st * it) * ot);
    else {
        const ot = st * Math.sqrt(et * et - 1);
        lt = at => {
            const ht = Math.exp(-et * st * at)
              , pt = Math.min(ot * at, 300);
            return d - ht * ((rt + et * st * it) * Math.sinh(pt) + ot * it * Math.cosh(pt)) / ot
        }
    }
    const dt = {
        calculatedDuration: tt && $ || null,
        next: ot => {
            const at = lt(ot);
            if (tt)
                h.done = ot >= $;
            else {
                let ht = ot === 0 ? rt : 0;
                et < 1 && (ht = ot === 0 ? secondsToMilliseconds(rt) : calcGeneratorVelocity(lt, ot, at));
                const pt = Math.abs(ht) <= o
                  , gt = Math.abs(d - at) <= a;
                h.done = pt && gt
            }
            return h.value = h.done ? d : at,
            h
        }
        ,
        toString: () => {
            const ot = Math.min(calcGeneratorDuration(dt), maxGeneratorDuration)
              , at = generateLinearEasing(ht => dt.next(ot * ht).value, ot, 30);
            return ot + "ms " + at
        }
        ,
        toTransition: () => {}
    };
    return dt
}
spring.applyToOptions = s => {
    const e = createGeneratorEasing(s, 100, spring);
    return s.ease = e.ease,
    s.duration = secondsToMilliseconds(e.duration),
    s.type = "keyframes",
    s
}
;
function inertia({keyframes: s, velocity: e=0, power: i=.8, timeConstant: o=325, bounceDamping: a=10, bounceStiffness: c=500, modifyTarget: d, min: h, max: g, restDelta: b=.5, restSpeed: _}) {
    const $ = s[0]
      , _e = {
        done: !1,
        value: $
    }
      , tt = pt => h !== void 0 && pt < h || g !== void 0 && pt > g
      , rt = pt => h === void 0 ? g : g === void 0 || Math.abs(h - pt) < Math.abs(g - pt) ? h : g;
    let et = i * e;
    const it = $ + et
      , st = d === void 0 ? it : d(it);
    st !== it && (et = st - $);
    const nt = pt => -et * Math.exp(-pt / o)
      , lt = pt => st + nt(pt)
      , dt = pt => {
        const gt = nt(pt)
          , wt = lt(pt);
        _e.done = Math.abs(gt) <= b,
        _e.value = _e.done ? st : wt
    }
    ;
    let ot, at;
    const ht = pt => {
        tt(_e.value) && (ot = pt,
        at = spring({
            keyframes: [_e.value, rt(_e.value)],
            velocity: calcGeneratorVelocity(lt, pt, _e.value),
            damping: a,
            stiffness: c,
            restDelta: b,
            restSpeed: _
        }))
    }
    ;
    return ht(0),
    {
        calculatedDuration: null,
        next: pt => {
            let gt = !1;
            return !at && ot === void 0 && (gt = !0,
            dt(pt),
            ht(pt)),
            ot !== void 0 && pt >= ot ? at.next(pt - ot) : (!gt && dt(pt),
            _e)
        }
    }
}
function createMixers(s, e, i) {
    const o = []
      , a = i || MotionGlobalConfig.mix || mix
      , c = s.length - 1;
    for (let d = 0; d < c; d++) {
        let h = a(s[d], s[d + 1]);
        if (e) {
            const g = Array.isArray(e) ? e[d] || noop : e;
            h = pipe(g, h)
        }
        o.push(h)
    }
    return o
}
function interpolate(s, e, {clamp: i=!0, ease: o, mixer: a}={}) {
    const c = s.length;
    if (invariant(c === e.length),
    c === 1)
        return () => e[0];
    if (c === 2 && e[0] === e[1])
        return () => e[1];
    const d = s[0] === s[1];
    s[0] > s[c - 1] && (s = [...s].reverse(),
    e = [...e].reverse());
    const h = createMixers(e, o, a)
      , g = h.length
      , b = _ => {
        if (d && _ < s[0])
            return e[0];
        let $ = 0;
        if (g > 1)
            for (; $ < s.length - 2 && !(_ < s[$ + 1]); $++)
                ;
        const _e = progress(s[$], s[$ + 1], _);
        return h[$](_e)
    }
    ;
    return i ? _ => b(clamp$1(s[0], s[c - 1], _)) : b
}
function fillOffset(s, e) {
    const i = s[s.length - 1];
    for (let o = 1; o <= e; o++) {
        const a = progress(0, e, o);
        s.push(mixNumber$1(i, 1, a))
    }
}
function defaultOffset(s) {
    const e = [0];
    return fillOffset(e, s.length - 1),
    e
}
function convertOffsetToTimes(s, e) {
    return s.map(i => i * e)
}
function defaultEasing(s, e) {
    return s.map( () => e || easeInOut).splice(0, s.length - 1)
}
function keyframes({duration: s=300, keyframes: e, times: i, ease: o="easeInOut"}) {
    const a = isEasingArray(o) ? o.map(easingDefinitionToFunction) : easingDefinitionToFunction(o)
      , c = {
        done: !1,
        value: e[0]
    }
      , d = convertOffsetToTimes(i && i.length === e.length ? i : defaultOffset(e), s)
      , h = interpolate(d, e, {
        ease: Array.isArray(a) ? a : defaultEasing(e, a)
    });
    return {
        calculatedDuration: s,
        next: g => (c.value = h(g),
        c.done = g >= s,
        c)
    }
}
const isNotNull$1 = s => s !== null;
function getFinalKeyframe$1(s, {repeat: e, repeatType: i="loop"}, o, a=1) {
    const c = s.filter(isNotNull$1)
      , h = a < 0 || e && i !== "loop" && e % 2 === 1 ? 0 : c.length - 1;
    return !h || o === void 0 ? c[h] : o
}
const transitionTypeMap = {
    decay: inertia,
    inertia,
    tween: keyframes,
    keyframes,
    spring
};
function replaceTransitionType(s) {
    typeof s.type == "string" && (s.type = transitionTypeMap[s.type])
}
class WithPromise {
    constructor() {
        this.updateFinished()
    }
    get finished() {
        return this._finished
    }
    updateFinished() {
        this._finished = new Promise(e => {
            this.resolve = e
        }
        )
    }
    notifyFinished() {
        this.resolve()
    }
    then(e, i) {
        return this.finished.then(e, i)
    }
}
const percentToProgress = s => s / 100;
class JSAnimation extends WithPromise {
    constructor(e) {
        super(),
        this.state = "idle",
        this.startTime = null,
        this.isStopped = !1,
        this.currentTime = 0,
        this.holdTime = null,
        this.playbackSpeed = 1,
        this.stop = () => {
            var o, a;
            const {motionValue: i} = this.options;
            i && i.updatedAt !== time.now() && this.tick(time.now()),
            this.isStopped = !0,
            this.state !== "idle" && (this.teardown(),
            (a = (o = this.options).onStop) == null || a.call(o))
        }
        ,
        this.options = e,
        this.initAnimation(),
        this.play(),
        e.autoplay === !1 && this.pause()
    }
    initAnimation() {
        const {options: e} = this;
        replaceTransitionType(e);
        const {type: i=keyframes, repeat: o=0, repeatDelay: a=0, repeatType: c, velocity: d=0} = e;
        let {keyframes: h} = e;
        const g = i || keyframes;
        g !== keyframes && typeof h[0] != "number" && (this.mixKeyframes = pipe(percentToProgress, mix(h[0], h[1])),
        h = [0, 100]);
        const b = g({
            ...e,
            keyframes: h
        });
        c === "mirror" && (this.mirroredGenerator = g({
            ...e,
            keyframes: [...h].reverse(),
            velocity: -d
        })),
        b.calculatedDuration === null && (b.calculatedDuration = calcGeneratorDuration(b));
        const {calculatedDuration: _} = b;
        this.calculatedDuration = _,
        this.resolvedDuration = _ + a,
        this.totalDuration = this.resolvedDuration * (o + 1) - a,
        this.generator = b
    }
    updateTime(e) {
        const i = Math.round(e - this.startTime) * this.playbackSpeed;
        this.holdTime !== null ? this.currentTime = this.holdTime : this.currentTime = i
    }
    tick(e, i=!1) {
        const {generator: o, totalDuration: a, mixKeyframes: c, mirroredGenerator: d, resolvedDuration: h, calculatedDuration: g} = this;
        if (this.startTime === null)
            return o.next(0);
        const {delay: b=0, keyframes: _, repeat: $, repeatType: _e, repeatDelay: tt, type: rt, onUpdate: et, finalKeyframe: it} = this.options;
        this.speed > 0 ? this.startTime = Math.min(this.startTime, e) : this.speed < 0 && (this.startTime = Math.min(e - a / this.speed, this.startTime)),
        i ? this.currentTime = e : this.updateTime(e);
        const st = this.currentTime - b * (this.playbackSpeed >= 0 ? 1 : -1)
          , nt = this.playbackSpeed >= 0 ? st < 0 : st > a;
        this.currentTime = Math.max(st, 0),
        this.state === "finished" && this.holdTime === null && (this.currentTime = a);
        let lt = this.currentTime
          , dt = o;
        if ($) {
            const pt = Math.min(this.currentTime, a) / h;
            let gt = Math.floor(pt)
              , wt = pt % 1;
            !wt && pt >= 1 && (wt = 1),
            wt === 1 && gt--,
            gt = Math.min(gt, $ + 1),
            !!(gt % 2) && (_e === "reverse" ? (wt = 1 - wt,
            tt && (wt -= tt / h)) : _e === "mirror" && (dt = d)),
            lt = clamp$1(0, 1, wt) * h
        }
        const ot = nt ? {
            done: !1,
            value: _[0]
        } : dt.next(lt);
        c && (ot.value = c(ot.value));
        let {done: at} = ot;
        !nt && g !== null && (at = this.playbackSpeed >= 0 ? this.currentTime >= a : this.currentTime <= 0);
        const ht = this.holdTime === null && (this.state === "finished" || this.state === "running" && at);
        return ht && rt !== inertia && (ot.value = getFinalKeyframe$1(_, this.options, it, this.speed)),
        et && et(ot.value),
        ht && this.finish(),
        ot
    }
    then(e, i) {
        return this.finished.then(e, i)
    }
    get duration() {
        return millisecondsToSeconds(this.calculatedDuration)
    }
    get time() {
        return millisecondsToSeconds(this.currentTime)
    }
    set time(e) {
        var i;
        e = secondsToMilliseconds(e),
        this.currentTime = e,
        this.startTime === null || this.holdTime !== null || this.playbackSpeed === 0 ? this.holdTime = e : this.driver && (this.startTime = this.driver.now() - e / this.playbackSpeed),
        (i = this.driver) == null || i.start(!1)
    }
    get speed() {
        return this.playbackSpeed
    }
    set speed(e) {
        this.updateTime(time.now());
        const i = this.playbackSpeed !== e;
        this.playbackSpeed = e,
        i && (this.time = millisecondsToSeconds(this.currentTime))
    }
    play() {
        var a, c;
        if (this.isStopped)
            return;
        const {driver: e=frameloopDriver, startTime: i} = this.options;
        this.driver || (this.driver = e(d => this.tick(d))),
        (c = (a = this.options).onPlay) == null || c.call(a);
        const o = this.driver.now();
        this.state === "finished" ? (this.updateFinished(),
        this.startTime = o) : this.holdTime !== null ? this.startTime = o - this.holdTime : this.startTime || (this.startTime = i ?? o),
        this.state === "finished" && this.speed < 0 && (this.startTime += this.calculatedDuration),
        this.holdTime = null,
        this.state = "running",
        this.driver.start()
    }
    pause() {
        this.state = "paused",
        this.updateTime(time.now()),
        this.holdTime = this.currentTime
    }
    complete() {
        this.state !== "running" && this.play(),
        this.state = "finished",
        this.holdTime = null
    }
    finish() {
        var e, i;
        this.notifyFinished(),
        this.teardown(),
        this.state = "finished",
        (i = (e = this.options).onComplete) == null || i.call(e)
    }
    cancel() {
        var e, i;
        this.holdTime = null,
        this.startTime = 0,
        this.tick(0),
        this.teardown(),
        (i = (e = this.options).onCancel) == null || i.call(e)
    }
    teardown() {
        this.state = "idle",
        this.stopDriver(),
        this.startTime = this.holdTime = null
    }
    stopDriver() {
        this.driver && (this.driver.stop(),
        this.driver = void 0)
    }
    sample(e) {
        return this.startTime = 0,
        this.tick(e, !0)
    }
    attachTimeline(e) {
        var i;
        return this.options.allowFlatten && (this.options.type = "keyframes",
        this.options.ease = "linear",
        this.initAnimation()),
        (i = this.driver) == null || i.stop(),
        e.observe(this)
    }
}
function fillWildcards(s) {
    for (let e = 1; e < s.length; e++)
        s[e] ?? (s[e] = s[e - 1])
}
const radToDeg = s => s * 180 / Math.PI
  , rotate = s => {
    const e = radToDeg(Math.atan2(s[1], s[0]));
    return rebaseAngle(e)
}
  , matrix2dParsers = {
    x: 4,
    y: 5,
    translateX: 4,
    translateY: 5,
    scaleX: 0,
    scaleY: 3,
    scale: s => (Math.abs(s[0]) + Math.abs(s[3])) / 2,
    rotate,
    rotateZ: rotate,
    skewX: s => radToDeg(Math.atan(s[1])),
    skewY: s => radToDeg(Math.atan(s[2])),
    skew: s => (Math.abs(s[1]) + Math.abs(s[2])) / 2
}
  , rebaseAngle = s => (s = s % 360,
s < 0 && (s += 360),
s)
  , rotateZ = rotate
  , scaleX = s => Math.sqrt(s[0] * s[0] + s[1] * s[1])
  , scaleY = s => Math.sqrt(s[4] * s[4] + s[5] * s[5])
  , matrix3dParsers = {
    x: 12,
    y: 13,
    z: 14,
    translateX: 12,
    translateY: 13,
    translateZ: 14,
    scaleX,
    scaleY,
    scale: s => (scaleX(s) + scaleY(s)) / 2,
    rotateX: s => rebaseAngle(radToDeg(Math.atan2(s[6], s[5]))),
    rotateY: s => rebaseAngle(radToDeg(Math.atan2(-s[2], s[0]))),
    rotateZ,
    rotate: rotateZ,
    skewX: s => radToDeg(Math.atan(s[4])),
    skewY: s => radToDeg(Math.atan(s[1])),
    skew: s => (Math.abs(s[1]) + Math.abs(s[4])) / 2
};
function defaultTransformValue(s) {
    return s.includes("scale") ? 1 : 0
}
function parseValueFromTransform(s, e) {
    if (!s || s === "none")
        return defaultTransformValue(e);
    const i = s.match(/^matrix3d\(([-\d.e\s,]+)\)$/u);
    let o, a;
    if (i)
        o = matrix3dParsers,
        a = i;
    else {
        const h = s.match(/^matrix\(([-\d.e\s,]+)\)$/u);
        o = matrix2dParsers,
        a = h
    }
    if (!a)
        return defaultTransformValue(e);
    const c = o[e]
      , d = a[1].split(",").map(convertTransformToNumber);
    return typeof c == "function" ? c(d) : d[c]
}
const readTransformValue = (s, e) => {
    const {transform: i="none"} = getComputedStyle(s);
    return parseValueFromTransform(i, e)
}
;
function convertTransformToNumber(s) {
    return parseFloat(s.trim())
}
const transformPropOrder = ["transformPerspective", "x", "y", "z", "translateX", "translateY", "translateZ", "scale", "scaleX", "scaleY", "rotate", "rotateX", "rotateY", "rotateZ", "skew", "skewX", "skewY"]
  , transformProps = new Set(transformPropOrder)
  , isNumOrPxType = s => s === number || s === px
  , transformKeys = new Set(["x", "y", "z"])
  , nonTranslationalTransformKeys = transformPropOrder.filter(s => !transformKeys.has(s));
function removeNonTranslationalTransform(s) {
    const e = [];
    return nonTranslationalTransformKeys.forEach(i => {
        const o = s.getValue(i);
        o !== void 0 && (e.push([i, o.get()]),
        o.set(i.startsWith("scale") ? 1 : 0))
    }
    ),
    e
}
const positionalValues = {
    width: ({x: s}, {paddingLeft: e="0", paddingRight: i="0"}) => s.max - s.min - parseFloat(e) - parseFloat(i),
    height: ({y: s}, {paddingTop: e="0", paddingBottom: i="0"}) => s.max - s.min - parseFloat(e) - parseFloat(i),
    top: (s, {top: e}) => parseFloat(e),
    left: (s, {left: e}) => parseFloat(e),
    bottom: ({y: s}, {top: e}) => parseFloat(e) + (s.max - s.min),
    right: ({x: s}, {left: e}) => parseFloat(e) + (s.max - s.min),
    x: (s, {transform: e}) => parseValueFromTransform(e, "x"),
    y: (s, {transform: e}) => parseValueFromTransform(e, "y")
};
positionalValues.translateX = positionalValues.x;
positionalValues.translateY = positionalValues.y;
const toResolve = new Set;
let isScheduled = !1
  , anyNeedsMeasurement = !1
  , isForced = !1;
function measureAllKeyframes() {
    if (anyNeedsMeasurement) {
        const s = Array.from(toResolve).filter(o => o.needsMeasurement)
          , e = new Set(s.map(o => o.element))
          , i = new Map;
        e.forEach(o => {
            const a = removeNonTranslationalTransform(o);
            a.length && (i.set(o, a),
            o.render())
        }
        ),
        s.forEach(o => o.measureInitialState()),
        e.forEach(o => {
            o.render();
            const a = i.get(o);
            a && a.forEach( ([c,d]) => {
                var h;
                (h = o.getValue(c)) == null || h.set(d)
            }
            )
        }
        ),
        s.forEach(o => o.measureEndState()),
        s.forEach(o => {
            o.suspendedScrollY !== void 0 && window.scrollTo(0, o.suspendedScrollY)
        }
        )
    }
    anyNeedsMeasurement = !1,
    isScheduled = !1,
    toResolve.forEach(s => s.complete(isForced)),
    toResolve.clear()
}
function readAllKeyframes() {
    toResolve.forEach(s => {
        s.readKeyframes(),
        s.needsMeasurement && (anyNeedsMeasurement = !0)
    }
    )
}
function flushKeyframeResolvers() {
    isForced = !0,
    readAllKeyframes(),
    measureAllKeyframes(),
    isForced = !1
}
class KeyframeResolver {
    constructor(e, i, o, a, c, d=!1) {
        this.state = "pending",
        this.isAsync = !1,
        this.needsMeasurement = !1,
        this.unresolvedKeyframes = [...e],
        this.onComplete = i,
        this.name = o,
        this.motionValue = a,
        this.element = c,
        this.isAsync = d
    }
    scheduleResolve() {
        this.state = "scheduled",
        this.isAsync ? (toResolve.add(this),
        isScheduled || (isScheduled = !0,
        frame.read(readAllKeyframes),
        frame.resolveKeyframes(measureAllKeyframes))) : (this.readKeyframes(),
        this.complete())
    }
    readKeyframes() {
        const {unresolvedKeyframes: e, name: i, element: o, motionValue: a} = this;
        if (e[0] === null) {
            const c = a == null ? void 0 : a.get()
              , d = e[e.length - 1];
            if (c !== void 0)
                e[0] = c;
            else if (o && i) {
                const h = o.readValue(i, d);
                h != null && (e[0] = h)
            }
            e[0] === void 0 && (e[0] = d),
            a && c === void 0 && a.set(e[0])
        }
        fillWildcards(e)
    }
    setFinalKeyframe() {}
    measureInitialState() {}
    renderEndStyles() {}
    measureEndState() {}
    complete(e=!1) {
        this.state = "complete",
        this.onComplete(this.unresolvedKeyframes, this.finalKeyframe, e),
        toResolve.delete(this)
    }
    cancel() {
        this.state === "scheduled" && (toResolve.delete(this),
        this.state = "pending")
    }
    resume() {
        this.state === "pending" && this.scheduleResolve()
    }
}
const isCSSVar = s => s.startsWith("--");
function setStyle(s, e, i) {
    isCSSVar(e) ? s.style.setProperty(e, i) : s.style[e] = i
}
const supportsScrollTimeline = memo( () => window.ScrollTimeline !== void 0)
  , supportsFlags = {};
function memoSupports(s, e) {
    const i = memo(s);
    return () => supportsFlags[e] ?? i()
}
const supportsLinearEasing = memoSupports( () => {
    try {
        document.createElement("div").animate({
            opacity: 0
        }, {
            easing: "linear(0, 1)"
        })
    } catch {
        return !1
    }
    return !0
}
, "linearEasing")
  , cubicBezierAsString = ([s,e,i,o]) => `cubic-bezier(${s}, ${e}, ${i}, ${o})`
  , supportedWaapiEasing = {
    linear: "linear",
    ease: "ease",
    easeIn: "ease-in",
    easeOut: "ease-out",
    easeInOut: "ease-in-out",
    circIn: cubicBezierAsString([0, .65, .55, 1]),
    circOut: cubicBezierAsString([.55, 0, 1, .45]),
    backIn: cubicBezierAsString([.31, .01, .66, -.59]),
    backOut: cubicBezierAsString([.33, 1.53, .69, .99])
};
function mapEasingToNativeEasing(s, e) {
    if (s)
        return typeof s == "function" ? supportsLinearEasing() ? generateLinearEasing(s, e) : "ease-out" : isBezierDefinition(s) ? cubicBezierAsString(s) : Array.isArray(s) ? s.map(i => mapEasingToNativeEasing(i, e) || supportedWaapiEasing.easeOut) : supportedWaapiEasing[s]
}
function startWaapiAnimation(s, e, i, {delay: o=0, duration: a=300, repeat: c=0, repeatType: d="loop", ease: h="easeOut", times: g}={}, b=void 0) {
    const _ = {
        [e]: i
    };
    g && (_.offset = g);
    const $ = mapEasingToNativeEasing(h, a);
    Array.isArray($) && (_.easing = $);
    const _e = {
        delay: o,
        duration: a,
        easing: Array.isArray($) ? "linear" : $,
        fill: "both",
        iterations: c + 1,
        direction: d === "reverse" ? "alternate" : "normal"
    };
    return b && (_e.pseudoElement = b),
    s.animate(_, _e)
}
function isGenerator(s) {
    return typeof s == "function" && "applyToOptions"in s
}
function applyGeneratorOptions({type: s, ...e}) {
    return isGenerator(s) && supportsLinearEasing() ? s.applyToOptions(e) : (e.duration ?? (e.duration = 300),
    e.ease ?? (e.ease = "easeOut"),
    e)
}
class NativeAnimation extends WithPromise {
    constructor(e) {
        if (super(),
        this.finishedTime = null,
        this.isStopped = !1,
        !e)
            return;
        const {element: i, name: o, keyframes: a, pseudoElement: c, allowFlatten: d=!1, finalKeyframe: h, onComplete: g} = e;
        this.isPseudoElement = !!c,
        this.allowFlatten = d,
        this.options = e,
        invariant(typeof e.type != "string");
        const b = applyGeneratorOptions(e);
        this.animation = startWaapiAnimation(i, o, a, b, c),
        b.autoplay === !1 && this.animation.pause(),
        this.animation.onfinish = () => {
            if (this.finishedTime = this.time,
            !c) {
                const _ = getFinalKeyframe$1(a, this.options, h, this.speed);
                this.updateMotionValue ? this.updateMotionValue(_) : setStyle(i, o, _),
                this.animation.cancel()
            }
            g == null || g(),
            this.notifyFinished()
        }
    }
    play() {
        this.isStopped || (this.animation.play(),
        this.state === "finished" && this.updateFinished())
    }
    pause() {
        this.animation.pause()
    }
    complete() {
        var e, i;
        (i = (e = this.animation).finish) == null || i.call(e)
    }
    cancel() {
        try {
            this.animation.cancel()
        } catch {}
    }
    stop() {
        if (this.isStopped)
            return;
        this.isStopped = !0;
        const {state: e} = this;
        e === "idle" || e === "finished" || (this.updateMotionValue ? this.updateMotionValue() : this.commitStyles(),
        this.isPseudoElement || this.cancel())
    }
    commitStyles() {
        var e, i;
        this.isPseudoElement || (i = (e = this.animation).commitStyles) == null || i.call(e)
    }
    get duration() {
        var i, o;
        const e = ((o = (i = this.animation.effect) == null ? void 0 : i.getComputedTiming) == null ? void 0 : o.call(i).duration) || 0;
        return millisecondsToSeconds(Number(e))
    }
    get time() {
        return millisecondsToSeconds(Number(this.animation.currentTime) || 0)
    }
    set time(e) {
        this.finishedTime = null,
        this.animation.currentTime = secondsToMilliseconds(e)
    }
    get speed() {
        return this.animation.playbackRate
    }
    set speed(e) {
        e < 0 && (this.finishedTime = null),
        this.animation.playbackRate = e
    }
    get state() {
        return this.finishedTime !== null ? "finished" : this.animation.playState
    }
    get startTime() {
        return Number(this.animation.startTime)
    }
    set startTime(e) {
        this.animation.startTime = e
    }
    attachTimeline({timeline: e, observe: i}) {
        var o;
        return this.allowFlatten && ((o = this.animation.effect) == null || o.updateTiming({
            easing: "linear"
        })),
        this.animation.onfinish = null,
        e && supportsScrollTimeline() ? (this.animation.timeline = e,
        noop) : i(this)
    }
}
const unsupportedEasingFunctions = {
    anticipate,
    backInOut,
    circInOut
};
function isUnsupportedEase(s) {
    return s in unsupportedEasingFunctions
}
function replaceStringEasing(s) {
    typeof s.ease == "string" && isUnsupportedEase(s.ease) && (s.ease = unsupportedEasingFunctions[s.ease])
}
const sampleDelta = 10;
class NativeAnimationExtended extends NativeAnimation {
    constructor(e) {
        replaceStringEasing(e),
        replaceTransitionType(e),
        super(e),
        e.startTime && (this.startTime = e.startTime),
        this.options = e
    }
    updateMotionValue(e) {
        const {motionValue: i, onUpdate: o, onComplete: a, element: c, ...d} = this.options;
        if (!i)
            return;
        if (e !== void 0) {
            i.set(e);
            return
        }
        const h = new JSAnimation({
            ...d,
            autoplay: !1
        })
          , g = secondsToMilliseconds(this.finishedTime ?? this.time);
        i.setWithVelocity(h.sample(g - sampleDelta).value, h.sample(g).value, sampleDelta),
        h.stop()
    }
}
const isAnimatable = (s, e) => e === "zIndex" ? !1 : !!(typeof s == "number" || Array.isArray(s) || typeof s == "string" && (complex.test(s) || s === "0") && !s.startsWith("url("));
function hasKeyframesChanged(s) {
    const e = s[0];
    if (s.length === 1)
        return !0;
    for (let i = 0; i < s.length; i++)
        if (s[i] !== e)
            return !0
}
function canAnimate(s, e, i, o) {
    const a = s[0];
    if (a === null)
        return !1;
    if (e === "display" || e === "visibility")
        return !0;
    const c = s[s.length - 1]
      , d = isAnimatable(a, e)
      , h = isAnimatable(c, e);
    return !d || !h ? !1 : hasKeyframesChanged(s) || (i === "spring" || isGenerator(i)) && o
}
function isHTMLElement(s) {
    return isObject(s) && "offsetHeight"in s
}
const acceleratedValues = new Set(["opacity", "clipPath", "filter", "transform"])
  , supportsWaapi = memo( () => Object.hasOwnProperty.call(Element.prototype, "animate"));
function supportsBrowserAnimation(s) {
    var b;
    const {motionValue: e, name: i, repeatDelay: o, repeatType: a, damping: c, type: d} = s;
    if (!isHTMLElement((b = e == null ? void 0 : e.owner) == null ? void 0 : b.current))
        return !1;
    const {onUpdate: h, transformTemplate: g} = e.owner.getProps();
    return supportsWaapi() && i && acceleratedValues.has(i) && (i !== "transform" || !g) && !h && !o && a !== "mirror" && c !== 0 && d !== "inertia"
}
const MAX_RESOLVE_DELAY = 40;
class AsyncMotionValueAnimation extends WithPromise {
    constructor({autoplay: e=!0, delay: i=0, type: o="keyframes", repeat: a=0, repeatDelay: c=0, repeatType: d="loop", keyframes: h, name: g, motionValue: b, element: _, ...$}) {
        var rt;
        super(),
        this.stop = () => {
            var et, it;
            this._animation && (this._animation.stop(),
            (et = this.stopTimeline) == null || et.call(this)),
            (it = this.keyframeResolver) == null || it.cancel()
        }
        ,
        this.createdAt = time.now();
        const _e = {
            autoplay: e,
            delay: i,
            type: o,
            repeat: a,
            repeatDelay: c,
            repeatType: d,
            name: g,
            motionValue: b,
            element: _,
            ...$
        }
          , tt = (_ == null ? void 0 : _.KeyframeResolver) || KeyframeResolver;
        this.keyframeResolver = new tt(h, (et, it, st) => this.onKeyframesResolved(et, it, _e, !st),g,b,_),
        (rt = this.keyframeResolver) == null || rt.scheduleResolve()
    }
    onKeyframesResolved(e, i, o, a) {
        this.keyframeResolver = void 0;
        const {name: c, type: d, velocity: h, delay: g, isHandoff: b, onUpdate: _} = o;
        this.resolvedAt = time.now(),
        canAnimate(e, c, d, h) || ((MotionGlobalConfig.instantAnimations || !g) && (_ == null || _(getFinalKeyframe$1(e, o, i))),
        e[0] = e[e.length - 1],
        o.duration = 0,
        o.repeat = 0);
        const _e = {
            startTime: a ? this.resolvedAt ? this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY ? this.resolvedAt : this.createdAt : this.createdAt : void 0,
            finalKeyframe: i,
            ...o,
            keyframes: e
        }
          , tt = !b && supportsBrowserAnimation(_e) ? new NativeAnimationExtended({
            ..._e,
            element: _e.motionValue.owner.current
        }) : new JSAnimation(_e);
        tt.finished.then( () => this.notifyFinished()).catch(noop),
        this.pendingTimeline && (this.stopTimeline = tt.attachTimeline(this.pendingTimeline),
        this.pendingTimeline = void 0),
        this._animation = tt
    }
    get finished() {
        return this._animation ? this.animation.finished : this._finished
    }
    then(e, i) {
        return this.finished.finally(e).then( () => {}
        )
    }
    get animation() {
        var e;
        return this._animation || ((e = this.keyframeResolver) == null || e.resume(),
        flushKeyframeResolvers()),
        this._animation
    }
    get duration() {
        return this.animation.duration
    }
    get time() {
        return this.animation.time
    }
    set time(e) {
        this.animation.time = e
    }
    get speed() {
        return this.animation.speed
    }
    get state() {
        return this.animation.state
    }
    set speed(e) {
        this.animation.speed = e
    }
    get startTime() {
        return this.animation.startTime
    }
    attachTimeline(e) {
        return this._animation ? this.stopTimeline = this.animation.attachTimeline(e) : this.pendingTimeline = e,
        () => this.stop()
    }
    play() {
        this.animation.play()
    }
    pause() {
        this.animation.pause()
    }
    complete() {
        this.animation.complete()
    }
    cancel() {
        var e;
        this._animation && this.animation.cancel(),
        (e = this.keyframeResolver) == null || e.cancel()
    }
}
const splitCSSVariableRegex = /^var\(--(?:([\w-]+)|([\w-]+), ?([a-zA-Z\d ()%#.,-]+))\)/u;
function parseCSSVariable(s) {
    const e = splitCSSVariableRegex.exec(s);
    if (!e)
        return [, ];
    const [,i,o,a] = e;
    return [`--${i ?? o}`, a]
}
function getVariableValue(s, e, i=1) {
    const [o,a] = parseCSSVariable(s);
    if (!o)
        return;
    const c = window.getComputedStyle(e).getPropertyValue(o);
    if (c) {
        const d = c.trim();
        return isNumericalString(d) ? parseFloat(d) : d
    }
    return isCSSVariableToken(a) ? getVariableValue(a, e, i + 1) : a
}
function getValueTransition(s, e) {
    return (s == null ? void 0 : s[e]) ?? (s == null ? void 0 : s.default) ?? s
}
const positionalKeys = new Set(["width", "height", "top", "left", "right", "bottom", ...transformPropOrder])
  , auto = {
    test: s => s === "auto",
    parse: s => s
}
  , testValueType = s => e => e.test(s)
  , dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto]
  , findDimensionValueType = s => dimensionValueTypes.find(testValueType(s));
function isNone(s) {
    return typeof s == "number" ? s === 0 : s !== null ? s === "none" || s === "0" || isZeroValueString(s) : !0
}
const maxDefaults = new Set(["brightness", "contrast", "saturate", "opacity"]);
function applyDefaultFilter(s) {
    const [e,i] = s.slice(0, -1).split("(");
    if (e === "drop-shadow")
        return s;
    const [o] = i.match(floatRegex) || [];
    if (!o)
        return s;
    const a = i.replace(o, "");
    let c = maxDefaults.has(e) ? 1 : 0;
    return o !== i && (c *= 100),
    e + "(" + c + a + ")"
}
const functionRegex = /\b([a-z-]*)\(.*?\)/gu
  , filter = {
    ...complex,
    getAnimatableNone: s => {
        const e = s.match(functionRegex);
        return e ? e.map(applyDefaultFilter).join(" ") : s
    }
}
  , int = {
    ...number,
    transform: Math.round
}
  , transformValueTypes = {
    rotate: degrees,
    rotateX: degrees,
    rotateY: degrees,
    rotateZ: degrees,
    scale,
    scaleX: scale,
    scaleY: scale,
    scaleZ: scale,
    skew: degrees,
    skewX: degrees,
    skewY: degrees,
    distance: px,
    translateX: px,
    translateY: px,
    translateZ: px,
    x: px,
    y: px,
    z: px,
    perspective: px,
    transformPerspective: px,
    opacity: alpha,
    originX: progressPercentage,
    originY: progressPercentage,
    originZ: px
}
  , numberValueTypes = {
    borderWidth: px,
    borderTopWidth: px,
    borderRightWidth: px,
    borderBottomWidth: px,
    borderLeftWidth: px,
    borderRadius: px,
    radius: px,
    borderTopLeftRadius: px,
    borderTopRightRadius: px,
    borderBottomRightRadius: px,
    borderBottomLeftRadius: px,
    width: px,
    maxWidth: px,
    height: px,
    maxHeight: px,
    top: px,
    right: px,
    bottom: px,
    left: px,
    padding: px,
    paddingTop: px,
    paddingRight: px,
    paddingBottom: px,
    paddingLeft: px,
    margin: px,
    marginTop: px,
    marginRight: px,
    marginBottom: px,
    marginLeft: px,
    backgroundPositionX: px,
    backgroundPositionY: px,
    ...transformValueTypes,
    zIndex: int,
    fillOpacity: alpha,
    strokeOpacity: alpha,
    numOctaves: int
}
  , defaultValueTypes = {
    ...numberValueTypes,
    color,
    backgroundColor: color,
    outlineColor: color,
    fill: color,
    stroke: color,
    borderColor: color,
    borderTopColor: color,
    borderRightColor: color,
    borderBottomColor: color,
    borderLeftColor: color,
    filter,
    WebkitFilter: filter
}
  , getDefaultValueType = s => defaultValueTypes[s];
function getAnimatableNone(s, e) {
    let i = getDefaultValueType(s);
    return i !== filter && (i = complex),
    i.getAnimatableNone ? i.getAnimatableNone(e) : void 0
}
const invalidTemplates = new Set(["auto", "none", "0"]);
function makeNoneKeyframesAnimatable(s, e, i) {
    let o = 0, a;
    for (; o < s.length && !a; ) {
        const c = s[o];
        typeof c == "string" && !invalidTemplates.has(c) && analyseComplexValue(c).values.length && (a = s[o]),
        o++
    }
    if (a && i)
        for (const c of e)
            s[c] = getAnimatableNone(i, a)
}
class DOMKeyframesResolver extends KeyframeResolver {
    constructor(e, i, o, a, c) {
        super(e, i, o, a, c, !0)
    }
    readKeyframes() {
        const {unresolvedKeyframes: e, element: i, name: o} = this;
        if (!i || !i.current)
            return;
        super.readKeyframes();
        for (let g = 0; g < e.length; g++) {
            let b = e[g];
            if (typeof b == "string" && (b = b.trim(),
            isCSSVariableToken(b))) {
                const _ = getVariableValue(b, i.current);
                _ !== void 0 && (e[g] = _),
                g === e.length - 1 && (this.finalKeyframe = b)
            }
        }
        if (this.resolveNoneKeyframes(),
        !positionalKeys.has(o) || e.length !== 2)
            return;
        const [a,c] = e
          , d = findDimensionValueType(a)
          , h = findDimensionValueType(c);
        if (d !== h)
            if (isNumOrPxType(d) && isNumOrPxType(h))
                for (let g = 0; g < e.length; g++) {
                    const b = e[g];
                    typeof b == "string" && (e[g] = parseFloat(b))
                }
            else
                positionalValues[o] && (this.needsMeasurement = !0)
    }
    resolveNoneKeyframes() {
        const {unresolvedKeyframes: e, name: i} = this
          , o = [];
        for (let a = 0; a < e.length; a++)
            (e[a] === null || isNone(e[a])) && o.push(a);
        o.length && makeNoneKeyframesAnimatable(e, o, i)
    }
    measureInitialState() {
        const {element: e, unresolvedKeyframes: i, name: o} = this;
        if (!e || !e.current)
            return;
        o === "height" && (this.suspendedScrollY = window.pageYOffset),
        this.measuredOrigin = positionalValues[o](e.measureViewportBox(), window.getComputedStyle(e.current)),
        i[0] = this.measuredOrigin;
        const a = i[i.length - 1];
        a !== void 0 && e.getValue(o, a).jump(a, !1)
    }
    measureEndState() {
        var h;
        const {element: e, name: i, unresolvedKeyframes: o} = this;
        if (!e || !e.current)
            return;
        const a = e.getValue(i);
        a && a.jump(this.measuredOrigin, !1);
        const c = o.length - 1
          , d = o[c];
        o[c] = positionalValues[i](e.measureViewportBox(), window.getComputedStyle(e.current)),
        d !== null && this.finalKeyframe === void 0 && (this.finalKeyframe = d),
        (h = this.removedTransforms) != null && h.length && this.removedTransforms.forEach( ([g,b]) => {
            e.getValue(g).set(b)
        }
        ),
        this.resolveNoneKeyframes()
    }
}
function resolveElements(s, e, i) {
    if (s instanceof EventTarget)
        return [s];
    if (typeof s == "string") {
        const a = document.querySelectorAll(s);
        return a ? Array.from(a) : []
    }
    return Array.from(s)
}
const getValueAsType = (s, e) => e && typeof s == "number" ? e.transform(s) : s
  , MAX_VELOCITY_DELTA = 30
  , isFloat = s => !isNaN(parseFloat(s))
  , collectMotionValues = {
    current: void 0
};
class MotionValue {
    constructor(e, i={}) {
        this.canTrackVelocity = null,
        this.events = {},
        this.updateAndNotify = (o, a=!0) => {
            var d, h;
            const c = time.now();
            if (this.updatedAt !== c && this.setPrevFrameValue(),
            this.prev = this.current,
            this.setCurrent(o),
            this.current !== this.prev && ((d = this.events.change) == null || d.notify(this.current),
            this.dependents))
                for (const g of this.dependents)
                    g.dirty();
            a && ((h = this.events.renderRequest) == null || h.notify(this.current))
        }
        ,
        this.hasAnimated = !1,
        this.setCurrent(e),
        this.owner = i.owner
    }
    setCurrent(e) {
        this.current = e,
        this.updatedAt = time.now(),
        this.canTrackVelocity === null && e !== void 0 && (this.canTrackVelocity = isFloat(this.current))
    }
    setPrevFrameValue(e=this.current) {
        this.prevFrameValue = e,
        this.prevUpdatedAt = this.updatedAt
    }
    onChange(e) {
        return this.on("change", e)
    }
    on(e, i) {
        this.events[e] || (this.events[e] = new SubscriptionManager);
        const o = this.events[e].add(i);
        return e === "change" ? () => {
            o(),
            frame.read( () => {
                this.events.change.getSize() || this.stop()
            }
            )
        }
        : o
    }
    clearListeners() {
        for (const e in this.events)
            this.events[e].clear()
    }
    attach(e, i) {
        this.passiveEffect = e,
        this.stopPassiveEffect = i
    }
    set(e, i=!0) {
        !i || !this.passiveEffect ? this.updateAndNotify(e, i) : this.passiveEffect(e, this.updateAndNotify)
    }
    setWithVelocity(e, i, o) {
        this.set(i),
        this.prev = void 0,
        this.prevFrameValue = e,
        this.prevUpdatedAt = this.updatedAt - o
    }
    jump(e, i=!0) {
        this.updateAndNotify(e),
        this.prev = e,
        this.prevUpdatedAt = this.prevFrameValue = void 0,
        i && this.stop(),
        this.stopPassiveEffect && this.stopPassiveEffect()
    }
    dirty() {
        var e;
        (e = this.events.change) == null || e.notify(this.current)
    }
    addDependent(e) {
        this.dependents || (this.dependents = new Set),
        this.dependents.add(e)
    }
    removeDependent(e) {
        this.dependents && this.dependents.delete(e)
    }
    get() {
        return collectMotionValues.current && collectMotionValues.current.push(this),
        this.current
    }
    getPrevious() {
        return this.prev
    }
    getVelocity() {
        const e = time.now();
        if (!this.canTrackVelocity || this.prevFrameValue === void 0 || e - this.updatedAt > MAX_VELOCITY_DELTA)
            return 0;
        const i = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);
        return velocityPerSecond(parseFloat(this.current) - parseFloat(this.prevFrameValue), i)
    }
    start(e) {
        return this.stop(),
        new Promise(i => {
            this.hasAnimated = !0,
            this.animation = e(i),
            this.events.animationStart && this.events.animationStart.notify()
        }
        ).then( () => {
            this.events.animationComplete && this.events.animationComplete.notify(),
            this.clearAnimation()
        }
        )
    }
    stop() {
        this.animation && (this.animation.stop(),
        this.events.animationCancel && this.events.animationCancel.notify()),
        this.clearAnimation()
    }
    isAnimating() {
        return !!this.animation
    }
    clearAnimation() {
        delete this.animation
    }
    destroy() {
        var e, i;
        (e = this.dependents) == null || e.clear(),
        (i = this.events.destroy) == null || i.notify(),
        this.clearListeners(),
        this.stop(),
        this.stopPassiveEffect && this.stopPassiveEffect()
    }
}
function motionValue(s, e) {
    return new MotionValue(s,e)
}
const {schedule: microtask, cancel: cancelMicrotask} = createRenderBatcher(queueMicrotask, !1)
  , isDragging = {
    x: !1,
    y: !1
};
function isDragActive() {
    return isDragging.x || isDragging.y
}
function setDragLock(s) {
    return s === "x" || s === "y" ? isDragging[s] ? null : (isDragging[s] = !0,
    () => {
        isDragging[s] = !1
    }
    ) : isDragging.x || isDragging.y ? null : (isDragging.x = isDragging.y = !0,
    () => {
        isDragging.x = isDragging.y = !1
    }
    )
}
function setupGesture(s, e) {
    const i = resolveElements(s)
      , o = new AbortController
      , a = {
        passive: !0,
        ...e,
        signal: o.signal
    };
    return [i, a, () => o.abort()]
}
function isValidHover(s) {
    return !(s.pointerType === "touch" || isDragActive())
}
function hover(s, e, i={}) {
    const [o,a,c] = setupGesture(s, i)
      , d = h => {
        if (!isValidHover(h))
            return;
        const {target: g} = h
          , b = e(g, h);
        if (typeof b != "function" || !g)
            return;
        const _ = $ => {
            isValidHover($) && (b($),
            g.removeEventListener("pointerleave", _))
        }
        ;
        g.addEventListener("pointerleave", _, a)
    }
    ;
    return o.forEach(h => {
        h.addEventListener("pointerenter", d, a)
    }
    ),
    c
}
const isNodeOrChild = (s, e) => e ? s === e ? !0 : isNodeOrChild(s, e.parentElement) : !1
  , isPrimaryPointer = s => s.pointerType === "mouse" ? typeof s.button != "number" || s.button <= 0 : s.isPrimary !== !1
  , focusableElements = new Set(["BUTTON", "INPUT", "SELECT", "TEXTAREA", "A"]);
function isElementKeyboardAccessible(s) {
    return focusableElements.has(s.tagName) || s.tabIndex !== -1
}
const isPressing = new WeakSet;
function filterEvents(s) {
    return e => {
        e.key === "Enter" && s(e)
    }
}
function firePointerEvent(s, e) {
    s.dispatchEvent(new PointerEvent("pointer" + e,{
        isPrimary: !0,
        bubbles: !0
    }))
}
const enableKeyboardPress = (s, e) => {
    const i = s.currentTarget;
    if (!i)
        return;
    const o = filterEvents( () => {
        if (isPressing.has(i))
            return;
        firePointerEvent(i, "down");
        const a = filterEvents( () => {
            firePointerEvent(i, "up")
        }
        )
          , c = () => firePointerEvent(i, "cancel");
        i.addEventListener("keyup", a, e),
        i.addEventListener("blur", c, e)
    }
    );
    i.addEventListener("keydown", o, e),
    i.addEventListener("blur", () => i.removeEventListener("keydown", o), e)
}
;
function isValidPressEvent(s) {
    return isPrimaryPointer(s) && !isDragActive()
}
function press(s, e, i={}) {
    const [o,a,c] = setupGesture(s, i)
      , d = h => {
        const g = h.currentTarget;
        if (!isValidPressEvent(h))
            return;
        isPressing.add(g);
        const b = e(g, h)
          , _ = (tt, rt) => {
            window.removeEventListener("pointerup", $),
            window.removeEventListener("pointercancel", _e),
            isPressing.has(g) && isPressing.delete(g),
            isValidPressEvent(tt) && typeof b == "function" && b(tt, {
                success: rt
            })
        }
          , $ = tt => {
            _(tt, g === window || g === document || i.useGlobalTarget || isNodeOrChild(g, tt.target))
        }
          , _e = tt => {
            _(tt, !1)
        }
        ;
        window.addEventListener("pointerup", $, a),
        window.addEventListener("pointercancel", _e, a)
    }
    ;
    return o.forEach(h => {
        (i.useGlobalTarget ? window : h).addEventListener("pointerdown", d, a),
        isHTMLElement(h) && (h.addEventListener("focus", b => enableKeyboardPress(b, a)),
        !isElementKeyboardAccessible(h) && !h.hasAttribute("tabindex") && (h.tabIndex = 0))
    }
    ),
    c
}
function isSVGElement(s) {
    return isObject(s) && "ownerSVGElement"in s
}
function isSVGSVGElement(s) {
    return isSVGElement(s) && s.tagName === "svg"
}
function transform(...s) {
    const e = !Array.isArray(s[0])
      , i = e ? 0 : -1
      , o = s[0 + i]
      , a = s[1 + i]
      , c = s[2 + i]
      , d = s[3 + i]
      , h = interpolate(a, c, d);
    return e ? h(o) : h
}
const isMotionValue = s => !!(s && s.getVelocity);
function attachSpring(s, e, i) {
    const o = s.get();
    let a = null, c = o, d;
    const h = typeof o == "string" ? o.replace(/[\d.-]/g, "") : void 0
      , g = () => {
        a && (a.stop(),
        a = null)
    }
      , b = () => {
        g(),
        a = new JSAnimation({
            keyframes: [asNumber$1(s.get()), asNumber$1(c)],
            velocity: s.getVelocity(),
            type: "spring",
            restDelta: .001,
            restSpeed: .01,
            ...i,
            onUpdate: d
        })
    }
    ;
    s.attach( ($, _e) => (c = $,
    d = tt => _e(parseValue(tt, h)),
    frame.postRender(b),
    s.get()), g);
    let _;
    return isMotionValue(e) && (_ = e.on("change", $ => s.set(parseValue($, h))),
    s.on("destroy", _)),
    _
}
function parseValue(s, e) {
    return e ? s + e : s
}
function asNumber$1(s) {
    return typeof s == "number" ? s : parseFloat(s)
}
const valueTypes = [...dimensionValueTypes, color, complex]
  , findValueType = s => valueTypes.find(testValueType(s))
  , MotionConfigContext = reactExports.createContext({
    transformPagePoint: s => s,
    isStatic: !1,
    reducedMotion: "never"
});
class PopChildMeasure extends reactExports.Component {
    getSnapshotBeforeUpdate(e) {
        const i = this.props.childRef.current;
        if (i && e.isPresent && !this.props.isPresent) {
            const o = i.offsetParent
              , a = isHTMLElement(o) && o.offsetWidth || 0
              , c = this.props.sizeRef.current;
            c.height = i.offsetHeight || 0,
            c.width = i.offsetWidth || 0,
            c.top = i.offsetTop,
            c.left = i.offsetLeft,
            c.right = a - c.width - c.left
        }
        return null
    }
    componentDidUpdate() {}
    render() {
        return this.props.children
    }
}
function PopChild({children: s, isPresent: e, anchorX: i}) {
    const o = reactExports.useId()
      , a = reactExports.useRef(null)
      , c = reactExports.useRef({
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        right: 0
    })
      , {nonce: d} = reactExports.useContext(MotionConfigContext);
    return reactExports.useInsertionEffect( () => {
        const {width: h, height: g, top: b, left: _, right: $} = c.current;
        if (e || !a.current || !h || !g)
            return;
        const _e = i === "left" ? `left: ${_}` : `right: ${$}`;
        a.current.dataset.motionPopId = o;
        const tt = document.createElement("style");
        return d && (tt.nonce = d),
        document.head.appendChild(tt),
        tt.sheet && tt.sheet.insertRule(`
          [data-motion-pop-id="${o}"] {
            position: absolute !important;
            width: ${h}px !important;
            height: ${g}px !important;
            ${_e}px !important;
            top: ${b}px !important;
          }
        `),
        () => {
            document.head.contains(tt) && document.head.removeChild(tt)
        }
    }
    , [e]),
    jsxRuntimeExports.jsx(PopChildMeasure, {
        isPresent: e,
        childRef: a,
        sizeRef: c,
        children: reactExports.cloneElement(s, {
            ref: a
        })
    })
}
const PresenceChild = ({children: s, initial: e, isPresent: i, onExitComplete: o, custom: a, presenceAffectsLayout: c, mode: d, anchorX: h}) => {
    const g = useConstant(newChildrenMap)
      , b = reactExports.useId();
    let _ = !0
      , $ = reactExports.useMemo( () => (_ = !1,
    {
        id: b,
        initial: e,
        isPresent: i,
        custom: a,
        onExitComplete: _e => {
            g.set(_e, !0);
            for (const tt of g.values())
                if (!tt)
                    return;
            o && o()
        }
        ,
        register: _e => (g.set(_e, !1),
        () => g.delete(_e))
    }), [i, g, o]);
    return c && _ && ($ = {
        ...$
    }),
    reactExports.useMemo( () => {
        g.forEach( (_e, tt) => g.set(tt, !1))
    }
    , [i]),
    reactExports.useEffect( () => {
        !i && !g.size && o && o()
    }
    , [i]),
    d === "popLayout" && (s = jsxRuntimeExports.jsx(PopChild, {
        isPresent: i,
        anchorX: h,
        children: s
    })),
    jsxRuntimeExports.jsx(PresenceContext.Provider, {
        value: $,
        children: s
    })
}
;
function newChildrenMap() {
    return new Map
}
function usePresence(s=!0) {
    const e = reactExports.useContext(PresenceContext);
    if (e === null)
        return [!0, null];
    const {isPresent: i, onExitComplete: o, register: a} = e
      , c = reactExports.useId();
    reactExports.useEffect( () => {
        if (s)
            return a(c)
    }
    , [s]);
    const d = reactExports.useCallback( () => s && o && o(c), [c, o, s]);
    return !i && o ? [!1, d] : [!0]
}
const getChildKey = s => s.key || "";
function onlyElements(s) {
    const e = [];
    return reactExports.Children.forEach(s, i => {
        reactExports.isValidElement(i) && e.push(i)
    }
    ),
    e
}
const AnimatePresence = ({children: s, custom: e, initial: i=!0, onExitComplete: o, presenceAffectsLayout: a=!0, mode: c="sync", propagate: d=!1, anchorX: h="left"}) => {
    const [g,b] = usePresence(d)
      , _ = reactExports.useMemo( () => onlyElements(s), [s])
      , $ = d && !g ? [] : _.map(getChildKey)
      , _e = reactExports.useRef(!0)
      , tt = reactExports.useRef(_)
      , rt = useConstant( () => new Map)
      , [et,it] = reactExports.useState(_)
      , [st,nt] = reactExports.useState(_);
    useIsomorphicLayoutEffect$2( () => {
        _e.current = !1,
        tt.current = _;
        for (let ot = 0; ot < st.length; ot++) {
            const at = getChildKey(st[ot]);
            $.includes(at) ? rt.delete(at) : rt.get(at) !== !0 && rt.set(at, !1)
        }
    }
    , [st, $.length, $.join("-")]);
    const lt = [];
    if (_ !== et) {
        let ot = [..._];
        for (let at = 0; at < st.length; at++) {
            const ht = st[at]
              , pt = getChildKey(ht);
            $.includes(pt) || (ot.splice(at, 0, ht),
            lt.push(ht))
        }
        return c === "wait" && lt.length && (ot = lt),
        nt(onlyElements(ot)),
        it(_),
        null
    }
    const {forceRender: dt} = reactExports.useContext(LayoutGroupContext);
    return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
        children: st.map(ot => {
            const at = getChildKey(ot)
              , ht = d && !g ? !1 : _ === st || $.includes(at)
              , pt = () => {
                if (rt.has(at))
                    rt.set(at, !0);
                else
                    return;
                let gt = !0;
                rt.forEach(wt => {
                    wt || (gt = !1)
                }
                ),
                gt && (dt == null || dt(),
                nt(tt.current),
                d && (b == null || b()),
                o && o())
            }
            ;
            return jsxRuntimeExports.jsx(PresenceChild, {
                isPresent: ht,
                initial: !_e.current || i ? void 0 : !1,
                custom: e,
                presenceAffectsLayout: a,
                mode: c,
                onExitComplete: ht ? void 0 : pt,
                anchorX: h,
                children: ot
            }, at)
        }
        )
    })
}
  , LazyContext = reactExports.createContext({
    strict: !1
})
  , featureProps = {
    animation: ["animate", "variants", "whileHover", "whileTap", "exit", "whileInView", "whileFocus", "whileDrag"],
    exit: ["exit"],
    drag: ["drag", "dragControls"],
    focus: ["whileFocus"],
    hover: ["whileHover", "onHoverStart", "onHoverEnd"],
    tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
    pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
    inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
    layout: ["layout", "layoutId"]
}
  , featureDefinitions = {};
for (const s in featureProps)
    featureDefinitions[s] = {
        isEnabled: e => featureProps[s].some(i => !!e[i])
    };
function loadFeatures(s) {
    for (const e in s)
        featureDefinitions[e] = {
            ...featureDefinitions[e],
            ...s[e]
        }
}
const validMotionProps = new Set(["animate", "exit", "variants", "initial", "style", "values", "variants", "transition", "transformTemplate", "custom", "inherit", "onBeforeLayoutMeasure", "onAnimationStart", "onAnimationComplete", "onUpdate", "onDragStart", "onDrag", "onDragEnd", "onMeasureDragConstraints", "onDirectionLock", "onDragTransitionEnd", "_dragX", "_dragY", "onHoverStart", "onHoverEnd", "onViewportEnter", "onViewportLeave", "globalTapTarget", "ignoreStrict", "viewport"]);
function isValidMotionProp(s) {
    return s.startsWith("while") || s.startsWith("drag") && s !== "draggable" || s.startsWith("layout") || s.startsWith("onTap") || s.startsWith("onPan") || s.startsWith("onLayout") || validMotionProps.has(s)
}
let shouldForward = s => !isValidMotionProp(s);
function loadExternalIsValidProp(s) {
    s && (shouldForward = e => e.startsWith("on") ? !isValidMotionProp(e) : s(e))
}
try {
    loadExternalIsValidProp(require("@emotion/is-prop-valid").default)
} catch {}
function filterProps(s, e, i) {
    const o = {};
    for (const a in s)
        a === "values" && typeof s.values == "object" || (shouldForward(a) || i === !0 && isValidMotionProp(a) || !e && !isValidMotionProp(a) || s.draggable && a.startsWith("onDrag")) && (o[a] = s[a]);
    return o
}
function createDOMMotionComponentProxy(s) {
    if (typeof Proxy > "u")
        return s;
    const e = new Map
      , i = (...o) => s(...o);
    return new Proxy(i,{
        get: (o, a) => a === "create" ? s : (e.has(a) || e.set(a, s(a)),
        e.get(a))
    })
}
const MotionContext = reactExports.createContext({});
function isAnimationControls(s) {
    return s !== null && typeof s == "object" && typeof s.start == "function"
}
function isVariantLabel(s) {
    return typeof s == "string" || Array.isArray(s)
}
const variantPriorityOrder = ["animate", "whileInView", "whileFocus", "whileHover", "whileTap", "whileDrag", "exit"]
  , variantProps = ["initial", ...variantPriorityOrder];
function isControllingVariants(s) {
    return isAnimationControls(s.animate) || variantProps.some(e => isVariantLabel(s[e]))
}
function isVariantNode(s) {
    return !!(isControllingVariants(s) || s.variants)
}
function getCurrentTreeVariants(s, e) {
    if (isControllingVariants(s)) {
        const {initial: i, animate: o} = s;
        return {
            initial: i === !1 || isVariantLabel(i) ? i : void 0,
            animate: isVariantLabel(o) ? o : void 0
        }
    }
    return s.inherit !== !1 ? e : {}
}
function useCreateMotionContext(s) {
    const {initial: e, animate: i} = getCurrentTreeVariants(s, reactExports.useContext(MotionContext));
    return reactExports.useMemo( () => ({
        initial: e,
        animate: i
    }), [variantLabelsAsDependency(e), variantLabelsAsDependency(i)])
}
function variantLabelsAsDependency(s) {
    return Array.isArray(s) ? s.join(" ") : s
}
const motionComponentSymbol = Symbol.for("motionComponentSymbol");
function isRefObject(s) {
    return s && typeof s == "object" && Object.prototype.hasOwnProperty.call(s, "current")
}
function useMotionRef(s, e, i) {
    return reactExports.useCallback(o => {
        o && s.onMount && s.onMount(o),
        e && (o ? e.mount(o) : e.unmount()),
        i && (typeof i == "function" ? i(o) : isRefObject(i) && (i.current = o))
    }
    , [e])
}
const camelToDash = s => s.replace(/([a-z])([A-Z])/gu, "$1-$2").toLowerCase()
  , optimizedAppearDataId = "framerAppearId"
  , optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId)
  , SwitchLayoutGroupContext = reactExports.createContext({});
function useVisualElement(s, e, i, o, a) {
    var et, it;
    const {visualElement: c} = reactExports.useContext(MotionContext)
      , d = reactExports.useContext(LazyContext)
      , h = reactExports.useContext(PresenceContext)
      , g = reactExports.useContext(MotionConfigContext).reducedMotion
      , b = reactExports.useRef(null);
    o = o || d.renderer,
    !b.current && o && (b.current = o(s, {
        visualState: e,
        parent: c,
        props: i,
        presenceContext: h,
        blockInitialAnimation: h ? h.initial === !1 : !1,
        reducedMotionConfig: g
    }));
    const _ = b.current
      , $ = reactExports.useContext(SwitchLayoutGroupContext);
    _ && !_.projection && a && (_.type === "html" || _.type === "svg") && createProjectionNode$1(b.current, i, a, $);
    const _e = reactExports.useRef(!1);
    reactExports.useInsertionEffect( () => {
        _ && _e.current && _.update(i, h)
    }
    );
    const tt = i[optimizedAppearDataAttribute]
      , rt = reactExports.useRef(!!tt && !((et = window.MotionHandoffIsComplete) != null && et.call(window, tt)) && ((it = window.MotionHasOptimisedAnimation) == null ? void 0 : it.call(window, tt)));
    return useIsomorphicLayoutEffect$2( () => {
        _ && (_e.current = !0,
        window.MotionIsMounted = !0,
        _.updateFeatures(),
        microtask.render(_.render),
        rt.current && _.animationState && _.animationState.animateChanges())
    }
    ),
    reactExports.useEffect( () => {
        _ && (!rt.current && _.animationState && _.animationState.animateChanges(),
        rt.current && (queueMicrotask( () => {
            var st;
            (st = window.MotionHandoffMarkAsComplete) == null || st.call(window, tt)
        }
        ),
        rt.current = !1))
    }
    ),
    _
}
function createProjectionNode$1(s, e, i, o) {
    const {layoutId: a, layout: c, drag: d, dragConstraints: h, layoutScroll: g, layoutRoot: b, layoutCrossfade: _} = e;
    s.projection = new i(s.latestValues,e["data-framer-portal-id"] ? void 0 : getClosestProjectingNode(s.parent)),
    s.projection.setOptions({
        layoutId: a,
        layout: c,
        alwaysMeasureLayout: !!d || h && isRefObject(h),
        visualElement: s,
        animationType: typeof c == "string" ? c : "both",
        initialPromotionConfig: o,
        crossfade: _,
        layoutScroll: g,
        layoutRoot: b
    })
}
function getClosestProjectingNode(s) {
    if (s)
        return s.options.allowProjection !== !1 ? s.projection : getClosestProjectingNode(s.parent)
}
function createRendererMotionComponent({preloadedFeatures: s, createVisualElement: e, useRender: i, useVisualState: o, Component: a}) {
    s && loadFeatures(s);
    function c(h, g) {
        let b;
        const _ = {
            ...reactExports.useContext(MotionConfigContext),
            ...h,
            layoutId: useLayoutId(h)
        }
          , {isStatic: $} = _
          , _e = useCreateMotionContext(h)
          , tt = o(h, $);
        if (!$ && isBrowser) {
            useStrictMode();
            const rt = getProjectionFunctionality(_);
            b = rt.MeasureLayout,
            _e.visualElement = useVisualElement(a, tt, _, e, rt.ProjectionNode)
        }
        return jsxRuntimeExports.jsxs(MotionContext.Provider, {
            value: _e,
            children: [b && _e.visualElement ? jsxRuntimeExports.jsx(b, {
                visualElement: _e.visualElement,
                ..._
            }) : null, i(a, h, useMotionRef(tt, _e.visualElement, g), tt, $, _e.visualElement)]
        })
    }
    c.displayName = `motion.${typeof a == "string" ? a : `create(${a.displayName ?? a.name ?? ""})`}`;
    const d = reactExports.forwardRef(c);
    return d[motionComponentSymbol] = a,
    d
}
function useLayoutId({layoutId: s}) {
    const e = reactExports.useContext(LayoutGroupContext).id;
    return e && s !== void 0 ? e + "-" + s : s
}
function useStrictMode(s, e) {
    reactExports.useContext(LazyContext).strict
}
function getProjectionFunctionality(s) {
    const {drag: e, layout: i} = featureDefinitions;
    if (!e && !i)
        return {};
    const o = {
        ...e,
        ...i
    };
    return {
        MeasureLayout: e != null && e.isEnabled(s) || i != null && i.isEnabled(s) ? o.MeasureLayout : void 0,
        ProjectionNode: o.ProjectionNode
    }
}
const scaleCorrectors = {};
function addScaleCorrector(s) {
    for (const e in s)
        scaleCorrectors[e] = s[e],
        isCSSVariableName(e) && (scaleCorrectors[e].isCSSVariable = !0)
}
function isForcedMotionValue(s, {layout: e, layoutId: i}) {
    return transformProps.has(s) || s.startsWith("origin") || (e || i !== void 0) && (!!scaleCorrectors[s] || s === "opacity")
}
const translateAlias = {
    x: "translateX",
    y: "translateY",
    z: "translateZ",
    transformPerspective: "perspective"
}
  , numTransforms = transformPropOrder.length;
function buildTransform(s, e, i) {
    let o = ""
      , a = !0;
    for (let c = 0; c < numTransforms; c++) {
        const d = transformPropOrder[c]
          , h = s[d];
        if (h === void 0)
            continue;
        let g = !0;
        if (typeof h == "number" ? g = h === (d.startsWith("scale") ? 1 : 0) : g = parseFloat(h) === 0,
        !g || i) {
            const b = getValueAsType(h, numberValueTypes[d]);
            if (!g) {
                a = !1;
                const _ = translateAlias[d] || d;
                o += `${_}(${b}) `
            }
            i && (e[d] = b)
        }
    }
    return o = o.trim(),
    i ? o = i(e, a ? "" : o) : a && (o = "none"),
    o
}
function buildHTMLStyles(s, e, i) {
    const {style: o, vars: a, transformOrigin: c} = s;
    let d = !1
      , h = !1;
    for (const g in e) {
        const b = e[g];
        if (transformProps.has(g)) {
            d = !0;
            continue
        } else if (isCSSVariableName(g)) {
            a[g] = b;
            continue
        } else {
            const _ = getValueAsType(b, numberValueTypes[g]);
            g.startsWith("origin") ? (h = !0,
            c[g] = _) : o[g] = _
        }
    }
    if (e.transform || (d || i ? o.transform = buildTransform(e, s.transform, i) : o.transform && (o.transform = "none")),
    h) {
        const {originX: g="50%", originY: b="50%", originZ: _=0} = c;
        o.transformOrigin = `${g} ${b} ${_}`
    }
}
const createHtmlRenderState = () => ({
    style: {},
    transform: {},
    transformOrigin: {},
    vars: {}
});
function copyRawValuesOnly(s, e, i) {
    for (const o in e)
        !isMotionValue(e[o]) && !isForcedMotionValue(o, i) && (s[o] = e[o])
}
function useInitialMotionValues({transformTemplate: s}, e) {
    return reactExports.useMemo( () => {
        const i = createHtmlRenderState();
        return buildHTMLStyles(i, e, s),
        Object.assign({}, i.vars, i.style)
    }
    , [e])
}
function useStyle(s, e) {
    const i = s.style || {}
      , o = {};
    return copyRawValuesOnly(o, i, s),
    Object.assign(o, useInitialMotionValues(s, e)),
    o
}
function useHTMLProps(s, e) {
    const i = {}
      , o = useStyle(s, e);
    return s.drag && s.dragListener !== !1 && (i.draggable = !1,
    o.userSelect = o.WebkitUserSelect = o.WebkitTouchCallout = "none",
    o.touchAction = s.drag === !0 ? "none" : `pan-${s.drag === "x" ? "y" : "x"}`),
    s.tabIndex === void 0 && (s.onTap || s.onTapStart || s.whileTap) && (i.tabIndex = 0),
    i.style = o,
    i
}
const dashKeys = {
    offset: "stroke-dashoffset",
    array: "stroke-dasharray"
}
  , camelKeys = {
    offset: "strokeDashoffset",
    array: "strokeDasharray"
};
function buildSVGPath(s, e, i=1, o=0, a=!0) {
    s.pathLength = 1;
    const c = a ? dashKeys : camelKeys;
    s[c.offset] = px.transform(-o);
    const d = px.transform(e)
      , h = px.transform(i);
    s[c.array] = `${d} ${h}`
}
function buildSVGAttrs(s, {attrX: e, attrY: i, attrScale: o, pathLength: a, pathSpacing: c=1, pathOffset: d=0, ...h}, g, b, _) {
    if (buildHTMLStyles(s, h, b),
    g) {
        s.style.viewBox && (s.attrs.viewBox = s.style.viewBox);
        return
    }
    s.attrs = s.style,
    s.style = {};
    const {attrs: $, style: _e} = s;
    $.transform && (_e.transform = $.transform,
    delete $.transform),
    (_e.transform || $.transformOrigin) && (_e.transformOrigin = $.transformOrigin ?? "50% 50%",
    delete $.transformOrigin),
    _e.transform && (_e.transformBox = (_ == null ? void 0 : _.transformBox) ?? "fill-box",
    delete $.transformBox),
    e !== void 0 && ($.x = e),
    i !== void 0 && ($.y = i),
    o !== void 0 && ($.scale = o),
    a !== void 0 && buildSVGPath($, a, c, d, !1)
}
const createSvgRenderState = () => ({
    ...createHtmlRenderState(),
    attrs: {}
})
  , isSVGTag = s => typeof s == "string" && s.toLowerCase() === "svg";
function useSVGProps(s, e, i, o) {
    const a = reactExports.useMemo( () => {
        const c = createSvgRenderState();
        return buildSVGAttrs(c, e, isSVGTag(o), s.transformTemplate, s.style),
        {
            ...c.attrs,
            style: {
                ...c.style
            }
        }
    }
    , [e]);
    if (s.style) {
        const c = {};
        copyRawValuesOnly(c, s.style, s),
        a.style = {
            ...c,
            ...a.style
        }
    }
    return a
}
const lowercaseSVGElements = ["animate", "circle", "defs", "desc", "ellipse", "g", "image", "line", "filter", "marker", "mask", "metadata", "path", "pattern", "polygon", "polyline", "rect", "stop", "switch", "symbol", "svg", "text", "tspan", "use", "view"];
function isSVGComponent(s) {
    return typeof s != "string" || s.includes("-") ? !1 : !!(lowercaseSVGElements.indexOf(s) > -1 || /[A-Z]/u.test(s))
}
function createUseRender(s=!1) {
    return (i, o, a, {latestValues: c}, d) => {
        const g = (isSVGComponent(i) ? useSVGProps : useHTMLProps)(o, c, d, i)
          , b = filterProps(o, typeof i == "string", s)
          , _ = i !== reactExports.Fragment ? {
            ...b,
            ...g,
            ref: a
        } : {}
          , {children: $} = o
          , _e = reactExports.useMemo( () => isMotionValue($) ? $.get() : $, [$]);
        return reactExports.createElement(i, {
            ..._,
            children: _e
        })
    }
}
function getValueState(s) {
    const e = [{}, {}];
    return s == null || s.values.forEach( (i, o) => {
        e[0][o] = i.get(),
        e[1][o] = i.getVelocity()
    }
    ),
    e
}
function resolveVariantFromProps(s, e, i, o) {
    if (typeof e == "function") {
        const [a,c] = getValueState(o);
        e = e(i !== void 0 ? i : s.custom, a, c)
    }
    if (typeof e == "string" && (e = s.variants && s.variants[e]),
    typeof e == "function") {
        const [a,c] = getValueState(o);
        e = e(i !== void 0 ? i : s.custom, a, c)
    }
    return e
}
function resolveMotionValue(s) {
    return isMotionValue(s) ? s.get() : s
}
function makeState({scrapeMotionValuesFromProps: s, createRenderState: e}, i, o, a) {
    return {
        latestValues: makeLatestValues(i, o, a, s),
        renderState: e()
    }
}
const makeUseVisualState = s => (e, i) => {
    const o = reactExports.useContext(MotionContext)
      , a = reactExports.useContext(PresenceContext)
      , c = () => makeState(s, e, o, a);
    return i ? c() : useConstant(c)
}
;
function makeLatestValues(s, e, i, o) {
    const a = {}
      , c = o(s, {});
    for (const _e in c)
        a[_e] = resolveMotionValue(c[_e]);
    let {initial: d, animate: h} = s;
    const g = isControllingVariants(s)
      , b = isVariantNode(s);
    e && b && !g && s.inherit !== !1 && (d === void 0 && (d = e.initial),
    h === void 0 && (h = e.animate));
    let _ = i ? i.initial === !1 : !1;
    _ = _ || d === !1;
    const $ = _ ? h : d;
    if ($ && typeof $ != "boolean" && !isAnimationControls($)) {
        const _e = Array.isArray($) ? $ : [$];
        for (let tt = 0; tt < _e.length; tt++) {
            const rt = resolveVariantFromProps(s, _e[tt]);
            if (rt) {
                const {transitionEnd: et, transition: it, ...st} = rt;
                for (const nt in st) {
                    let lt = st[nt];
                    if (Array.isArray(lt)) {
                        const dt = _ ? lt.length - 1 : 0;
                        lt = lt[dt]
                    }
                    lt !== null && (a[nt] = lt)
                }
                for (const nt in et)
                    a[nt] = et[nt]
            }
        }
    }
    return a
}
function scrapeMotionValuesFromProps$1(s, e, i) {
    var c;
    const {style: o} = s
      , a = {};
    for (const d in o)
        (isMotionValue(o[d]) || e.style && isMotionValue(e.style[d]) || isForcedMotionValue(d, s) || ((c = i == null ? void 0 : i.getValue(d)) == null ? void 0 : c.liveStyle) !== void 0) && (a[d] = o[d]);
    return a
}
const htmlMotionConfig = {
    useVisualState: makeUseVisualState({
        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,
        createRenderState: createHtmlRenderState
    })
};
function scrapeMotionValuesFromProps(s, e, i) {
    const o = scrapeMotionValuesFromProps$1(s, e, i);
    for (const a in s)
        if (isMotionValue(s[a]) || isMotionValue(e[a])) {
            const c = transformPropOrder.indexOf(a) !== -1 ? "attr" + a.charAt(0).toUpperCase() + a.substring(1) : a;
            o[c] = s[a]
        }
    return o
}
const svgMotionConfig = {
    useVisualState: makeUseVisualState({
        scrapeMotionValuesFromProps,
        createRenderState: createSvgRenderState
    })
};
function createMotionComponentFactory(s, e) {
    return function(o, {forwardMotionProps: a}={
        forwardMotionProps: !1
    }) {
        const d = {
            ...isSVGComponent(o) ? svgMotionConfig : htmlMotionConfig,
            preloadedFeatures: s,
            useRender: createUseRender(a),
            createVisualElement: e,
            Component: o
        };
        return createRendererMotionComponent(d)
    }
}
function resolveVariant(s, e, i) {
    const o = s.getProps();
    return resolveVariantFromProps(o, e, i !== void 0 ? i : o.custom, s)
}
const isKeyframesTarget = s => Array.isArray(s);
function setMotionValue(s, e, i) {
    s.hasValue(e) ? s.getValue(e).set(i) : s.addValue(e, motionValue(i))
}
function resolveFinalValueInKeyframes(s) {
    return isKeyframesTarget(s) ? s[s.length - 1] || 0 : s
}
function setTarget(s, e) {
    const i = resolveVariant(s, e);
    let {transitionEnd: o={}, transition: a={}, ...c} = i || {};
    c = {
        ...c,
        ...o
    };
    for (const d in c) {
        const h = resolveFinalValueInKeyframes(c[d]);
        setMotionValue(s, d, h)
    }
}
function isWillChangeMotionValue(s) {
    return !!(isMotionValue(s) && s.add)
}
function addValueToWillChange(s, e) {
    const i = s.getValue("willChange");
    if (isWillChangeMotionValue(i))
        return i.add(e);
    if (!i && MotionGlobalConfig.WillChange) {
        const o = new MotionGlobalConfig.WillChange("auto");
        s.addValue("willChange", o),
        o.add(e)
    }
}
function getOptimisedAppearId(s) {
    return s.props[optimizedAppearDataAttribute]
}
const isNotNull = s => s !== null;
function getFinalKeyframe(s, {repeat: e, repeatType: i="loop"}, o) {
    const a = s.filter(isNotNull)
      , c = e && i !== "loop" && e % 2 === 1 ? 0 : a.length - 1;
    return !c || o === void 0 ? a[c] : o
}
const underDampedSpring = {
    type: "spring",
    stiffness: 500,
    damping: 25,
    restSpeed: 10
}
  , criticallyDampedSpring = s => ({
    type: "spring",
    stiffness: 550,
    damping: s === 0 ? 2 * Math.sqrt(550) : 30,
    restSpeed: 10
})
  , keyframesTransition = {
    type: "keyframes",
    duration: .8
}
  , ease = {
    type: "keyframes",
    ease: [.25, .1, .35, 1],
    duration: .3
}
  , getDefaultTransition = (s, {keyframes: e}) => e.length > 2 ? keyframesTransition : transformProps.has(s) ? s.startsWith("scale") ? criticallyDampedSpring(e[1]) : underDampedSpring : ease;
function isTransitionDefined({when: s, delay: e, delayChildren: i, staggerChildren: o, staggerDirection: a, repeat: c, repeatType: d, repeatDelay: h, from: g, elapsed: b, ..._}) {
    return !!Object.keys(_).length
}
const animateMotionValue = (s, e, i, o={}, a, c) => d => {
    const h = getValueTransition(o, s) || {}
      , g = h.delay || o.delay || 0;
    let {elapsed: b=0} = o;
    b = b - secondsToMilliseconds(g);
    const _ = {
        keyframes: Array.isArray(i) ? i : [null, i],
        ease: "easeOut",
        velocity: e.getVelocity(),
        ...h,
        delay: -b,
        onUpdate: _e => {
            e.set(_e),
            h.onUpdate && h.onUpdate(_e)
        }
        ,
        onComplete: () => {
            d(),
            h.onComplete && h.onComplete()
        }
        ,
        name: s,
        motionValue: e,
        element: c ? void 0 : a
    };
    isTransitionDefined(h) || Object.assign(_, getDefaultTransition(s, _)),
    _.duration && (_.duration = secondsToMilliseconds(_.duration)),
    _.repeatDelay && (_.repeatDelay = secondsToMilliseconds(_.repeatDelay)),
    _.from !== void 0 && (_.keyframes[0] = _.from);
    let $ = !1;
    if ((_.type === !1 || _.duration === 0 && !_.repeatDelay) && (_.duration = 0,
    _.delay === 0 && ($ = !0)),
    (MotionGlobalConfig.instantAnimations || MotionGlobalConfig.skipAnimations) && ($ = !0,
    _.duration = 0,
    _.delay = 0),
    _.allowFlatten = !h.type && !h.ease,
    $ && !c && e.get() !== void 0) {
        const _e = getFinalKeyframe(_.keyframes, h);
        if (_e !== void 0) {
            frame.update( () => {
                _.onUpdate(_e),
                _.onComplete()
            }
            );
            return
        }
    }
    return h.isSync ? new JSAnimation(_) : new AsyncMotionValueAnimation(_)
}
;
function shouldBlockAnimation({protectedKeys: s, needsAnimating: e}, i) {
    const o = s.hasOwnProperty(i) && e[i] !== !0;
    return e[i] = !1,
    o
}
function animateTarget(s, e, {delay: i=0, transitionOverride: o, type: a}={}) {
    let {transition: c=s.getDefaultTransition(), transitionEnd: d, ...h} = e;
    o && (c = o);
    const g = []
      , b = a && s.animationState && s.animationState.getState()[a];
    for (const _ in h) {
        const $ = s.getValue(_, s.latestValues[_] ?? null)
          , _e = h[_];
        if (_e === void 0 || b && shouldBlockAnimation(b, _))
            continue;
        const tt = {
            delay: i,
            ...getValueTransition(c || {}, _)
        }
          , rt = $.get();
        if (rt !== void 0 && !$.isAnimating && !Array.isArray(_e) && _e === rt && !tt.velocity)
            continue;
        let et = !1;
        if (window.MotionHandoffAnimation) {
            const st = getOptimisedAppearId(s);
            if (st) {
                const nt = window.MotionHandoffAnimation(st, _, frame);
                nt !== null && (tt.startTime = nt,
                et = !0)
            }
        }
        addValueToWillChange(s, _),
        $.start(animateMotionValue(_, $, _e, s.shouldReduceMotion && positionalKeys.has(_) ? {
            type: !1
        } : tt, s, et));
        const it = $.animation;
        it && g.push(it)
    }
    return d && Promise.all(g).then( () => {
        frame.update( () => {
            d && setTarget(s, d)
        }
        )
    }
    ),
    g
}
function animateVariant(s, e, i={}) {
    var g;
    const o = resolveVariant(s, e, i.type === "exit" ? (g = s.presenceContext) == null ? void 0 : g.custom : void 0);
    let {transition: a=s.getDefaultTransition() || {}} = o || {};
    i.transitionOverride && (a = i.transitionOverride);
    const c = o ? () => Promise.all(animateTarget(s, o, i)) : () => Promise.resolve()
      , d = s.variantChildren && s.variantChildren.size ? (b=0) => {
        const {delayChildren: _=0, staggerChildren: $, staggerDirection: _e} = a;
        return animateChildren(s, e, _ + b, $, _e, i)
    }
    : () => Promise.resolve()
      , {when: h} = a;
    if (h) {
        const [b,_] = h === "beforeChildren" ? [c, d] : [d, c];
        return b().then( () => _())
    } else
        return Promise.all([c(), d(i.delay)])
}
function animateChildren(s, e, i=0, o=0, a=1, c) {
    const d = []
      , h = (s.variantChildren.size - 1) * o
      , g = a === 1 ? (b=0) => b * o : (b=0) => h - b * o;
    return Array.from(s.variantChildren).sort(sortByTreeOrder).forEach( (b, _) => {
        b.notify("AnimationStart", e),
        d.push(animateVariant(b, e, {
            ...c,
            delay: i + g(_)
        }).then( () => b.notify("AnimationComplete", e)))
    }
    ),
    Promise.all(d)
}
function sortByTreeOrder(s, e) {
    return s.sortNodePosition(e)
}
function animateVisualElement(s, e, i={}) {
    s.notify("AnimationStart", e);
    let o;
    if (Array.isArray(e)) {
        const a = e.map(c => animateVariant(s, c, i));
        o = Promise.all(a)
    } else if (typeof e == "string")
        o = animateVariant(s, e, i);
    else {
        const a = typeof e == "function" ? resolveVariant(s, e, i.custom) : e;
        o = Promise.all(animateTarget(s, a, i))
    }
    return o.then( () => {
        s.notify("AnimationComplete", e)
    }
    )
}
function shallowCompare(s, e) {
    if (!Array.isArray(e))
        return !1;
    const i = e.length;
    if (i !== s.length)
        return !1;
    for (let o = 0; o < i; o++)
        if (e[o] !== s[o])
            return !1;
    return !0
}
const numVariantProps = variantProps.length;
function getVariantContext(s) {
    if (!s)
        return;
    if (!s.isControllingVariants) {
        const i = s.parent ? getVariantContext(s.parent) || {} : {};
        return s.props.initial !== void 0 && (i.initial = s.props.initial),
        i
    }
    const e = {};
    for (let i = 0; i < numVariantProps; i++) {
        const o = variantProps[i]
          , a = s.props[o];
        (isVariantLabel(a) || a === !1) && (e[o] = a)
    }
    return e
}
const reversePriorityOrder = [...variantPriorityOrder].reverse()
  , numAnimationTypes = variantPriorityOrder.length;
function animateList(s) {
    return e => Promise.all(e.map( ({animation: i, options: o}) => animateVisualElement(s, i, o)))
}
function createAnimationState(s) {
    let e = animateList(s)
      , i = createState()
      , o = !0;
    const a = g => (b, _) => {
        var _e;
        const $ = resolveVariant(s, _, g === "exit" ? (_e = s.presenceContext) == null ? void 0 : _e.custom : void 0);
        if ($) {
            const {transition: tt, transitionEnd: rt, ...et} = $;
            b = {
                ...b,
                ...et,
                ...rt
            }
        }
        return b
    }
    ;
    function c(g) {
        e = g(s)
    }
    function d(g) {
        const {props: b} = s
          , _ = getVariantContext(s.parent) || {}
          , $ = []
          , _e = new Set;
        let tt = {}
          , rt = 1 / 0;
        for (let it = 0; it < numAnimationTypes; it++) {
            const st = reversePriorityOrder[it]
              , nt = i[st]
              , lt = b[st] !== void 0 ? b[st] : _[st]
              , dt = isVariantLabel(lt)
              , ot = st === g ? nt.isActive : null;
            ot === !1 && (rt = it);
            let at = lt === _[st] && lt !== b[st] && dt;
            if (at && o && s.manuallyAnimateOnMount && (at = !1),
            nt.protectedKeys = {
                ...tt
            },
            !nt.isActive && ot === null || !lt && !nt.prevProp || isAnimationControls(lt) || typeof lt == "boolean")
                continue;
            const ht = checkVariantsDidChange(nt.prevProp, lt);
            let pt = ht || st === g && nt.isActive && !at && dt || it > rt && dt
              , gt = !1;
            const wt = Array.isArray(lt) ? lt : [lt];
            let yt = wt.reduce(a(st), {});
            ot === !1 && (yt = {});
            const {prevResolvedValues: Rt={}} = nt
              , Mt = {
                ...Rt,
                ...yt
            }
              , ss = kt => {
                pt = !0,
                _e.has(kt) && (gt = !0,
                _e.delete(kt)),
                nt.needsAnimating[kt] = !0;
                const vt = s.getValue(kt);
                vt && (vt.liveStyle = !1)
            }
            ;
            for (const kt in Mt) {
                const vt = yt[kt]
                  , bt = Rt[kt];
                if (tt.hasOwnProperty(kt))
                    continue;
                let Tt = !1;
                isKeyframesTarget(vt) && isKeyframesTarget(bt) ? Tt = !shallowCompare(vt, bt) : Tt = vt !== bt,
                Tt ? vt != null ? ss(kt) : _e.add(kt) : vt !== void 0 && _e.has(kt) ? ss(kt) : nt.protectedKeys[kt] = !0
            }
            nt.prevProp = lt,
            nt.prevResolvedValues = yt,
            nt.isActive && (tt = {
                ...tt,
                ...yt
            }),
            o && s.blockInitialAnimation && (pt = !1),
            pt && (!(at && ht) || gt) && $.push(...wt.map(kt => ({
                animation: kt,
                options: {
                    type: st
                }
            })))
        }
        if (_e.size) {
            const it = {};
            if (typeof b.initial != "boolean") {
                const st = resolveVariant(s, Array.isArray(b.initial) ? b.initial[0] : b.initial);
                st && st.transition && (it.transition = st.transition)
            }
            _e.forEach(st => {
                const nt = s.getBaseTarget(st)
                  , lt = s.getValue(st);
                lt && (lt.liveStyle = !0),
                it[st] = nt ?? null
            }
            ),
            $.push({
                animation: it
            })
        }
        let et = !!$.length;
        return o && (b.initial === !1 || b.initial === b.animate) && !s.manuallyAnimateOnMount && (et = !1),
        o = !1,
        et ? e($) : Promise.resolve()
    }
    function h(g, b) {
        var $;
        if (i[g].isActive === b)
            return Promise.resolve();
        ($ = s.variantChildren) == null || $.forEach(_e => {
            var tt;
            return (tt = _e.animationState) == null ? void 0 : tt.setActive(g, b)
        }
        ),
        i[g].isActive = b;
        const _ = d(g);
        for (const _e in i)
            i[_e].protectedKeys = {};
        return _
    }
    return {
        animateChanges: d,
        setActive: h,
        setAnimateFunction: c,
        getState: () => i,
        reset: () => {
            i = createState(),
            o = !0
        }
    }
}
function checkVariantsDidChange(s, e) {
    return typeof e == "string" ? e !== s : Array.isArray(e) ? !shallowCompare(e, s) : !1
}
function createTypeState(s=!1) {
    return {
        isActive: s,
        protectedKeys: {},
        needsAnimating: {},
        prevResolvedValues: {}
    }
}
function createState() {
    return {
        animate: createTypeState(!0),
        whileInView: createTypeState(),
        whileHover: createTypeState(),
        whileTap: createTypeState(),
        whileDrag: createTypeState(),
        whileFocus: createTypeState(),
        exit: createTypeState()
    }
}
class Feature {
    constructor(e) {
        this.isMounted = !1,
        this.node = e
    }
    update() {}
}
class AnimationFeature extends Feature {
    constructor(e) {
        super(e),
        e.animationState || (e.animationState = createAnimationState(e))
    }
    updateAnimationControlsSubscription() {
        const {animate: e} = this.node.getProps();
        isAnimationControls(e) && (this.unmountControls = e.subscribe(this.node))
    }
    mount() {
        this.updateAnimationControlsSubscription()
    }
    update() {
        const {animate: e} = this.node.getProps()
          , {animate: i} = this.node.prevProps || {};
        e !== i && this.updateAnimationControlsSubscription()
    }
    unmount() {
        var e;
        this.node.animationState.reset(),
        (e = this.unmountControls) == null || e.call(this)
    }
}
let id$1 = 0;
class ExitAnimationFeature extends Feature {
    constructor() {
        super(...arguments),
        this.id = id$1++
    }
    update() {
        if (!this.node.presenceContext)
            return;
        const {isPresent: e, onExitComplete: i} = this.node.presenceContext
          , {isPresent: o} = this.node.prevPresenceContext || {};
        if (!this.node.animationState || e === o)
            return;
        const a = this.node.animationState.setActive("exit", !e);
        i && !e && a.then( () => {
            i(this.id)
        }
        )
    }
    mount() {
        const {register: e, onExitComplete: i} = this.node.presenceContext || {};
        i && i(this.id),
        e && (this.unmount = e(this.id))
    }
    unmount() {}
}
const animations = {
    animation: {
        Feature: AnimationFeature
    },
    exit: {
        Feature: ExitAnimationFeature
    }
};
function addDomEvent(s, e, i, o={
    passive: !0
}) {
    return s.addEventListener(e, i, o),
    () => s.removeEventListener(e, i)
}
function extractEventInfo(s) {
    return {
        point: {
            x: s.pageX,
            y: s.pageY
        }
    }
}
const addPointerInfo = s => e => isPrimaryPointer(e) && s(e, extractEventInfo(e));
function addPointerEvent(s, e, i, o) {
    return addDomEvent(s, e, addPointerInfo(i), o)
}
function convertBoundingBoxToBox({top: s, left: e, right: i, bottom: o}) {
    return {
        x: {
            min: e,
            max: i
        },
        y: {
            min: s,
            max: o
        }
    }
}
function convertBoxToBoundingBox({x: s, y: e}) {
    return {
        top: e.min,
        right: s.max,
        bottom: e.max,
        left: s.min
    }
}
function transformBoxPoints(s, e) {
    if (!e)
        return s;
    const i = e({
        x: s.left,
        y: s.top
    })
      , o = e({
        x: s.right,
        y: s.bottom
    });
    return {
        top: i.y,
        left: i.x,
        bottom: o.y,
        right: o.x
    }
}
const SCALE_PRECISION = 1e-4
  , SCALE_MIN = 1 - SCALE_PRECISION
  , SCALE_MAX = 1 + SCALE_PRECISION
  , TRANSLATE_PRECISION = .01
  , TRANSLATE_MIN = 0 - TRANSLATE_PRECISION
  , TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;
function calcLength(s) {
    return s.max - s.min
}
function isNear(s, e, i) {
    return Math.abs(s - e) <= i
}
function calcAxisDelta(s, e, i, o=.5) {
    s.origin = o,
    s.originPoint = mixNumber$1(e.min, e.max, s.origin),
    s.scale = calcLength(i) / calcLength(e),
    s.translate = mixNumber$1(i.min, i.max, s.origin) - s.originPoint,
    (s.scale >= SCALE_MIN && s.scale <= SCALE_MAX || isNaN(s.scale)) && (s.scale = 1),
    (s.translate >= TRANSLATE_MIN && s.translate <= TRANSLATE_MAX || isNaN(s.translate)) && (s.translate = 0)
}
function calcBoxDelta(s, e, i, o) {
    calcAxisDelta(s.x, e.x, i.x, o ? o.originX : void 0),
    calcAxisDelta(s.y, e.y, i.y, o ? o.originY : void 0)
}
function calcRelativeAxis(s, e, i) {
    s.min = i.min + e.min,
    s.max = s.min + calcLength(e)
}
function calcRelativeBox(s, e, i) {
    calcRelativeAxis(s.x, e.x, i.x),
    calcRelativeAxis(s.y, e.y, i.y)
}
function calcRelativeAxisPosition(s, e, i) {
    s.min = e.min - i.min,
    s.max = s.min + calcLength(e)
}
function calcRelativePosition(s, e, i) {
    calcRelativeAxisPosition(s.x, e.x, i.x),
    calcRelativeAxisPosition(s.y, e.y, i.y)
}
const createAxisDelta = () => ({
    translate: 0,
    scale: 1,
    origin: 0,
    originPoint: 0
})
  , createDelta = () => ({
    x: createAxisDelta(),
    y: createAxisDelta()
})
  , createAxis = () => ({
    min: 0,
    max: 0
})
  , createBox = () => ({
    x: createAxis(),
    y: createAxis()
});
function eachAxis(s) {
    return [s("x"), s("y")]
}
function isIdentityScale(s) {
    return s === void 0 || s === 1
}
function hasScale({scale: s, scaleX: e, scaleY: i}) {
    return !isIdentityScale(s) || !isIdentityScale(e) || !isIdentityScale(i)
}
function hasTransform(s) {
    return hasScale(s) || has2DTranslate(s) || s.z || s.rotate || s.rotateX || s.rotateY || s.skewX || s.skewY
}
function has2DTranslate(s) {
    return is2DTranslate(s.x) || is2DTranslate(s.y)
}
function is2DTranslate(s) {
    return s && s !== "0%"
}
function scalePoint(s, e, i) {
    const o = s - i
      , a = e * o;
    return i + a
}
function applyPointDelta(s, e, i, o, a) {
    return a !== void 0 && (s = scalePoint(s, a, o)),
    scalePoint(s, i, o) + e
}
function applyAxisDelta(s, e=0, i=1, o, a) {
    s.min = applyPointDelta(s.min, e, i, o, a),
    s.max = applyPointDelta(s.max, e, i, o, a)
}
function applyBoxDelta(s, {x: e, y: i}) {
    applyAxisDelta(s.x, e.translate, e.scale, e.originPoint),
    applyAxisDelta(s.y, i.translate, i.scale, i.originPoint)
}
const TREE_SCALE_SNAP_MIN = .999999999999
  , TREE_SCALE_SNAP_MAX = 1.0000000000001;
function applyTreeDeltas(s, e, i, o=!1) {
    const a = i.length;
    if (!a)
        return;
    e.x = e.y = 1;
    let c, d;
    for (let h = 0; h < a; h++) {
        c = i[h],
        d = c.projectionDelta;
        const {visualElement: g} = c.options;
        g && g.props.style && g.props.style.display === "contents" || (o && c.options.layoutScroll && c.scroll && c !== c.root && transformBox(s, {
            x: -c.scroll.offset.x,
            y: -c.scroll.offset.y
        }),
        d && (e.x *= d.x.scale,
        e.y *= d.y.scale,
        applyBoxDelta(s, d)),
        o && hasTransform(c.latestValues) && transformBox(s, c.latestValues))
    }
    e.x < TREE_SCALE_SNAP_MAX && e.x > TREE_SCALE_SNAP_MIN && (e.x = 1),
    e.y < TREE_SCALE_SNAP_MAX && e.y > TREE_SCALE_SNAP_MIN && (e.y = 1)
}
function translateAxis(s, e) {
    s.min = s.min + e,
    s.max = s.max + e
}
function transformAxis(s, e, i, o, a=.5) {
    const c = mixNumber$1(s.min, s.max, a);
    applyAxisDelta(s, e, i, c, o)
}
function transformBox(s, e) {
    transformAxis(s.x, e.x, e.scaleX, e.scale, e.originX),
    transformAxis(s.y, e.y, e.scaleY, e.scale, e.originY)
}
function measureViewportBox(s, e) {
    return convertBoundingBoxToBox(transformBoxPoints(s.getBoundingClientRect(), e))
}
function measurePageBox(s, e, i) {
    const o = measureViewportBox(s, i)
      , {scroll: a} = e;
    return a && (translateAxis(o.x, a.offset.x),
    translateAxis(o.y, a.offset.y)),
    o
}
const getContextWindow = ({current: s}) => s ? s.ownerDocument.defaultView : null
  , distance = (s, e) => Math.abs(s - e);
function distance2D(s, e) {
    const i = distance(s.x, e.x)
      , o = distance(s.y, e.y);
    return Math.sqrt(i ** 2 + o ** 2)
}
class PanSession {
    constructor(e, i, {transformPagePoint: o, contextWindow: a, dragSnapToOrigin: c=!1}={}) {
        if (this.startEvent = null,
        this.lastMoveEvent = null,
        this.lastMoveEventInfo = null,
        this.handlers = {},
        this.contextWindow = window,
        this.updatePoint = () => {
            if (!(this.lastMoveEvent && this.lastMoveEventInfo))
                return;
            const $ = getPanInfo(this.lastMoveEventInfo, this.history)
              , _e = this.startEvent !== null
              , tt = distance2D($.offset, {
                x: 0,
                y: 0
            }) >= 3;
            if (!_e && !tt)
                return;
            const {point: rt} = $
              , {timestamp: et} = frameData;
            this.history.push({
                ...rt,
                timestamp: et
            });
            const {onStart: it, onMove: st} = this.handlers;
            _e || (it && it(this.lastMoveEvent, $),
            this.startEvent = this.lastMoveEvent),
            st && st(this.lastMoveEvent, $)
        }
        ,
        this.handlePointerMove = ($, _e) => {
            this.lastMoveEvent = $,
            this.lastMoveEventInfo = transformPoint(_e, this.transformPagePoint),
            frame.update(this.updatePoint, !0)
        }
        ,
        this.handlePointerUp = ($, _e) => {
            this.end();
            const {onEnd: tt, onSessionEnd: rt, resumeAnimation: et} = this.handlers;
            if (this.dragSnapToOrigin && et && et(),
            !(this.lastMoveEvent && this.lastMoveEventInfo))
                return;
            const it = getPanInfo($.type === "pointercancel" ? this.lastMoveEventInfo : transformPoint(_e, this.transformPagePoint), this.history);
            this.startEvent && tt && tt($, it),
            rt && rt($, it)
        }
        ,
        !isPrimaryPointer(e))
            return;
        this.dragSnapToOrigin = c,
        this.handlers = i,
        this.transformPagePoint = o,
        this.contextWindow = a || window;
        const d = extractEventInfo(e)
          , h = transformPoint(d, this.transformPagePoint)
          , {point: g} = h
          , {timestamp: b} = frameData;
        this.history = [{
            ...g,
            timestamp: b
        }];
        const {onSessionStart: _} = i;
        _ && _(e, getPanInfo(h, this.history)),
        this.removeListeners = pipe(addPointerEvent(this.contextWindow, "pointermove", this.handlePointerMove), addPointerEvent(this.contextWindow, "pointerup", this.handlePointerUp), addPointerEvent(this.contextWindow, "pointercancel", this.handlePointerUp))
    }
    updateHandlers(e) {
        this.handlers = e
    }
    end() {
        this.removeListeners && this.removeListeners(),
        cancelFrame(this.updatePoint)
    }
}
function transformPoint(s, e) {
    return e ? {
        point: e(s.point)
    } : s
}
function subtractPoint(s, e) {
    return {
        x: s.x - e.x,
        y: s.y - e.y
    }
}
function getPanInfo({point: s}, e) {
    return {
        point: s,
        delta: subtractPoint(s, lastDevicePoint(e)),
        offset: subtractPoint(s, startDevicePoint(e)),
        velocity: getVelocity(e, .1)
    }
}
function startDevicePoint(s) {
    return s[0]
}
function lastDevicePoint(s) {
    return s[s.length - 1]
}
function getVelocity(s, e) {
    if (s.length < 2)
        return {
            x: 0,
            y: 0
        };
    let i = s.length - 1
      , o = null;
    const a = lastDevicePoint(s);
    for (; i >= 0 && (o = s[i],
    !(a.timestamp - o.timestamp > secondsToMilliseconds(e))); )
        i--;
    if (!o)
        return {
            x: 0,
            y: 0
        };
    const c = millisecondsToSeconds(a.timestamp - o.timestamp);
    if (c === 0)
        return {
            x: 0,
            y: 0
        };
    const d = {
        x: (a.x - o.x) / c,
        y: (a.y - o.y) / c
    };
    return d.x === 1 / 0 && (d.x = 0),
    d.y === 1 / 0 && (d.y = 0),
    d
}
function applyConstraints(s, {min: e, max: i}, o) {
    return e !== void 0 && s < e ? s = o ? mixNumber$1(e, s, o.min) : Math.max(s, e) : i !== void 0 && s > i && (s = o ? mixNumber$1(i, s, o.max) : Math.min(s, i)),
    s
}
function calcRelativeAxisConstraints(s, e, i) {
    return {
        min: e !== void 0 ? s.min + e : void 0,
        max: i !== void 0 ? s.max + i - (s.max - s.min) : void 0
    }
}
function calcRelativeConstraints(s, {top: e, left: i, bottom: o, right: a}) {
    return {
        x: calcRelativeAxisConstraints(s.x, i, a),
        y: calcRelativeAxisConstraints(s.y, e, o)
    }
}
function calcViewportAxisConstraints(s, e) {
    let i = e.min - s.min
      , o = e.max - s.max;
    return e.max - e.min < s.max - s.min && ([i,o] = [o, i]),
    {
        min: i,
        max: o
    }
}
function calcViewportConstraints(s, e) {
    return {
        x: calcViewportAxisConstraints(s.x, e.x),
        y: calcViewportAxisConstraints(s.y, e.y)
    }
}
function calcOrigin(s, e) {
    let i = .5;
    const o = calcLength(s)
      , a = calcLength(e);
    return a > o ? i = progress(e.min, e.max - o, s.min) : o > a && (i = progress(s.min, s.max - a, e.min)),
    clamp$1(0, 1, i)
}
function rebaseAxisConstraints(s, e) {
    const i = {};
    return e.min !== void 0 && (i.min = e.min - s.min),
    e.max !== void 0 && (i.max = e.max - s.min),
    i
}
const defaultElastic = .35;
function resolveDragElastic(s=defaultElastic) {
    return s === !1 ? s = 0 : s === !0 && (s = defaultElastic),
    {
        x: resolveAxisElastic(s, "left", "right"),
        y: resolveAxisElastic(s, "top", "bottom")
    }
}
function resolveAxisElastic(s, e, i) {
    return {
        min: resolvePointElastic(s, e),
        max: resolvePointElastic(s, i)
    }
}
function resolvePointElastic(s, e) {
    return typeof s == "number" ? s : s[e] || 0
}
const elementDragControls = new WeakMap;
class VisualElementDragControls {
    constructor(e) {
        this.openDragLock = null,
        this.isDragging = !1,
        this.currentDirection = null,
        this.originPoint = {
            x: 0,
            y: 0
        },
        this.constraints = !1,
        this.hasMutatedConstraints = !1,
        this.elastic = createBox(),
        this.visualElement = e
    }
    start(e, {snapToCursor: i=!1}={}) {
        const {presenceContext: o} = this.visualElement;
        if (o && o.isPresent === !1)
            return;
        const a = _ => {
            const {dragSnapToOrigin: $} = this.getProps();
            $ ? this.pauseAnimation() : this.stopAnimation(),
            i && this.snapToCursor(extractEventInfo(_).point)
        }
          , c = (_, $) => {
            const {drag: _e, dragPropagation: tt, onDragStart: rt} = this.getProps();
            if (_e && !tt && (this.openDragLock && this.openDragLock(),
            this.openDragLock = setDragLock(_e),
            !this.openDragLock))
                return;
            this.isDragging = !0,
            this.currentDirection = null,
            this.resolveConstraints(),
            this.visualElement.projection && (this.visualElement.projection.isAnimationBlocked = !0,
            this.visualElement.projection.target = void 0),
            eachAxis(it => {
                let st = this.getAxisMotionValue(it).get() || 0;
                if (percent.test(st)) {
                    const {projection: nt} = this.visualElement;
                    if (nt && nt.layout) {
                        const lt = nt.layout.layoutBox[it];
                        lt && (st = calcLength(lt) * (parseFloat(st) / 100))
                    }
                }
                this.originPoint[it] = st
            }
            ),
            rt && frame.postRender( () => rt(_, $)),
            addValueToWillChange(this.visualElement, "transform");
            const {animationState: et} = this.visualElement;
            et && et.setActive("whileDrag", !0)
        }
          , d = (_, $) => {
            const {dragPropagation: _e, dragDirectionLock: tt, onDirectionLock: rt, onDrag: et} = this.getProps();
            if (!_e && !this.openDragLock)
                return;
            const {offset: it} = $;
            if (tt && this.currentDirection === null) {
                this.currentDirection = getCurrentDirection(it),
                this.currentDirection !== null && rt && rt(this.currentDirection);
                return
            }
            this.updateAxis("x", $.point, it),
            this.updateAxis("y", $.point, it),
            this.visualElement.render(),
            et && et(_, $)
        }
          , h = (_, $) => this.stop(_, $)
          , g = () => eachAxis(_ => {
            var $;
            return this.getAnimationState(_) === "paused" && (($ = this.getAxisMotionValue(_).animation) == null ? void 0 : $.play())
        }
        )
          , {dragSnapToOrigin: b} = this.getProps();
        this.panSession = new PanSession(e,{
            onSessionStart: a,
            onStart: c,
            onMove: d,
            onSessionEnd: h,
            resumeAnimation: g
        },{
            transformPagePoint: this.visualElement.getTransformPagePoint(),
            dragSnapToOrigin: b,
            contextWindow: getContextWindow(this.visualElement)
        })
    }
    stop(e, i) {
        const o = this.isDragging;
        if (this.cancel(),
        !o)
            return;
        const {velocity: a} = i;
        this.startAnimation(a);
        const {onDragEnd: c} = this.getProps();
        c && frame.postRender( () => c(e, i))
    }
    cancel() {
        this.isDragging = !1;
        const {projection: e, animationState: i} = this.visualElement;
        e && (e.isAnimationBlocked = !1),
        this.panSession && this.panSession.end(),
        this.panSession = void 0;
        const {dragPropagation: o} = this.getProps();
        !o && this.openDragLock && (this.openDragLock(),
        this.openDragLock = null),
        i && i.setActive("whileDrag", !1)
    }
    updateAxis(e, i, o) {
        const {drag: a} = this.getProps();
        if (!o || !shouldDrag(e, a, this.currentDirection))
            return;
        const c = this.getAxisMotionValue(e);
        let d = this.originPoint[e] + o[e];
        this.constraints && this.constraints[e] && (d = applyConstraints(d, this.constraints[e], this.elastic[e])),
        c.set(d)
    }
    resolveConstraints() {
        var c;
        const {dragConstraints: e, dragElastic: i} = this.getProps()
          , o = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(!1) : (c = this.visualElement.projection) == null ? void 0 : c.layout
          , a = this.constraints;
        e && isRefObject(e) ? this.constraints || (this.constraints = this.resolveRefConstraints()) : e && o ? this.constraints = calcRelativeConstraints(o.layoutBox, e) : this.constraints = !1,
        this.elastic = resolveDragElastic(i),
        a !== this.constraints && o && this.constraints && !this.hasMutatedConstraints && eachAxis(d => {
            this.constraints !== !1 && this.getAxisMotionValue(d) && (this.constraints[d] = rebaseAxisConstraints(o.layoutBox[d], this.constraints[d]))
        }
        )
    }
    resolveRefConstraints() {
        const {dragConstraints: e, onMeasureDragConstraints: i} = this.getProps();
        if (!e || !isRefObject(e))
            return !1;
        const o = e.current
          , {projection: a} = this.visualElement;
        if (!a || !a.layout)
            return !1;
        const c = measurePageBox(o, a.root, this.visualElement.getTransformPagePoint());
        let d = calcViewportConstraints(a.layout.layoutBox, c);
        if (i) {
            const h = i(convertBoxToBoundingBox(d));
            this.hasMutatedConstraints = !!h,
            h && (d = convertBoundingBoxToBox(h))
        }
        return d
    }
    startAnimation(e) {
        const {drag: i, dragMomentum: o, dragElastic: a, dragTransition: c, dragSnapToOrigin: d, onDragTransitionEnd: h} = this.getProps()
          , g = this.constraints || {}
          , b = eachAxis(_ => {
            if (!shouldDrag(_, i, this.currentDirection))
                return;
            let $ = g && g[_] || {};
            d && ($ = {
                min: 0,
                max: 0
            });
            const _e = a ? 200 : 1e6
              , tt = a ? 40 : 1e7
              , rt = {
                type: "inertia",
                velocity: o ? e[_] : 0,
                bounceStiffness: _e,
                bounceDamping: tt,
                timeConstant: 750,
                restDelta: 1,
                restSpeed: 10,
                ...c,
                ...$
            };
            return this.startAxisValueAnimation(_, rt)
        }
        );
        return Promise.all(b).then(h)
    }
    startAxisValueAnimation(e, i) {
        const o = this.getAxisMotionValue(e);
        return addValueToWillChange(this.visualElement, e),
        o.start(animateMotionValue(e, o, 0, i, this.visualElement, !1))
    }
    stopAnimation() {
        eachAxis(e => this.getAxisMotionValue(e).stop())
    }
    pauseAnimation() {
        eachAxis(e => {
            var i;
            return (i = this.getAxisMotionValue(e).animation) == null ? void 0 : i.pause()
        }
        )
    }
    getAnimationState(e) {
        var i;
        return (i = this.getAxisMotionValue(e).animation) == null ? void 0 : i.state
    }
    getAxisMotionValue(e) {
        const i = `_drag${e.toUpperCase()}`
          , o = this.visualElement.getProps()
          , a = o[i];
        return a || this.visualElement.getValue(e, (o.initial ? o.initial[e] : void 0) || 0)
    }
    snapToCursor(e) {
        eachAxis(i => {
            const {drag: o} = this.getProps();
            if (!shouldDrag(i, o, this.currentDirection))
                return;
            const {projection: a} = this.visualElement
              , c = this.getAxisMotionValue(i);
            if (a && a.layout) {
                const {min: d, max: h} = a.layout.layoutBox[i];
                c.set(e[i] - mixNumber$1(d, h, .5))
            }
        }
        )
    }
    scalePositionWithinConstraints() {
        if (!this.visualElement.current)
            return;
        const {drag: e, dragConstraints: i} = this.getProps()
          , {projection: o} = this.visualElement;
        if (!isRefObject(i) || !o || !this.constraints)
            return;
        this.stopAnimation();
        const a = {
            x: 0,
            y: 0
        };
        eachAxis(d => {
            const h = this.getAxisMotionValue(d);
            if (h && this.constraints !== !1) {
                const g = h.get();
                a[d] = calcOrigin({
                    min: g,
                    max: g
                }, this.constraints[d])
            }
        }
        );
        const {transformTemplate: c} = this.visualElement.getProps();
        this.visualElement.current.style.transform = c ? c({}, "") : "none",
        o.root && o.root.updateScroll(),
        o.updateLayout(),
        this.resolveConstraints(),
        eachAxis(d => {
            if (!shouldDrag(d, e, null))
                return;
            const h = this.getAxisMotionValue(d)
              , {min: g, max: b} = this.constraints[d];
            h.set(mixNumber$1(g, b, a[d]))
        }
        )
    }
    addListeners() {
        if (!this.visualElement.current)
            return;
        elementDragControls.set(this.visualElement, this);
        const e = this.visualElement.current
          , i = addPointerEvent(e, "pointerdown", g => {
            const {drag: b, dragListener: _=!0} = this.getProps();
            b && _ && this.start(g)
        }
        )
          , o = () => {
            const {dragConstraints: g} = this.getProps();
            isRefObject(g) && g.current && (this.constraints = this.resolveRefConstraints())
        }
          , {projection: a} = this.visualElement
          , c = a.addEventListener("measure", o);
        a && !a.layout && (a.root && a.root.updateScroll(),
        a.updateLayout()),
        frame.read(o);
        const d = addDomEvent(window, "resize", () => this.scalePositionWithinConstraints())
          , h = a.addEventListener("didUpdate", ({delta: g, hasLayoutChanged: b}) => {
            this.isDragging && b && (eachAxis(_ => {
                const $ = this.getAxisMotionValue(_);
                $ && (this.originPoint[_] += g[_].translate,
                $.set($.get() + g[_].translate))
            }
            ),
            this.visualElement.render())
        }
        );
        return () => {
            d(),
            i(),
            c(),
            h && h()
        }
    }
    getProps() {
        const e = this.visualElement.getProps()
          , {drag: i=!1, dragDirectionLock: o=!1, dragPropagation: a=!1, dragConstraints: c=!1, dragElastic: d=defaultElastic, dragMomentum: h=!0} = e;
        return {
            ...e,
            drag: i,
            dragDirectionLock: o,
            dragPropagation: a,
            dragConstraints: c,
            dragElastic: d,
            dragMomentum: h
        }
    }
}
function shouldDrag(s, e, i) {
    return (e === !0 || e === s) && (i === null || i === s)
}
function getCurrentDirection(s, e=10) {
    let i = null;
    return Math.abs(s.y) > e ? i = "y" : Math.abs(s.x) > e && (i = "x"),
    i
}
class DragGesture extends Feature {
    constructor(e) {
        super(e),
        this.removeGroupControls = noop,
        this.removeListeners = noop,
        this.controls = new VisualElementDragControls(e)
    }
    mount() {
        const {dragControls: e} = this.node.getProps();
        e && (this.removeGroupControls = e.subscribe(this.controls)),
        this.removeListeners = this.controls.addListeners() || noop
    }
    unmount() {
        this.removeGroupControls(),
        this.removeListeners()
    }
}
const asyncHandler = s => (e, i) => {
    s && frame.postRender( () => s(e, i))
}
;
class PanGesture extends Feature {
    constructor() {
        super(...arguments),
        this.removePointerDownListener = noop
    }
    onPointerDown(e) {
        this.session = new PanSession(e,this.createPanHandlers(),{
            transformPagePoint: this.node.getTransformPagePoint(),
            contextWindow: getContextWindow(this.node)
        })
    }
    createPanHandlers() {
        const {onPanSessionStart: e, onPanStart: i, onPan: o, onPanEnd: a} = this.node.getProps();
        return {
            onSessionStart: asyncHandler(e),
            onStart: asyncHandler(i),
            onMove: o,
            onEnd: (c, d) => {
                delete this.session,
                a && frame.postRender( () => a(c, d))
            }
        }
    }
    mount() {
        this.removePointerDownListener = addPointerEvent(this.node.current, "pointerdown", e => this.onPointerDown(e))
    }
    update() {
        this.session && this.session.updateHandlers(this.createPanHandlers())
    }
    unmount() {
        this.removePointerDownListener(),
        this.session && this.session.end()
    }
}
const globalProjectionState = {
    hasAnimatedSinceResize: !0,
    hasEverUpdated: !1
};
function pixelsToPercent(s, e) {
    return e.max === e.min ? 0 : s / (e.max - e.min) * 100
}
const correctBorderRadius = {
    correct: (s, e) => {
        if (!e.target)
            return s;
        if (typeof s == "string")
            if (px.test(s))
                s = parseFloat(s);
            else
                return s;
        const i = pixelsToPercent(s, e.target.x)
          , o = pixelsToPercent(s, e.target.y);
        return `${i}% ${o}%`
    }
}
  , correctBoxShadow = {
    correct: (s, {treeScale: e, projectionDelta: i}) => {
        const o = s
          , a = complex.parse(s);
        if (a.length > 5)
            return o;
        const c = complex.createTransformer(s)
          , d = typeof a[0] != "number" ? 1 : 0
          , h = i.x.scale * e.x
          , g = i.y.scale * e.y;
        a[0 + d] /= h,
        a[1 + d] /= g;
        const b = mixNumber$1(h, g, .5);
        return typeof a[2 + d] == "number" && (a[2 + d] /= b),
        typeof a[3 + d] == "number" && (a[3 + d] /= b),
        c(a)
    }
};
class MeasureLayoutWithContext extends reactExports.Component {
    componentDidMount() {
        const {visualElement: e, layoutGroup: i, switchLayoutGroup: o, layoutId: a} = this.props
          , {projection: c} = e;
        addScaleCorrector(defaultScaleCorrectors),
        c && (i.group && i.group.add(c),
        o && o.register && a && o.register(c),
        c.root.didUpdate(),
        c.addEventListener("animationComplete", () => {
            this.safeToRemove()
        }
        ),
        c.setOptions({
            ...c.options,
            onExitComplete: () => this.safeToRemove()
        })),
        globalProjectionState.hasEverUpdated = !0
    }
    getSnapshotBeforeUpdate(e) {
        const {layoutDependency: i, visualElement: o, drag: a, isPresent: c} = this.props
          , {projection: d} = o;
        return d && (d.isPresent = c,
        a || e.layoutDependency !== i || i === void 0 || e.isPresent !== c ? d.willUpdate() : this.safeToRemove(),
        e.isPresent !== c && (c ? d.promote() : d.relegate() || frame.postRender( () => {
            const h = d.getStack();
            (!h || !h.members.length) && this.safeToRemove()
        }
        ))),
        null
    }
    componentDidUpdate() {
        const {projection: e} = this.props.visualElement;
        e && (e.root.didUpdate(),
        microtask.postRender( () => {
            !e.currentAnimation && e.isLead() && this.safeToRemove()
        }
        ))
    }
    componentWillUnmount() {
        const {visualElement: e, layoutGroup: i, switchLayoutGroup: o} = this.props
          , {projection: a} = e;
        a && (a.scheduleCheckAfterUnmount(),
        i && i.group && i.group.remove(a),
        o && o.deregister && o.deregister(a))
    }
    safeToRemove() {
        const {safeToRemove: e} = this.props;
        e && e()
    }
    render() {
        return null
    }
}
function MeasureLayout(s) {
    const [e,i] = usePresence()
      , o = reactExports.useContext(LayoutGroupContext);
    return jsxRuntimeExports.jsx(MeasureLayoutWithContext, {
        ...s,
        layoutGroup: o,
        switchLayoutGroup: reactExports.useContext(SwitchLayoutGroupContext),
        isPresent: e,
        safeToRemove: i
    })
}
const defaultScaleCorrectors = {
    borderRadius: {
        ...correctBorderRadius,
        applyTo: ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomLeftRadius", "borderBottomRightRadius"]
    },
    borderTopLeftRadius: correctBorderRadius,
    borderTopRightRadius: correctBorderRadius,
    borderBottomLeftRadius: correctBorderRadius,
    borderBottomRightRadius: correctBorderRadius,
    boxShadow: correctBoxShadow
};
function animateSingleValue(s, e, i) {
    const o = isMotionValue(s) ? s : motionValue(s);
    return o.start(animateMotionValue("", o, e, i)),
    o.animation
}
const compareByDepth = (s, e) => s.depth - e.depth;
class FlatTree {
    constructor() {
        this.children = [],
        this.isDirty = !1
    }
    add(e) {
        addUniqueItem(this.children, e),
        this.isDirty = !0
    }
    remove(e) {
        removeItem(this.children, e),
        this.isDirty = !0
    }
    forEach(e) {
        this.isDirty && this.children.sort(compareByDepth),
        this.isDirty = !1,
        this.children.forEach(e)
    }
}
function delay(s, e) {
    const i = time.now()
      , o = ({timestamp: a}) => {
        const c = a - i;
        c >= e && (cancelFrame(o),
        s(c - e))
    }
    ;
    return frame.setup(o, !0),
    () => cancelFrame(o)
}
const borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"]
  , numBorders = borders.length
  , asNumber = s => typeof s == "string" ? parseFloat(s) : s
  , isPx = s => typeof s == "number" || px.test(s);
function mixValues(s, e, i, o, a, c) {
    a ? (s.opacity = mixNumber$1(0, i.opacity ?? 1, easeCrossfadeIn(o)),
    s.opacityExit = mixNumber$1(e.opacity ?? 1, 0, easeCrossfadeOut(o))) : c && (s.opacity = mixNumber$1(e.opacity ?? 1, i.opacity ?? 1, o));
    for (let d = 0; d < numBorders; d++) {
        const h = `border${borders[d]}Radius`;
        let g = getRadius(e, h)
          , b = getRadius(i, h);
        if (g === void 0 && b === void 0)
            continue;
        g || (g = 0),
        b || (b = 0),
        g === 0 || b === 0 || isPx(g) === isPx(b) ? (s[h] = Math.max(mixNumber$1(asNumber(g), asNumber(b), o), 0),
        (percent.test(b) || percent.test(g)) && (s[h] += "%")) : s[h] = b
    }
    (e.rotate || i.rotate) && (s.rotate = mixNumber$1(e.rotate || 0, i.rotate || 0, o))
}
function getRadius(s, e) {
    return s[e] !== void 0 ? s[e] : s.borderRadius
}
const easeCrossfadeIn = compress(0, .5, circOut)
  , easeCrossfadeOut = compress(.5, .95, noop);
function compress(s, e, i) {
    return o => o < s ? 0 : o > e ? 1 : i(progress(s, e, o))
}
function copyAxisInto(s, e) {
    s.min = e.min,
    s.max = e.max
}
function copyBoxInto(s, e) {
    copyAxisInto(s.x, e.x),
    copyAxisInto(s.y, e.y)
}
function copyAxisDeltaInto(s, e) {
    s.translate = e.translate,
    s.scale = e.scale,
    s.originPoint = e.originPoint,
    s.origin = e.origin
}
function removePointDelta(s, e, i, o, a) {
    return s -= e,
    s = scalePoint(s, 1 / i, o),
    a !== void 0 && (s = scalePoint(s, 1 / a, o)),
    s
}
function removeAxisDelta(s, e=0, i=1, o=.5, a, c=s, d=s) {
    if (percent.test(e) && (e = parseFloat(e),
    e = mixNumber$1(d.min, d.max, e / 100) - d.min),
    typeof e != "number")
        return;
    let h = mixNumber$1(c.min, c.max, o);
    s === c && (h -= e),
    s.min = removePointDelta(s.min, e, i, h, a),
    s.max = removePointDelta(s.max, e, i, h, a)
}
function removeAxisTransforms(s, e, [i,o,a], c, d) {
    removeAxisDelta(s, e[i], e[o], e[a], e.scale, c, d)
}
const xKeys = ["x", "scaleX", "originX"]
  , yKeys = ["y", "scaleY", "originY"];
function removeBoxTransforms(s, e, i, o) {
    removeAxisTransforms(s.x, e, xKeys, i ? i.x : void 0, o ? o.x : void 0),
    removeAxisTransforms(s.y, e, yKeys, i ? i.y : void 0, o ? o.y : void 0)
}
function isAxisDeltaZero(s) {
    return s.translate === 0 && s.scale === 1
}
function isDeltaZero(s) {
    return isAxisDeltaZero(s.x) && isAxisDeltaZero(s.y)
}
function axisEquals(s, e) {
    return s.min === e.min && s.max === e.max
}
function boxEquals(s, e) {
    return axisEquals(s.x, e.x) && axisEquals(s.y, e.y)
}
function axisEqualsRounded(s, e) {
    return Math.round(s.min) === Math.round(e.min) && Math.round(s.max) === Math.round(e.max)
}
function boxEqualsRounded(s, e) {
    return axisEqualsRounded(s.x, e.x) && axisEqualsRounded(s.y, e.y)
}
function aspectRatio(s) {
    return calcLength(s.x) / calcLength(s.y)
}
function axisDeltaEquals(s, e) {
    return s.translate === e.translate && s.scale === e.scale && s.originPoint === e.originPoint
}
class NodeStack {
    constructor() {
        this.members = []
    }
    add(e) {
        addUniqueItem(this.members, e),
        e.scheduleRender()
    }
    remove(e) {
        if (removeItem(this.members, e),
        e === this.prevLead && (this.prevLead = void 0),
        e === this.lead) {
            const i = this.members[this.members.length - 1];
            i && this.promote(i)
        }
    }
    relegate(e) {
        const i = this.members.findIndex(a => e === a);
        if (i === 0)
            return !1;
        let o;
        for (let a = i; a >= 0; a--) {
            const c = this.members[a];
            if (c.isPresent !== !1) {
                o = c;
                break
            }
        }
        return o ? (this.promote(o),
        !0) : !1
    }
    promote(e, i) {
        const o = this.lead;
        if (e !== o && (this.prevLead = o,
        this.lead = e,
        e.show(),
        o)) {
            o.instance && o.scheduleRender(),
            e.scheduleRender(),
            e.resumeFrom = o,
            i && (e.resumeFrom.preserveOpacity = !0),
            o.snapshot && (e.snapshot = o.snapshot,
            e.snapshot.latestValues = o.animationValues || o.latestValues),
            e.root && e.root.isUpdating && (e.isLayoutDirty = !0);
            const {crossfade: a} = e.options;
            a === !1 && o.hide()
        }
    }
    exitAnimationComplete() {
        this.members.forEach(e => {
            const {options: i, resumingFrom: o} = e;
            i.onExitComplete && i.onExitComplete(),
            o && o.options.onExitComplete && o.options.onExitComplete()
        }
        )
    }
    scheduleRender() {
        this.members.forEach(e => {
            e.instance && e.scheduleRender(!1)
        }
        )
    }
    removeLeadSnapshot() {
        this.lead && this.lead.snapshot && (this.lead.snapshot = void 0)
    }
}
function buildProjectionTransform(s, e, i) {
    let o = "";
    const a = s.x.translate / e.x
      , c = s.y.translate / e.y
      , d = (i == null ? void 0 : i.z) || 0;
    if ((a || c || d) && (o = `translate3d(${a}px, ${c}px, ${d}px) `),
    (e.x !== 1 || e.y !== 1) && (o += `scale(${1 / e.x}, ${1 / e.y}) `),
    i) {
        const {transformPerspective: b, rotate: _, rotateX: $, rotateY: _e, skewX: tt, skewY: rt} = i;
        b && (o = `perspective(${b}px) ${o}`),
        _ && (o += `rotate(${_}deg) `),
        $ && (o += `rotateX(${$}deg) `),
        _e && (o += `rotateY(${_e}deg) `),
        tt && (o += `skewX(${tt}deg) `),
        rt && (o += `skewY(${rt}deg) `)
    }
    const h = s.x.scale * e.x
      , g = s.y.scale * e.y;
    return (h !== 1 || g !== 1) && (o += `scale(${h}, ${g})`),
    o || "none"
}
const transformAxes = ["", "X", "Y", "Z"]
  , hiddenVisibility = {
    visibility: "hidden"
}
  , animationTarget = 1e3;
let id = 0;
function resetDistortingTransform(s, e, i, o) {
    const {latestValues: a} = e;
    a[s] && (i[s] = a[s],
    e.setStaticValue(s, 0),
    o && (o[s] = 0))
}
function cancelTreeOptimisedTransformAnimations(s) {
    if (s.hasCheckedOptimisedAppear = !0,
    s.root === s)
        return;
    const {visualElement: e} = s.options;
    if (!e)
        return;
    const i = getOptimisedAppearId(e);
    if (window.MotionHasOptimisedAnimation(i, "transform")) {
        const {layout: a, layoutId: c} = s.options;
        window.MotionCancelOptimisedAnimation(i, "transform", frame, !(a || c))
    }
    const {parent: o} = s;
    o && !o.hasCheckedOptimisedAppear && cancelTreeOptimisedTransformAnimations(o)
}
function createProjectionNode({attachResizeListener: s, defaultParent: e, measureScroll: i, checkIsScrollRoot: o, resetTransform: a}) {
    return class {
        constructor(d={}, h=e == null ? void 0 : e()) {
            this.id = id++,
            this.animationId = 0,
            this.children = new Set,
            this.options = {},
            this.isTreeAnimating = !1,
            this.isAnimationBlocked = !1,
            this.isLayoutDirty = !1,
            this.isProjectionDirty = !1,
            this.isSharedProjectionDirty = !1,
            this.isTransformDirty = !1,
            this.updateManuallyBlocked = !1,
            this.updateBlockedByResize = !1,
            this.isUpdating = !1,
            this.isSVG = !1,
            this.needsReset = !1,
            this.shouldResetTransform = !1,
            this.hasCheckedOptimisedAppear = !1,
            this.treeScale = {
                x: 1,
                y: 1
            },
            this.eventHandlers = new Map,
            this.hasTreeAnimated = !1,
            this.updateScheduled = !1,
            this.scheduleUpdate = () => this.update(),
            this.projectionUpdateScheduled = !1,
            this.checkUpdateFailed = () => {
                this.isUpdating && (this.isUpdating = !1,
                this.clearAllSnapshots())
            }
            ,
            this.updateProjection = () => {
                this.projectionUpdateScheduled = !1,
                this.nodes.forEach(propagateDirtyNodes),
                this.nodes.forEach(resolveTargetDelta),
                this.nodes.forEach(calcProjection),
                this.nodes.forEach(cleanDirtyNodes)
            }
            ,
            this.resolvedRelativeTargetAt = 0,
            this.hasProjected = !1,
            this.isVisible = !0,
            this.animationProgress = 0,
            this.sharedNodes = new Map,
            this.latestValues = d,
            this.root = h ? h.root || h : this,
            this.path = h ? [...h.path, h] : [],
            this.parent = h,
            this.depth = h ? h.depth + 1 : 0;
            for (let g = 0; g < this.path.length; g++)
                this.path[g].shouldResetTransform = !0;
            this.root === this && (this.nodes = new FlatTree)
        }
        addEventListener(d, h) {
            return this.eventHandlers.has(d) || this.eventHandlers.set(d, new SubscriptionManager),
            this.eventHandlers.get(d).add(h)
        }
        notifyListeners(d, ...h) {
            const g = this.eventHandlers.get(d);
            g && g.notify(...h)
        }
        hasListeners(d) {
            return this.eventHandlers.has(d)
        }
        mount(d) {
            if (this.instance)
                return;
            this.isSVG = isSVGElement(d) && !isSVGSVGElement(d),
            this.instance = d;
            const {layoutId: h, layout: g, visualElement: b} = this.options;
            if (b && !b.current && b.mount(d),
            this.root.nodes.add(this),
            this.parent && this.parent.children.add(this),
            this.root.hasTreeAnimated && (g || h) && (this.isLayoutDirty = !0),
            s) {
                let _;
                const $ = () => this.root.updateBlockedByResize = !1;
                s(d, () => {
                    this.root.updateBlockedByResize = !0,
                    _ && _(),
                    _ = delay($, 250),
                    globalProjectionState.hasAnimatedSinceResize && (globalProjectionState.hasAnimatedSinceResize = !1,
                    this.nodes.forEach(finishAnimation))
                }
                )
            }
            h && this.root.registerSharedNode(h, this),
            this.options.animate !== !1 && b && (h || g) && this.addEventListener("didUpdate", ({delta: _, hasLayoutChanged: $, hasRelativeLayoutChanged: _e, layout: tt}) => {
                if (this.isTreeAnimationBlocked()) {
                    this.target = void 0,
                    this.relativeTarget = void 0;
                    return
                }
                const rt = this.options.transition || b.getDefaultTransition() || defaultLayoutTransition
                  , {onLayoutAnimationStart: et, onLayoutAnimationComplete: it} = b.getProps()
                  , st = !this.targetLayout || !boxEqualsRounded(this.targetLayout, tt)
                  , nt = !$ && _e;
                if (this.options.layoutRoot || this.resumeFrom || nt || $ && (st || !this.currentAnimation)) {
                    this.resumeFrom && (this.resumingFrom = this.resumeFrom,
                    this.resumingFrom.resumingFrom = void 0);
                    const lt = {
                        ...getValueTransition(rt, "layout"),
                        onPlay: et,
                        onComplete: it
                    };
                    (b.shouldReduceMotion || this.options.layoutRoot) && (lt.delay = 0,
                    lt.type = !1),
                    this.startAnimation(lt),
                    this.setAnimationOrigin(_, nt)
                } else
                    $ || finishAnimation(this),
                    this.isLead() && this.options.onExitComplete && this.options.onExitComplete();
                this.targetLayout = tt
            }
            )
        }
        unmount() {
            this.options.layoutId && this.willUpdate(),
            this.root.nodes.remove(this);
            const d = this.getStack();
            d && d.remove(this),
            this.parent && this.parent.children.delete(this),
            this.instance = void 0,
            this.eventHandlers.clear(),
            cancelFrame(this.updateProjection)
        }
        blockUpdate() {
            this.updateManuallyBlocked = !0
        }
        unblockUpdate() {
            this.updateManuallyBlocked = !1
        }
        isUpdateBlocked() {
            return this.updateManuallyBlocked || this.updateBlockedByResize
        }
        isTreeAnimationBlocked() {
            return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || !1
        }
        startUpdate() {
            this.isUpdateBlocked() || (this.isUpdating = !0,
            this.nodes && this.nodes.forEach(resetSkewAndRotation),
            this.animationId++)
        }
        getTransformTemplate() {
            const {visualElement: d} = this.options;
            return d && d.getProps().transformTemplate
        }
        willUpdate(d=!0) {
            if (this.root.hasTreeAnimated = !0,
            this.root.isUpdateBlocked()) {
                this.options.onExitComplete && this.options.onExitComplete();
                return
            }
            if (window.MotionCancelOptimisedAnimation && !this.hasCheckedOptimisedAppear && cancelTreeOptimisedTransformAnimations(this),
            !this.root.isUpdating && this.root.startUpdate(),
            this.isLayoutDirty)
                return;
            this.isLayoutDirty = !0;
            for (let _ = 0; _ < this.path.length; _++) {
                const $ = this.path[_];
                $.shouldResetTransform = !0,
                $.updateScroll("snapshot"),
                $.options.layoutRoot && $.willUpdate(!1)
            }
            const {layoutId: h, layout: g} = this.options;
            if (h === void 0 && !g)
                return;
            const b = this.getTransformTemplate();
            this.prevTransformTemplateValue = b ? b(this.latestValues, "") : void 0,
            this.updateSnapshot(),
            d && this.notifyListeners("willUpdate")
        }
        update() {
            if (this.updateScheduled = !1,
            this.isUpdateBlocked()) {
                this.unblockUpdate(),
                this.clearAllSnapshots(),
                this.nodes.forEach(clearMeasurements);
                return
            }
            this.isUpdating || this.nodes.forEach(clearIsLayoutDirty),
            this.isUpdating = !1,
            this.nodes.forEach(resetTransformStyle),
            this.nodes.forEach(updateLayout),
            this.nodes.forEach(notifyLayoutUpdate),
            this.clearAllSnapshots();
            const h = time.now();
            frameData.delta = clamp$1(0, 1e3 / 60, h - frameData.timestamp),
            frameData.timestamp = h,
            frameData.isProcessing = !0,
            frameSteps.update.process(frameData),
            frameSteps.preRender.process(frameData),
            frameSteps.render.process(frameData),
            frameData.isProcessing = !1
        }
        didUpdate() {
            this.updateScheduled || (this.updateScheduled = !0,
            microtask.read(this.scheduleUpdate))
        }
        clearAllSnapshots() {
            this.nodes.forEach(clearSnapshot),
            this.sharedNodes.forEach(removeLeadSnapshots)
        }
        scheduleUpdateProjection() {
            this.projectionUpdateScheduled || (this.projectionUpdateScheduled = !0,
            frame.preRender(this.updateProjection, !1, !0))
        }
        scheduleCheckAfterUnmount() {
            frame.postRender( () => {
                this.isLayoutDirty ? this.root.didUpdate() : this.root.checkUpdateFailed()
            }
            )
        }
        updateSnapshot() {
            this.snapshot || !this.instance || (this.snapshot = this.measure(),
            this.snapshot && !calcLength(this.snapshot.measuredBox.x) && !calcLength(this.snapshot.measuredBox.y) && (this.snapshot = void 0))
        }
        updateLayout() {
            if (!this.instance || (this.updateScroll(),
            !(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty))
                return;
            if (this.resumeFrom && !this.resumeFrom.instance)
                for (let g = 0; g < this.path.length; g++)
                    this.path[g].updateScroll();
            const d = this.layout;
            this.layout = this.measure(!1),
            this.layoutCorrected = createBox(),
            this.isLayoutDirty = !1,
            this.projectionDelta = void 0,
            this.notifyListeners("measure", this.layout.layoutBox);
            const {visualElement: h} = this.options;
            h && h.notify("LayoutMeasure", this.layout.layoutBox, d ? d.layoutBox : void 0)
        }
        updateScroll(d="measure") {
            let h = !!(this.options.layoutScroll && this.instance);
            if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === d && (h = !1),
            h && this.instance) {
                const g = o(this.instance);
                this.scroll = {
                    animationId: this.root.animationId,
                    phase: d,
                    isRoot: g,
                    offset: i(this.instance),
                    wasRoot: this.scroll ? this.scroll.isRoot : g
                }
            }
        }
        resetTransform() {
            if (!a)
                return;
            const d = this.isLayoutDirty || this.shouldResetTransform || this.options.alwaysMeasureLayout
              , h = this.projectionDelta && !isDeltaZero(this.projectionDelta)
              , g = this.getTransformTemplate()
              , b = g ? g(this.latestValues, "") : void 0
              , _ = b !== this.prevTransformTemplateValue;
            d && this.instance && (h || hasTransform(this.latestValues) || _) && (a(this.instance, b),
            this.shouldResetTransform = !1,
            this.scheduleRender())
        }
        measure(d=!0) {
            const h = this.measurePageBox();
            let g = this.removeElementScroll(h);
            return d && (g = this.removeTransform(g)),
            roundBox(g),
            {
                animationId: this.root.animationId,
                measuredBox: h,
                layoutBox: g,
                latestValues: {},
                source: this.id
            }
        }
        measurePageBox() {
            var b;
            const {visualElement: d} = this.options;
            if (!d)
                return createBox();
            const h = d.measureViewportBox();
            if (!(((b = this.scroll) == null ? void 0 : b.wasRoot) || this.path.some(checkNodeWasScrollRoot))) {
                const {scroll: _} = this.root;
                _ && (translateAxis(h.x, _.offset.x),
                translateAxis(h.y, _.offset.y))
            }
            return h
        }
        removeElementScroll(d) {
            var g;
            const h = createBox();
            if (copyBoxInto(h, d),
            (g = this.scroll) != null && g.wasRoot)
                return h;
            for (let b = 0; b < this.path.length; b++) {
                const _ = this.path[b]
                  , {scroll: $, options: _e} = _;
                _ !== this.root && $ && _e.layoutScroll && ($.wasRoot && copyBoxInto(h, d),
                translateAxis(h.x, $.offset.x),
                translateAxis(h.y, $.offset.y))
            }
            return h
        }
        applyTransform(d, h=!1) {
            const g = createBox();
            copyBoxInto(g, d);
            for (let b = 0; b < this.path.length; b++) {
                const _ = this.path[b];
                !h && _.options.layoutScroll && _.scroll && _ !== _.root && transformBox(g, {
                    x: -_.scroll.offset.x,
                    y: -_.scroll.offset.y
                }),
                hasTransform(_.latestValues) && transformBox(g, _.latestValues)
            }
            return hasTransform(this.latestValues) && transformBox(g, this.latestValues),
            g
        }
        removeTransform(d) {
            const h = createBox();
            copyBoxInto(h, d);
            for (let g = 0; g < this.path.length; g++) {
                const b = this.path[g];
                if (!b.instance || !hasTransform(b.latestValues))
                    continue;
                hasScale(b.latestValues) && b.updateSnapshot();
                const _ = createBox()
                  , $ = b.measurePageBox();
                copyBoxInto(_, $),
                removeBoxTransforms(h, b.latestValues, b.snapshot ? b.snapshot.layoutBox : void 0, _)
            }
            return hasTransform(this.latestValues) && removeBoxTransforms(h, this.latestValues),
            h
        }
        setTargetDelta(d) {
            this.targetDelta = d,
            this.root.scheduleUpdateProjection(),
            this.isProjectionDirty = !0
        }
        setOptions(d) {
            this.options = {
                ...this.options,
                ...d,
                crossfade: d.crossfade !== void 0 ? d.crossfade : !0
            }
        }
        clearMeasurements() {
            this.scroll = void 0,
            this.layout = void 0,
            this.snapshot = void 0,
            this.prevTransformTemplateValue = void 0,
            this.targetDelta = void 0,
            this.target = void 0,
            this.isLayoutDirty = !1
        }
        forceRelativeParentToResolveTarget() {
            this.relativeParent && this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp && this.relativeParent.resolveTargetDelta(!0)
        }
        resolveTargetDelta(d=!1) {
            var _e;
            const h = this.getLead();
            this.isProjectionDirty || (this.isProjectionDirty = h.isProjectionDirty),
            this.isTransformDirty || (this.isTransformDirty = h.isTransformDirty),
            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = h.isSharedProjectionDirty);
            const g = !!this.resumingFrom || this !== h;
            if (!(d || g && this.isSharedProjectionDirty || this.isProjectionDirty || (_e = this.parent) != null && _e.isProjectionDirty || this.attemptToResolveRelativeTarget || this.root.updateBlockedByResize))
                return;
            const {layout: _, layoutId: $} = this.options;
            if (!(!this.layout || !(_ || $))) {
                if (this.resolvedRelativeTargetAt = frameData.timestamp,
                !this.targetDelta && !this.relativeTarget) {
                    const tt = this.getClosestProjectingParent();
                    tt && tt.layout && this.animationProgress !== 1 ? (this.relativeParent = tt,
                    this.forceRelativeParentToResolveTarget(),
                    this.relativeTarget = createBox(),
                    this.relativeTargetOrigin = createBox(),
                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, tt.layout.layoutBox),
                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0
                }
                if (!(!this.relativeTarget && !this.targetDelta) && (this.target || (this.target = createBox(),
                this.targetWithTransforms = createBox()),
                this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target ? (this.forceRelativeParentToResolveTarget(),
                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target)) : this.targetDelta ? (this.resumingFrom ? this.target = this.applyTransform(this.layout.layoutBox) : copyBoxInto(this.target, this.layout.layoutBox),
                applyBoxDelta(this.target, this.targetDelta)) : copyBoxInto(this.target, this.layout.layoutBox),
                this.attemptToResolveRelativeTarget)) {
                    this.attemptToResolveRelativeTarget = !1;
                    const tt = this.getClosestProjectingParent();
                    tt && !!tt.resumingFrom == !!this.resumingFrom && !tt.options.layoutScroll && tt.target && this.animationProgress !== 1 ? (this.relativeParent = tt,
                    this.forceRelativeParentToResolveTarget(),
                    this.relativeTarget = createBox(),
                    this.relativeTargetOrigin = createBox(),
                    calcRelativePosition(this.relativeTargetOrigin, this.target, tt.target),
                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0
                }
            }
        }
        getClosestProjectingParent() {
            if (!(!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)))
                return this.parent.isProjecting() ? this.parent : this.parent.getClosestProjectingParent()
        }
        isProjecting() {
            return !!((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout)
        }
        calcProjection() {
            var rt;
            const d = this.getLead()
              , h = !!this.resumingFrom || this !== d;
            let g = !0;
            if ((this.isProjectionDirty || (rt = this.parent) != null && rt.isProjectionDirty) && (g = !1),
            h && (this.isSharedProjectionDirty || this.isTransformDirty) && (g = !1),
            this.resolvedRelativeTargetAt === frameData.timestamp && (g = !1),
            g)
                return;
            const {layout: b, layoutId: _} = this.options;
            if (this.isTreeAnimating = !!(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation),
            this.isTreeAnimating || (this.targetDelta = this.relativeTarget = void 0),
            !this.layout || !(b || _))
                return;
            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
            const $ = this.treeScale.x
              , _e = this.treeScale.y;
            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, h),
            d.layout && !d.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1) && (d.target = d.layout.layoutBox,
            d.targetWithTransforms = createBox());
            const {target: tt} = d;
            if (!tt) {
                this.prevProjectionDelta && (this.createProjectionDeltas(),
                this.scheduleRender());
                return
            }
            !this.projectionDelta || !this.prevProjectionDelta ? this.createProjectionDeltas() : (copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x),
            copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y)),
            calcBoxDelta(this.projectionDelta, this.layoutCorrected, tt, this.latestValues),
            (this.treeScale.x !== $ || this.treeScale.y !== _e || !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) || !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) && (this.hasProjected = !0,
            this.scheduleRender(),
            this.notifyListeners("projectionUpdate", tt))
        }
        hide() {
            this.isVisible = !1
        }
        show() {
            this.isVisible = !0
        }
        scheduleRender(d=!0) {
            var h;
            if ((h = this.options.visualElement) == null || h.scheduleRender(),
            d) {
                const g = this.getStack();
                g && g.scheduleRender()
            }
            this.resumingFrom && !this.resumingFrom.instance && (this.resumingFrom = void 0)
        }
        createProjectionDeltas() {
            this.prevProjectionDelta = createDelta(),
            this.projectionDelta = createDelta(),
            this.projectionDeltaWithTransform = createDelta()
        }
        setAnimationOrigin(d, h=!1) {
            const g = this.snapshot
              , b = g ? g.latestValues : {}
              , _ = {
                ...this.latestValues
            }
              , $ = createDelta();
            (!this.relativeParent || !this.relativeParent.options.layoutRoot) && (this.relativeTarget = this.relativeTargetOrigin = void 0),
            this.attemptToResolveRelativeTarget = !h;
            const _e = createBox()
              , tt = g ? g.source : void 0
              , rt = this.layout ? this.layout.source : void 0
              , et = tt !== rt
              , it = this.getStack()
              , st = !it || it.members.length <= 1
              , nt = !!(et && !st && this.options.crossfade === !0 && !this.path.some(hasOpacityCrossfade));
            this.animationProgress = 0;
            let lt;
            this.mixTargetDelta = dt => {
                const ot = dt / 1e3;
                mixAxisDelta($.x, d.x, ot),
                mixAxisDelta($.y, d.y, ot),
                this.setTargetDelta($),
                this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout && (calcRelativePosition(_e, this.layout.layoutBox, this.relativeParent.layout.layoutBox),
                mixBox(this.relativeTarget, this.relativeTargetOrigin, _e, ot),
                lt && boxEquals(this.relativeTarget, lt) && (this.isProjectionDirty = !1),
                lt || (lt = createBox()),
                copyBoxInto(lt, this.relativeTarget)),
                et && (this.animationValues = _,
                mixValues(_, b, this.latestValues, ot, nt, st)),
                this.root.scheduleUpdateProjection(),
                this.scheduleRender(),
                this.animationProgress = ot
            }
            ,
            this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0)
        }
        startAnimation(d) {
            var h, g, b;
            this.notifyListeners("animationStart"),
            (h = this.currentAnimation) == null || h.stop(),
            (b = (g = this.resumingFrom) == null ? void 0 : g.currentAnimation) == null || b.stop(),
            this.pendingAnimation && (cancelFrame(this.pendingAnimation),
            this.pendingAnimation = void 0),
            this.pendingAnimation = frame.update( () => {
                globalProjectionState.hasAnimatedSinceResize = !0,
                this.motionValue || (this.motionValue = motionValue(0)),
                this.currentAnimation = animateSingleValue(this.motionValue, [0, 1e3], {
                    ...d,
                    velocity: 0,
                    isSync: !0,
                    onUpdate: _ => {
                        this.mixTargetDelta(_),
                        d.onUpdate && d.onUpdate(_)
                    }
                    ,
                    onStop: () => {}
                    ,
                    onComplete: () => {
                        d.onComplete && d.onComplete(),
                        this.completeAnimation()
                    }
                }),
                this.resumingFrom && (this.resumingFrom.currentAnimation = this.currentAnimation),
                this.pendingAnimation = void 0
            }
            )
        }
        completeAnimation() {
            this.resumingFrom && (this.resumingFrom.currentAnimation = void 0,
            this.resumingFrom.preserveOpacity = void 0);
            const d = this.getStack();
            d && d.exitAnimationComplete(),
            this.resumingFrom = this.currentAnimation = this.animationValues = void 0,
            this.notifyListeners("animationComplete")
        }
        finishAnimation() {
            this.currentAnimation && (this.mixTargetDelta && this.mixTargetDelta(animationTarget),
            this.currentAnimation.stop()),
            this.completeAnimation()
        }
        applyTransformsToTarget() {
            const d = this.getLead();
            let {targetWithTransforms: h, target: g, layout: b, latestValues: _} = d;
            if (!(!h || !g || !b)) {
                if (this !== d && this.layout && b && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, b.layoutBox)) {
                    g = this.target || createBox();
                    const $ = calcLength(this.layout.layoutBox.x);
                    g.x.min = d.target.x.min,
                    g.x.max = g.x.min + $;
                    const _e = calcLength(this.layout.layoutBox.y);
                    g.y.min = d.target.y.min,
                    g.y.max = g.y.min + _e
                }
                copyBoxInto(h, g),
                transformBox(h, _),
                calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, h, _)
            }
        }
        registerSharedNode(d, h) {
            this.sharedNodes.has(d) || this.sharedNodes.set(d, new NodeStack),
            this.sharedNodes.get(d).add(h);
            const b = h.options.initialPromotionConfig;
            h.promote({
                transition: b ? b.transition : void 0,
                preserveFollowOpacity: b && b.shouldPreserveFollowOpacity ? b.shouldPreserveFollowOpacity(h) : void 0
            })
        }
        isLead() {
            const d = this.getStack();
            return d ? d.lead === this : !0
        }
        getLead() {
            var h;
            const {layoutId: d} = this.options;
            return d ? ((h = this.getStack()) == null ? void 0 : h.lead) || this : this
        }
        getPrevLead() {
            var h;
            const {layoutId: d} = this.options;
            return d ? (h = this.getStack()) == null ? void 0 : h.prevLead : void 0
        }
        getStack() {
            const {layoutId: d} = this.options;
            if (d)
                return this.root.sharedNodes.get(d)
        }
        promote({needsReset: d, transition: h, preserveFollowOpacity: g}={}) {
            const b = this.getStack();
            b && b.promote(this, g),
            d && (this.projectionDelta = void 0,
            this.needsReset = !0),
            h && this.setOptions({
                transition: h
            })
        }
        relegate() {
            const d = this.getStack();
            return d ? d.relegate(this) : !1
        }
        resetSkewAndRotation() {
            const {visualElement: d} = this.options;
            if (!d)
                return;
            let h = !1;
            const {latestValues: g} = d;
            if ((g.z || g.rotate || g.rotateX || g.rotateY || g.rotateZ || g.skewX || g.skewY) && (h = !0),
            !h)
                return;
            const b = {};
            g.z && resetDistortingTransform("z", d, b, this.animationValues);
            for (let _ = 0; _ < transformAxes.length; _++)
                resetDistortingTransform(`rotate${transformAxes[_]}`, d, b, this.animationValues),
                resetDistortingTransform(`skew${transformAxes[_]}`, d, b, this.animationValues);
            d.render();
            for (const _ in b)
                d.setStaticValue(_, b[_]),
                this.animationValues && (this.animationValues[_] = b[_]);
            d.scheduleRender()
        }
        getProjectionStyles(d) {
            if (!this.instance || this.isSVG)
                return;
            if (!this.isVisible)
                return hiddenVisibility;
            const h = {
                visibility: ""
            }
              , g = this.getTransformTemplate();
            if (this.needsReset)
                return this.needsReset = !1,
                h.opacity = "",
                h.pointerEvents = resolveMotionValue(d == null ? void 0 : d.pointerEvents) || "",
                h.transform = g ? g(this.latestValues, "") : "none",
                h;
            const b = this.getLead();
            if (!this.projectionDelta || !this.layout || !b.target) {
                const tt = {};
                return this.options.layoutId && (tt.opacity = this.latestValues.opacity !== void 0 ? this.latestValues.opacity : 1,
                tt.pointerEvents = resolveMotionValue(d == null ? void 0 : d.pointerEvents) || ""),
                this.hasProjected && !hasTransform(this.latestValues) && (tt.transform = g ? g({}, "") : "none",
                this.hasProjected = !1),
                tt
            }
            const _ = b.animationValues || b.latestValues;
            this.applyTransformsToTarget(),
            h.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, _),
            g && (h.transform = g(_, h.transform));
            const {x: $, y: _e} = this.projectionDelta;
            h.transformOrigin = `${$.origin * 100}% ${_e.origin * 100}% 0`,
            b.animationValues ? h.opacity = b === this ? _.opacity ?? this.latestValues.opacity ?? 1 : this.preserveOpacity ? this.latestValues.opacity : _.opacityExit : h.opacity = b === this ? _.opacity !== void 0 ? _.opacity : "" : _.opacityExit !== void 0 ? _.opacityExit : 0;
            for (const tt in scaleCorrectors) {
                if (_[tt] === void 0)
                    continue;
                const {correct: rt, applyTo: et, isCSSVariable: it} = scaleCorrectors[tt]
                  , st = h.transform === "none" ? _[tt] : rt(_[tt], b);
                if (et) {
                    const nt = et.length;
                    for (let lt = 0; lt < nt; lt++)
                        h[et[lt]] = st
                } else
                    it ? this.options.visualElement.renderState.vars[tt] = st : h[tt] = st
            }
            return this.options.layoutId && (h.pointerEvents = b === this ? resolveMotionValue(d == null ? void 0 : d.pointerEvents) || "" : "none"),
            h
        }
        clearSnapshot() {
            this.resumeFrom = this.snapshot = void 0
        }
        resetTree() {
            this.root.nodes.forEach(d => {
                var h;
                return (h = d.currentAnimation) == null ? void 0 : h.stop()
            }
            ),
            this.root.nodes.forEach(clearMeasurements),
            this.root.sharedNodes.clear()
        }
    }
}
function updateLayout(s) {
    s.updateLayout()
}
function notifyLayoutUpdate(s) {
    var i;
    const e = ((i = s.resumeFrom) == null ? void 0 : i.snapshot) || s.snapshot;
    if (s.isLead() && s.layout && e && s.hasListeners("didUpdate")) {
        const {layoutBox: o, measuredBox: a} = s.layout
          , {animationType: c} = s.options
          , d = e.source !== s.layout.source;
        c === "size" ? eachAxis($ => {
            const _e = d ? e.measuredBox[$] : e.layoutBox[$]
              , tt = calcLength(_e);
            _e.min = o[$].min,
            _e.max = _e.min + tt
        }
        ) : shouldAnimatePositionOnly(c, e.layoutBox, o) && eachAxis($ => {
            const _e = d ? e.measuredBox[$] : e.layoutBox[$]
              , tt = calcLength(o[$]);
            _e.max = _e.min + tt,
            s.relativeTarget && !s.currentAnimation && (s.isProjectionDirty = !0,
            s.relativeTarget[$].max = s.relativeTarget[$].min + tt)
        }
        );
        const h = createDelta();
        calcBoxDelta(h, o, e.layoutBox);
        const g = createDelta();
        d ? calcBoxDelta(g, s.applyTransform(a, !0), e.measuredBox) : calcBoxDelta(g, o, e.layoutBox);
        const b = !isDeltaZero(h);
        let _ = !1;
        if (!s.resumeFrom) {
            const $ = s.getClosestProjectingParent();
            if ($ && !$.resumeFrom) {
                const {snapshot: _e, layout: tt} = $;
                if (_e && tt) {
                    const rt = createBox();
                    calcRelativePosition(rt, e.layoutBox, _e.layoutBox);
                    const et = createBox();
                    calcRelativePosition(et, o, tt.layoutBox),
                    boxEqualsRounded(rt, et) || (_ = !0),
                    $.options.layoutRoot && (s.relativeTarget = et,
                    s.relativeTargetOrigin = rt,
                    s.relativeParent = $)
                }
            }
        }
        s.notifyListeners("didUpdate", {
            layout: o,
            snapshot: e,
            delta: g,
            layoutDelta: h,
            hasLayoutChanged: b,
            hasRelativeLayoutChanged: _
        })
    } else if (s.isLead()) {
        const {onExitComplete: o} = s.options;
        o && o()
    }
    s.options.transition = void 0
}
function propagateDirtyNodes(s) {
    s.parent && (s.isProjecting() || (s.isProjectionDirty = s.parent.isProjectionDirty),
    s.isSharedProjectionDirty || (s.isSharedProjectionDirty = !!(s.isProjectionDirty || s.parent.isProjectionDirty || s.parent.isSharedProjectionDirty)),
    s.isTransformDirty || (s.isTransformDirty = s.parent.isTransformDirty))
}
function cleanDirtyNodes(s) {
    s.isProjectionDirty = s.isSharedProjectionDirty = s.isTransformDirty = !1
}
function clearSnapshot(s) {
    s.clearSnapshot()
}
function clearMeasurements(s) {
    s.clearMeasurements()
}
function clearIsLayoutDirty(s) {
    s.isLayoutDirty = !1
}
function resetTransformStyle(s) {
    const {visualElement: e} = s.options;
    e && e.getProps().onBeforeLayoutMeasure && e.notify("BeforeLayoutMeasure"),
    s.resetTransform()
}
function finishAnimation(s) {
    s.finishAnimation(),
    s.targetDelta = s.relativeTarget = s.target = void 0,
    s.isProjectionDirty = !0
}
function resolveTargetDelta(s) {
    s.resolveTargetDelta()
}
function calcProjection(s) {
    s.calcProjection()
}
function resetSkewAndRotation(s) {
    s.resetSkewAndRotation()
}
function removeLeadSnapshots(s) {
    s.removeLeadSnapshot()
}
function mixAxisDelta(s, e, i) {
    s.translate = mixNumber$1(e.translate, 0, i),
    s.scale = mixNumber$1(e.scale, 1, i),
    s.origin = e.origin,
    s.originPoint = e.originPoint
}
function mixAxis(s, e, i, o) {
    s.min = mixNumber$1(e.min, i.min, o),
    s.max = mixNumber$1(e.max, i.max, o)
}
function mixBox(s, e, i, o) {
    mixAxis(s.x, e.x, i.x, o),
    mixAxis(s.y, e.y, i.y, o)
}
function hasOpacityCrossfade(s) {
    return s.animationValues && s.animationValues.opacityExit !== void 0
}
const defaultLayoutTransition = {
    duration: .45,
    ease: [.4, 0, .1, 1]
}
  , userAgentContains = s => typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(s)
  , roundPoint = userAgentContains("applewebkit/") && !userAgentContains("chrome/") ? Math.round : noop;
function roundAxis(s) {
    s.min = roundPoint(s.min),
    s.max = roundPoint(s.max)
}
function roundBox(s) {
    roundAxis(s.x),
    roundAxis(s.y)
}
function shouldAnimatePositionOnly(s, e, i) {
    return s === "position" || s === "preserve-aspect" && !isNear(aspectRatio(e), aspectRatio(i), .2)
}
function checkNodeWasScrollRoot(s) {
    var e;
    return s !== s.root && ((e = s.scroll) == null ? void 0 : e.wasRoot)
}
const DocumentProjectionNode = createProjectionNode({
    attachResizeListener: (s, e) => addDomEvent(s, "resize", e),
    measureScroll: () => ({
        x: document.documentElement.scrollLeft || document.body.scrollLeft,
        y: document.documentElement.scrollTop || document.body.scrollTop
    }),
    checkIsScrollRoot: () => !0
})
  , rootProjectionNode = {
    current: void 0
}
  , HTMLProjectionNode = createProjectionNode({
    measureScroll: s => ({
        x: s.scrollLeft,
        y: s.scrollTop
    }),
    defaultParent: () => {
        if (!rootProjectionNode.current) {
            const s = new DocumentProjectionNode({});
            s.mount(window),
            s.setOptions({
                layoutScroll: !0
            }),
            rootProjectionNode.current = s
        }
        return rootProjectionNode.current
    }
    ,
    resetTransform: (s, e) => {
        s.style.transform = e !== void 0 ? e : "none"
    }
    ,
    checkIsScrollRoot: s => window.getComputedStyle(s).position === "fixed"
})
  , drag = {
    pan: {
        Feature: PanGesture
    },
    drag: {
        Feature: DragGesture,
        ProjectionNode: HTMLProjectionNode,
        MeasureLayout
    }
};
function handleHoverEvent(s, e, i) {
    const {props: o} = s;
    s.animationState && o.whileHover && s.animationState.setActive("whileHover", i === "Start");
    const a = "onHover" + i
      , c = o[a];
    c && frame.postRender( () => c(e, extractEventInfo(e)))
}
class HoverGesture extends Feature {
    mount() {
        const {current: e} = this.node;
        e && (this.unmount = hover(e, (i, o) => (handleHoverEvent(this.node, o, "Start"),
        a => handleHoverEvent(this.node, a, "End"))))
    }
    unmount() {}
}
class FocusGesture extends Feature {
    constructor() {
        super(...arguments),
        this.isActive = !1
    }
    onFocus() {
        let e = !1;
        try {
            e = this.node.current.matches(":focus-visible")
        } catch {
            e = !0
        }
        !e || !this.node.animationState || (this.node.animationState.setActive("whileFocus", !0),
        this.isActive = !0)
    }
    onBlur() {
        !this.isActive || !this.node.animationState || (this.node.animationState.setActive("whileFocus", !1),
        this.isActive = !1)
    }
    mount() {
        this.unmount = pipe(addDomEvent(this.node.current, "focus", () => this.onFocus()), addDomEvent(this.node.current, "blur", () => this.onBlur()))
    }
    unmount() {}
}
function handlePressEvent(s, e, i) {
    const {props: o} = s;
    if (s.current instanceof HTMLButtonElement && s.current.disabled)
        return;
    s.animationState && o.whileTap && s.animationState.setActive("whileTap", i === "Start");
    const a = "onTap" + (i === "End" ? "" : i)
      , c = o[a];
    c && frame.postRender( () => c(e, extractEventInfo(e)))
}
class PressGesture extends Feature {
    mount() {
        const {current: e} = this.node;
        e && (this.unmount = press(e, (i, o) => (handlePressEvent(this.node, o, "Start"),
        (a, {success: c}) => handlePressEvent(this.node, a, c ? "End" : "Cancel")), {
            useGlobalTarget: this.node.props.globalTapTarget
        }))
    }
    unmount() {}
}
const observerCallbacks = new WeakMap
  , observers = new WeakMap
  , fireObserverCallback = s => {
    const e = observerCallbacks.get(s.target);
    e && e(s)
}
  , fireAllObserverCallbacks = s => {
    s.forEach(fireObserverCallback)
}
;
function initIntersectionObserver({root: s, ...e}) {
    const i = s || document;
    observers.has(i) || observers.set(i, {});
    const o = observers.get(i)
      , a = JSON.stringify(e);
    return o[a] || (o[a] = new IntersectionObserver(fireAllObserverCallbacks,{
        root: s,
        ...e
    })),
    o[a]
}
function observeIntersection(s, e, i) {
    const o = initIntersectionObserver(e);
    return observerCallbacks.set(s, i),
    o.observe(s),
    () => {
        observerCallbacks.delete(s),
        o.unobserve(s)
    }
}
const thresholdNames = {
    some: 0,
    all: 1
};
class InViewFeature extends Feature {
    constructor() {
        super(...arguments),
        this.hasEnteredView = !1,
        this.isInView = !1
    }
    startObserver() {
        this.unmount();
        const {viewport: e={}} = this.node.getProps()
          , {root: i, margin: o, amount: a="some", once: c} = e
          , d = {
            root: i ? i.current : void 0,
            rootMargin: o,
            threshold: typeof a == "number" ? a : thresholdNames[a]
        }
          , h = g => {
            const {isIntersecting: b} = g;
            if (this.isInView === b || (this.isInView = b,
            c && !b && this.hasEnteredView))
                return;
            b && (this.hasEnteredView = !0),
            this.node.animationState && this.node.animationState.setActive("whileInView", b);
            const {onViewportEnter: _, onViewportLeave: $} = this.node.getProps()
              , _e = b ? _ : $;
            _e && _e(g)
        }
        ;
        return observeIntersection(this.node.current, d, h)
    }
    mount() {
        this.startObserver()
    }
    update() {
        if (typeof IntersectionObserver > "u")
            return;
        const {props: e, prevProps: i} = this.node;
        ["amount", "margin", "root"].some(hasViewportOptionChanged(e, i)) && this.startObserver()
    }
    unmount() {}
}
function hasViewportOptionChanged({viewport: s={}}, {viewport: e={}}={}) {
    return i => s[i] !== e[i]
}
const gestureAnimations = {
    inView: {
        Feature: InViewFeature
    },
    tap: {
        Feature: PressGesture
    },
    focus: {
        Feature: FocusGesture
    },
    hover: {
        Feature: HoverGesture
    }
}
  , layout = {
    layout: {
        ProjectionNode: HTMLProjectionNode,
        MeasureLayout
    }
}
  , prefersReducedMotion = {
    current: null
}
  , hasReducedMotionListener = {
    current: !1
};
function initPrefersReducedMotion() {
    if (hasReducedMotionListener.current = !0,
    !!isBrowser)
        if (window.matchMedia) {
            const s = window.matchMedia("(prefers-reduced-motion)")
              , e = () => prefersReducedMotion.current = s.matches;
            s.addListener(e),
            e()
        } else
            prefersReducedMotion.current = !1
}
const visualElementStore = new WeakMap;
function updateMotionValuesFromProps(s, e, i) {
    for (const o in e) {
        const a = e[o]
          , c = i[o];
        if (isMotionValue(a))
            s.addValue(o, a);
        else if (isMotionValue(c))
            s.addValue(o, motionValue(a, {
                owner: s
            }));
        else if (c !== a)
            if (s.hasValue(o)) {
                const d = s.getValue(o);
                d.liveStyle === !0 ? d.jump(a) : d.hasAnimated || d.set(a)
            } else {
                const d = s.getStaticValue(o);
                s.addValue(o, motionValue(d !== void 0 ? d : a, {
                    owner: s
                }))
            }
    }
    for (const o in i)
        e[o] === void 0 && s.removeValue(o);
    return e
}
const propEventHandlers = ["AnimationStart", "AnimationComplete", "Update", "BeforeLayoutMeasure", "LayoutMeasure", "LayoutAnimationStart", "LayoutAnimationComplete"];
class VisualElement {
    scrapeMotionValuesFromProps(e, i, o) {
        return {}
    }
    constructor({parent: e, props: i, presenceContext: o, reducedMotionConfig: a, blockInitialAnimation: c, visualState: d}, h={}) {
        this.current = null,
        this.children = new Set,
        this.isVariantNode = !1,
        this.isControllingVariants = !1,
        this.shouldReduceMotion = null,
        this.values = new Map,
        this.KeyframeResolver = KeyframeResolver,
        this.features = {},
        this.valueSubscriptions = new Map,
        this.prevMotionValues = {},
        this.events = {},
        this.propEventSubscriptions = {},
        this.notifyUpdate = () => this.notify("Update", this.latestValues),
        this.render = () => {
            this.current && (this.triggerBuild(),
            this.renderInstance(this.current, this.renderState, this.props.style, this.projection))
        }
        ,
        this.renderScheduledAt = 0,
        this.scheduleRender = () => {
            const _e = time.now();
            this.renderScheduledAt < _e && (this.renderScheduledAt = _e,
            frame.render(this.render, !1, !0))
        }
        ;
        const {latestValues: g, renderState: b} = d;
        this.latestValues = g,
        this.baseTarget = {
            ...g
        },
        this.initialValues = i.initial ? {
            ...g
        } : {},
        this.renderState = b,
        this.parent = e,
        this.props = i,
        this.presenceContext = o,
        this.depth = e ? e.depth + 1 : 0,
        this.reducedMotionConfig = a,
        this.options = h,
        this.blockInitialAnimation = !!c,
        this.isControllingVariants = isControllingVariants(i),
        this.isVariantNode = isVariantNode(i),
        this.isVariantNode && (this.variantChildren = new Set),
        this.manuallyAnimateOnMount = !!(e && e.current);
        const {willChange: _, ...$} = this.scrapeMotionValuesFromProps(i, {}, this);
        for (const _e in $) {
            const tt = $[_e];
            g[_e] !== void 0 && isMotionValue(tt) && tt.set(g[_e], !1)
        }
    }
    mount(e) {
        this.current = e,
        visualElementStore.set(e, this),
        this.projection && !this.projection.instance && this.projection.mount(e),
        this.parent && this.isVariantNode && !this.isControllingVariants && (this.removeFromVariantTree = this.parent.addVariantChild(this)),
        this.values.forEach( (i, o) => this.bindToMotionValue(o, i)),
        hasReducedMotionListener.current || initPrefersReducedMotion(),
        this.shouldReduceMotion = this.reducedMotionConfig === "never" ? !1 : this.reducedMotionConfig === "always" ? !0 : prefersReducedMotion.current,
        this.parent && this.parent.children.add(this),
        this.update(this.props, this.presenceContext)
    }
    unmount() {
        this.projection && this.projection.unmount(),
        cancelFrame(this.notifyUpdate),
        cancelFrame(this.render),
        this.valueSubscriptions.forEach(e => e()),
        this.valueSubscriptions.clear(),
        this.removeFromVariantTree && this.removeFromVariantTree(),
        this.parent && this.parent.children.delete(this);
        for (const e in this.events)
            this.events[e].clear();
        for (const e in this.features) {
            const i = this.features[e];
            i && (i.unmount(),
            i.isMounted = !1)
        }
        this.current = null
    }
    bindToMotionValue(e, i) {
        this.valueSubscriptions.has(e) && this.valueSubscriptions.get(e)();
        const o = transformProps.has(e);
        o && this.onBindTransform && this.onBindTransform();
        const a = i.on("change", h => {
            this.latestValues[e] = h,
            this.props.onUpdate && frame.preRender(this.notifyUpdate),
            o && this.projection && (this.projection.isTransformDirty = !0)
        }
        )
          , c = i.on("renderRequest", this.scheduleRender);
        let d;
        window.MotionCheckAppearSync && (d = window.MotionCheckAppearSync(this, e, i)),
        this.valueSubscriptions.set(e, () => {
            a(),
            c(),
            d && d(),
            i.owner && i.stop()
        }
        )
    }
    sortNodePosition(e) {
        return !this.current || !this.sortInstanceNodePosition || this.type !== e.type ? 0 : this.sortInstanceNodePosition(this.current, e.current)
    }
    updateFeatures() {
        let e = "animation";
        for (e in featureDefinitions) {
            const i = featureDefinitions[e];
            if (!i)
                continue;
            const {isEnabled: o, Feature: a} = i;
            if (!this.features[e] && a && o(this.props) && (this.features[e] = new a(this)),
            this.features[e]) {
                const c = this.features[e];
                c.isMounted ? c.update() : (c.mount(),
                c.isMounted = !0)
            }
        }
    }
    triggerBuild() {
        this.build(this.renderState, this.latestValues, this.props)
    }
    measureViewportBox() {
        return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox()
    }
    getStaticValue(e) {
        return this.latestValues[e]
    }
    setStaticValue(e, i) {
        this.latestValues[e] = i
    }
    update(e, i) {
        (e.transformTemplate || this.props.transformTemplate) && this.scheduleRender(),
        this.prevProps = this.props,
        this.props = e,
        this.prevPresenceContext = this.presenceContext,
        this.presenceContext = i;
        for (let o = 0; o < propEventHandlers.length; o++) {
            const a = propEventHandlers[o];
            this.propEventSubscriptions[a] && (this.propEventSubscriptions[a](),
            delete this.propEventSubscriptions[a]);
            const c = "on" + a
              , d = e[c];
            d && (this.propEventSubscriptions[a] = this.on(a, d))
        }
        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(e, this.prevProps, this), this.prevMotionValues),
        this.handleChildMotionValue && this.handleChildMotionValue()
    }
    getProps() {
        return this.props
    }
    getVariant(e) {
        return this.props.variants ? this.props.variants[e] : void 0
    }
    getDefaultTransition() {
        return this.props.transition
    }
    getTransformPagePoint() {
        return this.props.transformPagePoint
    }
    getClosestVariantNode() {
        return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0
    }
    addVariantChild(e) {
        const i = this.getClosestVariantNode();
        if (i)
            return i.variantChildren && i.variantChildren.add(e),
            () => i.variantChildren.delete(e)
    }
    addValue(e, i) {
        const o = this.values.get(e);
        i !== o && (o && this.removeValue(e),
        this.bindToMotionValue(e, i),
        this.values.set(e, i),
        this.latestValues[e] = i.get())
    }
    removeValue(e) {
        this.values.delete(e);
        const i = this.valueSubscriptions.get(e);
        i && (i(),
        this.valueSubscriptions.delete(e)),
        delete this.latestValues[e],
        this.removeValueFromRenderState(e, this.renderState)
    }
    hasValue(e) {
        return this.values.has(e)
    }
    getValue(e, i) {
        if (this.props.values && this.props.values[e])
            return this.props.values[e];
        let o = this.values.get(e);
        return o === void 0 && i !== void 0 && (o = motionValue(i === null ? void 0 : i, {
            owner: this
        }),
        this.addValue(e, o)),
        o
    }
    readValue(e, i) {
        let o = this.latestValues[e] !== void 0 || !this.current ? this.latestValues[e] : this.getBaseTargetFromProps(this.props, e) ?? this.readValueFromInstance(this.current, e, this.options);
        return o != null && (typeof o == "string" && (isNumericalString(o) || isZeroValueString(o)) ? o = parseFloat(o) : !findValueType(o) && complex.test(i) && (o = getAnimatableNone(e, i)),
        this.setBaseTarget(e, isMotionValue(o) ? o.get() : o)),
        isMotionValue(o) ? o.get() : o
    }
    setBaseTarget(e, i) {
        this.baseTarget[e] = i
    }
    getBaseTarget(e) {
        var c;
        const {initial: i} = this.props;
        let o;
        if (typeof i == "string" || typeof i == "object") {
            const d = resolveVariantFromProps(this.props, i, (c = this.presenceContext) == null ? void 0 : c.custom);
            d && (o = d[e])
        }
        if (i && o !== void 0)
            return o;
        const a = this.getBaseTargetFromProps(this.props, e);
        return a !== void 0 && !isMotionValue(a) ? a : this.initialValues[e] !== void 0 && o === void 0 ? void 0 : this.baseTarget[e]
    }
    on(e, i) {
        return this.events[e] || (this.events[e] = new SubscriptionManager),
        this.events[e].add(i)
    }
    notify(e, ...i) {
        this.events[e] && this.events[e].notify(...i)
    }
}
class DOMVisualElement extends VisualElement {
    constructor() {
        super(...arguments),
        this.KeyframeResolver = DOMKeyframesResolver
    }
    sortInstanceNodePosition(e, i) {
        return e.compareDocumentPosition(i) & 2 ? 1 : -1
    }
    getBaseTargetFromProps(e, i) {
        return e.style ? e.style[i] : void 0
    }
    removeValueFromRenderState(e, {vars: i, style: o}) {
        delete i[e],
        delete o[e]
    }
    handleChildMotionValue() {
        this.childSubscription && (this.childSubscription(),
        delete this.childSubscription);
        const {children: e} = this.props;
        isMotionValue(e) && (this.childSubscription = e.on("change", i => {
            this.current && (this.current.textContent = `${i}`)
        }
        ))
    }
}
function renderHTML(s, {style: e, vars: i}, o, a) {
    Object.assign(s.style, e, a && a.getProjectionStyles(o));
    for (const c in i)
        s.style.setProperty(c, i[c])
}
function getComputedStyle$1(s) {
    return window.getComputedStyle(s)
}
class HTMLVisualElement extends DOMVisualElement {
    constructor() {
        super(...arguments),
        this.type = "html",
        this.renderInstance = renderHTML
    }
    readValueFromInstance(e, i) {
        var o;
        if (transformProps.has(i))
            return (o = this.projection) != null && o.isProjecting ? defaultTransformValue(i) : readTransformValue(e, i);
        {
            const a = getComputedStyle$1(e)
              , c = (isCSSVariableName(i) ? a.getPropertyValue(i) : a[i]) || 0;
            return typeof c == "string" ? c.trim() : c
        }
    }
    measureInstanceViewportBox(e, {transformPagePoint: i}) {
        return measureViewportBox(e, i)
    }
    build(e, i, o) {
        buildHTMLStyles(e, i, o.transformTemplate)
    }
    scrapeMotionValuesFromProps(e, i, o) {
        return scrapeMotionValuesFromProps$1(e, i, o)
    }
}
const camelCaseAttributes = new Set(["baseFrequency", "diffuseConstant", "kernelMatrix", "kernelUnitLength", "keySplines", "keyTimes", "limitingConeAngle", "markerHeight", "markerWidth", "numOctaves", "targetX", "targetY", "surfaceScale", "specularConstant", "specularExponent", "stdDeviation", "tableValues", "viewBox", "gradientTransform", "pathLength", "startOffset", "textLength", "lengthAdjust"]);
function renderSVG(s, e, i, o) {
    renderHTML(s, e, void 0, o);
    for (const a in e.attrs)
        s.setAttribute(camelCaseAttributes.has(a) ? a : camelToDash(a), e.attrs[a])
}
class SVGVisualElement extends DOMVisualElement {
    constructor() {
        super(...arguments),
        this.type = "svg",
        this.isSVGTag = !1,
        this.measureInstanceViewportBox = createBox
    }
    getBaseTargetFromProps(e, i) {
        return e[i]
    }
    readValueFromInstance(e, i) {
        if (transformProps.has(i)) {
            const o = getDefaultValueType(i);
            return o && o.default || 0
        }
        return i = camelCaseAttributes.has(i) ? i : camelToDash(i),
        e.getAttribute(i)
    }
    scrapeMotionValuesFromProps(e, i, o) {
        return scrapeMotionValuesFromProps(e, i, o)
    }
    build(e, i, o) {
        buildSVGAttrs(e, i, this.isSVGTag, o.transformTemplate, o.style)
    }
    renderInstance(e, i, o, a) {
        renderSVG(e, i, o, a)
    }
    mount(e) {
        this.isSVGTag = isSVGTag(e.tagName),
        super.mount(e)
    }
}
const createDomVisualElement = (s, e) => isSVGComponent(s) ? new SVGVisualElement(e) : new HTMLVisualElement(e,{
    allowProjection: s !== reactExports.Fragment
})
  , createMotionComponent = createMotionComponentFactory({
    ...animations,
    ...gestureAnimations,
    ...drag,
    ...layout
}, createDomVisualElement)
  , motion = createDOMMotionComponentProxy(createMotionComponent);
function useMotionValue(s) {
    const e = useConstant( () => motionValue(s))
      , {isStatic: i} = reactExports.useContext(MotionConfigContext);
    if (i) {
        const [,o] = reactExports.useState(s);
        reactExports.useEffect( () => e.on("change", o), [])
    }
    return e
}
function useCombineMotionValues(s, e) {
    const i = useMotionValue(e())
      , o = () => i.set(e());
    return o(),
    useIsomorphicLayoutEffect$2( () => {
        const a = () => frame.preRender(o, !1, !0)
          , c = s.map(d => d.on("change", a));
        return () => {
            c.forEach(d => d()),
            cancelFrame(o)
        }
    }
    ),
    i
}
function useComputed(s) {
    collectMotionValues.current = [],
    s();
    const e = useCombineMotionValues(collectMotionValues.current, s);
    return collectMotionValues.current = void 0,
    e
}
function useTransform(s, e, i, o) {
    if (typeof s == "function")
        return useComputed(s);
    const a = typeof e == "function" ? e : transform(e, i, o);
    return Array.isArray(s) ? useListTransform(s, a) : useListTransform([s], ([c]) => a(c))
}
function useListTransform(s, e) {
    const i = useConstant( () => []);
    return useCombineMotionValues(s, () => {
        i.length = 0;
        const o = s.length;
        for (let a = 0; a < o; a++)
            i[a] = s[a].get();
        return e(i)
    }
    )
}
function useSpring(s, e={}) {
    const {isStatic: i} = reactExports.useContext(MotionConfigContext)
      , o = () => isMotionValue(s) ? s.get() : s;
    if (i)
        return useTransform(o);
    const a = useMotionValue(o());
    return reactExports.useInsertionEffect( () => attachSpring(a, s, e), [a, JSON.stringify(e)]),
    a
}
const thresholds = {
    some: 0,
    all: 1
};
function inView(s, e, {root: i, margin: o, amount: a="some"}={}) {
    const c = resolveElements(s)
      , d = new WeakMap
      , h = b => {
        b.forEach(_ => {
            const $ = d.get(_.target);
            if (_.isIntersecting !== !!$)
                if (_.isIntersecting) {
                    const _e = e(_.target, _);
                    typeof _e == "function" ? d.set(_.target, _e) : g.unobserve(_.target)
                } else
                    typeof $ == "function" && ($(_),
                    d.delete(_.target))
        }
        )
    }
      , g = new IntersectionObserver(h,{
        root: i,
        rootMargin: o,
        threshold: typeof a == "number" ? a : thresholds[a]
    });
    return c.forEach(b => g.observe(b)),
    () => g.disconnect()
}
function useInView(s, {root: e, margin: i, amount: o, once: a=!1, initial: c=!1}={}) {
    const [d,h] = reactExports.useState(c);
    return reactExports.useEffect( () => {
        if (!s.current || a && d)
            return;
        const g = () => (h(!0),
        a ? void 0 : () => h(!1))
          , b = {
            root: e && e.current || void 0,
            margin: i,
            amount: o
        };
        return inView(s.current, g, b)
    }
    , [e, s, i, a, o]),
    d
}
const buttonVariants = cva("inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0", {
    variants: {
        variant: {
            default: "bg-primary text-primary-foreground hover:bg-primary/90",
            destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
            outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
            secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
            ghost: "hover:bg-accent hover:text-accent-foreground",
            link: "text-primary underline-offset-4 hover:underline"
        },
        size: {
            default: "h-10 px-4 py-2",
            sm: "h-9 rounded-md px-3",
            lg: "h-11 rounded-md px-8",
            icon: "h-10 w-10"
        }
    },
    defaultVariants: {
        variant: "default",
        size: "default"
    }
})
  , Button = reactExports.forwardRef( ({className: s, variant: e, size: i, asChild: o=!1, ...a}, c) => {
    const d = o ? Slot : "button";
    return jsxRuntimeExports.jsx(d, {
        className: cn(buttonVariants({
            variant: e,
            size: i,
            className: s
        })),
        ref: c,
        ...a
    })
}
);
Button.displayName = "Button";
const Card = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx("div", {
    ref: i,
    className: cn("rounded-lg border bg-card text-card-foreground shadow-sm", s),
    ...e
}));
Card.displayName = "Card";
const CardHeader = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx("div", {
    ref: i,
    className: cn("flex flex-col space-y-1.5 p-6", s),
    ...e
}));
CardHeader.displayName = "CardHeader";
const CardTitle = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx("h3", {
    ref: i,
    className: cn("text-2xl font-semibold leading-none tracking-tight", s),
    ...e
}));
CardTitle.displayName = "CardTitle";
const CardDescription = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx("p", {
    ref: i,
    className: cn("text-sm text-muted-foreground", s),
    ...e
}));
CardDescription.displayName = "CardDescription";
const CardContent = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx("div", {
    ref: i,
    className: cn("p-6 pt-0", s),
    ...e
}));
CardContent.displayName = "CardContent";
const CardFooter = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx("div", {
    ref: i,
    className: cn("flex items-center p-6 pt-0", s),
    ...e
}));
CardFooter.displayName = "CardFooter";
const badgeVariants = cva("inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2", {
    variants: {
        variant: {
            default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
            secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
            destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
            outline: "text-foreground"
        }
    },
    defaultVariants: {
        variant: "default"
    }
});
function Badge({className: s, variant: e, ...i}) {
    return jsxRuntimeExports.jsx("div", {
        className: cn(badgeVariants({
            variant: e
        }), s),
        ...i
    })
}
function clamp(s, [e,i]) {
    return Math.min(i, Math.max(e, s))
}
var DirectionContext = reactExports.createContext(void 0);
function useDirection(s) {
    const e = reactExports.useContext(DirectionContext);
    return s || e || "ltr"
}
function usePrevious(s) {
    const e = reactExports.useRef({
        value: s,
        previous: s
    });
    return reactExports.useMemo( () => (e.current.value !== s && (e.current.previous = e.current.value,
    e.current.value = s),
    e.current.previous), [s])
}
var PAGE_KEYS = ["PageUp", "PageDown"]
  , ARROW_KEYS = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"]
  , BACK_KEYS = {
    "from-left": ["Home", "PageDown", "ArrowDown", "ArrowLeft"],
    "from-right": ["Home", "PageDown", "ArrowDown", "ArrowRight"],
    "from-bottom": ["Home", "PageDown", "ArrowDown", "ArrowLeft"],
    "from-top": ["Home", "PageDown", "ArrowUp", "ArrowLeft"]
}
  , SLIDER_NAME = "Slider"
  , [Collection$3,useCollection$3,createCollectionScope$3] = createCollection(SLIDER_NAME)
  , [createSliderContext,createSliderScope] = createContextScope$3(SLIDER_NAME, [createCollectionScope$3])
  , [SliderProvider,useSliderContext] = createSliderContext(SLIDER_NAME)
  , Slider$1 = reactExports.forwardRef( (s, e) => {
    const {name: i, min: o=0, max: a=100, step: c=1, orientation: d="horizontal", disabled: h=!1, minStepsBetweenThumbs: g=0, defaultValue: b=[o], value: _, onValueChange: $= () => {}
    , onValueCommit: _e= () => {}
    , inverted: tt=!1, form: rt, ...et} = s
      , it = reactExports.useRef(new Set)
      , st = reactExports.useRef(0)
      , lt = d === "horizontal" ? SliderHorizontal : SliderVertical
      , [dt=[],ot] = useControllableState({
        prop: _,
        defaultProp: b,
        onChange: yt => {
            var Mt;
            (Mt = [...it.current][st.current]) == null || Mt.focus(),
            $(yt)
        }
    })
      , at = reactExports.useRef(dt);
    function ht(yt) {
        const Rt = getClosestValueIndex(dt, yt);
        wt(yt, Rt)
    }
    function pt(yt) {
        wt(yt, st.current)
    }
    function gt() {
        const yt = at.current[st.current];
        dt[st.current] !== yt && _e(dt)
    }
    function wt(yt, Rt, {commit: Mt}={
        commit: !1
    }) {
        const ss = getDecimalCount(c)
          , zt = roundValue(Math.round((yt - o) / c) * c + o, ss)
          , At = clamp(zt, [o, a]);
        ot( (kt=[]) => {
            const vt = getNextSortedValues(kt, At, Rt);
            if (hasMinStepsBetweenValues(vt, g * c)) {
                st.current = vt.indexOf(At);
                const bt = String(vt) !== String(kt);
                return bt && Mt && _e(vt),
                bt ? vt : kt
            } else
                return kt
        }
        )
    }
    return jsxRuntimeExports.jsx(SliderProvider, {
        scope: s.__scopeSlider,
        name: i,
        disabled: h,
        min: o,
        max: a,
        valueIndexToChangeRef: st,
        thumbs: it.current,
        values: dt,
        orientation: d,
        form: rt,
        children: jsxRuntimeExports.jsx(Collection$3.Provider, {
            scope: s.__scopeSlider,
            children: jsxRuntimeExports.jsx(Collection$3.Slot, {
                scope: s.__scopeSlider,
                children: jsxRuntimeExports.jsx(lt, {
                    "aria-disabled": h,
                    "data-disabled": h ? "" : void 0,
                    ...et,
                    ref: e,
                    onPointerDown: composeEventHandlers(et.onPointerDown, () => {
                        h || (at.current = dt)
                    }
                    ),
                    min: o,
                    max: a,
                    inverted: tt,
                    onSlideStart: h ? void 0 : ht,
                    onSlideMove: h ? void 0 : pt,
                    onSlideEnd: h ? void 0 : gt,
                    onHomeKeyDown: () => !h && wt(o, 0, {
                        commit: !0
                    }),
                    onEndKeyDown: () => !h && wt(a, dt.length - 1, {
                        commit: !0
                    }),
                    onStepKeyDown: ({event: yt, direction: Rt}) => {
                        if (!h) {
                            const zt = PAGE_KEYS.includes(yt.key) || yt.shiftKey && ARROW_KEYS.includes(yt.key) ? 10 : 1
                              , At = st.current
                              , kt = dt[At]
                              , vt = c * zt * Rt;
                            wt(kt + vt, At, {
                                commit: !0
                            })
                        }
                    }
                })
            })
        })
    })
}
);
Slider$1.displayName = SLIDER_NAME;
var [SliderOrientationProvider,useSliderOrientationContext] = createSliderContext(SLIDER_NAME, {
    startEdge: "left",
    endEdge: "right",
    size: "width",
    direction: 1
})
  , SliderHorizontal = reactExports.forwardRef( (s, e) => {
    const {min: i, max: o, dir: a, inverted: c, onSlideStart: d, onSlideMove: h, onSlideEnd: g, onStepKeyDown: b, ..._} = s
      , [$,_e] = reactExports.useState(null)
      , tt = useComposedRefs(e, lt => _e(lt))
      , rt = reactExports.useRef()
      , et = useDirection(a)
      , it = et === "ltr"
      , st = it && !c || !it && c;
    function nt(lt) {
        const dt = rt.current || $.getBoundingClientRect()
          , ot = [0, dt.width]
          , ht = linearScale$1(ot, st ? [i, o] : [o, i]);
        return rt.current = dt,
        ht(lt - dt.left)
    }
    return jsxRuntimeExports.jsx(SliderOrientationProvider, {
        scope: s.__scopeSlider,
        startEdge: st ? "left" : "right",
        endEdge: st ? "right" : "left",
        direction: st ? 1 : -1,
        size: "width",
        children: jsxRuntimeExports.jsx(SliderImpl, {
            dir: et,
            "data-orientation": "horizontal",
            ..._,
            ref: tt,
            style: {
                ..._.style,
                "--radix-slider-thumb-transform": "translateX(-50%)"
            },
            onSlideStart: lt => {
                const dt = nt(lt.clientX);
                d == null || d(dt)
            }
            ,
            onSlideMove: lt => {
                const dt = nt(lt.clientX);
                h == null || h(dt)
            }
            ,
            onSlideEnd: () => {
                rt.current = void 0,
                g == null || g()
            }
            ,
            onStepKeyDown: lt => {
                const ot = BACK_KEYS[st ? "from-left" : "from-right"].includes(lt.key);
                b == null || b({
                    event: lt,
                    direction: ot ? -1 : 1
                })
            }
        })
    })
}
)
  , SliderVertical = reactExports.forwardRef( (s, e) => {
    const {min: i, max: o, inverted: a, onSlideStart: c, onSlideMove: d, onSlideEnd: h, onStepKeyDown: g, ...b} = s
      , _ = reactExports.useRef(null)
      , $ = useComposedRefs(e, _)
      , _e = reactExports.useRef()
      , tt = !a;
    function rt(et) {
        const it = _e.current || _.current.getBoundingClientRect()
          , st = [0, it.height]
          , lt = linearScale$1(st, tt ? [o, i] : [i, o]);
        return _e.current = it,
        lt(et - it.top)
    }
    return jsxRuntimeExports.jsx(SliderOrientationProvider, {
        scope: s.__scopeSlider,
        startEdge: tt ? "bottom" : "top",
        endEdge: tt ? "top" : "bottom",
        size: "height",
        direction: tt ? 1 : -1,
        children: jsxRuntimeExports.jsx(SliderImpl, {
            "data-orientation": "vertical",
            ...b,
            ref: $,
            style: {
                ...b.style,
                "--radix-slider-thumb-transform": "translateY(50%)"
            },
            onSlideStart: et => {
                const it = rt(et.clientY);
                c == null || c(it)
            }
            ,
            onSlideMove: et => {
                const it = rt(et.clientY);
                d == null || d(it)
            }
            ,
            onSlideEnd: () => {
                _e.current = void 0,
                h == null || h()
            }
            ,
            onStepKeyDown: et => {
                const st = BACK_KEYS[tt ? "from-bottom" : "from-top"].includes(et.key);
                g == null || g({
                    event: et,
                    direction: st ? -1 : 1
                })
            }
        })
    })
}
)
  , SliderImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeSlider: i, onSlideStart: o, onSlideMove: a, onSlideEnd: c, onHomeKeyDown: d, onEndKeyDown: h, onStepKeyDown: g, ...b} = s
      , _ = useSliderContext(SLIDER_NAME, i);
    return jsxRuntimeExports.jsx(Primitive$1.span, {
        ...b,
        ref: e,
        onKeyDown: composeEventHandlers(s.onKeyDown, $ => {
            $.key === "Home" ? (d($),
            $.preventDefault()) : $.key === "End" ? (h($),
            $.preventDefault()) : PAGE_KEYS.concat(ARROW_KEYS).includes($.key) && (g($),
            $.preventDefault())
        }
        ),
        onPointerDown: composeEventHandlers(s.onPointerDown, $ => {
            const _e = $.target;
            _e.setPointerCapture($.pointerId),
            $.preventDefault(),
            _.thumbs.has(_e) ? _e.focus() : o($)
        }
        ),
        onPointerMove: composeEventHandlers(s.onPointerMove, $ => {
            $.target.hasPointerCapture($.pointerId) && a($)
        }
        ),
        onPointerUp: composeEventHandlers(s.onPointerUp, $ => {
            const _e = $.target;
            _e.hasPointerCapture($.pointerId) && (_e.releasePointerCapture($.pointerId),
            c($))
        }
        )
    })
}
)
  , TRACK_NAME = "SliderTrack"
  , SliderTrack = reactExports.forwardRef( (s, e) => {
    const {__scopeSlider: i, ...o} = s
      , a = useSliderContext(TRACK_NAME, i);
    return jsxRuntimeExports.jsx(Primitive$1.span, {
        "data-disabled": a.disabled ? "" : void 0,
        "data-orientation": a.orientation,
        ...o,
        ref: e
    })
}
);
SliderTrack.displayName = TRACK_NAME;
var RANGE_NAME = "SliderRange"
  , SliderRange = reactExports.forwardRef( (s, e) => {
    const {__scopeSlider: i, ...o} = s
      , a = useSliderContext(RANGE_NAME, i)
      , c = useSliderOrientationContext(RANGE_NAME, i)
      , d = reactExports.useRef(null)
      , h = useComposedRefs(e, d)
      , g = a.values.length
      , b = a.values.map(_e => convertValueToPercentage(_e, a.min, a.max))
      , _ = g > 1 ? Math.min(...b) : 0
      , $ = 100 - Math.max(...b);
    return jsxRuntimeExports.jsx(Primitive$1.span, {
        "data-orientation": a.orientation,
        "data-disabled": a.disabled ? "" : void 0,
        ...o,
        ref: h,
        style: {
            ...s.style,
            [c.startEdge]: _ + "%",
            [c.endEdge]: $ + "%"
        }
    })
}
);
SliderRange.displayName = RANGE_NAME;
var THUMB_NAME$2 = "SliderThumb"
  , SliderThumb = reactExports.forwardRef( (s, e) => {
    const i = useCollection$3(s.__scopeSlider)
      , [o,a] = reactExports.useState(null)
      , c = useComposedRefs(e, h => a(h))
      , d = reactExports.useMemo( () => o ? i().findIndex(h => h.ref.current === o) : -1, [i, o]);
    return jsxRuntimeExports.jsx(SliderThumbImpl, {
        ...s,
        ref: c,
        index: d
    })
}
)
  , SliderThumbImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeSlider: i, index: o, name: a, ...c} = s
      , d = useSliderContext(THUMB_NAME$2, i)
      , h = useSliderOrientationContext(THUMB_NAME$2, i)
      , [g,b] = reactExports.useState(null)
      , _ = useComposedRefs(e, nt => b(nt))
      , $ = g ? d.form || !!g.closest("form") : !0
      , _e = useSize(g)
      , tt = d.values[o]
      , rt = tt === void 0 ? 0 : convertValueToPercentage(tt, d.min, d.max)
      , et = getLabel(o, d.values.length)
      , it = _e == null ? void 0 : _e[h.size]
      , st = it ? getThumbInBoundsOffset(it, rt, h.direction) : 0;
    return reactExports.useEffect( () => {
        if (g)
            return d.thumbs.add(g),
            () => {
                d.thumbs.delete(g)
            }
    }
    , [g, d.thumbs]),
    jsxRuntimeExports.jsxs("span", {
        style: {
            transform: "var(--radix-slider-thumb-transform)",
            position: "absolute",
            [h.startEdge]: `calc(${rt}% + ${st}px)`
        },
        children: [jsxRuntimeExports.jsx(Collection$3.ItemSlot, {
            scope: s.__scopeSlider,
            children: jsxRuntimeExports.jsx(Primitive$1.span, {
                role: "slider",
                "aria-label": s["aria-label"] || et,
                "aria-valuemin": d.min,
                "aria-valuenow": tt,
                "aria-valuemax": d.max,
                "aria-orientation": d.orientation,
                "data-orientation": d.orientation,
                "data-disabled": d.disabled ? "" : void 0,
                tabIndex: d.disabled ? void 0 : 0,
                ...c,
                ref: _,
                style: tt === void 0 ? {
                    display: "none"
                } : s.style,
                onFocus: composeEventHandlers(s.onFocus, () => {
                    d.valueIndexToChangeRef.current = o
                }
                )
            })
        }), $ && jsxRuntimeExports.jsx(BubbleInput$1, {
            name: a ?? (d.name ? d.name + (d.values.length > 1 ? "[]" : "") : void 0),
            form: d.form,
            value: tt
        }, o)]
    })
}
);
SliderThumb.displayName = THUMB_NAME$2;
var BubbleInput$1 = s => {
    const {value: e, ...i} = s
      , o = reactExports.useRef(null)
      , a = usePrevious(e);
    return reactExports.useEffect( () => {
        const c = o.current
          , d = window.HTMLInputElement.prototype
          , g = Object.getOwnPropertyDescriptor(d, "value").set;
        if (a !== e && g) {
            const b = new Event("input",{
                bubbles: !0
            });
            g.call(c, e),
            c.dispatchEvent(b)
        }
    }
    , [a, e]),
    jsxRuntimeExports.jsx("input", {
        style: {
            display: "none"
        },
        ...i,
        ref: o,
        defaultValue: e
    })
}
;
function getNextSortedValues(s=[], e, i) {
    const o = [...s];
    return o[i] = e,
    o.sort( (a, c) => a - c)
}
function convertValueToPercentage(s, e, i) {
    const c = 100 / (i - e) * (s - e);
    return clamp(c, [0, 100])
}
function getLabel(s, e) {
    return e > 2 ? `Value ${s + 1} of ${e}` : e === 2 ? ["Minimum", "Maximum"][s] : void 0
}
function getClosestValueIndex(s, e) {
    if (s.length === 1)
        return 0;
    const i = s.map(a => Math.abs(a - e))
      , o = Math.min(...i);
    return i.indexOf(o)
}
function getThumbInBoundsOffset(s, e, i) {
    const o = s / 2
      , c = linearScale$1([0, 50], [0, o]);
    return (o - c(e) * i) * i
}
function getStepsBetweenValues(s) {
    return s.slice(0, -1).map( (e, i) => s[i + 1] - e)
}
function hasMinStepsBetweenValues(s, e) {
    if (e > 0) {
        const i = getStepsBetweenValues(s);
        return Math.min(...i) >= e
    }
    return !0
}
function linearScale$1(s, e) {
    return i => {
        if (s[0] === s[1] || e[0] === e[1])
            return e[0];
        const o = (e[1] - e[0]) / (s[1] - s[0]);
        return e[0] + o * (i - s[0])
    }
}
function getDecimalCount(s) {
    return (String(s).split(".")[1] || "").length
}
function roundValue(s, e) {
    const i = Math.pow(10, e);
    return Math.round(s * i) / i
}
var Root$8 = Slider$1
  , Track = SliderTrack
  , Range = SliderRange
  , Thumb$1 = SliderThumb;
const Slider = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsxs(Root$8, {
    ref: i,
    className: cn("relative flex w-full touch-none select-none items-center", s),
    ...e,
    children: [jsxRuntimeExports.jsx(Track, {
        className: "relative h-2 w-full grow overflow-hidden rounded-full bg-secondary",
        children: jsxRuntimeExports.jsx(Range, {
            className: "absolute h-full bg-primary"
        })
    }), jsxRuntimeExports.jsx(Thumb$1, {
        className: "block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"
    })]
}));
Slider.displayName = Root$8.displayName;
const JOB_ROLES = ["Software Engineer", "Data Scientist", "Product Manager", "Marketing Manager", "Sales Representative", "Business Analyst", "UI/UX Designer", "DevOps Engineer", "Project Manager", "Content Writer", "Digital Marketing Specialist", "Financial Analyst", "Human Resources Manager", "Customer Success Manager", "Operations Manager", "Other"]
  , EXPERIENCE_LEVELS$1 = [{
    value: "student",
    label: "Student",
    description: "Currently in college, looking for internship opportunities"
}, {
    value: "entry",
    label: "Entry-level",
    description: "0-2 years of experience"
}, {
    value: "mid",
    label: "Mid-level",
    description: "2-5 years of experience"
}, {
    value: "senior",
    label: "Senior",
    description: "5+ years of experience"
}]
  , WORK_MODES = [{
    value: "remote",
    label: "Remote",
    description: "Work from anywhere"
}, {
    value: "hybrid",
    label: "Hybrid",
    description: "Mix of remote and office"
}, {
    value: "onsite",
    label: "On-site",
    description: "Work from office"
}]
  , SALARY_RANGES = [{
    min: 0,
    max: 3,
    label: "₹0-3 LPA"
}, {
    min: 3,
    max: 6,
    label: "₹3-6 LPA"
}, {
    min: 6,
    max: 10,
    label: "₹6-10 LPA"
}, {
    min: 10,
    max: 15,
    label: "₹10-15 LPA"
}, {
    min: 15,
    max: 25,
    label: "₹15-25 LPA"
}, {
    min: 25,
    max: 50,
    label: "₹25-50 LPA"
}, {
    min: 50,
    max: 100,
    label: "₹50+ LPA"
}]
  , OnboardingFlow = ({onComplete: s}) => {
    const [e,i] = reactExports.useState(1)
      , [o,a] = reactExports.useState({
        job_search_urgency: "open",
        preferred_roles: [],
        experience_level: "entry",
        work_mode: "remote",
        salary_min: 6,
        salary_max: 10,
        career_goals: []
    })
      , [c,d] = reactExports.useState(!1)
      , [h,g] = reactExports.useState(!1)
      , [b,_] = reactExports.useState("")
      , [$,_e] = reactExports.useState("")
      , [tt,rt] = reactExports.useState(!1)
      , [et,it] = reactExports.useState([6, 10])
      , {user: st} = useAuth()
      , {toast: nt} = useToast()
      , lt = 5
      , dt = () => {
        e < lt ? i(e + 1) : at()
    }
      , ot = () => {
        e > 1 && i(e - 1)
    }
      , at = async () => {
        if (st) {
            d(!0),
            g(!0);
            try {
                const {error: Rt} = await supabase.from("user_profiles").update({
                    ...o,
                    onboarding_completed: !0,
                    onboarding_completed_at: new Date().toISOString()
                }).eq("user_id", st.id);
                if (Rt)
                    throw Rt;
                setTimeout( () => {
                    nt({
                        title: "Welcome to Hirebuddy!",
                        description: "Now please set your profile up."
                    }),
                    s()
                }
                , 3e3)
            } catch (Rt) {
                console.error("Error completing onboarding:", Rt),
                nt({
                    title: "Error",
                    description: "Failed to complete onboarding. Please try again.",
                    variant: "destructive"
                }),
                d(!1),
                g(!1)
            }
        }
    }
      , ht = () => {
        $.trim() && o.preferred_roles.length < 4 && !o.preferred_roles.includes($.trim()) && (a({
            ...o,
            preferred_roles: [...o.preferred_roles, $.trim()]
        }),
        _e(""))
    }
      , pt = Rt => {
        a({
            ...o,
            preferred_roles: o.preferred_roles.filter(Mt => Mt !== Rt)
        })
    }
      , gt = Rt => {
        o.preferred_roles.includes(Rt) ? pt(Rt) : o.preferred_roles.length < 4 && a({
            ...o,
            preferred_roles: [...o.preferred_roles, Rt]
        })
    }
      , wt = JOB_ROLES.filter(Rt => Rt.toLowerCase().includes(b.toLowerCase()) && !o.preferred_roles.includes(Rt))
      , yt = () => {
        switch (e) {
        case 1:
            return o.job_search_urgency;
        case 2:
            return o.preferred_roles.length > 0;
        case 3:
            return o.experience_level;
        case 4:
            return o.work_mode;
        case 5:
            return !0;
        default:
            return !1
        }
    }
    ;
    return reactExports.useEffect( () => {
        tt && a({
            ...o,
            salary_min: et[0],
            salary_max: et[1]
        })
    }
    , [et, tt]),
    h ? jsxRuntimeExports.jsx("div", {
        className: "fixed inset-0 bg-[#fff7f8] flex items-center justify-center z-50",
        children: jsxRuntimeExports.jsxs(motion.div, {
            initial: {
                opacity: 0,
                scale: .8
            },
            animate: {
                opacity: 1,
                scale: 1
            },
            className: "text-center space-y-6",
            children: [jsxRuntimeExports.jsx(motion.div, {
                animate: {
                    rotate: 360
                },
                transition: {
                    duration: 2,
                    repeat: 1 / 0,
                    ease: "linear"
                },
                className: "w-16 h-16 mx-auto",
                children: jsxRuntimeExports.jsx(Sparkles, {
                    className: "w-16 h-16 text-[#b24e55]"
                })
            }), jsxRuntimeExports.jsx("h2", {
                className: "text-3xl font-bold text-[#403334]",
                children: "Great! We're matching you to jobs now..."
            }), jsxRuntimeExports.jsx("p", {
                className: "text-lg text-[#4A3D55]",
                children: "Setting up your personalized job recommendations"
            })]
        })
    }) : jsxRuntimeExports.jsx("div", {
        className: "fixed inset-0 bg-[#fff7f8] flex items-center justify-center z-50 p-4",
        children: jsxRuntimeExports.jsx(Card, {
            className: "w-full max-w-2xl bg-white shadow-[0_4px_60px_rgba(231,90,130,0.35)] border-0 max-h-[90vh] overflow-y-auto",
            children: jsxRuntimeExports.jsxs(CardContent, {
                className: "p-4 sm:p-8",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex justify-between items-center mb-2",
                        children: [jsxRuntimeExports.jsxs("span", {
                            className: "text-sm font-medium text-[#b26469]",
                            children: ["Step ", e, " of ", lt]
                        }), jsxRuntimeExports.jsxs("span", {
                            className: "text-sm text-[#4A3D55]",
                            children: [Math.round(e / lt * 100), "%"]
                        })]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "w-full bg-[#ffe0e0] rounded-full h-2",
                        children: jsxRuntimeExports.jsx(motion.div, {
                            className: "bg-gradient-to-r from-[#b24e55] to-[#E3405F] h-2 rounded-full",
                            initial: {
                                width: 0
                            },
                            animate: {
                                width: `${e / lt * 100}%`
                            },
                            transition: {
                                duration: .5
                            }
                        })
                    })]
                }), jsxRuntimeExports.jsx(AnimatePresence, {
                    mode: "wait",
                    children: jsxRuntimeExports.jsxs(motion.div, {
                        initial: {
                            opacity: 0,
                            x: 20
                        },
                        animate: {
                            opacity: 1,
                            x: 0
                        },
                        exit: {
                            opacity: 0,
                            x: -20
                        },
                        transition: {
                            duration: .3
                        },
                        className: "min-h-[300px] sm:min-h-[400px] flex flex-col",
                        children: [e === 1 && jsxRuntimeExports.jsxs("div", {
                            className: "space-y-6",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "text-center space-y-2",
                                children: [jsxRuntimeExports.jsx("h2", {
                                    className: "text-2xl md:text-3xl font-bold text-[#403334]",
                                    children: "What's your current urgency in finding a job"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-lg text-[#4A3D55]",
                                    children: "No pressure - we'll tailor your experience based on your pace"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "grid grid-cols-1 md:grid-cols-2 gap-4 mt-8",
                                children: [jsxRuntimeExports.jsx(motion.div, {
                                    whileHover: {
                                        scale: 1.02
                                    },
                                    whileTap: {
                                        scale: .98
                                    },
                                    onClick: () => a({
                                        ...o,
                                        job_search_urgency: "rush"
                                    }),
                                    className: `p-6 rounded-xl border-2 cursor-pointer transition-all ${o.job_search_urgency === "rush" ? "border-[#b24e55] bg-[#ffe0e0]" : "border-gray-200 hover:border-[#b24e55] hover:bg-[#ffe0e0]"}`,
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "text-center space-y-4",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-16 h-16 mx-auto bg-[#d35c65] rounded-full flex items-center justify-center",
                                            children: jsxRuntimeExports.jsx(Zap, {
                                                className: "w-8 h-8 text-white"
                                            })
                                        }), jsxRuntimeExports.jsx("h3", {
                                            className: "text-xl font-semibold text-[#403334]",
                                            children: "I need a job ASAP"
                                        })]
                                    })
                                }), jsxRuntimeExports.jsx(motion.div, {
                                    whileHover: {
                                        scale: 1.02
                                    },
                                    whileTap: {
                                        scale: .98
                                    },
                                    onClick: () => a({
                                        ...o,
                                        job_search_urgency: "open"
                                    }),
                                    className: `p-6 rounded-xl border-2 cursor-pointer transition-all ${o.job_search_urgency === "open" ? "border-[#b24e55] bg-[#ffe0e0]" : "border-gray-200 hover:border-[#b24e55] hover:bg-[#ffe0e0]"}`,
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "text-center space-y-4",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-16 h-16 mx-auto bg-[#403334] rounded-full flex items-center justify-center",
                                            children: jsxRuntimeExports.jsx(Coffee, {
                                                className: "w-8 h-8 text-white"
                                            })
                                        }), jsxRuntimeExports.jsx("h3", {
                                            className: "text-xl font-semibold text-[#403334]",
                                            children: "I'm just exploring for now"
                                        })]
                                    })
                                })]
                            })]
                        }), e === 2 && jsxRuntimeExports.jsxs("div", {
                            className: "space-y-6",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "text-center space-y-2",
                                children: [jsxRuntimeExports.jsx("h2", {
                                    className: "text-2xl md:text-3xl font-bold text-[#403334]",
                                    children: "Desired Role"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-lg text-[#4A3D55]",
                                    children: "Which roles are you targeting? (Max 4 roles)"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-4",
                                children: [o.preferred_roles.length > 0 && jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsxs("p", {
                                        className: "text-sm font-medium text-[#4A3D55]",
                                        children: ["Selected roles (", o.preferred_roles.length, "/4):"]
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "flex flex-wrap gap-2",
                                        children: o.preferred_roles.map(Rt => jsxRuntimeExports.jsxs(Badge, {
                                            variant: "secondary",
                                            className: "bg-[#ffe0e0] text-[#b24e55] flex items-center gap-1 pr-1",
                                            children: [Rt, jsxRuntimeExports.jsx("button", {
                                                onClick: () => pt(Rt),
                                                className: "ml-1 hover:bg-[#b24e55] hover:text-white rounded-full p-0.5 transition-colors",
                                                children: jsxRuntimeExports.jsx(X, {
                                                    className: "w-3 h-3"
                                                })
                                            })]
                                        }, Rt))
                                    })]
                                }), o.preferred_roles.length < 4 && jsxRuntimeExports.jsx("div", {
                                    className: "space-y-2",
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex gap-2",
                                        children: [jsxRuntimeExports.jsx("input", {
                                            type: "text",
                                            placeholder: "Add a custom role...",
                                            value: $,
                                            onChange: Rt => _e(Rt.target.value),
                                            onKeyPress: Rt => Rt.key === "Enter" && ht(),
                                            className: "flex-1 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#b24e55] focus:border-transparent"
                                        }), jsxRuntimeExports.jsx(Button, {
                                            onClick: ht,
                                            disabled: !$.trim() || o.preferred_roles.includes($.trim()),
                                            className: "bg-[#b24e55] hover:bg-[#a04449] text-white px-4",
                                            children: jsxRuntimeExports.jsx(Plus, {
                                                className: "w-4 h-4"
                                            })
                                        })]
                                    })
                                }), o.preferred_roles.length < 4 && jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx("input", {
                                        type: "text",
                                        placeholder: "Search predefined roles...",
                                        value: b,
                                        onChange: Rt => _(Rt.target.value),
                                        className: "w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#b24e55] focus:border-transparent"
                                    }), b && jsxRuntimeExports.jsx("div", {
                                        className: "grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 max-h-60 overflow-y-auto",
                                        children: wt.slice(0, 9).map(Rt => jsxRuntimeExports.jsx(motion.div, {
                                            whileHover: {
                                                scale: 1.02
                                            },
                                            whileTap: {
                                                scale: .98
                                            },
                                            onClick: () => gt(Rt),
                                            className: "p-3 rounded-lg border-2 cursor-pointer transition-all text-center border-gray-200 hover:border-[#b24e55] hover:bg-[#ffe0e0]",
                                            children: jsxRuntimeExports.jsx("span", {
                                                className: "text-sm font-medium",
                                                children: Rt
                                            })
                                        }, Rt))
                                    })]
                                }), o.preferred_roles.length >= 4 && jsxRuntimeExports.jsx("div", {
                                    className: "text-center p-4 bg-[#ffe0e0] rounded-lg",
                                    children: jsxRuntimeExports.jsx("p", {
                                        className: "text-sm text-[#b24e55] font-medium",
                                        children: "Maximum of 4 roles selected. Remove a role to add another."
                                    })
                                })]
                            })]
                        }), e === 3 && jsxRuntimeExports.jsxs("div", {
                            className: "space-y-6",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "text-center space-y-2",
                                children: [jsxRuntimeExports.jsx("h2", {
                                    className: "text-2xl md:text-3xl font-bold text-[#403334]",
                                    children: "Experience Level"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-lg text-[#4A3D55]",
                                    children: "What's your current experience level?"
                                })]
                            }), jsxRuntimeExports.jsx("div", {
                                className: "space-y-3",
                                children: EXPERIENCE_LEVELS$1.map(Rt => jsxRuntimeExports.jsx(motion.div, {
                                    whileHover: {
                                        scale: 1.01
                                    },
                                    whileTap: {
                                        scale: .99
                                    },
                                    onClick: () => a({
                                        ...o,
                                        experience_level: Rt.value
                                    }),
                                    className: `p-4 rounded-lg border-2 cursor-pointer transition-all ${o.experience_level === Rt.value ? "border-[#b24e55] bg-[#ffe0e0]" : "border-gray-200 hover:border-[#b24e55] hover:bg-[#ffe0e0]"}`,
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center justify-between",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("h3", {
                                                className: "text-lg font-semibold text-[#403334]",
                                                children: Rt.label
                                            }), jsxRuntimeExports.jsx("p", {
                                                className: "text-sm text-[#4A3D55]",
                                                children: Rt.description
                                            })]
                                        }), o.experience_level === Rt.value && jsxRuntimeExports.jsx(CircleCheckBig, {
                                            className: "w-5 h-5 text-[#b24e55]"
                                        })]
                                    })
                                }, Rt.value))
                            })]
                        }), e === 4 && jsxRuntimeExports.jsxs("div", {
                            className: "space-y-6",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "text-center space-y-2",
                                children: [jsxRuntimeExports.jsx("h2", {
                                    className: "text-2xl md:text-3xl font-bold text-[#403334]",
                                    children: "Work Mode"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-lg text-[#4A3D55]",
                                    children: "How would you prefer to work?"
                                })]
                            }), jsxRuntimeExports.jsx("div", {
                                className: "space-y-3",
                                children: WORK_MODES.map(Rt => jsxRuntimeExports.jsx(motion.div, {
                                    whileHover: {
                                        scale: 1.01
                                    },
                                    whileTap: {
                                        scale: .99
                                    },
                                    onClick: () => a({
                                        ...o,
                                        work_mode: Rt.value
                                    }),
                                    className: `p-4 rounded-lg border-2 cursor-pointer transition-all ${o.work_mode === Rt.value ? "border-[#b24e55] bg-[#ffe0e0]" : "border-gray-200 hover:border-[#b24e55] hover:bg-[#ffe0e0]"}`,
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center justify-between",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("h3", {
                                                className: "text-lg font-semibold text-[#403334]",
                                                children: Rt.label
                                            }), jsxRuntimeExports.jsx("p", {
                                                className: "text-sm text-[#4A3D55]",
                                                children: Rt.description
                                            })]
                                        }), o.work_mode === Rt.value && jsxRuntimeExports.jsx(CircleCheckBig, {
                                            className: "w-5 h-5 text-[#b24e55]"
                                        })]
                                    })
                                }, Rt.value))
                            })]
                        }), e === 5 && jsxRuntimeExports.jsxs("div", {
                            className: "space-y-6",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "text-center space-y-2",
                                children: [jsxRuntimeExports.jsx("h2", {
                                    className: "text-2xl md:text-3xl font-bold text-[#403334]",
                                    children: "Salary Expectations"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-lg text-[#4A3D55]",
                                    children: "What's your expected salary range? (Optional)"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-6",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-4",
                                    children: [jsxRuntimeExports.jsx("h3", {
                                        className: "text-lg font-semibold text-[#403334]",
                                        children: "Choose a range:"
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                        children: SALARY_RANGES.map(Rt => jsxRuntimeExports.jsx(motion.div, {
                                            whileHover: {
                                                scale: 1.02
                                            },
                                            whileTap: {
                                                scale: .98
                                            },
                                            onClick: () => {
                                                a({
                                                    ...o,
                                                    salary_min: Rt.min,
                                                    salary_max: Rt.max
                                                }),
                                                rt(!1)
                                            }
                                            ,
                                            className: `p-4 rounded-lg border-2 cursor-pointer transition-all ${!tt && o.salary_min === Rt.min && o.salary_max === Rt.max ? "border-[#b24e55] bg-[#ffe0e0]" : "border-gray-200 hover:border-[#b24e55] hover:bg-[#ffe0e0]"}`,
                                            children: jsxRuntimeExports.jsxs("div", {
                                                className: "text-center",
                                                children: [jsxRuntimeExports.jsx("h3", {
                                                    className: "text-lg font-semibold text-[#403334]",
                                                    children: Rt.label
                                                }), !tt && o.salary_min === Rt.min && o.salary_max === Rt.max && jsxRuntimeExports.jsx(CircleCheckBig, {
                                                    className: "w-5 h-5 mx-auto mt-2 text-[#b24e55]"
                                                })]
                                            })
                                        }, Rt.label))
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-4",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center justify-between",
                                        children: [jsxRuntimeExports.jsx("h3", {
                                            className: "text-lg font-semibold text-[#403334]",
                                            children: "Or set custom range:"
                                        }), jsxRuntimeExports.jsx(Button, {
                                            variant: "outline",
                                            size: "sm",
                                            onClick: () => rt(!tt),
                                            className: `border-[#b24e55] ${tt ? "bg-[#ffe0e0] text-[#b24e55]" : "text-[#b24e55]"} hover:bg-[#ffe0e0]`,
                                            children: tt ? "Using Custom" : "Use Custom"
                                        })]
                                    }), tt && jsxRuntimeExports.jsxs("div", {
                                        className: "space-y-4 p-4 border-2 border-[#b24e55] rounded-lg bg-[#ffe0e0]",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            className: "space-y-2",
                                            children: [jsxRuntimeExports.jsxs("div", {
                                                className: "flex justify-between text-sm font-medium text-[#403334]",
                                                children: [jsxRuntimeExports.jsxs("span", {
                                                    children: ["Min: ₹", et[0], " LPA"]
                                                }), jsxRuntimeExports.jsxs("span", {
                                                    children: ["Max: ₹", et[1], " LPA"]
                                                })]
                                            }), jsxRuntimeExports.jsx(Slider, {
                                                value: et,
                                                onValueChange: it,
                                                max: 100,
                                                min: 0,
                                                step: 1,
                                                className: "w-full"
                                            }), jsxRuntimeExports.jsxs("div", {
                                                className: "flex justify-between text-xs text-[#4A3D55]",
                                                children: [jsxRuntimeExports.jsx("span", {
                                                    children: "₹0 LPA"
                                                }), jsxRuntimeExports.jsx("span", {
                                                    children: "₹100 LPA"
                                                })]
                                            })]
                                        }), jsxRuntimeExports.jsx("div", {
                                            className: "text-center",
                                            children: jsxRuntimeExports.jsxs("p", {
                                                className: "text-sm text-[#b24e55] font-medium",
                                                children: ["Selected: ₹", et[0], " - ₹", et[1], " LPA"]
                                            })
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "text-center",
                                    children: jsxRuntimeExports.jsx(Button, {
                                        variant: "outline",
                                        onClick: () => {
                                            a({
                                                ...o,
                                                salary_min: 0,
                                                salary_max: 0
                                            }),
                                            rt(!1)
                                        }
                                        ,
                                        className: "border-[#b24e55] text-[#b24e55] hover:bg-[#ffe0e0]",
                                        children: "Skip this step"
                                    })
                                })]
                            })]
                        })]
                    }, e)
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex justify-between items-center mt-8",
                    children: [jsxRuntimeExports.jsx(Button, {
                        variant: "outline",
                        onClick: ot,
                        disabled: e === 1,
                        className: "border-[#b24e55] text-[#b24e55] hover:bg-[#ffe0e0]",
                        children: "Back"
                    }), jsxRuntimeExports.jsx(Button, {
                        onClick: dt,
                        disabled: !yt() || c,
                        className: "bg-gradient-to-r from-[#b24e55] to-[#E3405F] hover:opacity-90 text-white",
                        children: c ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                className: "w-4 h-4 mr-2 animate-spin"
                            }), "Setting up..."]
                        }) : e === lt ? "Complete Setup" : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: ["Next", jsxRuntimeExports.jsx(ArrowRight, {
                                className: "w-4 h-4 ml-2"
                            })]
                        })
                    })]
                })]
            })
        })
    })
}
  , OnboardingWrapper = ({children: s}) => {
    const {user: e, loading: i} = useAuth()
      , [o,a] = reactExports.useState(!1)
      , [c,d] = reactExports.useState(!0)
      , h = useNavigate();
    reactExports.useEffect( () => {
        (async () => {
            if (!e || i) {
                d(!1);
                return
            }
            try {
                const {needsOnboarding: _} = await OnboardingService.checkOnboardingStatus(e);
                _ && a(!0)
            } catch (_) {
                console.error("Error checking onboarding status:", _)
            } finally {
                d(!1)
            }
        }
        )()
    }
    , [e, i]);
    const g = () => {
        a(!1),
        h("/dashboard")
    }
    ;
    return c ? jsxRuntimeExports.jsx("div", {
        className: "fixed inset-0 bg-[#fff7f8] flex items-center justify-center z-50",
        children: jsxRuntimeExports.jsxs("div", {
            className: "text-center space-y-4",
            children: [jsxRuntimeExports.jsx(LoaderCircle, {
                className: "w-8 h-8 animate-spin text-[#b24e55] mx-auto"
            }), jsxRuntimeExports.jsx("p", {
                className: "text-lg text-[#4A3D55]",
                children: "Setting up your experience..."
            })]
        })
    }) : o && e ? jsxRuntimeExports.jsx(OnboardingFlow, {
        onComplete: g
    }) : jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
        children: s
    })
}
;
var count = 0;
function useFocusGuards() {
    reactExports.useEffect( () => {
        const s = document.querySelectorAll("[data-radix-focus-guard]");
        return document.body.insertAdjacentElement("afterbegin", s[0] ?? createFocusGuard()),
        document.body.insertAdjacentElement("beforeend", s[1] ?? createFocusGuard()),
        count++,
        () => {
            count === 1 && document.querySelectorAll("[data-radix-focus-guard]").forEach(e => e.remove()),
            count--
        }
    }
    , [])
}
function createFocusGuard() {
    const s = document.createElement("span");
    return s.setAttribute("data-radix-focus-guard", ""),
    s.tabIndex = 0,
    s.style.outline = "none",
    s.style.opacity = "0",
    s.style.position = "fixed",
    s.style.pointerEvents = "none",
    s
}
var AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount"
  , AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount"
  , EVENT_OPTIONS$1 = {
    bubbles: !1,
    cancelable: !0
}
  , FOCUS_SCOPE_NAME = "FocusScope"
  , FocusScope = reactExports.forwardRef( (s, e) => {
    const {loop: i=!1, trapped: o=!1, onMountAutoFocus: a, onUnmountAutoFocus: c, ...d} = s
      , [h,g] = reactExports.useState(null)
      , b = useCallbackRef$1(a)
      , _ = useCallbackRef$1(c)
      , $ = reactExports.useRef(null)
      , _e = useComposedRefs(e, et => g(et))
      , tt = reactExports.useRef({
        paused: !1,
        pause() {
            this.paused = !0
        },
        resume() {
            this.paused = !1
        }
    }).current;
    reactExports.useEffect( () => {
        if (o) {
            let et = function(lt) {
                if (tt.paused || !h)
                    return;
                const dt = lt.target;
                h.contains(dt) ? $.current = dt : focus($.current, {
                    select: !0
                })
            }
              , it = function(lt) {
                if (tt.paused || !h)
                    return;
                const dt = lt.relatedTarget;
                dt !== null && (h.contains(dt) || focus($.current, {
                    select: !0
                }))
            }
              , st = function(lt) {
                if (document.activeElement === document.body)
                    for (const ot of lt)
                        ot.removedNodes.length > 0 && focus(h)
            };
            document.addEventListener("focusin", et),
            document.addEventListener("focusout", it);
            const nt = new MutationObserver(st);
            return h && nt.observe(h, {
                childList: !0,
                subtree: !0
            }),
            () => {
                document.removeEventListener("focusin", et),
                document.removeEventListener("focusout", it),
                nt.disconnect()
            }
        }
    }
    , [o, h, tt.paused]),
    reactExports.useEffect( () => {
        if (h) {
            focusScopesStack.add(tt);
            const et = document.activeElement;
            if (!h.contains(et)) {
                const st = new CustomEvent(AUTOFOCUS_ON_MOUNT,EVENT_OPTIONS$1);
                h.addEventListener(AUTOFOCUS_ON_MOUNT, b),
                h.dispatchEvent(st),
                st.defaultPrevented || (focusFirst$2(removeLinks(getTabbableCandidates(h)), {
                    select: !0
                }),
                document.activeElement === et && focus(h))
            }
            return () => {
                h.removeEventListener(AUTOFOCUS_ON_MOUNT, b),
                setTimeout( () => {
                    const st = new CustomEvent(AUTOFOCUS_ON_UNMOUNT,EVENT_OPTIONS$1);
                    h.addEventListener(AUTOFOCUS_ON_UNMOUNT, _),
                    h.dispatchEvent(st),
                    st.defaultPrevented || focus(et ?? document.body, {
                        select: !0
                    }),
                    h.removeEventListener(AUTOFOCUS_ON_UNMOUNT, _),
                    focusScopesStack.remove(tt)
                }
                , 0)
            }
        }
    }
    , [h, b, _, tt]);
    const rt = reactExports.useCallback(et => {
        if (!i && !o || tt.paused)
            return;
        const it = et.key === "Tab" && !et.altKey && !et.ctrlKey && !et.metaKey
          , st = document.activeElement;
        if (it && st) {
            const nt = et.currentTarget
              , [lt,dt] = getTabbableEdges(nt);
            lt && dt ? !et.shiftKey && st === dt ? (et.preventDefault(),
            i && focus(lt, {
                select: !0
            })) : et.shiftKey && st === lt && (et.preventDefault(),
            i && focus(dt, {
                select: !0
            })) : st === nt && et.preventDefault()
        }
    }
    , [i, o, tt.paused]);
    return jsxRuntimeExports.jsx(Primitive$1.div, {
        tabIndex: -1,
        ...d,
        ref: _e,
        onKeyDown: rt
    })
}
);
FocusScope.displayName = FOCUS_SCOPE_NAME;
function focusFirst$2(s, {select: e=!1}={}) {
    const i = document.activeElement;
    for (const o of s)
        if (focus(o, {
            select: e
        }),
        document.activeElement !== i)
            return
}
function getTabbableEdges(s) {
    const e = getTabbableCandidates(s)
      , i = findVisible(e, s)
      , o = findVisible(e.reverse(), s);
    return [i, o]
}
function getTabbableCandidates(s) {
    const e = []
      , i = document.createTreeWalker(s, NodeFilter.SHOW_ELEMENT, {
        acceptNode: o => {
            const a = o.tagName === "INPUT" && o.type === "hidden";
            return o.disabled || o.hidden || a ? NodeFilter.FILTER_SKIP : o.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP
        }
    });
    for (; i.nextNode(); )
        e.push(i.currentNode);
    return e
}
function findVisible(s, e) {
    for (const i of s)
        if (!isHidden(i, {
            upTo: e
        }))
            return i
}
function isHidden(s, {upTo: e}) {
    if (getComputedStyle(s).visibility === "hidden")
        return !0;
    for (; s; ) {
        if (e !== void 0 && s === e)
            return !1;
        if (getComputedStyle(s).display === "none")
            return !0;
        s = s.parentElement
    }
    return !1
}
function isSelectableInput(s) {
    return s instanceof HTMLInputElement && "select"in s
}
function focus(s, {select: e=!1}={}) {
    if (s && s.focus) {
        const i = document.activeElement;
        s.focus({
            preventScroll: !0
        }),
        s !== i && isSelectableInput(s) && e && s.select()
    }
}
var focusScopesStack = createFocusScopesStack();
function createFocusScopesStack() {
    let s = [];
    return {
        add(e) {
            const i = s[0];
            e !== i && (i == null || i.pause()),
            s = arrayRemove(s, e),
            s.unshift(e)
        },
        remove(e) {
            var i;
            s = arrayRemove(s, e),
            (i = s[0]) == null || i.resume()
        }
    }
}
function arrayRemove(s, e) {
    const i = [...s]
      , o = i.indexOf(e);
    return o !== -1 && i.splice(o, 1),
    i
}
function removeLinks(s) {
    return s.filter(e => e.tagName !== "A")
}
function createContextScope$1(s, e=[]) {
    let i = [];
    function o(c, d) {
        const h = reactExports.createContext(d)
          , g = i.length;
        i = [...i, d];
        function b($) {
            const {scope: _e, children: tt, ...rt} = $
              , et = (_e == null ? void 0 : _e[s][g]) || h
              , it = reactExports.useMemo( () => rt, Object.values(rt));
            return jsxRuntimeExports.jsx(et.Provider, {
                value: it,
                children: tt
            })
        }
        function _($, _e) {
            const tt = (_e == null ? void 0 : _e[s][g]) || h
              , rt = reactExports.useContext(tt);
            if (rt)
                return rt;
            if (d !== void 0)
                return d;
            throw new Error(`\`${$}\` must be used within \`${c}\``)
        }
        return b.displayName = c + "Provider",
        [b, _]
    }
    const a = () => {
        const c = i.map(d => reactExports.createContext(d));
        return function(h) {
            const g = (h == null ? void 0 : h[s]) || c;
            return reactExports.useMemo( () => ({
                [`__scope${s}`]: {
                    ...h,
                    [s]: g
                }
            }), [h, g])
        }
    }
    ;
    return a.scopeName = s,
    [o, composeContextScopes$1(a, ...e)]
}
function composeContextScopes$1(...s) {
    const e = s[0];
    if (s.length === 1)
        return e;
    const i = () => {
        const o = s.map(a => ({
            useScope: a(),
            scopeName: a.scopeName
        }));
        return function(c) {
            const d = o.reduce( (h, {useScope: g, scopeName: b}) => {
                const $ = g(c)[`__scope${b}`];
                return {
                    ...h,
                    ...$
                }
            }
            , {});
            return reactExports.useMemo( () => ({
                [`__scope${e.scopeName}`]: d
            }), [d])
        }
    }
    ;
    return i.scopeName = e.scopeName,
    i
}
var ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus"
  , EVENT_OPTIONS = {
    bubbles: !1,
    cancelable: !0
}
  , GROUP_NAME$3 = "RovingFocusGroup"
  , [Collection$2,useCollection$2,createCollectionScope$2] = createCollection(GROUP_NAME$3)
  , [createRovingFocusGroupContext,createRovingFocusGroupScope] = createContextScope$1(GROUP_NAME$3, [createCollectionScope$2])
  , [RovingFocusProvider,useRovingFocusContext] = createRovingFocusGroupContext(GROUP_NAME$3)
  , RovingFocusGroup = reactExports.forwardRef( (s, e) => jsxRuntimeExports.jsx(Collection$2.Provider, {
    scope: s.__scopeRovingFocusGroup,
    children: jsxRuntimeExports.jsx(Collection$2.Slot, {
        scope: s.__scopeRovingFocusGroup,
        children: jsxRuntimeExports.jsx(RovingFocusGroupImpl, {
            ...s,
            ref: e
        })
    })
}));
RovingFocusGroup.displayName = GROUP_NAME$3;
var RovingFocusGroupImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeRovingFocusGroup: i, orientation: o, loop: a=!1, dir: c, currentTabStopId: d, defaultCurrentTabStopId: h, onCurrentTabStopIdChange: g, onEntryFocus: b, preventScrollOnEntryFocus: _=!1, ...$} = s
      , _e = reactExports.useRef(null)
      , tt = useComposedRefs(e, _e)
      , rt = useDirection(c)
      , [et=null,it] = useControllableState({
        prop: d,
        defaultProp: h,
        onChange: g
    })
      , [st,nt] = reactExports.useState(!1)
      , lt = useCallbackRef$1(b)
      , dt = useCollection$2(i)
      , ot = reactExports.useRef(!1)
      , [at,ht] = reactExports.useState(0);
    return reactExports.useEffect( () => {
        const pt = _e.current;
        if (pt)
            return pt.addEventListener(ENTRY_FOCUS, lt),
            () => pt.removeEventListener(ENTRY_FOCUS, lt)
    }
    , [lt]),
    jsxRuntimeExports.jsx(RovingFocusProvider, {
        scope: i,
        orientation: o,
        dir: rt,
        loop: a,
        currentTabStopId: et,
        onItemFocus: reactExports.useCallback(pt => it(pt), [it]),
        onItemShiftTab: reactExports.useCallback( () => nt(!0), []),
        onFocusableItemAdd: reactExports.useCallback( () => ht(pt => pt + 1), []),
        onFocusableItemRemove: reactExports.useCallback( () => ht(pt => pt - 1), []),
        children: jsxRuntimeExports.jsx(Primitive$1.div, {
            tabIndex: st || at === 0 ? -1 : 0,
            "data-orientation": o,
            ...$,
            ref: tt,
            style: {
                outline: "none",
                ...s.style
            },
            onMouseDown: composeEventHandlers(s.onMouseDown, () => {
                ot.current = !0
            }
            ),
            onFocus: composeEventHandlers(s.onFocus, pt => {
                const gt = !ot.current;
                if (pt.target === pt.currentTarget && gt && !st) {
                    const wt = new CustomEvent(ENTRY_FOCUS,EVENT_OPTIONS);
                    if (pt.currentTarget.dispatchEvent(wt),
                    !wt.defaultPrevented) {
                        const yt = dt().filter(At => At.focusable)
                          , Rt = yt.find(At => At.active)
                          , Mt = yt.find(At => At.id === et)
                          , zt = [Rt, Mt, ...yt].filter(Boolean).map(At => At.ref.current);
                        focusFirst$1(zt, _)
                    }
                }
                ot.current = !1
            }
            ),
            onBlur: composeEventHandlers(s.onBlur, () => nt(!1))
        })
    })
}
)
  , ITEM_NAME$3 = "RovingFocusGroupItem"
  , RovingFocusGroupItem = reactExports.forwardRef( (s, e) => {
    const {__scopeRovingFocusGroup: i, focusable: o=!0, active: a=!1, tabStopId: c, ...d} = s
      , h = useId$1()
      , g = c || h
      , b = useRovingFocusContext(ITEM_NAME$3, i)
      , _ = b.currentTabStopId === g
      , $ = useCollection$2(i)
      , {onFocusableItemAdd: _e, onFocusableItemRemove: tt} = b;
    return reactExports.useEffect( () => {
        if (o)
            return _e(),
            () => tt()
    }
    , [o, _e, tt]),
    jsxRuntimeExports.jsx(Collection$2.ItemSlot, {
        scope: i,
        id: g,
        focusable: o,
        active: a,
        children: jsxRuntimeExports.jsx(Primitive$1.span, {
            tabIndex: _ ? 0 : -1,
            "data-orientation": b.orientation,
            ...d,
            ref: e,
            onMouseDown: composeEventHandlers(s.onMouseDown, rt => {
                o ? b.onItemFocus(g) : rt.preventDefault()
            }
            ),
            onFocus: composeEventHandlers(s.onFocus, () => b.onItemFocus(g)),
            onKeyDown: composeEventHandlers(s.onKeyDown, rt => {
                if (rt.key === "Tab" && rt.shiftKey) {
                    b.onItemShiftTab();
                    return
                }
                if (rt.target !== rt.currentTarget)
                    return;
                const et = getFocusIntent(rt, b.orientation, b.dir);
                if (et !== void 0) {
                    if (rt.metaKey || rt.ctrlKey || rt.altKey || rt.shiftKey)
                        return;
                    rt.preventDefault();
                    let st = $().filter(nt => nt.focusable).map(nt => nt.ref.current);
                    if (et === "last")
                        st.reverse();
                    else if (et === "prev" || et === "next") {
                        et === "prev" && st.reverse();
                        const nt = st.indexOf(rt.currentTarget);
                        st = b.loop ? wrapArray$2(st, nt + 1) : st.slice(nt + 1)
                    }
                    setTimeout( () => focusFirst$1(st))
                }
            }
            )
        })
    })
}
);
RovingFocusGroupItem.displayName = ITEM_NAME$3;
var MAP_KEY_TO_FOCUS_INTENT = {
    ArrowLeft: "prev",
    ArrowUp: "prev",
    ArrowRight: "next",
    ArrowDown: "next",
    PageUp: "first",
    Home: "first",
    PageDown: "last",
    End: "last"
};
function getDirectionAwareKey(s, e) {
    return e !== "rtl" ? s : s === "ArrowLeft" ? "ArrowRight" : s === "ArrowRight" ? "ArrowLeft" : s
}
function getFocusIntent(s, e, i) {
    const o = getDirectionAwareKey(s.key, i);
    if (!(e === "vertical" && ["ArrowLeft", "ArrowRight"].includes(o)) && !(e === "horizontal" && ["ArrowUp", "ArrowDown"].includes(o)))
        return MAP_KEY_TO_FOCUS_INTENT[o]
}
function focusFirst$1(s, e=!1) {
    const i = document.activeElement;
    for (const o of s)
        if (o === i || (o.focus({
            preventScroll: e
        }),
        document.activeElement !== i))
            return
}
function wrapArray$2(s, e) {
    return s.map( (i, o) => s[(e + o) % s.length])
}
var Root$7 = RovingFocusGroup
  , Item$1 = RovingFocusGroupItem
  , getDefaultParent = function(s) {
    if (typeof document > "u")
        return null;
    var e = Array.isArray(s) ? s[0] : s;
    return e.ownerDocument.body
}
  , counterMap = new WeakMap
  , uncontrolledNodes = new WeakMap
  , markerMap = {}
  , lockCount = 0
  , unwrapHost = function(s) {
    return s && (s.host || unwrapHost(s.parentNode))
}
  , correctTargets = function(s, e) {
    return e.map(function(i) {
        if (s.contains(i))
            return i;
        var o = unwrapHost(i);
        return o && s.contains(o) ? o : (console.error("aria-hidden", i, "in not contained inside", s, ". Doing nothing"),
        null)
    }).filter(function(i) {
        return !!i
    })
}
  , applyAttributeToOthers = function(s, e, i, o) {
    var a = correctTargets(e, Array.isArray(s) ? s : [s]);
    markerMap[i] || (markerMap[i] = new WeakMap);
    var c = markerMap[i]
      , d = []
      , h = new Set
      , g = new Set(a)
      , b = function($) {
        !$ || h.has($) || (h.add($),
        b($.parentNode))
    };
    a.forEach(b);
    var _ = function($) {
        !$ || g.has($) || Array.prototype.forEach.call($.children, function(_e) {
            if (h.has(_e))
                _(_e);
            else
                try {
                    var tt = _e.getAttribute(o)
                      , rt = tt !== null && tt !== "false"
                      , et = (counterMap.get(_e) || 0) + 1
                      , it = (c.get(_e) || 0) + 1;
                    counterMap.set(_e, et),
                    c.set(_e, it),
                    d.push(_e),
                    et === 1 && rt && uncontrolledNodes.set(_e, !0),
                    it === 1 && _e.setAttribute(i, "true"),
                    rt || _e.setAttribute(o, "true")
                } catch (st) {
                    console.error("aria-hidden: cannot operate on ", _e, st)
                }
        })
    };
    return _(e),
    h.clear(),
    lockCount++,
    function() {
        d.forEach(function($) {
            var _e = counterMap.get($) - 1
              , tt = c.get($) - 1;
            counterMap.set($, _e),
            c.set($, tt),
            _e || (uncontrolledNodes.has($) || $.removeAttribute(o),
            uncontrolledNodes.delete($)),
            tt || $.removeAttribute(i)
        }),
        lockCount--,
        lockCount || (counterMap = new WeakMap,
        counterMap = new WeakMap,
        uncontrolledNodes = new WeakMap,
        markerMap = {})
    }
}
  , hideOthers = function(s, e, i) {
    i === void 0 && (i = "data-aria-hidden");
    var o = Array.from(Array.isArray(s) ? s : [s])
      , a = getDefaultParent(s);
    return a ? (o.push.apply(o, Array.from(a.querySelectorAll("[aria-live]"))),
    applyAttributeToOthers(o, a, i, "aria-hidden")) : function() {
        return null
    }
}
  , __assign = function() {
    return __assign = Object.assign || function(e) {
        for (var i, o = 1, a = arguments.length; o < a; o++) {
            i = arguments[o];
            for (var c in i)
                Object.prototype.hasOwnProperty.call(i, c) && (e[c] = i[c])
        }
        return e
    }
    ,
    __assign.apply(this, arguments)
};
function __rest(s, e) {
    var i = {};
    for (var o in s)
        Object.prototype.hasOwnProperty.call(s, o) && e.indexOf(o) < 0 && (i[o] = s[o]);
    if (s != null && typeof Object.getOwnPropertySymbols == "function")
        for (var a = 0, o = Object.getOwnPropertySymbols(s); a < o.length; a++)
            e.indexOf(o[a]) < 0 && Object.prototype.propertyIsEnumerable.call(s, o[a]) && (i[o[a]] = s[o[a]]);
    return i
}
function __spreadArray(s, e, i) {
    if (i || arguments.length === 2)
        for (var o = 0, a = e.length, c; o < a; o++)
            (c || !(o in e)) && (c || (c = Array.prototype.slice.call(e, 0, o)),
            c[o] = e[o]);
    return s.concat(c || Array.prototype.slice.call(e))
}
typeof SuppressedError == "function" && SuppressedError;
var zeroRightClassName = "right-scroll-bar-position"
  , fullWidthClassName = "width-before-scroll-bar"
  , noScrollbarsClassName = "with-scroll-bars-hidden"
  , removedBarSizeVariable = "--removed-body-scroll-bar-size";
function assignRef(s, e) {
    return typeof s == "function" ? s(e) : s && (s.current = e),
    s
}
function useCallbackRef(s, e) {
    var i = reactExports.useState(function() {
        return {
            value: s,
            callback: e,
            facade: {
                get current() {
                    return i.value
                },
                set current(o) {
                    var a = i.value;
                    a !== o && (i.value = o,
                    i.callback(o, a))
                }
            }
        }
    })[0];
    return i.callback = e,
    i.facade
}
var useIsomorphicLayoutEffect$1 = typeof window < "u" ? reactExports.useLayoutEffect : reactExports.useEffect
  , currentValues = new WeakMap;
function useMergeRefs(s, e) {
    var i = useCallbackRef(null, function(o) {
        return s.forEach(function(a) {
            return assignRef(a, o)
        })
    });
    return useIsomorphicLayoutEffect$1(function() {
        var o = currentValues.get(i);
        if (o) {
            var a = new Set(o)
              , c = new Set(s)
              , d = i.current;
            a.forEach(function(h) {
                c.has(h) || assignRef(h, null)
            }),
            c.forEach(function(h) {
                a.has(h) || assignRef(h, d)
            })
        }
        currentValues.set(i, s)
    }, [s]),
    i
}
function ItoI(s) {
    return s
}
function innerCreateMedium(s, e) {
    e === void 0 && (e = ItoI);
    var i = []
      , o = !1
      , a = {
        read: function() {
            if (o)
                throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
            return i.length ? i[i.length - 1] : s
        },
        useMedium: function(c) {
            var d = e(c, o);
            return i.push(d),
            function() {
                i = i.filter(function(h) {
                    return h !== d
                })
            }
        },
        assignSyncMedium: function(c) {
            for (o = !0; i.length; ) {
                var d = i;
                i = [],
                d.forEach(c)
            }
            i = {
                push: function(h) {
                    return c(h)
                },
                filter: function() {
                    return i
                }
            }
        },
        assignMedium: function(c) {
            o = !0;
            var d = [];
            if (i.length) {
                var h = i;
                i = [],
                h.forEach(c),
                d = i
            }
            var g = function() {
                var _ = d;
                d = [],
                _.forEach(c)
            }
              , b = function() {
                return Promise.resolve().then(g)
            };
            b(),
            i = {
                push: function(_) {
                    d.push(_),
                    b()
                },
                filter: function(_) {
                    return d = d.filter(_),
                    i
                }
            }
        }
    };
    return a
}
function createSidecarMedium(s) {
    s === void 0 && (s = {});
    var e = innerCreateMedium(null);
    return e.options = __assign({
        async: !0,
        ssr: !1
    }, s),
    e
}
var SideCar$1 = function(s) {
    var e = s.sideCar
      , i = __rest(s, ["sideCar"]);
    if (!e)
        throw new Error("Sidecar: please provide `sideCar` property to import the right car");
    var o = e.read();
    if (!o)
        throw new Error("Sidecar medium not found");
    return reactExports.createElement(o, __assign({}, i))
};
SideCar$1.isSideCarExport = !0;
function exportSidecar(s, e) {
    return s.useMedium(e),
    SideCar$1
}
var effectCar = createSidecarMedium()
  , nothing = function() {}
  , RemoveScroll = reactExports.forwardRef(function(s, e) {
    var i = reactExports.useRef(null)
      , o = reactExports.useState({
        onScrollCapture: nothing,
        onWheelCapture: nothing,
        onTouchMoveCapture: nothing
    })
      , a = o[0]
      , c = o[1]
      , d = s.forwardProps
      , h = s.children
      , g = s.className
      , b = s.removeScrollBar
      , _ = s.enabled
      , $ = s.shards
      , _e = s.sideCar
      , tt = s.noIsolation
      , rt = s.inert
      , et = s.allowPinchZoom
      , it = s.as
      , st = it === void 0 ? "div" : it
      , nt = s.gapMode
      , lt = __rest(s, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"])
      , dt = _e
      , ot = useMergeRefs([i, e])
      , at = __assign(__assign({}, lt), a);
    return reactExports.createElement(reactExports.Fragment, null, _ && reactExports.createElement(dt, {
        sideCar: effectCar,
        removeScrollBar: b,
        shards: $,
        noIsolation: tt,
        inert: rt,
        setCallbacks: c,
        allowPinchZoom: !!et,
        lockRef: i,
        gapMode: nt
    }), d ? reactExports.cloneElement(reactExports.Children.only(h), __assign(__assign({}, at), {
        ref: ot
    })) : reactExports.createElement(st, __assign({}, at, {
        className: g,
        ref: ot
    }), h))
});
RemoveScroll.defaultProps = {
    enabled: !0,
    removeScrollBar: !0,
    inert: !1
};
RemoveScroll.classNames = {
    fullWidth: fullWidthClassName,
    zeroRight: zeroRightClassName
};
var getNonce = function() {
    if (typeof __webpack_nonce__ < "u")
        return __webpack_nonce__
};
function makeStyleTag() {
    if (!document)
        return null;
    var s = document.createElement("style");
    s.type = "text/css";
    var e = getNonce();
    return e && s.setAttribute("nonce", e),
    s
}
function injectStyles(s, e) {
    s.styleSheet ? s.styleSheet.cssText = e : s.appendChild(document.createTextNode(e))
}
function insertStyleTag(s) {
    var e = document.head || document.getElementsByTagName("head")[0];
    e.appendChild(s)
}
var stylesheetSingleton = function() {
    var s = 0
      , e = null;
    return {
        add: function(i) {
            s == 0 && (e = makeStyleTag()) && (injectStyles(e, i),
            insertStyleTag(e)),
            s++
        },
        remove: function() {
            s--,
            !s && e && (e.parentNode && e.parentNode.removeChild(e),
            e = null)
        }
    }
}
  , styleHookSingleton = function() {
    var s = stylesheetSingleton();
    return function(e, i) {
        reactExports.useEffect(function() {
            return s.add(e),
            function() {
                s.remove()
            }
        }, [e && i])
    }
}
  , styleSingleton = function() {
    var s = styleHookSingleton()
      , e = function(i) {
        var o = i.styles
          , a = i.dynamic;
        return s(o, a),
        null
    };
    return e
}
  , zeroGap = {
    left: 0,
    top: 0,
    right: 0,
    gap: 0
}
  , parse = function(s) {
    return parseInt(s || "", 10) || 0
}
  , getOffset = function(s) {
    var e = window.getComputedStyle(document.body)
      , i = e[s === "padding" ? "paddingLeft" : "marginLeft"]
      , o = e[s === "padding" ? "paddingTop" : "marginTop"]
      , a = e[s === "padding" ? "paddingRight" : "marginRight"];
    return [parse(i), parse(o), parse(a)]
}
  , getGapWidth = function(s) {
    if (s === void 0 && (s = "margin"),
    typeof window > "u")
        return zeroGap;
    var e = getOffset(s)
      , i = document.documentElement.clientWidth
      , o = window.innerWidth;
    return {
        left: e[0],
        top: e[1],
        right: e[2],
        gap: Math.max(0, o - i + e[2] - e[0])
    }
}
  , Style = styleSingleton()
  , lockAttribute = "data-scroll-locked"
  , getStyles = function(s, e, i, o) {
    var a = s.left
      , c = s.top
      , d = s.right
      , h = s.gap;
    return i === void 0 && (i = "margin"),
    `
  .`.concat(noScrollbarsClassName, ` {
   overflow: hidden `).concat(o, `;
   padding-right: `).concat(h, "px ").concat(o, `;
  }
  body[`).concat(lockAttribute, `] {
    overflow: hidden `).concat(o, `;
    overscroll-behavior: contain;
    `).concat([e && "position: relative ".concat(o, ";"), i === "margin" && `
    padding-left: `.concat(a, `px;
    padding-top: `).concat(c, `px;
    padding-right: `).concat(d, `px;
    margin-left:0;
    margin-top:0;
    margin-right: `).concat(h, "px ").concat(o, `;
    `), i === "padding" && "padding-right: ".concat(h, "px ").concat(o, ";")].filter(Boolean).join(""), `
  }
  
  .`).concat(zeroRightClassName, ` {
    right: `).concat(h, "px ").concat(o, `;
  }
  
  .`).concat(fullWidthClassName, ` {
    margin-right: `).concat(h, "px ").concat(o, `;
  }
  
  .`).concat(zeroRightClassName, " .").concat(zeroRightClassName, ` {
    right: 0 `).concat(o, `;
  }
  
  .`).concat(fullWidthClassName, " .").concat(fullWidthClassName, ` {
    margin-right: 0 `).concat(o, `;
  }
  
  body[`).concat(lockAttribute, `] {
    `).concat(removedBarSizeVariable, ": ").concat(h, `px;
  }
`)
}
  , getCurrentUseCounter = function() {
    var s = parseInt(document.body.getAttribute(lockAttribute) || "0", 10);
    return isFinite(s) ? s : 0
}
  , useLockAttribute = function() {
    reactExports.useEffect(function() {
        return document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString()),
        function() {
            var s = getCurrentUseCounter() - 1;
            s <= 0 ? document.body.removeAttribute(lockAttribute) : document.body.setAttribute(lockAttribute, s.toString())
        }
    }, [])
}
  , RemoveScrollBar = function(s) {
    var e = s.noRelative
      , i = s.noImportant
      , o = s.gapMode
      , a = o === void 0 ? "margin" : o;
    useLockAttribute();
    var c = reactExports.useMemo(function() {
        return getGapWidth(a)
    }, [a]);
    return reactExports.createElement(Style, {
        styles: getStyles(c, !e, a, i ? "" : "!important")
    })
}
  , passiveSupported = !1;
if (typeof window < "u")
    try {
        var options = Object.defineProperty({}, "passive", {
            get: function() {
                return passiveSupported = !0,
                !0
            }
        });
        window.addEventListener("test", options, options),
        window.removeEventListener("test", options, options)
    } catch {
        passiveSupported = !1
    }
var nonPassive = passiveSupported ? {
    passive: !1
} : !1
  , alwaysContainsScroll = function(s) {
    return s.tagName === "TEXTAREA"
}
  , elementCanBeScrolled = function(s, e) {
    if (!(s instanceof Element))
        return !1;
    var i = window.getComputedStyle(s);
    return i[e] !== "hidden" && !(i.overflowY === i.overflowX && !alwaysContainsScroll(s) && i[e] === "visible")
}
  , elementCouldBeVScrolled = function(s) {
    return elementCanBeScrolled(s, "overflowY")
}
  , elementCouldBeHScrolled = function(s) {
    return elementCanBeScrolled(s, "overflowX")
}
  , locationCouldBeScrolled = function(s, e) {
    var i = e.ownerDocument
      , o = e;
    do {
        typeof ShadowRoot < "u" && o instanceof ShadowRoot && (o = o.host);
        var a = elementCouldBeScrolled(s, o);
        if (a) {
            var c = getScrollVariables(s, o)
              , d = c[1]
              , h = c[2];
            if (d > h)
                return !0
        }
        o = o.parentNode
    } while (o && o !== i.body);
    return !1
}
  , getVScrollVariables = function(s) {
    var e = s.scrollTop
      , i = s.scrollHeight
      , o = s.clientHeight;
    return [e, i, o]
}
  , getHScrollVariables = function(s) {
    var e = s.scrollLeft
      , i = s.scrollWidth
      , o = s.clientWidth;
    return [e, i, o]
}
  , elementCouldBeScrolled = function(s, e) {
    return s === "v" ? elementCouldBeVScrolled(e) : elementCouldBeHScrolled(e)
}
  , getScrollVariables = function(s, e) {
    return s === "v" ? getVScrollVariables(e) : getHScrollVariables(e)
}
  , getDirectionFactor = function(s, e) {
    return s === "h" && e === "rtl" ? -1 : 1
}
  , handleScroll = function(s, e, i, o, a) {
    var c = getDirectionFactor(s, window.getComputedStyle(e).direction)
      , d = c * o
      , h = i.target
      , g = e.contains(h)
      , b = !1
      , _ = d > 0
      , $ = 0
      , _e = 0;
    do {
        var tt = getScrollVariables(s, h)
          , rt = tt[0]
          , et = tt[1]
          , it = tt[2]
          , st = et - it - c * rt;
        (rt || st) && elementCouldBeScrolled(s, h) && ($ += st,
        _e += rt),
        h instanceof ShadowRoot ? h = h.host : h = h.parentNode
    } while (!g && h !== document.body || g && (e.contains(h) || e === h));
    return (_ && (Math.abs($) < 1 || !a) || !_ && (Math.abs(_e) < 1 || !a)) && (b = !0),
    b
}
  , getTouchXY = function(s) {
    return "changedTouches"in s ? [s.changedTouches[0].clientX, s.changedTouches[0].clientY] : [0, 0]
}
  , getDeltaXY = function(s) {
    return [s.deltaX, s.deltaY]
}
  , extractRef = function(s) {
    return s && "current"in s ? s.current : s
}
  , deltaCompare = function(s, e) {
    return s[0] === e[0] && s[1] === e[1]
}
  , generateStyle = function(s) {
    return `
  .block-interactivity-`.concat(s, ` {pointer-events: none;}
  .allow-interactivity-`).concat(s, ` {pointer-events: all;}
`)
}
  , idCounter = 0
  , lockStack = [];
function RemoveScrollSideCar(s) {
    var e = reactExports.useRef([])
      , i = reactExports.useRef([0, 0])
      , o = reactExports.useRef()
      , a = reactExports.useState(idCounter++)[0]
      , c = reactExports.useState(styleSingleton)[0]
      , d = reactExports.useRef(s);
    reactExports.useEffect(function() {
        d.current = s
    }, [s]),
    reactExports.useEffect(function() {
        if (s.inert) {
            document.body.classList.add("block-interactivity-".concat(a));
            var et = __spreadArray([s.lockRef.current], (s.shards || []).map(extractRef), !0).filter(Boolean);
            return et.forEach(function(it) {
                return it.classList.add("allow-interactivity-".concat(a))
            }),
            function() {
                document.body.classList.remove("block-interactivity-".concat(a)),
                et.forEach(function(it) {
                    return it.classList.remove("allow-interactivity-".concat(a))
                })
            }
        }
    }, [s.inert, s.lockRef.current, s.shards]);
    var h = reactExports.useCallback(function(et, it) {
        if ("touches"in et && et.touches.length === 2 || et.type === "wheel" && et.ctrlKey)
            return !d.current.allowPinchZoom;
        var st = getTouchXY(et), nt = i.current, lt = "deltaX"in et ? et.deltaX : nt[0] - st[0], dt = "deltaY"in et ? et.deltaY : nt[1] - st[1], ot, at = et.target, ht = Math.abs(lt) > Math.abs(dt) ? "h" : "v";
        if ("touches"in et && ht === "h" && at.type === "range")
            return !1;
        var pt = locationCouldBeScrolled(ht, at);
        if (!pt)
            return !0;
        if (pt ? ot = ht : (ot = ht === "v" ? "h" : "v",
        pt = locationCouldBeScrolled(ht, at)),
        !pt)
            return !1;
        if (!o.current && "changedTouches"in et && (lt || dt) && (o.current = ot),
        !ot)
            return !0;
        var gt = o.current || ot;
        return handleScroll(gt, it, et, gt === "h" ? lt : dt, !0)
    }, [])
      , g = reactExports.useCallback(function(et) {
        var it = et;
        if (!(!lockStack.length || lockStack[lockStack.length - 1] !== c)) {
            var st = "deltaY"in it ? getDeltaXY(it) : getTouchXY(it)
              , nt = e.current.filter(function(ot) {
                return ot.name === it.type && (ot.target === it.target || it.target === ot.shadowParent) && deltaCompare(ot.delta, st)
            })[0];
            if (nt && nt.should) {
                it.cancelable && it.preventDefault();
                return
            }
            if (!nt) {
                var lt = (d.current.shards || []).map(extractRef).filter(Boolean).filter(function(ot) {
                    return ot.contains(it.target)
                })
                  , dt = lt.length > 0 ? h(it, lt[0]) : !d.current.noIsolation;
                dt && it.cancelable && it.preventDefault()
            }
        }
    }, [])
      , b = reactExports.useCallback(function(et, it, st, nt) {
        var lt = {
            name: et,
            delta: it,
            target: st,
            should: nt,
            shadowParent: getOutermostShadowParent(st)
        };
        e.current.push(lt),
        setTimeout(function() {
            e.current = e.current.filter(function(dt) {
                return dt !== lt
            })
        }, 1)
    }, [])
      , _ = reactExports.useCallback(function(et) {
        i.current = getTouchXY(et),
        o.current = void 0
    }, [])
      , $ = reactExports.useCallback(function(et) {
        b(et.type, getDeltaXY(et), et.target, h(et, s.lockRef.current))
    }, [])
      , _e = reactExports.useCallback(function(et) {
        b(et.type, getTouchXY(et), et.target, h(et, s.lockRef.current))
    }, []);
    reactExports.useEffect(function() {
        return lockStack.push(c),
        s.setCallbacks({
            onScrollCapture: $,
            onWheelCapture: $,
            onTouchMoveCapture: _e
        }),
        document.addEventListener("wheel", g, nonPassive),
        document.addEventListener("touchmove", g, nonPassive),
        document.addEventListener("touchstart", _, nonPassive),
        function() {
            lockStack = lockStack.filter(function(et) {
                return et !== c
            }),
            document.removeEventListener("wheel", g, nonPassive),
            document.removeEventListener("touchmove", g, nonPassive),
            document.removeEventListener("touchstart", _, nonPassive)
        }
    }, []);
    var tt = s.removeScrollBar
      , rt = s.inert;
    return reactExports.createElement(reactExports.Fragment, null, rt ? reactExports.createElement(c, {
        styles: generateStyle(a)
    }) : null, tt ? reactExports.createElement(RemoveScrollBar, {
        gapMode: s.gapMode
    }) : null)
}
function getOutermostShadowParent(s) {
    for (var e = null; s !== null; )
        s instanceof ShadowRoot && (e = s.host,
        s = s.host),
        s = s.parentNode;
    return e
}
const SideCar = exportSidecar(effectCar, RemoveScrollSideCar);
var ReactRemoveScroll = reactExports.forwardRef(function(s, e) {
    return reactExports.createElement(RemoveScroll, __assign({}, s, {
        ref: e,
        sideCar: SideCar
    }))
});
ReactRemoveScroll.classNames = RemoveScroll.classNames;
var SELECTION_KEYS$1 = ["Enter", " "]
  , FIRST_KEYS = ["ArrowDown", "PageUp", "Home"]
  , LAST_KEYS = ["ArrowUp", "PageDown", "End"]
  , FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS]
  , SUB_OPEN_KEYS = {
    ltr: [...SELECTION_KEYS$1, "ArrowRight"],
    rtl: [...SELECTION_KEYS$1, "ArrowLeft"]
}
  , SUB_CLOSE_KEYS = {
    ltr: ["ArrowLeft"],
    rtl: ["ArrowRight"]
}
  , MENU_NAME = "Menu"
  , [Collection$1,useCollection$1,createCollectionScope$1] = createCollection(MENU_NAME)
  , [createMenuContext,createMenuScope] = createContextScope$3(MENU_NAME, [createCollectionScope$1, createPopperScope, createRovingFocusGroupScope])
  , usePopperScope$1 = createPopperScope()
  , useRovingFocusGroupScope$1 = createRovingFocusGroupScope()
  , [MenuProvider,useMenuContext] = createMenuContext(MENU_NAME)
  , [MenuRootProvider,useMenuRootContext] = createMenuContext(MENU_NAME)
  , Menu = s => {
    const {__scopeMenu: e, open: i=!1, children: o, dir: a, onOpenChange: c, modal: d=!0} = s
      , h = usePopperScope$1(e)
      , [g,b] = reactExports.useState(null)
      , _ = reactExports.useRef(!1)
      , $ = useCallbackRef$1(c)
      , _e = useDirection(a);
    return reactExports.useEffect( () => {
        const tt = () => {
            _.current = !0,
            document.addEventListener("pointerdown", rt, {
                capture: !0,
                once: !0
            }),
            document.addEventListener("pointermove", rt, {
                capture: !0,
                once: !0
            })
        }
          , rt = () => _.current = !1;
        return document.addEventListener("keydown", tt, {
            capture: !0
        }),
        () => {
            document.removeEventListener("keydown", tt, {
                capture: !0
            }),
            document.removeEventListener("pointerdown", rt, {
                capture: !0
            }),
            document.removeEventListener("pointermove", rt, {
                capture: !0
            })
        }
    }
    , []),
    jsxRuntimeExports.jsx(Root2$3, {
        ...h,
        children: jsxRuntimeExports.jsx(MenuProvider, {
            scope: e,
            open: i,
            onOpenChange: $,
            content: g,
            onContentChange: b,
            children: jsxRuntimeExports.jsx(MenuRootProvider, {
                scope: e,
                onClose: reactExports.useCallback( () => $(!1), [$]),
                isUsingKeyboardRef: _,
                dir: _e,
                modal: d,
                children: o
            })
        })
    })
}
;
Menu.displayName = MENU_NAME;
var ANCHOR_NAME = "MenuAnchor"
  , MenuAnchor = reactExports.forwardRef( (s, e) => {
    const {__scopeMenu: i, ...o} = s
      , a = usePopperScope$1(i);
    return jsxRuntimeExports.jsx(Anchor, {
        ...a,
        ...o,
        ref: e
    })
}
);
MenuAnchor.displayName = ANCHOR_NAME;
var PORTAL_NAME$3 = "MenuPortal"
  , [PortalProvider$1,usePortalContext$1] = createMenuContext(PORTAL_NAME$3, {
    forceMount: void 0
})
  , MenuPortal = s => {
    const {__scopeMenu: e, forceMount: i, children: o, container: a} = s
      , c = useMenuContext(PORTAL_NAME$3, e);
    return jsxRuntimeExports.jsx(PortalProvider$1, {
        scope: e,
        forceMount: i,
        children: jsxRuntimeExports.jsx(Presence, {
            present: i || c.open,
            children: jsxRuntimeExports.jsx(Portal$3, {
                asChild: !0,
                container: a,
                children: o
            })
        })
    })
}
;
MenuPortal.displayName = PORTAL_NAME$3;
var CONTENT_NAME$4 = "MenuContent"
  , [MenuContentProvider,useMenuContentContext] = createMenuContext(CONTENT_NAME$4)
  , MenuContent = reactExports.forwardRef( (s, e) => {
    const i = usePortalContext$1(CONTENT_NAME$4, s.__scopeMenu)
      , {forceMount: o=i.forceMount, ...a} = s
      , c = useMenuContext(CONTENT_NAME$4, s.__scopeMenu)
      , d = useMenuRootContext(CONTENT_NAME$4, s.__scopeMenu);
    return jsxRuntimeExports.jsx(Collection$1.Provider, {
        scope: s.__scopeMenu,
        children: jsxRuntimeExports.jsx(Presence, {
            present: o || c.open,
            children: jsxRuntimeExports.jsx(Collection$1.Slot, {
                scope: s.__scopeMenu,
                children: d.modal ? jsxRuntimeExports.jsx(MenuRootContentModal, {
                    ...a,
                    ref: e
                }) : jsxRuntimeExports.jsx(MenuRootContentNonModal, {
                    ...a,
                    ref: e
                })
            })
        })
    })
}
)
  , MenuRootContentModal = reactExports.forwardRef( (s, e) => {
    const i = useMenuContext(CONTENT_NAME$4, s.__scopeMenu)
      , o = reactExports.useRef(null)
      , a = useComposedRefs(e, o);
    return reactExports.useEffect( () => {
        const c = o.current;
        if (c)
            return hideOthers(c)
    }
    , []),
    jsxRuntimeExports.jsx(MenuContentImpl, {
        ...s,
        ref: a,
        trapFocus: i.open,
        disableOutsidePointerEvents: i.open,
        disableOutsideScroll: !0,
        onFocusOutside: composeEventHandlers(s.onFocusOutside, c => c.preventDefault(), {
            checkForDefaultPrevented: !1
        }),
        onDismiss: () => i.onOpenChange(!1)
    })
}
)
  , MenuRootContentNonModal = reactExports.forwardRef( (s, e) => {
    const i = useMenuContext(CONTENT_NAME$4, s.__scopeMenu);
    return jsxRuntimeExports.jsx(MenuContentImpl, {
        ...s,
        ref: e,
        trapFocus: !1,
        disableOutsidePointerEvents: !1,
        disableOutsideScroll: !1,
        onDismiss: () => i.onOpenChange(!1)
    })
}
)
  , MenuContentImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeMenu: i, loop: o=!1, trapFocus: a, onOpenAutoFocus: c, onCloseAutoFocus: d, disableOutsidePointerEvents: h, onEntryFocus: g, onEscapeKeyDown: b, onPointerDownOutside: _, onFocusOutside: $, onInteractOutside: _e, onDismiss: tt, disableOutsideScroll: rt, ...et} = s
      , it = useMenuContext(CONTENT_NAME$4, i)
      , st = useMenuRootContext(CONTENT_NAME$4, i)
      , nt = usePopperScope$1(i)
      , lt = useRovingFocusGroupScope$1(i)
      , dt = useCollection$1(i)
      , [ot,at] = reactExports.useState(null)
      , ht = reactExports.useRef(null)
      , pt = useComposedRefs(e, ht, it.onContentChange)
      , gt = reactExports.useRef(0)
      , wt = reactExports.useRef("")
      , yt = reactExports.useRef(0)
      , Rt = reactExports.useRef(null)
      , Mt = reactExports.useRef("right")
      , ss = reactExports.useRef(0)
      , zt = rt ? ReactRemoveScroll : reactExports.Fragment
      , At = rt ? {
        as: Slot,
        allowPinchZoom: !0
    } : void 0
      , kt = bt => {
        var St, Bt;
        const Tt = wt.current + bt
          , Yt = dt().filter(os => !os.disabled)
          , Nt = document.activeElement
          , jt = (St = Yt.find(os => os.ref.current === Nt)) == null ? void 0 : St.textValue
          , xt = Yt.map(os => os.textValue)
          , Et = getNextMatch(xt, Tt, jt)
          , Pt = (Bt = Yt.find(os => os.textValue === Et)) == null ? void 0 : Bt.ref.current;
        (function os(ds) {
            wt.current = ds,
            window.clearTimeout(gt.current),
            ds !== "" && (gt.current = window.setTimeout( () => os(""), 1e3))
        }
        )(Tt),
        Pt && setTimeout( () => Pt.focus())
    }
    ;
    reactExports.useEffect( () => () => window.clearTimeout(gt.current), []),
    useFocusGuards();
    const vt = reactExports.useCallback(bt => {
        var Yt, Nt;
        return Mt.current === ((Yt = Rt.current) == null ? void 0 : Yt.side) && isPointerInGraceArea(bt, (Nt = Rt.current) == null ? void 0 : Nt.area)
    }
    , []);
    return jsxRuntimeExports.jsx(MenuContentProvider, {
        scope: i,
        searchRef: wt,
        onItemEnter: reactExports.useCallback(bt => {
            vt(bt) && bt.preventDefault()
        }
        , [vt]),
        onItemLeave: reactExports.useCallback(bt => {
            var Tt;
            vt(bt) || ((Tt = ht.current) == null || Tt.focus(),
            at(null))
        }
        , [vt]),
        onTriggerLeave: reactExports.useCallback(bt => {
            vt(bt) && bt.preventDefault()
        }
        , [vt]),
        pointerGraceTimerRef: yt,
        onPointerGraceIntentChange: reactExports.useCallback(bt => {
            Rt.current = bt
        }
        , []),
        children: jsxRuntimeExports.jsx(zt, {
            ...At,
            children: jsxRuntimeExports.jsx(FocusScope, {
                asChild: !0,
                trapped: a,
                onMountAutoFocus: composeEventHandlers(c, bt => {
                    var Tt;
                    bt.preventDefault(),
                    (Tt = ht.current) == null || Tt.focus({
                        preventScroll: !0
                    })
                }
                ),
                onUnmountAutoFocus: d,
                children: jsxRuntimeExports.jsx(DismissableLayer, {
                    asChild: !0,
                    disableOutsidePointerEvents: h,
                    onEscapeKeyDown: b,
                    onPointerDownOutside: _,
                    onFocusOutside: $,
                    onInteractOutside: _e,
                    onDismiss: tt,
                    children: jsxRuntimeExports.jsx(Root$7, {
                        asChild: !0,
                        ...lt,
                        dir: st.dir,
                        orientation: "vertical",
                        loop: o,
                        currentTabStopId: ot,
                        onCurrentTabStopIdChange: at,
                        onEntryFocus: composeEventHandlers(g, bt => {
                            st.isUsingKeyboardRef.current || bt.preventDefault()
                        }
                        ),
                        preventScrollOnEntryFocus: !0,
                        children: jsxRuntimeExports.jsx(Content$2, {
                            role: "menu",
                            "aria-orientation": "vertical",
                            "data-state": getOpenState(it.open),
                            "data-radix-menu-content": "",
                            dir: st.dir,
                            ...nt,
                            ...et,
                            ref: pt,
                            style: {
                                outline: "none",
                                ...et.style
                            },
                            onKeyDown: composeEventHandlers(et.onKeyDown, bt => {
                                const Yt = bt.target.closest("[data-radix-menu-content]") === bt.currentTarget
                                  , Nt = bt.ctrlKey || bt.altKey || bt.metaKey
                                  , jt = bt.key.length === 1;
                                Yt && (bt.key === "Tab" && bt.preventDefault(),
                                !Nt && jt && kt(bt.key));
                                const xt = ht.current;
                                if (bt.target !== xt || !FIRST_LAST_KEYS.includes(bt.key))
                                    return;
                                bt.preventDefault();
                                const Pt = dt().filter(St => !St.disabled).map(St => St.ref.current);
                                LAST_KEYS.includes(bt.key) && Pt.reverse(),
                                focusFirst(Pt)
                            }
                            ),
                            onBlur: composeEventHandlers(s.onBlur, bt => {
                                bt.currentTarget.contains(bt.target) || (window.clearTimeout(gt.current),
                                wt.current = "")
                            }
                            ),
                            onPointerMove: composeEventHandlers(s.onPointerMove, whenMouse(bt => {
                                const Tt = bt.target
                                  , Yt = ss.current !== bt.clientX;
                                if (bt.currentTarget.contains(Tt) && Yt) {
                                    const Nt = bt.clientX > ss.current ? "right" : "left";
                                    Mt.current = Nt,
                                    ss.current = bt.clientX
                                }
                            }
                            ))
                        })
                    })
                })
            })
        })
    })
}
);
MenuContent.displayName = CONTENT_NAME$4;
var GROUP_NAME$2 = "MenuGroup"
  , MenuGroup = reactExports.forwardRef( (s, e) => {
    const {__scopeMenu: i, ...o} = s;
    return jsxRuntimeExports.jsx(Primitive$1.div, {
        role: "group",
        ...o,
        ref: e
    })
}
);
MenuGroup.displayName = GROUP_NAME$2;
var LABEL_NAME$2 = "MenuLabel"
  , MenuLabel = reactExports.forwardRef( (s, e) => {
    const {__scopeMenu: i, ...o} = s;
    return jsxRuntimeExports.jsx(Primitive$1.div, {
        ...o,
        ref: e
    })
}
);
MenuLabel.displayName = LABEL_NAME$2;
var ITEM_NAME$2 = "MenuItem"
  , ITEM_SELECT = "menu.itemSelect"
  , MenuItem = reactExports.forwardRef( (s, e) => {
    const {disabled: i=!1, onSelect: o, ...a} = s
      , c = reactExports.useRef(null)
      , d = useMenuRootContext(ITEM_NAME$2, s.__scopeMenu)
      , h = useMenuContentContext(ITEM_NAME$2, s.__scopeMenu)
      , g = useComposedRefs(e, c)
      , b = reactExports.useRef(!1)
      , _ = () => {
        const $ = c.current;
        if (!i && $) {
            const _e = new CustomEvent(ITEM_SELECT,{
                bubbles: !0,
                cancelable: !0
            });
            $.addEventListener(ITEM_SELECT, tt => o == null ? void 0 : o(tt), {
                once: !0
            }),
            dispatchDiscreteCustomEvent($, _e),
            _e.defaultPrevented ? b.current = !1 : d.onClose()
        }
    }
    ;
    return jsxRuntimeExports.jsx(MenuItemImpl, {
        ...a,
        ref: g,
        disabled: i,
        onClick: composeEventHandlers(s.onClick, _),
        onPointerDown: $ => {
            var _e;
            (_e = s.onPointerDown) == null || _e.call(s, $),
            b.current = !0
        }
        ,
        onPointerUp: composeEventHandlers(s.onPointerUp, $ => {
            var _e;
            b.current || (_e = $.currentTarget) == null || _e.click()
        }
        ),
        onKeyDown: composeEventHandlers(s.onKeyDown, $ => {
            const _e = h.searchRef.current !== "";
            i || _e && $.key === " " || SELECTION_KEYS$1.includes($.key) && ($.currentTarget.click(),
            $.preventDefault())
        }
        )
    })
}
);
MenuItem.displayName = ITEM_NAME$2;
var MenuItemImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeMenu: i, disabled: o=!1, textValue: a, ...c} = s
      , d = useMenuContentContext(ITEM_NAME$2, i)
      , h = useRovingFocusGroupScope$1(i)
      , g = reactExports.useRef(null)
      , b = useComposedRefs(e, g)
      , [_,$] = reactExports.useState(!1)
      , [_e,tt] = reactExports.useState("");
    return reactExports.useEffect( () => {
        const rt = g.current;
        rt && tt((rt.textContent ?? "").trim())
    }
    , [c.children]),
    jsxRuntimeExports.jsx(Collection$1.ItemSlot, {
        scope: i,
        disabled: o,
        textValue: a ?? _e,
        children: jsxRuntimeExports.jsx(Item$1, {
            asChild: !0,
            ...h,
            focusable: !o,
            children: jsxRuntimeExports.jsx(Primitive$1.div, {
                role: "menuitem",
                "data-highlighted": _ ? "" : void 0,
                "aria-disabled": o || void 0,
                "data-disabled": o ? "" : void 0,
                ...c,
                ref: b,
                onPointerMove: composeEventHandlers(s.onPointerMove, whenMouse(rt => {
                    o ? d.onItemLeave(rt) : (d.onItemEnter(rt),
                    rt.defaultPrevented || rt.currentTarget.focus({
                        preventScroll: !0
                    }))
                }
                )),
                onPointerLeave: composeEventHandlers(s.onPointerLeave, whenMouse(rt => d.onItemLeave(rt))),
                onFocus: composeEventHandlers(s.onFocus, () => $(!0)),
                onBlur: composeEventHandlers(s.onBlur, () => $(!1))
            })
        })
    })
}
)
  , CHECKBOX_ITEM_NAME$1 = "MenuCheckboxItem"
  , MenuCheckboxItem = reactExports.forwardRef( (s, e) => {
    const {checked: i=!1, onCheckedChange: o, ...a} = s;
    return jsxRuntimeExports.jsx(ItemIndicatorProvider, {
        scope: s.__scopeMenu,
        checked: i,
        children: jsxRuntimeExports.jsx(MenuItem, {
            role: "menuitemcheckbox",
            "aria-checked": isIndeterminate(i) ? "mixed" : i,
            ...a,
            ref: e,
            "data-state": getCheckedState(i),
            onSelect: composeEventHandlers(a.onSelect, () => o == null ? void 0 : o(isIndeterminate(i) ? !0 : !i), {
                checkForDefaultPrevented: !1
            })
        })
    })
}
);
MenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME$1;
var RADIO_GROUP_NAME$1 = "MenuRadioGroup"
  , [RadioGroupProvider,useRadioGroupContext] = createMenuContext(RADIO_GROUP_NAME$1, {
    value: void 0,
    onValueChange: () => {}
})
  , MenuRadioGroup = reactExports.forwardRef( (s, e) => {
    const {value: i, onValueChange: o, ...a} = s
      , c = useCallbackRef$1(o);
    return jsxRuntimeExports.jsx(RadioGroupProvider, {
        scope: s.__scopeMenu,
        value: i,
        onValueChange: c,
        children: jsxRuntimeExports.jsx(MenuGroup, {
            ...a,
            ref: e
        })
    })
}
);
MenuRadioGroup.displayName = RADIO_GROUP_NAME$1;
var RADIO_ITEM_NAME$1 = "MenuRadioItem"
  , MenuRadioItem = reactExports.forwardRef( (s, e) => {
    const {value: i, ...o} = s
      , a = useRadioGroupContext(RADIO_ITEM_NAME$1, s.__scopeMenu)
      , c = i === a.value;
    return jsxRuntimeExports.jsx(ItemIndicatorProvider, {
        scope: s.__scopeMenu,
        checked: c,
        children: jsxRuntimeExports.jsx(MenuItem, {
            role: "menuitemradio",
            "aria-checked": c,
            ...o,
            ref: e,
            "data-state": getCheckedState(c),
            onSelect: composeEventHandlers(o.onSelect, () => {
                var d;
                return (d = a.onValueChange) == null ? void 0 : d.call(a, i)
            }
            , {
                checkForDefaultPrevented: !1
            })
        })
    })
}
);
MenuRadioItem.displayName = RADIO_ITEM_NAME$1;
var ITEM_INDICATOR_NAME$1 = "MenuItemIndicator"
  , [ItemIndicatorProvider,useItemIndicatorContext] = createMenuContext(ITEM_INDICATOR_NAME$1, {
    checked: !1
})
  , MenuItemIndicator = reactExports.forwardRef( (s, e) => {
    const {__scopeMenu: i, forceMount: o, ...a} = s
      , c = useItemIndicatorContext(ITEM_INDICATOR_NAME$1, i);
    return jsxRuntimeExports.jsx(Presence, {
        present: o || isIndeterminate(c.checked) || c.checked === !0,
        children: jsxRuntimeExports.jsx(Primitive$1.span, {
            ...a,
            ref: e,
            "data-state": getCheckedState(c.checked)
        })
    })
}
);
MenuItemIndicator.displayName = ITEM_INDICATOR_NAME$1;
var SEPARATOR_NAME$2 = "MenuSeparator"
  , MenuSeparator = reactExports.forwardRef( (s, e) => {
    const {__scopeMenu: i, ...o} = s;
    return jsxRuntimeExports.jsx(Primitive$1.div, {
        role: "separator",
        "aria-orientation": "horizontal",
        ...o,
        ref: e
    })
}
);
MenuSeparator.displayName = SEPARATOR_NAME$2;
var ARROW_NAME$2 = "MenuArrow"
  , MenuArrow = reactExports.forwardRef( (s, e) => {
    const {__scopeMenu: i, ...o} = s
      , a = usePopperScope$1(i);
    return jsxRuntimeExports.jsx(Arrow, {
        ...a,
        ...o,
        ref: e
    })
}
);
MenuArrow.displayName = ARROW_NAME$2;
var SUB_NAME = "MenuSub"
  , [MenuSubProvider,useMenuSubContext] = createMenuContext(SUB_NAME)
  , SUB_TRIGGER_NAME$1 = "MenuSubTrigger"
  , MenuSubTrigger = reactExports.forwardRef( (s, e) => {
    const i = useMenuContext(SUB_TRIGGER_NAME$1, s.__scopeMenu)
      , o = useMenuRootContext(SUB_TRIGGER_NAME$1, s.__scopeMenu)
      , a = useMenuSubContext(SUB_TRIGGER_NAME$1, s.__scopeMenu)
      , c = useMenuContentContext(SUB_TRIGGER_NAME$1, s.__scopeMenu)
      , d = reactExports.useRef(null)
      , {pointerGraceTimerRef: h, onPointerGraceIntentChange: g} = c
      , b = {
        __scopeMenu: s.__scopeMenu
    }
      , _ = reactExports.useCallback( () => {
        d.current && window.clearTimeout(d.current),
        d.current = null
    }
    , []);
    return reactExports.useEffect( () => _, [_]),
    reactExports.useEffect( () => {
        const $ = h.current;
        return () => {
            window.clearTimeout($),
            g(null)
        }
    }
    , [h, g]),
    jsxRuntimeExports.jsx(MenuAnchor, {
        asChild: !0,
        ...b,
        children: jsxRuntimeExports.jsx(MenuItemImpl, {
            id: a.triggerId,
            "aria-haspopup": "menu",
            "aria-expanded": i.open,
            "aria-controls": a.contentId,
            "data-state": getOpenState(i.open),
            ...s,
            ref: composeRefs$1(e, a.onTriggerChange),
            onClick: $ => {
                var _e;
                (_e = s.onClick) == null || _e.call(s, $),
                !(s.disabled || $.defaultPrevented) && ($.currentTarget.focus(),
                i.open || i.onOpenChange(!0))
            }
            ,
            onPointerMove: composeEventHandlers(s.onPointerMove, whenMouse($ => {
                c.onItemEnter($),
                !$.defaultPrevented && !s.disabled && !i.open && !d.current && (c.onPointerGraceIntentChange(null),
                d.current = window.setTimeout( () => {
                    i.onOpenChange(!0),
                    _()
                }
                , 100))
            }
            )),
            onPointerLeave: composeEventHandlers(s.onPointerLeave, whenMouse($ => {
                var tt, rt;
                _();
                const _e = (tt = i.content) == null ? void 0 : tt.getBoundingClientRect();
                if (_e) {
                    const et = (rt = i.content) == null ? void 0 : rt.dataset.side
                      , it = et === "right"
                      , st = it ? -5 : 5
                      , nt = _e[it ? "left" : "right"]
                      , lt = _e[it ? "right" : "left"];
                    c.onPointerGraceIntentChange({
                        area: [{
                            x: $.clientX + st,
                            y: $.clientY
                        }, {
                            x: nt,
                            y: _e.top
                        }, {
                            x: lt,
                            y: _e.top
                        }, {
                            x: lt,
                            y: _e.bottom
                        }, {
                            x: nt,
                            y: _e.bottom
                        }],
                        side: et
                    }),
                    window.clearTimeout(h.current),
                    h.current = window.setTimeout( () => c.onPointerGraceIntentChange(null), 300)
                } else {
                    if (c.onTriggerLeave($),
                    $.defaultPrevented)
                        return;
                    c.onPointerGraceIntentChange(null)
                }
            }
            )),
            onKeyDown: composeEventHandlers(s.onKeyDown, $ => {
                var tt;
                const _e = c.searchRef.current !== "";
                s.disabled || _e && $.key === " " || SUB_OPEN_KEYS[o.dir].includes($.key) && (i.onOpenChange(!0),
                (tt = i.content) == null || tt.focus(),
                $.preventDefault())
            }
            )
        })
    })
}
);
MenuSubTrigger.displayName = SUB_TRIGGER_NAME$1;
var SUB_CONTENT_NAME$1 = "MenuSubContent"
  , MenuSubContent = reactExports.forwardRef( (s, e) => {
    const i = usePortalContext$1(CONTENT_NAME$4, s.__scopeMenu)
      , {forceMount: o=i.forceMount, ...a} = s
      , c = useMenuContext(CONTENT_NAME$4, s.__scopeMenu)
      , d = useMenuRootContext(CONTENT_NAME$4, s.__scopeMenu)
      , h = useMenuSubContext(SUB_CONTENT_NAME$1, s.__scopeMenu)
      , g = reactExports.useRef(null)
      , b = useComposedRefs(e, g);
    return jsxRuntimeExports.jsx(Collection$1.Provider, {
        scope: s.__scopeMenu,
        children: jsxRuntimeExports.jsx(Presence, {
            present: o || c.open,
            children: jsxRuntimeExports.jsx(Collection$1.Slot, {
                scope: s.__scopeMenu,
                children: jsxRuntimeExports.jsx(MenuContentImpl, {
                    id: h.contentId,
                    "aria-labelledby": h.triggerId,
                    ...a,
                    ref: b,
                    align: "start",
                    side: d.dir === "rtl" ? "left" : "right",
                    disableOutsidePointerEvents: !1,
                    disableOutsideScroll: !1,
                    trapFocus: !1,
                    onOpenAutoFocus: _ => {
                        var $;
                        d.isUsingKeyboardRef.current && (($ = g.current) == null || $.focus()),
                        _.preventDefault()
                    }
                    ,
                    onCloseAutoFocus: _ => _.preventDefault(),
                    onFocusOutside: composeEventHandlers(s.onFocusOutside, _ => {
                        _.target !== h.trigger && c.onOpenChange(!1)
                    }
                    ),
                    onEscapeKeyDown: composeEventHandlers(s.onEscapeKeyDown, _ => {
                        d.onClose(),
                        _.preventDefault()
                    }
                    ),
                    onKeyDown: composeEventHandlers(s.onKeyDown, _ => {
                        var tt;
                        const $ = _.currentTarget.contains(_.target)
                          , _e = SUB_CLOSE_KEYS[d.dir].includes(_.key);
                        $ && _e && (c.onOpenChange(!1),
                        (tt = h.trigger) == null || tt.focus(),
                        _.preventDefault())
                    }
                    )
                })
            })
        })
    })
}
);
MenuSubContent.displayName = SUB_CONTENT_NAME$1;
function getOpenState(s) {
    return s ? "open" : "closed"
}
function isIndeterminate(s) {
    return s === "indeterminate"
}
function getCheckedState(s) {
    return isIndeterminate(s) ? "indeterminate" : s ? "checked" : "unchecked"
}
function focusFirst(s) {
    const e = document.activeElement;
    for (const i of s)
        if (i === e || (i.focus(),
        document.activeElement !== e))
            return
}
function wrapArray$1(s, e) {
    return s.map( (i, o) => s[(e + o) % s.length])
}
function getNextMatch(s, e, i) {
    const a = e.length > 1 && Array.from(e).every(b => b === e[0]) ? e[0] : e
      , c = i ? s.indexOf(i) : -1;
    let d = wrapArray$1(s, Math.max(c, 0));
    a.length === 1 && (d = d.filter(b => b !== i));
    const g = d.find(b => b.toLowerCase().startsWith(a.toLowerCase()));
    return g !== i ? g : void 0
}
function isPointInPolygon(s, e) {
    const {x: i, y: o} = s;
    let a = !1;
    for (let c = 0, d = e.length - 1; c < e.length; d = c++) {
        const h = e[c].x
          , g = e[c].y
          , b = e[d].x
          , _ = e[d].y;
        g > o != _ > o && i < (b - h) * (o - g) / (_ - g) + h && (a = !a)
    }
    return a
}
function isPointerInGraceArea(s, e) {
    if (!e)
        return !1;
    const i = {
        x: s.clientX,
        y: s.clientY
    };
    return isPointInPolygon(i, e)
}
function whenMouse(s) {
    return e => e.pointerType === "mouse" ? s(e) : void 0
}
var Root3 = Menu
  , Anchor2 = MenuAnchor
  , Portal$2 = MenuPortal
  , Content2$2 = MenuContent
  , Group = MenuGroup
  , Label$3 = MenuLabel
  , Item2$1 = MenuItem
  , CheckboxItem = MenuCheckboxItem
  , RadioGroup = MenuRadioGroup
  , RadioItem = MenuRadioItem
  , ItemIndicator$1 = MenuItemIndicator
  , Separator$3 = MenuSeparator
  , Arrow2 = MenuArrow
  , SubTrigger = MenuSubTrigger
  , SubContent = MenuSubContent
  , DROPDOWN_MENU_NAME = "DropdownMenu"
  , [createDropdownMenuContext,createDropdownMenuScope] = createContextScope$3(DROPDOWN_MENU_NAME, [createMenuScope])
  , useMenuScope = createMenuScope()
  , [DropdownMenuProvider,useDropdownMenuContext] = createDropdownMenuContext(DROPDOWN_MENU_NAME)
  , DropdownMenu$1 = s => {
    const {__scopeDropdownMenu: e, children: i, dir: o, open: a, defaultOpen: c, onOpenChange: d, modal: h=!0} = s
      , g = useMenuScope(e)
      , b = reactExports.useRef(null)
      , [_=!1,$] = useControllableState({
        prop: a,
        defaultProp: c,
        onChange: d
    });
    return jsxRuntimeExports.jsx(DropdownMenuProvider, {
        scope: e,
        triggerId: useId$1(),
        triggerRef: b,
        contentId: useId$1(),
        open: _,
        onOpenChange: $,
        onOpenToggle: reactExports.useCallback( () => $(_e => !_e), [$]),
        modal: h,
        children: jsxRuntimeExports.jsx(Root3, {
            ...g,
            open: _,
            onOpenChange: $,
            dir: o,
            modal: h,
            children: i
        })
    })
}
;
DropdownMenu$1.displayName = DROPDOWN_MENU_NAME;
var TRIGGER_NAME$3 = "DropdownMenuTrigger"
  , DropdownMenuTrigger$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeDropdownMenu: i, disabled: o=!1, ...a} = s
      , c = useDropdownMenuContext(TRIGGER_NAME$3, i)
      , d = useMenuScope(i);
    return jsxRuntimeExports.jsx(Anchor2, {
        asChild: !0,
        ...d,
        children: jsxRuntimeExports.jsx(Primitive$1.button, {
            type: "button",
            id: c.triggerId,
            "aria-haspopup": "menu",
            "aria-expanded": c.open,
            "aria-controls": c.open ? c.contentId : void 0,
            "data-state": c.open ? "open" : "closed",
            "data-disabled": o ? "" : void 0,
            disabled: o,
            ...a,
            ref: composeRefs$1(e, c.triggerRef),
            onPointerDown: composeEventHandlers(s.onPointerDown, h => {
                !o && h.button === 0 && h.ctrlKey === !1 && (c.onOpenToggle(),
                c.open || h.preventDefault())
            }
            ),
            onKeyDown: composeEventHandlers(s.onKeyDown, h => {
                o || (["Enter", " "].includes(h.key) && c.onOpenToggle(),
                h.key === "ArrowDown" && c.onOpenChange(!0),
                ["Enter", " ", "ArrowDown"].includes(h.key) && h.preventDefault())
            }
            )
        })
    })
}
);
DropdownMenuTrigger$1.displayName = TRIGGER_NAME$3;
var PORTAL_NAME$2 = "DropdownMenuPortal"
  , DropdownMenuPortal = s => {
    const {__scopeDropdownMenu: e, ...i} = s
      , o = useMenuScope(e);
    return jsxRuntimeExports.jsx(Portal$2, {
        ...o,
        ...i
    })
}
;
DropdownMenuPortal.displayName = PORTAL_NAME$2;
var CONTENT_NAME$3 = "DropdownMenuContent"
  , DropdownMenuContent$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeDropdownMenu: i, ...o} = s
      , a = useDropdownMenuContext(CONTENT_NAME$3, i)
      , c = useMenuScope(i)
      , d = reactExports.useRef(!1);
    return jsxRuntimeExports.jsx(Content2$2, {
        id: a.contentId,
        "aria-labelledby": a.triggerId,
        ...c,
        ...o,
        ref: e,
        onCloseAutoFocus: composeEventHandlers(s.onCloseAutoFocus, h => {
            var g;
            d.current || (g = a.triggerRef.current) == null || g.focus(),
            d.current = !1,
            h.preventDefault()
        }
        ),
        onInteractOutside: composeEventHandlers(s.onInteractOutside, h => {
            const g = h.detail.originalEvent
              , b = g.button === 0 && g.ctrlKey === !0
              , _ = g.button === 2 || b;
            (!a.modal || _) && (d.current = !0)
        }
        ),
        style: {
            ...s.style,
            "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
            "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
            "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
        }
    })
}
);
DropdownMenuContent$1.displayName = CONTENT_NAME$3;
var GROUP_NAME$1 = "DropdownMenuGroup"
  , DropdownMenuGroup = reactExports.forwardRef( (s, e) => {
    const {__scopeDropdownMenu: i, ...o} = s
      , a = useMenuScope(i);
    return jsxRuntimeExports.jsx(Group, {
        ...a,
        ...o,
        ref: e
    })
}
);
DropdownMenuGroup.displayName = GROUP_NAME$1;
var LABEL_NAME$1 = "DropdownMenuLabel"
  , DropdownMenuLabel$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeDropdownMenu: i, ...o} = s
      , a = useMenuScope(i);
    return jsxRuntimeExports.jsx(Label$3, {
        ...a,
        ...o,
        ref: e
    })
}
);
DropdownMenuLabel$1.displayName = LABEL_NAME$1;
var ITEM_NAME$1 = "DropdownMenuItem"
  , DropdownMenuItem$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeDropdownMenu: i, ...o} = s
      , a = useMenuScope(i);
    return jsxRuntimeExports.jsx(Item2$1, {
        ...a,
        ...o,
        ref: e
    })
}
);
DropdownMenuItem$1.displayName = ITEM_NAME$1;
var CHECKBOX_ITEM_NAME = "DropdownMenuCheckboxItem"
  , DropdownMenuCheckboxItem$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeDropdownMenu: i, ...o} = s
      , a = useMenuScope(i);
    return jsxRuntimeExports.jsx(CheckboxItem, {
        ...a,
        ...o,
        ref: e
    })
}
);
DropdownMenuCheckboxItem$1.displayName = CHECKBOX_ITEM_NAME;
var RADIO_GROUP_NAME = "DropdownMenuRadioGroup"
  , DropdownMenuRadioGroup = reactExports.forwardRef( (s, e) => {
    const {__scopeDropdownMenu: i, ...o} = s
      , a = useMenuScope(i);
    return jsxRuntimeExports.jsx(RadioGroup, {
        ...a,
        ...o,
        ref: e
    })
}
);
DropdownMenuRadioGroup.displayName = RADIO_GROUP_NAME;
var RADIO_ITEM_NAME = "DropdownMenuRadioItem"
  , DropdownMenuRadioItem$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeDropdownMenu: i, ...o} = s
      , a = useMenuScope(i);
    return jsxRuntimeExports.jsx(RadioItem, {
        ...a,
        ...o,
        ref: e
    })
}
);
DropdownMenuRadioItem$1.displayName = RADIO_ITEM_NAME;
var INDICATOR_NAME$1 = "DropdownMenuItemIndicator"
  , DropdownMenuItemIndicator = reactExports.forwardRef( (s, e) => {
    const {__scopeDropdownMenu: i, ...o} = s
      , a = useMenuScope(i);
    return jsxRuntimeExports.jsx(ItemIndicator$1, {
        ...a,
        ...o,
        ref: e
    })
}
);
DropdownMenuItemIndicator.displayName = INDICATOR_NAME$1;
var SEPARATOR_NAME$1 = "DropdownMenuSeparator"
  , DropdownMenuSeparator$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeDropdownMenu: i, ...o} = s
      , a = useMenuScope(i);
    return jsxRuntimeExports.jsx(Separator$3, {
        ...a,
        ...o,
        ref: e
    })
}
);
DropdownMenuSeparator$1.displayName = SEPARATOR_NAME$1;
var ARROW_NAME$1 = "DropdownMenuArrow"
  , DropdownMenuArrow = reactExports.forwardRef( (s, e) => {
    const {__scopeDropdownMenu: i, ...o} = s
      , a = useMenuScope(i);
    return jsxRuntimeExports.jsx(Arrow2, {
        ...a,
        ...o,
        ref: e
    })
}
);
DropdownMenuArrow.displayName = ARROW_NAME$1;
var SUB_TRIGGER_NAME = "DropdownMenuSubTrigger"
  , DropdownMenuSubTrigger$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeDropdownMenu: i, ...o} = s
      , a = useMenuScope(i);
    return jsxRuntimeExports.jsx(SubTrigger, {
        ...a,
        ...o,
        ref: e
    })
}
);
DropdownMenuSubTrigger$1.displayName = SUB_TRIGGER_NAME;
var SUB_CONTENT_NAME = "DropdownMenuSubContent"
  , DropdownMenuSubContent$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeDropdownMenu: i, ...o} = s
      , a = useMenuScope(i);
    return jsxRuntimeExports.jsx(SubContent, {
        ...a,
        ...o,
        ref: e,
        style: {
            ...s.style,
            "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
            "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
            "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
        }
    })
}
);
DropdownMenuSubContent$1.displayName = SUB_CONTENT_NAME;
var Root2$2 = DropdownMenu$1
  , Trigger$3 = DropdownMenuTrigger$1
  , Portal2 = DropdownMenuPortal
  , Content2$1 = DropdownMenuContent$1
  , Label2 = DropdownMenuLabel$1
  , Item2 = DropdownMenuItem$1
  , CheckboxItem2 = DropdownMenuCheckboxItem$1
  , RadioItem2 = DropdownMenuRadioItem$1
  , ItemIndicator2 = DropdownMenuItemIndicator
  , Separator2 = DropdownMenuSeparator$1
  , SubTrigger2 = DropdownMenuSubTrigger$1
  , SubContent2 = DropdownMenuSubContent$1;
const DropdownMenu = Root2$2
  , DropdownMenuTrigger = Trigger$3
  , DropdownMenuSubTrigger = reactExports.forwardRef( ({className: s, inset: e, children: i, ...o}, a) => jsxRuntimeExports.jsxs(SubTrigger2, {
    ref: a,
    className: cn("flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent", e && "pl-8", s),
    ...o,
    children: [i, jsxRuntimeExports.jsx(ChevronRight, {
        className: "ml-auto h-4 w-4"
    })]
}));
DropdownMenuSubTrigger.displayName = SubTrigger2.displayName;
const DropdownMenuSubContent = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(SubContent2, {
    ref: i,
    className: cn("z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", s),
    ...e
}));
DropdownMenuSubContent.displayName = SubContent2.displayName;
const DropdownMenuContent = reactExports.forwardRef( ({className: s, sideOffset: e=4, ...i}, o) => jsxRuntimeExports.jsx(Portal2, {
    children: jsxRuntimeExports.jsx(Content2$1, {
        ref: o,
        sideOffset: e,
        className: cn("z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", s),
        ...i
    })
}));
DropdownMenuContent.displayName = Content2$1.displayName;
const DropdownMenuItem = reactExports.forwardRef( ({className: s, inset: e, ...i}, o) => jsxRuntimeExports.jsx(Item2, {
    ref: o,
    className: cn("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", e && "pl-8", s),
    ...i
}));
DropdownMenuItem.displayName = Item2.displayName;
const DropdownMenuCheckboxItem = reactExports.forwardRef( ({className: s, children: e, checked: i, ...o}, a) => jsxRuntimeExports.jsxs(CheckboxItem2, {
    ref: a,
    className: cn("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", s),
    checked: i,
    ...o,
    children: [jsxRuntimeExports.jsx("span", {
        className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center",
        children: jsxRuntimeExports.jsx(ItemIndicator2, {
            children: jsxRuntimeExports.jsx(Check, {
                className: "h-4 w-4"
            })
        })
    }), e]
}));
DropdownMenuCheckboxItem.displayName = CheckboxItem2.displayName;
const DropdownMenuRadioItem = reactExports.forwardRef( ({className: s, children: e, ...i}, o) => jsxRuntimeExports.jsxs(RadioItem2, {
    ref: o,
    className: cn("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", s),
    ...i,
    children: [jsxRuntimeExports.jsx("span", {
        className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center",
        children: jsxRuntimeExports.jsx(ItemIndicator2, {
            children: jsxRuntimeExports.jsx(Circle, {
                className: "h-2 w-2 fill-current"
            })
        })
    }), e]
}));
DropdownMenuRadioItem.displayName = RadioItem2.displayName;
const DropdownMenuLabel = reactExports.forwardRef( ({className: s, inset: e, ...i}, o) => jsxRuntimeExports.jsx(Label2, {
    ref: o,
    className: cn("px-2 py-1.5 text-sm font-semibold", e && "pl-8", s),
    ...i
}));
DropdownMenuLabel.displayName = Label2.displayName;
const DropdownMenuSeparator = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Separator2, {
    ref: i,
    className: cn("-mx-1 my-1 h-px bg-muted", s),
    ...e
}));
DropdownMenuSeparator.displayName = Separator2.displayName;
var AVATAR_NAME = "Avatar"
  , [createAvatarContext,createAvatarScope] = createContextScope$3(AVATAR_NAME)
  , [AvatarProvider,useAvatarContext] = createAvatarContext(AVATAR_NAME)
  , Avatar$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeAvatar: i, ...o} = s
      , [a,c] = reactExports.useState("idle");
    return jsxRuntimeExports.jsx(AvatarProvider, {
        scope: i,
        imageLoadingStatus: a,
        onImageLoadingStatusChange: c,
        children: jsxRuntimeExports.jsx(Primitive$1.span, {
            ...o,
            ref: e
        })
    })
}
);
Avatar$1.displayName = AVATAR_NAME;
var IMAGE_NAME = "AvatarImage"
  , AvatarImage$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeAvatar: i, src: o, onLoadingStatusChange: a= () => {}
    , ...c} = s
      , d = useAvatarContext(IMAGE_NAME, i)
      , h = useImageLoadingStatus(o, c.referrerPolicy)
      , g = useCallbackRef$1(b => {
        a(b),
        d.onImageLoadingStatusChange(b)
    }
    );
    return useLayoutEffect2( () => {
        h !== "idle" && g(h)
    }
    , [h, g]),
    h === "loaded" ? jsxRuntimeExports.jsx(Primitive$1.img, {
        ...c,
        ref: e,
        src: o
    }) : null
}
);
AvatarImage$1.displayName = IMAGE_NAME;
var FALLBACK_NAME = "AvatarFallback"
  , AvatarFallback$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeAvatar: i, delayMs: o, ...a} = s
      , c = useAvatarContext(FALLBACK_NAME, i)
      , [d,h] = reactExports.useState(o === void 0);
    return reactExports.useEffect( () => {
        if (o !== void 0) {
            const g = window.setTimeout( () => h(!0), o);
            return () => window.clearTimeout(g)
        }
    }
    , [o]),
    d && c.imageLoadingStatus !== "loaded" ? jsxRuntimeExports.jsx(Primitive$1.span, {
        ...a,
        ref: e
    }) : null
}
);
AvatarFallback$1.displayName = FALLBACK_NAME;
function useImageLoadingStatus(s, e) {
    const [i,o] = reactExports.useState("idle");
    return useLayoutEffect2( () => {
        if (!s) {
            o("error");
            return
        }
        let a = !0;
        const c = new window.Image
          , d = h => () => {
            a && o(h)
        }
        ;
        return o("loading"),
        c.onload = d("loaded"),
        c.onerror = d("error"),
        c.src = s,
        e && (c.referrerPolicy = e),
        () => {
            a = !1
        }
    }
    , [s, e]),
    i
}
var Root$6 = Avatar$1
  , Image$1 = AvatarImage$1
  , Fallback = AvatarFallback$1;
const Avatar = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Root$6, {
    ref: i,
    className: cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", s),
    ...e
}));
Avatar.displayName = Root$6.displayName;
const AvatarImage = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Image$1, {
    ref: i,
    className: cn("aspect-square h-full w-full", s),
    ...e
}));
AvatarImage.displayName = Image$1.displayName;
const AvatarFallback = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Fallback, {
    ref: i,
    className: cn("flex h-full w-full items-center justify-center rounded-full bg-muted", s),
    ...e
}));
AvatarFallback.displayName = Fallback.displayName;
const Header = ({openSignIn: s}={}) => {
    var b, _;
    const {user: e, signOut: i} = useAuth()
      , [o,a] = reactExports.useState(!1)
      , [c,d] = reactExports.useState(!1);
    reactExports.useEffect( () => {
        const $ = () => {
            a(window.scrollY > 20)
        }
        ;
        return window.addEventListener("scroll", $),
        () => window.removeEventListener("scroll", $)
    }
    , []);
    const h = () => {
        d(!c)
    }
      , g = () => e != null && e.email ? e.email.charAt(0).toUpperCase() : "U";
    return jsxRuntimeExports.jsx(motion.header, {
        className: cn("sticky top-0 z-50 w-full transition-all duration-300 bg-[#fff7f8]", o ? "shadow-lg backdrop-blur-md" : ""),
        initial: {
            y: -100
        },
        animate: {
            y: 0
        },
        transition: {
            duration: .6,
            ease: "easeOut"
        },
        children: jsxRuntimeExports.jsxs("nav", {
            className: "w-full py-4 px-6 md:px-8 lg:px-12 flex items-center justify-between relative",
            children: [jsxRuntimeExports.jsx(motion.div, {
                initial: {
                    opacity: 0,
                    x: -20
                },
                animate: {
                    opacity: 1,
                    x: 0
                },
                transition: {
                    duration: .6,
                    delay: .1
                },
                children: jsxRuntimeExports.jsx(Link, {
                    to: "/",
                    className: "text-[#633b3d] font-sans text-2xl font-bold tracking-tighter",
                    children: "Hirebuddy"
                })
            }), jsxRuntimeExports.jsxs("button", {
                className: "md:hidden flex flex-col justify-center items-center w-8 h-8",
                onClick: h,
                "aria-label": "Toggle menu",
                children: [jsxRuntimeExports.jsx("span", {
                    className: `block w-6 h-0.5 bg-[#b24e55] transition-all duration-300 ${c ? "rotate-45 translate-y-1.5" : ""}`
                }), jsxRuntimeExports.jsx("span", {
                    className: `block w-6 h-0.5 bg-[#b24e55] my-1 transition-all duration-300 ${c ? "opacity-0" : ""}`
                }), jsxRuntimeExports.jsx("span", {
                    className: `block w-6 h-0.5 bg-[#b24e55] transition-all duration-300 ${c ? "-rotate-45 -translate-y-1.5" : ""}`
                })]
            }), jsxRuntimeExports.jsxs(motion.div, {
                className: "hidden md:flex items-center space-x-8 font-medium lg:-mr-24 lg:-ml-1",
                initial: {
                    opacity: 0,
                    y: -10
                },
                animate: {
                    opacity: 1,
                    y: 0
                },
                transition: {
                    duration: .6,
                    delay: .2
                },
                children: [jsxRuntimeExports.jsx(Link, {
                    to: "/blogs",
                    className: "text-[#b24e55] font-bold hover:text-[#E75A82] transition-colors",
                    children: "Blogs"
                }), jsxRuntimeExports.jsx(Link, {
                    to: "/community",
                    className: "text-[#b24e55] font-bold hover:text-[#E75A82] transition-colors",
                    children: "Community"
                }), jsxRuntimeExports.jsx(Link, {
                    to: "/blogs?post=4",
                    className: "text-[#b24e55] font-bold hover:text-[#E75A82] transition-colors",
                    children: "About"
                }), jsxRuntimeExports.jsx(Link, {
                    to: "/pricing",
                    className: "text-[#b24e55] font-bold hover:text-[#E75A82] transition-colors",
                    children: "Pricing"
                })]
            }), c && jsxRuntimeExports.jsx("div", {
                className: "md:hidden absolute top-full left-0 right-0 bg-[#fff7f8] shadow-lg z-50 py-4 px-6",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex flex-col space-y-4",
                    children: [jsxRuntimeExports.jsx(Link, {
                        to: "/blogs",
                        className: "text-[#b24e55] hover:text-[#E75A82] transition-colors",
                        onClick: h,
                        children: "Blogs"
                    }), jsxRuntimeExports.jsx(Link, {
                        to: "/community",
                        className: "text-[#b24e55] hover:text-[#E75A82] transition-colors",
                        onClick: h,
                        children: "Community"
                    }), e ? jsxRuntimeExports.jsxs("div", {
                        className: "pt-2 flex flex-col space-y-3",
                        children: [jsxRuntimeExports.jsx(Link, {
                            to: "/dashboard",
                            className: "w-full text-[#b24e55] hover:text-[#E75A82] transition-colors text-center py-2",
                            onClick: h,
                            children: "Dashboard"
                        }), jsxRuntimeExports.jsx(Button, {
                            onClick: () => {
                                i(),
                                h()
                            }
                            ,
                            className: "w-full bg-gradient-to-t from-[#b24e55] to-[#E3405F] text-white rounded-lg",
                            children: "Sign Out"
                        })]
                    }) : jsxRuntimeExports.jsxs("div", {
                        className: "pt-2 flex flex-col space-y-3",
                        children: [jsxRuntimeExports.jsx(Button, {
                            variant: "ghost",
                            className: "w-full text-[#b24e55] hover:text-[#fc6f78] border border-[#b24e55] hover:border-[#fc6f78] hover:bg-transparent rounded-lg",
                            onClick: () => {
                                s && s(),
                                h()
                            }
                            ,
                            children: "Log in"
                        }), jsxRuntimeExports.jsx(Link, {
                            to: "/signup",
                            children: jsxRuntimeExports.jsx(Button, {
                                className: "w-full bg-gradient-to-t from-[#b24e55] to-[#E3405F] text-white rounded-lg",
                                onClick: h,
                                children: "Try for free!"
                            })
                        })]
                    })]
                })
            }), jsxRuntimeExports.jsx(motion.div, {
                className: "hidden md:flex items-center space-x-4",
                initial: {
                    opacity: 0,
                    x: 20
                },
                animate: {
                    opacity: 1,
                    x: 0
                },
                transition: {
                    duration: .6,
                    delay: .3
                },
                children: e ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [jsxRuntimeExports.jsx(Link, {
                        to: "/dashboard",
                        children: jsxRuntimeExports.jsx(Button, {
                            variant: "ghost",
                            className: "text-[#b24e55] hover:text-[#fc6f78] border border-[#b24e55] hover:border-[#fc6f78] hover:bg-transparent rounded-lg",
                            children: "Dashboard"
                        })
                    }), jsxRuntimeExports.jsxs(DropdownMenu, {
                        children: [jsxRuntimeExports.jsx(DropdownMenuTrigger, {
                            asChild: !0,
                            children: jsxRuntimeExports.jsx(Button, {
                                variant: "ghost",
                                className: "relative h-8 w-8 rounded-full",
                                children: jsxRuntimeExports.jsxs(Avatar, {
                                    className: "h-8 w-8",
                                    children: [jsxRuntimeExports.jsx(AvatarImage, {
                                        src: (b = e.user_metadata) == null ? void 0 : b.avatar_url,
                                        alt: "User"
                                    }), jsxRuntimeExports.jsx(AvatarFallback, {
                                        className: "bg-[#b24e55] text-white",
                                        children: g()
                                    })]
                                })
                            })
                        }), jsxRuntimeExports.jsxs(DropdownMenuContent, {
                            className: "w-56",
                            align: "end",
                            forceMount: !0,
                            children: [jsxRuntimeExports.jsx(DropdownMenuLabel, {
                                className: "font-normal",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex flex-col space-y-1",
                                    children: [jsxRuntimeExports.jsx("p", {
                                        className: "text-sm font-medium leading-none",
                                        children: e.email
                                    }), jsxRuntimeExports.jsx("p", {
                                        className: "text-xs leading-none text-muted-foreground",
                                        children: ((_ = e.user_metadata) == null ? void 0 : _.full_name) || e.email
                                    })]
                                })
                            }), jsxRuntimeExports.jsx(DropdownMenuSeparator, {}), jsxRuntimeExports.jsx(DropdownMenuItem, {
                                asChild: !0,
                                children: jsxRuntimeExports.jsxs(Link, {
                                    to: "/dashboard",
                                    className: "cursor-pointer",
                                    children: [jsxRuntimeExports.jsx(User, {
                                        className: "mr-2 h-4 w-4"
                                    }), jsxRuntimeExports.jsx("span", {
                                        children: "Dashboard"
                                    })]
                                })
                            }), jsxRuntimeExports.jsx(DropdownMenuItem, {
                                asChild: !0,
                                children: jsxRuntimeExports.jsxs(Link, {
                                    to: "/profile",
                                    className: "cursor-pointer",
                                    children: [jsxRuntimeExports.jsx(Settings, {
                                        className: "mr-2 h-4 w-4"
                                    }), jsxRuntimeExports.jsx("span", {
                                        children: "Profile"
                                    })]
                                })
                            }), jsxRuntimeExports.jsxs(DropdownMenuItem, {
                                onClick: () => i(),
                                className: "cursor-pointer",
                                children: [jsxRuntimeExports.jsx(LogOut, {
                                    className: "mr-2 h-4 w-4"
                                }), jsxRuntimeExports.jsx("span", {
                                    children: "Log out"
                                })]
                            })]
                        })]
                    })]
                }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [jsxRuntimeExports.jsx(Button, {
                        variant: "ghost",
                        className: "text-[#b24e55] hover:text-[#fc6f78] border border-[#b24e55] hover:border-[#fc6f78] hover:bg-transparent rounded-lg",
                        onClick: () => {
                            s && s()
                        }
                        ,
                        children: "Log in"
                    }), jsxRuntimeExports.jsx(Link, {
                        to: "/signup",
                        children: jsxRuntimeExports.jsx(Button, {
                            className: "bg-gradient-to-t from-[#b24e55] to-[#E3405F] text-white rounded-lg",
                            children: "Try for free!"
                        })
                    })]
                })
            })]
        })
    })
}
  , TypingAnimation = ({texts: s, className: e="", typingSpeed: i=100, deletingSpeed: o=50, pauseDuration: a=2e3}) => {
    const [c,d] = reactExports.useState(0)
      , [h,g] = reactExports.useState("")
      , [b,_] = reactExports.useState(!1)
      , [$,_e] = reactExports.useState(!0);
    return reactExports.useEffect( () => {
        const tt = s[c]
          , rt = setTimeout( () => {
            b ? h.length > 0 ? g(h.slice(0, -1)) : (_(!1),
            d(et => (et + 1) % s.length)) : h.length < tt.length ? g(tt.slice(0, h.length + 1)) : setTimeout( () => _(!0), a)
        }
        , b ? o : i);
        return () => clearTimeout(rt)
    }
    , [h, b, c, s, i, o, a]),
    reactExports.useEffect( () => {
        const tt = setInterval( () => {
            _e(rt => !rt)
        }
        , 500);
        return () => clearInterval(tt)
    }
    , []),
    jsxRuntimeExports.jsxs("div", {
        className: e,
        children: [jsxRuntimeExports.jsx("span", {
            children: h
        }), jsxRuntimeExports.jsx("span", {
            className: `${$ ? "opacity-100" : "opacity-0"} transition-opacity`,
            children: "|"
        })]
    })
}
  , AnimatedPlaceholderInput = () => {
    const [s,e] = reactExports.useState(!1)
      , [i,o] = reactExports.useState("")
      , a = reactExports.useRef(null)
      , c = ["Software Engineer in Delhi", "Product Manager in Mumbai", "Data Scientist in Bangalore", "UX Designer in Hyderabad", "Marketing Manager in Chennai", "DevOps Engineer in Pune", "Business Analyst in Kolkata", "Frontend Developer in Noida", "Backend Developer in Gurgaon", "Full Stack Developer in Delhi"]
      , d = () => {
        e(!0)
    }
      , h = () => {
        e(!1)
    }
      , g = _ => {
        o(_.target.value)
    }
      , b = () => {
        a.current && a.current.focus()
    }
    ;
    return jsxRuntimeExports.jsxs("div", {
        className: "flex-1 h-14 relative bg-gray-50 rounded-lg",
        children: [!s && i === "" && jsxRuntimeExports.jsx("div", {
            className: "absolute inset-0 flex items-center px-4 pointer-events-none z-10",
            children: jsxRuntimeExports.jsx(TypingAnimation, {
                texts: c,
                className: "text-lg text-[#b88c8e] font-medium",
                typingSpeed: 80,
                deletingSpeed: 40,
                pauseDuration: 1500
            })
        }), jsxRuntimeExports.jsx("input", {
            ref: a,
            type: "text",
            value: i,
            onChange: g,
            onFocus: d,
            onBlur: h,
            onClick: b,
            className: "w-full h-full px-4 bg-transparent border-none outline-none text-lg text-[#b88c8e] font-medium rounded-lg relative z-20",
            placeholder: ""
        })]
    })
}
  , Hero = () => jsxRuntimeExports.jsxs("div", {
    className: "pt-8 lg:pt-20 w-full flex flex-col items-center justify-center px-4 bg-[#fff7f8]",
    children: [jsxRuntimeExports.jsx("div", {
        className: "mb-8",
        children: jsxRuntimeExports.jsxs("div", {
            className: "inline-flex items-center rounded-full border border-[#ffe0e0] bg-[#ffe0e0] px-4 py-1.5",
            children: [jsxRuntimeExports.jsx("span", {
                className: "text-sm font-bold text-[#3e3233]",
                children: "What's new"
            }), jsxRuntimeExports.jsx("div", {
                className: "mx-2 h-4 w-[1px] bg-[#b16368]"
            }), jsxRuntimeExports.jsx("span", {
                className: "text-sm font-bold text-[#b16368]",
                children: "Coming soon to mobile"
            })]
        })
    }), jsxRuntimeExports.jsxs("h1", {
        className: "text-4xl md:text-5xl lg:text-6xl text-center font-semibold text-[#403334] max-w-4xl mb-6",
        children: ["Land your ", jsxRuntimeExports.jsx("span", {
            className: "text-[#b24e55]",
            children: "next opportunity"
        }), " ", "without lifting a finger."]
    }), jsxRuntimeExports.jsx("p", {
        className: "font-light text-lg md:text-xl text-center text-[#4A3D55] max-w-3xl mb-12",
        children: "Answer a brief set of questions, and our AI will match you with opportunities, tailor your applications, and submit them — automating your whole search for the right role."
    }), jsxRuntimeExports.jsxs("div", {
        className: "w-full max-w-xl space-y-4",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "flex flex-col sm:flex-row gap-3 bg-white p-2 rounded-xl shadow-[0_4px_60px_rgba(231,90,130,0.35)]",
            children: [jsxRuntimeExports.jsx(AnimatedPlaceholderInput, {}), jsxRuntimeExports.jsxs(Button, {
                className: "h-14 px-8 text-lg font-normal rounded-xl bg-gradient-to-t from-[#b24e55] to-[#E3405F] hover:opacity-90 text-white whitespace-nowrap",
                onClick: () => window.location.href = "/signup",
                children: ["Find your next role", jsxRuntimeExports.jsx("svg", {
                    className: "ml-2",
                    width: "24",
                    height: "24",
                    viewBox: "0 0 24 24",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: jsxRuntimeExports.jsx("path", {
                        d: "M5 12H19M19 12L12 5M19 12L12 19",
                        stroke: "currentColor",
                        strokeWidth: "2",
                        strokeLinecap: "round",
                        strokeLinejoin: "round"
                    })
                })]
            })]
        }), jsxRuntimeExports.jsx("p", {
            className: "text-sm text-center text-[#b26469]"
        })]
    })]
})
  , Problem = () => jsxRuntimeExports.jsx("section", {
    className: "mt-12 w-full py-16 px-4 sm:px-6 md:px-8 lg:px-12 flex items-center bg-[#fff7f8]",
    children: jsxRuntimeExports.jsx("div", {
        className: "max-w-7xl mx-auto",
        children: jsxRuntimeExports.jsxs("div", {
            className: "grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-16 items-center",
            children: [jsxRuntimeExports.jsx("div", {
                className: "relative w-full max-w-[600px] mx-auto",
                children: jsxRuntimeExports.jsx("img", {
                    src: "/problem/problem.svg",
                    alt: "Frustrated job seeker",
                    className: "w-full h-auto"
                })
            }), jsxRuntimeExports.jsxs("div", {
                className: "space-y-8",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "inline-flex items-center rounded-full bg-[#FFE0E0] px-4 py-1.5",
                    children: jsxRuntimeExports.jsx("span", {
                        className: "text-sm font-medium text-[#b26469]",
                        children: "The Problem"
                    })
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-6",
                    children: [jsxRuntimeExports.jsxs("h2", {
                        className: "text-2xl md:text-3xl lg:text-4xl font-mabry font-semibold text-[#403334]",
                        children: [jsxRuntimeExports.jsxs("span", {
                            className: "lg:hidden",
                            children: ["Hunting for roles manually can be ", jsxRuntimeExports.jsx("span", {
                                className: "text-[#b24e55]",
                                children: "stressful"
                            }), " and ", jsxRuntimeExports.jsx("span", {
                                className: "text-[#b24e55]",
                                children: "time-consuming"
                            }), "."]
                        }), jsxRuntimeExports.jsxs("span", {
                            className: "hidden lg:inline",
                            children: ["Hunting for roles manually can", jsxRuntimeExports.jsx("br", {}), " be ", jsxRuntimeExports.jsx("span", {
                                className: "text-[#b24e55]",
                                children: "stressful"
                            }), " and", " ", jsxRuntimeExports.jsx("span", {
                                className: "text-[#b24e55]",
                                children: "time-consuming"
                            }), "."]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-6",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-4",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "w-12 h-12 flex-shrink-0 bg-[#FFE0E0] rounded-full flex items-center justify-center",
                                children: jsxRuntimeExports.jsx("img", {
                                    src: "/problem/search.svg",
                                    alt: "Search icon",
                                    className: "w-6 h-6"
                                })
                            }), jsxRuntimeExports.jsxs("p", {
                                className: "text-lg font-light text-[#403334]",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "lg:hidden",
                                    children: "Manually applying for roles at multiple places is frustrating."
                                }), jsxRuntimeExports.jsxs("span", {
                                    className: "hidden lg:inline",
                                    children: ["Manually applying for roles at multiple places", jsxRuntimeExports.jsx("br", {}), " is frustrating."]
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-4",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "w-12 h-12 flex-shrink-0 bg-[#FFE0E0] rounded-full flex items-center justify-center",
                                children: jsxRuntimeExports.jsx("img", {
                                    src: "/problem/hourglass.svg",
                                    alt: "Time icon",
                                    className: "w-6 h-6"
                                })
                            }), jsxRuntimeExports.jsxs("p", {
                                className: "text-lg font-light text-[#403334]",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "lg:hidden",
                                    children: "Customizing applications repeatedly is time-consuming."
                                }), jsxRuntimeExports.jsxs("span", {
                                    className: "hidden lg:inline",
                                    children: ["Customizing applications repeatedly is time-", jsxRuntimeExports.jsx("br", {}), " consuming."]
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-4",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "w-12 h-12 flex-shrink-0 bg-[#FFE0E0] rounded-full flex items-center justify-center",
                                children: jsxRuntimeExports.jsx("img", {
                                    src: "/problem/heartbreak.svg",
                                    alt: "Heartbreak icon",
                                    className: "w-6 h-6"
                                })
                            }), jsxRuntimeExports.jsxs("p", {
                                className: "text-lg font-light text-[#403334]",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "lg:hidden",
                                    children: "Facing constant rejections can lower your confidence."
                                }), jsxRuntimeExports.jsxs("span", {
                                    className: "hidden lg:inline",
                                    children: ["Facing constant rejections can lower your ", jsxRuntimeExports.jsx("br", {}), " confidence."]
                                })]
                            })]
                        })]
                    })]
                })]
            })]
        })
    })
})
  , Solution = () => jsxRuntimeExports.jsxs("section", {
    className: "w-full min-h-screen py-24 sm:py-32 px-4 sm:px-6 md:px-8 lg:px-12 flex flex-col items-center justify-center bg-[#d35c65]",
    children: [jsxRuntimeExports.jsx("div", {
        className: "inline-flex items-center rounded-full bg-[#e59ca2] px-4 py-1.5 mb-8",
        children: jsxRuntimeExports.jsx("span", {
            className: "text-sm font-medium text-[#ffffff]",
            children: "The Solution"
        })
    }), jsxRuntimeExports.jsxs("h2", {
        className: "text-3xl md:text-4xl lg:text-5xl font-mabry font-semibold text-white text-center max-w-4xl mb-16",
        children: ["Experience a hassle-free way to secure your", " ", jsxRuntimeExports.jsx("span", {
            className: "underline decoration-4 underline-offset-8",
            children: "dream role"
        }), "."]
    }), jsxRuntimeExports.jsx("div", {
        className: "w-full max-w-7xl bg-[#fff7f8] rounded-3xl p-8 md:p-16 border-8 md:border-16 border-[#ffb8b8]",
        children: jsxRuntimeExports.jsxs("div", {
            className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-12",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col items-center text-center space-y-6",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "relative w-full aspect-square",
                    children: jsxRuntimeExports.jsx("img", {
                        src: "/solution/first.svg",
                        alt: "Save time illustration",
                        className: "w-full h-full object-contain"
                    })
                }), jsxRuntimeExports.jsxs("p", {
                    className: "text-lg font-light text-[#403334]",
                    children: ["Save time on applications and invest", " ", jsxRuntimeExports.jsx("span", {
                        className: "hidden md:inline",
                        children: jsxRuntimeExports.jsx("br", {})
                    }), "it in more productive pursuits."]
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col items-center text-center space-y-6",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "relative w-full aspect-square",
                    children: jsxRuntimeExports.jsx("img", {
                        src: "/solution/second.svg",
                        alt: "Stand out illustration",
                        className: "w-full h-full object-contain"
                    })
                }), jsxRuntimeExports.jsxs("p", {
                    className: "text-lg font-light text-[#403334]",
                    children: ["Stand out with tailored applications", " ", jsxRuntimeExports.jsx("span", {
                        className: "hidden md:inline",
                        children: jsxRuntimeExports.jsx("br", {})
                    }), "that highlight your strengths."]
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col items-center text-center space-y-6",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "relative w-full aspect-square",
                    children: jsxRuntimeExports.jsx("img", {
                        src: "/solution/third.svg",
                        alt: "Feel secure illustration",
                        className: "w-full h-full object-contain"
                    })
                }), jsxRuntimeExports.jsxs("p", {
                    className: "text-lg font-light text-[#403334]",
                    children: ["Feel secure knowing your job search", " ", jsxRuntimeExports.jsx("span", {
                        className: "hidden md:inline",
                        children: jsxRuntimeExports.jsx("br", {})
                    }), "is expertly handled for you."]
                })]
            })]
        })
    })]
})
  , Meet = () => jsxRuntimeExports.jsx("section", {
    className: "pt-36 w-full py-16 px-4 sm:px-6 md:px-8 lg:px-12 bg-[#FFEDED]",
    children: jsxRuntimeExports.jsxs("div", {
        className: "max-w-7xl mx-auto",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "text-center mb-16 space-y-4",
            children: [jsxRuntimeExports.jsx("div", {
                className: "flex justify-center mb-4",
                children: jsxRuntimeExports.jsx("div", {
                    className: "w-12 h-12 flex items-center justify-center",
                    children: jsxRuntimeExports.jsx("img", {
                        src: "/meet/hand.svg",
                        alt: "Wave hand",
                        className: "w-12 h-12"
                    })
                })
            }), jsxRuntimeExports.jsxs("h2", {
                className: "text-3xl md:text-4xl lg:text-5xl font-mabry font-semibold text-[#403334]",
                children: ["Meet ", jsxRuntimeExports.jsx("span", {
                    className: "text-[#b24e55]",
                    children: "Hirebuddy"
                })]
            }), jsxRuntimeExports.jsxs("p", {
                className: "text-xl font-light text-[#4A3D55] max-w-2xl mx-auto",
                children: ["Your personal career companion,", jsxRuntimeExports.jsx("br", {}), " making opportunities come to you."]
            })]
        }), jsxRuntimeExports.jsxs("div", {
            className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "bg-[#d35c65] rounded-3xl p-8 text-center space-y-4",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "relative w-full aspect-square max-w-[300px] mx-auto",
                    children: jsxRuntimeExports.jsx("img", {
                        src: "/meet/targeted-search.svg",
                        alt: "Targeted search",
                        className: "w-full h-full object-contain"
                    })
                }), jsxRuntimeExports.jsx("h3", {
                    className: "text-3xl font-mabry font-semibold text-white",
                    children: "Targeted search"
                }), jsxRuntimeExports.jsxs("p", {
                    className: "text-white/90 text-base font-light",
                    children: ["Our algorithm finds and matches you", jsxRuntimeExports.jsx("br", {}), " with jobs that suit your skills and", jsxRuntimeExports.jsx("br", {}), " preferences from across the web."]
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "bg-white rounded-3xl p-8 text-center space-y-4",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "relative w-full aspect-square max-w-[300px] mx-auto",
                    children: jsxRuntimeExports.jsx("img", {
                        src: "/meet/apply-effortlessly.svg",
                        alt: "Apply effortlessly",
                        className: "w-full h-full object-contain"
                    })
                }), jsxRuntimeExports.jsx("h2", {
                    className: "text-3xl font-mabry font-semibold text-[#403334]",
                    children: "Apply effortlessly"
                }), jsxRuntimeExports.jsxs("p", {
                    className: "font-light text-[#403334] text-base",
                    children: ["Apply to multiple jobs with a single ", jsxRuntimeExports.jsx("br", {}), "click. We handle the application ", jsxRuntimeExports.jsx("br", {}), "process, so you don't have to."]
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "bg-[#d35c65] rounded-3xl p-8 text-center space-y-4",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "relative w-full aspect-square max-w-[300px] mx-auto",
                    children: jsxRuntimeExports.jsx("img", {
                        src: "/meet/tailored-svg.svg",
                        alt: "Tailored CVs",
                        className: "w-full h-full object-contain"
                    })
                }), jsxRuntimeExports.jsx("h3", {
                    className: "text-3xl font-mabry font-semibold text-white",
                    children: "Tailored CVs"
                }), jsxRuntimeExports.jsxs("p", {
                    className: "text-white/90 text-base font-light",
                    children: ["Get professionally tailored CVs and cover", jsxRuntimeExports.jsx("br", {}), " letters that make your applications stand out."]
                })]
            })]
        }), jsxRuntimeExports.jsxs("div", {
            className: "flex flex-col md:flex-row gap-6 items-stretch",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "flex-1 bg-white rounded-3xl p-4 pt-2 pb-3 text-center",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "relative w-full aspect-[4/3] max-w-[400px] mx-auto mb-2",
                    children: jsxRuntimeExports.jsx("img", {
                        src: "/meet/personalized-email.svg",
                        alt: "Personalized Emails",
                        className: "w-full h-full object-contain"
                    })
                }), jsxRuntimeExports.jsx("h3", {
                    className: "text-2xl font-mabry font-semibold text-[#403334] mb-1",
                    children: "Personalized Emails"
                }), jsxRuntimeExports.jsxs("p", {
                    className: "text-[#403334] font-light text-base leading-snug",
                    children: ["We send personalized cold emails to", jsxRuntimeExports.jsx("br", {}), " recruiters on your behalf, increasing your", jsxRuntimeExports.jsx("br", {}), " chances of getting noticed."]
                })]
            }), jsxRuntimeExports.jsx("div", {
                className: "hidden md:block",
                children: jsxRuntimeExports.jsx("div", {
                    className: "rounded-2xl p-4 h-full flex items-center",
                    children: jsxRuntimeExports.jsx("img", {
                        src: "/meet/bento-filler.svg",
                        alt: "Feature icons",
                        className: "w-auto h-max -my-5",
                        style: {
                            width: "80px",
                            height: "400px"
                        }
                    })
                })
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex-1 bg-white rounded-3xl p-4 pt-2 pb-3 text-center",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "relative w-full aspect-[4/3] max-w-[400px] mx-auto mb-2",
                    children: jsxRuntimeExports.jsx("img", {
                        src: "/meet/application-tracking.svg",
                        alt: "Application Tracking",
                        className: "w-full h-full object-contain"
                    })
                }), jsxRuntimeExports.jsx("h3", {
                    className: "text-2xl font-mabry font-semibold text-[#403334] mb-1",
                    children: "Application Tracking"
                }), jsxRuntimeExports.jsxs("p", {
                    className: "text-[#4A3D55] text-base font-light leading-snug",
                    children: ["Stay updated with real-time notifications", jsxRuntimeExports.jsx("br", {}), " and status updates for all your job", jsxRuntimeExports.jsx("br", {}), " applications."]
                })]
            })]
        }), jsxRuntimeExports.jsx("div", {
            className: "text-center mt-16 px-4 sm:px-0",
            children: jsxRuntimeExports.jsx(Button, {
                className: "w-full sm:w-[280px] h-14 px-8 text-xl font-normal rounded-md bg-gradient-to-t from-[#b24e55] to-[#E3405F] hover:opacity-90 text-white flex items-center justify-center gap-2 mx-auto",
                asChild: !0,
                children: jsxRuntimeExports.jsxs("a", {
                    href: "/signup",
                    children: ["Try Hirebuddy for free", jsxRuntimeExports.jsx("svg", {
                        width: "24",
                        height: "24",
                        viewBox: "0 0 24 24",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: jsxRuntimeExports.jsx("path", {
                            d: "M5 12H19M19 12L12 5M19 12L12 19",
                            stroke: "currentColor",
                            strokeWidth: "2",
                            strokeLinecap: "round",
                            strokeLinejoin: "round"
                        })
                    })]
                })
            })
        })]
    })
})
  , steps = [{
    number: 1,
    title: "Upload your CV and preferences",
    description: "Start by uploading your CV and sharing your job preferences. This helps us understand your skills and goals, so we can match you with the right opportunities.",
    image: "/working/working1.png"
}, {
    number: 2,
    title: "AI-Powered Matching",
    description: "Our advanced AI analyzes your profile and matches you with relevant job opportunities across multiple platforms, saving you hours of manual searching.",
    image: "/working/working2.png"
}, {
    number: 3,
    title: "Automated Applications",
    description: "We automatically submit tailored applications to matched positions, handling the entire process while keeping you updated on the progress.",
    image: "/working/working3.png"
}]
  , stepVariant = {
    initial: {
        scale: 1
    },
    animate: {
        scale: 1.2
    },
    exit: {
        scale: 1
    }
}
  , contentVariant = {
    hidden: {
        opacity: 0,
        y: 20
    },
    visible: {
        opacity: 1,
        y: 0
    },
    exit: {
        opacity: 0,
        y: -20
    }
}
  , Working = () => {
    const [s,e] = reactExports.useState(0);
    reactExports.useEffect( () => {
        const o = setInterval( () => {
            e(a => a === steps.length - 1 ? 0 : a + 1)
        }
        , 7e3);
        return () => clearInterval(o)
    }
    , []);
    const i = () => {
        window.location.href = "/signup"
    }
    ;
    return jsxRuntimeExports.jsx("section", {
        className: "w-full min-h-screen py-8 sm:py-16 px-4 sm:px-6 md:px-8 lg:px-12 flex items-center",
        children: jsxRuntimeExports.jsx("div", {
            className: "max-w-7xl mx-auto bg-[#D35C65] rounded-3xl p-4 sm:p-8 md:p-12",
            children: jsxRuntimeExports.jsxs("div", {
                className: "grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-8 lg:gap-16 items-center",
                children: [jsxRuntimeExports.jsx(AnimatePresence, {
                    mode: "wait",
                    children: jsxRuntimeExports.jsx(motion.div, {
                        initial: {
                            opacity: 0,
                            x: -20
                        },
                        animate: {
                            opacity: 1,
                            x: 0
                        },
                        exit: {
                            opacity: 0,
                            x: 20
                        },
                        transition: {
                            duration: .5
                        },
                        className: "relative w-full aspect-video lg:aspect-square max-w-[600px] mx-auto rounded-2xl sm:rounded-3xl overflow-hidden",
                        children: jsxRuntimeExports.jsx("img", {
                            src: steps[s].image,
                            alt: steps[s].title,
                            className: "w-full h-full object-cover"
                        })
                    }, s)
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-4 sm:space-y-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-white text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-semibold lg:pb-11",
                        children: "How it works"
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "mt-6 sm:mt-12 flex gap-4 sm:gap-12",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "flex flex-col items-center gap-3 sm:gap-6 mt-6",
                            children: steps.map( (o, a) => a === s ? jsxRuntimeExports.jsx(motion.div, {
                                variants: stepVariant,
                                initial: "initial",
                                animate: "animate",
                                exit: "exit",
                                transition: {
                                    duration: .3
                                },
                                className: "w-8 h-8 sm:w-12 sm:h-12 rounded-full bg-white flex items-center justify-center",
                                children: jsxRuntimeExports.jsx("span", {
                                    className: "text-base sm:text-xl font-semibold text-[#D35C65]",
                                    children: o.number
                                })
                            }, a) : jsxRuntimeExports.jsx(motion.div, {
                                initial: {
                                    opacity: 0
                                },
                                animate: {
                                    opacity: 1
                                },
                                exit: {
                                    opacity: 0
                                },
                                transition: {
                                    duration: .3
                                },
                                className: "w-3 h-3 sm:w-4 sm:h-4 rounded-full bg-white cursor-pointer",
                                onClick: () => e(a)
                            }, a))
                        }), jsxRuntimeExports.jsx(AnimatePresence, {
                            mode: "wait",
                            children: jsxRuntimeExports.jsxs(motion.div, {
                                variants: contentVariant,
                                initial: "hidden",
                                animate: "visible",
                                exit: "exit",
                                transition: {
                                    duration: .5,
                                    delay: .3
                                },
                                className: "space-y-4 sm:space-y-6 flex-1",
                                children: [jsxRuntimeExports.jsx("h3", {
                                    className: "text-xl sm:text-2xl md:text-3xl font-mabry font-semibold text-white",
                                    children: steps[s].title
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-base sm:text-lg font-light text-white max-w-xl",
                                    children: steps[s].description
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "pt-2 sm:pt-4",
                                    children: jsxRuntimeExports.jsx(Button, {
                                        onClick: s < steps.length - 1 ? () => e(s + 1) : i,
                                        className: "h-10 sm:h-12 px-6 sm:px-8 text-base sm:text-lg font-normal rounded-md bg-gradient-to-t from-[#f9b6bc] to-[#fffcfd] text-[#8f5055] hover:bg-white/90",
                                        children: s < steps.length - 1 ? "Next Step" : "Try it yourself"
                                    })
                                })]
                            }, s)
                        })]
                    })]
                })]
            })
        })
    })
}
  , testimonials = [{
    id: 1,
    title: "Effortless",
    quote: "I struggled with college placements for months without any interviews. In just two weeks, Hirebuddy got me multiple interviews with zero effort on my part.",
    author: "Arnab Kundu"
}, {
    id: 2,
    title: "Successful",
    quote: "Hirebuddy's efforts in finding my internship were amazing! After interacting with several companies, I found the perfect fit. Their algorithm works, and the outcomes are fantastic! 10/10 recommended",
    author: "Charvi Sethi"
}, {
    id: 3,
    title: "Supportive",
    quote: "Hirebuddy completely changed my job search! It made everything so much easier and within weeks I had interviews lined up. I honestly couldn't have asked for a better experience!",
    author: "Raghav Gaur"
}, {
    id: 4,
    title: "Relieving",
    quote: "Job hunting used to be so stressful, but Hirebuddy made it so much easier. The platform handled everything, and I landed interviews quickly. It was such a relief!",
    author: "Satyansh Kumar"
}, {
    id: 5,
    title: "Seamless",
    quote: "Hirebuddy made my job search seamless! From personalized job matches to application tracking, everything was handled effortlessly. I landed interviews fast, and the whole experience was smooth and stress-free!",
    author: "Vaishnavi Kant"
}]
  , Testimonials = () => {
    const [[s,e],i] = reactExports.useState([0, 0]);
    reactExports.useEffect( () => {
        const b = setInterval( () => {
            a()
        }
        , 6e3);
        return () => clearInterval(b)
    }
    , [s]);
    const o = () => {
        i([s === 0 ? testimonials.length - 1 : s - 1, -1])
    }
      , a = () => {
        i([(s + 1) % testimonials.length, 1])
    }
      , c = {
        enter: b => ({
            x: b > 0 ? 300 : -300,
            opacity: 0,
            position: "absolute"
        }),
        center: {
            x: 0,
            opacity: 1,
            position: "relative"
        },
        exit: b => ({
            x: b < 0 ? 300 : -300,
            opacity: 0,
            position: "absolute"
        })
    }
      , d = {
        x: {
            type: "spring",
            stiffness: 100,
            damping: 50
        },
        opacity: {
            duration: .8
        }
    }
      , h = s === 0 ? testimonials.length - 1 : s - 1
      , g = (s + 1) % testimonials.length;
    return jsxRuntimeExports.jsx("section", {
        className: "min-h-screen py-8 sm:py-10 md:py-20 bg-[#fccfd1] relative flex items-center",
        children: jsxRuntimeExports.jsxs("div", {
            className: "container mx-auto px-4 sm:px-12 relative z-20",
            children: [jsxRuntimeExports.jsxs("h2", {
                className: "text-center text-xl sm:text-2xl md:text-4xl font-bold mb-6 sm:mb-8 md:mb-16 text-[#403334]",
                children: ["See what our ", jsxRuntimeExports.jsx("span", {
                    className: "text-[#b24e55]",
                    children: "customers"
                }), " have", jsxRuntimeExports.jsx("br", {
                    className: "hidden md:block"
                }), " to", " ", jsxRuntimeExports.jsx("span", {
                    className: "text-[#b24e55]",
                    children: "say about us..."
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "max-w-7xl mx-auto relative px-4 sm:px-24",
                children: [jsxRuntimeExports.jsx("button", {
                    onClick: o,
                    className: "absolute left-0 sm:left-8 top-1/2 -translate-y-1/2 z-10 bg-[#ffedee] hover:bg-white rounded-full p-1 sm:p-2 text-[#b24e55] shadow-md",
                    "aria-label": "Previous testimonials",
                    children: jsxRuntimeExports.jsx("svg", {
                        xmlns: "http://www.w3.org/2000/svg",
                        fill: "none",
                        viewBox: "0 0 24 24",
                        strokeWidth: 2,
                        stroke: "currentColor",
                        className: "w-6 h-6 sm:w-8 sm:h-8",
                        children: jsxRuntimeExports.jsx("path", {
                            strokeLinecap: "round",
                            strokeLinejoin: "round",
                            d: "M15.75 19.5L8.25 12l7.5-7.5"
                        })
                    })
                }), jsxRuntimeExports.jsx("button", {
                    onClick: a,
                    className: "absolute right-0 sm:right-8 top-1/2 -translate-y-1/2 z-10 bg-[#ffedee] hover:bg-white rounded-full p-1 sm:p-2 text-[#b24e55] shadow-md",
                    "aria-label": "Next testimonials",
                    children: jsxRuntimeExports.jsx("svg", {
                        xmlns: "http://www.w3.org/2000/svg",
                        fill: "none",
                        viewBox: "0 0 24 24",
                        strokeWidth: 2,
                        stroke: "currentColor",
                        className: "w-6 h-6 sm:w-8 sm:h-8",
                        children: jsxRuntimeExports.jsx("path", {
                            strokeLinecap: "round",
                            strokeLinejoin: "round",
                            d: "M8.25 4.5l7.5 7.5-7.5 7.5"
                        })
                    })
                }), jsxRuntimeExports.jsx("div", {
                    className: "relative bg-gradient-to-t from-[#b45057] to-[#e4656e] rounded-[1rem] sm:rounded-[2rem] p-4 sm:p-12 md:p-16 border-4 sm:border-8 md:border-16 border-[#f78f97] min-h-[400px] shadow-[0px_0px_20px_0px_rgba(0,0,0,0.25)] overflow-hidden",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "relative w-full max-w-[80rem] mx-auto",
                        children: [jsxRuntimeExports.jsx(motion.div, {
                            custom: -1,
                            initial: {
                                opacity: 0,
                                x: -100
                            },
                            animate: {
                                opacity: .5,
                                x: -150
                            },
                            exit: {
                                opacity: 0,
                                x: -100
                            },
                            transition: {
                                duration: 1.5,
                                ease: "easeOut"
                            },
                            className: "hidden sm:block absolute left-[calc(50%-36rem)] top-[0%] -translate-y-1/2 pointer-events-none",
                            children: jsxRuntimeExports.jsx("div", {
                                className: "bg-[#ffedee] rounded-[1rem] p-8 w-[24rem] min-h-[300px] flex flex-col justify-center",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-6",
                                    children: [jsxRuntimeExports.jsxs("h3", {
                                        className: "text-2xl font-semibold text-gray-800",
                                        children: ['"', testimonials[h].title, '"']
                                    }), jsxRuntimeExports.jsx("p", {
                                        className: "text-gray-600 text-lg leading-relaxed line-clamp-4",
                                        children: testimonials[h].quote
                                    })]
                                })
                            })
                        }, `prev-${h}`), jsxRuntimeExports.jsx(motion.div, {
                            custom: e,
                            variants: c,
                            initial: "enter",
                            animate: "center",
                            exit: "exit",
                            transition: d,
                            className: "flex items-center justify-center relative min-h-[300px]",
                            children: jsxRuntimeExports.jsx("div", {
                                className: "bg-[#ffedee] rounded-[1rem] p-4 sm:p-8 w-full sm:w-[28rem] md:w-[32rem] z-10 min-h-[300px] flex flex-col justify-center",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-4 sm:space-y-6",
                                    children: [jsxRuntimeExports.jsxs("h3", {
                                        className: "text-xl sm:text-2xl font-semibold text-gray-800",
                                        children: ['"', testimonials[s].title, '"']
                                    }), jsxRuntimeExports.jsx("p", {
                                        className: "text-gray-600 text-base sm:text-lg leading-relaxed",
                                        children: testimonials[s].quote
                                    }), jsxRuntimeExports.jsx("p", {
                                        className: "font-semibold text-gray-800",
                                        children: testimonials[s].author
                                    })]
                                })
                            })
                        }, s), jsxRuntimeExports.jsx(motion.div, {
                            custom: 1,
                            initial: {
                                opacity: 0,
                                x: 100
                            },
                            animate: {
                                opacity: .5,
                                x: 150
                            },
                            exit: {
                                opacity: 0,
                                x: 100
                            },
                            transition: {
                                duration: 1.5,
                                ease: "easeOut"
                            },
                            className: "hidden sm:block absolute right-[calc(50%-36rem)] top-[0%] -translate-y-1/2 pointer-events-none",
                            children: jsxRuntimeExports.jsx("div", {
                                className: "bg-[#ffedee] rounded-[1rem] p-8 w-[24rem] min-h-[300px] flex flex-col justify-center",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-6",
                                    children: [jsxRuntimeExports.jsxs("h3", {
                                        className: "text-2xl font-semibold text-gray-800",
                                        children: ['"', testimonials[g].title, '"']
                                    }), jsxRuntimeExports.jsx("p", {
                                        className: "text-gray-600 text-lg leading-relaxed line-clamp-4",
                                        children: testimonials[g].quote
                                    })]
                                })
                            })
                        }, `next-${g}`)]
                    })
                }), jsxRuntimeExports.jsx("div", {
                    className: "flex justify-center mt-8 space-x-2",
                    children: testimonials.map( (b, _) => jsxRuntimeExports.jsx("button", {
                        onClick: () => i([_, _ > s ? 1 : -1]),
                        className: `w-3 h-3 rounded-full transition-colors ${_ === s ? "bg-[#b24e55]" : "bg-[#ffedee]"}`,
                        "aria-label": `Go to testimonial ${_ + 1}`
                    }, _))
                })]
            })]
        })
    })
}
  , alertVariants = cva("relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground", {
    variants: {
        variant: {
            default: "bg-background text-foreground",
            destructive: "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive"
        }
    },
    defaultVariants: {
        variant: "default"
    }
})
  , Alert = reactExports.forwardRef( ({className: s, variant: e, ...i}, o) => jsxRuntimeExports.jsx("div", {
    ref: o,
    role: "alert",
    className: cn(alertVariants({
        variant: e
    }), s),
    ...i
}));
Alert.displayName = "Alert";
const AlertTitle = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx("h5", {
    ref: i,
    className: cn("mb-1 font-medium leading-none tracking-tight", s),
    ...e
}));
AlertTitle.displayName = "AlertTitle";
const AlertDescription = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx("div", {
    ref: i,
    className: cn("text-sm [&_p]:leading-relaxed", s),
    ...e
}));
AlertDescription.displayName = "AlertDescription";
const SignInPopup = ({isOpen: s, onClose: e}) => {
    const [i,o] = reactExports.useState(null)
      , [a,c] = reactExports.useState(!1)
      , {signInWithGoogle: d, signInWithGithub: h} = useAuth()
      , g = useNavigate()
      , b = async () => {
        c(!0),
        o(null);
        try {
            await d(),
            e()
        } catch (_e) {
            o("Failed to sign in with Google. Please try again."),
            console.error(_e),
            c(!1)
        }
    }
      , _ = async () => {
        c(!0),
        o(null);
        try {
            await h(),
            e()
        } catch (_e) {
            o("Failed to sign in with GitHub. Please try again."),
            console.error(_e),
            c(!1)
        }
    }
      , $ = () => {
        e(),
        g("/signup")
    }
    ;
    return jsxRuntimeExports.jsx(AnimatePresence, {
        children: s && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [jsxRuntimeExports.jsx(motion.div, {
                initial: {
                    opacity: 0
                },
                animate: {
                    opacity: 1
                },
                exit: {
                    opacity: 0
                },
                className: "fixed inset-0 bg-black/30 backdrop-blur-sm z-50",
                onClick: e
            }), jsxRuntimeExports.jsx(motion.div, {
                initial: {
                    opacity: 0,
                    scale: .9,
                    y: 20
                },
                animate: {
                    opacity: 1,
                    scale: 1,
                    y: 0
                },
                exit: {
                    opacity: 0,
                    scale: .9,
                    y: 20
                },
                className: "fixed inset-0 flex items-center justify-center z-50",
                transition: {
                    type: "spring",
                    duration: .5
                },
                children: jsxRuntimeExports.jsxs("div", {
                    className: "bg-white/90 backdrop-blur-xl rounded-3xl p-8 shadow-2xl border border-white/20 w-full max-w-lg mx-auto",
                    children: [jsxRuntimeExports.jsx("button", {
                        onClick: e,
                        className: "absolute right-6 top-6 text-gray-500 hover:text-gray-800 transition-colors",
                        children: jsxRuntimeExports.jsx(X, {
                            size: 24
                        })
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "text-center mb-8",
                        children: [jsxRuntimeExports.jsx("h2", {
                            className: "text-3xl font-bold text-gray-900 mb-3",
                            children: "Welcome Back"
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-gray-600",
                            children: "Sign in to continue your career journey"
                        })]
                    }), i && jsxRuntimeExports.jsx(Alert, {
                        variant: "destructive",
                        className: "mb-4 bg-red-50/80 backdrop-blur-sm border-red-200/50",
                        children: jsxRuntimeExports.jsx(AlertDescription, {
                            className: "text-red-700 text-sm",
                            children: i
                        })
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-3",
                        children: [jsxRuntimeExports.jsx(Button, {
                            onClick: b,
                            disabled: a,
                            className: "w-full h-14 bg-white hover:bg-white text-gray-700 border border-gray-200 transition-all duration-300 hover:shadow-md rounded-xl group",
                            variant: "outline",
                            children: jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-center gap-3",
                                children: [jsxRuntimeExports.jsxs("svg", {
                                    className: "w-5 h-5",
                                    viewBox: "0 0 24 24",
                                    children: [jsxRuntimeExports.jsx("path", {
                                        d: "M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z",
                                        fill: "#4285F4"
                                    }), jsxRuntimeExports.jsx("path", {
                                        d: "M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z",
                                        fill: "#34A853"
                                    }), jsxRuntimeExports.jsx("path", {
                                        d: "M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z",
                                        fill: "#FBBC05"
                                    }), jsxRuntimeExports.jsx("path", {
                                        d: "M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z",
                                        fill: "#EA4335"
                                    })]
                                }), jsxRuntimeExports.jsx("span", {
                                    className: "font-medium",
                                    children: "Sign in with Google"
                                })]
                            })
                        }), jsxRuntimeExports.jsx(Button, {
                            onClick: _,
                            disabled: a,
                            className: "w-full h-14 bg-white hover:bg-white text-gray-700 border border-gray-200 transition-all duration-300 hover:shadow-md rounded-xl group",
                            variant: "outline",
                            children: jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-center gap-3",
                                children: [jsxRuntimeExports.jsx("svg", {
                                    className: "w-5 h-5",
                                    viewBox: "0 0 24 24",
                                    fill: "currentColor",
                                    children: jsxRuntimeExports.jsx("path", {
                                        d: "M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
                                    })
                                }), jsxRuntimeExports.jsx("span", {
                                    className: "font-medium",
                                    children: "Sign in with GitHub"
                                })]
                            })
                        })]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "mt-8 text-center",
                        children: jsxRuntimeExports.jsxs("p", {
                            className: "text-gray-600",
                            children: ["Not a Member?", " ", jsxRuntimeExports.jsx("button", {
                                onClick: $,
                                className: "text-[#dc425d] font-medium hover:underline",
                                children: "Sign up"
                            })]
                        })
                    })]
                })
            })]
        })
    })
}
  , CashfreePaymentButton = ({className: s="", variant: e="default"}) => {
    const {user: i} = useAuth()
      , [o,a] = reactExports.useState(!1)
      , c = g => {
        i || (g.preventDefault(),
        a(!0))
    }
      , d = () => {
        switch (e) {
        case "sidebar":
            return cn("w-full py-3 px-4 rounded-lg font-semibold transition-all duration-300 text-sm", "bg-gradient-to-r from-yellow-500 to-amber-500 hover:from-yellow-600 hover:to-amber-600", "text-white shadow-lg hover:shadow-xl hover:scale-105", "border-2 border-yellow-400/50 hover:border-yellow-300", "flex items-center justify-center gap-2 group", "active:scale-95 transform-gpu");
        default:
            return "w-full py-3 px-4 rounded-lg font-medium bg-gradient-to-t from-[#f9b6bc] to-[#fffcfd] text-[#8f5055] transition-colors duration-200 text-sm"
        }
    }
      , h = () => {
        switch (e) {
        case "sidebar":
            return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [jsxRuntimeExports.jsx(Crown, {
                    className: "h-4 w-4 group-hover:animate-bounce"
                }), jsxRuntimeExports.jsx("span", {
                    children: "Upgrade to Premium"
                }), jsxRuntimeExports.jsx(Sparkles, {
                    className: "h-3 w-3 opacity-75 group-hover:opacity-100"
                })]
            });
        default:
            return jsxRuntimeExports.jsx("span", {
                children: "Subscribe to Premium"
            })
        }
    }
    ;
    return jsxRuntimeExports.jsxs("div", {
        className: s,
        children: [jsxRuntimeExports.jsx("a", {
            href: "https://payments.cashfree.com/forms/hirebuddy_premium_subscription",
            target: "_parent",
            className: "block w-full",
            style: {
                textDecoration: "none"
            },
            onClick: c,
            children: jsxRuntimeExports.jsx("button", {
                className: d(),
                children: h()
            })
        }), jsxRuntimeExports.jsx(SignInPopup, {
            isOpen: o,
            onClose: () => a(!1)
        })]
    })
}
  , pricingData$1 = [{
    tier: "Free Plan",
    description: "Perfect for getting started with your job search journey.",
    price: "₹0",
    period: "",
    features: ["AI Resume Builder", "Job Search & Filters", "ATS Resume Templates", "Community Support", "Application Status Tracking"],
    imagePath: "/pricing/platinum.png",
    popular: !1,
    buttonText: "Get Started Free"
}, {
    tier: "Premium Plan",
    description: "For active job seekers aiming for more reach and tailored applications.",
    price: "₹149",
    period: "",
    features: ["Full Access to Job Board", "Hyper-Personalized Cold Emails", "Follow-up Emails and tracker", "Access to Exclusive Job Openings", "Unlimited Job Applications", "24/7 Premium Support", "All the free features"],
    imagePath: "/pricing/gold.png",
    popular: !0,
    buttonText: "Subscribe to Premium"
}]
  , comparisonFeatures$1 = [{
    feature: "AI Resume Builder",
    free: !0,
    premium: !0
}, {
    feature: "Job Search & Filters",
    free: !0,
    premium: !0
}, {
    feature: "ATS Resume Templates",
    free: !0,
    premium: !0
}, {
    feature: "Community Support",
    free: !0,
    premium: !0
}, {
    feature: "Application Status Tracking",
    free: !0,
    premium: !0
}, {
    feature: "Full Access to Job Board",
    free: !1,
    premium: !0
}, {
    feature: "Hyper-Personalized Cold Emails",
    free: !1,
    premium: !0
}, {
    feature: "Follow-up Emails and Tracker",
    free: !1,
    premium: !0
}, {
    feature: "Access to Exclusive Job Openings",
    free: !1,
    premium: !0
}, {
    feature: "Unlimited Job Applications",
    free: !1,
    premium: !0
}, {
    feature: "24/7 Premium Support",
    free: !1,
    premium: !0
}]
  , Pricing$1 = () => {
    const [s,e] = reactExports.useState(!1)
      , {user: i} = useAuth()
      , o = useNavigate()
      , a = () => {
        i ? o("/dashboard") : e(!0)
    }
      , c = () => jsxRuntimeExports.jsxs("div", {
        className: "rounded-3xl p-6 flex flex-col border-4 w-full relative bg-white border-gray-200 shadow-[0px_0px_20px_0px_rgba(0,0,0,0.1)]",
        children: [jsxRuntimeExports.jsx("div", {
            className: "h-24 relative flex items-center justify-center",
            children: jsxRuntimeExports.jsx("h3", {
                className: "text-2xl font-bold text-gray-800",
                children: "Plan Comparison"
            })
        }), jsxRuntimeExports.jsxs("div", {
            className: "flex-grow",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "flex justify-between items-center mb-6 px-2",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "text-left flex-1",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "text-sm font-semibold text-gray-600",
                        children: "FREE PLAN"
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-lg font-bold text-gray-800",
                        children: "₹0"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "text-right flex-1",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "text-sm font-semibold text-gray-600",
                        children: "PREMIUM PLAN"
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-lg font-bold text-[#b24e55]",
                        children: "₹149"
                    })]
                })]
            }), jsxRuntimeExports.jsx("div", {
                className: "space-y-1 max-h-96 overflow-y-auto",
                children: comparisonFeatures$1.map( (d, h) => jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center py-2 px-3 rounded-lg hover:bg-gray-50 transition-colors",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "w-6 flex justify-center mr-3",
                        children: d.free ? jsxRuntimeExports.jsx("div", {
                            className: "w-5 h-5 rounded-full bg-green-100 flex items-center justify-center",
                            children: jsxRuntimeExports.jsx(CircleCheckBig, {
                                className: "w-3 h-3 text-green-600"
                            })
                        }) : jsxRuntimeExports.jsx("div", {
                            className: "w-5 h-5 rounded-full bg-red-100 flex items-center justify-center",
                            children: jsxRuntimeExports.jsx(X, {
                                className: "w-3 h-3 text-red-500"
                            })
                        })
                    }), jsxRuntimeExports.jsx("div", {
                        className: "flex-1 text-sm text-gray-700 font-medium",
                        children: d.feature
                    }), jsxRuntimeExports.jsx("div", {
                        className: "w-6 flex justify-center ml-3",
                        children: d.premium ? jsxRuntimeExports.jsx("div", {
                            className: "w-5 h-5 rounded-full bg-green-100 flex items-center justify-center",
                            children: jsxRuntimeExports.jsx(CircleCheckBig, {
                                className: "w-3 h-3 text-green-600"
                            })
                        }) : jsxRuntimeExports.jsx("div", {
                            className: "w-5 h-5 rounded-full bg-red-100 flex items-center justify-center",
                            children: jsxRuntimeExports.jsx(X, {
                                className: "w-3 h-3 text-red-500"
                            })
                        })
                    })]
                }, h))
            })]
        }), jsxRuntimeExports.jsx("div", {
            className: "mt-6 pt-4 border-t border-gray-200",
            children: jsxRuntimeExports.jsxs("div", {
                className: "flex justify-between items-center text-xs text-gray-500",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "w-3 h-3 rounded-full bg-green-100 flex items-center justify-center",
                        children: jsxRuntimeExports.jsx(CircleCheckBig, {
                            className: "w-2 h-2 text-green-600"
                        })
                    }), jsxRuntimeExports.jsx("span", {
                        children: "Included"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "w-3 h-3 rounded-full bg-red-100 flex items-center justify-center",
                        children: jsxRuntimeExports.jsx(X, {
                            className: "w-2 h-2 text-red-500"
                        })
                    }), jsxRuntimeExports.jsx("span", {
                        children: "Not included"
                    })]
                })]
            })
        })]
    });
    return jsxRuntimeExports.jsxs("section", {
        id: "pricing",
        className: "min-h-screen bg-[#ffedee] py-16 px-4 sm:px-6 lg:px-8",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "max-w-7xl mx-auto m-24",
            children: [jsxRuntimeExports.jsx("div", {
                className: "flex justify-center mb-8",
                children: jsxRuntimeExports.jsx("div", {
                    className: "inline-flex items-center rounded-full bg-[#ffe0e0] px-4 py-1.5",
                    children: jsxRuntimeExports.jsx("span", {
                        className: "text-sm font-medium text-[#b26469]",
                        children: "Pricing"
                    })
                })
            }), jsxRuntimeExports.jsxs("div", {
                className: "text-center mb-12",
                children: [jsxRuntimeExports.jsxs("h2", {
                    className: "text-4xl font-bold text-[#574547] mb-4",
                    children: ["Plans to boost your ", jsxRuntimeExports.jsx("span", {
                        className: "text-[#d35c65]",
                        children: "career"
                    }), "."]
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-lg text-[#4A3D55] max-w-2xl mx-auto",
                    children: "From free essential tools to premium AI-powered features, choose the perfect plan for your career goals."
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "grid md:grid-cols-3 gap-6 max-w-7xl mx-auto mt-16",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "rounded-3xl p-6 flex flex-col border-4 w-full relative bg-white border-[#e2e8f0] hover:border-[#f78f97] transition-colors duration-300",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "h-24 relative",
                        children: jsxRuntimeExports.jsx("div", {
                            className: "h-12 w-20 relative",
                            children: jsxRuntimeExports.jsx("img", {
                                src: pricingData$1[0].imagePath,
                                alt: `${pricingData$1[0].tier} tier`,
                                className: "w-full h-full object-contain"
                            })
                        })
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "h-48 flex flex-col",
                        children: [jsxRuntimeExports.jsx("h3", {
                            className: "text-2xl font-bold mb-2 text-[#574547]",
                            children: pricingData$1[0].tier
                        }), jsxRuntimeExports.jsx("p", {
                            className: "mb-4 text-[#4A3D55] text-sm",
                            children: pricingData$1[0].description
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "mb-6",
                            children: [jsxRuntimeExports.jsx("span", {
                                className: "text-3xl font-bold text-[#574547]",
                                children: pricingData$1[0].price
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-base ml-1 text-[#4A3D55]/80",
                                children: pricingData$1[0].period
                            })]
                        })]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "mb-auto flex-grow",
                        children: jsxRuntimeExports.jsx("ul", {
                            className: "space-y-3",
                            children: pricingData$1[0].features.map(d => jsxRuntimeExports.jsxs("li", {
                                className: "flex items-start",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "w-5 h-5 rounded-full flex items-center justify-center mr-2 mt-0.5 flex-shrink-0 bg-green-100",
                                    children: jsxRuntimeExports.jsx(CircleCheckBig, {
                                        className: "w-3 h-3 text-green-600"
                                    })
                                }), jsxRuntimeExports.jsx("span", {
                                    className: "text-xs text-[#4A3D55]",
                                    children: d
                                })]
                            }, d))
                        })
                    }), jsxRuntimeExports.jsx("div", {
                        className: "mt-6",
                        children: jsxRuntimeExports.jsx(Button, {
                            onClick: a,
                            className: "w-full py-3 px-4 rounded-lg font-medium bg-gradient-to-t from-[#b24e55] to-[#e4656e] text-white hover:from-[#a04449] hover:to-[#d85a63] transition-colors duration-200 text-sm",
                            children: pricingData$1[0].buttonText
                        })
                    })]
                }), jsxRuntimeExports.jsx(c, {}), jsxRuntimeExports.jsxs("div", {
                    className: "rounded-3xl p-6 flex flex-col border-4 w-full relative bg-gradient-to-t from-[#b45057] to-[#e4656e] border-[#f78f97]",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "h-24 relative",
                        children: [jsxRuntimeExports.jsx("span", {
                            className: "absolute font-semibold top-0 right-0 bg-gradient-to-t from-[#f9b6bc] to-[#fffcfd] text-[#8f5055] px-2 py-1 rounded-full text-xs",
                            children: "MOST POPULAR"
                        }), jsxRuntimeExports.jsx("div", {
                            className: "h-12 w-20 relative",
                            children: jsxRuntimeExports.jsx("img", {
                                src: pricingData$1[1].imagePath,
                                alt: `${pricingData$1[1].tier} tier`,
                                className: "w-full h-full object-contain"
                            })
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "h-48 flex flex-col",
                        children: [jsxRuntimeExports.jsx("h3", {
                            className: "text-2xl font-bold mb-2 text-white drop-shadow-[0_0_15px_rgba(255,255,255,0.5)]",
                            children: pricingData$1[1].tier
                        }), jsxRuntimeExports.jsx("p", {
                            className: "mb-4 text-white text-sm",
                            children: pricingData$1[1].description
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "mb-6",
                            children: [jsxRuntimeExports.jsx("span", {
                                className: "text-3xl font-bold text-white drop-shadow-[0_0_15px_rgba(255,255,255,0.5)]",
                                children: pricingData$1[1].price
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-base ml-1 text-white/80",
                                children: pricingData$1[1].period
                            })]
                        })]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "mb-auto flex-grow",
                        children: jsxRuntimeExports.jsx("ul", {
                            className: "space-y-3",
                            children: pricingData$1[1].features.map(d => jsxRuntimeExports.jsxs("li", {
                                className: "flex items-start",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "w-5 h-5 rounded-full flex items-center justify-center mr-2 mt-0.5 flex-shrink-0 bg-white/20",
                                    children: jsxRuntimeExports.jsx(CircleCheckBig, {
                                        className: "w-3 h-3 text-white"
                                    })
                                }), jsxRuntimeExports.jsx("span", {
                                    className: "text-xs text-white",
                                    children: d
                                })]
                            }, d))
                        })
                    }), jsxRuntimeExports.jsx("div", {
                        className: "mt-6",
                        children: jsxRuntimeExports.jsx(CashfreePaymentButton, {
                            className: "w-full flex justify-center"
                        })
                    })]
                })]
            })]
        }), jsxRuntimeExports.jsx(SignInPopup, {
            isOpen: s,
            onClose: () => e(!1)
        })]
    })
}
  , faqs = [{
    question: "How does HireBuddy personalize my job applications?",
    answer: "HireBuddy uses AI to analyze your CV and preferences, tailoring each application to match the specific job requirements and company culture. This personalization increases your chances of getting noticed by recruiters."
}, {
    question: "Can I use Hirebuddy for both jobs and internships?",
    answer: "Yes! HireBuddy supports applications for both full-time positions and internships. Our platform adapts the application process based on the type of opportunity you're pursuing."
}, {
    question: "What's included in each pricing plan?",
    answer: "Each plan includes different levels of access to our job board, application limits, and support features. Check our pricing section for detailed information about what's included in Gold, Platinum, and Diamond plans."
}, {
    question: "How does the outbound reach feature work?",
    answer: "Our outbound reach feature automatically sends personalized emails to recruiters and hiring managers on your behalf, increasing your visibility and chances of landing interviews."
}, {
    question: "Is my data secure with HireBuddy?",
    answer: "Yes, we take data security seriously. All your personal information and documents are encrypted and stored securely. We comply with data protection regulations and never share your information without your consent."
}, {
    question: "How quickly can I start applying for jobs?",
    answer: "You can start applying for jobs immediately after creating your account and uploading your CV. Our AI system processes your information within minutes, allowing you to begin sending personalized applications right away."
}]
  , FAQ = () => {
    const [s,e] = reactExports.useState(null);
    return jsxRuntimeExports.jsx("section", {
        className: "pb-12 lg:pb-0 w-full px-4 sm:px-6 md:px-8 lg:px-12 bg-[#FFEDED]",
        children: jsxRuntimeExports.jsx("div", {
            className: "max-w-7xl mx-auto",
            children: jsxRuntimeExports.jsxs("div", {
                className: "grid grid-cols-1 lg:grid-cols-2 gap-12 lg:gap-16",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "space-y-6",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "inline-flex items-center rounded-full bg-[#ffe0e0] px-4 py-1.5",
                        children: jsxRuntimeExports.jsx("span", {
                            className: "text-sm font-medium text-[#b26469]",
                            children: "FAQs"
                        })
                    }), jsxRuntimeExports.jsx("h2", {
                        className: "text-4xl md:text-5xl font-mabry font-semibold text-[#b26469]",
                        children: "All the A's to your Q's"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-xl text-[#b26469]",
                        children: "We got you covered."
                    }), jsxRuntimeExports.jsx("div", {
                        className: "relative w-full aspect-square max-w-[500px]",
                        children: jsxRuntimeExports.jsx("img", {
                            src: "/girl.png",
                            alt: "FAQ illustration",
                            className: "w-full h-full object-contain"
                        })
                    })]
                }), jsxRuntimeExports.jsx("div", {
                    className: "space-y-4",
                    children: faqs.map( (i, o) => jsxRuntimeExports.jsxs("div", {
                        className: "bg-[#ffe0e0] rounded-2xl overflow-hidden shadow-sm border border-[#f0d3d3]",
                        children: [jsxRuntimeExports.jsxs("button", {
                            className: "w-full px-6 py-4 text-left flex items-center justify-between",
                            onClick: () => e(s === o ? null : o),
                            children: [jsxRuntimeExports.jsx("span", {
                                className: "text-lg font-medium text-[#403334]",
                                children: i.question
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-3xl text-[#5f4f50] transform transition-transform duration-200",
                                children: s === o ? "−" : "+"
                            })]
                        }), jsxRuntimeExports.jsx("div", {
                            className: `px-6 transition-all duration-200 ease-in-out ${s === o ? "max-h-48 py-4" : "max-h-0"} overflow-hidden`,
                            children: jsxRuntimeExports.jsx("p", {
                                className: "text-[#4A3D55]",
                                children: i.answer
                            })
                        })]
                    }, o))
                })]
            })
        })
    })
}
  , ShimmerButton = React.forwardRef( ({shimmerColor: s="#ffffff", shimmerSize: e="0.05em", shimmerDuration: i="3s", borderRadius: o="100px", background: a="rgba(0, 0, 0, 1)", className: c, children: d, ...h}, g) => jsxRuntimeExports.jsxs("button", {
    style: {
        "--spread": "90deg",
        "--shimmer-color": s,
        "--radius": o,
        "--speed": i,
        "--cut": e,
        "--bg": a
    },
    className: cn("group relative z-0 flex cursor-pointer items-center justify-center overflow-hidden whitespace-nowrap border border-white/10 px-6 py-3 text-white [background:var(--bg)] [border-radius:var(--radius)] dark:text-black", "transform-gpu transition-transform duration-300 ease-in-out active:translate-y-px", c),
    ref: g,
    ...h,
    children: [jsxRuntimeExports.jsx("div", {
        className: cn("-z-30 blur-[2px]", "absolute inset-0 overflow-visible [container-type:size]"),
        children: jsxRuntimeExports.jsx("div", {
            className: "absolute inset-0 h-[100cqh] animate-shimmer-slide [aspect-ratio:1] [border-radius:0] [mask:none]",
            children: jsxRuntimeExports.jsx("div", {
                className: "absolute -inset-full w-auto rotate-0 animate-spin-around [background:conic-gradient(from_calc(270deg-(var(--spread)*0.5)),transparent_0,var(--shimmer-color)_var(--spread),transparent_var(--spread))] [translate:0_0]"
            })
        })
    }), d, jsxRuntimeExports.jsx("div", {
        className: cn("insert-0 absolute size-full", "rounded-2xl px-4 py-1.5 text-sm font-medium shadow-[inset_0_-8px_10px_#ffffff1f]", "transform-gpu transition-all duration-300 ease-in-out", "group-hover:shadow-[inset_0_-6px_10px_#ffffff3f]", "group-active:shadow-[inset_0_-10px_10px_#ffffff3f]")
    }), jsxRuntimeExports.jsx("div", {
        className: cn("absolute -z-20 [background:var(--bg)] [border-radius:var(--radius)] [inset:var(--cut)]")
    })]
}));
ShimmerButton.displayName = "ShimmerButton";
const Input = reactExports.forwardRef( ({className: s, type: e, ...i}, o) => jsxRuntimeExports.jsx("input", {
    type: e,
    className: cn("flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm", s),
    ref: o,
    ...i
}));
Input.displayName = "Input";
const Newsletter = () => {
    const [s,e] = reactExports.useState(!1)
      , [i,o] = reactExports.useState("")
      , [a,c] = reactExports.useState("")
      , [d,h] = reactExports.useState(!1)
      , g = async () => {
        if (c(""),
        h(!0),
        !i) {
            c("Please enter an email address"),
            h(!1);
            return
        }
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(i)) {
            c("Please enter a valid email address"),
            h(!1);
            return
        }
        try {
            console.log("Newsletter subscription:", i),
            e(!0),
            o("")
        } catch (_) {
            console.error("Error subscribing:", _),
            c("Failed to subscribe. Please try again later.")
        } finally {
            h(!1)
        }
    }
    ;
    return jsxRuntimeExports.jsx("section", {
        className: "-mt-5 w-full min-h-screen py-16 px-4 sm:px-6 md:px-8 lg:px-12 flex items-center bg-[#D35C65]",
        children: jsxRuntimeExports.jsxs("div", {
            className: "max-w-7xl mx-auto w-full grid grid-cols-1 lg:grid-cols-2 gap-12 lg:gap-16 items-center",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "space-y-6 text-center lg:text-left",
                children: [jsxRuntimeExports.jsx("h2", {
                    className: "text-4xl md:text-5xl lg:text-6xl font-mabry font-semibold text-white",
                    children: "Join our newsletter."
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-xl text-white/90 max-w-xl mx-auto lg:mx-0",
                    children: "Get insider tips, career hacks, and the latest job opportunities— delivered right to your inbox."
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-3",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex flex-col sm:flex-row gap-3 w-full sm:w-3/4 bg-white p-1 rounded-xl shadow-[0_4px_30px_rgba(231,90,130,0.15)] mx-auto lg:mx-0",
                        children: [jsxRuntimeExports.jsx(Input, {
                            type: "email",
                            placeholder: "Enter your email",
                            value: i,
                            onChange: b => o(b.target.value),
                            className: "h-14 text-xl text-[#b88c8e] border-transparent text-center placeholder:text-[#B88C8E] placeholder:text-lg flex-1",
                            disabled: d
                        }), jsxRuntimeExports.jsxs(ShimmerButton, {
                            onClick: g,
                            disabled: d,
                            className: "h-14 px-8 text-lg font-normal rounded-xl w-full sm:w-auto",
                            background: "linear-gradient(to top, #b24e55, #E3405F)",
                            children: [d ? "Subscribing..." : "Subscribe Now", jsxRuntimeExports.jsx("svg", {
                                className: "ml-2",
                                width: "24",
                                height: "24",
                                viewBox: "0 0 24 24",
                                fill: "none",
                                xmlns: "http://www.w3.org/2000/svg",
                                children: jsxRuntimeExports.jsx("path", {
                                    d: "M5 12H19M19 12L12 5M19 12L12 19",
                                    stroke: "currentColor",
                                    strokeWidth: "2",
                                    strokeLinecap: "round",
                                    strokeLinejoin: "round"
                                })
                            })]
                        })]
                    }), a && jsxRuntimeExports.jsxs("p", {
                        className: "text-white font-medium text-center lg:text-left sm:w-3/4 mx-auto lg:mx-0",
                        children: [a, " ❌"]
                    }), s && jsxRuntimeExports.jsx("p", {
                        className: "text-white font-medium text-center lg:text-left sm:w-3/4 mx-auto lg:mx-0",
                        children: "Subscribed! ✅"
                    })]
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-sm text-white text-center lg:text-left sm:w-3/4 mx-auto lg:mx-0",
                    children: "We won't spam you. Promise."
                })]
            }), jsxRuntimeExports.jsx("div", {
                className: "relative w-full aspect-square max-w-[500px] mx-auto",
                children: jsxRuntimeExports.jsx("img", {
                    src: "/newsletter.svg",
                    alt: "Newsletter illustration",
                    className: "w-full h-full object-contain"
                })
            })]
        })
    })
}
  , Footer = () => jsxRuntimeExports.jsx("footer", {
    className: "w-full py-12 px-4 sm:px-6 md:px-8 lg:px-12 bg-[#D35C65]",
    children: jsxRuntimeExports.jsxs("div", {
        className: "max-w-7xl mx-auto",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "space-y-4",
                children: [jsxRuntimeExports.jsx(Link, {
                    to: "/community",
                    className: "block text-white hover:text-white/90 transition-colors",
                    children: "Community"
                }), jsxRuntimeExports.jsx(Link, {
                    to: "/blogs",
                    className: "block text-white hover:text-white/90 transition-colors",
                    children: "Blogs"
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "space-y-4",
                children: [jsxRuntimeExports.jsx(Link, {
                    to: "/privacy",
                    className: "block text-white hover:text-white/90 transition-colors",
                    children: "Privacy Policy"
                }), jsxRuntimeExports.jsx(Link, {
                    to: "/terms",
                    className: "block text-white hover:text-white/90 transition-colors",
                    children: "Terms and Conditions"
                }), jsxRuntimeExports.jsx(Link, {
                    to: "/cancellation-refund",
                    className: "block text-white hover:text-white/90 transition-colors",
                    children: "Cancellation and Refund"
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "space-y-4",
                children: [jsxRuntimeExports.jsx(Link, {
                    to: "/shipping-delivery",
                    className: "block text-white hover:text-white/90 transition-colors",
                    children: "Shipping and Delivery"
                }), jsxRuntimeExports.jsx(Link, {
                    to: "/contact",
                    className: "block text-white hover:text-white/90 transition-colors",
                    children: "Contact Us"
                })]
            }), jsxRuntimeExports.jsx("div", {
                className: "lg:col-span-1 flex justify-start lg:justify-end space-x-4 items-start",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "space-y-4",
                    children: [jsxRuntimeExports.jsx("h3", {
                        className: "text-white font-semibold",
                        children: "Follow Us"
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex space-x-4",
                        children: [jsxRuntimeExports.jsx("a", {
                            href: "https://www.linkedin.com/company/hirebuddyy/",
                            target: "_blank",
                            rel: "noopener noreferrer",
                            children: jsxRuntimeExports.jsx("img", {
                                src: "/linkedin.svg",
                                alt: "LinkedIn",
                                className: "w-8 h-8"
                            })
                        }), jsxRuntimeExports.jsx("a", {
                            href: "https://www.instagram.com/hirebuddy_",
                            target: "_blank",
                            rel: "noopener noreferrer",
                            children: jsxRuntimeExports.jsx("img", {
                                src: "/instagram.png",
                                alt: "Instagram",
                                className: "w-8 h-8"
                            })
                        }), jsxRuntimeExports.jsx("a", {
                            href: "https://x.com/hirebuddy_",
                            target: "_blank",
                            rel: "noopener noreferrer",
                            children: jsxRuntimeExports.jsx("img", {
                                src: "/twitter.svg",
                                alt: "X (formerly Twitter)",
                                className: "w-8 h-8"
                            })
                        })]
                    })]
                })
            })]
        }), jsxRuntimeExports.jsxs("div", {
            className: "mt-16 flex flex-col lg:flex-row justify-between items-center",
            children: [jsxRuntimeExports.jsx(Link, {
                to: "/",
                className: "text-white text-2xl font-semibold mb-4 lg:mb-0",
                children: "Hirebuddy"
            }), jsxRuntimeExports.jsxs("p", {
                className: "text-white",
                children: ["© ", new Date().getFullYear(), " Hirebuddy, All rights reserved."]
            })]
        })]
    })
})
  , Index = () => {
    const [s,e] = reactExports.useState(!1)
      , i = useLocation();
    return reactExports.useEffect( () => {
        new URLSearchParams(i.search).get("signin") === "true" && e(!0)
    }
    , [i]),
    jsxRuntimeExports.jsxs("main", {
        className: "min-h-screen",
        children: [jsxRuntimeExports.jsx(Header, {
            openSignIn: () => e(!0)
        }), jsxRuntimeExports.jsx(Hero, {}), jsxRuntimeExports.jsxs("div", {
            className: "relative w-full min-h-[40vh] md:min-h-[70vh] lg:min-h-screen px-4 sm:px-6 md:px-8 lg:px-12 -mt-4 lg:-mt-16",
            children: [jsxRuntimeExports.jsx("div", {
                className: "absolute inset-0 w-full h-full bg-transparent"
            }), jsxRuntimeExports.jsx("div", {
                className: "absolute bottom-0 left-0 w-full h-1/4 bg-transparent"
            }), jsxRuntimeExports.jsx("img", {
                src: "/hero-image.png",
                alt: "Hero illustration",
                className: "absolute inset-0 w-full h-full object-cover object-center"
            })]
        }), jsxRuntimeExports.jsx(Problem, {}), jsxRuntimeExports.jsx(Solution, {}), jsxRuntimeExports.jsx(Meet, {}), jsxRuntimeExports.jsx(Working, {}), jsxRuntimeExports.jsx(Testimonials, {}), jsxRuntimeExports.jsx(Pricing$1, {}), jsxRuntimeExports.jsx(FAQ, {}), jsxRuntimeExports.jsx(Newsletter, {}), jsxRuntimeExports.jsx(Footer, {}), jsxRuntimeExports.jsx(SignInPopup, {
            isOpen: s,
            onClose: () => e(!1)
        })]
    })
}
  , PremiumBadge = ({className: s, variant: e="default", showIcon: i=!0}) => {
    const o = "bg-gradient-to-r from-yellow-400 via-yellow-500 to-yellow-600 text-yellow-900 border-yellow-300 hover:from-yellow-500 hover:via-yellow-600 hover:to-yellow-700 transition-all duration-300 shadow-lg";
    return e === "icon-only" ? jsxRuntimeExports.jsx("div", {
        className: cn("inline-flex items-center justify-center w-8 h-8 rounded-full bg-gradient-to-r from-yellow-400 via-yellow-500 to-yellow-600 shadow-lg", s),
        children: jsxRuntimeExports.jsx(Crown, {
            className: "h-4 w-4 text-yellow-900"
        })
    }) : e === "mini" ? jsxRuntimeExports.jsxs(Badge, {
        className: cn(o, "text-xs px-1 py-0.5 whitespace-nowrap inline-flex items-center", s),
        children: [i && jsxRuntimeExports.jsx(Crown, {
            className: "h-2.5 w-2.5 mr-0.5"
        }), "Premium"]
    }) : e === "compact" ? jsxRuntimeExports.jsxs(Badge, {
        className: cn(o, "text-xs px-1.5 py-0.5 whitespace-nowrap", s),
        children: [i && jsxRuntimeExports.jsx(Crown, {
            className: "h-3 w-3 mr-1"
        }), "Premium"]
    }) : jsxRuntimeExports.jsxs(Badge, {
        className: cn(o, "text-sm px-3 py-1.5 font-semibold whitespace-nowrap", s),
        children: [i && jsxRuntimeExports.jsx(Crown, {
            className: "h-4 w-4 mr-2"
        }), "Premium Member", jsxRuntimeExports.jsx(Sparkles, {
            className: "h-3 w-3 ml-2 animate-pulse"
        })]
    })
}
  , PremiumCard = ({children: s, className: e}) => jsxRuntimeExports.jsxs("div", {
    className: cn("relative bg-gradient-to-br from-yellow-50 via-amber-50 to-yellow-100 border-2 border-yellow-200 rounded-xl shadow-lg overflow-hidden", e),
    children: [jsxRuntimeExports.jsx("div", {
        className: "absolute inset-0 bg-gradient-to-r from-yellow-400/10 via-transparent to-yellow-400/10 animate-pulse"
    }), jsxRuntimeExports.jsx("div", {
        className: "absolute top-2 right-2 z-10",
        children: jsxRuntimeExports.jsx(PremiumBadge, {
            variant: "icon-only"
        })
    }), jsxRuntimeExports.jsx("div", {
        className: "relative z-10",
        children: s
    })]
})
  , PremiumHeader = ({title: s, subtitle: e, className: i}) => jsxRuntimeExports.jsx("div", {
    className: cn("bg-gradient-to-r from-yellow-400 via-yellow-500 to-yellow-600 text-yellow-900 px-6 py-4 border-b border-yellow-300", i),
    children: jsxRuntimeExports.jsxs("div", {
        className: "flex items-center justify-between",
        children: [jsxRuntimeExports.jsxs("div", {
            children: [jsxRuntimeExports.jsxs("h2", {
                className: "text-lg font-bold flex items-center gap-2",
                children: [jsxRuntimeExports.jsx(Crown, {
                    className: "h-5 w-5"
                }), s]
            }), e && jsxRuntimeExports.jsx("p", {
                className: "text-sm text-yellow-800 mt-1",
                children: e
            })]
        }), jsxRuntimeExports.jsxs("div", {
            className: "flex items-center gap-1",
            children: [jsxRuntimeExports.jsx(Star, {
                className: "h-4 w-4 text-yellow-700 fill-current"
            }), jsxRuntimeExports.jsx(Star, {
                className: "h-4 w-4 text-yellow-700 fill-current"
            }), jsxRuntimeExports.jsx(Star, {
                className: "h-4 w-4 text-yellow-700 fill-current"
            })]
        })]
    })
})
  , premiumService = {
    async isPremiumUser(s) {
        if (!s)
            return !1;
        try {
            const {data: e, error: i} = await supabase.from("paid_users").select("id").eq("email", s).single();
            return i ? (console.error("Error checking premium status:", i),
            !1) : !!e
        } catch (e) {
            return console.error("Error checking premium status:", e),
            !1
        }
    },
    async getPremiumUserData(s) {
        if (!s)
            return null;
        try {
            const {data: e, error: i} = await supabase.from("paid_users").select("*").eq("email", s).single();
            return i ? (console.error("Error fetching premium user data:", i),
            null) : e
        } catch (e) {
            return console.error("Error fetching premium user data:", e),
            null
        }
    },
    async getAllPremiumUsers() {
        try {
            const {data: s, error: e} = await supabase.from("paid_users").select("*").order("created_at", {
                ascending: !1
            });
            return e ? (console.error("Error fetching all premium users:", e),
            []) : s || []
        } catch (s) {
            return console.error("Error fetching all premium users:", s),
            []
        }
    },
    async addPremiumUser(s) {
        try {
            const {data: e, error: i} = await supabase.from("paid_users").insert([s]).select().single();
            return i ? (console.error("Error adding premium user:", i),
            null) : e
        } catch (e) {
            return console.error("Error adding premium user:", e),
            null
        }
    },
    async updatePremiumUser(s, e) {
        try {
            const {data: i, error: o} = await supabase.from("paid_users").update(e).eq("id", s).select().single();
            return o ? (console.error("Error updating premium user:", o),
            null) : i
        } catch (i) {
            return console.error("Error updating premium user:", i),
            null
        }
    },
    async removePremiumUser(s) {
        try {
            const {error: e} = await supabase.from("paid_users").delete().eq("id", s);
            return e ? (console.error("Error removing premium user:", e),
            !1) : !0
        } catch (e) {
            return console.error("Error removing premium user:", e),
            !1
        }
    }
}
  , usePremiumUser = () => {
    const {user: s} = useAuth()
      , [e,i] = reactExports.useState(!1)
      , [o,a] = reactExports.useState(null)
      , [c,d] = reactExports.useState(!0)
      , [h,g] = reactExports.useState(null)
      , b = async () => {
        if (!(s != null && s.email)) {
            i(!1),
            a(null),
            d(!1);
            return
        }
        try {
            d(!0),
            g(null);
            const $ = await premiumService.isPremiumUser(s.email);
            if (i($),
            $) {
                const _e = await premiumService.getPremiumUserData(s.email);
                a(_e)
            } else
                a(null)
        } catch ($) {
            console.error("Error checking premium status:", $),
            g("Failed to check premium status"),
            i(!1),
            a(null)
        } finally {
            d(!1)
        }
    }
      , _ = async () => {
        await b()
    }
    ;
    return reactExports.useEffect( () => {
        b()
    }
    , [s == null ? void 0 : s.email]),
    {
        isPremium: e,
        premiumData: o,
        loading: c,
        error: h,
        refetch: _
    }
}
  , LEFT = "Left"
  , RIGHT = "Right"
  , UP = "Up"
  , DOWN = "Down"
  , defaultProps = {
    delta: 10,
    preventScrollOnSwipe: !1,
    rotationAngle: 0,
    trackMouse: !1,
    trackTouch: !0,
    swipeDuration: 1 / 0,
    touchEventOptions: {
        passive: !0
    }
}
  , initialState = {
    first: !0,
    initial: [0, 0],
    start: 0,
    swiping: !1,
    xy: [0, 0]
}
  , mouseMove = "mousemove"
  , mouseUp = "mouseup"
  , touchEnd = "touchend"
  , touchMove = "touchmove"
  , touchStart = "touchstart";
function getDirection(s, e, i, o) {
    return s > e ? i > 0 ? RIGHT : LEFT : o > 0 ? DOWN : UP
}
function rotateXYByAngle(s, e) {
    if (e === 0)
        return s;
    const i = Math.PI / 180 * e
      , o = s[0] * Math.cos(i) + s[1] * Math.sin(i)
      , a = s[1] * Math.cos(i) - s[0] * Math.sin(i);
    return [o, a]
}
function getHandlers(s, e) {
    const i = _ => {
        const $ = "touches"in _;
        $ && _.touches.length > 1 || s( (_e, tt) => {
            tt.trackMouse && !$ && (document.addEventListener(mouseMove, o),
            document.addEventListener(mouseUp, d));
            const {clientX: rt, clientY: et} = $ ? _.touches[0] : _
              , it = rotateXYByAngle([rt, et], tt.rotationAngle);
            return tt.onTouchStartOrOnMouseDown && tt.onTouchStartOrOnMouseDown({
                event: _
            }),
            Object.assign(Object.assign(Object.assign({}, _e), initialState), {
                initial: it.slice(),
                xy: it,
                start: _.timeStamp || 0
            })
        }
        )
    }
      , o = _ => {
        s( ($, _e) => {
            const tt = "touches"in _;
            if (tt && _.touches.length > 1)
                return $;
            if (_.timeStamp - $.start > _e.swipeDuration)
                return $.swiping ? Object.assign(Object.assign({}, $), {
                    swiping: !1
                }) : $;
            const {clientX: rt, clientY: et} = tt ? _.touches[0] : _
              , [it,st] = rotateXYByAngle([rt, et], _e.rotationAngle)
              , nt = it - $.xy[0]
              , lt = st - $.xy[1]
              , dt = Math.abs(nt)
              , ot = Math.abs(lt)
              , at = (_.timeStamp || 0) - $.start
              , ht = Math.sqrt(dt * dt + ot * ot) / (at || 1)
              , pt = [nt / (at || 1), lt / (at || 1)]
              , gt = getDirection(dt, ot, nt, lt)
              , wt = typeof _e.delta == "number" ? _e.delta : _e.delta[gt.toLowerCase()] || defaultProps.delta;
            if (dt < wt && ot < wt && !$.swiping)
                return $;
            const yt = {
                absX: dt,
                absY: ot,
                deltaX: nt,
                deltaY: lt,
                dir: gt,
                event: _,
                first: $.first,
                initial: $.initial,
                velocity: ht,
                vxvy: pt
            };
            yt.first && _e.onSwipeStart && _e.onSwipeStart(yt),
            _e.onSwiping && _e.onSwiping(yt);
            let Rt = !1;
            return (_e.onSwiping || _e.onSwiped || _e[`onSwiped${gt}`]) && (Rt = !0),
            Rt && _e.preventScrollOnSwipe && _e.trackTouch && _.cancelable && _.preventDefault(),
            Object.assign(Object.assign({}, $), {
                first: !1,
                eventData: yt,
                swiping: !0
            })
        }
        )
    }
      , a = _ => {
        s( ($, _e) => {
            let tt;
            if ($.swiping && $.eventData) {
                if (_.timeStamp - $.start < _e.swipeDuration) {
                    tt = Object.assign(Object.assign({}, $.eventData), {
                        event: _
                    }),
                    _e.onSwiped && _e.onSwiped(tt);
                    const rt = _e[`onSwiped${tt.dir}`];
                    rt && rt(tt)
                }
            } else
                _e.onTap && _e.onTap({
                    event: _
                });
            return _e.onTouchEndOrOnMouseUp && _e.onTouchEndOrOnMouseUp({
                event: _
            }),
            Object.assign(Object.assign(Object.assign({}, $), initialState), {
                eventData: tt
            })
        }
        )
    }
      , c = () => {
        document.removeEventListener(mouseMove, o),
        document.removeEventListener(mouseUp, d)
    }
      , d = _ => {
        c(),
        a(_)
    }
      , h = (_, $) => {
        let _e = () => {}
        ;
        if (_ && _.addEventListener) {
            const tt = Object.assign(Object.assign({}, defaultProps.touchEventOptions), $.touchEventOptions)
              , rt = [[touchStart, i, tt], [touchMove, o, Object.assign(Object.assign({}, tt), $.preventScrollOnSwipe ? {
                passive: !1
            } : {})], [touchEnd, a, tt]];
            rt.forEach( ([et,it,st]) => _.addEventListener(et, it, st)),
            _e = () => rt.forEach( ([et,it]) => _.removeEventListener(et, it))
        }
        return _e
    }
      , b = {
        ref: _ => {
            _ !== null && s( ($, _e) => {
                if ($.el === _)
                    return $;
                const tt = {};
                return $.el && $.el !== _ && $.cleanUpTouch && ($.cleanUpTouch(),
                tt.cleanUpTouch = void 0),
                _e.trackTouch && _ && (tt.cleanUpTouch = h(_, _e)),
                Object.assign(Object.assign(Object.assign({}, $), {
                    el: _
                }), tt)
            }
            )
        }
    };
    return e.trackMouse && (b.onMouseDown = i),
    [b, h]
}
function updateTransientState(s, e, i, o) {
    return !e.trackTouch || !s.el ? (s.cleanUpTouch && s.cleanUpTouch(),
    Object.assign(Object.assign({}, s), {
        cleanUpTouch: void 0
    })) : s.cleanUpTouch ? e.preventScrollOnSwipe !== i.preventScrollOnSwipe || e.touchEventOptions.passive !== i.touchEventOptions.passive ? (s.cleanUpTouch(),
    Object.assign(Object.assign({}, s), {
        cleanUpTouch: o(s.el, e)
    })) : s : Object.assign(Object.assign({}, s), {
        cleanUpTouch: o(s.el, e)
    })
}
function useSwipeable(s) {
    const {trackMouse: e} = s
      , i = reactExports.useRef(Object.assign({}, initialState))
      , o = reactExports.useRef(Object.assign({}, defaultProps))
      , a = reactExports.useRef(Object.assign({}, o.current));
    a.current = Object.assign({}, o.current),
    o.current = Object.assign(Object.assign({}, defaultProps), s);
    let c;
    for (c in defaultProps)
        o.current[c] === void 0 && (o.current[c] = defaultProps[c]);
    const [d,h] = reactExports.useMemo( () => getHandlers(g => i.current = g(i.current, o.current), {
        trackMouse: e
    }), [e]);
    return i.current = updateTransientState(i.current, o.current, a.current, h),
    d
}
const mobileNavItems = [{
    title: "Dashboard",
    url: "/dashboard",
    icon: LayoutDashboard,
    description: "Overview & stats"
}, {
    title: "Find Jobs",
    url: "/jobs",
    icon: Search,
    description: "Search opportunities"
}, {
    title: "Resume Builder",
    url: "/resume-builder",
    icon: FileText,
    description: "Create & edit resume"
}, {
    title: "Email Outreach",
    url: "/email-outreach",
    icon: Mail,
    description: "Connect with recruiters"
}, {
    title: "Profile",
    url: "/profile",
    icon: User,
    description: "Manage your profile"
}]
  , MobileNavLink = ({item: s, onClick: e}) => {
    const o = useLocation().pathname === s.url;
    return jsxRuntimeExports.jsxs(NavLink, {
        to: s.url,
        onClick: e,
        className: cn("mobile-nav-item flex items-center gap-3 p-3 rounded-lg transition-all duration-200 relative group mobile-touch-target", "active:scale-95 touch-manipulation", o ? "bg-gradient-to-r from-[#b24e55] to-[#d35c65] text-white shadow-lg" : "text-foreground hover:bg-accent/80 active:bg-accent"),
        children: [jsxRuntimeExports.jsx("div", {
            className: cn("flex items-center justify-center w-8 h-8 rounded-lg transition-all duration-200", o ? "bg-white/20" : "bg-accent/50 group-hover:bg-accent/70"),
            children: jsxRuntimeExports.jsx(s.icon, {
                className: cn("h-4 w-4 transition-all duration-200", o ? "text-white" : "text-foreground")
            })
        }), jsxRuntimeExports.jsxs("div", {
            className: "flex-1 min-w-0",
            children: [jsxRuntimeExports.jsx("div", {
                className: cn("font-semibold mobile-body leading-tight", o ? "text-white" : "text-foreground"),
                children: s.title
            }), s.description && jsxRuntimeExports.jsx("div", {
                className: cn("mobile-body-xs mt-0.5 leading-tight", o ? "text-white/80" : "text-muted-foreground"),
                children: s.description
            })]
        }), jsxRuntimeExports.jsx(ChevronRight, {
            className: cn("h-4 w-4 transition-all duration-200", o ? "text-white/80" : "text-muted-foreground")
        }), s.badge && jsxRuntimeExports.jsx("div", {
            className: "absolute -top-0.5 -right-0.5 bg-red-500 text-white mobile-body-xs w-4 h-4 rounded-full flex items-center justify-center font-bold shadow-md",
            children: s.badge
        })]
    })
}
  , MobileSidebar = ({isOpen: s, onClose: e}) => {
    var tt, rt, et;
    const {user: i, signOut: o} = useAuth()
      , {isPremium: a} = usePremiumUser()
      , [c,d] = reactExports.useState(!1)
      , h = ((tt = i == null ? void 0 : i.user_metadata) == null ? void 0 : tt.full_name) || ((rt = i == null ? void 0 : i.email) == null ? void 0 : rt.split("@")[0]) || "User"
      , g = h.split(" ").map(it => it[0]).join("").toUpperCase()
      , b = useSwipeable({
        onSwipedLeft: () => {
            s && _()
        }
        ,
        trackMouse: !1,
        trackTouch: !0,
        preventScrollOnSwipe: !0,
        delta: 50
    })
      , _ = () => {
        d(!0),
        setTimeout( () => {
            e(),
            d(!1)
        }
        , 300)
    }
      , $ = () => {
        _()
    }
      , _e = async () => {
        try {
            await (o == null ? void 0 : o()),
            _()
        } catch (it) {
            console.error("Sign out error:", it)
        }
    }
    ;
    return reactExports.useEffect( () => (s ? (document.body.style.overflow = "hidden",
    document.body.style.position = "fixed",
    document.body.style.top = "0",
    document.body.style.left = "0",
    document.body.style.right = "0") : (document.body.style.overflow = "unset",
    document.body.style.position = "unset",
    document.body.style.top = "unset",
    document.body.style.left = "unset",
    document.body.style.right = "unset"),
    () => {
        document.body.style.overflow = "unset",
        document.body.style.position = "unset",
        document.body.style.top = "unset",
        document.body.style.left = "unset",
        document.body.style.right = "unset"
    }
    ), [s]),
    jsxRuntimeExports.jsx(AnimatePresence, {
        children: s && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [jsxRuntimeExports.jsx(motion.div, {
                initial: {
                    opacity: 0
                },
                animate: {
                    opacity: 1
                },
                exit: {
                    opacity: 0
                },
                transition: {
                    duration: .2
                },
                className: "fixed inset-0 bg-black/60 backdrop-blur-sm z-40 md:hidden",
                onClick: _
            }), jsxRuntimeExports.jsxs(motion.div, {
                ...b,
                initial: {
                    x: "-100%"
                },
                animate: {
                    x: c ? "-100%" : 0
                },
                exit: {
                    x: "-100%"
                },
                transition: {
                    type: "spring",
                    damping: 25,
                    stiffness: 200,
                    duration: .3
                },
                className: "fixed left-0 top-0 h-full w-[85vw] max-w-sm bg-background border-r border-border z-50 md:hidden flex flex-col shadow-2xl overflow-hidden mobile-safe-area",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "mobile-app-header p-4 border-b border-border/20",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-between mb-3",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "h-8 w-8 rounded-lg bg-white/20 flex items-center justify-center text-white font-bold mobile-body shadow-lg",
                                children: "H"
                            }), jsxRuntimeExports.jsxs("div", {
                                children: [jsxRuntimeExports.jsx("h2", {
                                    className: "font-bold mobile-heading-sm text-white",
                                    children: "Hirebuddy"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "mobile-body-xs text-white/80",
                                    children: "Your Career Assistant"
                                })]
                            })]
                        }), jsxRuntimeExports.jsx(Button, {
                            variant: "ghost",
                            size: "icon",
                            onClick: _,
                            className: "mobile-touch-target-sm h-8 w-8 rounded-lg hover:bg-white/20 active:scale-95 transition-all duration-200 text-white",
                            children: jsxRuntimeExports.jsx(X, {
                                className: "h-4 w-4"
                            })
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-2 p-2 rounded-lg bg-white/10 backdrop-blur-sm border border-white/20",
                        children: [jsxRuntimeExports.jsxs(Avatar, {
                            className: "h-8 w-8 ring-1 ring-white/30",
                            children: [jsxRuntimeExports.jsx(AvatarImage, {
                                src: (et = i == null ? void 0 : i.user_metadata) == null ? void 0 : et.avatar_url
                            }), jsxRuntimeExports.jsx(AvatarFallback, {
                                className: "font-semibold mobile-body-xs bg-white/20 text-white",
                                children: g
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex-1 min-w-0",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx("p", {
                                    className: "font-semibold mobile-body text-white truncate",
                                    children: h
                                }), a && jsxRuntimeExports.jsx(PremiumBadge, {
                                    variant: "compact"
                                })]
                            }), jsxRuntimeExports.jsx("p", {
                                className: "mobile-body-xs text-white/80 truncate",
                                children: i == null ? void 0 : i.email
                            })]
                        })]
                    })]
                }), jsxRuntimeExports.jsx("div", {
                    className: "flex-1 overflow-y-auto py-4 mobile-scroll-container",
                    children: jsxRuntimeExports.jsx("nav", {
                        className: "px-4 space-y-2",
                        children: mobileNavItems.map(it => jsxRuntimeExports.jsx(MobileNavLink, {
                            item: it,
                            onClick: $
                        }, it.url))
                    })
                }), jsxRuntimeExports.jsxs("div", {
                    className: "p-3 border-t border-border bg-card/30 space-y-3",
                    children: [!a && jsxRuntimeExports.jsx(CashfreePaymentButton, {
                        className: "w-full",
                        variant: "sidebar"
                    }), jsxRuntimeExports.jsxs(Button, {
                        variant: "outline",
                        onClick: _e,
                        className: "mobile-button w-full h-9 rounded-lg font-semibold mobile-body hover:bg-red-500 hover:text-white hover:border-red-500 active:scale-95 transition-all duration-200 mobile-touch-target",
                        children: [jsxRuntimeExports.jsx(LogOut, {
                            className: "h-4 w-4 mr-2"
                        }), "Sign Out"]
                    })]
                })]
            })]
        })
    })
}
  , MobileHeader = ({onMenuClick: s}) => {
    var a, c, d;
    const {user: e} = useAuth()
      , o = (((a = e == null ? void 0 : e.user_metadata) == null ? void 0 : a.full_name) || ((c = e == null ? void 0 : e.email) == null ? void 0 : c.split("@")[0]) || "User").split(" ").map(h => h[0]).join("").toUpperCase();
    return jsxRuntimeExports.jsxs("header", {
        className: "md:hidden mobile-nav-sticky flex items-center justify-between h-12 px-3 mobile-safe-area shadow-sm",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "flex items-center gap-2",
            children: [jsxRuntimeExports.jsx(Button, {
                variant: "ghost",
                size: "icon",
                onClick: s,
                className: "mobile-touch-target-sm h-8 w-8 rounded-lg hover:bg-accent/80 active:scale-95 transition-all duration-200 touch-manipulation",
                children: jsxRuntimeExports.jsx(Menu$1, {
                    className: "h-4 w-4"
                })
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex items-center gap-1.5",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "h-6 w-6 rounded-md bg-gradient-to-br from-[#b24e55] to-[#d35c65] flex items-center justify-center text-white font-bold shadow-md text-xs",
                    children: "H"
                }), jsxRuntimeExports.jsx("h1", {
                    className: "font-bold mobile-body text-foreground hidden sm:block",
                    children: "Hirebuddy"
                })]
            })]
        }), jsxRuntimeExports.jsx("div", {
            className: "flex items-center gap-1 pr-1",
            children: jsxRuntimeExports.jsxs(Avatar, {
                className: "h-7 w-7 ring-1 ring-primary/20 mobile-touch-target-sm",
                children: [jsxRuntimeExports.jsx(AvatarImage, {
                    src: (d = e == null ? void 0 : e.user_metadata) == null ? void 0 : d.avatar_url
                }), jsxRuntimeExports.jsx(AvatarFallback, {
                    className: "font-semibold mobile-body-xs bg-gradient-to-br from-[#b24e55] to-[#d35c65] text-white",
                    children: o
                })]
            })
        })]
    })
}
  , SidebarContext = reactExports.createContext(void 0)
  , useSidebar = () => {
    const s = reactExports.useContext(SidebarContext);
    if (!s)
        throw new Error("useSidebar must be used within a SidebarProvider");
    return s
}
  , SidebarProvider = ({children: s}) => {
    const [e,i] = reactExports.useState(!1)
      , [o,a] = reactExports.useState(!0)
      , [c,d] = reactExports.useState(!1)
      , [h,g] = reactExports.useState(!1);
    return reactExports.useEffect( () => {
        const b = () => {
            d(window.innerWidth < 768),
            window.innerWidth >= 768 && i(!1)
        }
        ;
        return b(),
        window.addEventListener("resize", b),
        () => window.removeEventListener("resize", b)
    }
    , []),
    jsxRuntimeExports.jsx(SidebarContext.Provider, {
        value: {
            isOpen: e,
            setIsOpen: i,
            isCollapsed: o,
            setIsCollapsed: a,
            isMobile: c,
            isHovered: h,
            setIsHovered: g
        },
        children: s
    })
}
  , mainItems = [{
    title: "Dashboard",
    url: "/dashboard",
    icon: LayoutDashboard
}, {
    title: "Find Jobs",
    url: "/jobs",
    icon: Search
}, {
    title: "Resume Builder",
    url: "/resume-builder",
    icon: FileText
}, {
    title: "Email Outreach",
    url: "/email-outreach",
    icon: Mail
}, {
    title: "Profile",
    url: "/profile",
    icon: User
}]
  , SidebarLink = ({item: s, isCollapsed: e}) => {
    const o = useLocation().pathname === s.url;
    return jsxRuntimeExports.jsxs(NavLink, {
        to: s.url,
        className: cn("flex items-center gap-3 px-3 py-2.5 rounded-lg transition-all duration-200 group relative", o ? "bg-primary text-primary-foreground shadow-sm" : "text-muted-foreground hover:text-foreground hover:bg-accent"),
        children: [jsxRuntimeExports.jsx(s.icon, {
            className: "h-5 w-5 flex-shrink-0"
        }), jsxRuntimeExports.jsx(AnimatePresence, {
            children: !e && jsxRuntimeExports.jsx(motion.span, {
                initial: {
                    opacity: 0,
                    width: 0
                },
                animate: {
                    opacity: 1,
                    width: "auto"
                },
                exit: {
                    opacity: 0,
                    width: 0
                },
                transition: {
                    duration: .2,
                    ease: "easeInOut"
                },
                className: "font-medium whitespace-nowrap overflow-hidden",
                children: s.title
            })
        }), s.badge && !e && jsxRuntimeExports.jsx(motion.span, {
            initial: {
                opacity: 0,
                scale: 0
            },
            animate: {
                opacity: 1,
                scale: 1
            },
            exit: {
                opacity: 0,
                scale: 0
            },
            transition: {
                duration: .2,
                ease: "easeInOut"
            },
            className: "ml-auto bg-primary text-primary-foreground text-xs px-1.5 py-0.5 rounded-full",
            children: s.badge
        }), e && s.badge && jsxRuntimeExports.jsx("div", {
            className: "absolute -top-1 -right-1 bg-primary text-primary-foreground text-xs w-5 h-5 rounded-full flex items-center justify-center",
            children: s.badge
        })]
    })
}
  , DesktopSidebar = () => {
    var $, _e, tt;
    const {isCollapsed: s, setIsCollapsed: e, isHovered: i, setIsHovered: o} = useSidebar()
      , {user: a, signOut: c} = useAuth()
      , {isPremium: d} = usePremiumUser()
      , h = useNavigate()
      , g = (($ = a == null ? void 0 : a.user_metadata) == null ? void 0 : $.full_name) || ((_e = a == null ? void 0 : a.email) == null ? void 0 : _e.split("@")[0]) || "User"
      , b = g.split(" ").map(rt => rt[0]).join("").toUpperCase()
      , _ = !s || i;
    return jsxRuntimeExports.jsxs(motion.div, {
        animate: {
            width: _ ? 280 : 80
        },
        transition: {
            duration: .25,
            ease: [.4, 0, .2, 1]
        },
        className: "hidden md:flex flex-col bg-card border-r border-border h-screen sticky top-0",
        onMouseEnter: () => o(!0),
        onMouseLeave: () => o(!1),
        children: [jsxRuntimeExports.jsx("div", {
            className: "p-4 border-b border-border",
            children: jsxRuntimeExports.jsxs("div", {
                className: "flex items-center justify-between",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-3 cursor-pointer hover:opacity-80 transition-opacity duration-200",
                    onClick: () => h("/"),
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "h-8 w-8 rounded-lg bg-primary flex items-center justify-center text-primary-foreground font-bold",
                        children: "H"
                    }), jsxRuntimeExports.jsx(AnimatePresence, {
                        children: _ && jsxRuntimeExports.jsxs(motion.div, {
                            initial: {
                                opacity: 0,
                                width: 0
                            },
                            animate: {
                                opacity: 1,
                                width: "auto"
                            },
                            exit: {
                                opacity: 0,
                                width: 0
                            },
                            transition: {
                                duration: .2
                            },
                            className: "overflow-hidden",
                            children: [jsxRuntimeExports.jsx("h2", {
                                className: "font-semibold text-lg whitespace-nowrap",
                                children: "Hirebuddy"
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-xs text-muted-foreground whitespace-nowrap",
                                children: "Your Career Assistant"
                            })]
                        })
                    })]
                }), jsxRuntimeExports.jsx(AnimatePresence, {
                    children: _ && jsxRuntimeExports.jsx(motion.div, {
                        initial: {
                            opacity: 0,
                            scale: 0
                        },
                        animate: {
                            opacity: 1,
                            scale: 1
                        },
                        exit: {
                            opacity: 0,
                            scale: 0
                        },
                        transition: {
                            duration: .2
                        },
                        children: jsxRuntimeExports.jsx(Button, {
                            variant: "ghost",
                            size: "icon",
                            onClick: () => e(!s),
                            className: "h-8 w-8",
                            children: jsxRuntimeExports.jsx(ChevronLeft, {
                                className: "h-4 w-4"
                            })
                        })
                    })
                })]
            })
        }), jsxRuntimeExports.jsx("div", {
            className: "flex-1 p-4 space-y-1 overflow-y-auto",
            children: mainItems.map(rt => jsxRuntimeExports.jsx(SidebarLink, {
                item: rt,
                isCollapsed: !_
            }, rt.url))
        }), jsxRuntimeExports.jsxs("div", {
            className: "p-4 border-t border-border",
            children: [jsxRuntimeExports.jsx(AnimatePresence, {
                children: !d && _ && jsxRuntimeExports.jsx(motion.div, {
                    initial: {
                        opacity: 0,
                        height: 0
                    },
                    animate: {
                        opacity: 1,
                        height: "auto"
                    },
                    exit: {
                        opacity: 0,
                        height: 0
                    },
                    transition: {
                        duration: .2
                    },
                    className: "overflow-hidden mb-3",
                    children: jsxRuntimeExports.jsx(CashfreePaymentButton, {
                        className: "w-full",
                        variant: "sidebar"
                    })
                })
            }), jsxRuntimeExports.jsxs("div", {
                className: "relative",
                children: [jsxRuntimeExports.jsx(AnimatePresence, {
                    children: !d && !_ && jsxRuntimeExports.jsx(motion.div, {
                        initial: {
                            opacity: 0,
                            scale: .8,
                            y: 5
                        },
                        animate: {
                            opacity: 1,
                            scale: 1,
                            y: 0
                        },
                        exit: {
                            opacity: 0,
                            scale: .8,
                            y: 5
                        },
                        transition: {
                            duration: .3,
                            ease: "easeOut"
                        },
                        className: "absolute -top-12 left-1 flex justify-center z-10 w-8",
                        children: jsxRuntimeExports.jsx(Button, {
                            variant: "ghost",
                            size: "icon",
                            onClick: () => window.open("https://payments.cashfree.com/forms/hirebuddy_premium_subscription", "_parent"),
                            className: "h-6 w-6 bg-gradient-to-r from-yellow-500 to-amber-500 hover:from-yellow-600 hover:to-amber-600 text-white shadow-md hover:shadow-lg hover:scale-110 border border-yellow-400/50 hover:border-yellow-300 rounded-md transition-all duration-200",
                            title: "Upgrade to Premium",
                            children: jsxRuntimeExports.jsx(Crown, {
                                className: "h-3 w-3"
                            })
                        })
                    })
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-3",
                    children: [jsxRuntimeExports.jsxs(Avatar, {
                        className: "h-8 w-8",
                        children: [jsxRuntimeExports.jsx(AvatarImage, {
                            src: (tt = a == null ? void 0 : a.user_metadata) == null ? void 0 : tt.avatar_url
                        }), jsxRuntimeExports.jsx(AvatarFallback, {
                            children: b
                        })]
                    }), jsxRuntimeExports.jsx(AnimatePresence, {
                        children: _ && jsxRuntimeExports.jsxs(motion.div, {
                            initial: {
                                opacity: 0,
                                width: 0
                            },
                            animate: {
                                opacity: 1,
                                width: "auto"
                            },
                            exit: {
                                opacity: 0,
                                width: 0
                            },
                            transition: {
                                duration: .2
                            },
                            className: "flex-1 min-w-0",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx("p", {
                                    className: "text-sm font-medium truncate",
                                    children: g
                                }), d && jsxRuntimeExports.jsx(PremiumBadge, {
                                    variant: "compact"
                                })]
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-xs text-muted-foreground truncate",
                                children: a == null ? void 0 : a.email
                            })]
                        })
                    }), jsxRuntimeExports.jsx(Button, {
                        variant: "ghost",
                        size: "icon",
                        onClick: () => c == null ? void 0 : c(),
                        className: "h-8 w-8 text-muted-foreground hover:text-foreground",
                        children: jsxRuntimeExports.jsx(LogOut, {
                            className: "h-4 w-4"
                        })
                    })]
                })]
            })]
        })]
    })
}
  , NewSidebar = () => {
    const [s,e] = reactExports.useState(!1);
    return jsxRuntimeExports.jsxs(SidebarProvider, {
        children: [jsxRuntimeExports.jsx(DesktopSidebar, {}), jsxRuntimeExports.jsx(MobileHeader, {
            onMenuClick: () => e(!0)
        }), jsxRuntimeExports.jsx(MobileSidebar, {
            isOpen: s,
            onClose: () => e(!1)
        })]
    })
}
  , sizeClasses = {
    sm: "w-8 h-8",
    md: "w-12 h-12",
    lg: "w-16 h-16",
    xl: "w-20 h-20"
}
  , textSizeClasses = {
    sm: "text-xs",
    md: "text-sm",
    lg: "text-lg",
    xl: "text-xl"
}
  , CompanyLogo = ({companyName: s, logoUrl: e, size: i="md", className: o, showTooltip: a=!0, isLoading: c=!1}) => {
    const [d,h] = reactExports.useState(!1)
      , g = et => {
        const it = _e(et)
          , st = b(et)
          , nt = `
      <svg width="60" height="60" xmlns="http://www.w3.org/2000/svg">
        <rect width="60" height="60" rx="8" fill="${st.background}"/>
        <text x="30" y="40" font-family="system-ui, -apple-system, sans-serif" 
              font-size="24" font-weight="600" text-anchor="middle" 
              fill="${st.text}">${it}</text>
      </svg>
    `;
        return `data:image/svg+xml;base64,${btoa(nt)}`
    }
      , b = et => {
        const it = [{
            background: "#3B82F6",
            text: "#FFFFFF"
        }, {
            background: "#10B981",
            text: "#FFFFFF"
        }, {
            background: "#8B5CF6",
            text: "#FFFFFF"
        }, {
            background: "#F59E0B",
            text: "#FFFFFF"
        }, {
            background: "#EF4444",
            text: "#FFFFFF"
        }, {
            background: "#06B6D4",
            text: "#FFFFFF"
        }, {
            background: "#84CC16",
            text: "#FFFFFF"
        }, {
            background: "#EC4899",
            text: "#FFFFFF"
        }, {
            background: "#6366F1",
            text: "#FFFFFF"
        }, {
            background: "#14B8A6",
            text: "#FFFFFF"
        }];
        let st = 0;
        for (let nt = 0; nt < et.length; nt++) {
            const lt = et.charCodeAt(nt);
            st = (st << 5) - st + lt,
            st = st & st
        }
        return it[Math.abs(st) % it.length]
    }
      , _ = e || g(s)
      , $ = () => {
        console.log(`Image failed to load for ${s}, falling back to initials`),
        h(!0)
    }
      , _e = et => {
        if (!et)
            return "C";
        const st = et.replace(/[^\w\s]/g, "").replace(/\b(inc|llc|ltd|corp|corporation|company|co)\b/gi, "").trim().split(/\s+/).filter(nt => nt.length > 0);
        return st.length === 0 ? et.charAt(0).toUpperCase() : st.length === 1 ? st[0].substring(0, 2).toUpperCase() : (st[0].charAt(0) + st[1].charAt(0)).toUpperCase()
    }
      , tt = _ == null ? void 0 : _.startsWith("data:image/svg+xml");
    if (c)
        return jsxRuntimeExports.jsx("div", {
            className: cn(sizeClasses[i], "rounded-full bg-gray-200 animate-pulse flex items-center justify-center", o),
            children: jsxRuntimeExports.jsx("div", {
                className: "w-3 h-3 bg-blue-500 rounded-full animate-ping"
            })
        });
    const rt = jsxRuntimeExports.jsxs(Avatar, {
        className: cn(sizeClasses[i], "border border-gray-200", o),
        children: [!tt && _ && !d && jsxRuntimeExports.jsx(AvatarImage, {
            src: _,
            alt: `${s} logo`,
            onError: $,
            className: "object-contain p-1"
        }), jsxRuntimeExports.jsx(AvatarFallback, {
            className: cn("bg-gradient-to-br from-blue-500 to-purple-600 text-white font-semibold", textSizeClasses[i]),
            children: tt && _ ? jsxRuntimeExports.jsx("img", {
                src: _,
                alt: `${s} initials`,
                className: "w-full h-full object-contain"
            }) : _e(s)
        })]
    });
    return a ? jsxRuntimeExports.jsx("div", {
        title: s,
        className: "cursor-help",
        children: rt
    }) : rt
}
;
class CompanyLogoService {
    static async getCompanyLogo(e) {
        if (!e)
            return console.log("❌ No company name provided, using default initials"),
            this.generateInitialsLogo(e || "Unknown");
        const i = e.toLowerCase().trim();
        if (this.isCacheValid(i))
            return console.log(`🎯 Using cached logo for ${e}`),
            this.logoCache.get(i);
        console.log(`🔍 Fetching logo for ${e}...`);
        try {
            let o = await this.tryGetLogoFromSources(e);
            return o || (console.log(`❌ No external logo found for ${e}, generating initials`),
            o = this.generateInitialsLogo(e)),
            this.logoCache.set(i, o),
            this.cacheTimestamps.set(i, Date.now()),
            console.log(`✅ Final logo result for ${e}:`, o),
            o
        } catch (o) {
            return console.warn(`❌ Error fetching company logo for ${e}:`, o),
            this.generateInitialsLogo(e)
        }
    }
    static async tryGetLogoFromSources(e) {
        const i = this.cleanCompanyName(e);
        console.log(`Trying to fetch logo for: ${e} (cleaned: ${i})`);
        const o = this.guessDomainFromCompany(i);
        if (o)
            try {
                const a = await this.tryFavicon(o);
                if (a)
                    return console.log(`Found favicon for ${e}: ${a}`),
                    {
                        url: a,
                        isInitials: !1,
                        source: "getlogo"
                    }
            } catch (a) {
                console.warn("Favicon failed:", a)
            }
        if (o)
            try {
                const a = await this.tryLogoDev(o);
                if (a)
                    return console.log(`Found logo.dev logo for ${e}: ${a}`),
                    {
                        url: a,
                        isInitials: !1,
                        source: "logo.dev"
                    }
            } catch (a) {
                console.warn("Logo.dev API failed:", a)
            }
        if (o)
            try {
                const a = await this.tryGetLogo(i);
                if (a)
                    return console.log(`Found GetLogo result for ${e}: ${a}`),
                    {
                        url: a,
                        isInitials: !1,
                        source: "getlogo"
                    }
            } catch (a) {
                console.warn("GetLogo API failed:", a)
            }
        try {
            const a = await this.tryLogotypes(i);
            if (a)
                return console.log(`Found Logotypes.dev result for ${e}: ${a}`),
                {
                    url: a,
                    isInitials: !1,
                    source: "logotypes"
                }
        } catch (a) {
            console.warn("Logotypes.dev API failed:", a)
        }
        return console.log(`No logo found for ${e}, will use initials`),
        null
    }
    static async tryFavicon(e) {
        const i = [`https://www.google.com/s2/favicons?domain=${e}&sz=128`, `https://logo.clearbit.com/${e}`, `https://www.google.com/s2/favicons?domain=${e}&sz=64`, `https://${e}/favicon.ico`, `https://favicons.githubusercontent.com/${e}`];
        for (const o of i)
            try {
                const a = new AbortController
                  , c = setTimeout( () => a.abort(), 3e3)
                  , d = await fetch(o, {
                    method: "GET",
                    signal: a.signal,
                    headers: {
                        "User-Agent": "Mozilla/5.0 (compatible; LogoFetcher/1.0)"
                    }
                });
                if (clearTimeout(c),
                d.ok && d.status === 200) {
                    const h = d.headers.get("content-type")
                      , g = d.headers.get("content-length");
                    if (h && (h.startsWith("image/") || h.includes("icon")) && (!g || parseInt(g) > 500))
                        return console.log(`✅ Found favicon for ${e}: ${o}`),
                        o
                }
            } catch (a) {
                console.warn(`❌ Favicon failed for ${o}:`, a);
                continue
            }
        return null
    }
    static async tryGetLogo(e) {
        const i = this.guessDomainFromCompany(e);
        if (!i)
            return console.log(`❌ No domain found for ${e}`),
            null;
        try {
            console.log(`🔍 Trying GetLogo API for ${e} (${i})`);
            const o = new AbortController
              , a = setTimeout( () => o.abort(), 5e3)
              , c = await fetch(`https://getlogo.pushowl.com/api/${i}`, {
                method: "GET",
                headers: {
                    Accept: "application/json",
                    "User-Agent": "Mozilla/5.0 (compatible; LogoFetcher/1.0)"
                },
                signal: o.signal
            });
            if (clearTimeout(a),
            c.ok) {
                const d = await c.json();
                if (console.log(`GetLogo API response for ${i}:`, d),
                d.url && this.isValidImageUrl(d.url))
                    return new Promise(h => {
                        const g = new Image;
                        g.onload = () => {
                            console.log(`✅ GetLogo image loaded for ${e}: ${d.url}`),
                            h(d.url)
                        }
                        ,
                        g.onerror = () => {
                            console.warn(`❌ GetLogo image failed to load for ${e}: ${d.url}`),
                            h(null)
                        }
                        ,
                        g.src = d.url,
                        setTimeout( () => {
                            console.warn(`⏰ GetLogo image timeout for ${e}: ${d.url}`),
                            h(null)
                        }
                        , 3e3)
                    }
                    );
                console.warn(`❌ Invalid URL from GetLogo for ${e}: ${d.url}`)
            } else
                console.warn(`❌ GetLogo API failed for ${i}: ${c.status} ${c.statusText}`)
        } catch (o) {
            console.warn(`❌ GetLogo API error for ${e}:`, o)
        }
        return null
    }
    static async tryLogoDev(e) {
        const i = `https://img.logo.dev/${e}`;
        try {
            const o = new AbortController
              , a = setTimeout( () => o.abort(), 3e3)
              , c = await fetch(i, {
                method: "HEAD",
                signal: o.signal
            });
            if (clearTimeout(a),
            c.ok && c.status === 200) {
                const d = c.headers.get("content-type");
                if (d && d.startsWith("image/"))
                    return i
            }
        } catch (o) {
            console.warn("Logo.dev API error:", o)
        }
        return null
    }
    static async tryLogotypes(e) {
        const i = this.slugifyCompanyName(e);
        if (!i)
            return null;
        const o = `https://www.logotypes.dev/${i}`;
        try {
            const a = new AbortController
              , c = setTimeout( () => a.abort(), 3e3)
              , d = await fetch(o, {
                method: "HEAD",
                signal: a.signal
            });
            if (clearTimeout(c),
            d.ok && d.status === 200) {
                const h = d.headers.get("content-type");
                if (h && (h.startsWith("image/") || h.includes("svg")))
                    return o
            }
        } catch (a) {
            console.warn("Logotypes.dev API error:", a)
        }
        return null
    }
    static generateInitialsLogo(e) {
        const i = this.getCompanyInitials(e)
          , o = this.getConsistentColors(e)
          , a = `
      <svg width="60" height="60" xmlns="http://www.w3.org/2000/svg">
        <rect width="60" height="60" rx="8" fill="${o.background}"/>
        <text x="30" y="40" font-family="system-ui, -apple-system, sans-serif" 
              font-size="24" font-weight="600" text-anchor="middle" 
              fill="${o.text}">${i}</text>
      </svg>
    `;
        return {
            url: `data:image/svg+xml,${encodeURIComponent(a)}`,
            isInitials: !0,
            source: "initials"
        }
    }
    static getCompanyInitials(e) {
        if (!e)
            return "C";
        const o = e.replace(/[^\w\s]/g, "").replace(/\b(inc|llc|ltd|corp|corporation|company|co)\b/gi, "").trim().split(/\s+/).filter(a => a.length > 0);
        return o.length === 0 ? e.charAt(0).toUpperCase() : o.length === 1 ? o[0].substring(0, 2).toUpperCase() : (o[0].charAt(0) + o[1].charAt(0)).toUpperCase()
    }
    static getConsistentColors(e) {
        const i = [{
            background: "#3B82F6",
            text: "#FFFFFF"
        }, {
            background: "#10B981",
            text: "#FFFFFF"
        }, {
            background: "#8B5CF6",
            text: "#FFFFFF"
        }, {
            background: "#F59E0B",
            text: "#FFFFFF"
        }, {
            background: "#EF4444",
            text: "#FFFFFF"
        }, {
            background: "#06B6D4",
            text: "#FFFFFF"
        }, {
            background: "#84CC16",
            text: "#FFFFFF"
        }, {
            background: "#EC4899",
            text: "#FFFFFF"
        }, {
            background: "#6366F1",
            text: "#FFFFFF"
        }, {
            background: "#14B8A6",
            text: "#FFFFFF"
        }];
        let o = 0;
        for (let a = 0; a < e.length; a++) {
            const c = e.charCodeAt(a);
            o = (o << 5) - o + c,
            o = o & o
        }
        return i[Math.abs(o) % i.length]
    }
    static cleanCompanyName(e) {
        return e.toLowerCase().replace(/[^\w\s]/g, "").replace(/\b(inc|llc|ltd|corp|corporation|company|co)\b/g, "").trim()
    }
    static guessDomainFromCompany(e) {
        const i = this.cleanCompanyName(e);
        if (!i)
            return null;
        const o = {
            google: "google.com",
            microsoft: "microsoft.com",
            apple: "apple.com",
            amazon: "amazon.com",
            facebook: "facebook.com",
            meta: "meta.com",
            netflix: "netflix.com",
            spotify: "spotify.com",
            uber: "uber.com",
            airbnb: "airbnb.com",
            tesla: "tesla.com",
            twitter: "twitter.com",
            linkedin: "linkedin.com",
            instagram: "instagram.com",
            youtube: "youtube.com",
            github: "github.com",
            slack: "slack.com",
            zoom: "zoom.us",
            adobe: "adobe.com",
            salesforce: "salesforce.com",
            oracle: "oracle.com",
            ibm: "ibm.com",
            intel: "intel.com",
            nvidia: "nvidia.com",
            paypal: "paypal.com",
            stripe: "stripe.com",
            shopify: "shopify.com",
            dropbox: "dropbox.com",
            reddit: "reddit.com",
            pinterest: "pinterest.com",
            snapchat: "snapchat.com",
            tiktok: "tiktok.com",
            discord: "discord.com",
            whatsapp: "whatsapp.com",
            telegram: "telegram.org",
            autodesk: "autodesk.com",
            "goldman sachs": "goldmansachs.com",
            goldman: "goldmansachs.com",
            walmart: "walmart.com",
            jpmorgan: "jpmorgan.com",
            "jp morgan": "jpmorgan.com",
            "morgan stanley": "morganstanley.com",
            "bank of america": "bankofamerica.com",
            "wells fargo": "wellsfargo.com",
            citigroup: "citigroup.com",
            citi: "citigroup.com",
            "american express": "americanexpress.com",
            amex: "americanexpress.com",
            visa: "visa.com",
            mastercard: "mastercard.com",
            blackrock: "blackrock.com",
            vanguard: "vanguard.com",
            fidelity: "fidelity.com",
            "charles schwab": "schwab.com",
            schwab: "schwab.com",
            "berkshire hathaway": "berkshirehathaway.com",
            "exxon mobil": "exxonmobil.com",
            exxon: "exxonmobil.com",
            unitedhealth: "unitedhealthgroup.com",
            mckesson: "mckesson.com",
            "cvs health": "cvshealth.com",
            cvs: "cvs.com",
            "at&t": "att.com",
            att: "att.com",
            "general motors": "gm.com",
            gm: "gm.com",
            ford: "ford.com",
            verizon: "verizon.com",
            chevron: "chevron.com",
            kroger: "kroger.com",
            "general electric": "ge.com",
            ge: "ge.com",
            walgreens: "walgreens.com",
            target: "target.com",
            "home depot": "homedepot.com",
            boeing: "boeing.com",
            pfizer: "pfizer.com",
            "johnson & johnson": "jnj.com",
            jnj: "jnj.com",
            "procter & gamble": "pg.com",
            pg: "pg.com",
            "coca cola": "coca-cola.com",
            "coca-cola": "coca-cola.com",
            pepsico: "pepsico.com",
            pepsi: "pepsi.com",
            nike: "nike.com",
            mcdonalds: "mcdonalds.com",
            starbucks: "starbucks.com",
            disney: "disney.com",
            comcast: "comcast.com",
            lowes: "lowes.com",
            fedex: "fedex.com",
            ups: "ups.com",
            caterpillar: "caterpillar.com",
            "3m": "3m.com",
            honeywell: "honeywell.com",
            "lockheed martin": "lockheedmartin.com",
            raytheon: "raytheon.com",
            abbott: "abbott.com",
            merck: "merck.com",
            "bristol myers squibb": "bms.com",
            "eli lilly": "lilly.com",
            lilly: "lilly.com",
            abbvie: "abbvie.com",
            gilead: "gilead.com",
            amgen: "amgen.com",
            biogen: "biogen.com",
            regeneron: "regeneron.com",
            moderna: "modernatx.com",
            biontech: "biontech.de",
            mckinsey: "mckinsey.com",
            bcg: "bcg.com",
            "boston consulting group": "bcg.com",
            bain: "bain.com",
            deloitte: "deloitte.com",
            pwc: "pwc.com",
            pricewaterhousecoopers: "pwc.com",
            "ernst & young": "ey.com",
            ey: "ey.com",
            kpmg: "kpmg.com",
            accenture: "accenture.com",
            blackstone: "blackstone.com",
            brookfield: "brookfield.com",
            "simon property": "simon.com",
            prologis: "prologis.com",
            "american tower": "americantower.com",
            "crown castle": "crowncastle.com",
            "realty income": "realtyincome.com",
            "digital realty": "digitalrealty.com",
            equinix: "equinix.com",
            "nextera energy": "nexteraenergy.com",
            "duke energy": "duke-energy.com",
            "southern company": "southerncompany.com",
            "dominion energy": "dominionenergy.com",
            "american electric power": "aep.com",
            aep: "aep.com",
            exelon: "exeloncorp.com",
            "xcel energy": "xcelenergy.com",
            "consolidated edison": "conedison.com",
            coned: "conedison.com",
            "sempra energy": "sempra.com",
            "kinder morgan": "kindermorgan.com",
            "enterprise products": "enterpriseproducts.com",
            enbridge: "enbridge.com",
            "tc energy": "tcenergy.com",
            conocophillips: "conocophillips.com",
            "marathon petroleum": "marathonpetroleum.com",
            valero: "valero.com",
            "phillips 66": "phillips66.com",
            tmobile: "t-mobile.com",
            "t-mobile": "t-mobile.com",
            sprint: "sprint.com",
            "charter communications": "charter.com",
            charter: "charter.com",
            "dish network": "dish.com",
            dish: "dish.com",
            "frontier communications": "frontier.com",
            frontier: "frontier.com",
            centurylink: "lumen.com",
            lumen: "lumen.com",
            "warner bros": "warnerbros.com",
            paramount: "paramount.com",
            universal: "universalstudios.com",
            sony: "sony.com",
            fox: "fox.com",
            cbs: "cbs.com",
            nbc: "nbc.com",
            abc: "abc.com",
            espn: "espn.com",
            cnn: "cnn.com",
            discovery: "discovery.com",
            hbo: "hbo.com",
            showtime: "showtime.com",
            hulu: "hulu.com",
            "paramount+": "paramountplus.com",
            peacock: "peacocktv.com",
            max: "max.com",
            costco: "costco.com",
            "sams club": "samsclub.com",
            bjs: "bjs.com",
            macys: "macys.com",
            nordstrom: "nordstrom.com",
            kohls: "kohls.com",
            jcpenney: "jcpenney.com",
            "tj maxx": "tjmaxx.com",
            marshalls: "marshalls.com",
            ross: "rossstores.com",
            "bed bath beyond": "bedbathandbeyond.com",
            "best buy": "bestbuy.com",
            staples: "staples.com",
            "office depot": "officedepot.com",
            petco: "petco.com",
            petsmart: "petsmart.com",
            gamestop: "gamestop.com",
            "barnes noble": "barnesandnoble.com",
            "whole foods": "wholefoodsmarket.com",
            "trader joes": "traderjoes.com",
            wegmans: "wegmans.com",
            publix: "publix.com",
            safeway: "safeway.com",
            albertsons: "albertsons.com",
            "rite aid": "riteaid.com",
            "american airlines": "aa.com",
            delta: "delta.com",
            "united airlines": "united.com",
            united: "united.com",
            southwest: "southwest.com",
            jetblue: "jetblue.com",
            "alaska airlines": "alaskaair.com",
            "spirit airlines": "spirit.com",
            "frontier airlines": "flyfrontier.com",
            "hawaiian airlines": "hawaiianairlines.com",
            allegiant: "allegiantair.com",
            "sun country": "suncountry.com",
            marriott: "marriott.com",
            hilton: "hilton.com",
            hyatt: "hyatt.com",
            intercontinental: "ihg.com",
            ihg: "ihg.com",
            "choice hotels": "choicehotels.com",
            wyndham: "wyndham.com",
            "best western": "bestwestern.com",
            "la quinta": "lq.com",
            "extended stay": "extendedstayamerica.com",
            "red roof": "redroof.com",
            "motel 6": "motel6.com",
            "super 8": "super8.com",
            "days inn": "daysinn.com",
            "holiday inn": "holidayinn.com",
            "hampton inn": "hamptoninn.com",
            courtyard: "marriott.com",
            "residence inn": "marriott.com",
            "springhill suites": "marriott.com",
            "fairfield inn": "marriott.com",
            doubletree: "hilton.com",
            "embassy suites": "hilton.com",
            "homewood suites": "hilton.com",
            hampton: "hilton.com",
            "garden inn": "hilton.com",
            "home2 suites": "hilton.com",
            tru: "hilton.com",
            canopy: "hilton.com",
            tapestry: "hilton.com",
            curio: "hilton.com",
            "waldorf astoria": "hilton.com",
            conrad: "hilton.com",
            lxr: "hilton.com",
            motto: "hilton.com",
            signia: "hilton.com",
            tempo: "hilton.com",
            spark: "hilton.com",
            techcorp: "techcorp.com",
            startupxyz: "startupxyz.com",
            innovate: "innovate.com",
            datatech: "datatech.com",
            cloudware: "cloudware.com",
            fintech: "fintech.com",
            healthtech: "healthtech.com",
            edtech: "edtech.com",
            gamedev: "gamedev.com",
            webdev: "webdev.com",
            devops: "devops.com",
            cybersec: "cybersec.com",
            biotech: "biotech.com",
            greentech: "greentech.com",
            autotech: "autotech.com",
            robotics: "robotics.com",
            blockchain: "blockchain.com",
            crypto: "crypto.com",
            defi: "defi.com",
            nft: "nft.com",
            metaverse: "metaverse.com",
            vr: "vr.com",
            ar: "ar.com",
            iot: "iot.com",
            ai: "ai.com",
            ml: "ml.com",
            saas: "saas.com",
            paas: "paas.com",
            iaas: "iaas.com"
        };
        if (o[i])
            return o[i];
        const c = i.split(/\s+/)[0];
        return c && c.length > 2 ? `${c}.com` : null
    }
    static slugifyCompanyName(e) {
        return this.cleanCompanyName(e).replace(/\s+/g, "-").toLowerCase()
    }
    static isValidImageUrl(e) {
        try {
            const i = new URL(e);
            return i.protocol === "http:" || i.protocol === "https:"
        } catch {
            return !1
        }
    }
    static isCacheValid(e) {
        if (!this.logoCache.has(e) || !this.cacheTimestamps.has(e))
            return !1;
        const i = this.cacheTimestamps.get(e);
        return Date.now() - i < this.CACHE_DURATION
    }
    static clearExpiredCache() {
        const e = Date.now();
        for (const [i,o] of this.cacheTimestamps.entries())
            e - o >= this.CACHE_DURATION && (this.logoCache.delete(i),
            this.cacheTimestamps.delete(i))
    }
    static clearAllCache() {
        this.logoCache.clear(),
        this.cacheTimestamps.clear(),
        console.log("🧹 All logo cache cleared")
    }
    static async preloadLogos(e) {
        const i = e.map(o => this.getCompanyLogo(o).catch(a => (console.warn(`Failed to preload logo for ${o}:`, a),
        this.generateInitialsLogo(o))));
        await Promise.allSettled(i)
    }
}
tr(CompanyLogoService, "logoCache", new Map),
tr(CompanyLogoService, "CACHE_DURATION", 24 * 60 * 60 * 1e3),
tr(CompanyLogoService, "cacheTimestamps", new Map);
const useProgressiveLogos = s => {
    const [e,i] = reactExports.useState({})
      , [o,a] = reactExports.useState(new Set);
    return reactExports.useEffect( () => {
        if (!s || s.length === 0)
            return;
        const g = setTimeout(async () => {
            i({}),
            a(new Set);
            const b = new Map;
            s.forEach(_ => {
                const $ = _.company.toLowerCase().trim();
                b.has($) || b.set($, []),
                b.get($).push(_)
            }
            ),
            console.log(`🔄 Starting progressive logo loading for ${b.size} unique companies`);
            for (const [_,$] of b) {
                a(_e => {
                    const tt = new Set(_e);
                    return $.forEach(rt => tt.add(rt.id)),
                    tt
                }
                );
                try {
                    const _e = await CompanyLogoService.getCompanyLogo(_);
                    if (!_e.isInitials && _e.url) {
                        const tt = {};
                        $.forEach(rt => {
                            tt[rt.id] = _e.url
                        }
                        ),
                        i(rt => ({
                            ...rt,
                            ...tt
                        })),
                        console.log(`✅ Updated logo for ${_}: ${_e.source}`)
                    } else
                        console.log(`ℹ️ Using fallback logo for ${_}`)
                } catch (_e) {
                    console.warn(`❌ Failed to load logo for ${_}:`, _e)
                } finally {
                    a(_e => {
                        const tt = new Set(_e);
                        return $.forEach(rt => tt.delete(rt.id)),
                        tt
                    }
                    )
                }
                await new Promise(_e => setTimeout(_e, 100))
            }
            console.log("🎉 Progressive logo loading completed")
        }
        , 100);
        return () => {
            clearTimeout(g)
        }
    }
    , [s]),
    {
        getJobLogo: h => e[h.id] || h.logo || "",
        isLogoLoading: h => o.has(h),
        logoUpdates: e,
        loadingCount: o.size
    }
}
;
function BlurFade({children: s, className: e, variant: i, duration: o=.4, delay: a=0, offset: c=6, direction: d="down", inView: h=!1, blur: g="6px", ...b}) {
    const _ = reactExports.useRef(null)
      , $ = useInView(_, {
        once: !0
    })
      , _e = !h || $
      , tt = {
        hidden: {
            [d === "left" || d === "right" ? "x" : "y"]: d === "right" || d === "down" ? -c : c,
            opacity: 0,
            filter: `blur(${g})`
        },
        visible: {
            [d === "left" || d === "right" ? "x" : "y"]: 0,
            opacity: 1,
            filter: "blur(0px)"
        }
    }
      , rt = i || tt;
    return jsxRuntimeExports.jsx(AnimatePresence, {
        children: jsxRuntimeExports.jsx(motion.div, {
            ref: _,
            initial: "hidden",
            animate: _e ? "visible" : "hidden",
            exit: "hidden",
            variants: rt,
            transition: {
                delay: .04 + a,
                duration: o,
                ease: "easeOut"
            },
            className: e,
            ...b,
            children: s
        })
    })
}
class ApiClient {
    constructor() {
        tr(this, "baseURL");
        tr(this, "token", null);
        this.baseURL = getConfig().api.baseUrl,
        this.token = localStorage.getItem("auth_token")
    }
    setToken(e) {
        this.token = e,
        localStorage.setItem("auth_token", e)
    }
    clearToken() {
        this.token = null,
        localStorage.removeItem("auth_token")
    }
    getHeaders() {
        const e = {
            "Content-Type": "application/json"
        };
        return this.token && (e.Authorization = `Bearer ${this.token}`),
        e
    }
    async request(e, i={}) {
        const o = `${this.baseURL}${e}`
          , a = {
            ...i,
            headers: {
                ...this.getHeaders(),
                ...i.headers
            }
        };
        try {
            const c = await fetch(o, a)
              , d = await c.json();
            if (!c.ok)
                throw new Error(d.error || `HTTP error! status: ${c.status}`);
            return d
        } catch (c) {
            throw console.error("API request failed:", c),
            c
        }
    }
    async get(e, i) {
        const o = i ? new URLSearchParams(i) : null
          , a = o ? `${e}?${o}` : e;
        return this.request(a, {
            method: "GET"
        })
    }
    async post(e, i) {
        return this.request(e, {
            method: "POST",
            body: i ? JSON.stringify(i) : void 0
        })
    }
    async put(e, i) {
        return this.request(e, {
            method: "PUT",
            body: i ? JSON.stringify(i) : void 0
        })
    }
    async delete(e) {
        return this.request(e, {
            method: "DELETE"
        })
    }
    async login(e, i) {
        const o = await this.post("/auth/login", {
            email: e,
            password: i
        });
        return o.success && o.data && typeof o.data == "object" && "token"in o.data && this.setToken(o.data.token),
        o
    }
    async signup(e, i, o) {
        const a = await this.post("/auth/signup", {
            email: e,
            password: i,
            fullName: o
        });
        return a.success && a.data && typeof a.data == "object" && "token"in a.data && this.setToken(a.data.token),
        a
    }
    async refreshToken(e) {
        const i = await this.post("/auth/refresh", {
            refreshToken: e
        });
        return i.success && i.data && typeof i.data == "object" && "token"in i.data && this.setToken(i.data.token),
        i
    }
    async logout() {
        const e = await this.post("/auth/logout");
        return this.clearToken(),
        e
    }
    async getProfile() {
        return this.get("/profile")
    }
    async updateProfile(e) {
        return this.put("/profile", e)
    }
    async getJobs(e) {
        return this.get("/jobs", e)
    }
    async getJob(e) {
        return this.get(`/jobs/${e}`)
    }
    async getJobById(e) {
        return this.get(`/jobs/${e}`)
    }
    async getRemoteJobs(e) {
        return this.get("/jobs/remote", e)
    }
    async getExclusiveJobs(e) {
        return this.get("/jobs/exclusive", e)
    }
    async createJob(e) {
        return this.post("/jobs", e)
    }
    async updateJob(e) {
        return this.put("/jobs", e)
    }
    async deleteJob(e) {
        return this.delete(`/jobs/${e}`)
    }
    async getJobsStats() {
        return this.get("/jobs/stats")
    }
    async searchCompanies(e, i=10) {
        return this.get("/jobs/companies", {
            query: e,
            limit: i.toString()
        })
    }
    async searchLocations(e, i=10) {
        return this.get("/jobs/locations", {
            query: e,
            limit: i.toString()
        })
    }
    async createApplication(e) {
        return this.post("/applications", e)
    }
    async getUserApplications() {
        return this.get("/applications")
    }
    async updateApplicationStatus(e, i) {
        return this.put(`/applications/${e}/status`, i)
    }
    async getContacts(e) {
        return this.get("/contacts", e)
    }
    async createContact(e) {
        return this.post("/contacts", e)
    }
    async updateContact(e, i) {
        return this.put(`/contacts/${e}`, i)
    }
    async deleteContact(e) {
        return this.delete(`/contacts/${e}`)
    }
    async getDashboardStats() {
        return this.get("/dashboard/stats")
    }
    async getRecentActivity() {
        return this.get("/dashboard/activity")
    }
    async checkPremiumStatus() {
        return this.get("/premium/status")
    }
    async getPremiumData() {
        return this.get("/premium/data")
    }
    async getEmailUsage() {
        return this.get("/email/usage")
    }
    async incrementEmailCount(e) {
        return this.post("/email/increment", {
            count: e
        })
    }
}
const apiClient = new ApiClient;
class DashboardService {
    static async checkAuthStatus() {
        try {
            const e = await apiClient.getProfile();
            return e.success && e.data ? {
                authenticated: !0,
                user: e.data
            } : {
                authenticated: !1,
                user: null
            }
        } catch (e) {
            return console.error("Error checking auth status:", e),
            {
                authenticated: !1,
                user: null
            }
        }
    }
    static async getDashboardStats() {
        try {
            const e = await apiClient.getDashboardStats();
            return e.success && e.data ? e.data : {
                total_applications: 0,
                pending_applications: 0,
                interview_requests: 0,
                total_jobs_viewed: 0,
                profile_completion_percentage: 0,
                recent_activity_count: 0
            }
        } catch (e) {
            return console.error("Error fetching dashboard stats:", e),
            {
                total_applications: 5,
                pending_applications: 3,
                interview_requests: 1,
                total_jobs_viewed: 25,
                profile_completion_percentage: 75,
                recent_activity_count: 8
            }
        }
    }
    static async getRecentActivity() {
        try {
            const e = await apiClient.getRecentActivity();
            return e.success && e.data && Array.isArray(e.data) ? e.data : []
        } catch (e) {
            return console.error("Error fetching recent activity:", e),
            [{
                id: "1",
                type: "application",
                title: "Applied to Senior Developer",
                description: "Applied to Senior Developer position at TechCorp",
                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString()
            }, {
                id: "2",
                type: "profile_update",
                title: "Profile Updated",
                description: "Updated skills and experience section",
                timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString()
            }, {
                id: "3",
                type: "job_view",
                title: "Viewed Frontend Engineer",
                description: "Viewed Frontend Engineer position at StartupX",
                timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1e3).toISOString()
            }]
        }
    }
    static async getJobRecommendations(e=5) {
        var i;
        try {
            const o = await apiClient.getJobs({
                limit: e.toString()
            });
            return o.success && ((i = o.data) != null && i.jobs) && Array.isArray(o.data.jobs) ? o.data.jobs.slice(0, e).map( (a, c) => ({
                id: a.job_id,
                title: a.job_title || "Untitled Position",
                company: a.company_name || "Unknown Company",
                location: a.job_location || "Location not specified",
                match_score: 60 + Math.floor(Math.random() * 35),
                skills: this.extractSkillsFromJob(a),
                is_urgent: Math.random() > .8,
                posted: this.formatTimeAgo(a.created_at),
                logo: this.generateFallbackLogo(a.company_name || "Unknown Company"),
                isRemote: a.remote_flag || !1,
                description: a.job_description || "No description available"
            })) : this.getSampleJobRecommendations(e)
        } catch (o) {
            return console.error("Error fetching job recommendations from API:", o),
            this.getSampleJobRecommendations(e)
        }
    }
    static async getUserProfile() {
        try {
            const e = await apiClient.getProfile();
            return e.success && e.data && typeof e.data == "object" && "id"in e.data ? e.data : null
        } catch (e) {
            return console.error("Error fetching user profile:", e),
            null
        }
    }
    static async getEmailOutreachStats() {
        try {
            const e = await apiClient.getEmailUsage();
            if (e.success && e.data && typeof e.data == "object") {
                const i = e.data;
                return {
                    total_emails_sent: i.total_sent || 0,
                    emails_this_month: i.this_month || 0,
                    remaining_emails: i.remaining || 0,
                    email_limit: i.limit || 0,
                    success_rate: i.success_rate || 0,
                    response_rate: i.response_rate || 0
                }
            }
            return {
                total_emails_sent: 0,
                emails_this_month: 0,
                remaining_emails: 0,
                email_limit: 0,
                success_rate: 0,
                response_rate: 0
            }
        } catch (e) {
            return console.error("Error fetching email stats:", e),
            {
                total_emails_sent: 15,
                emails_this_month: 8,
                remaining_emails: 42,
                email_limit: 50,
                success_rate: 85.5,
                response_rate: 12.3
            }
        }
    }
    static extractSkillsFromJob(e) {
        const i = (e.job_description || "").toLowerCase()
          , o = (e.job_title || "").toLowerCase()
          , a = [];
        return ["javascript", "typescript", "react", "vue", "angular", "node.js", "python", "java", "c#", "php", "ruby", "go", "rust", "swift", "kotlin", "aws", "azure", "gcp", "docker", "kubernetes", "terraform", "sql", "mongodb", "postgresql", "redis", "elasticsearch", "git", "jenkins", "ci/cd", "agile", "scrum"].forEach(d => {
            (i.includes(d) || o.includes(d)) && a.push(d.charAt(0).toUpperCase() + d.slice(1))
        }
        ),
        a.slice(0, 4)
    }
    static formatTimeAgo(e) {
        try {
            const i = new Date(e)
              , a = Math.abs(new Date().getTime() - i.getTime())
              , c = Math.ceil(a / (1e3 * 60 * 60 * 24));
            return c === 1 ? "1 day ago" : c <= 7 ? `${c} days ago` : c <= 30 ? `${Math.ceil(c / 7)} weeks ago` : `${Math.ceil(c / 30)} months ago`
        } catch {
            return "Recently"
        }
    }
    static generateFallbackLogo(e) {
        const i = e.charAt(0).toUpperCase()
          , o = ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEAA7", "#DDA0DD", "#98D8C8", "#F7DC6F"]
          , a = e.length % o.length
          , c = o[a];
        return `data:image/svg+xml,${encodeURIComponent(`
      <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
        <rect width="40" height="40" fill="${c}" rx="8"/>
        <text x="20" y="25" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="16" font-weight="bold">${i}</text>
      </svg>
    `)}`
    }
    static getSampleJobRecommendations(e) {
        return [{
            id: "1",
            title: "Senior Frontend Developer",
            company: "TechCorp",
            location: "San Francisco, CA",
            match_score: 92,
            skills: ["React", "TypeScript", "Node.js", "AWS"],
            is_urgent: !0,
            posted: "2 days ago",
            logo: this.generateFallbackLogo("TechCorp"),
            isRemote: !0,
            description: "Join our team building next-generation web applications"
        }, {
            id: "2",
            title: "Full Stack Engineer",
            company: "StartupX",
            location: "New York, NY",
            match_score: 87,
            skills: ["JavaScript", "Python", "Docker", "PostgreSQL"],
            is_urgent: !1,
            posted: "1 week ago",
            logo: this.generateFallbackLogo("StartupX"),
            isRemote: !1,
            description: "Build scalable web applications from the ground up"
        }, {
            id: "3",
            title: "Software Engineer",
            company: "BigTech",
            location: "Seattle, WA",
            match_score: 84,
            skills: ["Java", "Spring", "Microservices", "Kubernetes"],
            is_urgent: !1,
            posted: "3 days ago",
            logo: this.generateFallbackLogo("BigTech"),
            isRemote: !0,
            description: "Work on large-scale distributed systems"
        }].slice(0, e)
    }
}
class JobApplicationService {
    static async createApplication(e, i, o, a, c=[]) {
        try {
            const {data: d, error: h} = await supabase.from("hirebuddy_job_applications").select("id").eq("user_id", e).eq("job_id", o.job_id).single();
            if (d)
                throw new Error("You have already applied to this job");
            const g = {
                user_id: e,
                user_email: i,
                job_id: o.job_id,
                job_title: o.job_title,
                company_name: o.company_name,
                job_type: o.job_type || "exclusive",
                full_name: a.full_name,
                title: a.title,
                company: a.company,
                location: a.location,
                phone: a.phone,
                bio: a.bio,
                website: a.website,
                github: a.github,
                linkedin: a.linkedin,
                college: a.college,
                skills: a.skills,
                experience_years: a.experience_years,
                available_for_work: a.available_for_work,
                resume_url: a.resume_url,
                resume_filename: a.resume_filename,
                status: "pending"
            }
              , {data: b, error: _} = await supabase.from("hirebuddy_job_applications").insert(g).select().single();
            if (_)
                throw _;
            return b
        } catch (d) {
            throw console.error("Error creating job application:", d),
            d
        }
    }
    static async createRegularApplication(e, i, o, a) {
        try {
            const {data: c} = await supabase.from("hirebuddy_job_applications").select("id").eq("user_id", e).eq("job_id", o.id).single();
            if (c)
                throw new Error("You have already applied to this job");
            const d = {
                user_id: e,
                user_email: i,
                job_id: o.id,
                job_title: o.title,
                company_name: o.company,
                job_type: "regular",
                full_name: (a == null ? void 0 : a.full_name) || null,
                title: (a == null ? void 0 : a.title) || null,
                company: (a == null ? void 0 : a.company) || null,
                location: (a == null ? void 0 : a.location) || o.location || null,
                phone: (a == null ? void 0 : a.phone) || null,
                bio: (a == null ? void 0 : a.bio) || null,
                website: (a == null ? void 0 : a.website) || null,
                github: (a == null ? void 0 : a.github) || null,
                linkedin: (a == null ? void 0 : a.linkedin) || null,
                college: (a == null ? void 0 : a.college) || null,
                skills: (a == null ? void 0 : a.skills) || null,
                experience_years: (a == null ? void 0 : a.experience_years) || 0,
                available_for_work: (a == null ? void 0 : a.available_for_work) || !1,
                resume_url: (a == null ? void 0 : a.resume_url) || null,
                resume_filename: (a == null ? void 0 : a.resume_filename) || null,
                status: "pending"
            }
              , {data: h, error: g} = await supabase.from("hirebuddy_job_applications").insert(d).select().single();
            if (g)
                throw g;
            return h
        } catch (c) {
            throw console.error("Error creating regular job application:", c),
            c
        }
    }
    static async getUserApplications(e) {
        try {
            const {data: i, error: o} = await supabase.from("hirebuddy_job_applications").select("*").eq("user_id", e).order("created_at", {
                ascending: !1
            });
            if (o)
                throw o;
            return i || []
        } catch (i) {
            throw console.error("Error fetching user applications:", i),
            i
        }
    }
    static async hasUserApplied(e, i) {
        try {
            const {data: o, error: a} = await supabase.from("hirebuddy_job_applications").select("id").eq("user_id", e).eq("job_id", i).single();
            return !!o
        } catch {
            return !1
        }
    }
    static async getAllApplications(e={}) {
        try {
            const {data: i, error: o} = await supabase.rpc("get_all_job_applications_admin", {
                status_filter: e.status && e.status !== "all" ? e.status : null,
                company_filter: e.companyName || null,
                limit_count: e.limit || 100,
                offset_count: e.offset || 0
            });
            if (!o && i)
                return {
                    applications: i || [],
                    total: i.length || 0
                };
            if (o)
                throw console.error("Admin function error (user not admin):", o.message),
                new Error("Access denied: Admin privileges required to view all applications");
            let a = supabase.from("hirebuddy_job_applications").select("*", {
                count: "exact"
            });
            e.status && e.status !== "all" && (a = a.eq("status", e.status)),
            e.jobId && (a = a.eq("job_id", e.jobId)),
            e.companyName && (a = a.ilike("company_name", `%${e.companyName}%`)),
            e.limit && (a = a.limit(e.limit)),
            e.offset && (a = a.range(e.offset, e.offset + (e.limit || 100) - 1)),
            a = a.order("created_at", {
                ascending: !1
            });
            const {data: c, error: d, count: h} = await a;
            if (d)
                throw console.error("RLS query error:", d.message),
                new Error("Access denied: Unable to fetch applications");
            return {
                applications: c || [],
                total: h || 0
            }
        } catch (i) {
            throw console.error("Error fetching all applications:", i),
            i
        }
    }
    static async updateApplicationStatus(e, i, o, a) {
        try {
            const c = {
                status: i,
                reviewed_at: new Date().toISOString()
            };
            o && (c.admin_notes = o),
            a && (c.reviewed_by = a);
            const {data: d, error: h} = await supabase.from("hirebuddy_job_applications").update(c).eq("id", e).select().single();
            if (h)
                throw h;
            return d
        } catch (c) {
            throw console.error("Error updating application status:", c),
            c
        }
    }
    static async getApplicationStats() {
        try {
            const {data: e, error: i} = await supabase.rpc("get_application_stats_admin");
            if (!i && e && e.length > 0) {
                const d = e[0];
                return {
                    total: Number(d.total) || 0,
                    pending: Number(d.pending) || 0,
                    reviewed: Number(d.reviewed) || 0,
                    shortlisted: Number(d.shortlisted) || 0,
                    rejected: Number(d.rejected) || 0,
                    hired: Number(d.hired) || 0
                }
            }
            if (i)
                throw console.error("Admin stats function error:", i.message),
                new Error("Access denied: Admin privileges required");
            const {data: o, error: a} = await supabase.from("hirebuddy_job_applications").select("status");
            if (a)
                throw console.error("Error fetching application stats:", a),
                new Error("Access denied: Unable to fetch statistics");
            const c = {
                total: (o == null ? void 0 : o.length) || 0,
                pending: 0,
                reviewed: 0,
                shortlisted: 0,
                rejected: 0,
                hired: 0
            };
            return o == null || o.forEach(d => {
                d.status in c && c[d.status]++
            }
            ),
            c
        } catch (e) {
            throw console.error("Error fetching application stats:", e),
            e
        }
    }
}
const AppliedJobsWidget = ({limit: s=3}) => {
    const {user: e} = useAuth()
      , [i,o] = reactExports.useState([])
      , [a,c] = reactExports.useState(!0)
      , [d,h] = reactExports.useState(null);
    reactExports.useEffect( () => {
        (async () => {
            if (!e) {
                c(!1);
                return
            }
            try {
                c(!0);
                const tt = await JobApplicationService.getUserApplications(e.id);
                o(tt.slice(0, s))
            } catch (tt) {
                console.error("Error loading user applications:", tt),
                h("Failed to load applications")
            } finally {
                c(!1)
            }
        }
        )()
    }
    , [e, s]);
    const g = _e => {
        switch (_e) {
        case "pending":
            return {
                icon: jsxRuntimeExports.jsx(Clock, {
                    className: "h-3 w-3"
                }),
                text: "Pending",
                color: "bg-yellow-100 text-yellow-800 border-yellow-200",
                dotColor: "bg-yellow-400"
            };
        case "reviewed":
            return {
                icon: jsxRuntimeExports.jsx(Eye, {
                    className: "h-3 w-3"
                }),
                text: "Reviewed",
                color: "bg-blue-100 text-blue-800 border-blue-200",
                dotColor: "bg-blue-400"
            };
        case "shortlisted":
            return {
                icon: jsxRuntimeExports.jsx(TrendingUp, {
                    className: "h-3 w-3"
                }),
                text: "Shortlisted",
                color: "bg-green-100 text-green-800 border-green-200",
                dotColor: "bg-green-400"
            };
        case "rejected":
            return {
                icon: jsxRuntimeExports.jsx(CircleX, {
                    className: "h-3 w-3"
                }),
                text: "Rejected",
                color: "bg-red-100 text-red-800 border-red-200",
                dotColor: "bg-red-400"
            };
        case "hired":
            return {
                icon: jsxRuntimeExports.jsx(CircleCheckBig, {
                    className: "h-3 w-3"
                }),
                text: "Hired",
                color: "bg-emerald-100 text-emerald-800 border-emerald-200",
                dotColor: "bg-emerald-400"
            };
        default:
            return {
                icon: jsxRuntimeExports.jsx(Clock, {
                    className: "h-3 w-3"
                }),
                text: "Pending",
                color: "bg-gray-100 text-gray-800 border-gray-200",
                dotColor: "bg-gray-400"
            }
        }
    }
      , b = _e => {
        const tt = new Date(_e)
          , et = Math.floor((new Date().getTime() - tt.getTime()) / (1e3 * 60 * 60 * 24));
        return et === 0 ? "Today" : et === 1 ? "Yesterday" : et < 7 ? `${et} days ago` : tt.toLocaleDateString("en-US", {
            month: "short",
            day: "numeric",
            year: tt.getFullYear() !== new Date().getFullYear() ? "numeric" : void 0
        })
    }
      , _ = () => {
        const _e = i.reduce( (tt, rt) => (tt[rt.status] = (tt[rt.status] || 0) + 1,
        tt), {});
        return {
            total: i.length,
            pending: _e.pending || 0,
            reviewed: _e.reviewed || 0,
            shortlisted: _e.shortlisted || 0,
            rejected: _e.rejected || 0,
            hired: _e.hired || 0
        }
    }
    ;
    if (a)
        return jsxRuntimeExports.jsxs(Card, {
            className: "border-0 shadow-sm bg-white",
            children: [jsxRuntimeExports.jsx(CardHeader, {
                className: "pb-4",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "space-y-2",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "h-6 bg-gray-200 rounded w-32 animate-pulse"
                        }), jsxRuntimeExports.jsx("div", {
                            className: "h-4 bg-gray-200 rounded w-24 animate-pulse"
                        })]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "h-8 bg-gray-200 rounded w-20 animate-pulse"
                    })]
                })
            }), jsxRuntimeExports.jsx(CardContent, {
                className: "space-y-4",
                children: [1, 2, 3].map(_e => jsxRuntimeExports.jsx("div", {
                    className: "animate-pulse",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-between p-4 border rounded-lg",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "space-y-2 flex-1",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "h-4 bg-gray-200 rounded w-3/4"
                            }), jsxRuntimeExports.jsx("div", {
                                className: "h-3 bg-gray-200 rounded w-1/2"
                            })]
                        }), jsxRuntimeExports.jsx("div", {
                            className: "h-6 bg-gray-200 rounded w-16"
                        })]
                    })
                }, _e))
            })]
        });
    if (d)
        return jsxRuntimeExports.jsxs(Card, {
            className: "border-0 shadow-sm bg-white",
            children: [jsxRuntimeExports.jsx(CardHeader, {
                className: "pb-4",
                children: jsxRuntimeExports.jsxs(CardTitle, {
                    className: "text-xl font-bold text-gray-900 flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx(Briefcase, {
                        className: "h-5 w-5 text-blue-600"
                    }), "Applied Jobs"]
                })
            }), jsxRuntimeExports.jsx(CardContent, {
                children: jsxRuntimeExports.jsxs("div", {
                    className: "text-center py-8",
                    children: [jsxRuntimeExports.jsx(CircleAlert, {
                        className: "h-12 w-12 mx-auto mb-4 text-red-400"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-600 mb-4",
                        children: d
                    }), jsxRuntimeExports.jsx(Button, {
                        variant: "outline",
                        onClick: () => window.location.reload(),
                        children: "Try Again"
                    })]
                })
            })]
        });
    if (!e)
        return jsxRuntimeExports.jsxs(Card, {
            className: "border-0 shadow-sm bg-white",
            children: [jsxRuntimeExports.jsx(CardHeader, {
                className: "pb-4",
                children: jsxRuntimeExports.jsxs(CardTitle, {
                    className: "text-xl font-bold text-gray-900 flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx(Briefcase, {
                        className: "h-5 w-5 text-blue-600"
                    }), "Applied Jobs"]
                })
            }), jsxRuntimeExports.jsx(CardContent, {
                children: jsxRuntimeExports.jsxs("div", {
                    className: "text-center py-8",
                    children: [jsxRuntimeExports.jsx(Briefcase, {
                        className: "h-12 w-12 mx-auto mb-4 text-gray-400"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-600 mb-4",
                        children: "Sign in to view your job applications"
                    }), jsxRuntimeExports.jsx(Button, {
                        asChild: !0,
                        children: jsxRuntimeExports.jsx(Link, {
                            to: "/signin",
                            children: "Sign In"
                        })
                    })]
                })
            })]
        });
    if (i.length === 0)
        return jsxRuntimeExports.jsxs(Card, {
            className: "border-0 shadow-sm bg-white",
            children: [jsxRuntimeExports.jsx(CardHeader, {
                className: "pb-4",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between",
                    children: [jsxRuntimeExports.jsxs(CardTitle, {
                        className: "text-xl font-bold text-gray-900 flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Briefcase, {
                            className: "h-5 w-5 text-blue-600"
                        }), "Applied Jobs"]
                    }), jsxRuntimeExports.jsx(Button, {
                        variant: "outline",
                        size: "sm",
                        asChild: !0,
                        children: jsxRuntimeExports.jsxs(Link, {
                            to: "/jobs",
                            className: "flex items-center gap-1",
                            children: [jsxRuntimeExports.jsx(Search, {
                                className: "h-4 w-4"
                            }), "Find Jobs"]
                        })
                    })]
                })
            }), jsxRuntimeExports.jsx(CardContent, {
                children: jsxRuntimeExports.jsxs("div", {
                    className: "text-center py-12",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "w-16 h-16 mx-auto mb-4 bg-blue-50 rounded-full flex items-center justify-center",
                        children: jsxRuntimeExports.jsx(Briefcase, {
                            className: "h-8 w-8 text-blue-600"
                        })
                    }), jsxRuntimeExports.jsx("h3", {
                        className: "text-lg font-semibold text-gray-900 mb-2",
                        children: "No applications yet"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-600 mb-6 max-w-sm mx-auto",
                        children: "Start your job search journey by applying to positions that match your skills and interests."
                    }), jsxRuntimeExports.jsx(Button, {
                        asChild: !0,
                        children: jsxRuntimeExports.jsxs(Link, {
                            to: "/jobs",
                            className: "flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(Search, {
                                className: "h-4 w-4"
                            }), "Browse Jobs"]
                        })
                    })]
                })
            })]
        });
    const $ = _();
    return jsxRuntimeExports.jsxs(Card, {
        className: "border-0 shadow-sm bg-white",
        children: [jsxRuntimeExports.jsxs(CardHeader, {
            className: "pb-4",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "flex items-center justify-between",
                children: [jsxRuntimeExports.jsxs("div", {
                    children: [jsxRuntimeExports.jsxs(CardTitle, {
                        className: "text-xl font-bold text-gray-900 flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Briefcase, {
                            className: "h-5 w-5 text-blue-600"
                        }), "Applied Jobs"]
                    }), jsxRuntimeExports.jsxs("p", {
                        className: "text-sm text-gray-600 mt-1",
                        children: [$.total, " application", $.total !== 1 ? "s" : "", " • ", $.pending, " pending"]
                    })]
                }), jsxRuntimeExports.jsx("div", {
                    className: "flex items-center gap-2",
                    children: jsxRuntimeExports.jsx(Button, {
                        variant: "outline",
                        size: "sm",
                        asChild: !0,
                        children: jsxRuntimeExports.jsxs(Link, {
                            to: "/jobs",
                            className: "flex items-center gap-1",
                            children: [jsxRuntimeExports.jsx(Filter, {
                                className: "h-4 w-4"
                            }), "Manage"]
                        })
                    })
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "grid grid-cols-5 gap-2 mt-4",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "text-center",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "text-lg font-bold text-gray-900",
                        children: $.pending
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-xs text-gray-500",
                        children: "Pending"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "text-center",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "text-lg font-bold text-blue-600",
                        children: $.reviewed
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-xs text-gray-500",
                        children: "Reviewed"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "text-center",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "text-lg font-bold text-green-600",
                        children: $.shortlisted
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-xs text-gray-500",
                        children: "Shortlisted"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "text-center",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "text-lg font-bold text-red-600",
                        children: $.rejected
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-xs text-gray-500",
                        children: "Rejected"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "text-center",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "text-lg font-bold text-emerald-600",
                        children: $.hired
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-xs text-gray-500",
                        children: "Hired"
                    })]
                })]
            })]
        }), jsxRuntimeExports.jsxs(CardContent, {
            className: "p-0",
            children: [jsxRuntimeExports.jsx("div", {
                className: "space-y-1",
                children: i.map( (_e, tt) => {
                    const rt = g(_e.status);
                    return jsxRuntimeExports.jsx("div", {
                        className: cn("group relative p-4 hover:bg-gray-50 transition-all duration-200 cursor-pointer", tt !== i.length - 1 && "border-b border-gray-100"),
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex-1 min-w-0",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-3 mb-2",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: cn("w-2 h-2 rounded-full", rt.dotColor)
                                    }), jsxRuntimeExports.jsx("h3", {
                                        className: "font-semibold text-gray-900 truncate group-hover:text-blue-600 transition-colors",
                                        children: _e.job_title
                                    }), jsxRuntimeExports.jsxs(Badge, {
                                        variant: "outline",
                                        className: cn("text-xs font-medium", rt.color),
                                        children: [rt.icon, jsxRuntimeExports.jsx("span", {
                                            className: "ml-1",
                                            children: rt.text
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-4 text-sm text-gray-600",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-1",
                                        children: [jsxRuntimeExports.jsx(Building, {
                                            className: "h-3 w-3"
                                        }), jsxRuntimeExports.jsx("span", {
                                            children: _e.company_name
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-1",
                                        children: [jsxRuntimeExports.jsx(Calendar, {
                                            className: "h-3 w-3"
                                        }), jsxRuntimeExports.jsx("span", {
                                            children: b(_e.created_at)
                                        })]
                                    }), _e.job_type === "exclusive" && jsxRuntimeExports.jsx(Badge, {
                                        variant: "outline",
                                        className: "text-xs border-purple-200 text-purple-700 bg-purple-50",
                                        children: "Exclusive"
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity",
                                children: [jsxRuntimeExports.jsx(Button, {
                                    variant: "ghost",
                                    size: "sm",
                                    className: "h-8 w-8 p-0",
                                    children: jsxRuntimeExports.jsx(ExternalLink, {
                                        className: "h-4 w-4"
                                    })
                                }), jsxRuntimeExports.jsx(Button, {
                                    variant: "ghost",
                                    size: "sm",
                                    className: "h-8 w-8 p-0",
                                    children: jsxRuntimeExports.jsx(Ellipsis, {
                                        className: "h-4 w-4"
                                    })
                                })]
                            })]
                        })
                    }, _e.id)
                }
                )
            }), i.length > 0 && jsxRuntimeExports.jsx("div", {
                className: "p-4 bg-gray-50 border-t border-gray-100",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "text-sm text-gray-600",
                        children: "Track your progress and follow up strategically"
                    }), jsxRuntimeExports.jsx(Button, {
                        variant: "ghost",
                        size: "sm",
                        asChild: !0,
                        className: "text-blue-600 hover:text-blue-700 hover:bg-blue-50",
                        children: jsxRuntimeExports.jsxs(Link, {
                            to: "/jobs",
                            className: "flex items-center gap-1",
                            children: [jsxRuntimeExports.jsx("span", {
                                children: "View All"
                            }), jsxRuntimeExports.jsx(ArrowRight, {
                                className: "h-3 w-3"
                            })]
                        })
                    })]
                })
            })]
        })]
    })
}
;
function Skeleton({className: s, ...e}) {
    return jsxRuntimeExports.jsx("div", {
        className: cn("animate-pulse rounded-md bg-muted", s),
        ...e
    })
}
class JobService {
    static transformDatabaseJob(e) {
        const i = this.generateFallbackLogo(e.company_name || "Unknown Company");
        return {
            id: e.job_id,
            title: e.job_title || "Untitled Position",
            company: e.company_name || "Unknown Company",
            location: e.job_location || "Location not specified",
            description: e.job_description || "No description available",
            isRemote: e.remote_flag || !1,
            isProbablyRemote: e.probably_remote || !1,
            createdAt: e.created_at,
            posted: this.formatPostedDate(e.created_at),
            logo: i,
            tags: this.generateJobTags(e),
            type: "Full-time",
            applyLink: e.apply_link,
            experienceRequired: e.experience_required || "Not specified",
            city: e.city,
            state: e.state
        }
    }
    static generateFallbackLogo(e) {
        const i = e.charAt(0).toUpperCase()
          , o = ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEAA7", "#DDA0DD", "#98D8C8", "#F7DC6F"]
          , a = e.length % o.length
          , c = o[a];
        return `data:image/svg+xml,${encodeURIComponent(`
      <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
        <rect width="40" height="40" fill="${c}" rx="8"/>
        <text x="20" y="25" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="16" font-weight="bold">${i}</text>
      </svg>
    `)}`
    }
    static formatPostedDate(e) {
        try {
            const i = new Date(e)
              , a = Math.abs(new Date().getTime() - i.getTime())
              , c = Math.ceil(a / (1e3 * 60 * 60 * 24));
            return c === 1 ? "Yesterday" : c <= 7 ? `${c} days ago` : c <= 30 ? `${Math.ceil(c / 7)} weeks ago` : c <= 365 ? `${Math.ceil(c / 30)} months ago` : `${Math.floor(c / 365)} years ago`
        } catch {
            return "Recently"
        }
    }
    static generateJobTags(e) {
        var d, h, g;
        const i = [];
        e.remote_flag && i.push("Remote"),
        e.probably_remote && i.push("Possibly Remote");
        const o = ((d = e.experience_required) == null ? void 0 : d.toLowerCase()) || "";
        o.includes("intern") || o.includes("entry") || o.includes("0-1") ? i.push("Entry Level") : o.includes("senior") || o.includes("lead") || o.includes("5+") ? i.push("Senior") : (o.includes("junior") || o.includes("1-3")) && i.push("Junior");
        const a = ((h = e.job_description) == null ? void 0 : h.toLowerCase()) || ""
          , c = ((g = e.job_title) == null ? void 0 : g.toLowerCase()) || "";
        return (a.includes("urgent") || c.includes("urgent")) && i.push("Urgent"),
        (a.includes("full-time") || c.includes("full-time")) && i.push("Full-time"),
        i.slice(0, 3)
    }
    static async getJobs(e={}) {
        var i, o, a, c, d, h, g;
        try {
            console.log("JobService.getJobs called with params:", e);
            const b = {};
            e.query && (b.query = e.query),
            e.sortBy && (b.sortBy = e.sortBy),
            e.sortOrder && (b.sortOrder = e.sortOrder),
            e.limit && (b.limit = e.limit.toString()),
            e.offset && (b.offset = e.offset.toString()),
            e.filters && (e.filters.location && (b.location = e.filters.location),
            e.filters.experience && e.filters.experience !== "any" && (b.experience = e.filters.experience),
            e.filters.remote && e.filters.remote !== "all" && (b.remote = e.filters.remote),
            e.filters.company && (b.company = e.filters.company));
            const _ = await apiClient.getJobs(b);
            if (!_.success)
                throw new Error(_.error || "Failed to fetch jobs");
            return console.log(`JobService: Fetched ${((o = (i = _.data) == null ? void 0 : i.jobs) == null ? void 0 : o.length) || 0} jobs out of ${((c = (a = _.data) == null ? void 0 : a.pagination) == null ? void 0 : c.total) || 0} total`),
            {
                jobs: (((d = _.data) == null ? void 0 : d.jobs) || []).map(_e => {
                    try {
                        return this.transformDatabaseJob(_e)
                    } catch (tt) {
                        console.error("Error transforming job:", _e.job_id, tt);
                        const rt = this.generateFallbackLogo(_e.company_name || "Unknown Company");
                        return {
                            id: _e.job_id,
                            title: _e.job_title || "Untitled Position",
                            company: _e.company_name || "Unknown Company",
                            location: _e.job_location || "Location not specified",
                            description: _e.job_description || "No description available",
                            isRemote: _e.remote_flag || !1,
                            isProbablyRemote: _e.probably_remote || !1,
                            createdAt: _e.created_at,
                            posted: "Recently",
                            logo: rt,
                            tags: ["Job"],
                            type: "Full-time"
                        }
                    }
                }
                ),
                total: ((g = (h = _.data) == null ? void 0 : h.pagination) == null ? void 0 : g.total) || 0
            }
        } catch (b) {
            return console.error("Error fetching jobs from API:", b),
            this.getMockJobs(e)
        }
    }
    static async getRemoteJobs(e={}) {
        var i, o, a, c, d, h, g;
        try {
            console.log("JobService.getRemoteJobs called with params:", e);
            const b = {};
            e.query && (b.query = e.query),
            e.sortBy && (b.sortBy = e.sortBy),
            e.sortOrder && (b.sortOrder = e.sortOrder),
            e.limit && (b.limit = e.limit.toString()),
            e.offset && (b.offset = e.offset.toString()),
            e.filters && (e.filters.location && (b.location = e.filters.location),
            e.filters.experience && e.filters.experience !== "any" && (b.experience = e.filters.experience),
            e.filters.company && (b.company = e.filters.company));
            const _ = await apiClient.getRemoteJobs(b);
            if (!_.success)
                throw new Error(_.error || "Failed to fetch remote jobs");
            return console.log(`JobService: Fetched ${((o = (i = _.data) == null ? void 0 : i.jobs) == null ? void 0 : o.length) || 0} remote jobs out of ${((c = (a = _.data) == null ? void 0 : a.pagination) == null ? void 0 : c.total) || 0} total`),
            {
                jobs: (((d = _.data) == null ? void 0 : d.jobs) || []).map(_e => {
                    try {
                        return this.transformDatabaseJob(_e)
                    } catch (tt) {
                        console.error("Error transforming remote job:", _e.job_id, tt);
                        const rt = this.generateFallbackLogo(_e.company_name || "Unknown Company");
                        return {
                            id: _e.job_id,
                            title: _e.job_title || "Untitled Position",
                            company: _e.company_name || "Unknown Company",
                            location: _e.job_location || "Location not specified",
                            description: _e.job_description || "No description available",
                            isRemote: !0,
                            isProbablyRemote: _e.probably_remote || !1,
                            createdAt: _e.created_at,
                            posted: "Recently",
                            logo: rt,
                            tags: ["Remote"],
                            type: "Full-time"
                        }
                    }
                }
                ),
                total: ((g = (h = _.data) == null ? void 0 : h.pagination) == null ? void 0 : g.total) || 0
            }
        } catch (b) {
            return console.error("Error fetching remote jobs from API:", b),
            this.getMockRemoteJobs(e)
        }
    }
    static async getExclusiveJobs(e={}) {
        var i, o, a, c, d, h, g;
        try {
            console.log("JobService.getExclusiveJobs called with params:", e);
            const b = {};
            e.query && (b.query = e.query),
            e.sortBy && (b.sortBy = e.sortBy),
            e.sortOrder && (b.sortOrder = e.sortOrder),
            e.limit && (b.limit = e.limit.toString()),
            e.offset && (b.offset = e.offset.toString()),
            e.filters && (e.filters.location && (b.location = e.filters.location),
            e.filters.experience && e.filters.experience !== "any" && (b.experience = e.filters.experience),
            e.filters.remote && e.filters.remote !== "all" && (b.remote = e.filters.remote),
            e.filters.company && (b.company = e.filters.company));
            const _ = await apiClient.getExclusiveJobs(b);
            if (!_.success)
                throw new Error(_.error || "Failed to fetch exclusive jobs");
            return console.log(`JobService: Fetched ${((o = (i = _.data) == null ? void 0 : i.jobs) == null ? void 0 : o.length) || 0} exclusive jobs out of ${((c = (a = _.data) == null ? void 0 : a.pagination) == null ? void 0 : c.total) || 0} total`),
            {
                jobs: (((d = _.data) == null ? void 0 : d.jobs) || []).map(_e => {
                    try {
                        return this.transformDatabaseJob(_e)
                    } catch (tt) {
                        console.error("Error transforming exclusive job:", _e.job_id, tt);
                        const rt = this.generateFallbackLogo(_e.company_name || "Unknown Company");
                        return {
                            id: _e.job_id,
                            title: _e.job_title || "Untitled Position",
                            company: _e.company_name || "Unknown Company",
                            location: _e.job_location || "Location not specified",
                            description: _e.job_description || "No description available",
                            isRemote: _e.remote_flag || !1,
                            isProbablyRemote: _e.probably_remote || !1,
                            createdAt: _e.created_at,
                            posted: "Recently",
                            logo: rt,
                            tags: ["Exclusive"],
                            type: "Full-time"
                        }
                    }
                }
                ),
                total: ((g = (h = _.data) == null ? void 0 : h.pagination) == null ? void 0 : g.total) || 0
            }
        } catch (b) {
            return console.error("Error fetching exclusive jobs from API:", b),
            this.getMockExclusiveJobs(e)
        }
    }
    static getMockExclusiveJobs(e={}) {
        let o = [...[{
            id: "exclusive-1",
            title: "Senior Full Stack Engineer - Exclusive Opportunity",
            company: "TechCorp Elite",
            location: "San Francisco, CA",
            city: "San Francisco",
            state: "CA",
            description: "Join our exclusive team building next-generation AI-powered applications. This is a limited-time exclusive opportunity with exceptional benefits and equity package. Work with cutting-edge technologies including React, Node.js, and AI/ML frameworks.",
            experienceRequired: "Senior Level (5+ years)",
            applyLink: "https://example.com/apply/exclusive-1",
            isRemote: !0,
            isProbablyRemote: !0,
            createdAt: new Date().toISOString(),
            posted: "2 days ago",
            logo: "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=60&h=60&fit=crop&crop=center",
            tags: ["Exclusive", "Senior Level", "Remote", "React", "Node.js"],
            type: "Full-time"
        }, {
            id: "exclusive-2",
            title: "Principal Software Architect - Premium Role",
            company: "Innovation Labs",
            location: "New York, NY",
            city: "New York",
            state: "NY",
            description: "Lead architectural decisions for our cutting-edge platform. Exclusive position with direct reporting to CTO and significant equity stake. Shape the future of our technology stack and mentor senior engineers.",
            experienceRequired: "Principal Level (8+ years)",
            applyLink: "https://example.com/apply/exclusive-2",
            isRemote: !1,
            isProbablyRemote: !1,
            createdAt: new Date().toISOString(),
            posted: "1 day ago",
            logo: "https://images.unsplash.com/photo-1551650975-87deedd944c3?w=60&h=60&fit=crop&crop=center",
            tags: ["Exclusive", "Principal Level", "Architecture", "Leadership"],
            type: "Full-time"
        }, {
            id: "exclusive-3",
            title: "VP of Engineering - Executive Opportunity",
            company: "StartupX",
            location: "Remote",
            city: "Remote",
            state: "Remote",
            description: "Shape the future of our engineering organization. This exclusive executive role offers substantial equity and the opportunity to build a world-class team from the ground up.",
            experienceRequired: "Executive Level (10+ years)",
            applyLink: "https://example.com/apply/exclusive-3",
            isRemote: !0,
            isProbablyRemote: !0,
            createdAt: new Date().toISOString(),
            posted: "3 days ago",
            logo: "https://images.unsplash.com/photo-1551434678-e076c223a692?w=60&h=60&fit=crop&crop=center",
            tags: ["Exclusive", "Executive Level", "Remote", "Leadership", "Management"],
            type: "Full-time"
        }, {
            id: "exclusive-4",
            title: "Lead Frontend Developer - Premium Position",
            company: "DesignFirst",
            location: "Austin, TX",
            city: "Austin",
            state: "TX",
            description: "Lead our frontend engineering efforts with the latest technologies. Exclusive opportunity with flexible work arrangements and top-tier compensation. Work with React, TypeScript, and modern design systems.",
            experienceRequired: "Lead Level (6+ years)",
            applyLink: "https://example.com/apply/exclusive-4",
            isRemote: !0,
            isProbablyRemote: !0,
            createdAt: new Date().toISOString(),
            posted: "4 days ago",
            logo: "https://images.unsplash.com/photo-1573164713714-d95e436ab8d6?w=60&h=60&fit=crop&crop=center",
            tags: ["Exclusive", "Lead Level", "Remote", "React", "TypeScript"],
            type: "Full-time"
        }, {
            id: "exclusive-5",
            title: "Senior Data Scientist - AI Division",
            company: "DataCorp",
            location: "Seattle, WA",
            city: "Seattle",
            state: "WA",
            description: "Drive AI innovation in our exclusive data science division. Work with cutting-edge ML technologies and shape product direction. Opportunity to work on large-scale data problems with real-world impact.",
            experienceRequired: "Senior Level (4+ years)",
            applyLink: "https://example.com/apply/exclusive-5",
            isRemote: !0,
            isProbablyRemote: !0,
            createdAt: new Date().toISOString(),
            posted: "1 week ago",
            logo: "https://images.unsplash.com/photo-1581091226825-a6a2a5aee158?w=60&h=60&fit=crop&crop=center",
            tags: ["Exclusive", "Senior Level", "Remote", "Python", "AI/ML"],
            type: "Full-time"
        }]];
        if (e.query) {
            const h = e.query.toLowerCase();
            o = o.filter(g => g.title.toLowerCase().includes(h) || g.company.toLowerCase().includes(h) || g.description.toLowerCase().includes(h))
        }
        if (e.filters) {
            const {location: h, experience: g, remote: b, company: _} = e.filters;
            if (h) {
                const $ = h.toLowerCase();
                o = o.filter(_e => _e.location.toLowerCase().includes($) || _e.city && _e.city.toLowerCase().includes($) || _e.state && _e.state.toLowerCase().includes($))
            }
            g && g !== "any" && (o = o.filter($ => {
                var _e;
                return (_e = $.experienceRequired) == null ? void 0 : _e.toLowerCase().includes(g.toLowerCase())
            }
            )),
            b === "remote" ? o = o.filter($ => $.isRemote) : b === "onsite" && (o = o.filter($ => !$.isRemote)),
            _ && (o = o.filter($ => $.company.toLowerCase().includes(_.toLowerCase())))
        }
        const a = e.limit || 50
          , c = e.offset || 0;
        return {
            jobs: o.slice(c, c + a),
            total: o.length
        }
    }
    static async getJobById(e) {
        try {
            const i = await apiClient.getJobById(e);
            if (!i.success) {
                if (i.error === "Job not found")
                    return null;
                throw new Error(i.error || "Failed to fetch job by ID")
            }
            return this.transformDatabaseJob(i.data)
        } catch (i) {
            throw console.error("Error fetching job by ID:", i),
            i
        }
    }
    static async createJob(e) {
        try {
            const i = await apiClient.createJob(e);
            if (!i.success)
                throw new Error(i.error || "Failed to create job");
            return this.transformDatabaseJob(i.data)
        } catch (i) {
            throw console.error("Error creating job:", i),
            i
        }
    }
    static async updateJob(e) {
        try {
            const i = await apiClient.updateJob(e);
            if (!i.success)
                throw new Error(i.error || "Failed to update job");
            return this.transformDatabaseJob(i.data)
        } catch (i) {
            throw console.error("Error updating job:", i),
            i
        }
    }
    static async deleteJob(e) {
        try {
            const i = await apiClient.deleteJob(e);
            if (!i.success)
                throw new Error(i.error || "Failed to delete job")
        } catch (i) {
            throw console.error("Error deleting job:", i),
            i
        }
    }
    static async getJobsStats() {
        try {
            const e = await apiClient.getJobsStats();
            if (!e.success)
                throw new Error(e.error || "Failed to fetch job stats");
            return e.data || {
                total: 0,
                remote: 0,
                thisWeek: 0,
                companies: 0
            }
        } catch (e) {
            return console.error("Error fetching job stats:", e),
            {
                total: 0,
                remote: 0,
                thisWeek: 0,
                companies: 0
            }
        }
    }
    static async searchCompanies(e, i=10) {
        try {
            const o = await apiClient.searchCompanies(e, i);
            if (!o.success)
                throw new Error(o.error || "Failed to search companies");
            return Array.isArray(o.data) ? o.data : []
        } catch (o) {
            return console.error("Error searching companies:", o),
            []
        }
    }
    static async searchLocations(e, i=10) {
        try {
            const o = await apiClient.searchLocations(e, i);
            if (!o.success)
                throw new Error(o.error || "Failed to search locations");
            return Array.isArray(o.data) ? o.data : []
        } catch (o) {
            return console.error("Error searching locations:", o),
            []
        }
    }
    static getMockJobs(e={}) {
        return {
            jobs: [],
            total: 0
        }
    }
    static getMockRemoteJobs(e={}) {
        return {
            jobs: [],
            total: 0
        }
    }
}
class JobRecommendationService {
    static async getRecommendedJobs(e, i=5) {
        try {
            const [o,a] = await Promise.all([this.getUserProfile(e), this.getUserExperiences(e)]);
            if (!o)
                return console.warn("No user profile found, returning empty recommendations"),
                [];
            const {jobs: c} = await JobService.getJobs({
                limit: 50,
                sortBy: "created_at",
                sortOrder: "desc"
            });
            return c.length === 0 ? (console.warn("No jobs available for recommendations"),
            []) : (await this.analyzeJobMatches(o, a, c)).sort( (h, g) => g.matchScore - h.matchScore).slice(0, i)
        } catch (o) {
            return console.error("Error getting job recommendations:", o),
            this.getFallbackRecommendations(i)
        }
    }
    static async getUserProfile(e) {
        try {
            const {data: i, error: o} = await supabase.from("user_profiles").select("*").eq("user_id", e).single();
            if (o && o.code !== "PGRST116")
                throw o;
            return i
        } catch (i) {
            return console.error("Error fetching user profile:", i),
            null
        }
    }
    static async getUserExperiences(e) {
        try {
            const {data: i, error: o} = await supabase.from("user_experiences").select("*").eq("user_id", e).order("display_order", {
                ascending: !0
            });
            if (o)
                throw o;
            return i || []
        } catch (i) {
            return console.error("Error fetching user experiences:", i),
            []
        }
    }
    static async analyzeJobMatches(e, i, o) {
        var a, c;
        try {
            const h = `Analyze the following user profile and job listings. Provide job recommendations with match scores (0-100) and reasons.

User Profile:
${this.buildUserContext(e, i)}

Available Jobs:
${o.map(_e => {
                var tt;
                return `
Job ID: ${_e.id}
Title: ${_e.title}
Company: ${_e.company}
Location: ${_e.location}
Experience Required: ${_e.experienceRequired || "Not specified"}
Type: ${_e.type || "Not specified"}
Description: ${((tt = _e.description) == null ? void 0 : tt.substring(0, 500)) || "No description"}
`
            }
            ).join(`
`)}

Return JSON in this exact format:
{
  "recommendations": [
    {
      "jobId": "job_id_here",
      "matchScore": 95,
      "matchReasons": ["Strong React experience match", "Senior level aligns with 5+ years experience", "Remote work preference satisfied"],
      "missingSkills": ["GraphQL", "Docker"]
    }
  ]
}

Focus on jobs with match scores above 70. Limit to top 10 recommendations.
`
              , {data: g, error: b} = await supabase.functions.invoke("openai-proxy", {
                body: {
                    model: "gpt-4o-mini",
                    messages: [{
                        role: "system",
                        content: "You are an expert job matching AI that provides accurate job recommendations based on user profiles."
                    }, {
                        role: "user",
                        content: h
                    }],
                    temperature: .3,
                    max_tokens: 2e3
                }
            });
            if (b)
                throw console.error("OpenAI proxy error:", b),
                new Error("Failed to get AI recommendations");
            const _ = JSON.parse(((c = (a = g.choices[0]) == null ? void 0 : a.message) == null ? void 0 : c.content) || '{"recommendations":[]}')
              , $ = [];
            for (const _e of _.recommendations) {
                const tt = o.find(rt => rt.id === _e.jobId);
                tt && _e.matchScore >= 70 && $.push({
                    ...tt,
                    matchScore: _e.matchScore,
                    matchReasons: _e.matchReasons,
                    missingSkills: _e.missingSkills
                })
            }
            return $
        } catch (d) {
            return console.error("Error with OpenAI job matching:", d),
            this.getFallbackMatching(e, i, o)
        }
    }
    static buildUserContext(e, i) {
        var g;
        const o = ((g = e.skills) == null ? void 0 : g.join(", ")) || "Not specified"
          , a = e.title || "Not specified"
          , c = e.experience_years || 0
          , d = e.location || "Not specified";
        let h = "";
        return i.length > 0 && (h = i.map(b => {
            var _;
            return `- ${b.job_title} at ${b.company} (${b.start_date} - ${b.end_date || "Present"})
  Skills: ${((_ = b.skills_used) == null ? void 0 : _.join(", ")) || "Not specified"}
  Description: ${b.description || "Not provided"}`
        }
        ).join(`
`)),
        `
Name: ${e.full_name || "Not provided"}
Current Title: ${a}
Experience Level: ${c} years
Skills: ${o}
Location: ${d}
Available for Work: ${e.available_for_work ? "Yes" : "No"}

Work Experience:
${h || "No experience data provided"}

Bio: ${e.bio || "Not provided"}
`
    }
    static buildJobsContext(e) {
        return e.map(i => {
            var o;
            return `
Job ID: ${i.id}
Title: ${i.title}
Company: ${i.company}
Location: ${i.location}
Remote: ${i.isRemote ? "Yes" : "No"}
Type: ${i.type || "Not specified"}
Skills Required: ${((o = i.tags) == null ? void 0 : o.join(", ")) || "Not specified"}
Description: ${i.description.substring(0, 300)}...
`
        }
        ).join(`
---
`)
    }
    static getFallbackMatching(e, i, o) {
        var h;
        const a = new Set((e.skills || []).map(g => g.toLowerCase()))
          , c = ((h = e.title) == null ? void 0 : h.toLowerCase()) || ""
          , d = e.experience_years || 0;
        return o.map(g => {
            var it;
            let b = 50;
            const _ = []
              , $ = []
              , _e = ((it = g.tags) == null ? void 0 : it.map(st => st.toLowerCase())) || []
              , tt = _e.filter(st => a.has(st));
            tt.length > 0 && (b += tt.length * 10,
            _.push(`${tt.length} matching skills: ${tt.join(", ")}`)),
            c && g.title.toLowerCase().includes(c) && (b += 15,
            _.push("Job title matches your current role"));
            const rt = g.title.toLowerCase();
            d >= 5 && (rt.includes("senior") || rt.includes("lead")) ? (b += 10,
            _.push("Experience level aligns with senior position")) : d < 3 && (rt.includes("junior") || rt.includes("entry")) && (b += 10,
            _.push("Perfect for your experience level")),
            g.isRemote && (b += 5,
            _.push("Remote work available"));
            const et = _e.filter(st => !a.has(st));
            return $.push(...et.slice(0, 3)),
            {
                ...g,
                matchScore: Math.min(b, 100),
                matchReasons: _.slice(0, 3),
                missingSkills: $.slice(0, 3)
            }
        }
        ).filter(g => g.matchScore >= 60)
    }
    static async getFallbackRecommendations(e) {
        try {
            const {jobs: i} = await JobService.getJobs({
                limit: e,
                sortBy: "created_at",
                sortOrder: "desc"
            });
            return i.map(o => ({
                ...o,
                matchScore: 75 + Math.floor(Math.random() * 20),
                matchReasons: ["Recently posted", "Popular in your field", "Good company reputation"],
                missingSkills: ["Additional skills may be beneficial"]
            }))
        } catch (i) {
            return console.error("Error getting fallback recommendations:", i),
            []
        }
    }
}
const MobileCard = ({children: s, className: e, title: i, subtitle: o, icon: a, onClick: c, padding: d="md", variant: h="default"}) => {
    const g = {
        sm: "p-3",
        md: "p-4",
        lg: "p-6"
    }
      , b = {
        default: "bg-white border border-gray-200 shadow-sm",
        elevated: "bg-white border-0 shadow-lg",
        outlined: "bg-transparent border-2 border-gray-300 shadow-none",
        filled: "bg-gray-50 border border-gray-200 shadow-sm",
        compact: "bg-white border border-gray-100 shadow-sm"
    };
    return jsxRuntimeExports.jsxs(Card, {
        className: cn("rounded-xl transition-all duration-200 mobile-touch-target", b[h], c && "cursor-pointer hover:shadow-md active:scale-[0.98] touch-manipulation", e),
        onClick: c,
        children: [(i || o || a) && jsxRuntimeExports.jsx(CardHeader, {
            className: "pb-3",
            children: jsxRuntimeExports.jsxs("div", {
                className: "flex items-center gap-3",
                children: [a && jsxRuntimeExports.jsx("div", {
                    className: "w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center",
                    children: jsxRuntimeExports.jsx(a, {
                        className: "w-5 h-5 text-primary"
                    })
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex-1 min-w-0",
                    children: [i && jsxRuntimeExports.jsx(CardTitle, {
                        className: "text-lg font-semibold text-gray-900 truncate",
                        children: i
                    }), o && jsxRuntimeExports.jsx("p", {
                        className: "text-sm text-gray-600 mt-1 truncate",
                        children: o
                    })]
                })]
            })
        }), jsxRuntimeExports.jsx(CardContent, {
            className: cn(g[d], i && "pt-0"),
            children: s
        })]
    })
}
  , MobileButton = ({children: s, onClick: e, variant: i="primary", size: o="md", disabled: a=!1, loading: c=!1, icon: d, iconPosition: h="left", className: g, style: b}) => {
    const _ = {
        primary: "bg-primary text-primary-foreground hover:bg-primary/90 shadow-md [&]:text-white",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80 shadow-sm",
        outline: "border-2 border-primary text-primary hover:bg-primary hover:text-primary-foreground [&:hover]:text-white",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-md [&]:text-white"
    }
      , $ = {
        sm: "h-8 px-3 text-xs",
        md: "h-9 px-4 text-sm",
        lg: "h-10 px-5 text-base",
        full: "h-9 px-4 text-sm w-full"
    };
    return jsxRuntimeExports.jsxs(Button, {
        onClick: e,
        disabled: a || c,
        style: b,
        className: cn("rounded-xl font-semibold transition-all duration-200 mobile-touch-target", "active:scale-[0.98] touch-manipulation", "focus:ring-2 focus:ring-primary focus:ring-offset-2", _[i], $[o], g),
        children: [c && jsxRuntimeExports.jsx(LoaderCircle, {
            className: "w-4 h-4 mr-2 animate-spin"
        }), !c && d && h === "left" && jsxRuntimeExports.jsx(d, {
            className: "w-4 h-4 mr-2"
        }), s, !c && d && h === "right" && jsxRuntimeExports.jsx(d, {
            className: "w-4 h-4 ml-2"
        })]
    })
}
  , AIJobRecommendations = ({limit: s=5}) => {
    const {user: e} = useAuth()
      , [i,o] = reactExports.useState([])
      , [a,c] = reactExports.useState(!0)
      , {getJobLogo: d, isLogoLoading: h} = useProgressiveLogos(i)
      , [g,b] = reactExports.useState(null)
      , [_,$] = reactExports.useState(!1)
      , _e = async () => {
        if (!e) {
            c(!1);
            return
        }
        try {
            b(null);
            const it = await JobRecommendationService.getRecommendedJobs(e.id, s);
            o(it)
        } catch (it) {
            console.error("Error loading job recommendations:", it),
            b("Failed to load job recommendations")
        } finally {
            c(!1),
            $(!1)
        }
    }
    ;
    reactExports.useEffect( () => {
        _e()
    }
    , [e, s]);
    const tt = async () => {
        $(!0),
        await _e()
    }
      , rt = it => it >= 90 ? "Excellent" : it >= 80 ? "Great" : it >= 70 ? "Good" : "Fair"
      , et = ({job: it}) => jsxRuntimeExports.jsx(MobileCard, {
        className: "mb-2",
        variant: "compact",
        children: jsxRuntimeExports.jsxs("div", {
            className: "space-y-2",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "flex items-start justify-between",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex-1 min-w-0",
                    children: [jsxRuntimeExports.jsx("h3", {
                        className: "font-semibold mobile-body text-gray-900 line-clamp-2 leading-tight",
                        children: it.title
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-1.5 mt-0.5",
                        children: [jsxRuntimeExports.jsx(Building, {
                            className: "w-3 h-3 text-gray-500 flex-shrink-0"
                        }), jsxRuntimeExports.jsx("p", {
                            className: "mobile-body-xs text-gray-600 truncate",
                            children: it.company
                        })]
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "text-right ml-2",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-1",
                        children: [jsxRuntimeExports.jsxs("span", {
                            className: "text-xs font-medium text-primary",
                            children: [it.matchScore, "%"]
                        }), jsxRuntimeExports.jsx("div", {
                            className: "w-8 h-1.5 bg-gray-100 rounded-full",
                            children: jsxRuntimeExports.jsx("div", {
                                className: "h-1.5 bg-primary rounded-full",
                                style: {
                                    width: `${it.matchScore}%`
                                }
                            })
                        })]
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-xs text-gray-500 mt-0.5",
                        children: rt(it.matchScore)
                    })]
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex items-center gap-3 mobile-body-xs text-gray-600",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-1",
                    children: [jsxRuntimeExports.jsx(MapPin, {
                        className: "w-3 h-3"
                    }), jsxRuntimeExports.jsx("span", {
                        className: "truncate",
                        children: it.location
                    })]
                }), it.isRemote && jsxRuntimeExports.jsx(Badge, {
                    variant: "secondary",
                    className: "mobile-body-xs",
                    children: "Remote"
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-1 ml-auto",
                    children: [jsxRuntimeExports.jsx(Clock, {
                        className: "w-3 h-3"
                    }), jsxRuntimeExports.jsx("span", {
                        children: it.posted
                    })]
                })]
            }), it.matchReasons.length > 0 && jsxRuntimeExports.jsxs("div", {
                className: "bg-gray-50 p-2 rounded-lg",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "text-xs font-medium text-gray-700 mb-1 flex items-center gap-1",
                    children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                        className: "h-3 w-3 text-gray-600"
                    }), "Why it matches:"]
                }), jsxRuntimeExports.jsx("div", {
                    className: "space-y-0.5",
                    children: it.matchReasons.slice(0, 2).map( (st, nt) => jsxRuntimeExports.jsxs("div", {
                        className: "text-xs text-gray-600 flex items-center gap-1",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "w-1 h-1 bg-gray-400 rounded-full flex-shrink-0"
                        }), jsxRuntimeExports.jsx("span", {
                            className: "line-clamp-1",
                            children: st
                        })]
                    }, nt))
                })]
            }), it.tags && it.tags.length > 0 && jsxRuntimeExports.jsxs("div", {
                className: "flex flex-wrap gap-1",
                children: [it.tags.slice(0, 3).map( (st, nt) => jsxRuntimeExports.jsx(Badge, {
                    variant: "secondary",
                    className: "mobile-body-xs",
                    children: st
                }, nt)), it.tags.length > 3 && jsxRuntimeExports.jsxs(Badge, {
                    variant: "secondary",
                    className: "mobile-body-xs",
                    children: ["+", it.tags.length - 3, " more"]
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex gap-2 pt-1",
                children: [jsxRuntimeExports.jsx(MobileButton, {
                    variant: "primary",
                    size: "sm",
                    className: "flex-1",
                    onClick: () => {
                        it.applyLink && window.open(it.applyLink, "_blank")
                    }
                    ,
                    children: "Apply Now"
                }), jsxRuntimeExports.jsx(Link, {
                    to: `/jobs?search=${encodeURIComponent(it.title)}`,
                    className: "flex-1",
                    children: jsxRuntimeExports.jsx(MobileButton, {
                        size: "sm",
                        variant: "primary",
                        className: "w-full",
                        children: "Details"
                    })
                })]
            })]
        })
    });
    return a ? jsxRuntimeExports.jsxs(Card, {
        className: "border border-gray-200",
        children: [jsxRuntimeExports.jsxs(CardHeader, {
            className: "border-b border-gray-100 pb-4",
            children: [jsxRuntimeExports.jsxs(CardTitle, {
                className: "flex items-center gap-2 text-lg font-semibold text-gray-900",
                children: [jsxRuntimeExports.jsx(Brain, {
                    className: "h-5 w-5 text-gray-600"
                }), "Job Recommendations", jsxRuntimeExports.jsx(Skeleton, {
                    className: "h-6 w-20 ml-auto"
                })]
            }), jsxRuntimeExports.jsx("p", {
                className: "text-sm text-gray-500",
                children: "Personalized matches based on your profile"
            })]
        }), jsxRuntimeExports.jsx(CardContent, {
            className: "p-0",
            children: jsxRuntimeExports.jsx("div", {
                className: "divide-y divide-gray-100",
                children: Array.from({
                    length: 3
                }).map( (it, st) => jsxRuntimeExports.jsx("div", {
                    className: "p-4",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex items-start gap-3",
                        children: [jsxRuntimeExports.jsx(Skeleton, {
                            className: "w-12 h-12 rounded-lg"
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex-1 space-y-2",
                            children: [jsxRuntimeExports.jsx(Skeleton, {
                                className: "h-4 w-3/4"
                            }), jsxRuntimeExports.jsx(Skeleton, {
                                className: "h-3 w-1/2"
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex gap-1",
                                children: [jsxRuntimeExports.jsx(Skeleton, {
                                    className: "h-5 w-16"
                                }), jsxRuntimeExports.jsx(Skeleton, {
                                    className: "h-5 w-20"
                                })]
                            })]
                        }), jsxRuntimeExports.jsx(Skeleton, {
                            className: "h-6 w-16"
                        })]
                    })
                }, st))
            })
        })]
    }) : g ? jsxRuntimeExports.jsxs(Card, {
        className: "border border-gray-200",
        children: [jsxRuntimeExports.jsxs(CardHeader, {
            className: "border-b border-gray-100 pb-4",
            children: [jsxRuntimeExports.jsxs(CardTitle, {
                className: "flex items-center gap-2 text-lg font-semibold text-gray-900",
                children: [jsxRuntimeExports.jsx(Brain, {
                    className: "h-5 w-5 text-gray-600"
                }), "Job Recommendations"]
            }), jsxRuntimeExports.jsx("p", {
                className: "text-sm text-gray-500",
                children: "Personalized matches based on your profile"
            })]
        }), jsxRuntimeExports.jsx(CardContent, {
            className: "p-6",
            children: jsxRuntimeExports.jsxs("div", {
                className: "text-center",
                children: [jsxRuntimeExports.jsx(CircleAlert, {
                    className: "h-8 w-8 text-gray-400 mx-auto mb-2"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-gray-600 mb-4",
                    children: g
                }), jsxRuntimeExports.jsx(Button, {
                    onClick: tt,
                    variant: "outline",
                    disabled: _,
                    children: _ ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [jsxRuntimeExports.jsx(RefreshCw, {
                            className: "h-4 w-4 mr-2 animate-spin"
                        }), "Refreshing..."]
                    }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [jsxRuntimeExports.jsx(RefreshCw, {
                            className: "h-4 w-4 mr-2"
                        }), "Try Again"]
                    })
                })]
            })
        })]
    }) : e ? i.length === 0 ? jsxRuntimeExports.jsxs(Card, {
        className: "border border-gray-200",
        children: [jsxRuntimeExports.jsx(CardHeader, {
            className: "border-b border-gray-100 pb-4",
            children: jsxRuntimeExports.jsxs("div", {
                className: "flex items-center justify-between",
                children: [jsxRuntimeExports.jsxs("div", {
                    children: [jsxRuntimeExports.jsxs(CardTitle, {
                        className: "flex items-center gap-2 text-lg font-semibold text-gray-900",
                        children: [jsxRuntimeExports.jsx(Brain, {
                            className: "h-5 w-5 text-gray-600"
                        }), "Job Recommendations"]
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-sm text-gray-500",
                        children: "Personalized matches based on your profile"
                    })]
                }), jsxRuntimeExports.jsx(Button, {
                    onClick: tt,
                    variant: "ghost",
                    size: "sm",
                    disabled: _,
                    children: _ ? jsxRuntimeExports.jsx(RefreshCw, {
                        className: "h-4 w-4 animate-spin"
                    }) : jsxRuntimeExports.jsx(RefreshCw, {
                        className: "h-4 w-4"
                    })
                })]
            })
        }), jsxRuntimeExports.jsx(CardContent, {
            className: "p-6",
            children: jsxRuntimeExports.jsxs("div", {
                className: "text-center",
                children: [jsxRuntimeExports.jsx(Target, {
                    className: "h-8 w-8 text-gray-400 mx-auto mb-3"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-gray-600 mb-4",
                    children: "Complete your profile to get personalized job recommendations"
                }), jsxRuntimeExports.jsx(Button, {
                    variant: "outline",
                    asChild: !0,
                    children: jsxRuntimeExports.jsx(Link, {
                        to: "/profile",
                        className: "text-gray-700",
                        children: "Complete Profile"
                    })
                })]
            })
        })]
    }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [jsxRuntimeExports.jsxs("div", {
            className: "md:hidden",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "mb-4",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between mb-2",
                    children: [jsxRuntimeExports.jsxs("h3", {
                        className: "font-semibold text-lg flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Brain, {
                            className: "h-5 w-5 text-gray-600"
                        }), "Job Recommendations"]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Button, {
                            onClick: tt,
                            variant: "ghost",
                            size: "sm",
                            disabled: _,
                            children: _ ? jsxRuntimeExports.jsx(RefreshCw, {
                                className: "h-4 w-4 animate-spin"
                            }) : jsxRuntimeExports.jsx(RefreshCw, {
                                className: "h-4 w-4"
                            })
                        }), jsxRuntimeExports.jsxs(Badge, {
                            variant: "secondary",
                            className: "mobile-body-xs",
                            children: [i.length, " match", i.length !== 1 ? "es" : ""]
                        })]
                    })]
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-sm text-gray-600",
                    children: "Personalized matches based on your profile"
                })]
            }), jsxRuntimeExports.jsx("div", {
                className: "space-y-2",
                children: i.map(it => jsxRuntimeExports.jsx(et, {
                    job: it
                }, it.id))
            }), jsxRuntimeExports.jsx("div", {
                className: "mt-4 space-y-2",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "text-center",
                    children: [jsxRuntimeExports.jsx("p", {
                        className: "text-sm text-gray-600 mb-3",
                        children: "Want more personalized recommendations?"
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex gap-2 justify-center",
                        children: [jsxRuntimeExports.jsx(Link, {
                            to: "/profile",
                            children: jsxRuntimeExports.jsxs(MobileButton, {
                                variant: "primary",
                                size: "sm",
                                children: [jsxRuntimeExports.jsx(Target, {
                                    className: "h-3 w-3 mr-1"
                                }), "Update Profile"]
                            })
                        }), jsxRuntimeExports.jsx(Link, {
                            to: "/jobs",
                            children: jsxRuntimeExports.jsxs(MobileButton, {
                                variant: "primary",
                                size: "sm",
                                children: ["Browse all jobs", jsxRuntimeExports.jsx(ArrowRight, {
                                    className: "h-3 w-3 ml-1"
                                })]
                            })
                        })]
                    })]
                })
            })]
        }), jsxRuntimeExports.jsxs(Card, {
            className: "border border-gray-200 hidden md:block",
            children: [jsxRuntimeExports.jsx(CardHeader, {
                className: "border-b border-gray-100 pb-4",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between",
                    children: [jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsxs(CardTitle, {
                            className: "flex items-center gap-2 text-lg font-semibold text-gray-900",
                            children: [jsxRuntimeExports.jsx(Brain, {
                                className: "h-5 w-5 text-gray-600"
                            }), "Job Recommendations", jsxRuntimeExports.jsxs("span", {
                                className: "text-sm font-normal text-gray-500",
                                children: [i.length, " match", i.length !== 1 ? "es" : ""]
                            })]
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-sm text-gray-500",
                            children: "Personalized matches based on your profile"
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Button, {
                            onClick: tt,
                            variant: "ghost",
                            size: "sm",
                            disabled: _,
                            children: _ ? jsxRuntimeExports.jsx(RefreshCw, {
                                className: "h-4 w-4 animate-spin"
                            }) : jsxRuntimeExports.jsx(RefreshCw, {
                                className: "h-4 w-4"
                            })
                        }), jsxRuntimeExports.jsxs(Link, {
                            to: "/jobs",
                            className: "text-sm text-gray-600 hover:text-gray-900 flex items-center gap-1",
                            children: [jsxRuntimeExports.jsx("span", {
                                children: "View all"
                            }), jsxRuntimeExports.jsx(ArrowUpRight, {
                                className: "h-3 w-3"
                            })]
                        })]
                    })]
                })
            }), jsxRuntimeExports.jsxs(CardContent, {
                className: "p-0",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "divide-y divide-gray-100",
                    children: i.map(it => jsxRuntimeExports.jsx("div", {
                        className: "p-4 hover:bg-gray-50 transition-colors",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "flex items-start gap-3",
                            children: [jsxRuntimeExports.jsx(CompanyLogo, {
                                companyName: it.company,
                                logoUrl: d(it),
                                isLoading: h(it.id),
                                size: "md",
                                className: "border border-gray-200"
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex-1 min-w-0",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-start justify-between gap-2 mb-2",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex-1",
                                        children: [jsxRuntimeExports.jsx("h3", {
                                            className: "font-medium text-gray-900",
                                            children: it.title
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-2 text-sm text-gray-600 mt-1",
                                            children: [jsxRuntimeExports.jsx(Building, {
                                                className: "h-3 w-3"
                                            }), jsxRuntimeExports.jsx("span", {
                                                children: it.company
                                            }), jsxRuntimeExports.jsx("span", {
                                                children: "•"
                                            }), jsxRuntimeExports.jsx(MapPin, {
                                                className: "h-3 w-3"
                                            }), jsxRuntimeExports.jsx("span", {
                                                children: it.location
                                            }), it.isRemote && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx("span", {
                                                    children: "•"
                                                }), jsxRuntimeExports.jsx("span", {
                                                    className: "text-xs text-gray-600 font-medium",
                                                    children: "Remote"
                                                })]
                                            })]
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "text-right",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            className: "text-sm font-medium text-gray-700",
                                            children: [it.matchScore, "% match"]
                                        }), jsxRuntimeExports.jsx("div", {
                                            className: "text-xs text-gray-500",
                                            children: rt(it.matchScore)
                                        })]
                                    })]
                                }), it.matchReasons.length > 0 && jsxRuntimeExports.jsxs("div", {
                                    className: "mb-3",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "text-xs font-medium text-gray-700 mb-1 flex items-center gap-1",
                                        children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                                            className: "h-3 w-3 text-gray-600"
                                        }), "Why it matches:"]
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "space-y-1",
                                        children: it.matchReasons.slice(0, 2).map( (st, nt) => jsxRuntimeExports.jsxs("div", {
                                            className: "text-xs text-gray-600 flex items-center gap-1",
                                            children: [jsxRuntimeExports.jsx("div", {
                                                className: "w-1 h-1 bg-gray-400 rounded-full"
                                            }), st]
                                        }, nt))
                                    })]
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "flex flex-wrap gap-1 mb-3",
                                    children: it.tags.slice(0, 4).map( (st, nt) => jsxRuntimeExports.jsx("span", {
                                        className: "text-xs px-2 py-1 bg-gray-100 text-gray-700 rounded",
                                        children: st
                                    }, nt))
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex gap-2 mt-4",
                                    children: [jsxRuntimeExports.jsx(Button, {
                                        size: "sm",
                                        className: "flex-1",
                                        onClick: () => {
                                            it.applyLink && window.open(it.applyLink, "_blank")
                                        }
                                        ,
                                        children: "Apply Now"
                                    }), jsxRuntimeExports.jsx(Button, {
                                        size: "sm",
                                        variant: "outline",
                                        asChild: !0,
                                        children: jsxRuntimeExports.jsxs(Link, {
                                            to: `/jobs?search=${encodeURIComponent(it.title)}`,
                                            children: [jsxRuntimeExports.jsx(ExternalLink, {
                                                className: "h-3 w-3 mr-1"
                                            }), "Details"]
                                        })
                                    })]
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "flex items-center justify-between mt-2 text-xs text-gray-500",
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-1",
                                        children: [jsxRuntimeExports.jsx(Clock, {
                                            className: "h-3 w-3"
                                        }), it.posted]
                                    })
                                })]
                            })]
                        })
                    }, it.id))
                }), jsxRuntimeExports.jsx("div", {
                    className: "p-4 border-t border-gray-100 bg-gray-50",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "text-center",
                        children: [jsxRuntimeExports.jsx("p", {
                            className: "text-sm text-gray-600 mb-3",
                            children: "Want more personalized recommendations?"
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex gap-2 justify-center",
                            children: [jsxRuntimeExports.jsx(Button, {
                                variant: "ghost",
                                size: "sm",
                                asChild: !0,
                                children: jsxRuntimeExports.jsxs(Link, {
                                    to: "/profile",
                                    className: "text-gray-700",
                                    children: [jsxRuntimeExports.jsx(Target, {
                                        className: "h-3 w-3 mr-1"
                                    }), "Update Profile"]
                                })
                            }), jsxRuntimeExports.jsx(Button, {
                                variant: "ghost",
                                size: "sm",
                                asChild: !0,
                                children: jsxRuntimeExports.jsxs(Link, {
                                    to: "/jobs",
                                    className: "text-gray-700",
                                    children: [jsxRuntimeExports.jsx("span", {
                                        children: "Browse all jobs"
                                    }), jsxRuntimeExports.jsx(ArrowRight, {
                                        className: "h-3 w-3 ml-1"
                                    })]
                                })
                            })]
                        })]
                    })
                })]
            })]
        })]
    }) : jsxRuntimeExports.jsxs(Card, {
        className: "border border-gray-200",
        children: [jsxRuntimeExports.jsxs(CardHeader, {
            className: "border-b border-gray-100 pb-4",
            children: [jsxRuntimeExports.jsxs(CardTitle, {
                className: "flex items-center gap-2 text-lg font-semibold text-gray-900",
                children: [jsxRuntimeExports.jsx(Brain, {
                    className: "h-5 w-5 text-gray-600"
                }), "Job Recommendations"]
            }), jsxRuntimeExports.jsx("p", {
                className: "text-sm text-gray-500",
                children: "Personalized matches based on your profile"
            })]
        }), jsxRuntimeExports.jsx(CardContent, {
            className: "p-6",
            children: jsxRuntimeExports.jsxs("div", {
                className: "text-center",
                children: [jsxRuntimeExports.jsx(Briefcase, {
                    className: "h-8 w-8 text-gray-400 mx-auto mb-3"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-gray-600 mb-4",
                    children: "Sign in to get personalized job recommendations"
                }), jsxRuntimeExports.jsx(Button, {
                    variant: "outline",
                    asChild: !0,
                    children: jsxRuntimeExports.jsx(Link, {
                        to: "/signin",
                        className: "text-gray-700",
                        children: "Sign In"
                    })
                })]
            })
        })]
    })
}
;
function createContextScope(s, e=[]) {
    let i = [];
    function o(c, d) {
        const h = reactExports.createContext(d)
          , g = i.length;
        i = [...i, d];
        const b = $ => {
            var st;
            const {scope: _e, children: tt, ...rt} = $
              , et = ((st = _e == null ? void 0 : _e[s]) == null ? void 0 : st[g]) || h
              , it = reactExports.useMemo( () => rt, Object.values(rt));
            return jsxRuntimeExports.jsx(et.Provider, {
                value: it,
                children: tt
            })
        }
        ;
        b.displayName = c + "Provider";
        function _($, _e) {
            var et;
            const tt = ((et = _e == null ? void 0 : _e[s]) == null ? void 0 : et[g]) || h
              , rt = reactExports.useContext(tt);
            if (rt)
                return rt;
            if (d !== void 0)
                return d;
            throw new Error(`\`${$}\` must be used within \`${c}\``)
        }
        return [b, _]
    }
    const a = () => {
        const c = i.map(d => reactExports.createContext(d));
        return function(h) {
            const g = (h == null ? void 0 : h[s]) || c;
            return reactExports.useMemo( () => ({
                [`__scope${s}`]: {
                    ...h,
                    [s]: g
                }
            }), [h, g])
        }
    }
    ;
    return a.scopeName = s,
    [o, composeContextScopes(a, ...e)]
}
function composeContextScopes(...s) {
    const e = s[0];
    if (s.length === 1)
        return e;
    const i = () => {
        const o = s.map(a => ({
            useScope: a(),
            scopeName: a.scopeName
        }));
        return function(c) {
            const d = o.reduce( (h, {useScope: g, scopeName: b}) => {
                const $ = g(c)[`__scope${b}`];
                return {
                    ...h,
                    ...$
                }
            }
            , {});
            return reactExports.useMemo( () => ({
                [`__scope${e.scopeName}`]: d
            }), [d])
        }
    }
    ;
    return i.scopeName = e.scopeName,
    i
}
function setRef(s, e) {
    if (typeof s == "function")
        return s(e);
    s != null && (s.current = e)
}
function composeRefs(...s) {
    return e => {
        let i = !1;
        const o = s.map(a => {
            const c = setRef(a, e);
            return !i && typeof c == "function" && (i = !0),
            c
        }
        );
        if (i)
            return () => {
                for (let a = 0; a < o.length; a++) {
                    const c = o[a];
                    typeof c == "function" ? c() : setRef(s[a], null)
                }
            }
    }
}
function createSlot(s) {
    const e = createSlotClone(s)
      , i = reactExports.forwardRef( (o, a) => {
        const {children: c, ...d} = o
          , h = reactExports.Children.toArray(c)
          , g = h.find(isSlottable);
        if (g) {
            const b = g.props.children
              , _ = h.map($ => $ === g ? reactExports.Children.count(b) > 1 ? reactExports.Children.only(null) : reactExports.isValidElement(b) ? b.props.children : null : $);
            return jsxRuntimeExports.jsx(e, {
                ...d,
                ref: a,
                children: reactExports.isValidElement(b) ? reactExports.cloneElement(b, void 0, _) : null
            })
        }
        return jsxRuntimeExports.jsx(e, {
            ...d,
            ref: a,
            children: c
        })
    }
    );
    return i.displayName = `${s}.Slot`,
    i
}
function createSlotClone(s) {
    const e = reactExports.forwardRef( (i, o) => {
        const {children: a, ...c} = i;
        if (reactExports.isValidElement(a)) {
            const d = getElementRef(a)
              , h = mergeProps(c, a.props);
            return a.type !== reactExports.Fragment && (h.ref = o ? composeRefs(o, d) : d),
            reactExports.cloneElement(a, h)
        }
        return reactExports.Children.count(a) > 1 ? reactExports.Children.only(null) : null
    }
    );
    return e.displayName = `${s}.SlotClone`,
    e
}
var SLOTTABLE_IDENTIFIER = Symbol("radix.slottable");
function isSlottable(s) {
    return reactExports.isValidElement(s) && typeof s.type == "function" && "__radixId"in s.type && s.type.__radixId === SLOTTABLE_IDENTIFIER
}
function mergeProps(s, e) {
    const i = {
        ...e
    };
    for (const o in e) {
        const a = s[o]
          , c = e[o];
        /^on[A-Z]/.test(o) ? a && c ? i[o] = (...h) => {
            const g = c(...h);
            return a(...h),
            g
        }
        : a && (i[o] = a) : o === "style" ? i[o] = {
            ...a,
            ...c
        } : o === "className" && (i[o] = [a, c].filter(Boolean).join(" "))
    }
    return {
        ...s,
        ...i
    }
}
function getElementRef(s) {
    var o, a;
    let e = (o = Object.getOwnPropertyDescriptor(s.props, "ref")) == null ? void 0 : o.get
      , i = e && "isReactWarning"in e && e.isReactWarning;
    return i ? s.ref : (e = (a = Object.getOwnPropertyDescriptor(s, "ref")) == null ? void 0 : a.get,
    i = e && "isReactWarning"in e && e.isReactWarning,
    i ? s.props.ref : s.props.ref || s.ref)
}
var NODES = ["a", "button", "div", "form", "h2", "h3", "img", "input", "label", "li", "nav", "ol", "p", "select", "span", "svg", "ul"]
  , Primitive = NODES.reduce( (s, e) => {
    const i = createSlot(`Primitive.${e}`)
      , o = reactExports.forwardRef( (a, c) => {
        const {asChild: d, ...h} = a
          , g = d ? i : e;
        return typeof window < "u" && (window[Symbol.for("radix-ui")] = !0),
        jsxRuntimeExports.jsx(g, {
            ...h,
            ref: c
        })
    }
    );
    return o.displayName = `Primitive.${e}`,
    {
        ...s,
        [e]: o
    }
}
, {})
  , PROGRESS_NAME = "Progress"
  , DEFAULT_MAX = 100
  , [createProgressContext,createProgressScope] = createContextScope(PROGRESS_NAME)
  , [ProgressProvider,useProgressContext] = createProgressContext(PROGRESS_NAME)
  , Progress$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeProgress: i, value: o=null, max: a, getValueLabel: c=defaultGetValueLabel, ...d} = s;
    (a || a === 0) && !isValidMaxNumber(a) && console.error(getInvalidMaxError(`${a}`, "Progress"));
    const h = isValidMaxNumber(a) ? a : DEFAULT_MAX;
    o !== null && !isValidValueNumber(o, h) && console.error(getInvalidValueError(`${o}`, "Progress"));
    const g = isValidValueNumber(o, h) ? o : null
      , b = isNumber(g) ? c(g, h) : void 0;
    return jsxRuntimeExports.jsx(ProgressProvider, {
        scope: i,
        value: g,
        max: h,
        children: jsxRuntimeExports.jsx(Primitive.div, {
            "aria-valuemax": h,
            "aria-valuemin": 0,
            "aria-valuenow": isNumber(g) ? g : void 0,
            "aria-valuetext": b,
            role: "progressbar",
            "data-state": getProgressState(g, h),
            "data-value": g ?? void 0,
            "data-max": h,
            ...d,
            ref: e
        })
    })
}
);
Progress$1.displayName = PROGRESS_NAME;
var INDICATOR_NAME = "ProgressIndicator"
  , ProgressIndicator = reactExports.forwardRef( (s, e) => {
    const {__scopeProgress: i, ...o} = s
      , a = useProgressContext(INDICATOR_NAME, i);
    return jsxRuntimeExports.jsx(Primitive.div, {
        "data-state": getProgressState(a.value, a.max),
        "data-value": a.value ?? void 0,
        "data-max": a.max,
        ...o,
        ref: e
    })
}
);
ProgressIndicator.displayName = INDICATOR_NAME;
function defaultGetValueLabel(s, e) {
    return `${Math.round(s / e * 100)}%`
}
function getProgressState(s, e) {
    return s == null ? "indeterminate" : s === e ? "complete" : "loading"
}
function isNumber(s) {
    return typeof s == "number"
}
function isValidMaxNumber(s) {
    return isNumber(s) && !isNaN(s) && s > 0
}
function isValidValueNumber(s, e) {
    return isNumber(s) && !isNaN(s) && s <= e && s >= 0
}
function getInvalidMaxError(s, e) {
    return `Invalid prop \`max\` of value \`${s}\` supplied to \`${e}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${DEFAULT_MAX}\`.`
}
function getInvalidValueError(s, e) {
    return `Invalid prop \`value\` of value \`${s}\` supplied to \`${e}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${DEFAULT_MAX} if no \`max\` prop is set)
  - \`null\` or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`
}
var Root$5 = Progress$1
  , Indicator = ProgressIndicator;
const Progress = reactExports.forwardRef( ({className: s, value: e, ...i}, o) => jsxRuntimeExports.jsx(Root$5, {
    ref: o,
    className: cn("relative h-4 w-full overflow-hidden rounded-full bg-secondary", s),
    ...i,
    children: jsxRuntimeExports.jsx(Indicator, {
        className: "h-full w-full flex-1 bg-primary transition-all",
        style: {
            transform: `translateX(-${100 - (e || 0)}%)`
        }
    })
}));
Progress.displayName = Root$5.displayName;
class ProfileService {
    static async getProfile(e) {
        try {
            const {data: i, error: o} = await supabase.from("user_profiles").select("*").eq("user_id", e).single();
            if (o) {
                if (o.code === "PGRST116")
                    return null;
                throw o
            }
            return i
        } catch (i) {
            throw console.error("Error fetching profile:", i),
            i
        }
    }
    static async upsertProfile(e, i) {
        try {
            const {data: o, error: a} = await supabase.from("user_profiles").upsert({
                user_id: e,
                ...i,
                updated_at: new Date().toISOString()
            }).select().single();
            if (a)
                throw a;
            return o
        } catch (o) {
            throw console.error("Error upserting profile:", o),
            o
        }
    }
    static async updateProfile(e, i) {
        try {
            const {data: o, error: a} = await supabase.from("user_profiles").update({
                ...i,
                updated_at: new Date().toISOString()
            }).eq("user_id", e).select().single();
            if (a)
                throw a;
            return o
        } catch (o) {
            throw console.error("Error updating profile:", o),
            o
        }
    }
    static async deleteOldFile(e, i, o) {
        if (!(!i || !o))
            try {
                const a = i.split("/")
                  , c = a[a.length - 1]
                  , d = `${o}/${c}`;
                await supabase.storage.from(e).remove([d])
            } catch (a) {
                console.error("Error deleting old file:", a)
            }
    }
    static async uploadProfileImage(e, i) {
        try {
            const o = await this.getProfile(e)
              , a = i.name.split(".").pop()
              , c = `${Date.now()}.${a}`
              , d = `${e}/${c}`;
            await this.deleteOldFile("profile-pictures", o == null ? void 0 : o.profile_image_url, e);
            const {error: h} = await supabase.storage.from("profile-pictures").upload(d, i);
            if (h)
                throw h;
            const {data: {publicUrl: g}} = supabase.storage.from("profile-pictures").getPublicUrl(d);
            return await this.updateProfile(e, {
                profile_image_url: g
            }),
            g
        } catch (o) {
            throw console.error("Error uploading profile image:", o),
            o
        }
    }
    static async deleteProfileImage(e, i) {
        try {
            await this.deleteOldFile("profile-pictures", i, e),
            await this.updateProfile(e, {
                profile_image_url: null
            })
        } catch (o) {
            throw console.error("Error deleting profile image:", o),
            o
        }
    }
    static async uploadResume(e, i) {
        try {
            const o = await this.getProfile(e)
              , a = i.name.split(".").pop()
              , c = `${Date.now()}.${a}`
              , d = `${e}/${c}`;
            await this.deleteOldFile("resumes", o == null ? void 0 : o.resume_url, e);
            const {error: h} = await supabase.storage.from("resumes").upload(d, i);
            if (h)
                throw h;
            const {data: {publicUrl: g}} = supabase.storage.from("resumes").getPublicUrl(d);
            return await this.updateProfile(e, {
                resume_url: g,
                resume_filename: i.name,
                resume_uploaded_at: new Date().toISOString()
            }),
            {
                url: g,
                filename: i.name
            }
        } catch (o) {
            throw console.error("Error uploading resume:", o),
            o
        }
    }
    static async deleteResume(e, i) {
        try {
            await this.deleteOldFile("resumes", i, e),
            await this.updateProfile(e, {
                resume_url: null,
                resume_filename: null,
                resume_uploaded_at: null
            })
        } catch (o) {
            throw console.error("Error deleting resume:", o),
            o
        }
    }
    static async downloadResume(e, i) {
        try {
            const a = await (await fetch(e)).blob()
              , c = window.URL.createObjectURL(a)
              , d = document.createElement("a");
            d.href = c,
            d.download = i,
            document.body.appendChild(d),
            d.click(),
            document.body.removeChild(d),
            window.URL.revokeObjectURL(c)
        } catch (o) {
            throw console.error("Error downloading resume:", o),
            o
        }
    }
    static async cleanupOrphanedFiles(e) {
        try {
            const i = await this.getProfile(e);
            if (!i)
                return;
            const [o,a] = await Promise.all([supabase.storage.from("profile-pictures").list(e), supabase.storage.from("resumes").list(e)]);
            if (o.data) {
                const c = i.profile_image_url ? i.profile_image_url.split("/").pop() : null
                  , d = o.data.filter(h => h.name !== c).map(h => `${e}/${h.name}`);
                d.length > 0 && await supabase.storage.from("profile-pictures").remove(d)
            }
            if (a.data) {
                const c = i.resume_url ? i.resume_url.split("/").pop() : null
                  , d = a.data.filter(h => h.name !== c).map(h => `${e}/${h.name}`);
                d.length > 0 && await supabase.storage.from("resumes").remove(d)
            }
        } catch (i) {
            console.error("Error cleaning up orphaned files:", i)
        }
    }
    static async getUserExperiences(e) {
        try {
            const {data: i, error: o} = await supabase.from("user_experiences").select("*").eq("user_id", e).order("display_order", {
                ascending: !1
            }).order("created_at", {
                ascending: !1
            });
            if (o)
                throw o;
            return i || []
        } catch (i) {
            throw console.error("Error fetching user experiences:", i),
            i
        }
    }
    static async createExperience(e, i) {
        try {
            const {data: o, error: a} = await supabase.from("user_experiences").insert({
                user_id: e,
                ...i
            }).select().single();
            if (a)
                throw a;
            return o
        } catch (o) {
            throw console.error("Error creating experience:", o),
            o
        }
    }
    static async updateExperience(e, i) {
        try {
            const {data: o, error: a} = await supabase.from("user_experiences").update(i).eq("id", e).select().single();
            if (a)
                throw a;
            return o
        } catch (o) {
            throw console.error("Error updating experience:", o),
            o
        }
    }
    static async deleteExperience(e) {
        try {
            const {error: i} = await supabase.from("user_experiences").delete().eq("id", e);
            if (i)
                throw i
        } catch (i) {
            throw console.error("Error deleting experience:", i),
            i
        }
    }
    static async reorderExperiences(e, i) {
        try {
            const o = i.map( (a, c) => ({
                id: a,
                display_order: i.length - c
            }));
            for (const a of o)
                await supabase.from("user_experiences").update({
                    display_order: a.display_order
                }).eq("id", a.id).eq("user_id", e)
        } catch (o) {
            throw console.error("Error reordering experiences:", o),
            o
        }
    }
}
const __vite_import_meta_env__ = {
    BASE_URL: "/",
    DEV: !1,
    MODE: "production",
    PROD: !0,
    SSR: !1,
    VITE_API_URL: "https://xigzlt6zoj.execute-api.us-east-1.amazonaws.com/dev",
    VITE_AWS_API_BASE_URL: "https://a2wzu306xj.execute-api.us-east-1.amazonaws.com",
    VITE_GOOGLE_CLIENT_ID: "185854441835-abbsuhu3tgrol1p5kcllvf92ftcsh7id.apps.googleusercontent.com",
    VITE_SUPABASE_ANON_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh0aHh1dHNsaXFwdG9vZGt6cmNwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4NTY5MTQsImV4cCI6MjA2NDQzMjkxNH0.K4XzmJauoydPB5jAECh4041MmZIvQLA3WaeACy8Y8mI",
    VITE_SUPABASE_URL: "https://xthxutsliqptoodkzrcp.supabase.co",
    VITE_VERCEL_BRANCH_URL: "hirebuddy-2-0-git-master-hirebuddys-projects-32a33911.vercel.app",
    VITE_VERCEL_DEPLOYMENT_ID: "dpl_D67J9DUbDcoxUe4r3B3azoqjeMec",
    VITE_VERCEL_ENV: "production",
    VITE_VERCEL_GIT_COMMIT_AUTHOR_LOGIN: "Nishant9119",
    VITE_VERCEL_GIT_COMMIT_AUTHOR_NAME: "Nishant Sharma",
    VITE_VERCEL_GIT_COMMIT_MESSAGE: "okokokok",
    VITE_VERCEL_GIT_COMMIT_REF: "master",
    VITE_VERCEL_GIT_COMMIT_SHA: "bf49cf139ad1234e2dbb56656df6568683ca6ac5",
    VITE_VERCEL_GIT_PREVIOUS_SHA: "",
    VITE_VERCEL_GIT_PROVIDER: "github",
    VITE_VERCEL_GIT_PULL_REQUEST_ID: "",
    VITE_VERCEL_GIT_REPO_ID: "1018025336",
    VITE_VERCEL_GIT_REPO_OWNER: "Nishant9119",
    VITE_VERCEL_GIT_REPO_SLUG: "hirebuddy_2.0",
    VITE_VERCEL_PROJECT_ID: "prj_sj9zpNuG6pFVo5CJZTUSbJeM4TY2",
    VITE_VERCEL_PROJECT_PRODUCTION_URL: "www.hirebuddy.net",
    VITE_VERCEL_TARGET_ENV: "production",
    VITE_VERCEL_URL: "hirebuddy-2-0-oeo9bvn18-hirebuddys-projects-32a33911.vercel.app"
};
class EnvironmentValidator {
    static validateEnvironment() {
        const e = []
          , i = [];
        return this.requiredVars.forEach(o => {
            __vite_import_meta_env__[o] || e.push(o)
        }
        ),
        this.forbiddenViteVars.forEach(o => {
            __vite_import_meta_env__[o] && (i.push(o),
            console.error(`🚨 SECURITY RISK: ${o} is exposed to the client! Remove VITE_ prefix and move to server-side.`))
        }
        ),
        {
            isValid: e.length === 0 && i.length === 0,
            missingVars: e,
            exposedSecrets: i
        }
    }
    static getSecureEnvVar(e) {
        const i = __vite_import_meta_env__[e];
        if (!i)
            throw new Error(`Required environment variable ${e} is not configured`);
        return i
    }
    static logEnvironmentStatus() {
        console.log("🔍 Environment Security Check:");
        const {isValid: e, missingVars: i, exposedSecrets: o} = this.validateEnvironment();
        e ? console.log("✅ Environment configuration is secure") : (i.length > 0 && console.warn("⚠️ Missing required variables:", i),
        o.length > 0 && console.error("🚨 Security issues found:", o))
    }
}
tr(EnvironmentValidator, "requiredVars", ["VITE_SUPABASE_URL", "VITE_SUPABASE_ANON_KEY", "VITE_AWS_API_BASE_URL", "VITE_GOOGLE_CLIENT_ID"]),
tr(EnvironmentValidator, "forbiddenViteVars", ["VITE_GOOGLE_CLIENT_SECRET", "VITE_OPENAI_API_KEY", "VITE_SUPABASE_SERVICE_ROLE_KEY", "VITE_GITHUB_CLIENT_SECRET", "VITE_AWS_SECRET_ACCESS_KEY", "VITE_STRIPE_SECRET_KEY"]);
class InputSanitizer {
    static sanitizeHtml(e) {
        return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;").replace(/\//g, "&#x2F;")
    }
    static sanitizeEmail(e) {
        return e.toLowerCase().trim()
    }
    static sanitizeUrl(e) {
        try {
            const i = new URL(e);
            if (!["http:", "https:"].includes(i.protocol))
                throw new Error("Invalid URL protocol");
            return i.toString()
        } catch {
            throw new Error("Invalid URL format")
        }
    }
    static sanitizeText(e) {
        return e.trim().replace(/[<>]/g, "").replace(/javascript:/gi, "").replace(/on\w+=/gi, "")
    }
    static sanitizeHtmlEmail(e) {
        return e.trim().replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "").replace(/javascript:/gi, "").replace(/\s*on\w+\s*=\s*["'][^"']*["']/gi, "").replace(/<\s*(form|input|textarea|select|button)[^>]*>/gi, "").replace(/<\/\s*(form|input|textarea|select|button)\s*>/gi, "")
    }
}
class InputValidator {
    static isValidEmail(e) {
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e) && e.length <= 254
    }
    static isValidUrl(e) {
        try {
            return new URL(e),
            !0
        } catch {
            return !1
        }
    }
    static isSafeText(e) {
        return ![/<script/i, /javascript:/i, /on\w+=/i, /<iframe/i, /<object/i, /<embed/i, /eval\(/i, /Function\(/i].some(o => o.test(e))
    }
    static isSafeHtmlEmail(e) {
        return ![/<script/i, /javascript:/i, /on\w+\s*=/i, /<iframe/i, /<object/i, /<embed/i, /<form/i, /<input/i, /<textarea/i, /<select/i, /<button/i, /eval\(/i, /Function\(/i, /document\./i, /window\./i].some(o => o.test(e))
    }
    static validateApiResponse(e, i) {
        return !e || typeof e != "object" ? !1 : i.every(o => o in e)
    }
}
class SecureErrorHandler {
    static createSafeError(e, i) {
        console.error("Detailed error:", e);
        const o = i || "An error occurred. Please try again.";
        return new Error(o)
    }
    static isSafeErrorMessage(e) {
        return ![/api[_-]?key/i, /secret/i, /token/i, /password/i, /internal server error/i, /database/i, /connection/i, /authentication failed/i].some(o => o.test(e))
    }
}
class OpenAIService {
    constructor() {
        tr(this, "baseUrl");
        this.baseUrl = `${getConfig().supabase.url}/functions/v1/openai-proxy`
    }
    async makeSecureRequest(e, i={}) {
        var o, a;
        try {
            const {data: {session: c}} = await supabase.auth.getSession();
            if (!(c != null && c.access_token))
                throw new Error("Authentication required for AI features");
            const d = await fetch(this.baseUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${c.access_token}`,
                    apikey: getConfig().supabase.anonKey
                },
                body: JSON.stringify({
                    model: i.model || "gpt-4o-mini",
                    messages: e,
                    temperature: i.temperature || .7,
                    max_tokens: i.maxTokens || 1500
                })
            });
            if (!d.ok) {
                const g = await d.json();
                throw new Error(`OpenAI API error: ${d.status} - ${g.message || "Unknown error"}`)
            }
            return ((a = (o = (await d.json()).choices[0]) == null ? void 0 : o.message) == null ? void 0 : a.content) || ""
        } catch (c) {
            throw console.error("Secure OpenAI request failed:", c),
            SecureErrorHandler.createSafeError(c, "AI service is temporarily unavailable. Please try again later.")
        }
    }
    async generateContentSuggestions(e, i, o, a) {
        const c = `
As a professional resume writer, generate content suggestions for a ${o} ${e} in the ${i} industry.

${a ? `Current description: "${a}"` : ""}

Please provide:
1. 5-7 impactful bullet points for work experience
2. 8-10 relevant technical and soft skills
3. 3-5 quantifiable achievements

Focus on:
- Action verbs and quantifiable results
- Industry-specific keywords
- ATS-friendly language
- Modern professional terminology

Return the response in this exact JSON format:
{
  "bulletPoints": ["bullet point 1", "bullet point 2", ...],
  "skills": ["skill 1", "skill 2", ...],
  "achievements": ["achievement 1", "achievement 2", ...]
}
`
          , d = [{
            role: "system",
            content: "You are an expert resume writer and career coach."
        }, {
            role: "user",
            content: c
        }]
          , h = await this.makeSecureRequest(d);
        try {
            return JSON.parse(h)
        } catch (g) {
            throw console.error("Failed to parse content suggestions response:", g),
            new Error("Invalid response format from AI service")
        }
    }
    async analyzeSkillGap(e, i, o) {
        const a = this.extractResumeText(e)
          , c = `
Analyze this resume for a ${i} position in the ${o} industry:

RESUME DATA:
${a}

TARGET ROLE: ${i} in ${o}

Provide a comprehensive skill gap analysis including:
1. Missing skills that are crucial for the target role
2. Recommended certifications to pursue
3. Current strength areas to highlight
4. Areas needing improvement
5. Overall readiness score (0-100)

Return the response in this exact JSON format:
{
  "missingSkills": ["skill 1", "skill 2", ...],
  "recommendedCertifications": ["cert 1", "cert 2", ...],
  "strengthAreas": ["strength 1", "strength 2", ...],
  "improvementAreas": ["area 1", "area 2", ...],
  "overallScore": 85
}
`
          , d = [{
            role: "system",
            content: "You are an expert career counselor and technical recruiter."
        }, {
            role: "user",
            content: c
        }]
          , h = await this.makeSecureRequest(d);
        try {
            return JSON.parse(h)
        } catch (g) {
            throw console.error("Failed to parse skill gap analysis response:", g),
            new Error("Invalid response format from AI service")
        }
    }
    async matchJobDescription(e, i) {
        const a = `
You are an expert ATS optimization specialist and resume writer. Analyze how well this resume matches the job description and provide comprehensive tailoring suggestions.

RESUME:
${this.extractResumeText(e)}

JOB DESCRIPTION:
${i}

Please provide a detailed analysis including:

1. MATCHING SCORE (0-100): Calculate based on:
   - Skills alignment (40%)
   - Experience relevance (30%)
   - Keyword presence (20%)
   - Education/qualifications match (10%)

2. KEYWORD ANALYSIS:
   - Keywords that already match between resume and job description
   - Important keywords missing from resume (focus on technical skills, tools, methodologies, certifications)

3. OPTIMIZATION SUGGESTIONS:
   - Updated professional summary that incorporates job-specific keywords and requirements
   - Specific improvements for each experience entry with job-relevant language
   - Skills to add (technical and soft skills mentioned in job description)
   - Skills to emphasize (existing skills that match job requirements)

Focus on:
- ATS-friendly keywords and phrases
- Quantifiable achievements and metrics
- Industry-specific terminology
- Action verbs that match the job requirements
- Technical skills and tools mentioned in the job posting
- Soft skills and competencies required
- Certifications and qualifications needed

Return the response in this exact JSON format (ensure valid JSON):
{
  "matchingScore": 75,
  "keywordMatches": ["React", "JavaScript", "Team Leadership", "Agile", "Problem Solving"],
  "missingKeywords": ["TypeScript", "AWS", "Docker", "CI/CD", "Scrum Master"],
  "suggestedChanges": {
    "summary": "Results-driven Software Engineer with 5+ years of experience in React, JavaScript, and team leadership. Proven track record of delivering scalable web applications using Agile methodologies. Expertise in problem-solving and cross-functional collaboration, with strong background in modern development practices and cloud technologies.",
    "experienceUpdates": [
      {
        "experienceId": "exp-1",
        "suggestedDescription": "Led development of responsive web applications using React and JavaScript, collaborating with cross-functional teams in Agile environment. Implemented CI/CD pipelines and deployed applications to AWS cloud infrastructure.",
        "suggestedAchievements": [
          "Increased application performance by 40% through code optimization and implementation of best practices",
          "Mentored 3 junior developers and conducted code reviews to ensure quality standards",
          "Successfully delivered 15+ projects on time using Scrum methodology"
        ]
      }
    ],
    "skillsToAdd": ["TypeScript", "AWS", "Docker", "CI/CD", "Scrum"],
    "skillsToEmphasize": ["React", "JavaScript", "Team Leadership", "Agile"]
  }
}

Important: Ensure the response is valid JSON. Do not include any text before or after the JSON object.
`
          , c = [{
            role: "system",
            content: "You are an expert ATS optimization specialist and resume writer. Always respond with valid JSON only."
        }, {
            role: "user",
            content: a
        }]
          , d = await this.makeSecureRequest(c, {
            temperature: .3
        });
        try {
            const h = d.trim()
              , g = h.match(/\{[\s\S]*\}/)
              , b = g ? g[0] : h
              , _ = JSON.parse(b);
            if (!_.matchingScore || !_.keywordMatches || !_.missingKeywords || !_.suggestedChanges)
                throw new Error("Invalid response structure from AI service");
            return _.keywordMatches = _.keywordMatches || [],
            _.missingKeywords = _.missingKeywords || [],
            _.suggestedChanges.skillsToAdd = _.suggestedChanges.skillsToAdd || [],
            _.suggestedChanges.skillsToEmphasize = _.suggestedChanges.skillsToEmphasize || [],
            _.suggestedChanges.experienceUpdates = _.suggestedChanges.experienceUpdates || [],
            _.matchingScore = Math.max(0, Math.min(100, _.matchingScore)),
            _
        } catch (h) {
            return console.error("Failed to parse job matching response:", h),
            console.error("Raw response:", d),
            {
                matchingScore: 50,
                keywordMatches: [],
                missingKeywords: ["Please try again - AI analysis failed"],
                suggestedChanges: {
                    summary: "Unable to generate optimized summary. Please try the analysis again.",
                    experienceUpdates: [],
                    skillsToAdd: [],
                    skillsToEmphasize: []
                }
            }
        }
    }
    async analyzeSkillsMarket(e, i, o, a) {
        const c = i && o ? `Target Role: ${i} in ${o} industry (${a || "Mid-level"})` : "General market analysis"
          , d = `
You are an expert career analyst and market researcher with access to current job market data. Analyze the provided skills and generate comprehensive market insights.

USER SKILLS: ${e.join(", ") || "None provided"}
CONTEXT: ${c}

Please provide a detailed analysis including:

1. SKILLS ANALYSIS: For each of the top 25-30 most relevant skills in the current market (including the user's skills), provide:
   - Skill name
   - Whether user has it (true/false)
   - Demand level (high/medium/low) based on current job market
   - Market trend (rising/stable/declining)
   - Estimated job matches (realistic numbers)
   - Category (technical/soft/tool/language/certification)
   - Priority score (0-100)
   - Salary impact (e.g., "+15% average salary", "Standard market rate")
   - Brief description of why it's important

2. MARKET INSIGHTS:
   - Overall skills score (0-100)
   - Market alignment percentage
   - Top 5 specific recommendations for improvement
   - 3-5 emerging skills to watch
   - Current industry trends

Focus on:
- Current high-demand skills (AI/ML, Cloud, DevOps, Data Science, Cybersecurity)
- Emerging technologies (GenAI, Edge Computing, Quantum, Web3)
- Essential soft skills (Leadership, Communication, Problem-solving)
- Industry-specific tools and certifications
- Remote work and collaboration skills
- Include diverse skill types across all categories

Return response in this exact JSON format:
{
  "skillsAnalysis": [
    {
      "skill": "React",
      "userHas": true,
      "demandLevel": "high",
      "marketTrend": "rising",
      "jobMatches": 1250,
      "category": "technical",
      "priority": 95,
      "salaryImpact": "+12% average salary",
      "description": "Essential frontend framework with high market demand"
    }
  ],
  "marketInsights": {
    "overallScore": 75,
    "marketAlignment": 68,
    "recommendations": ["Learn TypeScript", "Get AWS certification"],
    "emergingSkills": ["Next.js", "Generative AI"],
    "industryTrends": ["Remote-first development", "AI integration"]
  }
}
`
          , h = [{
            role: "system",
            content: "You are an expert career analyst and market researcher with deep knowledge of current job market trends, salary data, and skill demands across industries."
        }, {
            role: "user",
            content: d
        }]
          , g = await this.makeSecureRequest(h, {
            temperature: .3
        });
        try {
            return JSON.parse(g)
        } catch (b) {
            throw console.error("Failed to parse skills market analysis response:", b),
            new Error("Invalid response format from AI service")
        }
    }
    async generateAdditionalSkillRecommendations(e, i, o, a, c, d, h=15) {
        const g = a && c ? `Target Role: ${a} in ${c} industry (${d || "Mid-level"})` : "General market analysis"
          , b = `
You are an expert career analyst. Generate ${h} new skill recommendations that are different from previously suggested skills.

USER SKILLS: ${e.join(", ") || "None provided"}
EXCLUDED SKILLS: ${i.join(", ") || "None"}
EXISTING RECOMMENDATIONS: ${o.join(", ") || "None"}
CONTEXT: ${g}

Generate ${h} NEW skill recommendations that:
1. Are NOT in the excluded or existing recommendations lists
2. Are relevant to the user's context and career goals
3. Include a mix of technical skills, tools, certifications, and soft skills
4. Focus on high-demand and emerging skills
5. Are diverse across different categories

For each skill, provide:
- Skill name (must be unique and different from excluded/existing)
- Whether user has it (false, since these are recommendations)
- Demand level (high/medium/low)
- Market trend (rising/stable/declining)
- Estimated job matches
- Category (technical/soft/tool/language/certification)
- Priority score (0-100)
- Salary impact
- Brief description

Focus on fresh, relevant skills like:
- Emerging AI/ML technologies (GPT integration, LangChain, Vector Databases)
- Modern cloud technologies (Serverless, Edge Computing)
- DevOps and automation tools
- Cybersecurity skills
- Data analysis and visualization
- Project management and leadership
- Industry-specific certifications
- Communication and collaboration tools

Return ONLY a JSON array of skills:
[
  {
    "skill": "LangChain",
    "userHas": false,
    "demandLevel": "high",
    "marketTrend": "rising",
    "jobMatches": 890,
    "category": "technical",
    "priority": 88,
    "salaryImpact": "+18% average salary",
    "description": "Framework for building AI applications with LLMs"
  }
]
`
          , _ = [{
            role: "system",
            content: "You are an expert career analyst. Generate diverse, unique skill recommendations that help users stay competitive in the job market."
        }, {
            role: "user",
            content: b
        }]
          , $ = await this.makeSecureRequest(_, {
            temperature: .4
        });
        try {
            const _e = JSON.parse($);
            return Array.isArray(_e) ? _e : []
        } catch (_e) {
            return console.error("Failed to parse additional skill recommendations response:", _e),
            []
        }
    }
    extractResumeText(e) {
        var o, a, c, d, h, g, b;
        const i = [];
        if (e.personalInfo && (i.push(`Name: ${e.personalInfo.name}`),
        i.push(`Email: ${e.personalInfo.email}`),
        i.push(`Location: ${e.personalInfo.location}`)),
        e.summary && i.push(`
SUMMARY:
${e.summary}`),
        ((o = e.experience) == null ? void 0 : o.length) > 0 && (i.push(`
EXPERIENCE:`),
        e.experience.forEach( (_, $) => {
            var _e;
            i.push(`${$ + 1}. ${_.jobTitle} at ${_.company} (${_.startDate} - ${_.endDate || "Present"})`),
            _.description && i.push(`   Description: ${_.description}`),
            ((_e = _.achievements) == null ? void 0 : _e.length) > 0 && i.push(`   Achievements: ${_.achievements.join("; ")}`)
        }
        )),
        ((a = e.education) == null ? void 0 : a.length) > 0 && (i.push(`
EDUCATION:`),
        e.education.forEach(_ => {
            i.push(`${_.degree} from ${_.school} (${_.startDate} - ${_.endDate})`)
        }
        )),
        e.skills) {
            const _ = [...e.skills.technical || [], ...e.skills.soft || [], ...e.skills.languages || [], ...e.skills.frameworks || []];
            _.length > 0 && i.push(`
SKILLS: ${_.join(", ")}`)
        }
        return ((c = e.projects) == null ? void 0 : c.length) > 0 && (i.push(`
PROJECTS:`),
        e.projects.forEach(_ => {
            var $;
            i.push(`${_.name}: ${_.description}`),
            (($ = _.technologies) == null ? void 0 : $.length) > 0 && i.push(`   Technologies: ${_.technologies.join(", ")}`)
        }
        )),
        ((d = e.certifications) == null ? void 0 : d.length) > 0 && (i.push(`
CERTIFICATIONS:`),
        e.certifications.forEach(_ => {
            i.push(`${_.name} - ${_.issuer} (${_.date})`)
        }
        )),
        ((h = e.languages) == null ? void 0 : h.length) > 0 && (i.push(`
LANGUAGES:`),
        e.languages.forEach(_ => {
            i.push(`${_.language} (${_.proficiency})`)
        }
        )),
        ((g = e.volunteer) == null ? void 0 : g.length) > 0 && (i.push(`
VOLUNTEER EXPERIENCE:`),
        e.volunteer.forEach(_ => {
            i.push(`${_.role} at ${_.organization} (${_.startDate} - ${_.endDate})`),
            _.description && i.push(`   Description: ${_.description}`)
        }
        )),
        ((b = e.awards) == null ? void 0 : b.length) > 0 && (i.push(`
AWARDS AND HONORS:`),
        e.awards.forEach(_ => {
            i.push(`${_.title} - ${_.issuer} (${_.date})`),
            _.description && i.push(`   Description: ${_.description}`)
        }
        )),
        i.join(`
`)
    }
}
const openaiService = new OpenAIService
  , SkillsAnalyticsWidget = () => {
    const {user: s} = useAuth()
      , [e,i] = reactExports.useState(null)
      , [o,a] = reactExports.useState(!0)
      , [c,d] = reactExports.useState(!1)
      , [h,g] = reactExports.useState(!1)
      , [b,_] = reactExports.useState([])
      , [$,_e] = reactExports.useState(null)
      , [tt,rt] = reactExports.useState(null)
      , [et,it] = reactExports.useState(null)
      , [st,nt] = reactExports.useState(new Set)
      , [lt,dt] = reactExports.useState(new Set);
    reactExports.useEffect( () => {
        (async () => {
            if (!(s != null && s.id)) {
                a(!1);
                return
            }
            try {
                a(!0),
                rt(null);
                const bt = await ProfileService.getProfile(s.id);
                i(bt);
                const Tt = localStorage.getItem(`removedSkills_${s.id}`);
                Tt && nt(new Set(JSON.parse(Tt))),
                await ot(bt)
            } catch (bt) {
                if (console.error("Error loading skills data:", bt),
                rt(bt instanceof Error ? bt.message : "Failed to load skills data"),
                e) {
                    const Tt = pt((e == null ? void 0 : e.skills) || []);
                    _(Tt)
                }
            } finally {
                a(!1)
            }
        }
        )()
    }
    , [s == null ? void 0 : s.id]);
    const ot = async vt => {
        try {
            d(!0);
            const bt = (vt == null ? void 0 : vt.skills) || []
              , Tt = (vt == null ? void 0 : vt.job_title) || (vt == null ? void 0 : vt.desired_job_title)
              , Yt = vt == null ? void 0 : vt.industry
              , Nt = vt == null ? void 0 : vt.experience_level
              , jt = await openaiService.analyzeSkillsMarket(bt, Tt, Yt, Nt);
            _(jt.skillsAnalysis),
            _e(jt.marketInsights),
            it(new Date)
        } catch (bt) {
            console.error("AI analysis failed:", bt);
            const Tt = pt((vt == null ? void 0 : vt.skills) || []);
            _(Tt),
            rt("AI analysis unavailable. Showing basic analysis.")
        } finally {
            d(!1)
        }
    }
      , at = async () => {
        if (!(!(s != null && s.id) || !e || h))
            try {
                g(!0);
                const vt = (e == null ? void 0 : e.skills) || []
                  , bt = (e == null ? void 0 : e.job_title) || (e == null ? void 0 : e.desired_job_title)
                  , Tt = e == null ? void 0 : e.industry
                  , Yt = e == null ? void 0 : e.experience_level
                  , Nt = b.map(Et => Et.skill)
                  , jt = Array.from(st)
                  , xt = await openaiService.generateAdditionalSkillRecommendations(vt, jt, Nt, bt, Tt, Yt, 15);
                if (xt.length > 0) {
                    const Et = xt.filter(Pt => !Nt.some(St => St.toLowerCase() === Pt.skill.toLowerCase()));
                    _(Pt => [...Pt, ...Et]),
                    Jt.success(`Added ${Et.length} new skill recommendations`)
                } else {
                    const Et = ht(vt, Nt, jt);
                    Et.length > 0 && (_(Pt => [...Pt, ...Et]),
                    Jt.success(`Added ${Et.length} additional skill recommendations`))
                }
            } catch (vt) {
                console.error("Error loading more skills:", vt);
                const bt = ht((e == null ? void 0 : e.skills) || [], b.map(Tt => Tt.skill), Array.from(st));
                bt.length > 0 ? (_(Tt => [...Tt, ...bt]),
                Jt.success(`Added ${bt.length} additional skill recommendations`)) : Jt.error("Unable to load more skill recommendations. Please try refreshing.")
            } finally {
                g(!1)
            }
    }
      , ht = (vt, bt, Tt) => {
        const Yt = [{
            skill: "TensorFlow",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 850,
            category: "technical",
            priority: 92,
            salaryImpact: "+20% average",
            description: "Open-source machine learning framework"
        }, {
            skill: "PyTorch",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 780,
            category: "technical",
            priority: 90,
            salaryImpact: "+18% average",
            description: "Deep learning framework"
        }, {
            skill: "Pandas",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "stable",
            jobMatches: 920,
            category: "technical",
            priority: 88,
            salaryImpact: "+15% average",
            description: "Data manipulation and analysis library"
        }, {
            skill: "Scikit-learn",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "stable",
            jobMatches: 650,
            category: "technical",
            priority: 82,
            salaryImpact: "+12% average",
            description: "Machine learning library for Python"
        }, {
            skill: "OpenAI API",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 560,
            category: "technical",
            priority: 89,
            salaryImpact: "+22% average",
            description: "Integration with AI models"
        }, {
            skill: "LangChain",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 480,
            category: "technical",
            priority: 86,
            salaryImpact: "+25% average",
            description: "Framework for building AI applications"
        }, {
            skill: "Google Cloud Platform",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 890,
            category: "tool",
            priority: 87,
            salaryImpact: "+18% average",
            description: "Google cloud services platform"
        }, {
            skill: "Azure",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 850,
            category: "tool",
            priority: 86,
            salaryImpact: "+17% average",
            description: "Microsoft cloud platform"
        }, {
            skill: "Serverless",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 720,
            category: "technical",
            priority: 84,
            salaryImpact: "+16% average",
            description: "Cloud computing execution model"
        }, {
            skill: "CI/CD",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "stable",
            jobMatches: 980,
            category: "technical",
            priority: 88,
            salaryImpact: "+14% average",
            description: "Continuous integration and deployment"
        }, {
            skill: "GitHub Actions",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 620,
            category: "tool",
            priority: 78,
            salaryImpact: "+8% average",
            description: "Automation and CI/CD platform"
        }, {
            skill: "Pulumi",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 340,
            category: "tool",
            priority: 72,
            salaryImpact: "+15% average",
            description: "Infrastructure as code platform"
        }, {
            skill: "Deno",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 280,
            category: "technical",
            priority: 70,
            salaryImpact: "+10% average",
            description: "Modern JavaScript/TypeScript runtime"
        }, {
            skill: "Bun",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 250,
            category: "technical",
            priority: 68,
            salaryImpact: "+8% average",
            description: "Fast JavaScript runtime and bundler"
        }, {
            skill: "Vite",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 450,
            category: "tool",
            priority: 75,
            salaryImpact: "+6% average",
            description: "Fast build tool for modern web projects"
        }, {
            skill: "Turborepo",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 320,
            category: "tool",
            priority: 73,
            salaryImpact: "+12% average",
            description: "High-performance monorepo tool"
        }, {
            skill: "SvelteKit",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 380,
            category: "technical",
            priority: 74,
            salaryImpact: "+8% average",
            description: "Full-stack Svelte framework"
        }, {
            skill: "Astro",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 290,
            category: "technical",
            priority: 71,
            salaryImpact: "+7% average",
            description: "Static site generator for modern web"
        }, {
            skill: "PostgreSQL",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "stable",
            jobMatches: 1100,
            category: "tool",
            priority: 85,
            salaryImpact: "+12% average",
            description: "Advanced open-source relational database"
        }, {
            skill: "Prisma",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 480,
            category: "tool",
            priority: 76,
            salaryImpact: "+10% average",
            description: "Modern database toolkit"
        }, {
            skill: "Supabase",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 420,
            category: "tool",
            priority: 74,
            salaryImpact: "+8% average",
            description: "Open-source Firebase alternative"
        }, {
            skill: "PlanetScale",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 280,
            category: "tool",
            priority: 69,
            salaryImpact: "+12% average",
            description: "Serverless MySQL database platform"
        }, {
            skill: "Elasticsearch",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "stable",
            jobMatches: 620,
            category: "tool",
            priority: 77,
            salaryImpact: "+14% average",
            description: "Search and analytics engine"
        }, {
            skill: "Cybersecurity",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 950,
            category: "technical",
            priority: 91,
            salaryImpact: "+25% average",
            description: "Information security practices"
        }, {
            skill: "Penetration Testing",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 520,
            category: "technical",
            priority: 85,
            salaryImpact: "+30% average",
            description: "Security testing methodology"
        }, {
            skill: "Jest",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "stable",
            jobMatches: 720,
            category: "tool",
            priority: 78,
            salaryImpact: "+5% average",
            description: "JavaScript testing framework"
        }, {
            skill: "Cypress",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 480,
            category: "tool",
            priority: 76,
            salaryImpact: "+8% average",
            description: "End-to-end testing framework"
        }, {
            skill: "Playwright",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 380,
            category: "tool",
            priority: 74,
            salaryImpact: "+10% average",
            description: "Cross-browser automation library"
        }, {
            skill: "Agile Methodology",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "stable",
            jobMatches: 1200,
            category: "soft",
            priority: 86,
            salaryImpact: "+8% average",
            description: "Iterative project management approach"
        }, {
            skill: "Scrum Master",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "stable",
            jobMatches: 780,
            category: "certification",
            priority: 84,
            salaryImpact: "+15% average",
            description: "Agile framework facilitation role"
        }, {
            skill: "Product Management",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 890,
            category: "soft",
            priority: 88,
            salaryImpact: "+20% average",
            description: "Product strategy and development"
        }, {
            skill: "Design Thinking",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "stable",
            jobMatches: 650,
            category: "soft",
            priority: 75,
            salaryImpact: "+10% average",
            description: "Human-centered problem solving"
        }, {
            skill: "Cross-functional Collaboration",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "stable",
            jobMatches: 1100,
            category: "soft",
            priority: 82,
            salaryImpact: "+8% average",
            description: "Working across different teams"
        }, {
            skill: "Mentoring",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "stable",
            jobMatches: 580,
            category: "soft",
            priority: 76,
            salaryImpact: "+12% average",
            description: "Guiding and developing others"
        }, {
            skill: "Tableau",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "stable",
            jobMatches: 620,
            category: "tool",
            priority: 77,
            salaryImpact: "+12% average",
            description: "Data visualization platform"
        }, {
            skill: "Power BI",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 580,
            category: "tool",
            priority: 75,
            salaryImpact: "+10% average",
            description: "Business analytics tool"
        }, {
            skill: "Google Analytics",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "stable",
            jobMatches: 750,
            category: "tool",
            priority: 72,
            salaryImpact: "+6% average",
            description: "Web analytics service"
        }, {
            skill: "Mixpanel",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "stable",
            jobMatches: 320,
            category: "tool",
            priority: 68,
            salaryImpact: "+8% average",
            description: "Product analytics platform"
        }, {
            skill: "Web3",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 450,
            category: "technical",
            priority: 79,
            salaryImpact: "+25% average",
            description: "Decentralized web technologies"
        }, {
            skill: "Blockchain",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "stable",
            jobMatches: 520,
            category: "technical",
            priority: 80,
            salaryImpact: "+22% average",
            description: "Distributed ledger technology"
        }, {
            skill: "Solidity",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 280,
            category: "technical",
            priority: 77,
            salaryImpact: "+30% average",
            description: "Smart contract programming language"
        }, {
            skill: "IoT",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 480,
            category: "technical",
            priority: 73,
            salaryImpact: "+15% average",
            description: "Internet of Things technologies"
        }, {
            skill: "Edge Computing",
            userHas: !1,
            demandLevel: "medium",
            marketTrend: "rising",
            jobMatches: 380,
            category: "technical",
            priority: 81,
            salaryImpact: "+18% average",
            description: "Distributed computing paradigm"
        }]
          , Nt = vt.map(Et => Et.toLowerCase().trim())
          , jt = bt.map(Et => Et.toLowerCase().trim())
          , xt = Tt.map(Et => Et.toLowerCase().trim());
        return Yt.filter(Et => {
            const Pt = Et.skill.toLowerCase();
            return !Nt.some(St => St.includes(Pt) || Pt.includes(St)) && !jt.includes(Pt) && !xt.includes(Pt)
        }
        ).sort( (Et, Pt) => Pt.priority - Et.priority).slice(0, 10)
    }
      , pt = vt => {
        const bt = [{
            skill: "React",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 1250,
            category: "technical",
            priority: 95,
            salaryImpact: "+12% average",
            description: "Popular frontend framework"
        }, {
            skill: "TypeScript",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 980,
            category: "technical",
            priority: 92,
            salaryImpact: "+15% average",
            description: "Type-safe JavaScript"
        }, {
            skill: "Python",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 1100,
            category: "technical",
            priority: 90,
            salaryImpact: "+18% average",
            description: "Versatile programming language"
        }, {
            skill: "AWS",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 945,
            category: "tool",
            priority: 89,
            salaryImpact: "+20% average",
            description: "Leading cloud platform"
        }, {
            skill: "Machine Learning",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 890,
            category: "technical",
            priority: 93,
            salaryImpact: "+25% average",
            description: "AI/ML capabilities"
        }, {
            skill: "Node.js",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "stable",
            jobMatches: 875,
            category: "technical",
            priority: 88,
            salaryImpact: "+8% average",
            description: "Backend JavaScript runtime"
        }, {
            skill: "SQL",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "stable",
            jobMatches: 1300,
            category: "technical",
            priority: 88,
            salaryImpact: "+10% average",
            description: "Database query language"
        }, {
            skill: "Docker",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "stable",
            jobMatches: 720,
            category: "tool",
            priority: 85,
            salaryImpact: "+10% average",
            description: "Container technology"
        }, {
            skill: "Kubernetes",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "rising",
            jobMatches: 650,
            category: "tool",
            priority: 87,
            salaryImpact: "+22% average",
            description: "Container orchestration"
        }, {
            skill: "Git",
            userHas: !1,
            demandLevel: "high",
            marketTrend: "stable",
            jobMatches: 1150,
            category: "tool",
            priority: 85,
            salaryImpact: "+5% average",
            description: "Version control system"
        }]
          , Tt = vt.map(Yt => Yt.toLowerCase().trim());
        return bt.map(Yt => ({
            ...Yt,
            userHas: Tt.some(Nt => Nt.includes(Yt.skill.toLowerCase()) || Yt.skill.toLowerCase().includes(Nt))
        })).sort( (Yt, Nt) => Nt.priority - Yt.priority)
    }
      , gt = async () => {
        e && await ot(e)
    }
      , wt = async vt => {
        if (!(s != null && s.id) || !e) {
            Jt.error("Please sign in to add skills");
            return
        }
        dt(bt => new Set([...bt, vt]));
        try {
            const bt = e.skills || [];
            if (bt.includes(vt)) {
                Jt.info("Skill already added to your profile");
                return
            }
            const Tt = [...bt, vt]
              , Yt = await ProfileService.updateProfile(s.id, {
                skills: Tt
            });
            i(Yt),
            _(Nt => Nt.map(jt => jt.skill === vt ? {
                ...jt,
                userHas: !0
            } : jt)),
            Jt.success(`Added "${vt}" to your profile`)
        } catch (bt) {
            console.error("Error adding skill:", bt),
            Jt.error("Failed to add skill. Please try again.")
        } finally {
            dt(bt => {
                const Tt = new Set(bt);
                return Tt.delete(vt),
                Tt
            }
            )
        }
    }
      , yt = async vt => {
        if (!(s != null && s.id))
            return;
        const bt = new Set([...st, vt]);
        nt(bt),
        localStorage.setItem(`removedSkills_${s.id}`, JSON.stringify([...bt])),
        Jt.success(`"${vt}" removed from recommendations`),
        Mt().filter(Yt => Yt.skill !== vt).length < 4 && setTimeout( () => {
            at()
        }
        , 500)
    }
      , Rt = () => {
        const vt = b.filter(Nt => Nt.userHas)
          , bt = vt.filter(Nt => Nt.demandLevel === "high")
          , Tt = vt.filter(Nt => Nt.marketTrend === "rising")
          , Yt = vt.filter(Nt => Nt.category === "technical");
        return {
            total: vt.length,
            highDemand: bt.length,
            rising: Tt.length,
            technical: Yt.length,
            marketAlignment: ($ == null ? void 0 : $.marketAlignment) || Math.round(bt.length / Math.max(vt.length, 1) * 100)
        }
    }
      , Mt = () => b.filter(vt => !vt.userHas && vt.demandLevel === "high" && !st.has(vt.skill)).slice(0, 8)
      , ss = vt => {
        switch (vt) {
        case "rising":
            return jsxRuntimeExports.jsx(TrendingUp, {
                className: "h-3 w-3 text-green-600"
            });
        case "stable":
            return jsxRuntimeExports.jsx("div", {
                className: "h-3 w-3 bg-yellow-500 rounded-full"
            });
        case "declining":
            return jsxRuntimeExports.jsx(TrendingDown, {
                className: "h-3 w-3 text-red-600"
            })
        }
    }
      , zt = vt => {
        switch (vt) {
        case "technical":
            return jsxRuntimeExports.jsx(Code, {
                className: "h-4 w-4"
            });
        case "soft":
            return jsxRuntimeExports.jsx(Users, {
                className: "h-4 w-4"
            });
        case "tool":
            return jsxRuntimeExports.jsx(Zap, {
                className: "h-4 w-4"
            });
        case "language":
            return jsxRuntimeExports.jsx(Brain, {
                className: "h-4 w-4"
            });
        case "certification":
            return jsxRuntimeExports.jsx(Award, {
                className: "h-4 w-4"
            })
        }
    }
    ;
    if (o)
        return jsxRuntimeExports.jsxs(Card, {
            className: "border-0 shadow-sm bg-white",
            children: [jsxRuntimeExports.jsx(CardHeader, {
                className: "pb-4",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "space-y-2",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "h-6 bg-gray-200 rounded w-32 animate-pulse"
                        }), jsxRuntimeExports.jsx("div", {
                            className: "h-4 bg-gray-200 rounded w-24 animate-pulse"
                        })]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "h-8 bg-gray-200 rounded w-16 animate-pulse"
                    })]
                })
            }), jsxRuntimeExports.jsx(CardContent, {
                className: "space-y-4",
                children: [1, 2, 3].map(vt => jsxRuntimeExports.jsx("div", {
                    className: "animate-pulse",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-between p-3 border rounded-lg",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "space-y-1 flex-1",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "h-4 bg-gray-200 rounded w-3/4"
                            }), jsxRuntimeExports.jsx("div", {
                                className: "h-3 bg-gray-200 rounded w-1/2"
                            })]
                        }), jsxRuntimeExports.jsx("div", {
                            className: "h-6 bg-gray-200 rounded w-16"
                        })]
                    })
                }, vt))
            })]
        });
    if (!s)
        return jsxRuntimeExports.jsxs(Card, {
            className: "border-0 shadow-sm bg-white",
            children: [jsxRuntimeExports.jsx(CardHeader, {
                className: "pb-4",
                children: jsxRuntimeExports.jsxs(CardTitle, {
                    className: "text-xl font-bold text-gray-900 flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx(Brain, {
                        className: "h-5 w-5 text-blue-600"
                    }), "AI Skills Analytics"]
                })
            }), jsxRuntimeExports.jsx(CardContent, {
                children: jsxRuntimeExports.jsxs("div", {
                    className: "text-center py-8",
                    children: [jsxRuntimeExports.jsx(Brain, {
                        className: "h-12 w-12 mx-auto mb-4 text-gray-400"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-600 mb-4",
                        children: "Sign in to get AI-powered skills analysis"
                    }), jsxRuntimeExports.jsx(Button, {
                        asChild: !0,
                        children: jsxRuntimeExports.jsx(Link, {
                            to: "/signin",
                            children: "Sign In"
                        })
                    })]
                })
            })]
        });
    const At = Rt()
      , kt = Mt();
    return jsxRuntimeExports.jsxs(Card, {
        className: "border-0 shadow-sm bg-white h-fit",
        children: [jsxRuntimeExports.jsx(CardHeader, {
            className: "pb-3",
            children: jsxRuntimeExports.jsxs("div", {
                className: "flex items-center justify-between",
                children: [jsxRuntimeExports.jsxs("div", {
                    children: [jsxRuntimeExports.jsxs(CardTitle, {
                        className: "text-lg font-bold text-gray-900 flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Brain, {
                            className: "h-5 w-5 text-blue-600"
                        }), "AI Skills Analytics", c && jsxRuntimeExports.jsx(LoaderCircle, {
                            className: "h-4 w-4 animate-spin text-blue-600"
                        })]
                    }), jsxRuntimeExports.jsxs("p", {
                        className: "text-sm text-gray-600 mt-1",
                        children: [At.total, " skills • ", At.marketAlignment, "% market aligned", $ && jsxRuntimeExports.jsxs("span", {
                            className: "ml-2 inline-flex items-center gap-1",
                            children: [jsxRuntimeExports.jsx(Sparkles, {
                                className: "h-3 w-3 text-blue-500"
                            }), "AI-powered"]
                        })]
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx(Button, {
                        variant: "ghost",
                        size: "sm",
                        onClick: gt,
                        disabled: c,
                        children: jsxRuntimeExports.jsx(RefreshCw, {
                            className: cn("h-4 w-4", c && "animate-spin")
                        })
                    }), jsxRuntimeExports.jsx(Button, {
                        variant: "outline",
                        size: "sm",
                        asChild: !0,
                        children: jsxRuntimeExports.jsxs(Link, {
                            to: "/profile",
                            className: "flex items-center gap-1",
                            children: [jsxRuntimeExports.jsx(Plus, {
                                className: "h-4 w-4"
                            }), "Add"]
                        })
                    })]
                })]
            })
        }), jsxRuntimeExports.jsxs(CardContent, {
            className: "space-y-4",
            children: [tt && jsxRuntimeExports.jsxs("div", {
                className: "flex items-center gap-2 p-2 bg-yellow-50 border border-yellow-200 rounded-lg",
                children: [jsxRuntimeExports.jsx(Info, {
                    className: "h-4 w-4 text-yellow-600"
                }), jsxRuntimeExports.jsx("span", {
                    className: "text-sm text-yellow-800",
                    children: tt
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "grid grid-cols-2 gap-3",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "bg-green-50 rounded-lg p-3 text-center border border-green-200",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "text-lg font-bold text-green-700",
                        children: At.highDemand
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-xs text-green-600",
                        children: "High Demand"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "bg-blue-50 rounded-lg p-3 text-center border border-blue-200",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "text-lg font-bold text-blue-700",
                        children: [($ == null ? void 0 : $.overallScore) || At.marketAlignment, $ != null && $.overallScore ? "" : "%"]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-xs text-blue-600",
                        children: $ != null && $.overallScore ? "AI Score" : "Market Aligned"
                    })]
                })]
            }), jsxRuntimeExports.jsxs("div", {
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between mb-2",
                    children: [jsxRuntimeExports.jsx("span", {
                        className: "text-sm font-medium text-gray-700",
                        children: "Market Alignment"
                    }), jsxRuntimeExports.jsxs("span", {
                        className: "text-sm text-gray-600",
                        children: [At.marketAlignment, "%"]
                    })]
                }), jsxRuntimeExports.jsx(Progress, {
                    value: At.marketAlignment,
                    className: "h-2"
                })]
            }), ($ == null ? void 0 : $.recommendations) && $.recommendations.length > 0 && jsxRuntimeExports.jsxs("div", {
                children: [jsxRuntimeExports.jsxs("h4", {
                    className: "font-semibold text-gray-900 mb-2 flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx(Lightbulb, {
                        className: "h-4 w-4 text-yellow-600"
                    }), "AI Recommendations"]
                }), jsxRuntimeExports.jsx("div", {
                    className: "space-y-1",
                    children: $.recommendations.slice(0, 3).map( (vt, bt) => jsxRuntimeExports.jsxs("div", {
                        className: "text-sm text-gray-700 flex items-start gap-2",
                        children: [jsxRuntimeExports.jsx("span", {
                            className: "text-blue-600 font-medium",
                            children: "•"
                        }), jsxRuntimeExports.jsx("span", {
                            children: vt
                        })]
                    }, bt))
                })]
            }), kt.length > 0 && jsxRuntimeExports.jsxs("div", {
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between mb-2",
                    children: [jsxRuntimeExports.jsxs("h4", {
                        className: "font-semibold text-gray-900 flex items-center gap-2 flex-1 min-w-0",
                        children: [jsxRuntimeExports.jsx(Target, {
                            className: "h-4 w-4 text-blue-600 flex-shrink-0"
                        }), jsxRuntimeExports.jsx("span", {
                            className: "truncate",
                            children: "Top Skill Recommendations"
                        })]
                    }), b.length > 15 && jsxRuntimeExports.jsx(Button, {
                        variant: "ghost",
                        size: "sm",
                        onClick: at,
                        disabled: h,
                        className: "text-xs h-6 px-2 ml-2 flex-shrink-0",
                        children: h ? jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                            children: jsxRuntimeExports.jsx(LoaderCircle, {
                                className: "h-3 w-3 animate-spin"
                            })
                        }) : jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                            children: jsxRuntimeExports.jsx(Plus, {
                                className: "h-3 w-3"
                            })
                        })
                    })]
                }), jsxRuntimeExports.jsx("div", {
                    className: "space-y-2",
                    children: kt.slice(0, 6).map(vt => jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-between p-2 border rounded-lg hover:bg-gray-50 transition-colors",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2 flex-1 min-w-0",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "w-6 h-6 rounded bg-gray-100 flex items-center justify-center flex-shrink-0",
                                children: zt(vt.category)
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "min-w-0 flex-1",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-1 mb-1",
                                    children: [jsxRuntimeExports.jsx("span", {
                                        className: "font-medium text-gray-900 text-sm truncate",
                                        children: vt.skill
                                    }), ss(vt.marketTrend), vt.salaryImpact && jsxRuntimeExports.jsx(DollarSign, {
                                        className: "h-3 w-3 text-green-600"
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "text-xs text-gray-600 truncate",
                                    children: [vt.description, " • ", vt.jobMatches > 1e3 ? `${Math.round(vt.jobMatches / 1e3)}k` : vt.jobMatches, " jobs"]
                                }), vt.salaryImpact && jsxRuntimeExports.jsx("div", {
                                    className: "text-xs text-green-600 font-medium",
                                    children: vt.salaryImpact
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-1",
                            children: [jsxRuntimeExports.jsx(Button, {
                                variant: "outline",
                                size: "sm",
                                className: "h-7 px-2 hover:bg-green-50 hover:border-green-300",
                                onClick: () => wt(vt.skill),
                                disabled: lt.has(vt.skill),
                                children: lt.has(vt.skill) ? jsxRuntimeExports.jsx(LoaderCircle, {
                                    className: "h-3 w-3 animate-spin"
                                }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                    children: [jsxRuntimeExports.jsx(Plus, {
                                        className: "h-3 w-3"
                                    }), jsxRuntimeExports.jsxs("span", {
                                        className: "sr-only",
                                        children: ["Add ", vt.skill]
                                    })]
                                })
                            }), jsxRuntimeExports.jsxs(Button, {
                                variant: "ghost",
                                size: "sm",
                                className: "h-7 px-2 hover:bg-red-50 hover:text-red-600",
                                onClick: () => yt(vt.skill),
                                children: [jsxRuntimeExports.jsx(Minus, {
                                    className: "h-3 w-3"
                                }), jsxRuntimeExports.jsxs("span", {
                                    className: "sr-only",
                                    children: ["Remove ", vt.skill, " from recommendations"]
                                })]
                            })]
                        })]
                    }, vt.skill))
                }), jsxRuntimeExports.jsxs("div", {
                    className: "mt-3 space-y-2",
                    children: [kt.length > 6 && jsxRuntimeExports.jsx(Button, {
                        variant: "ghost",
                        size: "sm",
                        asChild: !0,
                        className: "w-full",
                        children: jsxRuntimeExports.jsxs(Link, {
                            to: "/profile",
                            className: "flex items-center justify-center gap-1 text-xs",
                            children: [jsxRuntimeExports.jsxs("span", {
                                children: ["View all ", kt.length, " recommendations"]
                            }), jsxRuntimeExports.jsx(ArrowRight, {
                                className: "h-3 w-3"
                            })]
                        })
                    }), jsxRuntimeExports.jsx(Button, {
                        variant: "outline",
                        size: "sm",
                        onClick: at,
                        disabled: h,
                        className: "w-full flex items-center justify-center gap-1 text-xs",
                        children: h ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                className: "h-3 w-3 animate-spin"
                            }), "Finding skills..."]
                        }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [jsxRuntimeExports.jsx(Sparkles, {
                                className: "h-3 w-3"
                            }), "Get fresh recommendations"]
                        })
                    })]
                })]
            }), kt.length === 0 && b.length > 0 && At.total > 0 && jsxRuntimeExports.jsxs("div", {
                className: "text-center py-4",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "w-12 h-12 mx-auto mb-3 bg-green-50 rounded-full flex items-center justify-center",
                    children: jsxRuntimeExports.jsx(Check, {
                        className: "h-6 w-6 text-green-600"
                    })
                }), jsxRuntimeExports.jsx("h3", {
                    className: "text-base font-semibold text-gray-900 mb-2",
                    children: "Great Skills Profile!"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-gray-600 mb-3 text-sm",
                    children: "You have excellent market-aligned skills. Want to explore more?"
                }), jsxRuntimeExports.jsx(Button, {
                    size: "sm",
                    onClick: at,
                    disabled: h,
                    className: "flex items-center gap-2",
                    children: h ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [jsxRuntimeExports.jsx(LoaderCircle, {
                            className: "h-4 w-4 animate-spin"
                        }), "Finding skills..."]
                    }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [jsxRuntimeExports.jsx(Sparkles, {
                            className: "h-4 w-4"
                        }), "Discover new skills"]
                    })
                })]
            }), ($ == null ? void 0 : $.emergingSkills) && $.emergingSkills.length > 0 && jsxRuntimeExports.jsxs("div", {
                children: [jsxRuntimeExports.jsxs("h4", {
                    className: "font-semibold text-gray-900 mb-2 flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx(Sparkles, {
                        className: "h-4 w-4 text-purple-600"
                    }), "Emerging Skills"]
                }), jsxRuntimeExports.jsx("div", {
                    className: "flex flex-wrap gap-1",
                    children: $.emergingSkills.slice(0, 4).map( (vt, bt) => jsxRuntimeExports.jsx(Badge, {
                        variant: "secondary",
                        className: "text-xs bg-purple-100 text-purple-700 border-purple-200",
                        children: vt
                    }, bt))
                })]
            }), At.total === 0 && jsxRuntimeExports.jsxs("div", {
                className: "text-center py-4",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "w-12 h-12 mx-auto mb-3 bg-blue-50 rounded-full flex items-center justify-center",
                    children: jsxRuntimeExports.jsx(Star, {
                        className: "h-6 w-6 text-blue-600"
                    })
                }), jsxRuntimeExports.jsx("h3", {
                    className: "text-base font-semibold text-gray-900 mb-2",
                    children: "Add Your Skills"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-gray-600 mb-3 text-sm",
                    children: "Get AI-powered job recommendations and market insights"
                }), jsxRuntimeExports.jsx(Button, {
                    size: "sm",
                    asChild: !0,
                    children: jsxRuntimeExports.jsxs(Link, {
                        to: "/profile",
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Plus, {
                            className: "h-4 w-4"
                        }), "Add Skills"]
                    })
                })]
            }), et && jsxRuntimeExports.jsxs("div", {
                className: "text-xs text-gray-500 text-center pt-2 border-t",
                children: ["Last analyzed: ", et.toLocaleString()]
            })]
        })]
    })
}
  , CareerProgressWidget = () => {
    const {user: s} = useAuth()
      , [e,i] = reactExports.useState(null)
      , [o,a] = reactExports.useState([])
      , [c,d] = reactExports.useState(null)
      , [h,g] = reactExports.useState(!0)
      , [b,_] = reactExports.useState([]);
    reactExports.useEffect( () => {
        (async () => {
            if (!(s != null && s.id)) {
                g(!1);
                return
            }
            try {
                g(!0);
                const [ot,at,ht] = await Promise.all([ProfileService.getProfile(s.id), ProfileService.getUserExperiences(s.id), DashboardService.getDashboardStats()]);
                i(ot),
                a(at || []),
                d(ht);
                const pt = $(ot, at || [], ht);
                _(pt)
            } catch (ot) {
                console.error("Error loading career data:", ot)
            } finally {
                g(!1)
            }
        }
        )()
    }
    , [s == null ? void 0 : s.id]);
    const $ = (dt, ot, at) => {
        var pt, gt, wt;
        return [{
            id: "first_application",
            title: "First Job Application",
            description: "Submit your first job application",
            completed: ((at == null ? void 0 : at.totalApplications) || 0) > 0,
            category: "application",
            priority: "High",
            progress: ((at == null ? void 0 : at.totalApplications) || 0) > 0 ? 100 : 0
        }, {
            id: "profile_complete",
            title: "Complete Professional Profile",
            description: "Fill out all profile sections",
            completed: !!(dt != null && dt.full_name && (dt != null && dt.title) && (dt != null && dt.bio) && ((pt = dt == null ? void 0 : dt.skills) == null ? void 0 : pt.length) > 0),
            category: "skill",
            priority: "High",
            progress: _e(dt)
        }, {
            id: "ten_applications",
            title: "Apply to 10 Jobs",
            description: "Reach 10 job applications milestone",
            completed: ((at == null ? void 0 : at.totalApplications) || 0) >= 10,
            category: "application",
            priority: "Medium",
            progress: Math.min(((at == null ? void 0 : at.totalApplications) || 0) / 10 * 100, 100)
        }, {
            id: "skill_master",
            title: "Skill Master",
            description: "Add 15+ skills to your profile",
            completed: (((gt = dt == null ? void 0 : dt.skills) == null ? void 0 : gt.length) || 0) >= 15,
            category: "skill",
            priority: "Medium",
            progress: Math.min((((wt = dt == null ? void 0 : dt.skills) == null ? void 0 : wt.length) || 0) / 15 * 100, 100)
        }, {
            id: "experience_documented",
            title: "Document Work Experience",
            description: "Add detailed work experience entries",
            completed: ot.length >= 2,
            category: "experience",
            priority: "Medium",
            progress: Math.min(ot.length / 2 * 100, 100)
        }, {
            id: "monthly_goal",
            title: "Monthly Application Goal",
            description: "Apply to 20+ jobs this month",
            completed: ((at == null ? void 0 : at.weeklyApplications) || 0) * 4 >= 20,
            category: "application",
            priority: "Medium",
            progress: Math.min(((at == null ? void 0 : at.weeklyApplications) || 0) * 4 / 20 * 100, 100)
        }].sort( (yt, Rt) => {
            if (yt.completed !== Rt.completed)
                return yt.completed ? 1 : -1;
            const Mt = {
                High: 3,
                Medium: 2,
                Low: 1
            };
            return Mt[Rt.priority] - Mt[yt.priority]
        }
        )
    }
      , _e = dt => {
        var ht;
        const ot = [dt == null ? void 0 : dt.full_name, dt == null ? void 0 : dt.title, dt == null ? void 0 : dt.bio, dt == null ? void 0 : dt.location, ((ht = dt == null ? void 0 : dt.skills) == null ? void 0 : ht.length) > 0, dt == null ? void 0 : dt.resume_url]
          , at = ot.filter(Boolean).length;
        return Math.round(at / ot.length * 100)
    }
      , tt = () => {
        var ot;
        const dt = o.reduce( (at, ht) => {
            if (ht.start_date && ht.end_date) {
                const pt = new Date(ht.start_date)
                  , wt = ((ht.is_current ? new Date : new Date(ht.end_date)).getTime() - pt.getTime()) / (1e3 * 60 * 60 * 24 * 365);
                return at + Math.max(wt, 0)
            }
            return at
        }
        , 0);
        return {
            currentLevel: rt(dt),
            experienceYears: Math.round(dt * 10) / 10,
            totalApplications: (c == null ? void 0 : c.totalApplications) || 0,
            interviewRate: (c == null ? void 0 : c.totalApplications) > 0 ? Math.round(((c == null ? void 0 : c.interviewInvites) || 0) / c.totalApplications * 100) : 0,
            avgResponseTime: 3,
            skillsCount: ((ot = e == null ? void 0 : e.skills) == null ? void 0 : ot.length) || 0,
            networkSize: 0
        }
    }
      , rt = dt => dt < 1 ? "Entry Level" : dt < 3 ? "Junior" : dt < 5 ? "Mid-Level" : dt < 8 ? "Senior" : "Lead/Principal"
      , et = dt => {
        switch (dt) {
        case "application":
            return jsxRuntimeExports.jsx(Briefcase, {
                className: "h-4 w-4"
            });
        case "skill":
            return jsxRuntimeExports.jsx(Star, {
                className: "h-4 w-4"
            });
        case "experience":
            return jsxRuntimeExports.jsx(Award, {
                className: "h-4 w-4"
            });
        case "network":
            return jsxRuntimeExports.jsx(Users, {
                className: "h-4 w-4"
            });
        case "salary":
            return jsxRuntimeExports.jsx(DollarSign, {
                className: "h-4 w-4"
            })
        }
    }
      , it = dt => {
        switch (dt) {
        case "High":
            return "bg-red-100 text-red-800 border-red-200";
        case "Medium":
            return "bg-yellow-100 text-yellow-800 border-yellow-200";
        case "Low":
            return "bg-blue-100 text-blue-800 border-blue-200"
        }
    }
    ;
    if (h)
        return jsxRuntimeExports.jsxs(Card, {
            className: "border-0 shadow-sm bg-white",
            children: [jsxRuntimeExports.jsx(CardHeader, {
                className: "pb-4",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "space-y-2",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "h-6 bg-gray-200 rounded w-36 animate-pulse"
                        }), jsxRuntimeExports.jsx("div", {
                            className: "h-4 bg-gray-200 rounded w-28 animate-pulse"
                        })]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "h-8 bg-gray-200 rounded w-20 animate-pulse"
                    })]
                })
            }), jsxRuntimeExports.jsx(CardContent, {
                className: "space-y-4",
                children: [1, 2, 3].map(dt => jsxRuntimeExports.jsx("div", {
                    className: "animate-pulse",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-between p-3 border rounded-lg",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "space-y-1 flex-1",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "h-4 bg-gray-200 rounded w-3/4"
                            }), jsxRuntimeExports.jsx("div", {
                                className: "h-3 bg-gray-200 rounded w-1/2"
                            })]
                        }), jsxRuntimeExports.jsx("div", {
                            className: "h-6 bg-gray-200 rounded-full w-16"
                        })]
                    })
                }, dt))
            })]
        });
    if (!s)
        return jsxRuntimeExports.jsxs(Card, {
            className: "border-0 shadow-sm bg-white",
            children: [jsxRuntimeExports.jsx(CardHeader, {
                className: "pb-4",
                children: jsxRuntimeExports.jsxs(CardTitle, {
                    className: "text-xl font-bold text-gray-900 flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx(TrendingUp, {
                        className: "h-5 w-5 text-blue-600"
                    }), "Career Progress"]
                })
            }), jsxRuntimeExports.jsx(CardContent, {
                children: jsxRuntimeExports.jsxs("div", {
                    className: "text-center py-8",
                    children: [jsxRuntimeExports.jsx(TrendingUp, {
                        className: "h-12 w-12 mx-auto mb-4 text-gray-400"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-600 mb-4",
                        children: "Sign in to track your career progress"
                    }), jsxRuntimeExports.jsx(Button, {
                        asChild: !0,
                        children: jsxRuntimeExports.jsx(Link, {
                            to: "/signin",
                            children: "Sign In"
                        })
                    })]
                })
            })]
        });
    const st = tt()
      , nt = b.filter(dt => dt.completed).length
      , lt = b.filter(dt => !dt.completed).slice(0, 3);
    return jsxRuntimeExports.jsxs(Card, {
        className: "border-0 shadow-sm bg-white",
        children: [jsxRuntimeExports.jsxs(CardHeader, {
            className: "pb-4",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "flex items-center justify-between",
                children: [jsxRuntimeExports.jsxs("div", {
                    children: [jsxRuntimeExports.jsxs(CardTitle, {
                        className: "text-xl font-bold text-gray-900 flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(TrendingUp, {
                            className: "h-5 w-5 text-blue-600"
                        }), "Career Progress"]
                    }), jsxRuntimeExports.jsxs("p", {
                        className: "text-sm text-gray-600 mt-1",
                        children: [st.currentLevel, " • ", nt, "/", b.length, " milestones"]
                    })]
                }), jsxRuntimeExports.jsx("div", {
                    className: "text-right",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "text-2xl font-bold text-blue-600",
                        children: [Math.round(nt / b.length * 100), "%"]
                    })
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "grid grid-cols-3 gap-3 mt-4",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "text-center",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "text-lg font-bold text-gray-900",
                        children: [st.experienceYears, "y"]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-xs text-gray-500",
                        children: "Experience"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "text-center",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "text-lg font-bold text-green-600",
                        children: [st.interviewRate, "%"]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-xs text-gray-500",
                        children: "Interview Rate"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "text-center",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "text-lg font-bold text-purple-600",
                        children: st.skillsCount
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-xs text-gray-500",
                        children: "Skills"
                    })]
                })]
            })]
        }), jsxRuntimeExports.jsxs(CardContent, {
            className: "space-y-4",
            children: [jsxRuntimeExports.jsxs("div", {
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between mb-2",
                    children: [jsxRuntimeExports.jsx("span", {
                        className: "text-sm font-medium text-gray-700",
                        children: "Overall Progress"
                    }), jsxRuntimeExports.jsxs("span", {
                        className: "text-sm text-gray-600",
                        children: [nt, "/", b.length]
                    })]
                }), jsxRuntimeExports.jsx(Progress, {
                    value: nt / b.length * 100,
                    className: "h-2"
                })]
            }), lt.length > 0 && jsxRuntimeExports.jsxs("div", {
                children: [jsxRuntimeExports.jsxs("h4", {
                    className: "font-semibold text-gray-900 mb-3 flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx(Target, {
                        className: "h-4 w-4 text-blue-600"
                    }), "Next Milestones"]
                }), jsxRuntimeExports.jsx("div", {
                    className: "space-y-3",
                    children: lt.map(dt => jsxRuntimeExports.jsx("div", {
                        className: "flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 transition-colors",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-3 flex-1",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "w-8 h-8 rounded-lg bg-gray-100 flex items-center justify-center",
                                children: et(dt.category)
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex-1 min-w-0",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2 mb-1",
                                    children: [jsxRuntimeExports.jsx("h5", {
                                        className: "font-medium text-gray-900",
                                        children: dt.title
                                    }), jsxRuntimeExports.jsx(Badge, {
                                        variant: "outline",
                                        className: cn("text-xs", it(dt.priority)),
                                        children: dt.priority
                                    })]
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-sm text-gray-600 mb-2",
                                    children: dt.description
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(Progress, {
                                        value: dt.progress,
                                        className: "h-1 flex-1"
                                    }), jsxRuntimeExports.jsxs("span", {
                                        className: "text-xs text-gray-500",
                                        children: [Math.round(dt.progress), "%"]
                                    })]
                                })]
                            })]
                        })
                    }, dt.id))
                })]
            }), nt > 0 && jsxRuntimeExports.jsxs("div", {
                children: [jsxRuntimeExports.jsxs("h4", {
                    className: "font-semibold text-gray-900 mb-3 flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx(Trophy, {
                        className: "h-4 w-4 text-yellow-600"
                    }), "Recent Achievements"]
                }), jsxRuntimeExports.jsx("div", {
                    className: "space-y-2",
                    children: b.filter(dt => dt.completed).slice(0, 2).map(dt => jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-3 p-3 bg-green-50 border border-green-200 rounded-lg",
                        children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                            className: "h-5 w-5 text-green-600 flex-shrink-0"
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex-1",
                            children: [jsxRuntimeExports.jsx("h5", {
                                className: "font-medium text-green-900",
                                children: dt.title
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-sm text-green-700",
                                children: dt.description
                            })]
                        })]
                    }, dt.id))
                })]
            }), nt === 0 && jsxRuntimeExports.jsxs("div", {
                className: "text-center py-6",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "w-16 h-16 mx-auto mb-4 bg-blue-50 rounded-full flex items-center justify-center",
                    children: jsxRuntimeExports.jsx(Target, {
                        className: "h-8 w-8 text-blue-600"
                    })
                }), jsxRuntimeExports.jsx("h3", {
                    className: "text-lg font-semibold text-gray-900 mb-2",
                    children: "Start Your Journey"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-gray-600 mb-4 max-w-sm mx-auto",
                    children: "Complete your profile and start applying to jobs to track your career progress."
                }), jsxRuntimeExports.jsx(Button, {
                    asChild: !0,
                    children: jsxRuntimeExports.jsxs(Link, {
                        to: "/profile",
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Target, {
                            className: "h-4 w-4"
                        }), "Complete Profile"]
                    })
                })]
            })]
        })]
    })
}
;
class JobRankingService {
    static calculateJobMatchScore(e, i, o=this.DEFAULT_WEIGHTS) {
        const a = [];
        let c = 0;
        const d = this.calculateSkillsMatch(e, i, a);
        c += d * o.skillsWeight;
        const h = this.calculateRoleMatch(e, i, a);
        c += h * o.roleWeight;
        const g = this.calculateExperienceMatch(e, i, a);
        c += g * o.experienceWeight;
        const b = this.calculateLocationMatch(e, i, a);
        c += b * o.locationWeight;
        const _ = this.calculateWorkModeMatch(e, i, a);
        c += _ * o.workModeWeight;
        const $ = this.calculateSalaryMatch(e, i, a);
        c += $ * o.salaryWeight;
        const _e = Math.min(100, Math.max(0, c * 100));
        return {
            job: e,
            score: _e,
            matchReasons: a
        }
    }
    static calculateSkillsMatch(e, i, o) {
        const a = i.skills || [];
        if (a.length === 0)
            return .3;
        const c = `${e.title} ${e.description}`.toLowerCase()
          , d = e.tags || [];
        let h = 0;
        const g = [];
        return a.forEach(b => {
            const _ = b.toLowerCase()
              , $ = c.includes(_)
              , _e = d.some(tt => tt.toLowerCase().includes(_));
            ($ || _e) && (h++,
            g.push(b))
        }
        ),
        g.length > 0 && o.push(`Skills match: ${g.slice(0, 3).join(", ")}${g.length > 3 ? ` +${g.length - 3} more` : ""}`),
        Math.min(1, h / Math.max(a.length, 1))
    }
    static calculateRoleMatch(e, i, o) {
        const a = i.preferred_roles || [];
        if (a.length === 0)
            return .5;
        const c = e.title.toLowerCase()
          , d = e.description.toLowerCase();
        let h = 0
          , g = "";
        return a.forEach(b => {
            const _ = b.toLowerCase();
            let $ = 0;
            if (c.includes(_))
                $ = 1;
            else if (d.includes(_))
                $ = .7;
            else {
                const _e = _.split(" ");
                $ = _e.filter(rt => c.includes(rt) || d.includes(rt)).length / _e.length * .5
            }
            $ > h && (h = $,
            g = b)
        }
        ),
        h > .3 && g && o.push(`Role match: ${g}`),
        h
    }
    static calculateExperienceMatch(e, i, o) {
        var b;
        const a = i.experience_level
          , c = i.experience_years || 0;
        if (!a && c === 0)
            return .5;
        const d = ((b = e.experienceRequired) == null ? void 0 : b.toLowerCase()) || ""
          , h = {
            student: {
                min: 0,
                max: 1,
                keywords: ["student", "intern", "entry", "junior", "fresher"]
            },
            entry: {
                min: 0,
                max: 2,
                keywords: ["entry", "junior", "fresher", "0-2", "1-2"]
            },
            mid: {
                min: 2,
                max: 5,
                keywords: ["mid", "intermediate", "2-5", "3-5", "2-4"]
            },
            senior: {
                min: 5,
                max: 10,
                keywords: ["senior", "lead", "5+", "5-10", "6+"]
            },
            leadership: {
                min: 8,
                max: 20,
                keywords: ["principal", "staff", "architect", "manager", "director", "8+", "10+"]
            }
        };
        let g = .5;
        if (a && h[a]) {
            const _ = h[a];
            _.keywords.some(_e => d.includes(_e)) ? (g = 1,
            o.push(`Experience level match: ${a}`)) : c >= _.min && c <= _.max && (g = .8,
            o.push(`Experience years match: ${c} years`))
        }
        return g
    }
    static calculateLocationMatch(e, i, o) {
        var g;
        const a = ((g = i.location) == null ? void 0 : g.toLowerCase()) || ""
          , c = e.location.toLowerCase();
        if (e.isRemote && i.work_mode === "remote")
            return o.push("Remote work preference match"),
            1;
        if (e.isRemote)
            return .8;
        if (!a)
            return .5;
        if (c.includes(a) || a.includes(c))
            return o.push(`Location match: ${e.location}`),
            1;
        const d = a.split(",").map(b => b.trim())
          , h = c.split(",").map(b => b.trim());
        if (d.length > 1 && h.length > 1) {
            const b = d[d.length - 1]
              , _ = h[h.length - 1];
            if (b === _)
                return o.push(`State match: ${_}`),
                .7
        }
        return .3
    }
    static calculateWorkModeMatch(e, i, o) {
        const a = i.work_mode;
        return a ? a === "remote" && e.isRemote ? (o.push("Remote work match"),
        1) : a === "onsite" && !e.isRemote ? (o.push("Onsite work match"),
        1) : a === "hybrid" ? .8 : .3 : .5
    }
    static calculateSalaryMatch(e, i, o) {
        const a = i.salary_min || 0
          , c = i.salary_max || 0;
        return .5
    }
    static rankJobs(e, i, o) {
        return e.map(c => this.calculateJobMatchScore(c, i, o)).sort( (c, d) => d.score - c.score)
    }
    static getTopMatches(e, i, o=20, a) {
        return this.rankJobs(e, i, a).slice(0, o)
    }
    static hasEnoughProfileData(e) {
        const i = e.skills && e.skills.length > 0
          , o = e.preferred_roles && e.preferred_roles.length > 0
          , a = e.experience_level || e.experience_years > 0;
        return [i, o, a].filter(Boolean).length >= 2
    }
}
tr(JobRankingService, "DEFAULT_WEIGHTS", {
    skillsWeight: .35,
    roleWeight: .25,
    experienceWeight: .2,
    locationWeight: .1,
    workModeWeight: .05,
    salaryWeight: .05
});
const jobQueryKeys = {
    all: ["jobs"],
    lists: () => [...jobQueryKeys.all, "list"],
    list: s => [...jobQueryKeys.lists(), s],
    exclusive: () => [...jobQueryKeys.all, "exclusive"],
    exclusiveList: s => [...jobQueryKeys.exclusive(), s],
    details: () => [...jobQueryKeys.all, "detail"],
    detail: s => [...jobQueryKeys.details(), s],
    stats: () => [...jobQueryKeys.all, "stats"],
    companies: () => [...jobQueryKeys.all, "companies"],
    locations: () => [...jobQueryKeys.all, "locations"],
    remote: () => [...jobQueryKeys.all, "remote"],
    remoteList: s => [...jobQueryKeys.remote(), s],
    infiniteJobs: s => [...jobQueryKeys.all, "infinite", s],
    infiniteRemote: s => [...jobQueryKeys.remote(), "infinite", s],
    ranked: s => [...jobQueryKeys.all, "ranked", s],
    rankedList: (s, e) => [...jobQueryKeys.ranked(s), e],
    infiniteRanked: (s, e) => [...jobQueryKeys.ranked(s), "infinite", e]
};
function useJobs(s={}) {
    return useQuery({
        queryKey: jobQueryKeys.list(s),
        queryFn: () => JobService.getJobs(s),
        staleTime: 5 * 60 * 1e3,
        gcTime: 10 * 60 * 1e3
    })
}
function useInfiniteJobs(s={}) {
    const e = s.limit || 20;
    return useInfiniteQuery({
        queryKey: jobQueryKeys.infiniteJobs(s),
        queryFn: ({pageParam: i=0}) => {
            const o = {
                ...s,
                limit: e,
                offset: i * e
            };
            return JobService.getJobs(o)
        }
        ,
        getNextPageParam: (i, o) => o.length * e < i.total ? o.length : void 0,
        initialPageParam: 0,
        staleTime: 5 * 60 * 1e3
    })
}
function useInfiniteRankedJobs(s, e={}) {
    const i = e.limit || 20;
    return useInfiniteQuery({
        queryKey: jobQueryKeys.infiniteRanked((s == null ? void 0 : s.user_id) || "anonymous", e),
        queryFn: async ({pageParam: o=0}) => {
            if (o === 0) {
                const a = {
                    ...e,
                    limit: void 0,
                    offset: void 0
                }
                  , c = await JobService.getJobs(a);
                if (s && JobRankingService.hasEnoughProfileData(s)) {
                    const h = JobRankingService.rankJobs(c.jobs, s)
                      , g = h.slice(0, i);
                    return {
                        jobs: g.map(b => b.job),
                        total: c.total,
                        rankedJobs: g,
                        allRankedJobs: h
                    }
                }
                const d = c.jobs.slice(0, i);
                return {
                    jobs: d,
                    total: c.total,
                    rankedJobs: d.map(h => ({
                        job: h,
                        score: 50,
                        matchReasons: []
                    })),
                    allRankedJobs: c.jobs.map(h => ({
                        job: h,
                        score: 50,
                        matchReasons: []
                    }))
                }
            } else {
                const a = {
                    ...e,
                    limit: void 0,
                    offset: void 0
                }
                  , c = await JobService.getJobs(a);
                if (s && JobRankingService.hasEnoughProfileData(s)) {
                    const b = JobRankingService.rankJobs(c.jobs, s)
                      , _ = o * i
                      , $ = _ + i
                      , _e = b.slice(_, $);
                    return {
                        jobs: _e.map(tt => tt.job),
                        total: c.total,
                        rankedJobs: _e
                    }
                }
                const d = o * i
                  , h = d + i
                  , g = c.jobs.slice(d, h);
                return {
                    jobs: g,
                    total: c.total,
                    rankedJobs: g.map(b => ({
                        job: b,
                        score: 50,
                        matchReasons: []
                    }))
                }
            }
        }
        ,
        getNextPageParam: (o, a) => a.length * i < o.total ? a.length : void 0,
        initialPageParam: 0,
        enabled: !!s,
        staleTime: 5 * 60 * 1e3
    })
}
function useInfiniteRemoteJobs(s={}) {
    const e = s.limit || 20;
    return useInfiniteQuery({
        queryKey: jobQueryKeys.infiniteRemote(s),
        queryFn: ({pageParam: i=0}) => {
            const o = {
                ...s,
                limit: e,
                offset: i * e,
                filters: {
                    ...s.filters,
                    remote: "remote"
                }
            };
            return JobService.getRemoteJobs(o)
        }
        ,
        getNextPageParam: (i, o) => o.length * e < i.total ? o.length : void 0,
        initialPageParam: 0,
        staleTime: 5 * 60 * 1e3
    })
}
function useInfiniteExclusiveJobs(s={}) {
    const e = s.limit || 20;
    return useInfiniteQuery({
        queryKey: [...jobQueryKeys.exclusive(), "infinite", s],
        queryFn: ({pageParam: i=0}) => {
            const o = {
                ...s,
                limit: e,
                offset: i * e
            };
            return JobService.getExclusiveJobs(o)
        }
        ,
        getNextPageParam: (i, o) => o.length * e < i.total ? o.length : void 0,
        initialPageParam: 0,
        staleTime: 5 * 60 * 1e3
    })
}
function useJobStats() {
    return useQuery({
        queryKey: jobQueryKeys.stats(),
        queryFn: () => JobService.getJobsStats(),
        staleTime: 10 * 60 * 1e3
    })
}
const EnhancedMetricCard = ({label: s, value: e, change: i, changeType: o="positive", icon: a, subtitle: c, className: d="", trend: h=[], isPremium: g=!1}) => jsxRuntimeExports.jsx(Card, {
    className: `group border-0 shadow-sm hover:shadow-lg transition-all duration-300 overflow-hidden bg-white ${d}`,
    children: jsxRuntimeExports.jsxs(CardContent, {
        className: "p-4 md:p-6 relative",
        children: [jsxRuntimeExports.jsx("div", {
            className: "absolute top-0 right-0 w-16 h-16 md:w-20 md:h-20 rounded-bl-3xl opacity-50 bg-gradient-to-br from-gray-50 to-gray-100"
        }), jsxRuntimeExports.jsxs("div", {
            className: "flex justify-between items-start relative z-10",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "flex-1",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-2 mb-2",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "w-8 h-8 rounded-lg flex items-center justify-center transition-colors bg-gray-100 group-hover:bg-gray-200",
                        children: jsxRuntimeExports.jsx(a, {
                            className: "h-4 w-4 text-gray-600"
                        })
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-xs md:text-sm font-medium text-gray-600",
                        children: s
                    })]
                }), jsxRuntimeExports.jsx("div", {
                    className: "text-2xl md:text-3xl font-bold text-gray-900 mb-1",
                    children: e
                }), c && jsxRuntimeExports.jsx("div", {
                    className: "text-xs text-gray-500 mb-2",
                    children: c
                }), jsxRuntimeExports.jsxs("div", {
                    className: `flex items-center gap-1 text-xs md:text-sm font-medium ${o === "positive" ? "text-green-600" : "text-red-500"}`,
                    children: [o === "positive" ? jsxRuntimeExports.jsx(TrendingUp, {
                        className: "h-3 w-3"
                    }) : jsxRuntimeExports.jsx(TrendingDown, {
                        className: "h-3 w-3"
                    }), i]
                })]
            }), h.length > 0 && jsxRuntimeExports.jsx("div", {
                className: "w-12 h-6 md:w-16 md:h-8 flex items-end gap-0.5",
                children: h.map( (b, _) => jsxRuntimeExports.jsx("div", {
                    className: "flex-1 rounded-sm transition-all duration-300",
                    style: {
                        backgroundColor: o === "positive" ? "#10b981" : "#ef4444",
                        height: `${Math.max(b * 10, 5)}%`,
                        opacity: .7
                    }
                }, _))
            })]
        })]
    })
})
  , MobileMetricCard = ({label: s, value: e, change: i, changeType: o="positive", icon: a, subtitle: c, className: d="", isPremium: h=!1}) => jsxRuntimeExports.jsx("div", {
    className: cn("mobile-card-compact", d),
    children: jsxRuntimeExports.jsxs("div", {
        className: "flex items-center justify-between",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "flex items-center gap-2",
            children: [jsxRuntimeExports.jsx("div", {
                className: cn("w-8 h-8 rounded-lg flex items-center justify-center", h ? "bg-gradient-to-br from-yellow-100 to-amber-100" : "bg-gradient-to-br from-[#b24e55]/10 to-[#d35c65]/10"),
                children: jsxRuntimeExports.jsx(a, {
                    className: cn("h-4 w-4", h ? "text-yellow-600" : "text-[#b24e55]")
                })
            }), jsxRuntimeExports.jsxs("div", {
                children: [jsxRuntimeExports.jsx("div", {
                    className: "mobile-body-xs font-medium text-gray-600 mb-0.5",
                    children: s
                }), jsxRuntimeExports.jsx("div", {
                    className: "mobile-heading-sm font-bold text-gray-900",
                    children: e
                })]
            })]
        }), jsxRuntimeExports.jsxs("div", {
            className: "text-right",
            children: [jsxRuntimeExports.jsxs("div", {
                className: cn("flex items-center gap-1 mobile-body-xs font-medium", o === "positive" ? "text-green-600" : "text-red-500"),
                children: [o === "positive" ? jsxRuntimeExports.jsx(TrendingUp, {
                    className: "h-3 w-3"
                }) : jsxRuntimeExports.jsx(TrendingDown, {
                    className: "h-3 w-3"
                }), i]
            }), c && jsxRuntimeExports.jsx("div", {
                className: "mobile-body-xs text-gray-500 mt-0.5",
                children: c
            })]
        })]
    })
})
  , QuickActionButton = ({icon: s, label: e, description: i, to: o, color: a="default"}) => {
    const c = {
        default: "bg-gray-50 hover:bg-gray-100 border-gray-200",
        primary: "bg-blue-50 hover:bg-blue-100 border-blue-200",
        success: "bg-green-50 hover:bg-green-100 border-green-200",
        warning: "bg-orange-50 hover:bg-orange-100 border-orange-200"
    };
    return jsxRuntimeExports.jsx(Link, {
        to: o,
        className: "block",
        children: jsxRuntimeExports.jsx("div", {
            className: `p-4 rounded-lg border transition-all duration-200 hover:shadow-sm group ${c[a]}`,
            children: jsxRuntimeExports.jsxs("div", {
                className: "flex items-center gap-3",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "w-10 h-10 rounded-lg bg-white shadow-sm flex items-center justify-center group-hover:shadow-md transition-shadow",
                    children: jsxRuntimeExports.jsx(s, {
                        className: "h-5 w-5 text-gray-600"
                    })
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex-1 min-w-0",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "font-medium text-gray-900 text-sm",
                        children: e
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-xs text-gray-600",
                        children: i
                    })]
                }), jsxRuntimeExports.jsx(ChevronRight, {
                    className: "h-4 w-4 text-gray-400 group-hover:text-gray-600 transition-colors"
                })]
            })
        })
    })
}
  , Dashboard = () => {
    var Rt, Mt, ss;
    const {user: s, signOut: e} = useAuth()
      , {isPremium: i, premiumData: o, loading: a} = usePremiumUser()
      , [c,d] = reactExports.useState(((Rt = s == null ? void 0 : s.user_metadata) == null ? void 0 : Rt.full_name) || ((Mt = s == null ? void 0 : s.email) == null ? void 0 : Mt.split("@")[0]) || "User")
      , [h,g] = reactExports.useState(!0)
      , [b,_] = reactExports.useState(null)
      , [$,_e] = reactExports.useState([])
      , [tt,rt] = reactExports.useState(null)
      , [et,it] = reactExports.useState(null)
      , [st,nt] = reactExports.useState(null)
      , [lt,dt] = reactExports.useState("connected")
      , {data: ot, isLoading: at, error: ht} = useJobs({
        limit: 3,
        sortBy: "created_at",
        sortOrder: "desc"
    })
      , pt = (ot == null ? void 0 : ot.jobs) || [];
    useProgressiveLogos(pt);
    const gt = c.split(" ").map(zt => zt[0]).join("").toUpperCase();
    reactExports.useEffect( () => {
        var zt, At;
        s && d(((zt = s.user_metadata) == null ? void 0 : zt.full_name) || ((At = s.email) == null ? void 0 : At.split("@")[0]) || s.email || "User")
    }
    , [s]),
    reactExports.useEffect( () => {
        (async () => {
            try {
                g(!0),
                nt(null),
                console.log("🔄 Loading dashboard data...");
                const [At,kt,vt,bt] = await Promise.all([DashboardService.getDashboardStats().catch(Tt => (console.error("Error loading dashboard stats:", Tt),
                {
                    totalApplications: 0,
                    interviewInvites: 0,
                    profileViews: 0,
                    weeklyApplications: 0,
                    weeklyGoal: 15,
                    applicationsByStatus: {
                        applied: 0,
                        screening: 0,
                        interview_scheduled: 0,
                        interviewed: 0,
                        technical_assessment: 0,
                        final_round: 0,
                        offer_received: 0,
                        accepted: 0,
                        rejected: 0,
                        withdrawn: 0
                    },
                    weeklyTrend: [0, 0, 0, 0, 0, 0, 0]
                })), DashboardService.getRecentActivity(4).catch(Tt => (console.error("Error loading recent activity:", Tt),
                [])), DashboardService.getUserProfile().catch(Tt => (console.error("Error loading user profile:", Tt),
                {
                    id: "demo-user",
                    full_name: "Demo User",
                    profile_completion: 50,
                    resume_score: 70
                })), DashboardService.getEmailOutreachStats().catch(Tt => (console.error("Error loading email stats:", Tt),
                {
                    emailsSent: 0,
                    openRate: 0,
                    responseRate: 0,
                    campaignsActive: 0,
                    responsesReceived: 0,
                    interviewRequests: 0
                }))]);
                console.log("✅ Dashboard data loaded successfully:", {
                    stats: !!At,
                    activities: kt.length,
                    profile: !!vt,
                    email: !!bt
                }),
                dt("connected"),
                _(At),
                _e(kt),
                rt(vt),
                it(bt)
            } catch (At) {
                console.error("Error loading dashboard data:", At),
                nt("Failed to load dashboard data. Please try refreshing the page.")
            } finally {
                g(!1)
            }
        }
        )()
    }
    , [s]);
    const wt = () => {
        const zt = new Date().getHours();
        return zt < 12 ? "Good Morning" : zt < 17 ? "Good Afternoon" : "Good Evening"
    }
      , yt = zt => zt >= 1e3 ? (zt / 1e3).toFixed(1) + "K" : zt.toString();
    return st ? jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen flex w-full bg-gray-50",
        children: [jsxRuntimeExports.jsx(NewSidebar, {}), jsxRuntimeExports.jsx("div", {
            className: "flex-1 flex items-center justify-center",
            children: jsxRuntimeExports.jsxs("div", {
                className: "text-center",
                children: [jsxRuntimeExports.jsx(CircleAlert, {
                    className: "h-12 w-12 text-red-500 mx-auto mb-4"
                }), jsxRuntimeExports.jsx("h2", {
                    className: "text-xl font-semibold text-gray-900 mb-2",
                    children: "Something went wrong"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-gray-600 mb-4",
                    children: st
                }), jsxRuntimeExports.jsx(Button, {
                    onClick: () => window.location.reload(),
                    className: "text-white",
                    style: {
                        backgroundColor: "#b24e55"
                    },
                    children: "Try Again"
                })]
            })
        })]
    }) : jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-gray-50 md:flex mobile-page",
        children: [jsxRuntimeExports.jsx(NewSidebar, {}), jsxRuntimeExports.jsxs("div", {
            className: "flex-1 flex flex-col w-full",
            children: [jsxRuntimeExports.jsxs("header", {
                className: "hidden md:flex h-16 shrink-0 items-center justify-between px-6 border-b bg-white sticky top-0 z-10 shadow-sm",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-4",
                    children: [lt === "demo" && jsxRuntimeExports.jsxs(Badge, {
                        className: "bg-blue-100 text-blue-700 border-blue-200 text-xs",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "w-2 h-2 bg-blue-500 rounded-full mr-1"
                        }), "Demo Mode"]
                    }), lt === "connected" && !i && jsxRuntimeExports.jsxs(Badge, {
                        className: "bg-green-100 text-green-700 border-green-200 text-xs",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "w-2 h-2 bg-green-500 rounded-full mr-1"
                        }), "Live Data"]
                    }), i && jsxRuntimeExports.jsxs(Badge, {
                        className: "bg-gradient-to-r from-yellow-100 to-amber-100 text-yellow-800 border-yellow-300 text-xs font-medium shadow-sm",
                        children: [jsxRuntimeExports.jsx(Crown, {
                            className: "w-3 h-3 mr-1"
                        }), "Premium"]
                    })]
                }), jsxRuntimeExports.jsx("div", {
                    className: "flex items-center gap-3 pr-2 md:pr-0",
                    children: jsxRuntimeExports.jsxs(DropdownMenu, {
                        children: [jsxRuntimeExports.jsx(DropdownMenuTrigger, {
                            asChild: !0,
                            children: jsxRuntimeExports.jsxs(Button, {
                                variant: "ghost",
                                className: "rounded-full flex items-center gap-2 p-1 pl-3 hover:bg-gray-100",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "text-sm font-medium hidden md:inline",
                                    children: c
                                }), jsxRuntimeExports.jsxs(Avatar, {
                                    className: "h-8 w-8",
                                    children: [jsxRuntimeExports.jsx(AvatarImage, {
                                        src: (ss = s == null ? void 0 : s.user_metadata) == null ? void 0 : ss.avatar_url
                                    }), jsxRuntimeExports.jsx(AvatarFallback, {
                                        style: {
                                            backgroundColor: "#b24e55"
                                        },
                                        className: "text-white",
                                        children: gt
                                    })]
                                })]
                            })
                        }), jsxRuntimeExports.jsxs(DropdownMenuContent, {
                            align: "end",
                            className: "w-56",
                            children: [jsxRuntimeExports.jsx(DropdownMenuLabel, {
                                children: "My Account"
                            }), jsxRuntimeExports.jsx(DropdownMenuSeparator, {}), jsxRuntimeExports.jsx(DropdownMenuItem, {
                                asChild: !0,
                                children: jsxRuntimeExports.jsxs(Link, {
                                    to: "/profile",
                                    className: "flex items-center cursor-pointer",
                                    children: [jsxRuntimeExports.jsx(User, {
                                        className: "mr-2 h-4 w-4"
                                    }), jsxRuntimeExports.jsx("span", {
                                        children: "Profile"
                                    })]
                                })
                            }), jsxRuntimeExports.jsx(DropdownMenuSeparator, {}), jsxRuntimeExports.jsx(DropdownMenuItem, {
                                onClick: () => e == null ? void 0 : e(),
                                children: "Log out"
                            })]
                        })]
                    })
                })]
            }), jsxRuntimeExports.jsx("div", {
                className: "flex-1 mobile-app-content md:p-6 max-w-7xl mx-auto w-full",
                children: h || at ? jsxRuntimeExports.jsx("div", {
                    className: "flex items-center justify-center h-[80vh]",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex flex-col items-center gap-4",
                        children: [jsxRuntimeExports.jsx(LoaderCircle, {
                            className: "w-10 h-10 animate-spin",
                            style: {
                                color: "#b24e55"
                            }
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-sm text-gray-500",
                            children: "Loading your personalized dashboard..."
                        })]
                    })
                }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [jsxRuntimeExports.jsx(BlurFade, {
                        delay: .1,
                        children: jsxRuntimeExports.jsx("div", {
                            className: cn("mobile-card-compact mb-4 md:mb-8 rounded-xl md:rounded-2xl p-3 md:p-6 border shadow-sm", i ? "bg-gradient-to-r from-yellow-50 via-amber-50 to-yellow-100 border-yellow-200" : "bg-gradient-to-r from-white to-gray-50 border-gray-100"),
                            children: jsxRuntimeExports.jsxs("div", {
                                className: "flex flex-col lg:flex-row lg:items-center lg:justify-between gap-3 md:gap-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex-1",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-3 mb-2",
                                        children: jsxRuntimeExports.jsxs("h1", {
                                            className: "mobile-heading-md sm:text-2xl md:text-3xl font-bold text-gray-900",
                                            children: [wt(), ", ", c, " 👋"]
                                        })
                                    }), jsxRuntimeExports.jsx("p", {
                                        className: "text-gray-600 mobile-body-sm sm:text-base md:text-lg mb-2 md:mb-3",
                                        children: i ? "Welcome back to your premium dashboard experience!" : "Here's your job search progress today"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-4",
                                        children: [i && jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-2",
                                            children: [jsxRuntimeExports.jsx(Crown, {
                                                className: "h-4 w-4 text-yellow-600"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "text-xs sm:text-sm text-yellow-700 font-medium",
                                                children: "Premium Access Active"
                                            })]
                                        }), lt === "demo" && jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-2",
                                            children: [jsxRuntimeExports.jsx(Shield, {
                                                className: "h-4 w-4 text-blue-600"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "text-xs sm:text-sm text-blue-700 font-medium",
                                                children: "Demo Mode - Sample Data"
                                            })]
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "lg:hidden flex gap-1.5 mt-3",
                                    children: [jsxRuntimeExports.jsx(Link, {
                                        to: "/jobs",
                                        className: "flex-1",
                                        children: jsxRuntimeExports.jsx(MobileButton, {
                                            variant: "primary",
                                            size: "sm",
                                            icon: Search,
                                            className: "w-full mobile-button-primary",
                                            style: i ? {} : {
                                                backgroundColor: "#b24e55"
                                            },
                                            children: i ? "Premium Jobs" : "Find Jobs"
                                        })
                                    }), jsxRuntimeExports.jsx(Link, {
                                        to: "/resume-builder",
                                        className: "flex-1",
                                        children: jsxRuntimeExports.jsx(MobileButton, {
                                            variant: "primary",
                                            size: "sm",
                                            icon: FileText,
                                            className: "w-full mobile-button-primary",
                                            children: "Resume"
                                        })
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "hidden lg:flex items-center gap-3",
                                    children: [jsxRuntimeExports.jsx(Button, {
                                        className: `text-white ${i ? "bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700" : ""}`,
                                        style: i ? {} : {
                                            backgroundColor: "#b24e55"
                                        },
                                        asChild: !0,
                                        children: jsxRuntimeExports.jsxs(Link, {
                                            to: "/jobs",
                                            className: "flex items-center gap-2",
                                            children: [jsxRuntimeExports.jsx(Search, {
                                                className: "h-4 w-4"
                                            }), i ? "Premium Jobs" : "Find Jobs"]
                                        })
                                    }), jsxRuntimeExports.jsx(Button, {
                                        variant: "outline",
                                        asChild: !0,
                                        children: jsxRuntimeExports.jsxs(Link, {
                                            to: "/resume-builder",
                                            className: "flex items-center gap-2",
                                            children: [jsxRuntimeExports.jsx(FileText, {
                                                className: "h-4 w-4"
                                            }), i ? "AI Resume Builder" : "Optimize Resume"]
                                        })
                                    })]
                                })]
                            })
                        })
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "mobile-grid-stack lg:grid lg:grid-cols-12 lg:gap-6",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "lg:col-span-8 space-y-4 md:space-y-6",
                            children: [jsxRuntimeExports.jsxs(BlurFade, {
                                delay: .2,
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "md:hidden mobile-grid-stack",
                                    children: [jsxRuntimeExports.jsx(MobileMetricCard, {
                                        label: i ? "Premium Applications" : "Jobs Applied",
                                        value: yt((b == null ? void 0 : b.totalApplications) || 0),
                                        change: `${(b == null ? void 0 : b.weeklyApplications) || 0} this week`,
                                        icon: Briefcase,
                                        subtitle: "Total applications",
                                        isPremium: i
                                    }), jsxRuntimeExports.jsx(MobileMetricCard, {
                                        label: i ? "Premium Outreach" : "Emails Sent",
                                        value: yt((et == null ? void 0 : et.emailsSent) || 0),
                                        change: et != null && et.emailsSent && et.emailsSent > 0 ? `${et.responseRate}% response rate` : "+0% response rate",
                                        icon: Mail,
                                        subtitle: i ? `${(et == null ? void 0 : et.responsesReceived) || 0} responses` : `${(et == null ? void 0 : et.responsesReceived) || 0} responses`,
                                        isPremium: i
                                    }), jsxRuntimeExports.jsx(MobileMetricCard, {
                                        label: i ? "Exclusive Interviews" : "Interview Invites",
                                        value: yt((b == null ? void 0 : b.interviewInvites) || 0),
                                        change: b != null && b.interviewInvites && b.interviewInvites > 0 ? `${Math.round(b.interviewInvites / (b.totalApplications || 1) * 100)}% conversion` : "+0% conversion",
                                        icon: Calendar,
                                        subtitle: "From applications",
                                        isPremium: i
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "hidden md:grid grid-cols-1 md:grid-cols-3 gap-4",
                                    children: [jsxRuntimeExports.jsx(EnhancedMetricCard, {
                                        label: i ? "Premium Applications" : "Jobs Applied",
                                        value: yt((b == null ? void 0 : b.totalApplications) || 0),
                                        change: `${(b == null ? void 0 : b.weeklyApplications) || 0} this week`,
                                        icon: Briefcase,
                                        subtitle: "Total applications",
                                        trend: (b == null ? void 0 : b.weeklyTrend) || [0, 0, 0, 0, 0, 0, 0],
                                        isPremium: i
                                    }), jsxRuntimeExports.jsx(EnhancedMetricCard, {
                                        label: i ? "Premium Outreach" : "Emails Sent",
                                        value: yt((et == null ? void 0 : et.emailsSent) || 0),
                                        change: et != null && et.emailsSent && et.emailsSent > 0 ? `${et.responseRate}% response rate` : "+0% response rate",
                                        icon: Mail,
                                        subtitle: i ? `${(et == null ? void 0 : et.responsesReceived) || 0} responses` : `${(et == null ? void 0 : et.responsesReceived) || 0} responses`,
                                        trend: [2, 3, 1, 4, 2, 5, 3],
                                        isPremium: i
                                    }), jsxRuntimeExports.jsx(EnhancedMetricCard, {
                                        label: i ? "Exclusive Interviews" : "Interview Invites",
                                        value: yt((b == null ? void 0 : b.interviewInvites) || 0),
                                        change: b != null && b.interviewInvites && b.interviewInvites > 0 ? `${Math.round(b.interviewInvites / (b.totalApplications || 1) * 100)}% conversion` : "+0% conversion",
                                        icon: Calendar,
                                        subtitle: "From applications",
                                        trend: [0, 1, 0, 2, 1, 1, 2],
                                        isPremium: i
                                    })]
                                })]
                            }), jsxRuntimeExports.jsx(BlurFade, {
                                delay: .25,
                                children: jsxRuntimeExports.jsx(AppliedJobsWidget, {
                                    limit: 5
                                })
                            }), jsxRuntimeExports.jsx(BlurFade, {
                                delay: .3,
                                children: jsxRuntimeExports.jsx(AIJobRecommendations, {
                                    limit: 5
                                })
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "lg:col-span-4 space-y-4 md:space-y-6",
                            children: [jsxRuntimeExports.jsx(BlurFade, {
                                delay: .5,
                                children: jsxRuntimeExports.jsx(CareerProgressWidget, {})
                            }), jsxRuntimeExports.jsx(BlurFade, {
                                delay: .6,
                                children: jsxRuntimeExports.jsxs(Card, {
                                    className: "bg-white border-0 shadow-sm",
                                    children: [jsxRuntimeExports.jsx(CardHeader, {
                                        className: "pb-3",
                                        children: jsxRuntimeExports.jsxs(CardTitle, {
                                            className: "text-lg font-bold text-gray-900 flex items-center gap-2",
                                            children: [jsxRuntimeExports.jsx(Rocket, {
                                                className: "h-5 w-5",
                                                style: {
                                                    color: "#b24e55"
                                                }
                                            }), "Quick Actions"]
                                        })
                                    }), jsxRuntimeExports.jsxs(CardContent, {
                                        className: "space-y-3",
                                        children: [jsxRuntimeExports.jsx(QuickActionButton, {
                                            icon: FileText,
                                            label: "Optimize Resume",
                                            description: "AI-powered improvements",
                                            to: "/resume-builder",
                                            color: "primary"
                                        }), jsxRuntimeExports.jsx(QuickActionButton, {
                                            icon: Mail,
                                            label: "Email Campaign",
                                            description: "Connect with recruiters",
                                            to: "/email-outreach",
                                            color: "success"
                                        })]
                                    })]
                                })
                            }), jsxRuntimeExports.jsx(BlurFade, {
                                delay: .65,
                                children: jsxRuntimeExports.jsx(SkillsAnalyticsWidget, {})
                            })]
                        })]
                    })]
                })
            })]
        })]
    })
}
  , convertParsedResumeToEnhancedFormat = s => ({
    personalInfo: {
        name: s.profile.name || "",
        email: s.profile.email || "",
        phone: s.profile.phone || "",
        location: s.profile.location || "",
        website: s.profile.url || "",
        linkedin: s.profile.linkedin || extractLinkedInFromUrl(s.profile.url) || "",
        github: s.profile.github || extractGitHubFromUrl(s.profile.url) || ""
    },
    summary: s.profile.summary || "",
    experience: (s.workExperiences || []).map( (e, i) => ({
        id: `exp-${i}`,
        jobTitle: e.jobTitle || "",
        company: e.company || "",
        location: "",
        startDate: extractStartDate(e.date),
        endDate: extractEndDate(e.date),
        current: e.date.toLowerCase().includes("present") || e.date.toLowerCase().includes("current"),
        description: e.jobDescription || (e.descriptions || []).join(`
`),
        achievements: e.achievements || e.descriptions || []
    })),
    education: (s.educations || []).map( (e, i) => ({
        id: `edu-${i}`,
        degree: e.degree || "",
        school: e.school || "",
        location: "",
        startDate: extractStartDate(e.date),
        endDate: extractEndDate(e.date),
        gpa: e.gpa || "",
        honors: (e.honors || []).join(", "),
        coursework: e.coursework || e.descriptions || []
    })),
    skills: {
        technical: [...s.skills.programmingLanguages || [], ...s.skills.technicalSkills || [], ...s.skills.tools || []],
        soft: s.skills.softSkills || [],
        languages: [],
        frameworks: s.skills.frameworks || []
    },
    projects: (s.projects || []).map( (e, i) => ({
        id: `proj-${i}`,
        name: e.project || "",
        description: (e.descriptions || []).join(`
`),
        technologies: [],
        link: "",
        github: "",
        startDate: extractStartDate(e.date),
        endDate: extractEndDate(e.date)
    })),
    certifications: (s.certifications || []).map( (e, i) => ({
        id: `cert-${i}`,
        name: e.name || "",
        issuer: e.issuer || "",
        date: e.date || "",
        expiryDate: e.expiryDate || "",
        credentialId: e.credentialId || "",
        link: ""
    })),
    languages: (s.languages || []).map( (e, i) => ({
        id: `lang-${i}`,
        language: e.language || "",
        proficiency: e.proficiency || "Intermediate"
    })),
    volunteer: (s.volunteers || []).map( (e, i) => ({
        id: `vol-${i}`,
        organization: e.organization || "",
        role: e.role || "",
        startDate: extractStartDate(e.date),
        endDate: extractEndDate(e.date),
        description: (e.descriptions || []).join(`
`)
    })),
    awards: (s.awards || []).map( (e, i) => ({
        id: `award-${i}`,
        title: e.title || "",
        issuer: e.issuer || "",
        date: e.date || "",
        description: e.description || ""
    }))
})
  , extractLinkedInFromUrl = s => {
    if (!s)
        return "";
    const e = s.match(/linkedin\.com\/in\/([^\/\s]+)/i);
    return e ? `linkedin.com/in/${e[1]}` : ""
}
  , extractGitHubFromUrl = s => {
    if (!s)
        return "";
    const e = s.match(/github\.com\/([^\/\s]+)/i);
    return e ? `github.com/${e[1]}` : ""
}
  , extractStartDate = s => {
    var i;
    if (!s)
        return "";
    const e = [/(\w+\s+\d{4})\s*[-–—]\s*(\w+\s+\d{4}|\w+)/i, /(\d{4})\s*[-–—]\s*(\d{4}|\w+)/i, /(\d{1,2}\/\d{4})\s*[-–—]\s*(\d{1,2}\/\d{4}|\w+)/i];
    for (const o of e) {
        const a = s.match(o);
        if (a)
            return a[1]
    }
    return ((i = s.split(/[-–—]/)[0]) == null ? void 0 : i.trim()) || ""
}
  , extractEndDate = s => {
    if (!s)
        return "";
    if (s.toLowerCase().includes("present") || s.toLowerCase().includes("current") || s.toLowerCase().includes("now"))
        return "Present";
    const e = [/(\w+\s+\d{4})\s*[-–—]\s*(\w+\s+\d{4})/i, /(\d{4})\s*[-–—]\s*(\d{4})/i, /(\d{1,2}\/\d{4})\s*[-–—]\s*(\d{1,2}\/\d{4})/i];
    for (const o of e) {
        const a = s.match(o);
        if (a)
            return a[2]
    }
    const i = s.split(/[-–—]/);
    return i.length > 1 ? i[1].trim() : ""
}
  , rainbowButtonVariants = cva(cn("relative cursor-pointer group transition-all animate-rainbow", "inline-flex items-center justify-center gap-2 shrink-0", "rounded-sm outline-none focus-visible:ring-[3px] aria-invalid:border-destructive", "text-sm font-medium whitespace-nowrap", "disabled:pointer-events-none disabled:opacity-50", "[&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0"), {
    variants: {
        variant: {
            default: "border-0 bg-[linear-gradient(#121213,#121213),linear-gradient(#121213_50%,rgba(18,18,19,0.6)_80%,rgba(18,18,19,0)),linear-gradient(90deg,var(--color-1),var(--color-5),var(--color-3),var(--color-4),var(--color-2))] bg-[length:200%] text-primary-foreground [background-clip:padding-box,border-box,border-box] [background-origin:border-box] [border:calc(0.125rem)_solid_transparent] before:absolute before:bottom-[-20%] before:left-1/2 before:z-0 before:h-1/5 before:w-3/5 before:-translate-x-1/2 before:animate-rainbow before:bg-[linear-gradient(90deg,var(--color-1),var(--color-5),var(--color-3),var(--color-4),var(--color-2))] before:[filter:blur(0.75rem)] dark:bg-[linear-gradient(#fff,#fff),linear-gradient(#fff_50%,rgba(255,255,255,0.6)_80%,rgba(0,0,0,0)),linear-gradient(90deg,var(--color-1),var(--color-5),var(--color-3),var(--color-4),var(--color-2))]",
            outline: "border border-input border-b-transparent bg-[linear-gradient(#ffffff,#ffffff),linear-gradient(#ffffff_50%,rgba(18,18,19,0.6)_80%,rgba(18,18,19,0)),linear-gradient(90deg,var(--color-1),var(--color-5),var(--color-3),var(--color-4),var(--color-2))] bg-[length:200%] text-accent-foreground [background-clip:padding-box,border-box,border-box] [background-origin:border-box] before:absolute before:bottom-[-20%] before:left-1/2 before:z-0 before:h-1/5 before:w-3/5 before:-translate-x-1/2 before:animate-rainbow before:bg-[linear-gradient(90deg,var(--color-1),var(--color-5),var(--color-3),var(--color-4),var(--color-2))] before:[filter:blur(0.75rem)] dark:bg-[linear-gradient(#0a0a0a,#0a0a0a),linear-gradient(#0a0a0a_50%,rgba(255,255,255,0.6)_80%,rgba(0,0,0,0)),linear-gradient(90deg,var(--color-1),var(--color-5),var(--color-3),var(--color-4),var(--color-2))]"
        },
        size: {
            default: "h-9 px-4 py-2",
            sm: "h-8 rounded-xl px-3 text-xs",
            lg: "h-11 rounded-xl px-8",
            icon: "size-9"
        }
    },
    defaultVariants: {
        variant: "default",
        size: "default"
    }
})
  , RainbowButton = React.forwardRef( ({className: s, variant: e, size: i, asChild: o=!1, ...a}, c) => {
    const d = o ? Slot : "button";
    return jsxRuntimeExports.jsx(d, {
        "data-slot": "button",
        className: cn(rainbowButtonVariants({
            variant: e,
            size: i,
            className: s
        })),
        ref: c,
        ...a
    })
}
);
RainbowButton.displayName = "RainbowButton";
const animationProps = {
    initial: {
        "--x": "100%",
        scale: .8
    },
    animate: {
        "--x": "-100%",
        scale: 1
    },
    whileTap: {
        scale: .95
    },
    transition: {
        repeat: 1 / 0,
        repeatType: "loop",
        repeatDelay: 1,
        type: "spring",
        stiffness: 20,
        damping: 15,
        mass: 2,
        scale: {
            type: "spring",
            stiffness: 200,
            damping: 5,
            mass: .5
        }
    }
}
  , ShinyButton = React.forwardRef( ({children: s, className: e, ...i}, o) => jsxRuntimeExports.jsxs(motion.button, {
    ref: o,
    className: cn("relative cursor-pointer rounded-lg px-6 py-2 font-medium backdrop-blur-xl border transition-shadow duration-300 ease-in-out hover:shadow dark:bg-[radial-gradient(circle_at_50%_0%,var(--primary)/10%_0%,transparent_60%)] dark:hover:shadow-[0_0_20px_var(--primary)/10%]", e),
    ...animationProps,
    ...i,
    children: [jsxRuntimeExports.jsx("span", {
        className: "relative block size-full text-sm uppercase tracking-wide text-[rgb(0,0,0,65%)] dark:font-light dark:text-[rgb(255,255,255,90%)]",
        style: {
            maskImage: "linear-gradient(-75deg,var(--primary) calc(var(--x) + 20%),transparent calc(var(--x) + 30%),var(--primary) calc(var(--x) + 100%))"
        },
        children: s
    }), jsxRuntimeExports.jsx("span", {
        style: {
            mask: "linear-gradient(rgb(0,0,0), rgb(0,0,0)) content-box exclude,linear-gradient(rgb(0,0,0), rgb(0,0,0))",
            WebkitMask: "linear-gradient(rgb(0,0,0), rgb(0,0,0)) content-box exclude,linear-gradient(rgb(0,0,0), rgb(0,0,0))",
            backgroundImage: "linear-gradient(-75deg,var(--primary)/10% calc(var(--x)+20%),var(--primary)/50% calc(var(--x)+25%),var(--primary)/10% calc(var(--x)+100%))"
        },
        className: "absolute inset-0 z-10 block rounded-[inherit] p-px"
    })]
}));
ShinyButton.displayName = "ShinyButton";
const InteractiveHoverButton = React.forwardRef( ({children: s, className: e, ...i}, o) => jsxRuntimeExports.jsxs("button", {
    ref: o,
    className: cn("group relative w-auto cursor-pointer overflow-hidden rounded-full border bg-background p-2 px-6 text-center font-semibold", e),
    ...i,
    children: [jsxRuntimeExports.jsxs("div", {
        className: "flex items-center gap-2",
        children: [jsxRuntimeExports.jsx("div", {
            className: "h-2 w-2 rounded-full bg-primary transition-all duration-300 group-hover:scale-[100.8]"
        }), jsxRuntimeExports.jsx("span", {
            className: "inline-block transition-all duration-300 group-hover:translate-x-12 group-hover:opacity-0",
            children: s
        })]
    }), jsxRuntimeExports.jsxs("div", {
        className: "absolute top-0 z-10 flex h-full w-full translate-x-12 items-center justify-center gap-2 text-primary-foreground opacity-0 transition-all duration-300 group-hover:-translate-x-5 group-hover:opacity-100",
        children: [jsxRuntimeExports.jsx("span", {
            children: s
        }), jsxRuntimeExports.jsx(ArrowRight, {})]
    })]
}));
InteractiveHoverButton.displayName = "InteractiveHoverButton";
function useStateMachine(s, e) {
    return reactExports.useReducer( (i, o) => e[i][o] ?? i, s)
}
var SCROLL_AREA_NAME = "ScrollArea"
  , [createScrollAreaContext,createScrollAreaScope] = createContextScope$3(SCROLL_AREA_NAME)
  , [ScrollAreaProvider,useScrollAreaContext] = createScrollAreaContext(SCROLL_AREA_NAME)
  , ScrollArea$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeScrollArea: i, type: o="hover", dir: a, scrollHideDelay: c=600, ...d} = s
      , [h,g] = reactExports.useState(null)
      , [b,_] = reactExports.useState(null)
      , [$,_e] = reactExports.useState(null)
      , [tt,rt] = reactExports.useState(null)
      , [et,it] = reactExports.useState(null)
      , [st,nt] = reactExports.useState(0)
      , [lt,dt] = reactExports.useState(0)
      , [ot,at] = reactExports.useState(!1)
      , [ht,pt] = reactExports.useState(!1)
      , gt = useComposedRefs(e, yt => g(yt))
      , wt = useDirection(a);
    return jsxRuntimeExports.jsx(ScrollAreaProvider, {
        scope: i,
        type: o,
        dir: wt,
        scrollHideDelay: c,
        scrollArea: h,
        viewport: b,
        onViewportChange: _,
        content: $,
        onContentChange: _e,
        scrollbarX: tt,
        onScrollbarXChange: rt,
        scrollbarXEnabled: ot,
        onScrollbarXEnabledChange: at,
        scrollbarY: et,
        onScrollbarYChange: it,
        scrollbarYEnabled: ht,
        onScrollbarYEnabledChange: pt,
        onCornerWidthChange: nt,
        onCornerHeightChange: dt,
        children: jsxRuntimeExports.jsx(Primitive$1.div, {
            dir: wt,
            ...d,
            ref: gt,
            style: {
                position: "relative",
                "--radix-scroll-area-corner-width": st + "px",
                "--radix-scroll-area-corner-height": lt + "px",
                ...s.style
            }
        })
    })
}
);
ScrollArea$1.displayName = SCROLL_AREA_NAME;
var VIEWPORT_NAME$1 = "ScrollAreaViewport"
  , ScrollAreaViewport = reactExports.forwardRef( (s, e) => {
    const {__scopeScrollArea: i, children: o, asChild: a, nonce: c, ...d} = s
      , h = useScrollAreaContext(VIEWPORT_NAME$1, i)
      , g = reactExports.useRef(null)
      , b = useComposedRefs(e, g, h.onViewportChange);
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [jsxRuntimeExports.jsx("style", {
            dangerouslySetInnerHTML: {
                __html: `
[data-radix-scroll-area-viewport] {
  scrollbar-width: none;
  -ms-overflow-style: none;
  -webkit-overflow-scrolling: touch;
}
[data-radix-scroll-area-viewport]::-webkit-scrollbar {
  display: none;
}
:where([data-radix-scroll-area-viewport]) {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}
:where([data-radix-scroll-area-content]) {
  flex-grow: 1;
}
`
            },
            nonce: c
        }), jsxRuntimeExports.jsx(Primitive$1.div, {
            "data-radix-scroll-area-viewport": "",
            ...d,
            asChild: a,
            ref: b,
            style: {
                overflowX: h.scrollbarXEnabled ? "scroll" : "hidden",
                overflowY: h.scrollbarYEnabled ? "scroll" : "hidden",
                ...s.style
            },
            children: getSubtree({
                asChild: a,
                children: o
            }, _ => jsxRuntimeExports.jsx("div", {
                "data-radix-scroll-area-content": "",
                ref: h.onContentChange,
                style: {
                    minWidth: h.scrollbarXEnabled ? "fit-content" : void 0
                },
                children: _
            }))
        })]
    })
}
);
ScrollAreaViewport.displayName = VIEWPORT_NAME$1;
var SCROLLBAR_NAME = "ScrollAreaScrollbar"
  , ScrollAreaScrollbar = reactExports.forwardRef( (s, e) => {
    const {forceMount: i, ...o} = s
      , a = useScrollAreaContext(SCROLLBAR_NAME, s.__scopeScrollArea)
      , {onScrollbarXEnabledChange: c, onScrollbarYEnabledChange: d} = a
      , h = s.orientation === "horizontal";
    return reactExports.useEffect( () => (h ? c(!0) : d(!0),
    () => {
        h ? c(!1) : d(!1)
    }
    ), [h, c, d]),
    a.type === "hover" ? jsxRuntimeExports.jsx(ScrollAreaScrollbarHover, {
        ...o,
        ref: e,
        forceMount: i
    }) : a.type === "scroll" ? jsxRuntimeExports.jsx(ScrollAreaScrollbarScroll, {
        ...o,
        ref: e,
        forceMount: i
    }) : a.type === "auto" ? jsxRuntimeExports.jsx(ScrollAreaScrollbarAuto, {
        ...o,
        ref: e,
        forceMount: i
    }) : a.type === "always" ? jsxRuntimeExports.jsx(ScrollAreaScrollbarVisible, {
        ...o,
        ref: e
    }) : null
}
);
ScrollAreaScrollbar.displayName = SCROLLBAR_NAME;
var ScrollAreaScrollbarHover = reactExports.forwardRef( (s, e) => {
    const {forceMount: i, ...o} = s
      , a = useScrollAreaContext(SCROLLBAR_NAME, s.__scopeScrollArea)
      , [c,d] = reactExports.useState(!1);
    return reactExports.useEffect( () => {
        const h = a.scrollArea;
        let g = 0;
        if (h) {
            const b = () => {
                window.clearTimeout(g),
                d(!0)
            }
              , _ = () => {
                g = window.setTimeout( () => d(!1), a.scrollHideDelay)
            }
            ;
            return h.addEventListener("pointerenter", b),
            h.addEventListener("pointerleave", _),
            () => {
                window.clearTimeout(g),
                h.removeEventListener("pointerenter", b),
                h.removeEventListener("pointerleave", _)
            }
        }
    }
    , [a.scrollArea, a.scrollHideDelay]),
    jsxRuntimeExports.jsx(Presence, {
        present: i || c,
        children: jsxRuntimeExports.jsx(ScrollAreaScrollbarAuto, {
            "data-state": c ? "visible" : "hidden",
            ...o,
            ref: e
        })
    })
}
)
  , ScrollAreaScrollbarScroll = reactExports.forwardRef( (s, e) => {
    const {forceMount: i, ...o} = s
      , a = useScrollAreaContext(SCROLLBAR_NAME, s.__scopeScrollArea)
      , c = s.orientation === "horizontal"
      , d = useDebounceCallback( () => g("SCROLL_END"), 100)
      , [h,g] = useStateMachine("hidden", {
        hidden: {
            SCROLL: "scrolling"
        },
        scrolling: {
            SCROLL_END: "idle",
            POINTER_ENTER: "interacting"
        },
        interacting: {
            SCROLL: "interacting",
            POINTER_LEAVE: "idle"
        },
        idle: {
            HIDE: "hidden",
            SCROLL: "scrolling",
            POINTER_ENTER: "interacting"
        }
    });
    return reactExports.useEffect( () => {
        if (h === "idle") {
            const b = window.setTimeout( () => g("HIDE"), a.scrollHideDelay);
            return () => window.clearTimeout(b)
        }
    }
    , [h, a.scrollHideDelay, g]),
    reactExports.useEffect( () => {
        const b = a.viewport
          , _ = c ? "scrollLeft" : "scrollTop";
        if (b) {
            let $ = b[_];
            const _e = () => {
                const tt = b[_];
                $ !== tt && (g("SCROLL"),
                d()),
                $ = tt
            }
            ;
            return b.addEventListener("scroll", _e),
            () => b.removeEventListener("scroll", _e)
        }
    }
    , [a.viewport, c, g, d]),
    jsxRuntimeExports.jsx(Presence, {
        present: i || h !== "hidden",
        children: jsxRuntimeExports.jsx(ScrollAreaScrollbarVisible, {
            "data-state": h === "hidden" ? "hidden" : "visible",
            ...o,
            ref: e,
            onPointerEnter: composeEventHandlers(s.onPointerEnter, () => g("POINTER_ENTER")),
            onPointerLeave: composeEventHandlers(s.onPointerLeave, () => g("POINTER_LEAVE"))
        })
    })
}
)
  , ScrollAreaScrollbarAuto = reactExports.forwardRef( (s, e) => {
    const i = useScrollAreaContext(SCROLLBAR_NAME, s.__scopeScrollArea)
      , {forceMount: o, ...a} = s
      , [c,d] = reactExports.useState(!1)
      , h = s.orientation === "horizontal"
      , g = useDebounceCallback( () => {
        if (i.viewport) {
            const b = i.viewport.offsetWidth < i.viewport.scrollWidth
              , _ = i.viewport.offsetHeight < i.viewport.scrollHeight;
            d(h ? b : _)
        }
    }
    , 10);
    return useResizeObserver(i.viewport, g),
    useResizeObserver(i.content, g),
    jsxRuntimeExports.jsx(Presence, {
        present: o || c,
        children: jsxRuntimeExports.jsx(ScrollAreaScrollbarVisible, {
            "data-state": c ? "visible" : "hidden",
            ...a,
            ref: e
        })
    })
}
)
  , ScrollAreaScrollbarVisible = reactExports.forwardRef( (s, e) => {
    const {orientation: i="vertical", ...o} = s
      , a = useScrollAreaContext(SCROLLBAR_NAME, s.__scopeScrollArea)
      , c = reactExports.useRef(null)
      , d = reactExports.useRef(0)
      , [h,g] = reactExports.useState({
        content: 0,
        viewport: 0,
        scrollbar: {
            size: 0,
            paddingStart: 0,
            paddingEnd: 0
        }
    })
      , b = getThumbRatio(h.viewport, h.content)
      , _ = {
        ...o,
        sizes: h,
        onSizesChange: g,
        hasThumb: b > 0 && b < 1,
        onThumbChange: _e => c.current = _e,
        onThumbPointerUp: () => d.current = 0,
        onThumbPointerDown: _e => d.current = _e
    };
    function $(_e, tt) {
        return getScrollPositionFromPointer(_e, d.current, h, tt)
    }
    return i === "horizontal" ? jsxRuntimeExports.jsx(ScrollAreaScrollbarX, {
        ..._,
        ref: e,
        onThumbPositionChange: () => {
            if (a.viewport && c.current) {
                const _e = a.viewport.scrollLeft
                  , tt = getThumbOffsetFromScroll(_e, h, a.dir);
                c.current.style.transform = `translate3d(${tt}px, 0, 0)`
            }
        }
        ,
        onWheelScroll: _e => {
            a.viewport && (a.viewport.scrollLeft = _e)
        }
        ,
        onDragScroll: _e => {
            a.viewport && (a.viewport.scrollLeft = $(_e, a.dir))
        }
    }) : i === "vertical" ? jsxRuntimeExports.jsx(ScrollAreaScrollbarY, {
        ..._,
        ref: e,
        onThumbPositionChange: () => {
            if (a.viewport && c.current) {
                const _e = a.viewport.scrollTop
                  , tt = getThumbOffsetFromScroll(_e, h);
                c.current.style.transform = `translate3d(0, ${tt}px, 0)`
            }
        }
        ,
        onWheelScroll: _e => {
            a.viewport && (a.viewport.scrollTop = _e)
        }
        ,
        onDragScroll: _e => {
            a.viewport && (a.viewport.scrollTop = $(_e))
        }
    }) : null
}
)
  , ScrollAreaScrollbarX = reactExports.forwardRef( (s, e) => {
    const {sizes: i, onSizesChange: o, ...a} = s
      , c = useScrollAreaContext(SCROLLBAR_NAME, s.__scopeScrollArea)
      , [d,h] = reactExports.useState()
      , g = reactExports.useRef(null)
      , b = useComposedRefs(e, g, c.onScrollbarXChange);
    return reactExports.useEffect( () => {
        g.current && h(getComputedStyle(g.current))
    }
    , [g]),
    jsxRuntimeExports.jsx(ScrollAreaScrollbarImpl, {
        "data-orientation": "horizontal",
        ...a,
        ref: b,
        sizes: i,
        style: {
            bottom: 0,
            left: c.dir === "rtl" ? "var(--radix-scroll-area-corner-width)" : 0,
            right: c.dir === "ltr" ? "var(--radix-scroll-area-corner-width)" : 0,
            "--radix-scroll-area-thumb-width": getThumbSize(i) + "px",
            ...s.style
        },
        onThumbPointerDown: _ => s.onThumbPointerDown(_.x),
        onDragScroll: _ => s.onDragScroll(_.x),
        onWheelScroll: (_, $) => {
            if (c.viewport) {
                const _e = c.viewport.scrollLeft + _.deltaX;
                s.onWheelScroll(_e),
                isScrollingWithinScrollbarBounds(_e, $) && _.preventDefault()
            }
        }
        ,
        onResize: () => {
            g.current && c.viewport && d && o({
                content: c.viewport.scrollWidth,
                viewport: c.viewport.offsetWidth,
                scrollbar: {
                    size: g.current.clientWidth,
                    paddingStart: toInt(d.paddingLeft),
                    paddingEnd: toInt(d.paddingRight)
                }
            })
        }
    })
}
)
  , ScrollAreaScrollbarY = reactExports.forwardRef( (s, e) => {
    const {sizes: i, onSizesChange: o, ...a} = s
      , c = useScrollAreaContext(SCROLLBAR_NAME, s.__scopeScrollArea)
      , [d,h] = reactExports.useState()
      , g = reactExports.useRef(null)
      , b = useComposedRefs(e, g, c.onScrollbarYChange);
    return reactExports.useEffect( () => {
        g.current && h(getComputedStyle(g.current))
    }
    , [g]),
    jsxRuntimeExports.jsx(ScrollAreaScrollbarImpl, {
        "data-orientation": "vertical",
        ...a,
        ref: b,
        sizes: i,
        style: {
            top: 0,
            right: c.dir === "ltr" ? 0 : void 0,
            left: c.dir === "rtl" ? 0 : void 0,
            bottom: "var(--radix-scroll-area-corner-height)",
            "--radix-scroll-area-thumb-height": getThumbSize(i) + "px",
            ...s.style
        },
        onThumbPointerDown: _ => s.onThumbPointerDown(_.y),
        onDragScroll: _ => s.onDragScroll(_.y),
        onWheelScroll: (_, $) => {
            if (c.viewport) {
                const _e = c.viewport.scrollTop + _.deltaY;
                s.onWheelScroll(_e),
                isScrollingWithinScrollbarBounds(_e, $) && _.preventDefault()
            }
        }
        ,
        onResize: () => {
            g.current && c.viewport && d && o({
                content: c.viewport.scrollHeight,
                viewport: c.viewport.offsetHeight,
                scrollbar: {
                    size: g.current.clientHeight,
                    paddingStart: toInt(d.paddingTop),
                    paddingEnd: toInt(d.paddingBottom)
                }
            })
        }
    })
}
)
  , [ScrollbarProvider,useScrollbarContext] = createScrollAreaContext(SCROLLBAR_NAME)
  , ScrollAreaScrollbarImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeScrollArea: i, sizes: o, hasThumb: a, onThumbChange: c, onThumbPointerUp: d, onThumbPointerDown: h, onThumbPositionChange: g, onDragScroll: b, onWheelScroll: _, onResize: $, ..._e} = s
      , tt = useScrollAreaContext(SCROLLBAR_NAME, i)
      , [rt,et] = reactExports.useState(null)
      , it = useComposedRefs(e, gt => et(gt))
      , st = reactExports.useRef(null)
      , nt = reactExports.useRef("")
      , lt = tt.viewport
      , dt = o.content - o.viewport
      , ot = useCallbackRef$1(_)
      , at = useCallbackRef$1(g)
      , ht = useDebounceCallback($, 10);
    function pt(gt) {
        if (st.current) {
            const wt = gt.clientX - st.current.left
              , yt = gt.clientY - st.current.top;
            b({
                x: wt,
                y: yt
            })
        }
    }
    return reactExports.useEffect( () => {
        const gt = wt => {
            const yt = wt.target;
            (rt == null ? void 0 : rt.contains(yt)) && ot(wt, dt)
        }
        ;
        return document.addEventListener("wheel", gt, {
            passive: !1
        }),
        () => document.removeEventListener("wheel", gt, {
            passive: !1
        })
    }
    , [lt, rt, dt, ot]),
    reactExports.useEffect(at, [o, at]),
    useResizeObserver(rt, ht),
    useResizeObserver(tt.content, ht),
    jsxRuntimeExports.jsx(ScrollbarProvider, {
        scope: i,
        scrollbar: rt,
        hasThumb: a,
        onThumbChange: useCallbackRef$1(c),
        onThumbPointerUp: useCallbackRef$1(d),
        onThumbPositionChange: at,
        onThumbPointerDown: useCallbackRef$1(h),
        children: jsxRuntimeExports.jsx(Primitive$1.div, {
            ..._e,
            ref: it,
            style: {
                position: "absolute",
                ..._e.style
            },
            onPointerDown: composeEventHandlers(s.onPointerDown, gt => {
                gt.button === 0 && (gt.target.setPointerCapture(gt.pointerId),
                st.current = rt.getBoundingClientRect(),
                nt.current = document.body.style.webkitUserSelect,
                document.body.style.webkitUserSelect = "none",
                tt.viewport && (tt.viewport.style.scrollBehavior = "auto"),
                pt(gt))
            }
            ),
            onPointerMove: composeEventHandlers(s.onPointerMove, pt),
            onPointerUp: composeEventHandlers(s.onPointerUp, gt => {
                const wt = gt.target;
                wt.hasPointerCapture(gt.pointerId) && wt.releasePointerCapture(gt.pointerId),
                document.body.style.webkitUserSelect = nt.current,
                tt.viewport && (tt.viewport.style.scrollBehavior = ""),
                st.current = null
            }
            )
        })
    })
}
)
  , THUMB_NAME$1 = "ScrollAreaThumb"
  , ScrollAreaThumb = reactExports.forwardRef( (s, e) => {
    const {forceMount: i, ...o} = s
      , a = useScrollbarContext(THUMB_NAME$1, s.__scopeScrollArea);
    return jsxRuntimeExports.jsx(Presence, {
        present: i || a.hasThumb,
        children: jsxRuntimeExports.jsx(ScrollAreaThumbImpl, {
            ref: e,
            ...o
        })
    })
}
)
  , ScrollAreaThumbImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeScrollArea: i, style: o, ...a} = s
      , c = useScrollAreaContext(THUMB_NAME$1, i)
      , d = useScrollbarContext(THUMB_NAME$1, i)
      , {onThumbPositionChange: h} = d
      , g = useComposedRefs(e, $ => d.onThumbChange($))
      , b = reactExports.useRef()
      , _ = useDebounceCallback( () => {
        b.current && (b.current(),
        b.current = void 0)
    }
    , 100);
    return reactExports.useEffect( () => {
        const $ = c.viewport;
        if ($) {
            const _e = () => {
                if (_(),
                !b.current) {
                    const tt = addUnlinkedScrollListener($, h);
                    b.current = tt,
                    h()
                }
            }
            ;
            return h(),
            $.addEventListener("scroll", _e),
            () => $.removeEventListener("scroll", _e)
        }
    }
    , [c.viewport, _, h]),
    jsxRuntimeExports.jsx(Primitive$1.div, {
        "data-state": d.hasThumb ? "visible" : "hidden",
        ...a,
        ref: g,
        style: {
            width: "var(--radix-scroll-area-thumb-width)",
            height: "var(--radix-scroll-area-thumb-height)",
            ...o
        },
        onPointerDownCapture: composeEventHandlers(s.onPointerDownCapture, $ => {
            const tt = $.target.getBoundingClientRect()
              , rt = $.clientX - tt.left
              , et = $.clientY - tt.top;
            d.onThumbPointerDown({
                x: rt,
                y: et
            })
        }
        ),
        onPointerUp: composeEventHandlers(s.onPointerUp, d.onThumbPointerUp)
    })
}
);
ScrollAreaThumb.displayName = THUMB_NAME$1;
var CORNER_NAME = "ScrollAreaCorner"
  , ScrollAreaCorner = reactExports.forwardRef( (s, e) => {
    const i = useScrollAreaContext(CORNER_NAME, s.__scopeScrollArea)
      , o = !!(i.scrollbarX && i.scrollbarY);
    return i.type !== "scroll" && o ? jsxRuntimeExports.jsx(ScrollAreaCornerImpl, {
        ...s,
        ref: e
    }) : null
}
);
ScrollAreaCorner.displayName = CORNER_NAME;
var ScrollAreaCornerImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeScrollArea: i, ...o} = s
      , a = useScrollAreaContext(CORNER_NAME, i)
      , [c,d] = reactExports.useState(0)
      , [h,g] = reactExports.useState(0)
      , b = !!(c && h);
    return useResizeObserver(a.scrollbarX, () => {
        var $;
        const _ = (($ = a.scrollbarX) == null ? void 0 : $.offsetHeight) || 0;
        a.onCornerHeightChange(_),
        g(_)
    }
    ),
    useResizeObserver(a.scrollbarY, () => {
        var $;
        const _ = (($ = a.scrollbarY) == null ? void 0 : $.offsetWidth) || 0;
        a.onCornerWidthChange(_),
        d(_)
    }
    ),
    b ? jsxRuntimeExports.jsx(Primitive$1.div, {
        ...o,
        ref: e,
        style: {
            width: c,
            height: h,
            position: "absolute",
            right: a.dir === "ltr" ? 0 : void 0,
            left: a.dir === "rtl" ? 0 : void 0,
            bottom: 0,
            ...s.style
        }
    }) : null
}
);
function toInt(s) {
    return s ? parseInt(s, 10) : 0
}
function getThumbRatio(s, e) {
    const i = s / e;
    return isNaN(i) ? 0 : i
}
function getThumbSize(s) {
    const e = getThumbRatio(s.viewport, s.content)
      , i = s.scrollbar.paddingStart + s.scrollbar.paddingEnd
      , o = (s.scrollbar.size - i) * e;
    return Math.max(o, 18)
}
function getScrollPositionFromPointer(s, e, i, o="ltr") {
    const a = getThumbSize(i)
      , c = a / 2
      , d = e || c
      , h = a - d
      , g = i.scrollbar.paddingStart + d
      , b = i.scrollbar.size - i.scrollbar.paddingEnd - h
      , _ = i.content - i.viewport
      , $ = o === "ltr" ? [0, _] : [_ * -1, 0];
    return linearScale([g, b], $)(s)
}
function getThumbOffsetFromScroll(s, e, i="ltr") {
    const o = getThumbSize(e)
      , a = e.scrollbar.paddingStart + e.scrollbar.paddingEnd
      , c = e.scrollbar.size - a
      , d = e.content - e.viewport
      , h = c - o
      , g = i === "ltr" ? [0, d] : [d * -1, 0]
      , b = clamp(s, g);
    return linearScale([0, d], [0, h])(b)
}
function linearScale(s, e) {
    return i => {
        if (s[0] === s[1] || e[0] === e[1])
            return e[0];
        const o = (e[1] - e[0]) / (s[1] - s[0]);
        return e[0] + o * (i - s[0])
    }
}
function isScrollingWithinScrollbarBounds(s, e) {
    return s > 0 && s < e
}
var addUnlinkedScrollListener = (s, e= () => {}
) => {
    let i = {
        left: s.scrollLeft,
        top: s.scrollTop
    }
      , o = 0;
    return function a() {
        const c = {
            left: s.scrollLeft,
            top: s.scrollTop
        }
          , d = i.left !== c.left
          , h = i.top !== c.top;
        (d || h) && e(),
        i = c,
        o = window.requestAnimationFrame(a)
    }(),
    () => window.cancelAnimationFrame(o)
}
;
function useDebounceCallback(s, e) {
    const i = useCallbackRef$1(s)
      , o = reactExports.useRef(0);
    return reactExports.useEffect( () => () => window.clearTimeout(o.current), []),
    reactExports.useCallback( () => {
        window.clearTimeout(o.current),
        o.current = window.setTimeout(i, e)
    }
    , [i, e])
}
function useResizeObserver(s, e) {
    const i = useCallbackRef$1(e);
    useLayoutEffect2( () => {
        let o = 0;
        if (s) {
            const a = new ResizeObserver( () => {
                cancelAnimationFrame(o),
                o = window.requestAnimationFrame(i)
            }
            );
            return a.observe(s),
            () => {
                window.cancelAnimationFrame(o),
                a.unobserve(s)
            }
        }
    }
    , [s, i])
}
function getSubtree(s, e) {
    const {asChild: i, children: o} = s;
    if (!i)
        return typeof e == "function" ? e(o) : e;
    const a = reactExports.Children.only(o);
    return reactExports.cloneElement(a, {
        children: typeof e == "function" ? e(a.props.children) : e
    })
}
var Root$4 = ScrollArea$1
  , Viewport$1 = ScrollAreaViewport
  , Corner = ScrollAreaCorner;
const ScrollArea = reactExports.forwardRef( ({className: s, children: e, ...i}, o) => jsxRuntimeExports.jsxs(Root$4, {
    ref: o,
    className: cn("relative overflow-hidden", s),
    ...i,
    children: [jsxRuntimeExports.jsx(Viewport$1, {
        className: "h-full w-full rounded-[inherit]",
        children: e
    }), jsxRuntimeExports.jsx(ScrollBar, {}), jsxRuntimeExports.jsx(Corner, {})]
}));
ScrollArea.displayName = Root$4.displayName;
const ScrollBar = reactExports.forwardRef( ({className: s, orientation: e="vertical", ...i}, o) => jsxRuntimeExports.jsx(ScrollAreaScrollbar, {
    ref: o,
    orientation: e,
    className: cn("flex touch-none select-none transition-colors", e === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]", e === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-[1px]", s),
    ...i,
    children: jsxRuntimeExports.jsx(ScrollAreaThumb, {
        className: "relative flex-1 rounded-full bg-border"
    })
}));
ScrollBar.displayName = ScrollAreaScrollbar.displayName;
const PanelGroupContext = reactExports.createContext(null);
PanelGroupContext.displayName = "PanelGroupContext";
const DATA_ATTRIBUTES = {
    group: "data-panel-group",
    groupDirection: "data-panel-group-direction",
    groupId: "data-panel-group-id",
    panel: "data-panel",
    panelCollapsible: "data-panel-collapsible",
    panelId: "data-panel-id",
    panelSize: "data-panel-size",
    resizeHandle: "data-resize-handle",
    resizeHandleActive: "data-resize-handle-active",
    resizeHandleEnabled: "data-panel-resize-handle-enabled",
    resizeHandleId: "data-panel-resize-handle-id",
    resizeHandleState: "data-resize-handle-state"
}
  , PRECISION = 10
  , useIsomorphicLayoutEffect = reactExports.useLayoutEffect
  , useId = React$1.useId
  , wrappedUseId = typeof useId == "function" ? useId : () => null;
let counter = 0;
function useUniqueId(s=null) {
    const e = wrappedUseId()
      , i = reactExports.useRef(s || e || null);
    return i.current === null && (i.current = "" + counter++),
    s ?? i.current
}
function PanelWithForwardedRef({children: s, className: e="", collapsedSize: i, collapsible: o, defaultSize: a, forwardedRef: c, id: d, maxSize: h, minSize: g, onCollapse: b, onExpand: _, onResize: $, order: _e, style: tt, tagName: rt="div", ...et}) {
    const it = reactExports.useContext(PanelGroupContext);
    if (it === null)
        throw Error("Panel components must be rendered within a PanelGroup container");
    const {collapsePanel: st, expandPanel: nt, getPanelSize: lt, getPanelStyle: dt, groupId: ot, isPanelCollapsed: at, reevaluatePanelConstraints: ht, registerPanel: pt, resizePanel: gt, unregisterPanel: wt} = it
      , yt = useUniqueId(d)
      , Rt = reactExports.useRef({
        callbacks: {
            onCollapse: b,
            onExpand: _,
            onResize: $
        },
        constraints: {
            collapsedSize: i,
            collapsible: o,
            defaultSize: a,
            maxSize: h,
            minSize: g
        },
        id: yt,
        idIsFromProps: d !== void 0,
        order: _e
    });
    reactExports.useRef({
        didLogMissingDefaultSizeWarning: !1
    }),
    useIsomorphicLayoutEffect( () => {
        const {callbacks: ss, constraints: zt} = Rt.current
          , At = {
            ...zt
        };
        Rt.current.id = yt,
        Rt.current.idIsFromProps = d !== void 0,
        Rt.current.order = _e,
        ss.onCollapse = b,
        ss.onExpand = _,
        ss.onResize = $,
        zt.collapsedSize = i,
        zt.collapsible = o,
        zt.defaultSize = a,
        zt.maxSize = h,
        zt.minSize = g,
        (At.collapsedSize !== zt.collapsedSize || At.collapsible !== zt.collapsible || At.maxSize !== zt.maxSize || At.minSize !== zt.minSize) && ht(Rt.current, At)
    }
    ),
    useIsomorphicLayoutEffect( () => {
        const ss = Rt.current;
        return pt(ss),
        () => {
            wt(ss)
        }
    }
    , [_e, yt, pt, wt]),
    reactExports.useImperativeHandle(c, () => ({
        collapse: () => {
            st(Rt.current)
        }
        ,
        expand: ss => {
            nt(Rt.current, ss)
        }
        ,
        getId() {
            return yt
        },
        getSize() {
            return lt(Rt.current)
        },
        isCollapsed() {
            return at(Rt.current)
        },
        isExpanded() {
            return !at(Rt.current)
        },
        resize: ss => {
            gt(Rt.current, ss)
        }
    }), [st, nt, lt, at, yt, gt]);
    const Mt = dt(Rt.current, a);
    return reactExports.createElement(rt, {
        ...et,
        children: s,
        className: e,
        id: yt,
        style: {
            ...Mt,
            ...tt
        },
        [DATA_ATTRIBUTES.groupId]: ot,
        [DATA_ATTRIBUTES.panel]: "",
        [DATA_ATTRIBUTES.panelCollapsible]: o || void 0,
        [DATA_ATTRIBUTES.panelId]: yt,
        [DATA_ATTRIBUTES.panelSize]: parseFloat("" + Mt.flexGrow).toFixed(1)
    })
}
const Panel = reactExports.forwardRef( (s, e) => reactExports.createElement(PanelWithForwardedRef, {
    ...s,
    forwardedRef: e
}));
PanelWithForwardedRef.displayName = "Panel";
Panel.displayName = "forwardRef(Panel)";
let currentCursorStyle = null
  , prevRuleIndex = -1
  , styleElement = null;
function getCursorStyle(s, e) {
    if (e) {
        const i = (e & EXCEEDED_HORIZONTAL_MIN) !== 0
          , o = (e & EXCEEDED_HORIZONTAL_MAX) !== 0
          , a = (e & EXCEEDED_VERTICAL_MIN) !== 0
          , c = (e & EXCEEDED_VERTICAL_MAX) !== 0;
        if (i)
            return a ? "se-resize" : c ? "ne-resize" : "e-resize";
        if (o)
            return a ? "sw-resize" : c ? "nw-resize" : "w-resize";
        if (a)
            return "s-resize";
        if (c)
            return "n-resize"
    }
    switch (s) {
    case "horizontal":
        return "ew-resize";
    case "intersection":
        return "move";
    case "vertical":
        return "ns-resize"
    }
}
function resetGlobalCursorStyle() {
    styleElement !== null && (document.head.removeChild(styleElement),
    currentCursorStyle = null,
    styleElement = null,
    prevRuleIndex = -1)
}
function setGlobalCursorStyle(s, e) {
    var i, o;
    const a = getCursorStyle(s, e);
    if (currentCursorStyle !== a) {
        if (currentCursorStyle = a,
        styleElement === null && (styleElement = document.createElement("style"),
        document.head.appendChild(styleElement)),
        prevRuleIndex >= 0) {
            var c;
            (c = styleElement.sheet) === null || c === void 0 || c.removeRule(prevRuleIndex)
        }
        prevRuleIndex = (i = (o = styleElement.sheet) === null || o === void 0 ? void 0 : o.insertRule(`*{cursor: ${a} !important;}`)) !== null && i !== void 0 ? i : -1
    }
}
function isKeyDown(s) {
    return s.type === "keydown"
}
function isPointerEvent(s) {
    return s.type.startsWith("pointer")
}
function isMouseEvent(s) {
    return s.type.startsWith("mouse")
}
function getResizeEventCoordinates(s) {
    if (isPointerEvent(s)) {
        if (s.isPrimary)
            return {
                x: s.clientX,
                y: s.clientY
            }
    } else if (isMouseEvent(s))
        return {
            x: s.clientX,
            y: s.clientY
        };
    return {
        x: 1 / 0,
        y: 1 / 0
    }
}
function getInputType() {
    if (typeof matchMedia == "function")
        return matchMedia("(pointer:coarse)").matches ? "coarse" : "fine"
}
function intersects(s, e, i) {
    return s.x < e.x + e.width && s.x + s.width > e.x && s.y < e.y + e.height && s.y + s.height > e.y
}
function compare(s, e) {
    if (s === e)
        throw new Error("Cannot compare node with itself");
    const i = {
        a: get_ancestors(s),
        b: get_ancestors(e)
    };
    let o;
    for (; i.a.at(-1) === i.b.at(-1); )
        s = i.a.pop(),
        e = i.b.pop(),
        o = s;
    assert(o, "Stacking order can only be calculated for elements with a common ancestor");
    const a = {
        a: get_z_index(find_stacking_context(i.a)),
        b: get_z_index(find_stacking_context(i.b))
    };
    if (a.a === a.b) {
        const c = o.childNodes
          , d = {
            a: i.a.at(-1),
            b: i.b.at(-1)
        };
        let h = c.length;
        for (; h--; ) {
            const g = c[h];
            if (g === d.a)
                return 1;
            if (g === d.b)
                return -1
        }
    }
    return Math.sign(a.a - a.b)
}
const props = /\b(?:position|zIndex|opacity|transform|webkitTransform|mixBlendMode|filter|webkitFilter|isolation)\b/;
function is_flex_item(s) {
    var e;
    const i = getComputedStyle((e = get_parent(s)) !== null && e !== void 0 ? e : s).display;
    return i === "flex" || i === "inline-flex"
}
function creates_stacking_context(s) {
    const e = getComputedStyle(s);
    return !!(e.position === "fixed" || e.zIndex !== "auto" && (e.position !== "static" || is_flex_item(s)) || +e.opacity < 1 || "transform"in e && e.transform !== "none" || "webkitTransform"in e && e.webkitTransform !== "none" || "mixBlendMode"in e && e.mixBlendMode !== "normal" || "filter"in e && e.filter !== "none" || "webkitFilter"in e && e.webkitFilter !== "none" || "isolation"in e && e.isolation === "isolate" || props.test(e.willChange) || e.webkitOverflowScrolling === "touch")
}
function find_stacking_context(s) {
    let e = s.length;
    for (; e--; ) {
        const i = s[e];
        if (assert(i, "Missing node"),
        creates_stacking_context(i))
            return i
    }
    return null
}
function get_z_index(s) {
    return s && Number(getComputedStyle(s).zIndex) || 0
}
function get_ancestors(s) {
    const e = [];
    for (; s; )
        e.push(s),
        s = get_parent(s);
    return e
}
function get_parent(s) {
    const {parentNode: e} = s;
    return e && e instanceof ShadowRoot ? e.host : e
}
const EXCEEDED_HORIZONTAL_MIN = 1
  , EXCEEDED_HORIZONTAL_MAX = 2
  , EXCEEDED_VERTICAL_MIN = 4
  , EXCEEDED_VERTICAL_MAX = 8
  , isCoarsePointer = getInputType() === "coarse";
let intersectingHandles = []
  , isPointerDown = !1
  , ownerDocumentCounts = new Map
  , panelConstraintFlags = new Map;
const registeredResizeHandlers = new Set;
function registerResizeHandle(s, e, i, o, a) {
    var c;
    const {ownerDocument: d} = e
      , h = {
        direction: i,
        element: e,
        hitAreaMargins: o,
        setResizeHandlerState: a
    }
      , g = (c = ownerDocumentCounts.get(d)) !== null && c !== void 0 ? c : 0;
    return ownerDocumentCounts.set(d, g + 1),
    registeredResizeHandlers.add(h),
    updateListeners(),
    function() {
        var _;
        panelConstraintFlags.delete(s),
        registeredResizeHandlers.delete(h);
        const $ = (_ = ownerDocumentCounts.get(d)) !== null && _ !== void 0 ? _ : 1;
        if (ownerDocumentCounts.set(d, $ - 1),
        updateListeners(),
        $ === 1 && ownerDocumentCounts.delete(d),
        intersectingHandles.includes(h)) {
            const _e = intersectingHandles.indexOf(h);
            _e >= 0 && intersectingHandles.splice(_e, 1),
            updateCursor(),
            a("up", !0, null)
        }
    }
}
function handlePointerDown(s) {
    const {target: e} = s
      , {x: i, y: o} = getResizeEventCoordinates(s);
    isPointerDown = !0,
    recalculateIntersectingHandles({
        target: e,
        x: i,
        y: o
    }),
    updateListeners(),
    intersectingHandles.length > 0 && (updateResizeHandlerStates("down", s),
    s.preventDefault(),
    isWithinResizeHandle(e) || s.stopImmediatePropagation())
}
function handlePointerMove(s) {
    const {x: e, y: i} = getResizeEventCoordinates(s);
    if (isPointerDown && s.buttons === 0 && (isPointerDown = !1,
    updateResizeHandlerStates("up", s)),
    !isPointerDown) {
        const {target: o} = s;
        recalculateIntersectingHandles({
            target: o,
            x: e,
            y: i
        })
    }
    updateResizeHandlerStates("move", s),
    updateCursor(),
    intersectingHandles.length > 0 && s.preventDefault()
}
function handlePointerUp(s) {
    const {target: e} = s
      , {x: i, y: o} = getResizeEventCoordinates(s);
    panelConstraintFlags.clear(),
    isPointerDown = !1,
    intersectingHandles.length > 0 && (s.preventDefault(),
    isWithinResizeHandle(e) || s.stopImmediatePropagation()),
    updateResizeHandlerStates("up", s),
    recalculateIntersectingHandles({
        target: e,
        x: i,
        y: o
    }),
    updateCursor(),
    updateListeners()
}
function isWithinResizeHandle(s) {
    let e = s;
    for (; e; ) {
        if (e.hasAttribute(DATA_ATTRIBUTES.resizeHandle))
            return !0;
        e = e.parentElement
    }
    return !1
}
function recalculateIntersectingHandles({target: s, x: e, y: i}) {
    intersectingHandles.splice(0);
    let o = null;
    (s instanceof HTMLElement || s instanceof SVGElement) && (o = s),
    registeredResizeHandlers.forEach(a => {
        const {element: c, hitAreaMargins: d} = a
          , h = c.getBoundingClientRect()
          , {bottom: g, left: b, right: _, top: $} = h
          , _e = isCoarsePointer ? d.coarse : d.fine;
        if (e >= b - _e && e <= _ + _e && i >= $ - _e && i <= g + _e) {
            if (o !== null && document.contains(o) && c !== o && !c.contains(o) && !o.contains(c) && compare(o, c) > 0) {
                let rt = o
                  , et = !1;
                for (; rt && !rt.contains(c); ) {
                    if (intersects(rt.getBoundingClientRect(), h)) {
                        et = !0;
                        break
                    }
                    rt = rt.parentElement
                }
                if (et)
                    return
            }
            intersectingHandles.push(a)
        }
    }
    )
}
function reportConstraintsViolation(s, e) {
    panelConstraintFlags.set(s, e)
}
function updateCursor() {
    let s = !1
      , e = !1;
    intersectingHandles.forEach(o => {
        const {direction: a} = o;
        a === "horizontal" ? s = !0 : e = !0
    }
    );
    let i = 0;
    panelConstraintFlags.forEach(o => {
        i |= o
    }
    ),
    s && e ? setGlobalCursorStyle("intersection", i) : s ? setGlobalCursorStyle("horizontal", i) : e ? setGlobalCursorStyle("vertical", i) : resetGlobalCursorStyle()
}
let listenersAbortController = new AbortController;
function updateListeners() {
    listenersAbortController.abort(),
    listenersAbortController = new AbortController;
    const s = {
        capture: !0,
        signal: listenersAbortController.signal
    };
    registeredResizeHandlers.size && (isPointerDown ? (intersectingHandles.length > 0 && ownerDocumentCounts.forEach( (e, i) => {
        const {body: o} = i;
        e > 0 && (o.addEventListener("contextmenu", handlePointerUp, s),
        o.addEventListener("pointerleave", handlePointerMove, s),
        o.addEventListener("pointermove", handlePointerMove, s))
    }
    ),
    window.addEventListener("pointerup", handlePointerUp, s),
    window.addEventListener("pointercancel", handlePointerUp, s)) : ownerDocumentCounts.forEach( (e, i) => {
        const {body: o} = i;
        e > 0 && (o.addEventListener("pointerdown", handlePointerDown, s),
        o.addEventListener("pointermove", handlePointerMove, s))
    }
    ))
}
function updateResizeHandlerStates(s, e) {
    registeredResizeHandlers.forEach(i => {
        const {setResizeHandlerState: o} = i
          , a = intersectingHandles.includes(i);
        o(s, a, e)
    }
    )
}
function useForceUpdate() {
    const [s,e] = reactExports.useState(0);
    return reactExports.useCallback( () => e(i => i + 1), [])
}
function assert(s, e) {
    if (!s)
        throw console.error(e),
        Error(e)
}
function fuzzyCompareNumbers(s, e, i=PRECISION) {
    return s.toFixed(i) === e.toFixed(i) ? 0 : s > e ? 1 : -1
}
function fuzzyNumbersEqual$1(s, e, i=PRECISION) {
    return fuzzyCompareNumbers(s, e, i) === 0
}
function fuzzyNumbersEqual(s, e, i) {
    return fuzzyCompareNumbers(s, e, i) === 0
}
function fuzzyLayoutsEqual(s, e, i) {
    if (s.length !== e.length)
        return !1;
    for (let o = 0; o < s.length; o++) {
        const a = s[o]
          , c = e[o];
        if (!fuzzyNumbersEqual(a, c, i))
            return !1
    }
    return !0
}
function resizePanel({panelConstraints: s, panelIndex: e, size: i}) {
    const o = s[e];
    assert(o != null, `Panel constraints not found for index ${e}`);
    let {collapsedSize: a=0, collapsible: c, maxSize: d=100, minSize: h=0} = o;
    if (fuzzyCompareNumbers(i, h) < 0)
        if (c) {
            const g = (a + h) / 2;
            fuzzyCompareNumbers(i, g) < 0 ? i = a : i = h
        } else
            i = h;
    return i = Math.min(d, i),
    i = parseFloat(i.toFixed(PRECISION)),
    i
}
function adjustLayoutByDelta({delta: s, initialLayout: e, panelConstraints: i, pivotIndices: o, prevLayout: a, trigger: c}) {
    if (fuzzyNumbersEqual(s, 0))
        return e;
    const d = [...e]
      , [h,g] = o;
    assert(h != null, "Invalid first pivot index"),
    assert(g != null, "Invalid second pivot index");
    let b = 0;
    if (c === "keyboard") {
        {
            const $ = s < 0 ? g : h
              , _e = i[$];
            assert(_e, `Panel constraints not found for index ${$}`);
            const {collapsedSize: tt=0, collapsible: rt, minSize: et=0} = _e;
            if (rt) {
                const it = e[$];
                if (assert(it != null, `Previous layout not found for panel index ${$}`),
                fuzzyNumbersEqual(it, tt)) {
                    const st = et - it;
                    fuzzyCompareNumbers(st, Math.abs(s)) > 0 && (s = s < 0 ? 0 - st : st)
                }
            }
        }
        {
            const $ = s < 0 ? h : g
              , _e = i[$];
            assert(_e, `No panel constraints found for index ${$}`);
            const {collapsedSize: tt=0, collapsible: rt, minSize: et=0} = _e;
            if (rt) {
                const it = e[$];
                if (assert(it != null, `Previous layout not found for panel index ${$}`),
                fuzzyNumbersEqual(it, et)) {
                    const st = it - tt;
                    fuzzyCompareNumbers(st, Math.abs(s)) > 0 && (s = s < 0 ? 0 - st : st)
                }
            }
        }
    }
    {
        const $ = s < 0 ? 1 : -1;
        let _e = s < 0 ? g : h
          , tt = 0;
        for (; ; ) {
            const et = e[_e];
            assert(et != null, `Previous layout not found for panel index ${_e}`);
            const st = resizePanel({
                panelConstraints: i,
                panelIndex: _e,
                size: 100
            }) - et;
            if (tt += st,
            _e += $,
            _e < 0 || _e >= i.length)
                break
        }
        const rt = Math.min(Math.abs(s), Math.abs(tt));
        s = s < 0 ? 0 - rt : rt
    }
    {
        let _e = s < 0 ? h : g;
        for (; _e >= 0 && _e < i.length; ) {
            const tt = Math.abs(s) - Math.abs(b)
              , rt = e[_e];
            assert(rt != null, `Previous layout not found for panel index ${_e}`);
            const et = rt - tt
              , it = resizePanel({
                panelConstraints: i,
                panelIndex: _e,
                size: et
            });
            if (!fuzzyNumbersEqual(rt, it) && (b += rt - it,
            d[_e] = it,
            b.toPrecision(3).localeCompare(Math.abs(s).toPrecision(3), void 0, {
                numeric: !0
            }) >= 0))
                break;
            s < 0 ? _e-- : _e++
        }
    }
    if (fuzzyLayoutsEqual(a, d))
        return a;
    {
        const $ = s < 0 ? g : h
          , _e = e[$];
        assert(_e != null, `Previous layout not found for panel index ${$}`);
        const tt = _e + b
          , rt = resizePanel({
            panelConstraints: i,
            panelIndex: $,
            size: tt
        });
        if (d[$] = rt,
        !fuzzyNumbersEqual(rt, tt)) {
            let et = tt - rt
              , st = s < 0 ? g : h;
            for (; st >= 0 && st < i.length; ) {
                const nt = d[st];
                assert(nt != null, `Previous layout not found for panel index ${st}`);
                const lt = nt + et
                  , dt = resizePanel({
                    panelConstraints: i,
                    panelIndex: st,
                    size: lt
                });
                if (fuzzyNumbersEqual(nt, dt) || (et -= dt - nt,
                d[st] = dt),
                fuzzyNumbersEqual(et, 0))
                    break;
                s > 0 ? st-- : st++
            }
        }
    }
    const _ = d.reduce( ($, _e) => _e + $, 0);
    return fuzzyNumbersEqual(_, 100) ? d : a
}
function calculateAriaValues({layout: s, panelsArray: e, pivotIndices: i}) {
    let o = 0
      , a = 100
      , c = 0
      , d = 0;
    const h = i[0];
    assert(h != null, "No pivot index found"),
    e.forEach( ($, _e) => {
        const {constraints: tt} = $
          , {maxSize: rt=100, minSize: et=0} = tt;
        _e === h ? (o = et,
        a = rt) : (c += et,
        d += rt)
    }
    );
    const g = Math.min(a, 100 - c)
      , b = Math.max(o, 100 - d)
      , _ = s[h];
    return {
        valueMax: g,
        valueMin: b,
        valueNow: _
    }
}
function getResizeHandleElementsForGroup(s, e=document) {
    return Array.from(e.querySelectorAll(`[${DATA_ATTRIBUTES.resizeHandleId}][data-panel-group-id="${s}"]`))
}
function getResizeHandleElementIndex(s, e, i=document) {
    const a = getResizeHandleElementsForGroup(s, i).findIndex(c => c.getAttribute(DATA_ATTRIBUTES.resizeHandleId) === e);
    return a ?? null
}
function determinePivotIndices(s, e, i) {
    const o = getResizeHandleElementIndex(s, e, i);
    return o != null ? [o, o + 1] : [-1, -1]
}
function getPanelGroupElement(s, e=document) {
    var i;
    if (e instanceof HTMLElement && (e == null || (i = e.dataset) === null || i === void 0 ? void 0 : i.panelGroupId) == s)
        return e;
    const o = e.querySelector(`[data-panel-group][data-panel-group-id="${s}"]`);
    return o || null
}
function getResizeHandleElement(s, e=document) {
    const i = e.querySelector(`[${DATA_ATTRIBUTES.resizeHandleId}="${s}"]`);
    return i || null
}
function getResizeHandlePanelIds(s, e, i, o=document) {
    var a, c, d, h;
    const g = getResizeHandleElement(e, o)
      , b = getResizeHandleElementsForGroup(s, o)
      , _ = g ? b.indexOf(g) : -1
      , $ = (a = (c = i[_]) === null || c === void 0 ? void 0 : c.id) !== null && a !== void 0 ? a : null
      , _e = (d = (h = i[_ + 1]) === null || h === void 0 ? void 0 : h.id) !== null && d !== void 0 ? d : null;
    return [$, _e]
}
function useWindowSplitterPanelGroupBehavior({committedValuesRef: s, eagerValuesRef: e, groupId: i, layout: o, panelDataArray: a, panelGroupElement: c, setLayout: d}) {
    reactExports.useRef({
        didWarnAboutMissingResizeHandle: !1
    }),
    useIsomorphicLayoutEffect( () => {
        if (!c)
            return;
        const h = getResizeHandleElementsForGroup(i, c);
        for (let g = 0; g < a.length - 1; g++) {
            const {valueMax: b, valueMin: _, valueNow: $} = calculateAriaValues({
                layout: o,
                panelsArray: a,
                pivotIndices: [g, g + 1]
            })
              , _e = h[g];
            if (_e != null) {
                const tt = a[g];
                assert(tt, `No panel data found for index "${g}"`),
                _e.setAttribute("aria-controls", tt.id),
                _e.setAttribute("aria-valuemax", "" + Math.round(b)),
                _e.setAttribute("aria-valuemin", "" + Math.round(_)),
                _e.setAttribute("aria-valuenow", $ != null ? "" + Math.round($) : "")
            }
        }
        return () => {
            h.forEach( (g, b) => {
                g.removeAttribute("aria-controls"),
                g.removeAttribute("aria-valuemax"),
                g.removeAttribute("aria-valuemin"),
                g.removeAttribute("aria-valuenow")
            }
            )
        }
    }
    , [i, o, a, c]),
    reactExports.useEffect( () => {
        if (!c)
            return;
        const h = e.current;
        assert(h, "Eager values not found");
        const {panelDataArray: g} = h
          , b = getPanelGroupElement(i, c);
        assert(b != null, `No group found for id "${i}"`);
        const _ = getResizeHandleElementsForGroup(i, c);
        assert(_, `No resize handles found for group id "${i}"`);
        const $ = _.map(_e => {
            const tt = _e.getAttribute(DATA_ATTRIBUTES.resizeHandleId);
            assert(tt, "Resize handle element has no handle id attribute");
            const [rt,et] = getResizeHandlePanelIds(i, tt, g, c);
            if (rt == null || et == null)
                return () => {}
                ;
            const it = st => {
                if (!st.defaultPrevented)
                    switch (st.key) {
                    case "Enter":
                        {
                            st.preventDefault();
                            const nt = g.findIndex(lt => lt.id === rt);
                            if (nt >= 0) {
                                const lt = g[nt];
                                assert(lt, `No panel data found for index ${nt}`);
                                const dt = o[nt]
                                  , {collapsedSize: ot=0, collapsible: at, minSize: ht=0} = lt.constraints;
                                if (dt != null && at) {
                                    const pt = adjustLayoutByDelta({
                                        delta: fuzzyNumbersEqual(dt, ot) ? ht - ot : ot - dt,
                                        initialLayout: o,
                                        panelConstraints: g.map(gt => gt.constraints),
                                        pivotIndices: determinePivotIndices(i, tt, c),
                                        prevLayout: o,
                                        trigger: "keyboard"
                                    });
                                    o !== pt && d(pt)
                                }
                            }
                            break
                        }
                    }
            }
            ;
            return _e.addEventListener("keydown", it),
            () => {
                _e.removeEventListener("keydown", it)
            }
        }
        );
        return () => {
            $.forEach(_e => _e())
        }
    }
    , [c, s, e, i, o, a, d])
}
function areEqual(s, e) {
    if (s.length !== e.length)
        return !1;
    for (let i = 0; i < s.length; i++)
        if (s[i] !== e[i])
            return !1;
    return !0
}
function getResizeEventCursorPosition(s, e) {
    const i = s === "horizontal"
      , {x: o, y: a} = getResizeEventCoordinates(e);
    return i ? o : a
}
function calculateDragOffsetPercentage(s, e, i, o, a) {
    const c = i === "horizontal"
      , d = getResizeHandleElement(e, a);
    assert(d, `No resize handle element found for id "${e}"`);
    const h = d.getAttribute(DATA_ATTRIBUTES.groupId);
    assert(h, "Resize handle element has no group id attribute");
    let {initialCursorPosition: g} = o;
    const b = getResizeEventCursorPosition(i, s)
      , _ = getPanelGroupElement(h, a);
    assert(_, `No group element found for id "${h}"`);
    const $ = _.getBoundingClientRect()
      , _e = c ? $.width : $.height;
    return (b - g) / _e * 100
}
function calculateDeltaPercentage(s, e, i, o, a, c) {
    if (isKeyDown(s)) {
        const d = i === "horizontal";
        let h = 0;
        s.shiftKey ? h = 100 : a != null ? h = a : h = 10;
        let g = 0;
        switch (s.key) {
        case "ArrowDown":
            g = d ? 0 : h;
            break;
        case "ArrowLeft":
            g = d ? -h : 0;
            break;
        case "ArrowRight":
            g = d ? h : 0;
            break;
        case "ArrowUp":
            g = d ? 0 : -h;
            break;
        case "End":
            g = 100;
            break;
        case "Home":
            g = -100;
            break
        }
        return g
    } else
        return o == null ? 0 : calculateDragOffsetPercentage(s, e, i, o, c)
}
function calculateUnsafeDefaultLayout({panelDataArray: s}) {
    const e = Array(s.length)
      , i = s.map(c => c.constraints);
    let o = 0
      , a = 100;
    for (let c = 0; c < s.length; c++) {
        const d = i[c];
        assert(d, `Panel constraints not found for index ${c}`);
        const {defaultSize: h} = d;
        h != null && (o++,
        e[c] = h,
        a -= h)
    }
    for (let c = 0; c < s.length; c++) {
        const d = i[c];
        assert(d, `Panel constraints not found for index ${c}`);
        const {defaultSize: h} = d;
        if (h != null)
            continue;
        const g = s.length - o
          , b = a / g;
        o++,
        e[c] = b,
        a -= b
    }
    return e
}
function callPanelCallbacks(s, e, i) {
    e.forEach( (o, a) => {
        const c = s[a];
        assert(c, `Panel data not found for index ${a}`);
        const {callbacks: d, constraints: h, id: g} = c
          , {collapsedSize: b=0, collapsible: _} = h
          , $ = i[g];
        if ($ == null || o !== $) {
            i[g] = o;
            const {onCollapse: _e, onExpand: tt, onResize: rt} = d;
            rt && rt(o, $),
            _ && (_e || tt) && (tt && ($ == null || fuzzyNumbersEqual$1($, b)) && !fuzzyNumbersEqual$1(o, b) && tt(),
            _e && ($ == null || !fuzzyNumbersEqual$1($, b)) && fuzzyNumbersEqual$1(o, b) && _e())
        }
    }
    )
}
function compareLayouts(s, e) {
    if (s.length !== e.length)
        return !1;
    for (let i = 0; i < s.length; i++)
        if (s[i] != e[i])
            return !1;
    return !0
}
function computePanelFlexBoxStyle({defaultSize: s, dragState: e, layout: i, panelData: o, panelIndex: a, precision: c=3}) {
    const d = i[a];
    let h;
    return d == null ? h = s != null ? s.toPrecision(c) : "1" : o.length === 1 ? h = "1" : h = d.toPrecision(c),
    {
        flexBasis: 0,
        flexGrow: h,
        flexShrink: 1,
        overflow: "hidden",
        pointerEvents: e !== null ? "none" : void 0
    }
}
function debounce(s, e=10) {
    let i = null;
    return (...a) => {
        i !== null && clearTimeout(i),
        i = setTimeout( () => {
            s(...a)
        }
        , e)
    }
}
function initializeDefaultStorage(s) {
    try {
        if (typeof localStorage < "u")
            s.getItem = e => localStorage.getItem(e),
            s.setItem = (e, i) => {
                localStorage.setItem(e, i)
            }
            ;
        else
            throw new Error("localStorage not supported in this environment")
    } catch (e) {
        console.error(e),
        s.getItem = () => null,
        s.setItem = () => {}
    }
}
function getPanelGroupKey(s) {
    return `react-resizable-panels:${s}`
}
function getPanelKey(s) {
    return s.map(e => {
        const {constraints: i, id: o, idIsFromProps: a, order: c} = e;
        return a ? o : c ? `${c}:${JSON.stringify(i)}` : JSON.stringify(i)
    }
    ).sort( (e, i) => e.localeCompare(i)).join(",")
}
function loadSerializedPanelGroupState(s, e) {
    try {
        const i = getPanelGroupKey(s)
          , o = e.getItem(i);
        if (o) {
            const a = JSON.parse(o);
            if (typeof a == "object" && a != null)
                return a
        }
    } catch {}
    return null
}
function loadPanelGroupState(s, e, i) {
    var o, a;
    const c = (o = loadSerializedPanelGroupState(s, i)) !== null && o !== void 0 ? o : {}
      , d = getPanelKey(e);
    return (a = c[d]) !== null && a !== void 0 ? a : null
}
function savePanelGroupState(s, e, i, o, a) {
    var c;
    const d = getPanelGroupKey(s)
      , h = getPanelKey(e)
      , g = (c = loadSerializedPanelGroupState(s, a)) !== null && c !== void 0 ? c : {};
    g[h] = {
        expandToSizes: Object.fromEntries(i.entries()),
        layout: o
    };
    try {
        a.setItem(d, JSON.stringify(g))
    } catch (b) {
        console.error(b)
    }
}
function validatePanelGroupLayout({layout: s, panelConstraints: e}) {
    const i = [...s]
      , o = i.reduce( (c, d) => c + d, 0);
    if (i.length !== e.length)
        throw Error(`Invalid ${e.length} panel layout: ${i.map(c => `${c}%`).join(", ")}`);
    if (!fuzzyNumbersEqual(o, 100) && i.length > 0)
        for (let c = 0; c < e.length; c++) {
            const d = i[c];
            assert(d != null, `No layout data found for index ${c}`);
            const h = 100 / o * d;
            i[c] = h
        }
    let a = 0;
    for (let c = 0; c < e.length; c++) {
        const d = i[c];
        assert(d != null, `No layout data found for index ${c}`);
        const h = resizePanel({
            panelConstraints: e,
            panelIndex: c,
            size: d
        });
        d != h && (a += d - h,
        i[c] = h)
    }
    if (!fuzzyNumbersEqual(a, 0))
        for (let c = 0; c < e.length; c++) {
            const d = i[c];
            assert(d != null, `No layout data found for index ${c}`);
            const h = d + a
              , g = resizePanel({
                panelConstraints: e,
                panelIndex: c,
                size: h
            });
            if (d !== g && (a -= g - d,
            i[c] = g,
            fuzzyNumbersEqual(a, 0)))
                break
        }
    return i
}
const LOCAL_STORAGE_DEBOUNCE_INTERVAL = 100
  , defaultStorage = {
    getItem: s => (initializeDefaultStorage(defaultStorage),
    defaultStorage.getItem(s)),
    setItem: (s, e) => {
        initializeDefaultStorage(defaultStorage),
        defaultStorage.setItem(s, e)
    }
}
  , debounceMap = {};
function PanelGroupWithForwardedRef({autoSaveId: s=null, children: e, className: i="", direction: o, forwardedRef: a, id: c=null, onLayout: d=null, keyboardResizeBy: h=null, storage: g=defaultStorage, style: b, tagName: _="div", ...$}) {
    const _e = useUniqueId(c)
      , tt = reactExports.useRef(null)
      , [rt,et] = reactExports.useState(null)
      , [it,st] = reactExports.useState([])
      , nt = useForceUpdate()
      , lt = reactExports.useRef({})
      , dt = reactExports.useRef(new Map)
      , ot = reactExports.useRef(0)
      , at = reactExports.useRef({
        autoSaveId: s,
        direction: o,
        dragState: rt,
        id: _e,
        keyboardResizeBy: h,
        onLayout: d,
        storage: g
    })
      , ht = reactExports.useRef({
        layout: it,
        panelDataArray: [],
        panelDataArrayChanged: !1
    });
    reactExports.useRef({
        didLogIdAndOrderWarning: !1,
        didLogPanelConstraintsWarning: !1,
        prevPanelIds: []
    }),
    reactExports.useImperativeHandle(a, () => ({
        getId: () => at.current.id,
        getLayout: () => {
            const {layout: jt} = ht.current;
            return jt
        }
        ,
        setLayout: jt => {
            const {onLayout: xt} = at.current
              , {layout: Et, panelDataArray: Pt} = ht.current
              , St = validatePanelGroupLayout({
                layout: jt,
                panelConstraints: Pt.map(Bt => Bt.constraints)
            });
            areEqual(Et, St) || (st(St),
            ht.current.layout = St,
            xt && xt(St),
            callPanelCallbacks(Pt, St, lt.current))
        }
    }), []),
    useIsomorphicLayoutEffect( () => {
        at.current.autoSaveId = s,
        at.current.direction = o,
        at.current.dragState = rt,
        at.current.id = _e,
        at.current.onLayout = d,
        at.current.storage = g
    }
    ),
    useWindowSplitterPanelGroupBehavior({
        committedValuesRef: at,
        eagerValuesRef: ht,
        groupId: _e,
        layout: it,
        panelDataArray: ht.current.panelDataArray,
        setLayout: st,
        panelGroupElement: tt.current
    }),
    reactExports.useEffect( () => {
        const {panelDataArray: jt} = ht.current;
        if (s) {
            if (it.length === 0 || it.length !== jt.length)
                return;
            let xt = debounceMap[s];
            xt == null && (xt = debounce(savePanelGroupState, LOCAL_STORAGE_DEBOUNCE_INTERVAL),
            debounceMap[s] = xt);
            const Et = [...jt]
              , Pt = new Map(dt.current);
            xt(s, Et, Pt, it, g)
        }
    }
    , [s, it, g]),
    reactExports.useEffect( () => {}
    );
    const pt = reactExports.useCallback(jt => {
        const {onLayout: xt} = at.current
          , {layout: Et, panelDataArray: Pt} = ht.current;
        if (jt.constraints.collapsible) {
            const St = Pt.map(js => js.constraints)
              , {collapsedSize: Bt=0, panelSize: os, pivotIndices: ds} = panelDataHelper(Pt, jt, Et);
            if (assert(os != null, `Panel size not found for panel "${jt.id}"`),
            !fuzzyNumbersEqual$1(os, Bt)) {
                dt.current.set(jt.id, os);
                const ys = findPanelDataIndex(Pt, jt) === Pt.length - 1 ? os - Bt : Bt - os
                  , vs = adjustLayoutByDelta({
                    delta: ys,
                    initialLayout: Et,
                    panelConstraints: St,
                    pivotIndices: ds,
                    prevLayout: Et,
                    trigger: "imperative-api"
                });
                compareLayouts(Et, vs) || (st(vs),
                ht.current.layout = vs,
                xt && xt(vs),
                callPanelCallbacks(Pt, vs, lt.current))
            }
        }
    }
    , [])
      , gt = reactExports.useCallback( (jt, xt) => {
        const {onLayout: Et} = at.current
          , {layout: Pt, panelDataArray: St} = ht.current;
        if (jt.constraints.collapsible) {
            const Bt = St.map(Ss => Ss.constraints)
              , {collapsedSize: os=0, panelSize: ds=0, minSize: js=0, pivotIndices: ys} = panelDataHelper(St, jt, Pt)
              , vs = xt ?? js;
            if (fuzzyNumbersEqual$1(ds, os)) {
                const Ss = dt.current.get(jt.id)
                  , _s = Ss != null && Ss >= vs ? Ss : vs
                  , xs = findPanelDataIndex(St, jt) === St.length - 1 ? ds - _s : _s - ds
                  , Lt = adjustLayoutByDelta({
                    delta: xs,
                    initialLayout: Pt,
                    panelConstraints: Bt,
                    pivotIndices: ys,
                    prevLayout: Pt,
                    trigger: "imperative-api"
                });
                compareLayouts(Pt, Lt) || (st(Lt),
                ht.current.layout = Lt,
                Et && Et(Lt),
                callPanelCallbacks(St, Lt, lt.current))
            }
        }
    }
    , [])
      , wt = reactExports.useCallback(jt => {
        const {layout: xt, panelDataArray: Et} = ht.current
          , {panelSize: Pt} = panelDataHelper(Et, jt, xt);
        return assert(Pt != null, `Panel size not found for panel "${jt.id}"`),
        Pt
    }
    , [])
      , yt = reactExports.useCallback( (jt, xt) => {
        const {panelDataArray: Et} = ht.current
          , Pt = findPanelDataIndex(Et, jt);
        return computePanelFlexBoxStyle({
            defaultSize: xt,
            dragState: rt,
            layout: it,
            panelData: Et,
            panelIndex: Pt
        })
    }
    , [rt, it])
      , Rt = reactExports.useCallback(jt => {
        const {layout: xt, panelDataArray: Et} = ht.current
          , {collapsedSize: Pt=0, collapsible: St, panelSize: Bt} = panelDataHelper(Et, jt, xt);
        return assert(Bt != null, `Panel size not found for panel "${jt.id}"`),
        St === !0 && fuzzyNumbersEqual$1(Bt, Pt)
    }
    , [])
      , Mt = reactExports.useCallback(jt => {
        const {layout: xt, panelDataArray: Et} = ht.current
          , {collapsedSize: Pt=0, collapsible: St, panelSize: Bt} = panelDataHelper(Et, jt, xt);
        return assert(Bt != null, `Panel size not found for panel "${jt.id}"`),
        !St || fuzzyCompareNumbers(Bt, Pt) > 0
    }
    , [])
      , ss = reactExports.useCallback(jt => {
        const {panelDataArray: xt} = ht.current;
        xt.push(jt),
        xt.sort( (Et, Pt) => {
            const St = Et.order
              , Bt = Pt.order;
            return St == null && Bt == null ? 0 : St == null ? -1 : Bt == null ? 1 : St - Bt
        }
        ),
        ht.current.panelDataArrayChanged = !0,
        nt()
    }
    , [nt]);
    useIsomorphicLayoutEffect( () => {
        if (ht.current.panelDataArrayChanged) {
            ht.current.panelDataArrayChanged = !1;
            const {autoSaveId: jt, onLayout: xt, storage: Et} = at.current
              , {layout: Pt, panelDataArray: St} = ht.current;
            let Bt = null;
            if (jt) {
                const ds = loadPanelGroupState(jt, St, Et);
                ds && (dt.current = new Map(Object.entries(ds.expandToSizes)),
                Bt = ds.layout)
            }
            Bt == null && (Bt = calculateUnsafeDefaultLayout({
                panelDataArray: St
            }));
            const os = validatePanelGroupLayout({
                layout: Bt,
                panelConstraints: St.map(ds => ds.constraints)
            });
            areEqual(Pt, os) || (st(os),
            ht.current.layout = os,
            xt && xt(os),
            callPanelCallbacks(St, os, lt.current))
        }
    }
    ),
    useIsomorphicLayoutEffect( () => {
        const jt = ht.current;
        return () => {
            jt.layout = []
        }
    }
    , []);
    const zt = reactExports.useCallback(jt => {
        let xt = !1;
        const Et = tt.current;
        return Et && window.getComputedStyle(Et, null).getPropertyValue("direction") === "rtl" && (xt = !0),
        function(St) {
            St.preventDefault();
            const Bt = tt.current;
            if (!Bt)
                return () => null;
            const {direction: os, dragState: ds, id: js, keyboardResizeBy: ys, onLayout: vs} = at.current
              , {layout: Ss, panelDataArray: _s} = ht.current
              , {initialLayout: ns} = ds ?? {}
              , xs = determinePivotIndices(js, jt, Bt);
            let Lt = calculateDeltaPercentage(St, jt, os, ds, ys, Bt);
            const ts = os === "horizontal";
            ts && xt && (Lt = -Lt);
            const ms = _s.map(ks => ks.constraints)
              , hs = adjustLayoutByDelta({
                delta: Lt,
                initialLayout: ns ?? Ss,
                panelConstraints: ms,
                pivotIndices: xs,
                prevLayout: Ss,
                trigger: isKeyDown(St) ? "keyboard" : "mouse-or-touch"
            })
              , bs = !compareLayouts(Ss, hs);
            (isPointerEvent(St) || isMouseEvent(St)) && ot.current != Lt && (ot.current = Lt,
            !bs && Lt !== 0 ? ts ? reportConstraintsViolation(jt, Lt < 0 ? EXCEEDED_HORIZONTAL_MIN : EXCEEDED_HORIZONTAL_MAX) : reportConstraintsViolation(jt, Lt < 0 ? EXCEEDED_VERTICAL_MIN : EXCEEDED_VERTICAL_MAX) : reportConstraintsViolation(jt, 0)),
            bs && (st(hs),
            ht.current.layout = hs,
            vs && vs(hs),
            callPanelCallbacks(_s, hs, lt.current))
        }
    }
    , [])
      , At = reactExports.useCallback( (jt, xt) => {
        const {onLayout: Et} = at.current
          , {layout: Pt, panelDataArray: St} = ht.current
          , Bt = St.map(Ss => Ss.constraints)
          , {panelSize: os, pivotIndices: ds} = panelDataHelper(St, jt, Pt);
        assert(os != null, `Panel size not found for panel "${jt.id}"`);
        const ys = findPanelDataIndex(St, jt) === St.length - 1 ? os - xt : xt - os
          , vs = adjustLayoutByDelta({
            delta: ys,
            initialLayout: Pt,
            panelConstraints: Bt,
            pivotIndices: ds,
            prevLayout: Pt,
            trigger: "imperative-api"
        });
        compareLayouts(Pt, vs) || (st(vs),
        ht.current.layout = vs,
        Et && Et(vs),
        callPanelCallbacks(St, vs, lt.current))
    }
    , [])
      , kt = reactExports.useCallback( (jt, xt) => {
        const {layout: Et, panelDataArray: Pt} = ht.current
          , {collapsedSize: St=0, collapsible: Bt} = xt
          , {collapsedSize: os=0, collapsible: ds, maxSize: js=100, minSize: ys=0} = jt.constraints
          , {panelSize: vs} = panelDataHelper(Pt, jt, Et);
        vs != null && (Bt && ds && fuzzyNumbersEqual$1(vs, St) ? fuzzyNumbersEqual$1(St, os) || At(jt, os) : vs < ys ? At(jt, ys) : vs > js && At(jt, js))
    }
    , [At])
      , vt = reactExports.useCallback( (jt, xt) => {
        const {direction: Et} = at.current
          , {layout: Pt} = ht.current;
        if (!tt.current)
            return;
        const St = getResizeHandleElement(jt, tt.current);
        assert(St, `Drag handle element not found for id "${jt}"`);
        const Bt = getResizeEventCursorPosition(Et, xt);
        et({
            dragHandleId: jt,
            dragHandleRect: St.getBoundingClientRect(),
            initialCursorPosition: Bt,
            initialLayout: Pt
        })
    }
    , [])
      , bt = reactExports.useCallback( () => {
        et(null)
    }
    , [])
      , Tt = reactExports.useCallback(jt => {
        const {panelDataArray: xt} = ht.current
          , Et = findPanelDataIndex(xt, jt);
        Et >= 0 && (xt.splice(Et, 1),
        delete lt.current[jt.id],
        ht.current.panelDataArrayChanged = !0,
        nt())
    }
    , [nt])
      , Yt = reactExports.useMemo( () => ({
        collapsePanel: pt,
        direction: o,
        dragState: rt,
        expandPanel: gt,
        getPanelSize: wt,
        getPanelStyle: yt,
        groupId: _e,
        isPanelCollapsed: Rt,
        isPanelExpanded: Mt,
        reevaluatePanelConstraints: kt,
        registerPanel: ss,
        registerResizeHandle: zt,
        resizePanel: At,
        startDragging: vt,
        stopDragging: bt,
        unregisterPanel: Tt,
        panelGroupElement: tt.current
    }), [pt, rt, o, gt, wt, yt, _e, Rt, Mt, kt, ss, zt, At, vt, bt, Tt])
      , Nt = {
        display: "flex",
        flexDirection: o === "horizontal" ? "row" : "column",
        height: "100%",
        overflow: "hidden",
        width: "100%"
    };
    return reactExports.createElement(PanelGroupContext.Provider, {
        value: Yt
    }, reactExports.createElement(_, {
        ...$,
        children: e,
        className: i,
        id: c,
        ref: tt,
        style: {
            ...Nt,
            ...b
        },
        [DATA_ATTRIBUTES.group]: "",
        [DATA_ATTRIBUTES.groupDirection]: o,
        [DATA_ATTRIBUTES.groupId]: _e
    }))
}
const PanelGroup = reactExports.forwardRef( (s, e) => reactExports.createElement(PanelGroupWithForwardedRef, {
    ...s,
    forwardedRef: e
}));
PanelGroupWithForwardedRef.displayName = "PanelGroup";
PanelGroup.displayName = "forwardRef(PanelGroup)";
function findPanelDataIndex(s, e) {
    return s.findIndex(i => i === e || i.id === e.id)
}
function panelDataHelper(s, e, i) {
    const o = findPanelDataIndex(s, e)
      , c = o === s.length - 1 ? [o - 1, o] : [o, o + 1]
      , d = i[o];
    return {
        ...e.constraints,
        panelSize: d,
        pivotIndices: c
    }
}
function useWindowSplitterResizeHandlerBehavior({disabled: s, handleId: e, resizeHandler: i, panelGroupElement: o}) {
    reactExports.useEffect( () => {
        if (s || i == null || o == null)
            return;
        const a = getResizeHandleElement(e, o);
        if (a == null)
            return;
        const c = d => {
            if (!d.defaultPrevented)
                switch (d.key) {
                case "ArrowDown":
                case "ArrowLeft":
                case "ArrowRight":
                case "ArrowUp":
                case "End":
                case "Home":
                    {
                        d.preventDefault(),
                        i(d);
                        break
                    }
                case "F6":
                    {
                        d.preventDefault();
                        const h = a.getAttribute(DATA_ATTRIBUTES.groupId);
                        assert(h, `No group element found for id "${h}"`);
                        const g = getResizeHandleElementsForGroup(h, o)
                          , b = getResizeHandleElementIndex(h, e, o);
                        assert(b !== null, `No resize element found for id "${e}"`);
                        const _ = d.shiftKey ? b > 0 ? b - 1 : g.length - 1 : b + 1 < g.length ? b + 1 : 0;
                        g[_].focus();
                        break
                    }
                }
        }
        ;
        return a.addEventListener("keydown", c),
        () => {
            a.removeEventListener("keydown", c)
        }
    }
    , [o, s, e, i])
}
function PanelResizeHandle({children: s=null, className: e="", disabled: i=!1, hitAreaMargins: o, id: a, onBlur: c, onClick: d, onDragging: h, onFocus: g, onPointerDown: b, onPointerUp: _, style: $={}, tabIndex: _e=0, tagName: tt="div", ...rt}) {
    var et, it;
    const st = reactExports.useRef(null)
      , nt = reactExports.useRef({
        onClick: d,
        onDragging: h,
        onPointerDown: b,
        onPointerUp: _
    });
    reactExports.useEffect( () => {
        nt.current.onClick = d,
        nt.current.onDragging = h,
        nt.current.onPointerDown = b,
        nt.current.onPointerUp = _
    }
    );
    const lt = reactExports.useContext(PanelGroupContext);
    if (lt === null)
        throw Error("PanelResizeHandle components must be rendered within a PanelGroup container");
    const {direction: dt, groupId: ot, registerResizeHandle: at, startDragging: ht, stopDragging: pt, panelGroupElement: gt} = lt
      , wt = useUniqueId(a)
      , [yt,Rt] = reactExports.useState("inactive")
      , [Mt,ss] = reactExports.useState(!1)
      , [zt,At] = reactExports.useState(null)
      , kt = reactExports.useRef({
        state: yt
    });
    useIsomorphicLayoutEffect( () => {
        kt.current.state = yt
    }
    ),
    reactExports.useEffect( () => {
        if (i)
            At(null);
        else {
            const Yt = at(wt);
            At( () => Yt)
        }
    }
    , [i, wt, at]);
    const vt = (et = o == null ? void 0 : o.coarse) !== null && et !== void 0 ? et : 15
      , bt = (it = o == null ? void 0 : o.fine) !== null && it !== void 0 ? it : 5;
    reactExports.useEffect( () => {
        if (i || zt == null)
            return;
        const Yt = st.current;
        assert(Yt, "Element ref not attached");
        let Nt = !1;
        return registerResizeHandle(wt, Yt, dt, {
            coarse: vt,
            fine: bt
        }, (xt, Et, Pt) => {
            if (!Et) {
                Rt("inactive");
                return
            }
            switch (xt) {
            case "down":
                {
                    Rt("drag"),
                    Nt = !1,
                    assert(Pt, 'Expected event to be defined for "down" action'),
                    ht(wt, Pt);
                    const {onDragging: St, onPointerDown: Bt} = nt.current;
                    St == null || St(!0),
                    Bt == null || Bt();
                    break
                }
            case "move":
                {
                    const {state: St} = kt.current;
                    Nt = !0,
                    St !== "drag" && Rt("hover"),
                    assert(Pt, 'Expected event to be defined for "move" action'),
                    zt(Pt);
                    break
                }
            case "up":
                {
                    Rt("hover"),
                    pt();
                    const {onClick: St, onDragging: Bt, onPointerUp: os} = nt.current;
                    Bt == null || Bt(!1),
                    os == null || os(),
                    Nt || St == null || St();
                    break
                }
            }
        }
        )
    }
    , [vt, dt, i, bt, at, wt, zt, ht, pt]),
    useWindowSplitterResizeHandlerBehavior({
        disabled: i,
        handleId: wt,
        resizeHandler: zt,
        panelGroupElement: gt
    });
    const Tt = {
        touchAction: "none",
        userSelect: "none"
    };
    return reactExports.createElement(tt, {
        ...rt,
        children: s,
        className: e,
        id: a,
        onBlur: () => {
            ss(!1),
            c == null || c()
        }
        ,
        onFocus: () => {
            ss(!0),
            g == null || g()
        }
        ,
        ref: st,
        role: "separator",
        style: {
            ...Tt,
            ...$
        },
        tabIndex: _e,
        [DATA_ATTRIBUTES.groupDirection]: dt,
        [DATA_ATTRIBUTES.groupId]: ot,
        [DATA_ATTRIBUTES.resizeHandle]: "",
        [DATA_ATTRIBUTES.resizeHandleActive]: yt === "drag" ? "pointer" : Mt ? "keyboard" : void 0,
        [DATA_ATTRIBUTES.resizeHandleEnabled]: !i,
        [DATA_ATTRIBUTES.resizeHandleId]: wt,
        [DATA_ATTRIBUTES.resizeHandleState]: yt
    })
}
PanelResizeHandle.displayName = "PanelResizeHandle";
const ResizablePanelGroup = ({className: s, ...e}) => jsxRuntimeExports.jsx(PanelGroup, {
    className: cn("flex h-full w-full data-[panel-group-direction=vertical]:flex-col", s),
    ...e
})
  , ResizablePanel = Panel
  , ResizableHandle = ({withHandle: s, className: e, ...i}) => jsxRuntimeExports.jsx(PanelResizeHandle, {
    className: cn("relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90", e),
    ...i,
    children: s && jsxRuntimeExports.jsx("div", {
        className: "z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border",
        children: jsxRuntimeExports.jsx(GripVertical, {
            className: "h-2.5 w-2.5"
        })
    })
});
var DIALOG_NAME = "Dialog"
  , [createDialogContext,createDialogScope] = createContextScope$3(DIALOG_NAME)
  , [DialogProvider,useDialogContext] = createDialogContext(DIALOG_NAME)
  , Dialog$1 = s => {
    const {__scopeDialog: e, children: i, open: o, defaultOpen: a, onOpenChange: c, modal: d=!0} = s
      , h = reactExports.useRef(null)
      , g = reactExports.useRef(null)
      , [b=!1,_] = useControllableState({
        prop: o,
        defaultProp: a,
        onChange: c
    });
    return jsxRuntimeExports.jsx(DialogProvider, {
        scope: e,
        triggerRef: h,
        contentRef: g,
        contentId: useId$1(),
        titleId: useId$1(),
        descriptionId: useId$1(),
        open: b,
        onOpenChange: _,
        onOpenToggle: reactExports.useCallback( () => _($ => !$), [_]),
        modal: d,
        children: i
    })
}
;
Dialog$1.displayName = DIALOG_NAME;
var TRIGGER_NAME$2 = "DialogTrigger"
  , DialogTrigger$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeDialog: i, ...o} = s
      , a = useDialogContext(TRIGGER_NAME$2, i)
      , c = useComposedRefs(e, a.triggerRef);
    return jsxRuntimeExports.jsx(Primitive$1.button, {
        type: "button",
        "aria-haspopup": "dialog",
        "aria-expanded": a.open,
        "aria-controls": a.contentId,
        "data-state": getState$1(a.open),
        ...o,
        ref: c,
        onClick: composeEventHandlers(s.onClick, a.onOpenToggle)
    })
}
);
DialogTrigger$1.displayName = TRIGGER_NAME$2;
var PORTAL_NAME$1 = "DialogPortal"
  , [PortalProvider,usePortalContext] = createDialogContext(PORTAL_NAME$1, {
    forceMount: void 0
})
  , DialogPortal$1 = s => {
    const {__scopeDialog: e, forceMount: i, children: o, container: a} = s
      , c = useDialogContext(PORTAL_NAME$1, e);
    return jsxRuntimeExports.jsx(PortalProvider, {
        scope: e,
        forceMount: i,
        children: reactExports.Children.map(o, d => jsxRuntimeExports.jsx(Presence, {
            present: i || c.open,
            children: jsxRuntimeExports.jsx(Portal$3, {
                asChild: !0,
                container: a,
                children: d
            })
        }))
    })
}
;
DialogPortal$1.displayName = PORTAL_NAME$1;
var OVERLAY_NAME = "DialogOverlay"
  , DialogOverlay$1 = reactExports.forwardRef( (s, e) => {
    const i = usePortalContext(OVERLAY_NAME, s.__scopeDialog)
      , {forceMount: o=i.forceMount, ...a} = s
      , c = useDialogContext(OVERLAY_NAME, s.__scopeDialog);
    return c.modal ? jsxRuntimeExports.jsx(Presence, {
        present: o || c.open,
        children: jsxRuntimeExports.jsx(DialogOverlayImpl, {
            ...a,
            ref: e
        })
    }) : null
}
);
DialogOverlay$1.displayName = OVERLAY_NAME;
var DialogOverlayImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeDialog: i, ...o} = s
      , a = useDialogContext(OVERLAY_NAME, i);
    return jsxRuntimeExports.jsx(ReactRemoveScroll, {
        as: Slot,
        allowPinchZoom: !0,
        shards: [a.contentRef],
        children: jsxRuntimeExports.jsx(Primitive$1.div, {
            "data-state": getState$1(a.open),
            ...o,
            ref: e,
            style: {
                pointerEvents: "auto",
                ...o.style
            }
        })
    })
}
)
  , CONTENT_NAME$2 = "DialogContent"
  , DialogContent$1 = reactExports.forwardRef( (s, e) => {
    const i = usePortalContext(CONTENT_NAME$2, s.__scopeDialog)
      , {forceMount: o=i.forceMount, ...a} = s
      , c = useDialogContext(CONTENT_NAME$2, s.__scopeDialog);
    return jsxRuntimeExports.jsx(Presence, {
        present: o || c.open,
        children: c.modal ? jsxRuntimeExports.jsx(DialogContentModal, {
            ...a,
            ref: e
        }) : jsxRuntimeExports.jsx(DialogContentNonModal, {
            ...a,
            ref: e
        })
    })
}
);
DialogContent$1.displayName = CONTENT_NAME$2;
var DialogContentModal = reactExports.forwardRef( (s, e) => {
    const i = useDialogContext(CONTENT_NAME$2, s.__scopeDialog)
      , o = reactExports.useRef(null)
      , a = useComposedRefs(e, i.contentRef, o);
    return reactExports.useEffect( () => {
        const c = o.current;
        if (c)
            return hideOthers(c)
    }
    , []),
    jsxRuntimeExports.jsx(DialogContentImpl, {
        ...s,
        ref: a,
        trapFocus: i.open,
        disableOutsidePointerEvents: !0,
        onCloseAutoFocus: composeEventHandlers(s.onCloseAutoFocus, c => {
            var d;
            c.preventDefault(),
            (d = i.triggerRef.current) == null || d.focus()
        }
        ),
        onPointerDownOutside: composeEventHandlers(s.onPointerDownOutside, c => {
            const d = c.detail.originalEvent
              , h = d.button === 0 && d.ctrlKey === !0;
            (d.button === 2 || h) && c.preventDefault()
        }
        ),
        onFocusOutside: composeEventHandlers(s.onFocusOutside, c => c.preventDefault())
    })
}
)
  , DialogContentNonModal = reactExports.forwardRef( (s, e) => {
    const i = useDialogContext(CONTENT_NAME$2, s.__scopeDialog)
      , o = reactExports.useRef(!1)
      , a = reactExports.useRef(!1);
    return jsxRuntimeExports.jsx(DialogContentImpl, {
        ...s,
        ref: e,
        trapFocus: !1,
        disableOutsidePointerEvents: !1,
        onCloseAutoFocus: c => {
            var d, h;
            (d = s.onCloseAutoFocus) == null || d.call(s, c),
            c.defaultPrevented || (o.current || (h = i.triggerRef.current) == null || h.focus(),
            c.preventDefault()),
            o.current = !1,
            a.current = !1
        }
        ,
        onInteractOutside: c => {
            var g, b;
            (g = s.onInteractOutside) == null || g.call(s, c),
            c.defaultPrevented || (o.current = !0,
            c.detail.originalEvent.type === "pointerdown" && (a.current = !0));
            const d = c.target;
            ((b = i.triggerRef.current) == null ? void 0 : b.contains(d)) && c.preventDefault(),
            c.detail.originalEvent.type === "focusin" && a.current && c.preventDefault()
        }
    })
}
)
  , DialogContentImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeDialog: i, trapFocus: o, onOpenAutoFocus: a, onCloseAutoFocus: c, ...d} = s
      , h = useDialogContext(CONTENT_NAME$2, i)
      , g = reactExports.useRef(null)
      , b = useComposedRefs(e, g);
    return useFocusGuards(),
    jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [jsxRuntimeExports.jsx(FocusScope, {
            asChild: !0,
            loop: !0,
            trapped: o,
            onMountAutoFocus: a,
            onUnmountAutoFocus: c,
            children: jsxRuntimeExports.jsx(DismissableLayer, {
                role: "dialog",
                id: h.contentId,
                "aria-describedby": h.descriptionId,
                "aria-labelledby": h.titleId,
                "data-state": getState$1(h.open),
                ...d,
                ref: b,
                onDismiss: () => h.onOpenChange(!1)
            })
        }), jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [jsxRuntimeExports.jsx(TitleWarning, {
                titleId: h.titleId
            }), jsxRuntimeExports.jsx(DescriptionWarning, {
                contentRef: g,
                descriptionId: h.descriptionId
            })]
        })]
    })
}
)
  , TITLE_NAME = "DialogTitle"
  , DialogTitle$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeDialog: i, ...o} = s
      , a = useDialogContext(TITLE_NAME, i);
    return jsxRuntimeExports.jsx(Primitive$1.h2, {
        id: a.titleId,
        ...o,
        ref: e
    })
}
);
DialogTitle$1.displayName = TITLE_NAME;
var DESCRIPTION_NAME = "DialogDescription"
  , DialogDescription$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeDialog: i, ...o} = s
      , a = useDialogContext(DESCRIPTION_NAME, i);
    return jsxRuntimeExports.jsx(Primitive$1.p, {
        id: a.descriptionId,
        ...o,
        ref: e
    })
}
);
DialogDescription$1.displayName = DESCRIPTION_NAME;
var CLOSE_NAME = "DialogClose"
  , DialogClose = reactExports.forwardRef( (s, e) => {
    const {__scopeDialog: i, ...o} = s
      , a = useDialogContext(CLOSE_NAME, i);
    return jsxRuntimeExports.jsx(Primitive$1.button, {
        type: "button",
        ...o,
        ref: e,
        onClick: composeEventHandlers(s.onClick, () => a.onOpenChange(!1))
    })
}
);
DialogClose.displayName = CLOSE_NAME;
function getState$1(s) {
    return s ? "open" : "closed"
}
var TITLE_WARNING_NAME = "DialogTitleWarning"
  , [WarningProvider,useWarningContext] = createContext2(TITLE_WARNING_NAME, {
    contentName: CONTENT_NAME$2,
    titleName: TITLE_NAME,
    docsSlug: "dialog"
})
  , TitleWarning = ({titleId: s}) => {
    const e = useWarningContext(TITLE_WARNING_NAME)
      , i = `\`${e.contentName}\` requires a \`${e.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${e.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${e.docsSlug}`;
    return reactExports.useEffect( () => {
        s && (document.getElementById(s) || console.error(i))
    }
    , [i, s]),
    null
}
  , DESCRIPTION_WARNING_NAME = "DialogDescriptionWarning"
  , DescriptionWarning = ({contentRef: s, descriptionId: e}) => {
    const o = `Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${useWarningContext(DESCRIPTION_WARNING_NAME).contentName}}.`;
    return reactExports.useEffect( () => {
        var c;
        const a = (c = s.current) == null ? void 0 : c.getAttribute("aria-describedby");
        e && a && (document.getElementById(e) || console.warn(o))
    }
    , [o, s, e]),
    null
}
  , Root$3 = Dialog$1
  , Trigger$2 = DialogTrigger$1
  , Portal$1 = DialogPortal$1
  , Overlay = DialogOverlay$1
  , Content$1 = DialogContent$1
  , Title = DialogTitle$1
  , Description = DialogDescription$1
  , Close = DialogClose;
const Dialog = Root$3
  , DialogTrigger = Trigger$2
  , DialogPortal = Portal$1
  , DialogOverlay = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Overlay, {
    ref: i,
    className: cn("fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0", s),
    ...e
}));
DialogOverlay.displayName = Overlay.displayName;
const DialogContent = reactExports.forwardRef( ({className: s, children: e, ...i}, o) => jsxRuntimeExports.jsxs(DialogPortal, {
    children: [jsxRuntimeExports.jsx(DialogOverlay, {}), jsxRuntimeExports.jsxs(Content$1, {
        ref: o,
        className: cn("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg", s),
        ...i,
        children: [e, jsxRuntimeExports.jsxs(Close, {
            className: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground",
            children: [jsxRuntimeExports.jsx(X, {
                className: "h-4 w-4"
            }), jsxRuntimeExports.jsx("span", {
                className: "sr-only",
                children: "Close"
            })]
        })]
    })]
}));
DialogContent.displayName = Content$1.displayName;
const DialogHeader = ({className: s, ...e}) => jsxRuntimeExports.jsx("div", {
    className: cn("flex flex-col space-y-1.5 text-center sm:text-left", s),
    ...e
});
DialogHeader.displayName = "DialogHeader";
const DialogTitle = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Title, {
    ref: i,
    className: cn("text-lg font-semibold leading-none tracking-tight", s),
    ...e
}));
DialogTitle.displayName = Title.displayName;
const DialogDescription = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Description, {
    ref: i,
    className: cn("text-sm text-muted-foreground", s),
    ...e
}));
DialogDescription.displayName = Description.displayName;
var SWITCH_NAME = "Switch"
  , [createSwitchContext,createSwitchScope] = createContextScope$3(SWITCH_NAME)
  , [SwitchProvider,useSwitchContext] = createSwitchContext(SWITCH_NAME)
  , Switch$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeSwitch: i, name: o, checked: a, defaultChecked: c, required: d, disabled: h, value: g="on", onCheckedChange: b, form: _, ...$} = s
      , [_e,tt] = reactExports.useState(null)
      , rt = useComposedRefs(e, lt => tt(lt))
      , et = reactExports.useRef(!1)
      , it = _e ? _ || !!_e.closest("form") : !0
      , [st=!1,nt] = useControllableState({
        prop: a,
        defaultProp: c,
        onChange: b
    });
    return jsxRuntimeExports.jsxs(SwitchProvider, {
        scope: i,
        checked: st,
        disabled: h,
        children: [jsxRuntimeExports.jsx(Primitive$1.button, {
            type: "button",
            role: "switch",
            "aria-checked": st,
            "aria-required": d,
            "data-state": getState(st),
            "data-disabled": h ? "" : void 0,
            disabled: h,
            value: g,
            ...$,
            ref: rt,
            onClick: composeEventHandlers(s.onClick, lt => {
                nt(dt => !dt),
                it && (et.current = lt.isPropagationStopped(),
                et.current || lt.stopPropagation())
            }
            )
        }), it && jsxRuntimeExports.jsx(BubbleInput, {
            control: _e,
            bubbles: !et.current,
            name: o,
            value: g,
            checked: st,
            required: d,
            disabled: h,
            form: _,
            style: {
                transform: "translateX(-100%)"
            }
        })]
    })
}
);
Switch$1.displayName = SWITCH_NAME;
var THUMB_NAME = "SwitchThumb"
  , SwitchThumb = reactExports.forwardRef( (s, e) => {
    const {__scopeSwitch: i, ...o} = s
      , a = useSwitchContext(THUMB_NAME, i);
    return jsxRuntimeExports.jsx(Primitive$1.span, {
        "data-state": getState(a.checked),
        "data-disabled": a.disabled ? "" : void 0,
        ...o,
        ref: e
    })
}
);
SwitchThumb.displayName = THUMB_NAME;
var BubbleInput = s => {
    const {control: e, checked: i, bubbles: o=!0, ...a} = s
      , c = reactExports.useRef(null)
      , d = usePrevious(i)
      , h = useSize(e);
    return reactExports.useEffect( () => {
        const g = c.current
          , b = window.HTMLInputElement.prototype
          , $ = Object.getOwnPropertyDescriptor(b, "checked").set;
        if (d !== i && $) {
            const _e = new Event("click",{
                bubbles: o
            });
            $.call(g, i),
            g.dispatchEvent(_e)
        }
    }
    , [d, i, o]),
    jsxRuntimeExports.jsx("input", {
        type: "checkbox",
        "aria-hidden": !0,
        defaultChecked: i,
        ...a,
        tabIndex: -1,
        ref: c,
        style: {
            ...s.style,
            ...h,
            position: "absolute",
            pointerEvents: "none",
            opacity: 0,
            margin: 0
        }
    })
}
;
function getState(s) {
    return s ? "checked" : "unchecked"
}
var Root$2 = Switch$1
  , Thumb = SwitchThumb;
const Switch = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Root$2, {
    className: cn("peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input", s),
    ...e,
    ref: i,
    children: jsxRuntimeExports.jsx(Thumb, {
        className: cn("pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0")
    })
}));
Switch.displayName = Root$2.displayName;
var OPEN_KEYS = [" ", "Enter", "ArrowUp", "ArrowDown"]
  , SELECTION_KEYS = [" ", "Enter"]
  , SELECT_NAME = "Select"
  , [Collection,useCollection,createCollectionScope] = createCollection(SELECT_NAME)
  , [createSelectContext,createSelectScope] = createContextScope$3(SELECT_NAME, [createCollectionScope, createPopperScope])
  , usePopperScope = createPopperScope()
  , [SelectProvider,useSelectContext] = createSelectContext(SELECT_NAME)
  , [SelectNativeOptionsProvider,useSelectNativeOptionsContext] = createSelectContext(SELECT_NAME)
  , Select$1 = s => {
    const {__scopeSelect: e, children: i, open: o, defaultOpen: a, onOpenChange: c, value: d, defaultValue: h, onValueChange: g, dir: b, name: _, autoComplete: $, disabled: _e, required: tt, form: rt} = s
      , et = usePopperScope(e)
      , [it,st] = reactExports.useState(null)
      , [nt,lt] = reactExports.useState(null)
      , [dt,ot] = reactExports.useState(!1)
      , at = useDirection(b)
      , [ht=!1,pt] = useControllableState({
        prop: o,
        defaultProp: a,
        onChange: c
    })
      , [gt,wt] = useControllableState({
        prop: d,
        defaultProp: h,
        onChange: g
    })
      , yt = reactExports.useRef(null)
      , Rt = it ? rt || !!it.closest("form") : !0
      , [Mt,ss] = reactExports.useState(new Set)
      , zt = Array.from(Mt).map(At => At.props.value).join(";");
    return jsxRuntimeExports.jsx(Root2$3, {
        ...et,
        children: jsxRuntimeExports.jsxs(SelectProvider, {
            required: tt,
            scope: e,
            trigger: it,
            onTriggerChange: st,
            valueNode: nt,
            onValueNodeChange: lt,
            valueNodeHasChildren: dt,
            onValueNodeHasChildrenChange: ot,
            contentId: useId$1(),
            value: gt,
            onValueChange: wt,
            open: ht,
            onOpenChange: pt,
            dir: at,
            triggerPointerDownPosRef: yt,
            disabled: _e,
            children: [jsxRuntimeExports.jsx(Collection.Provider, {
                scope: e,
                children: jsxRuntimeExports.jsx(SelectNativeOptionsProvider, {
                    scope: s.__scopeSelect,
                    onNativeOptionAdd: reactExports.useCallback(At => {
                        ss(kt => new Set(kt).add(At))
                    }
                    , []),
                    onNativeOptionRemove: reactExports.useCallback(At => {
                        ss(kt => {
                            const vt = new Set(kt);
                            return vt.delete(At),
                            vt
                        }
                        )
                    }
                    , []),
                    children: i
                })
            }), Rt ? jsxRuntimeExports.jsxs(BubbleSelect, {
                "aria-hidden": !0,
                required: tt,
                tabIndex: -1,
                name: _,
                autoComplete: $,
                value: gt,
                onChange: At => wt(At.target.value),
                disabled: _e,
                form: rt,
                children: [gt === void 0 ? jsxRuntimeExports.jsx("option", {
                    value: ""
                }) : null, Array.from(Mt)]
            }, zt) : null]
        })
    })
}
;
Select$1.displayName = SELECT_NAME;
var TRIGGER_NAME$1 = "SelectTrigger"
  , SelectTrigger$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, disabled: o=!1, ...a} = s
      , c = usePopperScope(i)
      , d = useSelectContext(TRIGGER_NAME$1, i)
      , h = d.disabled || o
      , g = useComposedRefs(e, d.onTriggerChange)
      , b = useCollection(i)
      , _ = reactExports.useRef("touch")
      , [$,_e,tt] = useTypeaheadSearch(et => {
        const it = b().filter(lt => !lt.disabled)
          , st = it.find(lt => lt.value === d.value)
          , nt = findNextItem(it, et, st);
        nt !== void 0 && d.onValueChange(nt.value)
    }
    )
      , rt = et => {
        h || (d.onOpenChange(!0),
        tt()),
        et && (d.triggerPointerDownPosRef.current = {
            x: Math.round(et.pageX),
            y: Math.round(et.pageY)
        })
    }
    ;
    return jsxRuntimeExports.jsx(Anchor, {
        asChild: !0,
        ...c,
        children: jsxRuntimeExports.jsx(Primitive$1.button, {
            type: "button",
            role: "combobox",
            "aria-controls": d.contentId,
            "aria-expanded": d.open,
            "aria-required": d.required,
            "aria-autocomplete": "none",
            dir: d.dir,
            "data-state": d.open ? "open" : "closed",
            disabled: h,
            "data-disabled": h ? "" : void 0,
            "data-placeholder": shouldShowPlaceholder(d.value) ? "" : void 0,
            ...a,
            ref: g,
            onClick: composeEventHandlers(a.onClick, et => {
                et.currentTarget.focus(),
                _.current !== "mouse" && rt(et)
            }
            ),
            onPointerDown: composeEventHandlers(a.onPointerDown, et => {
                _.current = et.pointerType;
                const it = et.target;
                it.hasPointerCapture(et.pointerId) && it.releasePointerCapture(et.pointerId),
                et.button === 0 && et.ctrlKey === !1 && et.pointerType === "mouse" && (rt(et),
                et.preventDefault())
            }
            ),
            onKeyDown: composeEventHandlers(a.onKeyDown, et => {
                const it = $.current !== "";
                !(et.ctrlKey || et.altKey || et.metaKey) && et.key.length === 1 && _e(et.key),
                !(it && et.key === " ") && OPEN_KEYS.includes(et.key) && (rt(),
                et.preventDefault())
            }
            )
        })
    })
}
);
SelectTrigger$1.displayName = TRIGGER_NAME$1;
var VALUE_NAME = "SelectValue"
  , SelectValue$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, className: o, style: a, children: c, placeholder: d="", ...h} = s
      , g = useSelectContext(VALUE_NAME, i)
      , {onValueNodeHasChildrenChange: b} = g
      , _ = c !== void 0
      , $ = useComposedRefs(e, g.onValueNodeChange);
    return useLayoutEffect2( () => {
        b(_)
    }
    , [b, _]),
    jsxRuntimeExports.jsx(Primitive$1.span, {
        ...h,
        ref: $,
        style: {
            pointerEvents: "none"
        },
        children: shouldShowPlaceholder(g.value) ? jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
            children: d
        }) : c
    })
}
);
SelectValue$1.displayName = VALUE_NAME;
var ICON_NAME = "SelectIcon"
  , SelectIcon = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, children: o, ...a} = s;
    return jsxRuntimeExports.jsx(Primitive$1.span, {
        "aria-hidden": !0,
        ...a,
        ref: e,
        children: o || "▼"
    })
}
);
SelectIcon.displayName = ICON_NAME;
var PORTAL_NAME = "SelectPortal"
  , SelectPortal = s => jsxRuntimeExports.jsx(Portal$3, {
    asChild: !0,
    ...s
});
SelectPortal.displayName = PORTAL_NAME;
var CONTENT_NAME$1 = "SelectContent"
  , SelectContent$1 = reactExports.forwardRef( (s, e) => {
    const i = useSelectContext(CONTENT_NAME$1, s.__scopeSelect)
      , [o,a] = reactExports.useState();
    if (useLayoutEffect2( () => {
        a(new DocumentFragment)
    }
    , []),
    !i.open) {
        const c = o;
        return c ? reactDomExports.createPortal(jsxRuntimeExports.jsx(SelectContentProvider, {
            scope: s.__scopeSelect,
            children: jsxRuntimeExports.jsx(Collection.Slot, {
                scope: s.__scopeSelect,
                children: jsxRuntimeExports.jsx("div", {
                    children: s.children
                })
            })
        }), c) : null
    }
    return jsxRuntimeExports.jsx(SelectContentImpl, {
        ...s,
        ref: e
    })
}
);
SelectContent$1.displayName = CONTENT_NAME$1;
var CONTENT_MARGIN = 10
  , [SelectContentProvider,useSelectContentContext] = createSelectContext(CONTENT_NAME$1)
  , CONTENT_IMPL_NAME = "SelectContentImpl"
  , SelectContentImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, position: o="item-aligned", onCloseAutoFocus: a, onEscapeKeyDown: c, onPointerDownOutside: d, side: h, sideOffset: g, align: b, alignOffset: _, arrowPadding: $, collisionBoundary: _e, collisionPadding: tt, sticky: rt, hideWhenDetached: et, avoidCollisions: it, ...st} = s
      , nt = useSelectContext(CONTENT_NAME$1, i)
      , [lt,dt] = reactExports.useState(null)
      , [ot,at] = reactExports.useState(null)
      , ht = useComposedRefs(e, St => dt(St))
      , [pt,gt] = reactExports.useState(null)
      , [wt,yt] = reactExports.useState(null)
      , Rt = useCollection(i)
      , [Mt,ss] = reactExports.useState(!1)
      , zt = reactExports.useRef(!1);
    reactExports.useEffect( () => {
        if (lt)
            return hideOthers(lt)
    }
    , [lt]),
    useFocusGuards();
    const At = reactExports.useCallback(St => {
        const [Bt,...os] = Rt().map(ys => ys.ref.current)
          , [ds] = os.slice(-1)
          , js = document.activeElement;
        for (const ys of St)
            if (ys === js || (ys == null || ys.scrollIntoView({
                block: "nearest"
            }),
            ys === Bt && ot && (ot.scrollTop = 0),
            ys === ds && ot && (ot.scrollTop = ot.scrollHeight),
            ys == null || ys.focus(),
            document.activeElement !== js))
                return
    }
    , [Rt, ot])
      , kt = reactExports.useCallback( () => At([pt, lt]), [At, pt, lt]);
    reactExports.useEffect( () => {
        Mt && kt()
    }
    , [Mt, kt]);
    const {onOpenChange: vt, triggerPointerDownPosRef: bt} = nt;
    reactExports.useEffect( () => {
        if (lt) {
            let St = {
                x: 0,
                y: 0
            };
            const Bt = ds => {
                var js, ys;
                St = {
                    x: Math.abs(Math.round(ds.pageX) - (((js = bt.current) == null ? void 0 : js.x) ?? 0)),
                    y: Math.abs(Math.round(ds.pageY) - (((ys = bt.current) == null ? void 0 : ys.y) ?? 0))
                }
            }
              , os = ds => {
                St.x <= 10 && St.y <= 10 ? ds.preventDefault() : lt.contains(ds.target) || vt(!1),
                document.removeEventListener("pointermove", Bt),
                bt.current = null
            }
            ;
            return bt.current !== null && (document.addEventListener("pointermove", Bt),
            document.addEventListener("pointerup", os, {
                capture: !0,
                once: !0
            })),
            () => {
                document.removeEventListener("pointermove", Bt),
                document.removeEventListener("pointerup", os, {
                    capture: !0
                })
            }
        }
    }
    , [lt, vt, bt]),
    reactExports.useEffect( () => {
        const St = () => vt(!1);
        return window.addEventListener("blur", St),
        window.addEventListener("resize", St),
        () => {
            window.removeEventListener("blur", St),
            window.removeEventListener("resize", St)
        }
    }
    , [vt]);
    const [Tt,Yt] = useTypeaheadSearch(St => {
        const Bt = Rt().filter(js => !js.disabled)
          , os = Bt.find(js => js.ref.current === document.activeElement)
          , ds = findNextItem(Bt, St, os);
        ds && setTimeout( () => ds.ref.current.focus())
    }
    )
      , Nt = reactExports.useCallback( (St, Bt, os) => {
        const ds = !zt.current && !os;
        (nt.value !== void 0 && nt.value === Bt || ds) && (gt(St),
        ds && (zt.current = !0))
    }
    , [nt.value])
      , jt = reactExports.useCallback( () => lt == null ? void 0 : lt.focus(), [lt])
      , xt = reactExports.useCallback( (St, Bt, os) => {
        const ds = !zt.current && !os;
        (nt.value !== void 0 && nt.value === Bt || ds) && yt(St)
    }
    , [nt.value])
      , Et = o === "popper" ? SelectPopperPosition : SelectItemAlignedPosition
      , Pt = Et === SelectPopperPosition ? {
        side: h,
        sideOffset: g,
        align: b,
        alignOffset: _,
        arrowPadding: $,
        collisionBoundary: _e,
        collisionPadding: tt,
        sticky: rt,
        hideWhenDetached: et,
        avoidCollisions: it
    } : {};
    return jsxRuntimeExports.jsx(SelectContentProvider, {
        scope: i,
        content: lt,
        viewport: ot,
        onViewportChange: at,
        itemRefCallback: Nt,
        selectedItem: pt,
        onItemLeave: jt,
        itemTextRefCallback: xt,
        focusSelectedItem: kt,
        selectedItemText: wt,
        position: o,
        isPositioned: Mt,
        searchRef: Tt,
        children: jsxRuntimeExports.jsx(ReactRemoveScroll, {
            as: Slot,
            allowPinchZoom: !0,
            children: jsxRuntimeExports.jsx(FocusScope, {
                asChild: !0,
                trapped: nt.open,
                onMountAutoFocus: St => {
                    St.preventDefault()
                }
                ,
                onUnmountAutoFocus: composeEventHandlers(a, St => {
                    var Bt;
                    (Bt = nt.trigger) == null || Bt.focus({
                        preventScroll: !0
                    }),
                    St.preventDefault()
                }
                ),
                children: jsxRuntimeExports.jsx(DismissableLayer, {
                    asChild: !0,
                    disableOutsidePointerEvents: !0,
                    onEscapeKeyDown: c,
                    onPointerDownOutside: d,
                    onFocusOutside: St => St.preventDefault(),
                    onDismiss: () => nt.onOpenChange(!1),
                    children: jsxRuntimeExports.jsx(Et, {
                        role: "listbox",
                        id: nt.contentId,
                        "data-state": nt.open ? "open" : "closed",
                        dir: nt.dir,
                        onContextMenu: St => St.preventDefault(),
                        ...st,
                        ...Pt,
                        onPlaced: () => ss(!0),
                        ref: ht,
                        style: {
                            display: "flex",
                            flexDirection: "column",
                            outline: "none",
                            ...st.style
                        },
                        onKeyDown: composeEventHandlers(st.onKeyDown, St => {
                            const Bt = St.ctrlKey || St.altKey || St.metaKey;
                            if (St.key === "Tab" && St.preventDefault(),
                            !Bt && St.key.length === 1 && Yt(St.key),
                            ["ArrowUp", "ArrowDown", "Home", "End"].includes(St.key)) {
                                let ds = Rt().filter(js => !js.disabled).map(js => js.ref.current);
                                if (["ArrowUp", "End"].includes(St.key) && (ds = ds.slice().reverse()),
                                ["ArrowUp", "ArrowDown"].includes(St.key)) {
                                    const js = St.target
                                      , ys = ds.indexOf(js);
                                    ds = ds.slice(ys + 1)
                                }
                                setTimeout( () => At(ds)),
                                St.preventDefault()
                            }
                        }
                        )
                    })
                })
            })
        })
    })
}
);
SelectContentImpl.displayName = CONTENT_IMPL_NAME;
var ITEM_ALIGNED_POSITION_NAME = "SelectItemAlignedPosition"
  , SelectItemAlignedPosition = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, onPlaced: o, ...a} = s
      , c = useSelectContext(CONTENT_NAME$1, i)
      , d = useSelectContentContext(CONTENT_NAME$1, i)
      , [h,g] = reactExports.useState(null)
      , [b,_] = reactExports.useState(null)
      , $ = useComposedRefs(e, ht => _(ht))
      , _e = useCollection(i)
      , tt = reactExports.useRef(!1)
      , rt = reactExports.useRef(!0)
      , {viewport: et, selectedItem: it, selectedItemText: st, focusSelectedItem: nt} = d
      , lt = reactExports.useCallback( () => {
        if (c.trigger && c.valueNode && h && b && et && it && st) {
            const ht = c.trigger.getBoundingClientRect()
              , pt = b.getBoundingClientRect()
              , gt = c.valueNode.getBoundingClientRect()
              , wt = st.getBoundingClientRect();
            if (c.dir !== "rtl") {
                const js = wt.left - pt.left
                  , ys = gt.left - js
                  , vs = ht.left - ys
                  , Ss = ht.width + vs
                  , _s = Math.max(Ss, pt.width)
                  , ns = window.innerWidth - CONTENT_MARGIN
                  , xs = clamp(ys, [CONTENT_MARGIN, Math.max(CONTENT_MARGIN, ns - _s)]);
                h.style.minWidth = Ss + "px",
                h.style.left = xs + "px"
            } else {
                const js = pt.right - wt.right
                  , ys = window.innerWidth - gt.right - js
                  , vs = window.innerWidth - ht.right - ys
                  , Ss = ht.width + vs
                  , _s = Math.max(Ss, pt.width)
                  , ns = window.innerWidth - CONTENT_MARGIN
                  , xs = clamp(ys, [CONTENT_MARGIN, Math.max(CONTENT_MARGIN, ns - _s)]);
                h.style.minWidth = Ss + "px",
                h.style.right = xs + "px"
            }
            const yt = _e()
              , Rt = window.innerHeight - CONTENT_MARGIN * 2
              , Mt = et.scrollHeight
              , ss = window.getComputedStyle(b)
              , zt = parseInt(ss.borderTopWidth, 10)
              , At = parseInt(ss.paddingTop, 10)
              , kt = parseInt(ss.borderBottomWidth, 10)
              , vt = parseInt(ss.paddingBottom, 10)
              , bt = zt + At + Mt + vt + kt
              , Tt = Math.min(it.offsetHeight * 5, bt)
              , Yt = window.getComputedStyle(et)
              , Nt = parseInt(Yt.paddingTop, 10)
              , jt = parseInt(Yt.paddingBottom, 10)
              , xt = ht.top + ht.height / 2 - CONTENT_MARGIN
              , Et = Rt - xt
              , Pt = it.offsetHeight / 2
              , St = it.offsetTop + Pt
              , Bt = zt + At + St
              , os = bt - Bt;
            if (Bt <= xt) {
                const js = yt.length > 0 && it === yt[yt.length - 1].ref.current;
                h.style.bottom = "0px";
                const ys = b.clientHeight - et.offsetTop - et.offsetHeight
                  , vs = Math.max(Et, Pt + (js ? jt : 0) + ys + kt)
                  , Ss = Bt + vs;
                h.style.height = Ss + "px"
            } else {
                const js = yt.length > 0 && it === yt[0].ref.current;
                h.style.top = "0px";
                const vs = Math.max(xt, zt + et.offsetTop + (js ? Nt : 0) + Pt) + os;
                h.style.height = vs + "px",
                et.scrollTop = Bt - xt + et.offsetTop
            }
            h.style.margin = `${CONTENT_MARGIN}px 0`,
            h.style.minHeight = Tt + "px",
            h.style.maxHeight = Rt + "px",
            o == null || o(),
            requestAnimationFrame( () => tt.current = !0)
        }
    }
    , [_e, c.trigger, c.valueNode, h, b, et, it, st, c.dir, o]);
    useLayoutEffect2( () => lt(), [lt]);
    const [dt,ot] = reactExports.useState();
    useLayoutEffect2( () => {
        b && ot(window.getComputedStyle(b).zIndex)
    }
    , [b]);
    const at = reactExports.useCallback(ht => {
        ht && rt.current === !0 && (lt(),
        nt == null || nt(),
        rt.current = !1)
    }
    , [lt, nt]);
    return jsxRuntimeExports.jsx(SelectViewportProvider, {
        scope: i,
        contentWrapper: h,
        shouldExpandOnScrollRef: tt,
        onScrollButtonChange: at,
        children: jsxRuntimeExports.jsx("div", {
            ref: g,
            style: {
                display: "flex",
                flexDirection: "column",
                position: "fixed",
                zIndex: dt
            },
            children: jsxRuntimeExports.jsx(Primitive$1.div, {
                ...a,
                ref: $,
                style: {
                    boxSizing: "border-box",
                    maxHeight: "100%",
                    ...a.style
                }
            })
        })
    })
}
);
SelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;
var POPPER_POSITION_NAME = "SelectPopperPosition"
  , SelectPopperPosition = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, align: o="start", collisionPadding: a=CONTENT_MARGIN, ...c} = s
      , d = usePopperScope(i);
    return jsxRuntimeExports.jsx(Content$2, {
        ...d,
        ...c,
        ref: e,
        align: o,
        collisionPadding: a,
        style: {
            boxSizing: "border-box",
            ...c.style,
            "--radix-select-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-select-content-available-width": "var(--radix-popper-available-width)",
            "--radix-select-content-available-height": "var(--radix-popper-available-height)",
            "--radix-select-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-select-trigger-height": "var(--radix-popper-anchor-height)"
        }
    })
}
);
SelectPopperPosition.displayName = POPPER_POSITION_NAME;
var [SelectViewportProvider,useSelectViewportContext] = createSelectContext(CONTENT_NAME$1, {})
  , VIEWPORT_NAME = "SelectViewport"
  , SelectViewport = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, nonce: o, ...a} = s
      , c = useSelectContentContext(VIEWPORT_NAME, i)
      , d = useSelectViewportContext(VIEWPORT_NAME, i)
      , h = useComposedRefs(e, c.onViewportChange)
      , g = reactExports.useRef(0);
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [jsxRuntimeExports.jsx("style", {
            dangerouslySetInnerHTML: {
                __html: "[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}"
            },
            nonce: o
        }), jsxRuntimeExports.jsx(Collection.Slot, {
            scope: i,
            children: jsxRuntimeExports.jsx(Primitive$1.div, {
                "data-radix-select-viewport": "",
                role: "presentation",
                ...a,
                ref: h,
                style: {
                    position: "relative",
                    flex: 1,
                    overflow: "hidden auto",
                    ...a.style
                },
                onScroll: composeEventHandlers(a.onScroll, b => {
                    const _ = b.currentTarget
                      , {contentWrapper: $, shouldExpandOnScrollRef: _e} = d;
                    if (_e != null && _e.current && $) {
                        const tt = Math.abs(g.current - _.scrollTop);
                        if (tt > 0) {
                            const rt = window.innerHeight - CONTENT_MARGIN * 2
                              , et = parseFloat($.style.minHeight)
                              , it = parseFloat($.style.height)
                              , st = Math.max(et, it);
                            if (st < rt) {
                                const nt = st + tt
                                  , lt = Math.min(rt, nt)
                                  , dt = nt - lt;
                                $.style.height = lt + "px",
                                $.style.bottom === "0px" && (_.scrollTop = dt > 0 ? dt : 0,
                                $.style.justifyContent = "flex-end")
                            }
                        }
                    }
                    g.current = _.scrollTop
                }
                )
            })
        })]
    })
}
);
SelectViewport.displayName = VIEWPORT_NAME;
var GROUP_NAME = "SelectGroup"
  , [SelectGroupContextProvider,useSelectGroupContext] = createSelectContext(GROUP_NAME)
  , SelectGroup = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, ...o} = s
      , a = useId$1();
    return jsxRuntimeExports.jsx(SelectGroupContextProvider, {
        scope: i,
        id: a,
        children: jsxRuntimeExports.jsx(Primitive$1.div, {
            role: "group",
            "aria-labelledby": a,
            ...o,
            ref: e
        })
    })
}
);
SelectGroup.displayName = GROUP_NAME;
var LABEL_NAME = "SelectLabel"
  , SelectLabel$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, ...o} = s
      , a = useSelectGroupContext(LABEL_NAME, i);
    return jsxRuntimeExports.jsx(Primitive$1.div, {
        id: a.id,
        ...o,
        ref: e
    })
}
);
SelectLabel$1.displayName = LABEL_NAME;
var ITEM_NAME = "SelectItem"
  , [SelectItemContextProvider,useSelectItemContext] = createSelectContext(ITEM_NAME)
  , SelectItem$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, value: o, disabled: a=!1, textValue: c, ...d} = s
      , h = useSelectContext(ITEM_NAME, i)
      , g = useSelectContentContext(ITEM_NAME, i)
      , b = h.value === o
      , [_,$] = reactExports.useState(c ?? "")
      , [_e,tt] = reactExports.useState(!1)
      , rt = useComposedRefs(e, nt => {
        var lt;
        return (lt = g.itemRefCallback) == null ? void 0 : lt.call(g, nt, o, a)
    }
    )
      , et = useId$1()
      , it = reactExports.useRef("touch")
      , st = () => {
        a || (h.onValueChange(o),
        h.onOpenChange(!1))
    }
    ;
    if (o === "")
        throw new Error("A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder.");
    return jsxRuntimeExports.jsx(SelectItemContextProvider, {
        scope: i,
        value: o,
        disabled: a,
        textId: et,
        isSelected: b,
        onItemTextChange: reactExports.useCallback(nt => {
            $(lt => lt || ((nt == null ? void 0 : nt.textContent) ?? "").trim())
        }
        , []),
        children: jsxRuntimeExports.jsx(Collection.ItemSlot, {
            scope: i,
            value: o,
            disabled: a,
            textValue: _,
            children: jsxRuntimeExports.jsx(Primitive$1.div, {
                role: "option",
                "aria-labelledby": et,
                "data-highlighted": _e ? "" : void 0,
                "aria-selected": b && _e,
                "data-state": b ? "checked" : "unchecked",
                "aria-disabled": a || void 0,
                "data-disabled": a ? "" : void 0,
                tabIndex: a ? void 0 : -1,
                ...d,
                ref: rt,
                onFocus: composeEventHandlers(d.onFocus, () => tt(!0)),
                onBlur: composeEventHandlers(d.onBlur, () => tt(!1)),
                onClick: composeEventHandlers(d.onClick, () => {
                    it.current !== "mouse" && st()
                }
                ),
                onPointerUp: composeEventHandlers(d.onPointerUp, () => {
                    it.current === "mouse" && st()
                }
                ),
                onPointerDown: composeEventHandlers(d.onPointerDown, nt => {
                    it.current = nt.pointerType
                }
                ),
                onPointerMove: composeEventHandlers(d.onPointerMove, nt => {
                    var lt;
                    it.current = nt.pointerType,
                    a ? (lt = g.onItemLeave) == null || lt.call(g) : it.current === "mouse" && nt.currentTarget.focus({
                        preventScroll: !0
                    })
                }
                ),
                onPointerLeave: composeEventHandlers(d.onPointerLeave, nt => {
                    var lt;
                    nt.currentTarget === document.activeElement && ((lt = g.onItemLeave) == null || lt.call(g))
                }
                ),
                onKeyDown: composeEventHandlers(d.onKeyDown, nt => {
                    var dt;
                    ((dt = g.searchRef) == null ? void 0 : dt.current) !== "" && nt.key === " " || (SELECTION_KEYS.includes(nt.key) && st(),
                    nt.key === " " && nt.preventDefault())
                }
                )
            })
        })
    })
}
);
SelectItem$1.displayName = ITEM_NAME;
var ITEM_TEXT_NAME = "SelectItemText"
  , SelectItemText = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, className: o, style: a, ...c} = s
      , d = useSelectContext(ITEM_TEXT_NAME, i)
      , h = useSelectContentContext(ITEM_TEXT_NAME, i)
      , g = useSelectItemContext(ITEM_TEXT_NAME, i)
      , b = useSelectNativeOptionsContext(ITEM_TEXT_NAME, i)
      , [_,$] = reactExports.useState(null)
      , _e = useComposedRefs(e, st => $(st), g.onItemTextChange, st => {
        var nt;
        return (nt = h.itemTextRefCallback) == null ? void 0 : nt.call(h, st, g.value, g.disabled)
    }
    )
      , tt = _ == null ? void 0 : _.textContent
      , rt = reactExports.useMemo( () => jsxRuntimeExports.jsx("option", {
        value: g.value,
        disabled: g.disabled,
        children: tt
    }, g.value), [g.disabled, g.value, tt])
      , {onNativeOptionAdd: et, onNativeOptionRemove: it} = b;
    return useLayoutEffect2( () => (et(rt),
    () => it(rt)), [et, it, rt]),
    jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [jsxRuntimeExports.jsx(Primitive$1.span, {
            id: g.textId,
            ...c,
            ref: _e
        }), g.isSelected && d.valueNode && !d.valueNodeHasChildren ? reactDomExports.createPortal(c.children, d.valueNode) : null]
    })
}
);
SelectItemText.displayName = ITEM_TEXT_NAME;
var ITEM_INDICATOR_NAME = "SelectItemIndicator"
  , SelectItemIndicator = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, ...o} = s;
    return useSelectItemContext(ITEM_INDICATOR_NAME, i).isSelected ? jsxRuntimeExports.jsx(Primitive$1.span, {
        "aria-hidden": !0,
        ...o,
        ref: e
    }) : null
}
);
SelectItemIndicator.displayName = ITEM_INDICATOR_NAME;
var SCROLL_UP_BUTTON_NAME = "SelectScrollUpButton"
  , SelectScrollUpButton$1 = reactExports.forwardRef( (s, e) => {
    const i = useSelectContentContext(SCROLL_UP_BUTTON_NAME, s.__scopeSelect)
      , o = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, s.__scopeSelect)
      , [a,c] = reactExports.useState(!1)
      , d = useComposedRefs(e, o.onScrollButtonChange);
    return useLayoutEffect2( () => {
        if (i.viewport && i.isPositioned) {
            let h = function() {
                const b = g.scrollTop > 0;
                c(b)
            };
            const g = i.viewport;
            return h(),
            g.addEventListener("scroll", h),
            () => g.removeEventListener("scroll", h)
        }
    }
    , [i.viewport, i.isPositioned]),
    a ? jsxRuntimeExports.jsx(SelectScrollButtonImpl, {
        ...s,
        ref: d,
        onAutoScroll: () => {
            const {viewport: h, selectedItem: g} = i;
            h && g && (h.scrollTop = h.scrollTop - g.offsetHeight)
        }
    }) : null
}
);
SelectScrollUpButton$1.displayName = SCROLL_UP_BUTTON_NAME;
var SCROLL_DOWN_BUTTON_NAME = "SelectScrollDownButton"
  , SelectScrollDownButton$1 = reactExports.forwardRef( (s, e) => {
    const i = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, s.__scopeSelect)
      , o = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, s.__scopeSelect)
      , [a,c] = reactExports.useState(!1)
      , d = useComposedRefs(e, o.onScrollButtonChange);
    return useLayoutEffect2( () => {
        if (i.viewport && i.isPositioned) {
            let h = function() {
                const b = g.scrollHeight - g.clientHeight
                  , _ = Math.ceil(g.scrollTop) < b;
                c(_)
            };
            const g = i.viewport;
            return h(),
            g.addEventListener("scroll", h),
            () => g.removeEventListener("scroll", h)
        }
    }
    , [i.viewport, i.isPositioned]),
    a ? jsxRuntimeExports.jsx(SelectScrollButtonImpl, {
        ...s,
        ref: d,
        onAutoScroll: () => {
            const {viewport: h, selectedItem: g} = i;
            h && g && (h.scrollTop = h.scrollTop + g.offsetHeight)
        }
    }) : null
}
);
SelectScrollDownButton$1.displayName = SCROLL_DOWN_BUTTON_NAME;
var SelectScrollButtonImpl = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, onAutoScroll: o, ...a} = s
      , c = useSelectContentContext("SelectScrollButton", i)
      , d = reactExports.useRef(null)
      , h = useCollection(i)
      , g = reactExports.useCallback( () => {
        d.current !== null && (window.clearInterval(d.current),
        d.current = null)
    }
    , []);
    return reactExports.useEffect( () => () => g(), [g]),
    useLayoutEffect2( () => {
        var _;
        const b = h().find($ => $.ref.current === document.activeElement);
        (_ = b == null ? void 0 : b.ref.current) == null || _.scrollIntoView({
            block: "nearest"
        })
    }
    , [h]),
    jsxRuntimeExports.jsx(Primitive$1.div, {
        "aria-hidden": !0,
        ...a,
        ref: e,
        style: {
            flexShrink: 0,
            ...a.style
        },
        onPointerDown: composeEventHandlers(a.onPointerDown, () => {
            d.current === null && (d.current = window.setInterval(o, 50))
        }
        ),
        onPointerMove: composeEventHandlers(a.onPointerMove, () => {
            var b;
            (b = c.onItemLeave) == null || b.call(c),
            d.current === null && (d.current = window.setInterval(o, 50))
        }
        ),
        onPointerLeave: composeEventHandlers(a.onPointerLeave, () => {
            g()
        }
        )
    })
}
)
  , SEPARATOR_NAME = "SelectSeparator"
  , SelectSeparator$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, ...o} = s;
    return jsxRuntimeExports.jsx(Primitive$1.div, {
        "aria-hidden": !0,
        ...o,
        ref: e
    })
}
);
SelectSeparator$1.displayName = SEPARATOR_NAME;
var ARROW_NAME = "SelectArrow"
  , SelectArrow = reactExports.forwardRef( (s, e) => {
    const {__scopeSelect: i, ...o} = s
      , a = usePopperScope(i)
      , c = useSelectContext(ARROW_NAME, i)
      , d = useSelectContentContext(ARROW_NAME, i);
    return c.open && d.position === "popper" ? jsxRuntimeExports.jsx(Arrow, {
        ...a,
        ...o,
        ref: e
    }) : null
}
);
SelectArrow.displayName = ARROW_NAME;
function shouldShowPlaceholder(s) {
    return s === "" || s === void 0
}
var BubbleSelect = reactExports.forwardRef( (s, e) => {
    const {value: i, ...o} = s
      , a = reactExports.useRef(null)
      , c = useComposedRefs(e, a)
      , d = usePrevious(i);
    return reactExports.useEffect( () => {
        const h = a.current
          , g = window.HTMLSelectElement.prototype
          , _ = Object.getOwnPropertyDescriptor(g, "value").set;
        if (d !== i && _) {
            const $ = new Event("change",{
                bubbles: !0
            });
            _.call(h, i),
            h.dispatchEvent($)
        }
    }
    , [d, i]),
    jsxRuntimeExports.jsx(VisuallyHidden, {
        asChild: !0,
        children: jsxRuntimeExports.jsx("select", {
            ...o,
            ref: c,
            defaultValue: i
        })
    })
}
);
BubbleSelect.displayName = "BubbleSelect";
function useTypeaheadSearch(s) {
    const e = useCallbackRef$1(s)
      , i = reactExports.useRef("")
      , o = reactExports.useRef(0)
      , a = reactExports.useCallback(d => {
        const h = i.current + d;
        e(h),
        function g(b) {
            i.current = b,
            window.clearTimeout(o.current),
            b !== "" && (o.current = window.setTimeout( () => g(""), 1e3))
        }(h)
    }
    , [e])
      , c = reactExports.useCallback( () => {
        i.current = "",
        window.clearTimeout(o.current)
    }
    , []);
    return reactExports.useEffect( () => () => window.clearTimeout(o.current), []),
    [i, a, c]
}
function findNextItem(s, e, i) {
    const a = e.length > 1 && Array.from(e).every(b => b === e[0]) ? e[0] : e
      , c = i ? s.indexOf(i) : -1;
    let d = wrapArray(s, Math.max(c, 0));
    a.length === 1 && (d = d.filter(b => b !== i));
    const g = d.find(b => b.textValue.toLowerCase().startsWith(a.toLowerCase()));
    return g !== i ? g : void 0
}
function wrapArray(s, e) {
    return s.map( (i, o) => s[(e + o) % s.length])
}
var Root2$1 = Select$1
  , Trigger$1 = SelectTrigger$1
  , Value = SelectValue$1
  , Icon = SelectIcon
  , Portal = SelectPortal
  , Content2 = SelectContent$1
  , Viewport = SelectViewport
  , Label$2 = SelectLabel$1
  , Item = SelectItem$1
  , ItemText = SelectItemText
  , ItemIndicator = SelectItemIndicator
  , ScrollUpButton = SelectScrollUpButton$1
  , ScrollDownButton = SelectScrollDownButton$1
  , Separator$2 = SelectSeparator$1;
const Select = Root2$1
  , SelectValue = Value
  , SelectTrigger = reactExports.forwardRef( ({className: s, children: e, ...i}, o) => jsxRuntimeExports.jsxs(Trigger$1, {
    ref: o,
    className: cn("flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1", s),
    ...i,
    children: [e, jsxRuntimeExports.jsx(Icon, {
        asChild: !0,
        children: jsxRuntimeExports.jsx(ChevronDown, {
            className: "h-4 w-4 opacity-50"
        })
    })]
}));
SelectTrigger.displayName = Trigger$1.displayName;
const SelectScrollUpButton = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(ScrollUpButton, {
    ref: i,
    className: cn("flex cursor-default items-center justify-center py-1", s),
    ...e,
    children: jsxRuntimeExports.jsx(ChevronUp, {
        className: "h-4 w-4"
    })
}));
SelectScrollUpButton.displayName = ScrollUpButton.displayName;
const SelectScrollDownButton = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(ScrollDownButton, {
    ref: i,
    className: cn("flex cursor-default items-center justify-center py-1", s),
    ...e,
    children: jsxRuntimeExports.jsx(ChevronDown, {
        className: "h-4 w-4"
    })
}));
SelectScrollDownButton.displayName = ScrollDownButton.displayName;
const SelectContent = reactExports.forwardRef( ({className: s, children: e, position: i="popper", ...o}, a) => jsxRuntimeExports.jsx(Portal, {
    children: jsxRuntimeExports.jsxs(Content2, {
        ref: a,
        className: cn("relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", i === "popper" && "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1", s),
        position: i,
        ...o,
        children: [jsxRuntimeExports.jsx(SelectScrollUpButton, {}), jsxRuntimeExports.jsx(Viewport, {
            className: cn("p-1", i === "popper" && "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"),
            children: e
        }), jsxRuntimeExports.jsx(SelectScrollDownButton, {})]
    })
}));
SelectContent.displayName = Content2.displayName;
const SelectLabel = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Label$2, {
    ref: i,
    className: cn("py-1.5 pl-8 pr-2 text-sm font-semibold", s),
    ...e
}));
SelectLabel.displayName = Label$2.displayName;
const SelectItem = reactExports.forwardRef( ({className: s, children: e, ...i}, o) => jsxRuntimeExports.jsxs(Item, {
    ref: o,
    className: cn("relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", s),
    ...i,
    children: [jsxRuntimeExports.jsx("span", {
        className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center",
        children: jsxRuntimeExports.jsx(ItemIndicator, {
            children: jsxRuntimeExports.jsx(Check, {
                className: "h-4 w-4"
            })
        })
    }), jsxRuntimeExports.jsx(ItemText, {
        children: e
    })]
}));
SelectItem.displayName = Item.displayName;
const SelectSeparator = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Separator$2, {
    ref: i,
    className: cn("-mx-1 my-1 h-px bg-muted", s),
    ...e
}));
SelectSeparator.displayName = Separator$2.displayName;
const DEFAULT_MAGNIFICATION = 60
  , DEFAULT_DISTANCE = 140;
function Dock({className: s, children: e, direction: i="bottom", ...o}) {
    const a = useMotionValue(1 / 0);
    return jsxRuntimeExports.jsx(motion.div, {
        onMouseMove: c => a.set(c.pageX),
        onMouseLeave: () => a.set(1 / 0),
        ...o,
        className: cn("mx-auto flex h-16 items-end gap-4 rounded-2xl border bg-white/90 backdrop-blur-md px-4 pb-3", "shadow-xl border-white-200", {
            "items-start": i === "top",
            "items-center": i === "middle",
            "items-end": i === "bottom"
        }, s),
        children: React.Children.map(e, c => React.isValidElement(c) ? React.cloneElement(c, {
            ...c.props,
            mouseX: a
        }) : c)
    })
}
function DockIcon({size: s=40, magnification: e=DEFAULT_MAGNIFICATION, distance: i=DEFAULT_DISTANCE, mouseX: o, className: a, children: c, onClick: d, isActive: h=!1, isCompleted: g=!1, isDisabled: b=!1, tooltip: _, badge: $, ..._e}) {
    const tt = reactExports.useRef(null)
      , rt = useTransform(o, nt => {
        var dt;
        const lt = ((dt = tt.current) == null ? void 0 : dt.getBoundingClientRect()) ?? {
            x: 0,
            width: 0
        };
        return nt - lt.x - lt.width / 2
    }
    )
      , et = useTransform(rt, [-i, 0, i], [40, e, 40])
      , it = useSpring(et, {
        mass: .1,
        stiffness: 150,
        damping: 12
    })
      , st = jsxRuntimeExports.jsxs(motion.div, {
        ref: tt,
        style: {
            width: it
        },
        whileHover: {
            scale: b ? 1 : 1.05
        },
        whileTap: {
            scale: b ? 1 : .95
        },
        onClick: b ? void 0 : d,
        className: cn("flex aspect-square cursor-pointer items-center justify-center rounded-full relative", "transition-colors duration-300", {
            "bg-black text-white shadow-lg": h && !a,
            "bg-gray-800 text-white": g && !h,
            "bg-gray-100 hover:bg-gray-200 text-gray-700": !h && !g && !b,
            "bg-gray-50 text-gray-300 cursor-not-allowed opacity-50": b,
            "cursor-pointer": !b
        }, a),
        ..._e,
        children: [c, g && !h && jsxRuntimeExports.jsx("div", {
            className: "absolute -bottom-0.5 left-1/2 transform -translate-x-1/2 w-1.5 h-1.5 rounded-full bg-gray-900"
        }), $ && jsxRuntimeExports.jsx("div", {
            className: "absolute -top-1 -right-1 bg-black text-white text-[10px] font-bold rounded-full w-4 h-4 flex items-center justify-center",
            children: $
        })]
    });
    return _ ? jsxRuntimeExports.jsx(TooltipProvider, {
        children: jsxRuntimeExports.jsxs(Tooltip, {
            delayDuration: 0,
            children: [jsxRuntimeExports.jsx(TooltipTrigger, {
                asChild: !0,
                children: st
            }), jsxRuntimeExports.jsxs(TooltipContent, {
                side: "top",
                className: "mb-2 bg-black text-white border-0 font-medium",
                children: [jsxRuntimeExports.jsx("p", {
                    className: "font-medium",
                    children: _
                }), b && jsxRuntimeExports.jsx("p", {
                    className: "text-xs text-gray-300",
                    children: "Section disabled"
                }), g && jsxRuntimeExports.jsx("p", {
                    className: "text-xs text-white",
                    children: "✓ Completed"
                })]
            })]
        })
    }) : st
}
function ResumeSectionDock({sections: s, activeSection: e, onSectionChange: i, completedSections: o, enabledSections: a, className: c}) {
    return jsxRuntimeExports.jsx("div", {
        className: cn("fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50", c),
        children: jsxRuntimeExports.jsx(Dock, {
            className: "bg-white backdrop-blur-xl border-gray-100 shadow-xl",
            children: s.map(d => {
                const h = d.icon
                  , g = a[d.id] ?? !0
                  , b = o.includes(d.id)
                  , _ = e === d.id
                  , $ = !g && d.id !== "ai"
                  , _e = d.id === "ai";
                return jsxRuntimeExports.jsx(DockIcon, {
                    onClick: () => g && i(d.id),
                    isActive: _,
                    isCompleted: b,
                    isDisabled: $,
                    tooltip: d.label,
                    badge: $ ? "!" : void 0,
                    className: _e && _ ? "bg-gradient-to-r from-pink-500 to-purple-600 !text-white" : "",
                    children: jsxRuntimeExports.jsx(h, {
                        className: cn("w-5 h-5", _e ? "text-purple-500" : "")
                    })
                }, d.id)
            }
            )
        })
    })
}
const MOBILE_BREAKPOINT = 768;
function useIsMobile() {
    const [s,e] = reactExports.useState(void 0);
    return reactExports.useEffect( () => {
        const i = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
          , o = () => {
            e(window.innerWidth < MOBILE_BREAKPOINT)
        }
        ;
        return i.addEventListener("change", o),
        e(window.innerWidth < MOBILE_BREAKPOINT),
        () => i.removeEventListener("change", o)
    }
    , []),
    !!s
}
var NAME$1 = "Label"
  , Label$1 = reactExports.forwardRef( (s, e) => jsxRuntimeExports.jsx(Primitive$1.label, {
    ...s,
    ref: e,
    onMouseDown: i => {
        var a;
        i.target.closest("button, input, select, textarea") || ((a = s.onMouseDown) == null || a.call(s, i),
        !i.defaultPrevented && i.detail > 1 && i.preventDefault())
    }
}));
Label$1.displayName = NAME$1;
var Root$1 = Label$1;
const labelVariants = cva("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70")
  , Label = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Root$1, {
    ref: i,
    className: cn(labelVariants(), s),
    ...e
}));
Label.displayName = Root$1.displayName;
const EnhancedPersonalInfoSection = ({data: s, onUpdate: e}) => {
    const i = (a, c) => {
        e({
            ...s,
            [a]: c
        })
    }
      , o = [{
        key: "name",
        label: "Full Name",
        placeholder: "John Doe",
        icon: User,
        required: !0,
        type: "text"
    }, {
        key: "email",
        label: "Email Address",
        placeholder: "john.doe@example.com",
        icon: Mail,
        required: !0,
        type: "email"
    }, {
        key: "phone",
        label: "Phone Number",
        placeholder: "+1 (555) 123-4567",
        icon: Phone,
        required: !0,
        type: "tel"
    }, {
        key: "location",
        label: "Location",
        placeholder: "New York, NY",
        icon: MapPin,
        required: !1,
        type: "text"
    }, {
        key: "website",
        label: "Portfolio Website",
        placeholder: "https://johndoe.com",
        icon: Globe,
        required: !1,
        type: "url"
    }, {
        key: "linkedin",
        label: "LinkedIn",
        placeholder: "https://linkedin.com/in/johndoe",
        icon: Linkedin,
        required: !1,
        type: "url"
    }, {
        key: "github",
        label: "GitHub",
        placeholder: "https://github.com/johndoe",
        icon: Github,
        required: !1,
        type: "url"
    }];
    return jsxRuntimeExports.jsxs("div", {
        className: "space-y-6",
        children: [jsxRuntimeExports.jsx("div", {
            className: "grid grid-cols-1 md:grid-cols-2 gap-4",
            children: o.map( (a, c) => jsxRuntimeExports.jsx(motion.div, {
                initial: {
                    opacity: 0,
                    y: 20
                },
                animate: {
                    opacity: 1,
                    y: 0
                },
                transition: {
                    delay: c * .1
                },
                className: (a.required,
                "md:col-span-1"),
                children: jsxRuntimeExports.jsx(Card, {
                    className: "h-full hover:shadow-md transition-shadow duration-200",
                    children: jsxRuntimeExports.jsx(CardContent, {
                        className: "p-4",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "space-y-3",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center space-x-2",
                                children: [jsxRuntimeExports.jsx(a.icon, {
                                    className: "w-4 h-4 text-blue-600"
                                }), jsxRuntimeExports.jsxs(Label, {
                                    htmlFor: a.key,
                                    className: "text-sm font-medium",
                                    children: [a.label, a.required && jsxRuntimeExports.jsx("span", {
                                        className: "text-red-500 ml-1",
                                        children: "*"
                                    })]
                                })]
                            }), jsxRuntimeExports.jsx(Input, {
                                id: a.key,
                                type: a.type,
                                placeholder: a.placeholder,
                                value: s[a.key] || "",
                                onChange: d => i(a.key, d.target.value),
                                className: "w-full",
                                required: a.required
                            })]
                        })
                    })
                })
            }, a.key))
        }), jsxRuntimeExports.jsx(motion.div, {
            initial: {
                opacity: 0,
                y: 20
            },
            animate: {
                opacity: 1,
                y: 0
            },
            transition: {
                delay: .8
            },
            children: jsxRuntimeExports.jsx(Card, {
                className: "bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200",
                children: jsxRuntimeExports.jsxs(CardContent, {
                    className: "p-6",
                    children: [jsxRuntimeExports.jsxs("h3", {
                        className: "text-lg font-semibold text-gray-900 mb-4 flex items-center",
                        children: [jsxRuntimeExports.jsx(User, {
                            className: "w-5 h-5 mr-2 text-blue-600"
                        }), "Preview"]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-3",
                        children: [jsxRuntimeExports.jsx("div", {
                            children: jsxRuntimeExports.jsx("h4", {
                                className: "text-xl font-bold text-gray-900",
                                children: s.name || "Your Name"
                            })
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-2 text-sm text-gray-600",
                            children: [s.email && jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(Mail, {
                                    className: "w-4 h-4"
                                }), jsxRuntimeExports.jsx("span", {
                                    children: s.email
                                })]
                            }), s.phone && jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(Phone, {
                                    className: "w-4 h-4"
                                }), jsxRuntimeExports.jsx("span", {
                                    children: s.phone
                                })]
                            }), s.location && jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(MapPin, {
                                    className: "w-4 h-4"
                                }), jsxRuntimeExports.jsx("span", {
                                    children: s.location
                                })]
                            })]
                        }), (s.website || s.linkedin || s.github) && jsxRuntimeExports.jsxs("div", {
                            className: "flex flex-wrap gap-3 text-sm",
                            children: [s.website && jsxRuntimeExports.jsxs("span", {
                                className: "flex items-center gap-1 text-blue-600",
                                children: [jsxRuntimeExports.jsx(Globe, {
                                    className: "w-3 h-3"
                                }), "Portfolio"]
                            }), s.linkedin && jsxRuntimeExports.jsxs("span", {
                                className: "flex items-center gap-1 text-blue-600",
                                children: [jsxRuntimeExports.jsx(Linkedin, {
                                    className: "w-3 h-3"
                                }), "LinkedIn"]
                            }), s.github && jsxRuntimeExports.jsxs("span", {
                                className: "flex items-center gap-1 text-blue-600",
                                children: [jsxRuntimeExports.jsx(Github, {
                                    className: "w-3 h-3"
                                }), "GitHub"]
                            })]
                        })]
                    })]
                })
            })
        })]
    })
}
  , Textarea = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx("textarea", {
    className: cn("flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50", s),
    ref: i,
    ...e
}));
Textarea.displayName = "Textarea";
const EnhancedSummarySection = ({data: s, onUpdate: e}) => {
    const [i,o] = reactExports.useState(!1)
      , a = $ => {
        e($)
    }
      , c = async $ => {
        try {
            await navigator.clipboard.writeText($),
            o(!0),
            setTimeout( () => o(!1), 2e3)
        } catch (_e) {
            console.error("Failed to copy text: ", _e)
        }
    }
      , d = () => s.length
      , h = () => s.trim().split(/\s+/).filter($ => $.length > 0).length
      , g = ($, _e, tt) => $ < _e ? "text-red-600" : $ > tt ? "text-amber-600" : "text-green-600"
      , b = [{
        title: "Software Engineer",
        content: "Experienced software engineer with 5+ years developing scalable web applications using React, Node.js, and cloud technologies. Proven track record of leading cross-functional teams and delivering high-quality solutions that improve user experience and business outcomes. Passionate about clean code, performance optimization, and mentoring junior developers."
    }, {
        title: "Marketing Professional",
        content: "Results-driven marketing professional with 7+ years of experience in digital marketing, brand management, and campaign optimization. Expertise in data-driven strategies that increased lead generation by 150% and improved customer engagement across multiple channels. Strong analytical skills with proficiency in Google Analytics, HubSpot, and marketing automation tools."
    }, {
        title: "Project Manager",
        content: "Certified PMP with 8+ years managing complex projects from initiation to delivery. Successfully led teams of 15+ members across multiple time zones, consistently delivering projects on time and under budget. Expert in Agile methodologies, risk management, and stakeholder communication with a track record of improving team productivity by 40%."
    }, {
        title: "Data Scientist",
        content: "Data scientist with 4+ years of experience in machine learning, statistical analysis, and predictive modeling. Proficient in Python, R, SQL, and cloud platforms (AWS, GCP). Developed ML models that improved business decision-making and generated $2M+ in cost savings. Strong background in data visualization and communicating insights to non-technical stakeholders."
    }]
      , _ = ["Keep it concise: 2-4 sentences or 100-200 words", "Start with your years of experience and key expertise", "Include quantifiable achievements when possible", "Mention relevant skills and technologies", "Tailor it to the specific role you're applying for", "Use action words and avoid generic phrases"];
    return jsxRuntimeExports.jsxs("div", {
        className: "space-y-6",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "text-sm text-gray-600 bg-green-50 p-4 rounded-lg border border-green-200",
            children: [jsxRuntimeExports.jsx("p", {
                className: "font-medium text-green-900 mb-2",
                children: "💡 Professional Summary Tips"
            }), jsxRuntimeExports.jsx("ul", {
                className: "space-y-1 text-green-800",
                children: _.map( ($, _e) => jsxRuntimeExports.jsxs("li", {
                    children: ["• ", $]
                }, _e))
            })]
        }), jsxRuntimeExports.jsx(motion.div, {
            initial: {
                opacity: 0,
                y: 20
            },
            animate: {
                opacity: 1,
                y: 0
            },
            transition: {
                duration: .3
            },
            children: jsxRuntimeExports.jsx(Card, {
                className: "border border-gray-200 hover:border-green-300 transition-colors",
                children: jsxRuntimeExports.jsx(CardContent, {
                    className: "p-4",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "space-y-3",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between",
                            children: [jsxRuntimeExports.jsxs(Label, {
                                htmlFor: "summary",
                                className: "text-sm font-medium text-gray-700 flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(FileText, {
                                    className: "w-4 h-4 text-green-600"
                                }), "Professional Summary", jsxRuntimeExports.jsx("span", {
                                    className: "text-red-500",
                                    children: "*"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsxs(Badge, {
                                    variant: "outline",
                                    className: g(d(), 100, 400),
                                    children: [d(), " chars"]
                                }), jsxRuntimeExports.jsxs(Badge, {
                                    variant: "outline",
                                    className: g(h(), 20, 80),
                                    children: [h(), " words"]
                                })]
                            })]
                        }), jsxRuntimeExports.jsx(Textarea, {
                            id: "summary",
                            placeholder: "Write a compelling professional summary that highlights your key qualifications, experience, and value proposition. Focus on your most relevant achievements and skills that align with your target role...",
                            value: s,
                            onChange: $ => a($.target.value),
                            className: "min-h-[120px] border-gray-300 focus:border-green-500 focus:ring-green-500 resize-none",
                            rows: 6
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between text-xs text-gray-500",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-4",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: g(d(), 100, 400),
                                    children: "Optimal: 100-400 characters"
                                }), jsxRuntimeExports.jsx("span", {
                                    className: g(h(), 20, 80),
                                    children: "Optimal: 20-80 words"
                                })]
                            }), s && jsxRuntimeExports.jsx(Button, {
                                variant: "ghost",
                                size: "sm",
                                onClick: () => c(s),
                                className: "h-6 px-2",
                                children: i ? jsxRuntimeExports.jsx(Check, {
                                    className: "w-3 h-3 text-green-600"
                                }) : jsxRuntimeExports.jsx(Copy, {
                                    className: "w-3 h-3"
                                })
                            })]
                        })]
                    })
                })
            })
        }), jsxRuntimeExports.jsx(motion.div, {
            initial: {
                opacity: 0,
                y: 20
            },
            animate: {
                opacity: 1,
                y: 0
            },
            transition: {
                delay: .2
            },
            children: jsxRuntimeExports.jsx(Card, {
                className: "bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200",
                children: jsxRuntimeExports.jsxs(CardContent, {
                    className: "p-4",
                    children: [jsxRuntimeExports.jsxs("h3", {
                        className: "font-medium text-gray-900 mb-3 flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Sparkles, {
                            className: "w-4 h-4 text-purple-600"
                        }), "Sample Professional Summaries"]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "space-y-3",
                        children: b.map( ($, _e) => jsxRuntimeExports.jsxs(motion.div, {
                            initial: {
                                opacity: 0,
                                x: -20
                            },
                            animate: {
                                opacity: 1,
                                x: 0
                            },
                            transition: {
                                delay: .1 * _e
                            },
                            className: "p-3 bg-white rounded-lg border border-purple-100 hover:border-purple-300 transition-colors",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-start justify-between mb-2",
                                children: [jsxRuntimeExports.jsx("h4", {
                                    className: "font-medium text-purple-900",
                                    children: $.title
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex gap-1",
                                    children: [jsxRuntimeExports.jsxs(Button, {
                                        variant: "ghost",
                                        size: "sm",
                                        onClick: () => a($.content),
                                        className: "h-6 px-2 text-xs",
                                        children: [jsxRuntimeExports.jsx(RotateCcw, {
                                            className: "w-3 h-3 mr-1"
                                        }), "Use"]
                                    }), jsxRuntimeExports.jsx(Button, {
                                        variant: "ghost",
                                        size: "sm",
                                        onClick: () => c($.content),
                                        className: "h-6 px-2 text-xs",
                                        children: jsxRuntimeExports.jsx(Copy, {
                                            className: "w-3 h-3"
                                        })
                                    })]
                                })]
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-sm text-gray-700 leading-relaxed",
                                children: $.content
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex gap-2 mt-2",
                                children: [jsxRuntimeExports.jsxs(Badge, {
                                    variant: "secondary",
                                    className: "text-xs",
                                    children: [$.content.length, " chars"]
                                }), jsxRuntimeExports.jsxs(Badge, {
                                    variant: "secondary",
                                    className: "text-xs",
                                    children: [$.content.trim().split(/\s+/).length, " words"]
                                })]
                            })]
                        }, _e))
                    })]
                })
            })
        }), s && jsxRuntimeExports.jsx(motion.div, {
            initial: {
                opacity: 0,
                y: 20
            },
            animate: {
                opacity: 1,
                y: 0
            },
            transition: {
                delay: .4
            },
            children: jsxRuntimeExports.jsx(Card, {
                className: "bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200",
                children: jsxRuntimeExports.jsxs(CardContent, {
                    className: "p-4",
                    children: [jsxRuntimeExports.jsxs("h3", {
                        className: "font-medium text-gray-900 mb-3 flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(FileText, {
                            className: "w-4 h-4 text-green-600"
                        }), "Preview"]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "prose prose-sm max-w-none",
                        children: jsxRuntimeExports.jsx("p", {
                            className: "text-gray-700 leading-relaxed",
                            children: s
                        })
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-2 mt-3 pt-3 border-t border-green-200",
                        children: [jsxRuntimeExports.jsxs(Badge, {
                            variant: d() >= 100 && d() <= 400 ? "default" : "secondary",
                            className: "text-xs",
                            children: [d() >= 100 && d() <= 400 ? "✓" : "!", " Length"]
                        }), jsxRuntimeExports.jsxs(Badge, {
                            variant: h() >= 20 && h() <= 80 ? "default" : "secondary",
                            className: "text-xs",
                            children: [h() >= 20 && h() <= 80 ? "✓" : "!", " Word Count"]
                        }), jsxRuntimeExports.jsxs(Badge, {
                            variant: s.includes("years") || s.includes("experience") ? "default" : "secondary",
                            className: "text-xs",
                            children: [s.includes("years") || s.includes("experience") ? "✓" : "!", " Experience Mentioned"]
                        })]
                    })]
                })
            })
        })]
    })
}
;
var NAME = "Separator"
  , DEFAULT_ORIENTATION = "horizontal"
  , ORIENTATIONS = ["horizontal", "vertical"]
  , Separator$1 = reactExports.forwardRef( (s, e) => {
    const {decorative: i, orientation: o=DEFAULT_ORIENTATION, ...a} = s
      , c = isValidOrientation(o) ? o : DEFAULT_ORIENTATION
      , h = i ? {
        role: "none"
    } : {
        "aria-orientation": c === "vertical" ? c : void 0,
        role: "separator"
    };
    return jsxRuntimeExports.jsx(Primitive$1.div, {
        "data-orientation": c,
        ...h,
        ...a,
        ref: e
    })
}
);
Separator$1.displayName = NAME;
function isValidOrientation(s) {
    return ORIENTATIONS.includes(s)
}
var Root = Separator$1;
const Separator = reactExports.forwardRef( ({className: s, orientation: e="horizontal", decorative: i=!0, ...o}, a) => jsxRuntimeExports.jsx(Root, {
    ref: a,
    decorative: i,
    orientation: e,
    className: cn("shrink-0 bg-border", e === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]", s),
    ...o
}));
Separator.displayName = Root.displayName;
const EnhancedExperienceSection = ({data: s, onUpdate: e}) => {
    const [i,o] = reactExports.useState(new Set)
      , a = () => `exp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      , c = () => {
        const et = {
            id: a(),
            jobTitle: "",
            company: "",
            location: "",
            startDate: "",
            endDate: "",
            current: !1,
            description: "",
            achievements: []
        };
        e([...s, et]),
        o(it => new Set([...it, et.id]))
    }
      , d = (et, it, st) => {
        const nt = s.map(lt => lt.id === et ? {
            ...lt,
            [it]: st
        } : lt);
        e(nt)
    }
      , h = et => {
        e(s.filter(it => it.id !== et)),
        o(it => {
            const st = new Set(it);
            return st.delete(et),
            st
        }
        )
    }
      , g = et => {
        const it = s.find(st => st.id === et);
        it && d(et, "achievements", [...it.achievements, ""])
    }
      , b = (et, it, st) => {
        const nt = s.find(lt => lt.id === et);
        if (nt) {
            const lt = [...nt.achievements];
            lt[it] = st,
            d(et, "achievements", lt)
        }
    }
      , _ = (et, it) => {
        const st = s.find(nt => nt.id === et);
        if (st) {
            const nt = st.achievements.filter( (lt, dt) => dt !== it);
            d(et, "achievements", nt)
        }
    }
      , $ = et => {
        o(it => {
            const st = new Set(it);
            return st.has(et) ? st.delete(et) : st.add(et),
            st
        }
        )
    }
      , _e = et => {
        const it = {
            ...et,
            id: a(),
            jobTitle: `${et.jobTitle} (Copy)`
        };
        e([...s, it])
    }
      , tt = ["Increased team productivity by 25% through implementation of agile methodologies", "Led cross-functional team of 8 developers to deliver project 2 weeks ahead of schedule", "Reduced system downtime by 40% through proactive monitoring and optimization", "Mentored 5 junior developers, with 100% promotion rate within 12 months", "Implemented automated testing suite, reducing bugs in production by 60%", "Designed and developed RESTful APIs serving 1M+ requests per day", "Optimized database queries resulting in 50% faster page load times", "Collaborated with product team to define requirements for 3 major feature releases"]
      , rt = et => {
        if (!et)
            return "";
        try {
            return new Date(et).toLocaleDateString("en-US", {
                month: "short",
                year: "numeric"
            })
        } catch {
            return et
        }
    }
    ;
    return jsxRuntimeExports.jsxs("div", {
        className: "space-y-6",
        children: [jsxRuntimeExports.jsx("div", {
            className: "space-y-4",
            children: jsxRuntimeExports.jsx(AnimatePresence, {
                children: s.map( (et, it) => {
                    const st = i.has(et.id);
                    return et.jobTitle || et.company || et.description,
                    jsxRuntimeExports.jsx(motion.div, {
                        initial: {
                            opacity: 0,
                            y: 20
                        },
                        animate: {
                            opacity: 1,
                            y: 0
                        },
                        exit: {
                            opacity: 0,
                            y: -20
                        },
                        transition: {
                            duration: .3
                        },
                        children: jsxRuntimeExports.jsxs(Card, {
                            className: "border border-gray-200 hover:border-purple-300 transition-colors",
                            children: [jsxRuntimeExports.jsx(CardHeader, {
                                className: "pb-3",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-3",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-2",
                                            children: [jsxRuntimeExports.jsx(GripVertical, {
                                                className: "w-4 h-4 text-gray-400"
                                            }), jsxRuntimeExports.jsx(Briefcase, {
                                                className: "w-4 h-4 text-purple-600"
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx(CardTitle, {
                                                className: "text-base",
                                                children: et.jobTitle || `Experience ${it + 1}`
                                            }), et.company && jsxRuntimeExports.jsxs("p", {
                                                className: "text-sm text-gray-600 flex items-center gap-1",
                                                children: [jsxRuntimeExports.jsx(Building, {
                                                    className: "w-3 h-3"
                                                }), et.company, et.location && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                    children: [jsxRuntimeExports.jsx("span", {
                                                        className: "mx-1",
                                                        children: "•"
                                                    }), jsxRuntimeExports.jsx(MapPin, {
                                                        className: "w-3 h-3"
                                                    }), et.location]
                                                })]
                                            }), (et.startDate || et.endDate) && jsxRuntimeExports.jsxs("p", {
                                                className: "text-xs text-gray-500 flex items-center gap-1",
                                                children: [jsxRuntimeExports.jsx(Calendar, {
                                                    className: "w-3 h-3"
                                                }), rt(et.startDate), " - ", et.current ? "Present" : rt(et.endDate)]
                                            })]
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(Button, {
                                            variant: "ghost",
                                            size: "sm",
                                            onClick: () => _e(et),
                                            className: "h-8 w-8 p-0",
                                            children: jsxRuntimeExports.jsx(Copy, {
                                                className: "w-3 h-3"
                                            })
                                        }), jsxRuntimeExports.jsx(Button, {
                                            variant: "ghost",
                                            size: "sm",
                                            onClick: () => $(et.id),
                                            className: "h-8 px-3",
                                            children: st ? "Collapse" : "Expand"
                                        }), jsxRuntimeExports.jsx(Button, {
                                            variant: "ghost",
                                            size: "sm",
                                            onClick: () => h(et.id),
                                            className: "h-8 w-8 p-0 text-red-600 hover:text-red-700",
                                            children: jsxRuntimeExports.jsx(Trash2, {
                                                className: "w-3 h-3"
                                            })
                                        })]
                                    })]
                                })
                            }), jsxRuntimeExports.jsx(AnimatePresence, {
                                children: st && jsxRuntimeExports.jsx(motion.div, {
                                    initial: {
                                        opacity: 0,
                                        height: 0
                                    },
                                    animate: {
                                        opacity: 1,
                                        height: "auto"
                                    },
                                    exit: {
                                        opacity: 0,
                                        height: 0
                                    },
                                    transition: {
                                        duration: .3
                                    },
                                    children: jsxRuntimeExports.jsx(CardContent, {
                                        className: "pt-0",
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: "space-y-4",
                                            children: [jsxRuntimeExports.jsxs("div", {
                                                className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                                children: [jsxRuntimeExports.jsxs("div", {
                                                    className: "space-y-2",
                                                    children: [jsxRuntimeExports.jsx(Label, {
                                                        htmlFor: `jobTitle-${et.id}`,
                                                        children: "Job Title *"
                                                    }), jsxRuntimeExports.jsx(Input, {
                                                        id: `jobTitle-${et.id}`,
                                                        placeholder: "Software Engineer",
                                                        value: et.jobTitle,
                                                        onChange: nt => d(et.id, "jobTitle", nt.target.value)
                                                    })]
                                                }), jsxRuntimeExports.jsxs("div", {
                                                    className: "space-y-2",
                                                    children: [jsxRuntimeExports.jsx(Label, {
                                                        htmlFor: `company-${et.id}`,
                                                        children: "Company *"
                                                    }), jsxRuntimeExports.jsx(Input, {
                                                        id: `company-${et.id}`,
                                                        placeholder: "Tech Company Inc.",
                                                        value: et.company,
                                                        onChange: nt => d(et.id, "company", nt.target.value)
                                                    })]
                                                }), jsxRuntimeExports.jsxs("div", {
                                                    className: "space-y-2",
                                                    children: [jsxRuntimeExports.jsx(Label, {
                                                        htmlFor: `location-${et.id}`,
                                                        children: "Location"
                                                    }), jsxRuntimeExports.jsx(Input, {
                                                        id: `location-${et.id}`,
                                                        placeholder: "San Francisco, CA",
                                                        value: et.location,
                                                        onChange: nt => d(et.id, "location", nt.target.value)
                                                    })]
                                                }), jsxRuntimeExports.jsx("div", {
                                                    className: "space-y-2",
                                                    children: jsxRuntimeExports.jsxs("div", {
                                                        className: "flex items-center gap-2",
                                                        children: [jsxRuntimeExports.jsx(Switch, {
                                                            id: `current-${et.id}`,
                                                            checked: et.current,
                                                            onCheckedChange: nt => d(et.id, "current", nt)
                                                        }), jsxRuntimeExports.jsx(Label, {
                                                            htmlFor: `current-${et.id}`,
                                                            children: "Currently working here"
                                                        })]
                                                    })
                                                })]
                                            }), jsxRuntimeExports.jsxs("div", {
                                                className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                                children: [jsxRuntimeExports.jsxs("div", {
                                                    className: "space-y-2",
                                                    children: [jsxRuntimeExports.jsx(Label, {
                                                        htmlFor: `startDate-${et.id}`,
                                                        children: "Start Date"
                                                    }), jsxRuntimeExports.jsx(Input, {
                                                        id: `startDate-${et.id}`,
                                                        type: "month",
                                                        value: et.startDate,
                                                        onChange: nt => d(et.id, "startDate", nt.target.value)
                                                    })]
                                                }), !et.current && jsxRuntimeExports.jsxs("div", {
                                                    className: "space-y-2",
                                                    children: [jsxRuntimeExports.jsx(Label, {
                                                        htmlFor: `endDate-${et.id}`,
                                                        children: "End Date"
                                                    }), jsxRuntimeExports.jsx(Input, {
                                                        id: `endDate-${et.id}`,
                                                        type: "month",
                                                        value: et.endDate,
                                                        onChange: nt => d(et.id, "endDate", nt.target.value)
                                                    })]
                                                })]
                                            }), jsxRuntimeExports.jsxs("div", {
                                                className: "space-y-2",
                                                children: [jsxRuntimeExports.jsx(Label, {
                                                    htmlFor: `description-${et.id}`,
                                                    children: "Job Description"
                                                }), jsxRuntimeExports.jsx(Textarea, {
                                                    id: `description-${et.id}`,
                                                    placeholder: "Provide a brief overview of your role and responsibilities...",
                                                    value: et.description,
                                                    onChange: nt => d(et.id, "description", nt.target.value),
                                                    rows: 3
                                                })]
                                            }), jsxRuntimeExports.jsx(Separator, {}), jsxRuntimeExports.jsxs("div", {
                                                className: "space-y-3",
                                                children: [jsxRuntimeExports.jsxs("div", {
                                                    className: "flex items-center justify-between",
                                                    children: [jsxRuntimeExports.jsxs(Label, {
                                                        className: "flex items-center gap-2",
                                                        children: [jsxRuntimeExports.jsx(Star, {
                                                            className: "w-4 h-4 text-yellow-500"
                                                        }), "Key Achievements"]
                                                    }), jsxRuntimeExports.jsxs(Button, {
                                                        variant: "outline",
                                                        size: "sm",
                                                        onClick: () => g(et.id),
                                                        className: "h-8",
                                                        children: [jsxRuntimeExports.jsx(Plus, {
                                                            className: "w-3 h-3 mr-1"
                                                        }), "Add Achievement"]
                                                    })]
                                                }), et.achievements.length === 0 && jsxRuntimeExports.jsxs("div", {
                                                    className: "text-center py-6 text-gray-500 border-2 border-dashed border-gray-200 rounded-lg",
                                                    children: [jsxRuntimeExports.jsx(Star, {
                                                        className: "w-8 h-8 mx-auto mb-2 text-gray-400"
                                                    }), jsxRuntimeExports.jsx("p", {
                                                        className: "text-sm",
                                                        children: "No achievements added yet"
                                                    }), jsxRuntimeExports.jsx("p", {
                                                        className: "text-xs",
                                                        children: 'Click "Add Achievement" to get started'
                                                    })]
                                                }), jsxRuntimeExports.jsx(AnimatePresence, {
                                                    children: et.achievements.map( (nt, lt) => jsxRuntimeExports.jsxs(motion.div, {
                                                        initial: {
                                                            opacity: 0,
                                                            y: 10
                                                        },
                                                        animate: {
                                                            opacity: 1,
                                                            y: 0
                                                        },
                                                        exit: {
                                                            opacity: 0,
                                                            y: -10
                                                        },
                                                        className: "flex gap-2",
                                                        children: [jsxRuntimeExports.jsx("div", {
                                                            className: "flex-1",
                                                            children: jsxRuntimeExports.jsx(Textarea, {
                                                                placeholder: "Describe a specific achievement with quantifiable results...",
                                                                value: nt,
                                                                onChange: dt => b(et.id, lt, dt.target.value),
                                                                rows: 2,
                                                                className: "resize-none"
                                                            })
                                                        }), jsxRuntimeExports.jsx(Button, {
                                                            variant: "ghost",
                                                            size: "sm",
                                                            onClick: () => _(et.id, lt),
                                                            className: "h-8 w-8 p-0 text-red-600 hover:text-red-700 mt-1",
                                                            children: jsxRuntimeExports.jsx(Trash2, {
                                                                className: "w-3 h-3"
                                                            })
                                                        })]
                                                    }, lt))
                                                }), et.achievements.length < 3 && jsxRuntimeExports.jsx(Card, {
                                                    className: "bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200",
                                                    children: jsxRuntimeExports.jsxs(CardContent, {
                                                        className: "p-3",
                                                        children: [jsxRuntimeExports.jsxs("h4", {
                                                            className: "text-sm font-medium text-yellow-900 mb-2 flex items-center gap-1",
                                                            children: [jsxRuntimeExports.jsx(Sparkles, {
                                                                className: "w-3 h-3"
                                                            }), "Sample Achievements"]
                                                        }), jsxRuntimeExports.jsx("div", {
                                                            className: "space-y-2",
                                                            children: tt.slice(0, 3).map( (nt, lt) => jsxRuntimeExports.jsxs("div", {
                                                                className: "flex items-start justify-between text-xs",
                                                                children: [jsxRuntimeExports.jsx("p", {
                                                                    className: "text-yellow-800 flex-1 pr-2",
                                                                    children: nt
                                                                }), jsxRuntimeExports.jsx(Button, {
                                                                    variant: "ghost",
                                                                    size: "sm",
                                                                    onClick: () => {
                                                                        const dt = [...et.achievements, nt];
                                                                        d(et.id, "achievements", dt)
                                                                    }
                                                                    ,
                                                                    className: "h-6 px-2 text-xs",
                                                                    children: "Use"
                                                                })]
                                                            }, lt))
                                                        })]
                                                    })
                                                })]
                                            })]
                                        })
                                    })
                                })
                            })]
                        })
                    }, et.id)
                }
                )
            })
        }), jsxRuntimeExports.jsx(motion.div, {
            initial: {
                opacity: 0
            },
            animate: {
                opacity: 1
            },
            transition: {
                delay: .3
            },
            children: jsxRuntimeExports.jsxs(Button, {
                onClick: c,
                variant: "outline",
                className: "w-full h-12 border-dashed border-2 border-purple-300 text-purple-600 hover:border-purple-400 hover:text-purple-700",
                children: [jsxRuntimeExports.jsx(Plus, {
                    className: "w-4 h-4 mr-2"
                }), "Add Work Experience"]
            })
        }), s.length > 0 && jsxRuntimeExports.jsx(motion.div, {
            initial: {
                opacity: 0,
                y: 20
            },
            animate: {
                opacity: 1,
                y: 0
            },
            transition: {
                delay: .4
            },
            children: jsxRuntimeExports.jsx(Card, {
                className: "bg-gradient-to-r from-purple-50 to-indigo-50 border border-purple-200",
                children: jsxRuntimeExports.jsxs(CardContent, {
                    className: "p-4",
                    children: [jsxRuntimeExports.jsxs("h3", {
                        className: "font-medium text-gray-900 mb-2 flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Briefcase, {
                            className: "w-4 h-4 text-purple-600"
                        }), "Experience Summary"]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "grid grid-cols-2 md:grid-cols-4 gap-4 text-sm",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "text-center",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "text-lg font-semibold text-purple-600",
                                children: s.length
                            }), jsxRuntimeExports.jsx("div", {
                                className: "text-gray-600",
                                children: "Positions"
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "text-center",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "text-lg font-semibold text-purple-600",
                                children: s.reduce( (et, it) => et + it.achievements.length, 0)
                            }), jsxRuntimeExports.jsx("div", {
                                className: "text-gray-600",
                                children: "Achievements"
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "text-center",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "text-lg font-semibold text-purple-600",
                                children: s.filter(et => et.current).length
                            }), jsxRuntimeExports.jsx("div", {
                                className: "text-gray-600",
                                children: "Current"
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "text-center",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "text-lg font-semibold text-purple-600",
                                children: s.filter(et => et.jobTitle && et.company).length
                            }), jsxRuntimeExports.jsx("div", {
                                className: "text-gray-600",
                                children: "Complete"
                            })]
                        })]
                    })]
                })
            })
        })]
    })
}
  , EnhancedEducationSection = ({data: s, onUpdate: e}) => {
    const i = () => `edu_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      , o = () => {
        const d = {
            id: i(),
            degree: "",
            school: "",
            location: "",
            startDate: "",
            endDate: "",
            gpa: "",
            honors: "",
            coursework: []
        };
        e([...s, d])
    }
      , a = (d, h, g) => {
        const b = s.map(_ => _.id === d ? {
            ..._,
            [h]: g
        } : _);
        e(b)
    }
      , c = d => {
        e(s.filter(h => h.id !== d))
    }
    ;
    return jsxRuntimeExports.jsxs("div", {
        className: "space-y-6",
        children: [jsxRuntimeExports.jsx("div", {
            className: "space-y-4",
            children: s.map( (d, h) => jsxRuntimeExports.jsx(motion.div, {
                initial: {
                    opacity: 0,
                    y: 20
                },
                animate: {
                    opacity: 1,
                    y: 0
                },
                transition: {
                    delay: h * .1
                },
                children: jsxRuntimeExports.jsx(Card, {
                    className: "border border-gray-200 hover:border-amber-300 transition-colors",
                    children: jsxRuntimeExports.jsxs(CardContent, {
                        className: "p-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between mb-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(GraduationCap, {
                                    className: "w-4 h-4 text-amber-600"
                                }), jsxRuntimeExports.jsxs("h3", {
                                    className: "font-medium",
                                    children: ["Education ", h + 1]
                                })]
                            }), jsxRuntimeExports.jsx(Button, {
                                variant: "ghost",
                                size: "sm",
                                onClick: () => c(d.id),
                                className: "text-red-600 hover:text-red-700",
                                children: jsxRuntimeExports.jsx(Trash2, {
                                    className: "w-4 h-4"
                                })
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    children: "Degree *"
                                }), jsxRuntimeExports.jsx(Input, {
                                    placeholder: "Bachelor of Science in Computer Science",
                                    value: d.degree,
                                    onChange: g => a(d.id, "degree", g.target.value)
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    children: "School *"
                                }), jsxRuntimeExports.jsx(Input, {
                                    placeholder: "University of Technology",
                                    value: d.school,
                                    onChange: g => a(d.id, "school", g.target.value)
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    children: "Location"
                                }), jsxRuntimeExports.jsx(Input, {
                                    placeholder: "Boston, MA",
                                    value: d.location,
                                    onChange: g => a(d.id, "location", g.target.value)
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    children: "GPA"
                                }), jsxRuntimeExports.jsx(Input, {
                                    placeholder: "3.8/4.0",
                                    value: d.gpa,
                                    onChange: g => a(d.id, "gpa", g.target.value)
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    children: "Start Date"
                                }), jsxRuntimeExports.jsx(Input, {
                                    type: "month",
                                    value: d.startDate,
                                    onChange: g => a(d.id, "startDate", g.target.value)
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    children: "End Date"
                                }), jsxRuntimeExports.jsx(Input, {
                                    type: "month",
                                    value: d.endDate,
                                    onChange: g => a(d.id, "endDate", g.target.value)
                                })]
                            })]
                        })]
                    })
                })
            }, d.id))
        }), jsxRuntimeExports.jsxs(Button, {
            onClick: o,
            variant: "outline",
            className: "w-full h-12 border-dashed border-2 border-amber-300 text-amber-600 hover:border-amber-400",
            children: [jsxRuntimeExports.jsx(Plus, {
                className: "w-4 h-4 mr-2"
            }), "Add Education"]
        })]
    })
}
  , EnhancedSkillsSection = ({data: s, onUpdate: e}) => {
    const [i,o] = reactExports.useState({
        technical: "",
        soft: "",
        languages: "",
        frameworks: ""
    })
      , a = (b, _) => {
        _.trim() && !s[b].includes(_.trim()) && (e({
            ...s,
            [b]: [...s[b], _.trim()]
        }),
        o($ => ({
            ...$,
            [b]: ""
        })))
    }
      , c = (b, _) => {
        e({
            ...s,
            [b]: s[b].filter($ => $ !== _)
        })
    }
      , d = (b, _) => {
        b.key === "Enter" && (b.preventDefault(),
        a(_, i[_]))
    }
      , h = {
        technical: ["JavaScript", "Python", "React", "Node.js", "SQL", "Git", "AWS", "Docker"],
        soft: ["Leadership", "Communication", "Problem Solving", "Team Collaboration", "Time Management"],
        languages: ["Java", "Python", "C#", "C++", "C", "Ruby", "Go", "JavaScript", "TypeScript", "Swift"],
        frameworks: ["React", "Vue.js", "Angular", "Express.js", "Django", "Spring Boot", "Laravel"]
    }
      , g = [{
        key: "technical",
        label: "Technical Skills",
        color: "blue",
        icon: Code
    }, {
        key: "frameworks",
        label: "Frameworks & Libraries",
        color: "purple",
        icon: Code
    }, {
        key: "soft",
        label: "Soft Skills",
        color: "green",
        icon: Code
    }, {
        key: "languages",
        label: "Programming Languages",
        color: "orange",
        icon: Code
    }];
    return jsxRuntimeExports.jsxs("div", {
        className: "space-y-6",
        children: [jsxRuntimeExports.jsx("div", {
            className: "space-y-6",
            children: g.map( (b, _) => jsxRuntimeExports.jsx(motion.div, {
                initial: {
                    opacity: 0,
                    y: 20
                },
                animate: {
                    opacity: 1,
                    y: 0
                },
                transition: {
                    delay: _ * .1
                },
                children: jsxRuntimeExports.jsx(Card, {
                    className: "border border-gray-200 hover:border-cyan-300 transition-colors",
                    children: jsxRuntimeExports.jsx(CardContent, {
                        className: "p-4",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "space-y-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(b.icon, {
                                    className: "w-4 h-4 text-cyan-600"
                                }), jsxRuntimeExports.jsx(Label, {
                                    className: "font-medium",
                                    children: b.label
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex gap-2",
                                children: [jsxRuntimeExports.jsx(Input, {
                                    placeholder: `Add ${b.label.toLowerCase()}...`,
                                    value: i[b.key],
                                    onChange: $ => o(_e => ({
                                        ..._e,
                                        [b.key]: $.target.value
                                    })),
                                    onKeyPress: $ => d($, b.key),
                                    className: "flex-1"
                                }), jsxRuntimeExports.jsx(Button, {
                                    onClick: () => a(b.key, i[b.key]),
                                    size: "sm",
                                    disabled: !i[b.key].trim(),
                                    children: jsxRuntimeExports.jsx(Plus, {
                                        className: "w-4 h-4"
                                    })
                                })]
                            }), s[b.key].length > 0 && jsxRuntimeExports.jsx("div", {
                                className: "flex flex-wrap gap-2",
                                children: s[b.key].map( ($, _e) => jsxRuntimeExports.jsx(motion.div, {
                                    initial: {
                                        opacity: 0,
                                        scale: .8
                                    },
                                    animate: {
                                        opacity: 1,
                                        scale: 1
                                    },
                                    transition: {
                                        delay: _e * .05
                                    },
                                    children: jsxRuntimeExports.jsxs(Badge, {
                                        variant: "secondary",
                                        className: "flex items-center gap-1 pr-1 hover:bg-gray-200 transition-colors",
                                        children: [$, jsxRuntimeExports.jsx(Button, {
                                            variant: "ghost",
                                            size: "sm",
                                            onClick: () => c(b.key, $),
                                            className: "h-4 w-4 p-0 hover:bg-red-100 hover:text-red-600",
                                            children: jsxRuntimeExports.jsx(X, {
                                                className: "w-3 h-3"
                                            })
                                        })]
                                    })
                                }, $))
                            }), s[b.key].length < 5 && jsxRuntimeExports.jsx(Card, {
                                className: "bg-gradient-to-r from-cyan-50 to-blue-50 border border-cyan-200",
                                children: jsxRuntimeExports.jsxs(CardContent, {
                                    className: "p-3",
                                    children: [jsxRuntimeExports.jsxs("h4", {
                                        className: "text-sm font-medium text-cyan-900 mb-2 flex items-center gap-1",
                                        children: [jsxRuntimeExports.jsx(Sparkles, {
                                            className: "w-3 h-3"
                                        }), "Suggested ", b.label]
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "flex flex-wrap gap-2",
                                        children: h[b.key].filter($ => !s[b.key].includes($)).slice(0, 6).map($ => jsxRuntimeExports.jsxs(Button, {
                                            variant: "ghost",
                                            size: "sm",
                                            onClick: () => a(b.key, $),
                                            className: "h-6 px-2 text-xs border border-cyan-200 hover:border-cyan-300",
                                            children: ["+ ", $]
                                        }, $))
                                    })]
                                })
                            })]
                        })
                    })
                })
            }, b.key))
        }), Object.values(s).some(b => b.length > 0) && jsxRuntimeExports.jsx(motion.div, {
            initial: {
                opacity: 0,
                y: 20
            },
            animate: {
                opacity: 1,
                y: 0
            },
            transition: {
                delay: .4
            },
            children: jsxRuntimeExports.jsx(Card, {
                className: "bg-gradient-to-r from-cyan-50 to-teal-50 border border-cyan-200",
                children: jsxRuntimeExports.jsxs(CardContent, {
                    className: "p-4",
                    children: [jsxRuntimeExports.jsxs("h3", {
                        className: "font-medium text-gray-900 mb-2 flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Code, {
                            className: "w-4 h-4 text-cyan-600"
                        }), "Skills Summary"]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "grid grid-cols-2 md:grid-cols-4 gap-4 text-sm",
                        children: g.map(b => jsxRuntimeExports.jsxs("div", {
                            className: "text-center",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "text-lg font-semibold text-cyan-600",
                                children: s[b.key].length
                            }), jsxRuntimeExports.jsx("div", {
                                className: "text-gray-600 text-xs",
                                children: b.label
                            })]
                        }, b.key))
                    }), jsxRuntimeExports.jsx("div", {
                        className: "mt-3 pt-3 border-t border-cyan-200",
                        children: jsxRuntimeExports.jsxs("p", {
                            className: "text-sm text-gray-600",
                            children: ["Total Skills: ", jsxRuntimeExports.jsx("span", {
                                className: "font-semibold text-cyan-600",
                                children: Object.values(s).flat().length
                            })]
                        })
                    })]
                })
            })
        })]
    })
}
  , EnhancedProjectsSection = ({data: s, onUpdate: e}) => {
    const i = () => `proj_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      , o = () => {
        const d = {
            id: i(),
            name: "",
            description: "",
            technologies: [],
            link: "",
            github: "",
            startDate: "",
            endDate: ""
        };
        e([...s, d])
    }
      , a = (d, h, g) => {
        const b = s.map(_ => _.id === d ? {
            ..._,
            [h]: g
        } : _);
        e(b)
    }
      , c = d => {
        e(s.filter(h => h.id !== d))
    }
    ;
    return jsxRuntimeExports.jsxs("div", {
        className: "space-y-6",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "text-sm text-gray-600 bg-pink-50 p-4 rounded-lg border border-pink-200",
            children: [jsxRuntimeExports.jsx("p", {
                className: "font-medium text-pink-900 mb-2",
                children: "🚀 Projects Tips"
            }), jsxRuntimeExports.jsxs("ul", {
                className: "space-y-1 text-pink-800",
                children: [jsxRuntimeExports.jsx("li", {
                    children: "• Showcase projects that demonstrate relevant skills"
                }), jsxRuntimeExports.jsx("li", {
                    children: "• Include both personal and professional projects"
                }), jsxRuntimeExports.jsx("li", {
                    children: "• Add live links and GitHub repositories when available"
                }), jsxRuntimeExports.jsx("li", {
                    children: "• Highlight the technologies and tools you used"
                })]
            })]
        }), jsxRuntimeExports.jsx("div", {
            className: "space-y-4",
            children: s.map( (d, h) => jsxRuntimeExports.jsx(motion.div, {
                initial: {
                    opacity: 0,
                    y: 20
                },
                animate: {
                    opacity: 1,
                    y: 0
                },
                transition: {
                    delay: h * .1
                },
                children: jsxRuntimeExports.jsx(Card, {
                    className: "border border-gray-200 hover:border-pink-300 transition-colors",
                    children: jsxRuntimeExports.jsxs(CardContent, {
                        className: "p-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between mb-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(Globe, {
                                    className: "w-4 h-4 text-pink-600"
                                }), jsxRuntimeExports.jsxs("h3", {
                                    className: "font-medium",
                                    children: ["Project ", h + 1]
                                })]
                            }), jsxRuntimeExports.jsx(Button, {
                                variant: "ghost",
                                size: "sm",
                                onClick: () => c(d.id),
                                className: "text-red-600 hover:text-red-700",
                                children: jsxRuntimeExports.jsx(Trash2, {
                                    className: "w-4 h-4"
                                })
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "Project Name *"
                                    }), jsxRuntimeExports.jsx(Input, {
                                        placeholder: "E-commerce Website",
                                        value: d.name,
                                        onChange: g => a(d.id, "name", g.target.value)
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "Technologies (comma-separated)"
                                    }), jsxRuntimeExports.jsx(Input, {
                                        placeholder: "React, Node.js, MongoDB",
                                        value: d.technologies.join(", "),
                                        onChange: g => a(d.id, "technologies", g.target.value.split(",").map(b => b.trim()).filter(b => b))
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    children: "Description"
                                }), jsxRuntimeExports.jsx(Textarea, {
                                    placeholder: "Describe your project, its purpose, and key features...",
                                    value: d.description,
                                    onChange: g => a(d.id, "description", g.target.value),
                                    rows: 3
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "Live Link"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "relative",
                                        children: [jsxRuntimeExports.jsx(ExternalLink, {
                                            className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                                        }), jsxRuntimeExports.jsx(Input, {
                                            placeholder: "https://myproject.com",
                                            value: d.link,
                                            onChange: g => a(d.id, "link", g.target.value),
                                            className: "pl-10"
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "GitHub Repository"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "relative",
                                        children: [jsxRuntimeExports.jsx(Github, {
                                            className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                                        }), jsxRuntimeExports.jsx(Input, {
                                            placeholder: "https://github.com/username/project",
                                            value: d.github,
                                            onChange: g => a(d.id, "github", g.target.value),
                                            className: "pl-10"
                                        })]
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "Start Date"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "relative",
                                        children: [jsxRuntimeExports.jsx(Calendar, {
                                            className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                                        }), jsxRuntimeExports.jsx(Input, {
                                            type: "month",
                                            value: d.startDate,
                                            onChange: g => a(d.id, "startDate", g.target.value),
                                            className: "pl-10"
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "End Date"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "relative",
                                        children: [jsxRuntimeExports.jsx(Calendar, {
                                            className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                                        }), jsxRuntimeExports.jsx(Input, {
                                            type: "month",
                                            value: d.endDate,
                                            onChange: g => a(d.id, "endDate", g.target.value),
                                            className: "pl-10"
                                        })]
                                    })]
                                })]
                            })]
                        })]
                    })
                })
            }, d.id))
        }), jsxRuntimeExports.jsxs(Button, {
            onClick: o,
            variant: "outline",
            className: "w-full h-12 border-dashed border-2 border-pink-300 text-pink-600 hover:border-pink-400",
            children: [jsxRuntimeExports.jsx(Plus, {
                className: "w-4 h-4 mr-2"
            }), "Add Project"]
        }), s.length === 0 && jsxRuntimeExports.jsxs("div", {
            className: "text-center py-8 text-gray-500",
            children: [jsxRuntimeExports.jsx(Globe, {
                className: "w-12 h-12 mx-auto mb-4 text-gray-300"
            }), jsxRuntimeExports.jsx("p", {
                className: "text-lg font-medium mb-2",
                children: "No projects added yet"
            }), jsxRuntimeExports.jsx("p", {
                className: "text-sm",
                children: 'Click "Add Project" to showcase your work and achievements'
            })]
        })]
    })
}
  , EnhancedCertificationsSection = ({data: s, onUpdate: e}) => {
    const i = () => `cert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      , o = () => {
        const d = {
            id: i(),
            name: "",
            issuer: "",
            date: "",
            expiryDate: "",
            credentialId: "",
            link: ""
        };
        e([...s, d])
    }
      , a = (d, h, g) => {
        const b = s.map(_ => _.id === d ? {
            ..._,
            [h]: g
        } : _);
        e(b)
    }
      , c = d => {
        e(s.filter(h => h.id !== d))
    }
    ;
    return jsxRuntimeExports.jsxs("div", {
        className: "space-y-6",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "text-sm text-gray-600 bg-orange-50 p-4 rounded-lg border border-orange-200",
            children: [jsxRuntimeExports.jsx("p", {
                className: "font-medium text-orange-900 mb-2",
                children: "🏆 Certifications Tips"
            }), jsxRuntimeExports.jsxs("ul", {
                className: "space-y-1 text-orange-800",
                children: [jsxRuntimeExports.jsx("li", {
                    children: "• Include relevant professional certifications"
                }), jsxRuntimeExports.jsx("li", {
                    children: "• Add credential IDs and verification links when available"
                }), jsxRuntimeExports.jsx("li", {
                    children: "• List most recent or relevant certifications first"
                }), jsxRuntimeExports.jsx("li", {
                    children: "• Include expiry dates to show current validity"
                })]
            })]
        }), jsxRuntimeExports.jsx("div", {
            className: "space-y-4",
            children: s.map( (d, h) => jsxRuntimeExports.jsx(motion.div, {
                initial: {
                    opacity: 0,
                    y: 20
                },
                animate: {
                    opacity: 1,
                    y: 0
                },
                transition: {
                    delay: h * .1
                },
                children: jsxRuntimeExports.jsx(Card, {
                    className: "border border-gray-200 hover:border-orange-300 transition-colors",
                    children: jsxRuntimeExports.jsxs(CardContent, {
                        className: "p-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between mb-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(Award, {
                                    className: "w-4 h-4 text-orange-600"
                                }), jsxRuntimeExports.jsxs("h3", {
                                    className: "font-medium",
                                    children: ["Certification ", h + 1]
                                })]
                            }), jsxRuntimeExports.jsx(Button, {
                                variant: "ghost",
                                size: "sm",
                                onClick: () => c(d.id),
                                className: "text-red-600 hover:text-red-700",
                                children: jsxRuntimeExports.jsx(Trash2, {
                                    className: "w-4 h-4"
                                })
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "Certification Name *"
                                    }), jsxRuntimeExports.jsx(Input, {
                                        placeholder: "AWS Certified Solutions Architect",
                                        value: d.name,
                                        onChange: g => a(d.id, "name", g.target.value)
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "Issuing Organization *"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "relative",
                                        children: [jsxRuntimeExports.jsx(Building, {
                                            className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                                        }), jsxRuntimeExports.jsx(Input, {
                                            placeholder: "Amazon Web Services",
                                            value: d.issuer,
                                            onChange: g => a(d.id, "issuer", g.target.value),
                                            className: "pl-10"
                                        })]
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "Issue Date"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "relative",
                                        children: [jsxRuntimeExports.jsx(Calendar, {
                                            className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                                        }), jsxRuntimeExports.jsx(Input, {
                                            type: "month",
                                            value: d.date,
                                            onChange: g => a(d.id, "date", g.target.value),
                                            className: "pl-10"
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "Expiry Date"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "relative",
                                        children: [jsxRuntimeExports.jsx(Calendar, {
                                            className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                                        }), jsxRuntimeExports.jsx(Input, {
                                            type: "month",
                                            value: d.expiryDate,
                                            onChange: g => a(d.id, "expiryDate", g.target.value),
                                            className: "pl-10"
                                        })]
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "Credential ID"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "relative",
                                        children: [jsxRuntimeExports.jsx(Hash, {
                                            className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                                        }), jsxRuntimeExports.jsx(Input, {
                                            placeholder: "ABC123456789",
                                            value: d.credentialId,
                                            onChange: g => a(d.id, "credentialId", g.target.value),
                                            className: "pl-10"
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "Verification Link"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "relative",
                                        children: [jsxRuntimeExports.jsx(ExternalLink, {
                                            className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                                        }), jsxRuntimeExports.jsx(Input, {
                                            placeholder: "https://verify.example.com",
                                            value: d.link,
                                            onChange: g => a(d.id, "link", g.target.value),
                                            className: "pl-10"
                                        })]
                                    })]
                                })]
                            })]
                        })]
                    })
                })
            }, d.id))
        }), jsxRuntimeExports.jsxs(Button, {
            onClick: o,
            variant: "outline",
            className: "w-full h-12 border-dashed border-2 border-orange-300 text-orange-600 hover:border-orange-400",
            children: [jsxRuntimeExports.jsx(Plus, {
                className: "w-4 h-4 mr-2"
            }), "Add Certification"]
        }), s.length === 0 && jsxRuntimeExports.jsxs("div", {
            className: "text-center py-8 text-gray-500",
            children: [jsxRuntimeExports.jsx(Award, {
                className: "w-12 h-12 mx-auto mb-4 text-gray-300"
            }), jsxRuntimeExports.jsx("p", {
                className: "text-lg font-medium mb-2",
                children: "No certifications added yet"
            }), jsxRuntimeExports.jsx("p", {
                className: "text-sm",
                children: 'Click "Add Certification" to showcase your professional credentials'
            })]
        })]
    })
}
  , EnhancedLanguagesSection = ({data: s, onUpdate: e}) => {
    const i = () => `lang_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      , o = () => {
        const h = {
            id: i(),
            language: "",
            proficiency: ""
        };
        e([...s, h])
    }
      , a = (h, g, b) => {
        const _ = s.map($ => $.id === h ? {
            ...$,
            [g]: b
        } : $);
        e(_)
    }
      , c = h => {
        e(s.filter(g => g.id !== h))
    }
      , d = ["Native", "Fluent", "Advanced", "Intermediate", "Basic"];
    return jsxRuntimeExports.jsxs("div", {
        className: "space-y-6",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "text-sm text-gray-600 bg-indigo-50 p-4 rounded-lg border border-indigo-200",
            children: [jsxRuntimeExports.jsx("p", {
                className: "font-medium text-indigo-900 mb-2",
                children: "💡 Languages Tips"
            }), jsxRuntimeExports.jsxs("ul", {
                className: "space-y-1 text-indigo-800",
                children: [jsxRuntimeExports.jsx("li", {
                    children: "• Include languages relevant to your target role"
                }), jsxRuntimeExports.jsx("li", {
                    children: "• Be honest about your proficiency level"
                }), jsxRuntimeExports.jsx("li", {
                    children: "• Consider including programming languages in the Skills section instead"
                })]
            })]
        }), jsxRuntimeExports.jsx("div", {
            className: "space-y-4",
            children: s.map( (h, g) => jsxRuntimeExports.jsx(motion.div, {
                initial: {
                    opacity: 0,
                    y: 20
                },
                animate: {
                    opacity: 1,
                    y: 0
                },
                transition: {
                    delay: g * .1
                },
                children: jsxRuntimeExports.jsx(Card, {
                    className: "border border-gray-200 hover:border-indigo-300 transition-colors",
                    children: jsxRuntimeExports.jsxs(CardContent, {
                        className: "p-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between mb-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(Languages, {
                                    className: "w-4 h-4 text-indigo-600"
                                }), jsxRuntimeExports.jsxs("h3", {
                                    className: "font-medium",
                                    children: ["Language ", g + 1]
                                })]
                            }), jsxRuntimeExports.jsx(Button, {
                                variant: "ghost",
                                size: "sm",
                                onClick: () => c(h.id),
                                className: "text-red-600 hover:text-red-700",
                                children: jsxRuntimeExports.jsx(Trash2, {
                                    className: "w-4 h-4"
                                })
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    children: "Language *"
                                }), jsxRuntimeExports.jsx(Input, {
                                    placeholder: "Spanish",
                                    value: h.language,
                                    onChange: b => a(h.id, "language", b.target.value)
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    children: "Proficiency Level *"
                                }), jsxRuntimeExports.jsxs(Select, {
                                    value: h.proficiency,
                                    onValueChange: b => a(h.id, "proficiency", b),
                                    children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                        children: jsxRuntimeExports.jsx(SelectValue, {
                                            placeholder: "Select proficiency"
                                        })
                                    }), jsxRuntimeExports.jsx(SelectContent, {
                                        children: d.map(b => jsxRuntimeExports.jsx(SelectItem, {
                                            value: b,
                                            children: b
                                        }, b))
                                    })]
                                })]
                            })]
                        })]
                    })
                })
            }, h.id))
        }), jsxRuntimeExports.jsxs(Button, {
            onClick: o,
            variant: "outline",
            className: "w-full h-12 border-dashed border-2 border-indigo-300 text-indigo-600 hover:border-indigo-400",
            children: [jsxRuntimeExports.jsx(Plus, {
                className: "w-4 h-4 mr-2"
            }), "Add Language"]
        }), s.length === 0 && jsxRuntimeExports.jsxs("div", {
            className: "text-center py-8 text-gray-500",
            children: [jsxRuntimeExports.jsx(Languages, {
                className: "w-12 h-12 mx-auto mb-4 text-gray-300"
            }), jsxRuntimeExports.jsx("p", {
                className: "text-lg font-medium mb-2",
                children: "No languages added yet"
            }), jsxRuntimeExports.jsx("p", {
                className: "text-sm",
                children: 'Click "Add Language" to showcase your language skills'
            })]
        })]
    })
}
  , EnhancedVolunteerSection = ({data: s, onUpdate: e}) => {
    const i = () => `vol_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      , o = () => {
        const d = {
            id: i(),
            organization: "",
            role: "",
            startDate: "",
            endDate: "",
            description: ""
        };
        e([...s, d])
    }
      , a = (d, h, g) => {
        const b = s.map(_ => _.id === d ? {
            ..._,
            [h]: g
        } : _);
        e(b)
    }
      , c = d => {
        e(s.filter(h => h.id !== d))
    }
    ;
    return jsxRuntimeExports.jsxs("div", {
        className: "space-y-6",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "text-sm text-gray-600 bg-red-50 p-4 rounded-lg border border-red-200",
            children: [jsxRuntimeExports.jsx("p", {
                className: "font-medium text-red-900 mb-2",
                children: "💡 Volunteer Experience Tips"
            }), jsxRuntimeExports.jsxs("ul", {
                className: "space-y-1 text-red-800",
                children: [jsxRuntimeExports.jsx("li", {
                    children: "• Include volunteer work that demonstrates relevant skills"
                }), jsxRuntimeExports.jsx("li", {
                    children: "• Highlight leadership roles and impact made"
                }), jsxRuntimeExports.jsx("li", {
                    children: "• Show commitment to community and causes you care about"
                })]
            })]
        }), jsxRuntimeExports.jsx("div", {
            className: "space-y-4",
            children: s.map( (d, h) => jsxRuntimeExports.jsx(motion.div, {
                initial: {
                    opacity: 0,
                    y: 20
                },
                animate: {
                    opacity: 1,
                    y: 0
                },
                transition: {
                    delay: h * .1
                },
                children: jsxRuntimeExports.jsx(Card, {
                    className: "border border-gray-200 hover:border-red-300 transition-colors",
                    children: jsxRuntimeExports.jsxs(CardContent, {
                        className: "p-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between mb-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(Heart, {
                                    className: "w-4 h-4 text-red-600"
                                }), jsxRuntimeExports.jsxs("h3", {
                                    className: "font-medium",
                                    children: ["Volunteer Experience ", h + 1]
                                })]
                            }), jsxRuntimeExports.jsx(Button, {
                                variant: "ghost",
                                size: "sm",
                                onClick: () => c(d.id),
                                className: "text-red-600 hover:text-red-700",
                                children: jsxRuntimeExports.jsx(Trash2, {
                                    className: "w-4 h-4"
                                })
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "Organization *"
                                    }), jsxRuntimeExports.jsx(Input, {
                                        placeholder: "Local Food Bank",
                                        value: d.organization,
                                        onChange: g => a(d.id, "organization", g.target.value)
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "Role *"
                                    }), jsxRuntimeExports.jsx(Input, {
                                        placeholder: "Volunteer Coordinator",
                                        value: d.role,
                                        onChange: g => a(d.id, "role", g.target.value)
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "Start Date"
                                    }), jsxRuntimeExports.jsx(Input, {
                                        type: "month",
                                        value: d.startDate,
                                        onChange: g => a(d.id, "startDate", g.target.value)
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        children: "End Date"
                                    }), jsxRuntimeExports.jsx(Input, {
                                        type: "month",
                                        value: d.endDate,
                                        onChange: g => a(d.id, "endDate", g.target.value)
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    children: "Description"
                                }), jsxRuntimeExports.jsx(Textarea, {
                                    placeholder: "Describe your volunteer activities and impact...",
                                    value: d.description,
                                    onChange: g => a(d.id, "description", g.target.value),
                                    rows: 3
                                })]
                            })]
                        })]
                    })
                })
            }, d.id))
        }), jsxRuntimeExports.jsxs(Button, {
            onClick: o,
            variant: "outline",
            className: "w-full h-12 border-dashed border-2 border-red-300 text-red-600 hover:border-red-400",
            children: [jsxRuntimeExports.jsx(Plus, {
                className: "w-4 h-4 mr-2"
            }), "Add Volunteer Experience"]
        })]
    })
}
  , EnhancedAwardsSection = ({data: s, onUpdate: e}) => {
    const i = () => `award_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      , o = () => {
        const d = {
            id: i(),
            title: "",
            issuer: "",
            date: "",
            description: ""
        };
        e([...s, d])
    }
      , a = (d, h, g) => {
        const b = s.map(_ => _.id === d ? {
            ..._,
            [h]: g
        } : _);
        e(b)
    }
      , c = d => {
        e(s.filter(h => h.id !== d))
    }
    ;
    return jsxRuntimeExports.jsxs("div", {
        className: "space-y-6",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "text-sm text-gray-600 bg-amber-50 p-4 rounded-lg border border-amber-200",
            children: [jsxRuntimeExports.jsx("p", {
                className: "font-medium text-amber-900 mb-2",
                children: "🏆 Awards & Honors Tips"
            }), jsxRuntimeExports.jsxs("ul", {
                className: "space-y-1 text-amber-800",
                children: [jsxRuntimeExports.jsx("li", {
                    children: "• Include relevant awards that showcase your achievements"
                }), jsxRuntimeExports.jsx("li", {
                    children: "• Add academic honors, professional recognitions, or industry awards"
                }), jsxRuntimeExports.jsx("li", {
                    children: "• Provide context about the significance of the award"
                }), jsxRuntimeExports.jsx("li", {
                    children: "• List most recent or most prestigious awards first"
                })]
            })]
        }), jsxRuntimeExports.jsx("div", {
            className: "space-y-4",
            children: s.map( (d, h) => jsxRuntimeExports.jsx(motion.div, {
                initial: {
                    opacity: 0,
                    y: 20
                },
                animate: {
                    opacity: 1,
                    y: 0
                },
                transition: {
                    delay: h * .1
                },
                children: jsxRuntimeExports.jsx(Card, {
                    className: "border border-gray-200 hover:border-amber-300 transition-colors",
                    children: jsxRuntimeExports.jsxs(CardContent, {
                        className: "p-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between mb-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(Award, {
                                    className: "w-4 h-4 text-amber-600"
                                }), jsxRuntimeExports.jsxs("span", {
                                    className: "font-medium text-gray-900",
                                    children: ["Award ", h + 1]
                                })]
                            }), jsxRuntimeExports.jsx(Button, {
                                variant: "ghost",
                                size: "sm",
                                onClick: () => c(d.id),
                                className: "text-red-600 hover:text-red-700 hover:bg-red-50",
                                children: jsxRuntimeExports.jsx(Trash2, {
                                    className: "w-4 h-4"
                                })
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    htmlFor: `award-title-${d.id}`,
                                    children: "Award Title *"
                                }), jsxRuntimeExports.jsx(Input, {
                                    id: `award-title-${d.id}`,
                                    value: d.title,
                                    onChange: g => a(d.id, "title", g.target.value),
                                    placeholder: "e.g., Dean's List, Employee of the Year",
                                    className: "border-gray-300 focus:border-amber-500 focus:ring-amber-500"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    htmlFor: `award-issuer-${d.id}`,
                                    children: "Issuing Organization"
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "relative",
                                    children: [jsxRuntimeExports.jsx(Building, {
                                        className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                                    }), jsxRuntimeExports.jsx(Input, {
                                        id: `award-issuer-${d.id}`,
                                        value: d.issuer,
                                        onChange: g => a(d.id, "issuer", g.target.value),
                                        placeholder: "e.g., University, Company, Organization",
                                        className: "pl-10 border-gray-300 focus:border-amber-500 focus:ring-amber-500"
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    htmlFor: `award-date-${d.id}`,
                                    children: "Date Received"
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "relative",
                                    children: [jsxRuntimeExports.jsx(Calendar, {
                                        className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                                    }), jsxRuntimeExports.jsx(Input, {
                                        id: `award-date-${d.id}`,
                                        value: d.date,
                                        onChange: g => a(d.id, "date", g.target.value),
                                        placeholder: "e.g., May 2023, 2023",
                                        className: "pl-10 border-gray-300 focus:border-amber-500 focus:ring-amber-500"
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2 md:col-span-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    htmlFor: `award-description-${d.id}`,
                                    children: "Description (Optional)"
                                }), jsxRuntimeExports.jsx(Textarea, {
                                    id: `award-description-${d.id}`,
                                    value: d.description,
                                    onChange: g => a(d.id, "description", g.target.value),
                                    placeholder: "Brief description of the award and its significance...",
                                    rows: 2,
                                    className: "border-gray-300 focus:border-amber-500 focus:ring-amber-500 resize-none"
                                })]
                            })]
                        })]
                    })
                })
            }, d.id))
        }), jsxRuntimeExports.jsxs(Button, {
            onClick: o,
            variant: "outline",
            className: "w-full border-dashed border-2 border-amber-300 text-amber-700 hover:bg-amber-50 hover:border-amber-400",
            children: [jsxRuntimeExports.jsx(Plus, {
                className: "w-4 h-4 mr-2"
            }), "Add Award"]
        }), s.length === 0 && jsxRuntimeExports.jsxs("div", {
            className: "text-center py-8 text-gray-500",
            children: [jsxRuntimeExports.jsx(Award, {
                className: "w-12 h-12 mx-auto mb-4 text-gray-300"
            }), jsxRuntimeExports.jsx("p", {
                className: "text-lg font-medium mb-2",
                children: "No awards added yet"
            }), jsxRuntimeExports.jsx("p", {
                className: "text-sm",
                children: 'Click "Add Award" to showcase your achievements and recognitions'
            })]
        })]
    })
}
;
var TABS_NAME = "Tabs"
  , [createTabsContext,createTabsScope] = createContextScope$3(TABS_NAME, [createRovingFocusGroupScope])
  , useRovingFocusGroupScope = createRovingFocusGroupScope()
  , [TabsProvider,useTabsContext] = createTabsContext(TABS_NAME)
  , Tabs$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeTabs: i, value: o, onValueChange: a, defaultValue: c, orientation: d="horizontal", dir: h, activationMode: g="automatic", ...b} = s
      , _ = useDirection(h)
      , [$,_e] = useControllableState({
        prop: o,
        onChange: a,
        defaultProp: c
    });
    return jsxRuntimeExports.jsx(TabsProvider, {
        scope: i,
        baseId: useId$1(),
        value: $,
        onValueChange: _e,
        orientation: d,
        dir: _,
        activationMode: g,
        children: jsxRuntimeExports.jsx(Primitive$1.div, {
            dir: _,
            "data-orientation": d,
            ...b,
            ref: e
        })
    })
}
);
Tabs$1.displayName = TABS_NAME;
var TAB_LIST_NAME = "TabsList"
  , TabsList$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeTabs: i, loop: o=!0, ...a} = s
      , c = useTabsContext(TAB_LIST_NAME, i)
      , d = useRovingFocusGroupScope(i);
    return jsxRuntimeExports.jsx(Root$7, {
        asChild: !0,
        ...d,
        orientation: c.orientation,
        dir: c.dir,
        loop: o,
        children: jsxRuntimeExports.jsx(Primitive$1.div, {
            role: "tablist",
            "aria-orientation": c.orientation,
            ...a,
            ref: e
        })
    })
}
);
TabsList$1.displayName = TAB_LIST_NAME;
var TRIGGER_NAME = "TabsTrigger"
  , TabsTrigger$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeTabs: i, value: o, disabled: a=!1, ...c} = s
      , d = useTabsContext(TRIGGER_NAME, i)
      , h = useRovingFocusGroupScope(i)
      , g = makeTriggerId(d.baseId, o)
      , b = makeContentId(d.baseId, o)
      , _ = o === d.value;
    return jsxRuntimeExports.jsx(Item$1, {
        asChild: !0,
        ...h,
        focusable: !a,
        active: _,
        children: jsxRuntimeExports.jsx(Primitive$1.button, {
            type: "button",
            role: "tab",
            "aria-selected": _,
            "aria-controls": b,
            "data-state": _ ? "active" : "inactive",
            "data-disabled": a ? "" : void 0,
            disabled: a,
            id: g,
            ...c,
            ref: e,
            onMouseDown: composeEventHandlers(s.onMouseDown, $ => {
                !a && $.button === 0 && $.ctrlKey === !1 ? d.onValueChange(o) : $.preventDefault()
            }
            ),
            onKeyDown: composeEventHandlers(s.onKeyDown, $ => {
                [" ", "Enter"].includes($.key) && d.onValueChange(o)
            }
            ),
            onFocus: composeEventHandlers(s.onFocus, () => {
                const $ = d.activationMode !== "manual";
                !_ && !a && $ && d.onValueChange(o)
            }
            )
        })
    })
}
);
TabsTrigger$1.displayName = TRIGGER_NAME;
var CONTENT_NAME = "TabsContent"
  , TabsContent$1 = reactExports.forwardRef( (s, e) => {
    const {__scopeTabs: i, value: o, forceMount: a, children: c, ...d} = s
      , h = useTabsContext(CONTENT_NAME, i)
      , g = makeTriggerId(h.baseId, o)
      , b = makeContentId(h.baseId, o)
      , _ = o === h.value
      , $ = reactExports.useRef(_);
    return reactExports.useEffect( () => {
        const _e = requestAnimationFrame( () => $.current = !1);
        return () => cancelAnimationFrame(_e)
    }
    , []),
    jsxRuntimeExports.jsx(Presence, {
        present: a || _,
        children: ({present: _e}) => jsxRuntimeExports.jsx(Primitive$1.div, {
            "data-state": _ ? "active" : "inactive",
            "data-orientation": h.orientation,
            role: "tabpanel",
            "aria-labelledby": g,
            hidden: !_e,
            id: b,
            tabIndex: 0,
            ...d,
            ref: e,
            style: {
                ...s.style,
                animationDuration: $.current ? "0s" : void 0
            },
            children: _e && c
        })
    })
}
);
TabsContent$1.displayName = CONTENT_NAME;
function makeTriggerId(s, e) {
    return `${s}-trigger-${e}`
}
function makeContentId(s, e) {
    return `${s}-content-${e}`
}
var Root2 = Tabs$1
  , List = TabsList$1
  , Trigger = TabsTrigger$1
  , Content = TabsContent$1;
const Tabs = Root2
  , TabsList = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(List, {
    ref: i,
    className: cn("inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground", s),
    ...e
}));
TabsList.displayName = List.displayName;
const TabsTrigger = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Trigger, {
    ref: i,
    className: cn("inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm", s),
    ...e
}));
TabsTrigger.displayName = Trigger.displayName;
const TabsContent = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx(Content, {
    ref: i,
    className: cn("mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2", s),
    ...e
}));
TabsContent.displayName = Content.displayName;
const INDUSTRIES$1 = ["Technology", "Healthcare", "Finance", "Education", "Marketing", "Sales", "Engineering", "Design", "Operations", "Human Resources", "Legal", "Consulting", "Manufacturing", "Retail", "Real Estate", "Media", "Non-profit", "Government", "Other"]
  , EXPERIENCE_LEVELS = ["Entry Level", "Mid Level", "Senior Level", "Executive Level", "Intern"]
  , SmartContentSuggestions = ({onApplySuggestions: s, currentDescription: e}) => {
    const [i,o] = reactExports.useState("")
      , [a,c] = reactExports.useState("")
      , [d,h] = reactExports.useState("")
      , [g,b] = reactExports.useState(!1)
      , [_,$] = reactExports.useState(null)
      , [_e,tt] = reactExports.useState(new Set)
      , rt = async () => {
        if (!i || !a || !d) {
            Jt.error("Please fill in all required fields");
            return
        }
        b(!0);
        try {
            const st = await openaiService.generateContentSuggestions(i, a, d, e);
            $(st),
            Jt.success("AI suggestions generated successfully!")
        } catch (st) {
            console.error("Error generating suggestions:", st),
            Jt.error("Failed to generate suggestions. Please try again.")
        } finally {
            b(!1)
        }
    }
      , et = async (st, nt) => {
        try {
            await navigator.clipboard.writeText(st),
            tt(lt => new Set([...lt, nt])),
            Jt.success("Copied to clipboard!"),
            setTimeout( () => {
                tt(lt => {
                    const dt = new Set(lt);
                    return dt.delete(nt),
                    dt
                }
                )
            }
            , 2e3)
        } catch {
            Jt.error("Failed to copy to clipboard")
        }
    }
      , it = () => {
        _ && (s(_),
        Jt.success("Suggestions applied to your resume!"))
    }
    ;
    return jsxRuntimeExports.jsxs(Card, {
        className: "w-full",
        children: [jsxRuntimeExports.jsxs(CardHeader, {
            children: [jsxRuntimeExports.jsxs(CardTitle, {
                className: "flex items-center gap-2",
                children: [jsxRuntimeExports.jsx(Sparkles, {
                    className: "w-5 h-5 text-purple-600"
                }), "Smart Content Suggestions"]
            }), jsxRuntimeExports.jsx("p", {
                className: "text-sm text-muted-foreground",
                children: "Get AI-powered suggestions for bullet points, skills, and achievements based on your role"
            })]
        }), jsxRuntimeExports.jsxs(CardContent, {
            className: "space-y-6",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "grid grid-cols-1 md:grid-cols-3 gap-4",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "space-y-2",
                    children: [jsxRuntimeExports.jsx(Label, {
                        htmlFor: "jobTitle",
                        children: "Job Title *"
                    }), jsxRuntimeExports.jsx(Input, {
                        id: "jobTitle",
                        placeholder: "e.g., Software Engineer",
                        value: i,
                        onChange: st => o(st.target.value)
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-2",
                    children: [jsxRuntimeExports.jsx(Label, {
                        htmlFor: "industry",
                        children: "Industry *"
                    }), jsxRuntimeExports.jsxs(Select, {
                        value: a,
                        onValueChange: c,
                        children: [jsxRuntimeExports.jsx(SelectTrigger, {
                            children: jsxRuntimeExports.jsx(SelectValue, {
                                placeholder: "Select industry"
                            })
                        }), jsxRuntimeExports.jsx(SelectContent, {
                            children: INDUSTRIES$1.map(st => jsxRuntimeExports.jsx(SelectItem, {
                                value: st,
                                children: st
                            }, st))
                        })]
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-2",
                    children: [jsxRuntimeExports.jsx(Label, {
                        htmlFor: "experienceLevel",
                        children: "Experience Level *"
                    }), jsxRuntimeExports.jsxs(Select, {
                        value: d,
                        onValueChange: h,
                        children: [jsxRuntimeExports.jsx(SelectTrigger, {
                            children: jsxRuntimeExports.jsx(SelectValue, {
                                placeholder: "Select level"
                            })
                        }), jsxRuntimeExports.jsx(SelectContent, {
                            children: EXPERIENCE_LEVELS.map(st => jsxRuntimeExports.jsx(SelectItem, {
                                value: st,
                                children: st
                            }, st))
                        })]
                    })]
                })]
            }), e && jsxRuntimeExports.jsxs("div", {
                className: "space-y-2",
                children: [jsxRuntimeExports.jsx(Label, {
                    children: "Current Description (Optional)"
                }), jsxRuntimeExports.jsx(Textarea, {
                    value: e,
                    readOnly: !0,
                    className: "h-20 bg-muted",
                    placeholder: "Your current job description will be used for context"
                })]
            }), jsxRuntimeExports.jsx(Button, {
                onClick: rt,
                disabled: g || !i || !a || !d,
                className: "w-full",
                children: g ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [jsxRuntimeExports.jsx(LoaderCircle, {
                        className: "w-4 h-4 mr-2 animate-spin"
                    }), "Generating Suggestions..."]
                }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [jsxRuntimeExports.jsx(Sparkles, {
                        className: "w-4 h-4 mr-2"
                    }), "Generate AI Suggestions"]
                })
            }), _ && jsxRuntimeExports.jsxs("div", {
                className: "space-y-6",
                children: [jsxRuntimeExports.jsx(Separator, {}), jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between",
                    children: [jsxRuntimeExports.jsx("h3", {
                        className: "text-lg font-semibold",
                        children: "AI Generated Suggestions"
                    }), jsxRuntimeExports.jsxs(Button, {
                        onClick: it,
                        variant: "outline",
                        children: [jsxRuntimeExports.jsx(Plus, {
                            className: "w-4 h-4 mr-2"
                        }), "Apply All to Resume"]
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-3",
                    children: [jsxRuntimeExports.jsx("h4", {
                        className: "font-medium text-sm text-muted-foreground uppercase tracking-wide",
                        children: "Experience Bullet Points"
                    }), jsxRuntimeExports.jsx(ScrollArea, {
                        className: "h-48 w-full border rounded-md p-4",
                        children: jsxRuntimeExports.jsx("div", {
                            className: "space-y-2",
                            children: _.bulletPoints.map( (st, nt) => jsxRuntimeExports.jsxs("div", {
                                className: "flex items-start gap-2 p-2 hover:bg-muted rounded-md",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "flex-1 text-sm",
                                    children: st
                                }), jsxRuntimeExports.jsx(Button, {
                                    size: "sm",
                                    variant: "ghost",
                                    onClick: () => et(st, `bullet-${nt}`),
                                    className: "h-6 w-6 p-0",
                                    children: _e.has(`bullet-${nt}`) ? jsxRuntimeExports.jsx(Check, {
                                        className: "w-3 h-3 text-green-600"
                                    }) : jsxRuntimeExports.jsx(Copy, {
                                        className: "w-3 h-3"
                                    })
                                })]
                            }, nt))
                        })
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-3",
                    children: [jsxRuntimeExports.jsx("h4", {
                        className: "font-medium text-sm text-muted-foreground uppercase tracking-wide",
                        children: "Recommended Skills"
                    }), jsxRuntimeExports.jsx("div", {
                        className: "flex flex-wrap gap-2",
                        children: _.skills.map( (st, nt) => jsxRuntimeExports.jsxs(Badge, {
                            variant: "secondary",
                            className: "cursor-pointer hover:bg-primary hover:text-primary-foreground transition-colors",
                            onClick: () => et(st, `skill-${nt}`),
                            children: [st, _e.has(`skill-${nt}`) ? jsxRuntimeExports.jsx(Check, {
                                className: "w-3 h-3 ml-1 text-green-600"
                            }) : jsxRuntimeExports.jsx(Copy, {
                                className: "w-3 h-3 ml-1"
                            })]
                        }, nt))
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-3",
                    children: [jsxRuntimeExports.jsx("h4", {
                        className: "font-medium text-sm text-muted-foreground uppercase tracking-wide",
                        children: "Achievement Examples"
                    }), jsxRuntimeExports.jsx(ScrollArea, {
                        className: "h-32 w-full border rounded-md p-4",
                        children: jsxRuntimeExports.jsx("div", {
                            className: "space-y-2",
                            children: _.achievements.map( (st, nt) => jsxRuntimeExports.jsxs("div", {
                                className: "flex items-start gap-2 p-2 hover:bg-muted rounded-md",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "flex-1 text-sm",
                                    children: st
                                }), jsxRuntimeExports.jsx(Button, {
                                    size: "sm",
                                    variant: "ghost",
                                    onClick: () => et(st, `achievement-${nt}`),
                                    className: "h-6 w-6 p-0",
                                    children: _e.has(`achievement-${nt}`) ? jsxRuntimeExports.jsx(Check, {
                                        className: "w-3 h-3 text-green-600"
                                    }) : jsxRuntimeExports.jsx(Copy, {
                                        className: "w-3 h-3"
                                    })
                                })]
                            }, nt))
                        })
                    })]
                })]
            })]
        })]
    })
}
  , INDUSTRIES = ["Technology", "Healthcare", "Finance", "Education", "Marketing", "Sales", "Engineering", "Design", "Operations", "Human Resources", "Legal", "Consulting", "Manufacturing", "Retail", "Real Estate", "Media", "Non-profit", "Government", "Other"]
  , SkillGapAnalysis = ({resumeData: s, onAddSkills: e, onAddCertifications: i}) => {
    const [o,a] = reactExports.useState("")
      , [c,d] = reactExports.useState("")
      , [h,g] = reactExports.useState(!1)
      , [b,_] = reactExports.useState(null)
      , $ = async () => {
        var it, st;
        if (!o || !c) {
            Jt.error("Please fill in target job title and industry");
            return
        }
        if (!((it = s.personalInfo) != null && it.name) && !s.summary && ((st = s.experience) == null ? void 0 : st.length) === 0) {
            Jt.error("Please add some resume content before running skill gap analysis");
            return
        }
        g(!0);
        try {
            const nt = await openaiService.analyzeSkillGap(s, o, c);
            _(nt),
            Jt.success("Skill gap analysis completed!")
        } catch (nt) {
            console.error("Error running skill gap analysis:", nt),
            Jt.error("Failed to analyze skill gap. Please try again.")
        } finally {
            g(!1)
        }
    }
      , _e = it => {
        e(it),
        Jt.success(`Added ${it.length} skills to your resume!`)
    }
      , tt = it => {
        i(it),
        Jt.success(`Added ${it.length} certifications to your resume!`)
    }
      , rt = it => it >= 80 ? "text-green-600" : it >= 60 ? "text-yellow-600" : "text-red-600"
      , et = it => it >= 80 ? "bg-green-100" : it >= 60 ? "bg-yellow-100" : "bg-red-100";
    return jsxRuntimeExports.jsxs(Card, {
        className: "w-full",
        children: [jsxRuntimeExports.jsxs(CardHeader, {
            children: [jsxRuntimeExports.jsxs(CardTitle, {
                className: "flex items-center gap-2",
                children: [jsxRuntimeExports.jsx(Target, {
                    className: "w-5 h-5 text-blue-600"
                }), "Skill Gap Analysis"]
            }), jsxRuntimeExports.jsx("p", {
                className: "text-sm text-muted-foreground",
                children: "Analyze your resume against target roles and get personalized skill recommendations"
            })]
        }), jsxRuntimeExports.jsxs(CardContent, {
            className: "space-y-6",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "space-y-2",
                    children: [jsxRuntimeExports.jsx(Label, {
                        htmlFor: "targetJobTitle",
                        children: "Target Job Title *"
                    }), jsxRuntimeExports.jsx(Input, {
                        id: "targetJobTitle",
                        placeholder: "e.g., Senior Software Engineer",
                        value: o,
                        onChange: it => a(it.target.value)
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-2",
                    children: [jsxRuntimeExports.jsx(Label, {
                        htmlFor: "targetIndustry",
                        children: "Target Industry *"
                    }), jsxRuntimeExports.jsxs(Select, {
                        value: c,
                        onValueChange: d,
                        children: [jsxRuntimeExports.jsx(SelectTrigger, {
                            children: jsxRuntimeExports.jsx(SelectValue, {
                                placeholder: "Select industry"
                            })
                        }), jsxRuntimeExports.jsx(SelectContent, {
                            children: INDUSTRIES.map(it => jsxRuntimeExports.jsx(SelectItem, {
                                value: it,
                                children: it
                            }, it))
                        })]
                    })]
                })]
            }), jsxRuntimeExports.jsx(Button, {
                onClick: $,
                disabled: h || !o || !c,
                className: "w-full",
                children: h ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [jsxRuntimeExports.jsx(LoaderCircle, {
                        className: "w-4 h-4 mr-2 animate-spin"
                    }), "Analyzing Your Resume..."]
                }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [jsxRuntimeExports.jsx(Target, {
                        className: "w-4 h-4 mr-2"
                    }), "Run Skill Gap Analysis"]
                })
            }), b && jsxRuntimeExports.jsxs("div", {
                className: "space-y-6",
                children: [jsxRuntimeExports.jsx(Separator, {}), jsxRuntimeExports.jsxs("div", {
                    className: `p-4 rounded-lg ${et(b.overallScore)}`,
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-between mb-2",
                        children: [jsxRuntimeExports.jsx("h3", {
                            className: "text-lg font-semibold",
                            children: "Overall Readiness Score"
                        }), jsxRuntimeExports.jsxs("span", {
                            className: `text-2xl font-bold ${rt(b.overallScore)}`,
                            children: [b.overallScore, "%"]
                        })]
                    }), jsxRuntimeExports.jsx(Progress, {
                        value: b.overallScore,
                        className: "h-2"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-sm text-muted-foreground mt-2",
                        children: b.overallScore >= 80 ? "Excellent! You're well-prepared for this role." : b.overallScore >= 60 ? "Good foundation, but some areas need improvement." : "Significant skill gaps identified. Focus on key missing skills."
                    })]
                }), b.strengthAreas.length > 0 && jsxRuntimeExports.jsxs("div", {
                    className: "space-y-3",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(CircleCheck, {
                            className: "w-5 h-5 text-green-600"
                        }), jsxRuntimeExports.jsx("h4", {
                            className: "font-medium",
                            children: "Your Strengths"
                        })]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "flex flex-wrap gap-2",
                        children: b.strengthAreas.map( (it, st) => jsxRuntimeExports.jsx(Badge, {
                            variant: "default",
                            className: "bg-green-100 text-green-800",
                            children: it
                        }, st))
                    })]
                }), b.missingSkills.length > 0 && jsxRuntimeExports.jsxs("div", {
                    className: "space-y-3",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-between",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(TriangleAlert, {
                                className: "w-5 h-5 text-red-600"
                            }), jsxRuntimeExports.jsx("h4", {
                                className: "font-medium",
                                children: "Missing Skills"
                            })]
                        }), jsxRuntimeExports.jsxs(Button, {
                            size: "sm",
                            variant: "outline",
                            onClick: () => _e(b.missingSkills),
                            children: [jsxRuntimeExports.jsx(Plus, {
                                className: "w-4 h-4 mr-1"
                            }), "Add to Resume"]
                        })]
                    }), jsxRuntimeExports.jsx(Alert, {
                        children: jsxRuntimeExports.jsxs(AlertDescription, {
                            children: ["These skills are commonly required for ", o, " roles but are missing from your resume."]
                        })
                    }), jsxRuntimeExports.jsx("div", {
                        className: "flex flex-wrap gap-2",
                        children: b.missingSkills.map( (it, st) => jsxRuntimeExports.jsx(Badge, {
                            variant: "destructive",
                            className: "bg-red-100 text-red-800",
                            children: it
                        }, st))
                    })]
                }), b.recommendedCertifications.length > 0 && jsxRuntimeExports.jsxs("div", {
                    className: "space-y-3",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-between",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(Award, {
                                className: "w-5 h-5 text-blue-600"
                            }), jsxRuntimeExports.jsx("h4", {
                                className: "font-medium",
                                children: "Recommended Certifications"
                            })]
                        }), jsxRuntimeExports.jsxs(Button, {
                            size: "sm",
                            variant: "outline",
                            onClick: () => tt(b.recommendedCertifications),
                            children: [jsxRuntimeExports.jsx(Plus, {
                                className: "w-4 h-4 mr-1"
                            }), "Add to Resume"]
                        })]
                    }), jsxRuntimeExports.jsx(Alert, {
                        children: jsxRuntimeExports.jsxs(AlertDescription, {
                            children: ["These certifications would strengthen your profile for ", o, " positions."]
                        })
                    }), jsxRuntimeExports.jsx(ScrollArea, {
                        className: "h-32 w-full",
                        children: jsxRuntimeExports.jsx("div", {
                            className: "space-y-2",
                            children: b.recommendedCertifications.map( (it, st) => jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-between p-2 border rounded-md",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "text-sm",
                                    children: it
                                }), jsxRuntimeExports.jsx(Button, {
                                    size: "sm",
                                    variant: "ghost",
                                    className: "h-6 w-6 p-0",
                                    children: jsxRuntimeExports.jsx(ExternalLink, {
                                        className: "w-3 h-3"
                                    })
                                })]
                            }, st))
                        })
                    })]
                }), b.improvementAreas.length > 0 && jsxRuntimeExports.jsxs("div", {
                    className: "space-y-3",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(TrendingUp, {
                            className: "w-5 h-5 text-orange-600"
                        }), jsxRuntimeExports.jsx("h4", {
                            className: "font-medium",
                            children: "Areas for Improvement"
                        })]
                    }), jsxRuntimeExports.jsx(Alert, {
                        children: jsxRuntimeExports.jsxs(AlertDescription, {
                            children: ["Focus on these areas to better align with ", o, " requirements."]
                        })
                    }), jsxRuntimeExports.jsx("div", {
                        className: "space-y-2",
                        children: b.improvementAreas.map( (it, st) => jsxRuntimeExports.jsx("div", {
                            className: "p-3 bg-orange-50 border border-orange-200 rounded-md",
                            children: jsxRuntimeExports.jsx("p", {
                                className: "text-sm text-orange-800",
                                children: it
                            })
                        }, st))
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "p-4 bg-blue-50 border border-blue-200 rounded-lg",
                    children: [jsxRuntimeExports.jsx("h4", {
                        className: "font-medium text-blue-900 mb-2",
                        children: "Next Steps"
                    }), jsxRuntimeExports.jsxs("ul", {
                        className: "text-sm text-blue-800 space-y-1",
                        children: [jsxRuntimeExports.jsx("li", {
                            children: "• Focus on acquiring the missing skills identified above"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "• Consider pursuing recommended certifications"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "• Update your resume to highlight your strength areas"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "• Practice explaining how your experience relates to the target role"
                        })]
                    })]
                })]
            })]
        })]
    })
}
  , JobDescriptionMatcher = ({resumeData: s, onApplyChanges: e}) => {
    const [i,o] = reactExports.useState("")
      , [a,c] = reactExports.useState(!1)
      , [d,h] = reactExports.useState(null)
      , [g,b] = reactExports.useState(new Set)
      , [_,$] = reactExports.useState(new Set)
      , _e = async () => {
        var ot;
        if (!i.trim()) {
            Jt.error("Please paste a job description");
            return
        }
        if (!((ot = s.personalInfo) != null && ot.name) && !s.summary && (!s.experience || s.experience.length === 0)) {
            Jt.error("Please add some resume content before analyzing job match");
            return
        }
        c(!0);
        try {
            const at = await openaiService.matchJobDescription(s, i);
            h(at),
            $(new Set),
            Jt.success("Job matching analysis completed!")
        } catch (at) {
            console.error("Error analyzing job match:", at),
            Jt.error("Failed to analyze job match. Please check your internet connection and try again.")
        } finally {
            c(!1)
        }
    }
      , tt = async (ot, at) => {
        try {
            await navigator.clipboard.writeText(ot),
            b(ht => new Set([...ht, at])),
            Jt.success("Copied to clipboard!"),
            setTimeout( () => {
                b(ht => {
                    const pt = new Set(ht);
                    return pt.delete(at),
                    pt
                }
                )
            }
            , 2e3)
        } catch {
            Jt.error("Failed to copy to clipboard")
        }
    }
      , rt = () => {
        d && (e(d.suggestedChanges),
        $(new Set(["all"])),
        Jt.success("All suggested changes applied to your resume!"))
    }
      , et = (ot, at) => {
        if (!d)
            return;
        const ht = {};
        switch (ot) {
        case "summary":
            ht.summary = d.suggestedChanges.summary;
            break;
        case "skills":
            ht.skillsToAdd = d.suggestedChanges.skillsToAdd,
            ht.skillsToEmphasize = d.suggestedChanges.skillsToEmphasize;
            break;
        case "experience":
            ht.experienceUpdates = d.suggestedChanges.experienceUpdates;
            break
        }
        e(ht),
        $(pt => new Set([...pt, ot])),
        Jt.success(`${ot.charAt(0).toUpperCase() + ot.slice(1)} suggestions applied!`)
    }
      , it = ot => ot >= 80 ? "text-green-600" : ot >= 60 ? "text-yellow-600" : "text-red-600"
      , st = ot => ot >= 80 ? "bg-green-100 border-green-200" : ot >= 60 ? "bg-yellow-100 border-yellow-200" : "bg-red-100 border-red-200"
      , nt = ot => ot >= 90 ? "Excellent match! Your resume is perfectly aligned with this job." : ot >= 80 ? "Great match! Your resume aligns well with this job." : ot >= 70 ? "Good match with some room for improvement." : ot >= 60 ? "Moderate match. Consider implementing the suggestions below." : "Significant optimization needed to match this job requirements."
      , lt = () => {
        h(null),
        $(new Set),
        b(new Set)
    }
      , dt = () => {
        o(`
Software Engineer - Frontend Development

We are seeking a talented Frontend Software Engineer to join our dynamic team. The ideal candidate will have strong experience in modern web development technologies and a passion for creating exceptional user experiences.

Key Responsibilities:
• Develop and maintain responsive web applications using React.js and TypeScript
• Collaborate with cross-functional teams including designers, product managers, and backend engineers
• Implement modern frontend architectures and design patterns
• Write clean, maintainable, and well-tested code
• Participate in code reviews and contribute to team best practices
• Optimize applications for maximum speed and scalability
• Work with RESTful APIs and GraphQL
• Implement CI/CD pipelines and automated testing

Required Qualifications:
• Bachelor's degree in Computer Science or related field
• 3+ years of experience in frontend development
• Proficiency in React.js, TypeScript, and modern JavaScript (ES6+)
• Experience with state management libraries (Redux, Zustand)
• Strong understanding of HTML5, CSS3, and responsive design
• Experience with version control systems (Git)
• Knowledge of testing frameworks (Jest, React Testing Library)
• Familiarity with build tools (Webpack, Vite)

Preferred Qualifications:
• Experience with Next.js or other React frameworks
• Knowledge of cloud platforms (AWS, Azure, GCP)
• Experience with Docker and containerization
• Understanding of Agile/Scrum methodologies
• Experience with design systems and component libraries
• Knowledge of accessibility standards (WCAG)
• Experience with performance optimization techniques

What We Offer:
• Competitive salary and equity package
• Comprehensive health, dental, and vision insurance
• Flexible work arrangements and remote work options
• Professional development opportunities
• Modern tech stack and cutting-edge projects
• Collaborative and inclusive work environment
`),
        Jt.success("Demo job description loaded! Click 'Analyze Job Match' to see how it works.")
    }
    ;
    return jsxRuntimeExports.jsxs(Card, {
        className: "w-full",
        children: [jsxRuntimeExports.jsxs(CardHeader, {
            children: [jsxRuntimeExports.jsxs(CardTitle, {
                className: "flex items-center gap-2",
                children: [jsxRuntimeExports.jsx(FileSearch, {
                    className: "w-5 h-5 text-green-600"
                }), "Job Description Matcher"]
            }), jsxRuntimeExports.jsx("p", {
                className: "text-sm text-muted-foreground",
                children: "Paste a job description to get tailored resume optimization suggestions with AI-powered analysis"
            }), jsxRuntimeExports.jsx("div", {
                className: "bg-blue-50 border border-blue-200 rounded-lg p-4",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex items-start gap-3",
                    children: [jsxRuntimeExports.jsx(Lightbulb, {
                        className: "w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0"
                    }), jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("h4", {
                            className: "font-medium text-blue-900 mb-2",
                            children: "How to get the best results:"
                        }), jsxRuntimeExports.jsxs("ul", {
                            className: "text-sm text-blue-800 space-y-1",
                            children: [jsxRuntimeExports.jsx("li", {
                                children: "• Include the complete job posting with requirements, responsibilities, and qualifications"
                            }), jsxRuntimeExports.jsx("li", {
                                children: "• Make sure your resume has some content (summary, experience, skills) before analyzing"
                            }), jsxRuntimeExports.jsx("li", {
                                children: "• The AI will identify missing keywords and suggest specific improvements"
                            }), jsxRuntimeExports.jsx("li", {
                                children: "• You can apply suggestions individually or all at once to your resume"
                            })]
                        })]
                    })]
                })
            })]
        }), jsxRuntimeExports.jsxs(CardContent, {
            className: "space-y-6",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "space-y-2",
                children: [jsxRuntimeExports.jsx(Label, {
                    htmlFor: "jobDescription",
                    children: "Job Description *"
                }), jsxRuntimeExports.jsx(Textarea, {
                    id: "jobDescription",
                    placeholder: "Paste the complete job description here including requirements, responsibilities, qualifications, and preferred skills...",
                    value: i,
                    onChange: ot => o(ot.target.value),
                    className: "min-h-[200px] resize-y"
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between",
                    children: [jsxRuntimeExports.jsxs("p", {
                        className: "text-xs text-muted-foreground",
                        children: ["Include the full job posting for best results (", i.length, " characters)"]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex gap-2",
                        children: [!i && jsxRuntimeExports.jsx(Button, {
                            variant: "ghost",
                            size: "sm",
                            onClick: dt,
                            className: "text-xs",
                            children: "Try Demo"
                        }), i && jsxRuntimeExports.jsx(Button, {
                            variant: "ghost",
                            size: "sm",
                            onClick: () => o(""),
                            className: "text-xs",
                            children: "Clear"
                        })]
                    })]
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex gap-2",
                children: [jsxRuntimeExports.jsx(Button, {
                    onClick: _e,
                    disabled: a || !i.trim(),
                    className: "flex-1",
                    children: a ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [jsxRuntimeExports.jsx(LoaderCircle, {
                            className: "w-4 h-4 mr-2 animate-spin"
                        }), "Analyzing Job Match..."]
                    }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [jsxRuntimeExports.jsx(Sparkles, {
                            className: "w-4 h-4 mr-2"
                        }), "Analyze Job Match"]
                    })
                }), d && jsxRuntimeExports.jsx(Button, {
                    variant: "outline",
                    onClick: lt,
                    className: "px-3",
                    children: jsxRuntimeExports.jsx(RefreshCw, {
                        className: "w-4 h-4"
                    })
                })]
            }), d && jsxRuntimeExports.jsxs("div", {
                className: "space-y-6",
                children: [jsxRuntimeExports.jsx(Separator, {}), jsxRuntimeExports.jsxs("div", {
                    className: `p-6 rounded-lg border ${st(d.matchingScore)}`,
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-between mb-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("h3", {
                                className: "text-lg font-semibold mb-1",
                                children: "Job Match Score"
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-sm text-muted-foreground",
                                children: "Based on skills, experience, and keyword alignment"
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "text-center",
                            children: [jsxRuntimeExports.jsxs("span", {
                                className: `text-3xl font-bold ${it(d.matchingScore)}`,
                                children: [d.matchingScore, "%"]
                            }), jsxRuntimeExports.jsx("div", {
                                className: "text-xs text-muted-foreground mt-1",
                                children: "Match Score"
                            })]
                        })]
                    }), jsxRuntimeExports.jsx(Progress, {
                        value: d.matchingScore,
                        className: "h-3 mb-3"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-sm font-medium",
                        children: nt(d.matchingScore)
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex flex-wrap gap-2",
                    children: [jsxRuntimeExports.jsx(Button, {
                        onClick: rt,
                        className: "bg-green-600 hover:bg-green-700",
                        disabled: _.has("all"),
                        children: _.has("all") ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [jsxRuntimeExports.jsx(Check, {
                                className: "w-4 h-4 mr-2"
                            }), "All Applied"]
                        }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [jsxRuntimeExports.jsx(Download, {
                                className: "w-4 h-4 mr-2"
                            }), "Apply All Suggestions"]
                        })
                    }), jsxRuntimeExports.jsx(Button, {
                        variant: "outline",
                        onClick: () => et("summary"),
                        disabled: _.has("summary"),
                        children: _.has("summary") ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [jsxRuntimeExports.jsx(Check, {
                                className: "w-4 h-4 mr-2"
                            }), "Summary Applied"]
                        }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [jsxRuntimeExports.jsx(Target, {
                                className: "w-4 h-4 mr-2"
                            }), "Apply Summary"]
                        })
                    }), jsxRuntimeExports.jsx(Button, {
                        variant: "outline",
                        onClick: () => et("skills"),
                        disabled: _.has("skills"),
                        children: _.has("skills") ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [jsxRuntimeExports.jsx(Check, {
                                className: "w-4 h-4 mr-2"
                            }), "Skills Applied"]
                        }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [jsxRuntimeExports.jsx(Plus, {
                                className: "w-4 h-4 mr-2"
                            }), "Apply Skills"]
                        })
                    })]
                }), jsxRuntimeExports.jsxs(Tabs, {
                    defaultValue: "overview",
                    className: "w-full",
                    children: [jsxRuntimeExports.jsxs(TabsList, {
                        className: "grid w-full grid-cols-5",
                        children: [jsxRuntimeExports.jsx(TabsTrigger, {
                            value: "overview",
                            children: "Overview"
                        }), jsxRuntimeExports.jsx(TabsTrigger, {
                            value: "keywords",
                            children: "Keywords"
                        }), jsxRuntimeExports.jsx(TabsTrigger, {
                            value: "summary",
                            children: "Summary"
                        }), jsxRuntimeExports.jsx(TabsTrigger, {
                            value: "experience",
                            children: "Experience"
                        }), jsxRuntimeExports.jsx(TabsTrigger, {
                            value: "skills",
                            children: "Skills"
                        })]
                    }), jsxRuntimeExports.jsxs(TabsContent, {
                        value: "overview",
                        className: "space-y-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                            children: [jsxRuntimeExports.jsxs(Card, {
                                children: [jsxRuntimeExports.jsx(CardHeader, {
                                    className: "pb-3",
                                    children: jsxRuntimeExports.jsxs(CardTitle, {
                                        className: "text-sm flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(CircleCheck, {
                                            className: "w-4 h-4 text-green-600"
                                        }), "Matching Keywords (", d.keywordMatches.length, ")"]
                                    })
                                }), jsxRuntimeExports.jsx(CardContent, {
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex flex-wrap gap-1",
                                        children: [d.keywordMatches.slice(0, 8).map( (ot, at) => jsxRuntimeExports.jsx(Badge, {
                                            variant: "default",
                                            className: "bg-green-100 text-green-800 text-xs",
                                            children: ot
                                        }, at)), d.keywordMatches.length > 8 && jsxRuntimeExports.jsxs(Badge, {
                                            variant: "outline",
                                            className: "text-xs",
                                            children: ["+", d.keywordMatches.length - 8, " more"]
                                        })]
                                    })
                                })]
                            }), jsxRuntimeExports.jsxs(Card, {
                                children: [jsxRuntimeExports.jsx(CardHeader, {
                                    className: "pb-3",
                                    children: jsxRuntimeExports.jsxs(CardTitle, {
                                        className: "text-sm flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(TriangleAlert, {
                                            className: "w-4 h-4 text-red-600"
                                        }), "Missing Keywords (", d.missingKeywords.length, ")"]
                                    })
                                }), jsxRuntimeExports.jsx(CardContent, {
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex flex-wrap gap-1",
                                        children: [d.missingKeywords.slice(0, 8).map( (ot, at) => jsxRuntimeExports.jsxs(Badge, {
                                            variant: "destructive",
                                            className: "bg-red-100 text-red-800 text-xs cursor-pointer hover:bg-red-200",
                                            onClick: () => tt(ot, `missing-${at}`),
                                            children: [ot, g.has(`missing-${at}`) ? jsxRuntimeExports.jsx(Check, {
                                                className: "w-3 h-3 ml-1"
                                            }) : jsxRuntimeExports.jsx(Copy, {
                                                className: "w-3 h-3 ml-1"
                                            })]
                                        }, at)), d.missingKeywords.length > 8 && jsxRuntimeExports.jsxs(Badge, {
                                            variant: "outline",
                                            className: "text-xs",
                                            children: ["+", d.missingKeywords.length - 8, " more"]
                                        })]
                                    })
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs(Card, {
                            children: [jsxRuntimeExports.jsx(CardHeader, {
                                children: jsxRuntimeExports.jsxs(CardTitle, {
                                    className: "text-sm flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(TrendingUp, {
                                        className: "w-4 h-4 text-blue-600"
                                    }), "Key Improvement Areas"]
                                })
                            }), jsxRuntimeExports.jsx(CardContent, {
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-3",
                                    children: [d.missingKeywords.length > 0 && jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-start gap-3",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-2 h-2 bg-red-500 rounded-full mt-2"
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("p", {
                                                className: "font-medium text-sm",
                                                children: "Add Missing Keywords"
                                            }), jsxRuntimeExports.jsxs("p", {
                                                className: "text-xs text-muted-foreground",
                                                children: ["Incorporate ", d.missingKeywords.length, " important keywords throughout your resume"]
                                            })]
                                        })]
                                    }), d.suggestedChanges.skillsToAdd.length > 0 && jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-start gap-3",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-2 h-2 bg-yellow-500 rounded-full mt-2"
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("p", {
                                                className: "font-medium text-sm",
                                                children: "Enhance Skills Section"
                                            }), jsxRuntimeExports.jsxs("p", {
                                                className: "text-xs text-muted-foreground",
                                                children: ["Add ", d.suggestedChanges.skillsToAdd.length, " relevant skills to strengthen your profile"]
                                            })]
                                        })]
                                    }), d.suggestedChanges.experienceUpdates.length > 0 && jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-start gap-3",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-2 h-2 bg-blue-500 rounded-full mt-2"
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("p", {
                                                className: "font-medium text-sm",
                                                children: "Optimize Experience Descriptions"
                                            }), jsxRuntimeExports.jsxs("p", {
                                                className: "text-xs text-muted-foreground",
                                                children: ["Update ", d.suggestedChanges.experienceUpdates.length, " experience entries with job-specific language"]
                                            })]
                                        })]
                                    })]
                                })
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs(TabsContent, {
                        value: "keywords",
                        className: "space-y-4",
                        children: [d.keywordMatches.length > 0 && jsxRuntimeExports.jsxs("div", {
                            className: "space-y-3",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(CircleCheck, {
                                    className: "w-5 h-5 text-green-600"
                                }), jsxRuntimeExports.jsxs("h4", {
                                    className: "font-medium",
                                    children: ["Keywords You Already Have (", d.keywordMatches.length, ")"]
                                })]
                            }), jsxRuntimeExports.jsx("div", {
                                className: "flex flex-wrap gap-2",
                                children: d.keywordMatches.map( (ot, at) => jsxRuntimeExports.jsx(Badge, {
                                    variant: "default",
                                    className: "bg-green-100 text-green-800",
                                    children: ot
                                }, at))
                            })]
                        }), d.missingKeywords.length > 0 && jsxRuntimeExports.jsxs("div", {
                            className: "space-y-3",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(TriangleAlert, {
                                    className: "w-5 h-5 text-red-600"
                                }), jsxRuntimeExports.jsxs("h4", {
                                    className: "font-medium",
                                    children: ["Missing Important Keywords (", d.missingKeywords.length, ")"]
                                })]
                            }), jsxRuntimeExports.jsx(Alert, {
                                children: jsxRuntimeExports.jsx(AlertDescription, {
                                    children: "These keywords appear frequently in the job description but are missing from your resume. Click to copy and add them strategically."
                                })
                            }), jsxRuntimeExports.jsx("div", {
                                className: "flex flex-wrap gap-2",
                                children: d.missingKeywords.map( (ot, at) => jsxRuntimeExports.jsxs(Badge, {
                                    variant: "destructive",
                                    className: "bg-red-100 text-red-800 cursor-pointer hover:bg-red-200 transition-colors",
                                    onClick: () => tt(ot, `missing-${at}`),
                                    children: [ot, g.has(`missing-${at}`) ? jsxRuntimeExports.jsx(Check, {
                                        className: "w-3 h-3 ml-1"
                                    }) : jsxRuntimeExports.jsx(Copy, {
                                        className: "w-3 h-3 ml-1"
                                    })]
                                }, at))
                            })]
                        })]
                    }), jsxRuntimeExports.jsx(TabsContent, {
                        value: "summary",
                        className: "space-y-4",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "space-y-3",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-between",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(Lightbulb, {
                                        className: "w-5 h-5 text-blue-600"
                                    }), jsxRuntimeExports.jsx("h4", {
                                        className: "font-medium",
                                        children: "Optimized Professional Summary"
                                    })]
                                }), jsxRuntimeExports.jsx(Button, {
                                    size: "sm",
                                    onClick: () => et("summary"),
                                    disabled: _.has("summary"),
                                    children: _.has("summary") ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                        children: [jsxRuntimeExports.jsx(Check, {
                                            className: "w-4 h-4 mr-2"
                                        }), "Applied"]
                                    }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                        children: [jsxRuntimeExports.jsx(ArrowRight, {
                                            className: "w-4 h-4 mr-2"
                                        }), "Apply to Resume"]
                                    })
                                })]
                            }), jsxRuntimeExports.jsx(Alert, {
                                children: jsxRuntimeExports.jsx(AlertDescription, {
                                    children: "This AI-generated summary is tailored to match the job requirements and highlight your most relevant qualifications."
                                })
                            }), jsxRuntimeExports.jsx("div", {
                                className: "p-4 bg-blue-50 border border-blue-200 rounded-lg",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-start justify-between gap-2",
                                    children: [jsxRuntimeExports.jsx("p", {
                                        className: "text-sm text-blue-900 flex-1 leading-relaxed",
                                        children: d.suggestedChanges.summary
                                    }), jsxRuntimeExports.jsx(Button, {
                                        size: "sm",
                                        variant: "ghost",
                                        onClick: () => tt(d.suggestedChanges.summary, "summary"),
                                        className: "h-6 w-6 p-0 flex-shrink-0",
                                        children: g.has("summary") ? jsxRuntimeExports.jsx(Check, {
                                            className: "w-3 h-3 text-green-600"
                                        }) : jsxRuntimeExports.jsx(Copy, {
                                            className: "w-3 h-3"
                                        })
                                    })]
                                })
                            })]
                        })
                    }), jsxRuntimeExports.jsx(TabsContent, {
                        value: "experience",
                        className: "space-y-4",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "space-y-3",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-between",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(TrendingUp, {
                                        className: "w-5 h-5 text-purple-600"
                                    }), jsxRuntimeExports.jsxs("h4", {
                                        className: "font-medium",
                                        children: ["Experience Optimization (", d.suggestedChanges.experienceUpdates.length, ")"]
                                    })]
                                }), jsxRuntimeExports.jsx(Button, {
                                    size: "sm",
                                    onClick: () => et("experience"),
                                    disabled: _.has("experience"),
                                    children: _.has("experience") ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                        children: [jsxRuntimeExports.jsx(Check, {
                                            className: "w-4 h-4 mr-2"
                                        }), "Applied"]
                                    }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                        children: [jsxRuntimeExports.jsx(ArrowRight, {
                                            className: "w-4 h-4 mr-2"
                                        }), "Apply All"]
                                    })
                                })]
                            }), jsxRuntimeExports.jsx(Alert, {
                                children: jsxRuntimeExports.jsx(AlertDescription, {
                                    children: "Updated descriptions and achievements tailored to the job requirements with relevant keywords and quantifiable results."
                                })
                            }), jsxRuntimeExports.jsx(ScrollArea, {
                                className: "h-64 w-full",
                                children: jsxRuntimeExports.jsx("div", {
                                    className: "space-y-4",
                                    children: d.suggestedChanges.experienceUpdates.map( (ot, at) => jsxRuntimeExports.jsxs("div", {
                                        className: "p-4 border rounded-lg space-y-3",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center justify-between",
                                            children: [jsxRuntimeExports.jsxs("h5", {
                                                className: "font-medium text-sm",
                                                children: ["Experience #", at + 1]
                                            }), jsxRuntimeExports.jsx(Button, {
                                                size: "sm",
                                                variant: "ghost",
                                                onClick: () => tt(ot.suggestedDescription, `exp-${at}`),
                                                className: "h-6 w-6 p-0",
                                                children: g.has(`exp-${at}`) ? jsxRuntimeExports.jsx(Check, {
                                                    className: "w-3 h-3 text-green-600"
                                                }) : jsxRuntimeExports.jsx(Copy, {
                                                    className: "w-3 h-3"
                                                })
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "space-y-2",
                                            children: [jsxRuntimeExports.jsxs("div", {
                                                children: [jsxRuntimeExports.jsx("p", {
                                                    className: "text-xs font-medium text-gray-600 mb-1",
                                                    children: "Suggested Description:"
                                                }), jsxRuntimeExports.jsx("p", {
                                                    className: "text-sm bg-purple-50 p-3 rounded border border-purple-200",
                                                    children: ot.suggestedDescription
                                                })]
                                            }), ot.suggestedAchievements.length > 0 && jsxRuntimeExports.jsxs("div", {
                                                children: [jsxRuntimeExports.jsx("p", {
                                                    className: "text-xs font-medium text-gray-600 mb-1",
                                                    children: "Additional Achievements:"
                                                }), jsxRuntimeExports.jsx("ul", {
                                                    className: "space-y-1",
                                                    children: ot.suggestedAchievements.map( (ht, pt) => jsxRuntimeExports.jsxs("li", {
                                                        className: "text-sm bg-purple-50 p-2 rounded border border-purple-200 flex items-start gap-2",
                                                        children: [jsxRuntimeExports.jsx("span", {
                                                            className: "text-purple-600 mt-0.5",
                                                            children: "•"
                                                        }), jsxRuntimeExports.jsx("span", {
                                                            className: "flex-1",
                                                            children: ht
                                                        }), jsxRuntimeExports.jsx(Button, {
                                                            size: "sm",
                                                            variant: "ghost",
                                                            onClick: () => tt(ht, `ach-${at}-${pt}`),
                                                            className: "h-5 w-5 p-0 flex-shrink-0",
                                                            children: g.has(`ach-${at}-${pt}`) ? jsxRuntimeExports.jsx(Check, {
                                                                className: "w-3 h-3 text-green-600"
                                                            }) : jsxRuntimeExports.jsx(Copy, {
                                                                className: "w-3 h-3"
                                                            })
                                                        })]
                                                    }, pt))
                                                })]
                                            })]
                                        })]
                                    }, at))
                                })
                            })]
                        })
                    }), jsxRuntimeExports.jsx(TabsContent, {
                        value: "skills",
                        className: "space-y-4",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "space-y-4",
                            children: [d.suggestedChanges.skillsToAdd.length > 0 && jsxRuntimeExports.jsxs("div", {
                                className: "space-y-3",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(Plus, {
                                            className: "w-5 h-5 text-green-600"
                                        }), jsxRuntimeExports.jsxs("h4", {
                                            className: "font-medium",
                                            children: ["Skills to Add (", d.suggestedChanges.skillsToAdd.length, ")"]
                                        })]
                                    }), jsxRuntimeExports.jsx(Button, {
                                        size: "sm",
                                        onClick: () => et("skills"),
                                        disabled: _.has("skills"),
                                        children: _.has("skills") ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                            children: [jsxRuntimeExports.jsx(Check, {
                                                className: "w-4 h-4 mr-2"
                                            }), "Applied"]
                                        }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                            children: [jsxRuntimeExports.jsx(ArrowRight, {
                                                className: "w-4 h-4 mr-2"
                                            }), "Add All Skills"]
                                        })
                                    })]
                                }), jsxRuntimeExports.jsx(Alert, {
                                    children: jsxRuntimeExports.jsx(AlertDescription, {
                                        children: "These skills are mentioned in the job description and would strengthen your application."
                                    })
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "flex flex-wrap gap-2",
                                    children: d.suggestedChanges.skillsToAdd.map( (ot, at) => jsxRuntimeExports.jsxs(Badge, {
                                        variant: "outline",
                                        className: "border-green-300 text-green-700 cursor-pointer hover:bg-green-50 transition-colors",
                                        onClick: () => tt(ot, `add-skill-${at}`),
                                        children: [ot, g.has(`add-skill-${at}`) ? jsxRuntimeExports.jsx(Check, {
                                            className: "w-3 h-3 ml-1"
                                        }) : jsxRuntimeExports.jsx(Copy, {
                                            className: "w-3 h-3 ml-1"
                                        })]
                                    }, at))
                                })]
                            }), d.suggestedChanges.skillsToEmphasize.length > 0 && jsxRuntimeExports.jsxs("div", {
                                className: "space-y-3",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(TrendingUp, {
                                        className: "w-5 h-5 text-blue-600"
                                    }), jsxRuntimeExports.jsxs("h4", {
                                        className: "font-medium",
                                        children: ["Skills to Emphasize (", d.suggestedChanges.skillsToEmphasize.length, ")"]
                                    })]
                                }), jsxRuntimeExports.jsx(Alert, {
                                    children: jsxRuntimeExports.jsx(AlertDescription, {
                                        children: "These skills from your resume should be highlighted more prominently as they match the job requirements."
                                    })
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "flex flex-wrap gap-2",
                                    children: d.suggestedChanges.skillsToEmphasize.map( (ot, at) => jsxRuntimeExports.jsxs(Badge, {
                                        variant: "outline",
                                        className: "border-blue-300 text-blue-700 cursor-pointer hover:bg-blue-50 transition-colors",
                                        onClick: () => tt(ot, `emphasize-skill-${at}`),
                                        children: [ot, g.has(`emphasize-skill-${at}`) ? jsxRuntimeExports.jsx(Check, {
                                            className: "w-3 h-3 ml-1"
                                        }) : jsxRuntimeExports.jsx(Copy, {
                                            className: "w-3 h-3 ml-1"
                                        })]
                                    }, at))
                                })]
                            })]
                        })
                    })]
                })]
            })]
        })]
    })
}
  , AIDashboard = ({resumeData: s, onUpdateResumeData: e}) => {
    const [i,o] = reactExports.useState("suggestions")
      , a = b => {
        const _ = s.skills || {
            technical: [],
            soft: [],
            languages: [],
            frameworks: []
        }
          , $ = [..._.technical]
          , _e = [..._.soft];
        if (b.skills.forEach(tt => {
            const rt = tt.toLowerCase();
            rt.includes("programming") || rt.includes("development") || rt.includes("javascript") || rt.includes("python") || rt.includes("react") || rt.includes("node") || rt.includes("sql") || rt.includes("database") || rt.includes("api") || rt.includes("framework") ? $.includes(tt) || $.push(tt) : _e.includes(tt) || _e.push(tt)
        }
        ),
        e("skills", {
            ..._,
            technical: $,
            soft: _e
        }),
        s.experience && s.experience.length > 0) {
            const tt = [...s.experience]
              , rt = tt[0]
              , et = [...rt.achievements || []];
            b.bulletPoints.forEach(it => {
                et.includes(it) || et.push(it)
            }
            ),
            tt[0] = {
                ...rt,
                achievements: et
            },
            e("experience", tt)
        }
    }
      , c = b => {
        const _ = s.skills || {
            technical: [],
            soft: [],
            languages: [],
            frameworks: []
        }
          , $ = [..._.technical];
        b.forEach(_e => {
            $.includes(_e) || $.push(_e)
        }
        ),
        e("skills", {
            ..._,
            technical: $
        })
    }
      , d = b => {
        const $ = [...s.certifications || []];
        b.forEach(_e => {
            $.some(rt => rt.name === _e) || $.push({
                id: `cert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                name: _e,
                issuer: "To be specified",
                date: new Date().getFullYear().toString(),
                expiryDate: "",
                credentialId: "",
                link: ""
            })
        }
        ),
        e("certifications", $)
    }
      , h = b => {
        var _e, tt, rt;
        let _ = 0;
        if (b.summary && (e("summary", b.summary),
        _++),
        b.experienceUpdates && b.experienceUpdates.length > 0) {
            const et = [...s.experience || []];
            b.experienceUpdates.forEach( (it, st) => {
                if (et[st]) {
                    const nt = et[st].description || ""
                      , lt = it.suggestedDescription;
                    et[st] = {
                        ...et[st],
                        description: lt.length > nt.length ? lt : nt,
                        achievements: [...et[st].achievements || [], ...it.suggestedAchievements.filter(dt => !(et[st].achievements || []).includes(dt))]
                    },
                    _++
                }
            }
            ),
            e("experience", et)
        }
        if (b.skillsToAdd && b.skillsToAdd.length > 0) {
            const it = {
                ...s.skills || {
                    technical: [],
                    soft: [],
                    languages: [],
                    frameworks: []
                }
            };
            b.skillsToAdd.forEach(st => {
                const nt = st.toLowerCase();
                nt.includes("javascript") || nt.includes("python") || nt.includes("java") || nt.includes("c++") || nt.includes("sql") || nt.includes("html") || nt.includes("css") || nt.includes("git") ? it.technical.includes(st) || it.technical.push(st) : nt.includes("react") || nt.includes("angular") || nt.includes("vue") || nt.includes("node") || nt.includes("express") || nt.includes("django") || nt.includes("spring") || nt.includes("laravel") ? it.frameworks.includes(st) || it.frameworks.push(st) : nt.includes("leadership") || nt.includes("communication") || nt.includes("teamwork") || nt.includes("problem") || nt.includes("management") || nt.includes("collaboration") ? it.soft.includes(st) || it.soft.push(st) : it.technical.includes(st) || it.technical.push(st)
            }
            ),
            e("skills", it),
            _ += b.skillsToAdd.length
        }
        if (b.skillsToEmphasize && b.skillsToEmphasize.length > 0) {
            const it = {
                ...s.skills || {
                    technical: [],
                    soft: [],
                    languages: [],
                    frameworks: []
                }
            };
            b.skillsToEmphasize.forEach(st => {
                Object.keys(it).forEach(nt => {
                    const lt = it[nt].indexOf(st);
                    lt > 0 && (it[nt].splice(lt, 1),
                    it[nt].unshift(st))
                }
                )
            }
            ),
            e("skills", it)
        }
        const $ = [];
        b.summary && $.push("Professional summary updated"),
        ((_e = b.experienceUpdates) == null ? void 0 : _e.length) > 0 && $.push(`${b.experienceUpdates.length} experience entries enhanced`),
        ((tt = b.skillsToAdd) == null ? void 0 : tt.length) > 0 && $.push(`${b.skillsToAdd.length} new skills added`),
        ((rt = b.skillsToEmphasize) == null ? void 0 : rt.length) > 0 && $.push(`${b.skillsToEmphasize.length} skills emphasized`),
        $.length > 0 && Jt.success(`Applied changes: ${$.join(", ")}`)
    }
      , g = () => {
        if (s.experience && s.experience.length > 0)
            return s.experience[0].description
    }
    ;
    return jsxRuntimeExports.jsxs(Card, {
        className: "w-full",
        children: [jsxRuntimeExports.jsxs(CardHeader, {
            children: [jsxRuntimeExports.jsxs(CardTitle, {
                className: "flex items-center gap-2",
                children: [jsxRuntimeExports.jsx(Zap, {
                    className: "w-6 h-6 text-purple-600"
                }), "AI-Powered Resume Enhancement"]
            }), jsxRuntimeExports.jsx("p", {
                className: "text-sm text-muted-foreground",
                children: "Use artificial intelligence to optimize your resume with smart suggestions, skill analysis, and job matching"
            })]
        }), jsxRuntimeExports.jsx(CardContent, {
            children: jsxRuntimeExports.jsxs(Tabs, {
                value: i,
                onValueChange: o,
                className: "w-full",
                children: [jsxRuntimeExports.jsxs(TabsList, {
                    className: "grid w-full grid-cols-3",
                    children: [jsxRuntimeExports.jsxs(TabsTrigger, {
                        value: "suggestions",
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Sparkles, {
                            className: "w-4 h-4"
                        }), "Smart Suggestions"]
                    }), jsxRuntimeExports.jsxs(TabsTrigger, {
                        value: "analysis",
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Target, {
                            className: "w-4 h-4"
                        }), "Skill Analysis"]
                    }), jsxRuntimeExports.jsxs(TabsTrigger, {
                        value: "matching",
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(FileSearch, {
                            className: "w-4 h-4"
                        }), "Job Matching"]
                    })]
                }), jsxRuntimeExports.jsx(TabsContent, {
                    value: "suggestions",
                    className: "mt-6",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "space-y-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2 mb-4",
                            children: [jsxRuntimeExports.jsx(Badge, {
                                variant: "secondary",
                                className: "bg-purple-100 text-purple-800",
                                children: "AI Content Generation"
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-sm text-muted-foreground",
                                children: "Get personalized content suggestions based on your role and industry"
                            })]
                        }), jsxRuntimeExports.jsx(SmartContentSuggestions, {
                            onApplySuggestions: a,
                            currentDescription: g()
                        })]
                    })
                }), jsxRuntimeExports.jsx(TabsContent, {
                    value: "analysis",
                    className: "mt-6",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "space-y-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2 mb-4",
                            children: [jsxRuntimeExports.jsx(Badge, {
                                variant: "secondary",
                                className: "bg-blue-100 text-blue-800",
                                children: "Career Analysis"
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-sm text-muted-foreground",
                                children: "Identify skill gaps and get recommendations for your target role"
                            })]
                        }), jsxRuntimeExports.jsx(SkillGapAnalysis, {
                            resumeData: s,
                            onAddSkills: c,
                            onAddCertifications: d
                        })]
                    })
                }), jsxRuntimeExports.jsx(TabsContent, {
                    value: "matching",
                    className: "mt-6",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "space-y-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2 mb-4",
                            children: [jsxRuntimeExports.jsx(Badge, {
                                variant: "secondary",
                                className: "bg-green-100 text-green-800",
                                children: "Job Optimization"
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-sm text-muted-foreground",
                                children: "Tailor your resume to specific job descriptions for better ATS compatibility"
                            })]
                        }), jsxRuntimeExports.jsx(JobDescriptionMatcher, {
                            resumeData: s,
                            onApplyChanges: h
                        })]
                    })
                })]
            })
        })]
    })
}
;
class CoverLetterService {
    constructor() {
        tr(this, "baseUrl");
        this.baseUrl = `${getConfig().supabase.url}/functions/v1/openai-proxy`
    }
    async makeRequest(e, i=.7) {
        try {
            const {data: {session: o}} = await supabase.auth.getSession();
            if (!(o != null && o.access_token))
                throw new Error("Authentication required. Please sign in to generate cover letters.");
            const a = await fetch(this.baseUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${o.access_token}`
                },
                body: JSON.stringify({
                    model: "gpt-3.5-turbo",
                    messages: e,
                    temperature: i,
                    max_tokens: 1500
                })
            });
            if (!a.ok) {
                const d = await a.json();
                throw new Error(d.error || `HTTP error! status: ${a.status}`)
            }
            const c = await a.json();
            if (!c.choices || !c.choices[0] || !c.choices[0].message)
                throw new Error("Invalid response format from OpenAI API");
            return c.choices[0].message.content
        } catch (o) {
            throw console.error("Error making OpenAI request:", o),
            o
        }
    }
    extractResumeText(e) {
        if (!e)
            return "No resume data available.";
        let i = "";
        if (e.personalInfo) {
            const {name: o, email: a, phone: c, location: d, linkedin: h, github: g} = e.personalInfo;
            o && (i += `Name: ${o}
`),
            a && (i += `Email: ${a}
`),
            c && (i += `Phone: ${c}
`),
            d && (i += `Location: ${d}
`),
            h && (i += `LinkedIn: ${h}
`),
            g && (i += `GitHub: ${g}
`),
            i && (i += `
`)
        }
        if (e.summary && e.summary.trim() && (i += `PROFESSIONAL SUMMARY:
${e.summary.trim()}

`),
        e.experience && Array.isArray(e.experience) && e.experience.length > 0 && (i += `WORK EXPERIENCE:
`,
        e.experience.forEach(o => {
            o.jobTitle && o.company && (i += `${o.jobTitle} at ${o.company}`,
            o.startDate && (i += ` (${o.startDate} - ${o.current ? "Present" : o.endDate || "Present"})`),
            i += `
`,
            o.location && (i += `Location: ${o.location}
`),
            o.description && o.description.trim() && (i += `Description: ${o.description.trim()}
`),
            o.achievements && Array.isArray(o.achievements) && o.achievements.length > 0 && (i += `Key Achievements:
`,
            o.achievements.forEach(a => {
                a && a.trim() && (i += `• ${a.trim()}
`)
            }
            )),
            i += `
`)
        }
        )),
        e.education && Array.isArray(e.education) && e.education.length > 0 && (i += `EDUCATION:
`,
        e.education.forEach(o => {
            o.degree && o.school && (i += `${o.degree} from ${o.school}`,
            o.startDate && o.endDate && (i += ` (${o.startDate} - ${o.endDate})`),
            i += `
`,
            o.gpa && (i += `GPA: ${o.gpa}
`),
            o.honors && o.honors.trim() && (i += `Honors: ${o.honors.trim()}
`),
            o.coursework && Array.isArray(o.coursework) && o.coursework.length > 0 && (i += `Relevant Coursework: ${o.coursework.join(", ")}
`),
            i += `
`)
        }
        )),
        e.skills) {
            const o = [];
            e.skills.technical && Array.isArray(e.skills.technical) && e.skills.technical.length > 0 && o.push(`Technical Skills: ${e.skills.technical.join(", ")}`),
            e.skills.soft && Array.isArray(e.skills.soft) && e.skills.soft.length > 0 && o.push(`Soft Skills: ${e.skills.soft.join(", ")}`),
            e.skills.frameworks && Array.isArray(e.skills.frameworks) && e.skills.frameworks.length > 0 && o.push(`Frameworks & Tools: ${e.skills.frameworks.join(", ")}`),
            e.skills.languages && Array.isArray(e.skills.languages) && e.skills.languages.length > 0 && o.push(`Programming Languages: ${e.skills.languages.join(", ")}`),
            o.length > 0 && (i += `SKILLS:
`,
            o.forEach(a => {
                i += `${a}
`
            }
            ),
            i += `
`)
        }
        return e.projects && Array.isArray(e.projects) && e.projects.length > 0 && (i += `PROJECTS:
`,
        e.projects.forEach(o => {
            o.name && (i += `${o.name}`,
            o.description && o.description.trim() && (i += `: ${o.description.trim()}`),
            i += `
`,
            o.technologies && Array.isArray(o.technologies) && o.technologies.length > 0 && (i += `Technologies: ${o.technologies.join(", ")}
`),
            o.link && (i += `Link: ${o.link}
`),
            o.github && (i += `GitHub: ${o.github}
`),
            i += `
`)
        }
        )),
        e.certifications && Array.isArray(e.certifications) && e.certifications.length > 0 && (i += `CERTIFICATIONS:
`,
        e.certifications.forEach(o => {
            o.name && (i += `${o.name}`,
            o.issuer && (i += ` - ${o.issuer}`),
            o.date && (i += ` (${o.date})`),
            i += `
`)
        }
        ),
        i += `
`),
        i.trim() || "Resume data is incomplete. Please ensure your resume has basic information filled out."
    }
    async generateCoverLetter(e) {
        const i = this.extractResumeText(e)
          , {tone: o="professional"} = e
          , a = {
            professional: "formal, business-appropriate language with a confident tone",
            enthusiastic: "energetic and passionate while maintaining professionalism",
            conversational: "friendly and approachable while remaining professional"
        };
        if (!e.jobDescription || e.jobDescription.trim().length < 50)
            throw new Error("Job description is too short. Please provide a more detailed job description.");
        const c = `You are an expert cover letter writer with 10+ years of experience helping job seekers land interviews at top companies. Create a compelling, personalized cover letter that will make the candidate stand out.

CANDIDATE'S RESUME DATA:
${i}

JOB DESCRIPTION:
${e.jobDescription.trim()}

${e.companyName ? `COMPANY NAME: ${e.companyName}` : ""}
${e.jobTitle ? `POSITION TITLE: ${e.jobTitle}` : ""}

REQUIREMENTS:
- Tone: ${a[o]}
- Use specific examples from the resume that directly match job requirements
- Incorporate relevant keywords from the job description naturally (don't force them)
- Show genuine enthusiasm for the company and role
- Highlight quantifiable achievements when possible
- Address the hiring manager's potential concerns
- End with a confident call to action
- Make it ATS-friendly
- Ensure the letter flows naturally and tells a compelling story

STRUCTURE:
1. Opening paragraph: Strong hook + position interest
2. Body paragraph(s): Relevant experience + specific achievements + job requirement matches + key points
3. Closing paragraph: Company interest + next steps + professional call to action

IMPORTANT: 
- Do NOT use generic phrases like "I am writing to express my interest"
- Do NOT repeat information verbatim from the resume
- DO connect resume experiences to job requirements
- DO show personality while remaining professional
- DO research-backed enthusiasm for the company/role

Please provide your response in this exact JSON format (ensure valid JSON):
{
  "success": true,
  "letter": "The complete cover letter text here...",
  "error": null
}`
          , d = [{
            role: "system",
            content: "You are an expert cover letter writer with extensive experience in creating compelling, personalized cover letters that get results. You understand ATS optimization, modern hiring practices, and what hiring managers look for. Always respond with valid JSON format."
        }, {
            role: "user",
            content: c
        }];
        try {
            const h = await this.makeRequest(d, .8);
            try {
                const g = h.trim();
                let b = g;
                g.startsWith("```json") ? b = g.replace(/^```json\s*/, "").replace(/\s*```$/, "") : g.startsWith("```") && (b = g.replace(/^```\s*/, "").replace(/\s*```$/, ""));
                const _ = JSON.parse(b);
                if (!_.success || typeof _.success != "boolean")
                    throw new Error("Invalid success status in response");
                if (!_.letter || typeof _.letter != "string")
                    throw new Error("Invalid cover letter content in response");
                return _
            } catch (g) {
                if (console.error("Failed to parse cover letter response:", g),
                console.error("Raw response:", h),
                h && h.trim())
                    return {
                        success: !0,
                        letter: h.trim(),
                        error: null
                    };
                throw new Error("Failed to generate cover letter. Please try again with a more detailed job description.")
            }
        } catch (h) {
            return console.error("Failed to generate cover letter:", h),
            {
                success: !1,
                error: h.message || "Failed to generate cover letter. Please try again."
            }
        }
    }
    async improveCoverLetter(e, i, o, a) {
        if (!e || !e.trim())
            throw new Error("No cover letter provided for improvement");
        if (!i || i.trim().length < 10)
            throw new Error("Please provide a more detailed improvement request (at least 10 characters)");
        const c = this.extractResumeText(o)
          , d = `You are an expert cover letter editor with extensive experience in refining cover letters. Please improve the following cover letter based on the specific request while maintaining its professional quality and structure.

CURRENT COVER LETTER:
${e.trim()}

IMPROVEMENT REQUEST:
${i.trim()}

RESUME DATA (for reference):
${c}

JOB DESCRIPTION (for reference):
${a.trim()}

INSTRUCTIONS:
- Address the specific improvement request while maintaining the overall quality
- Keep the same general structure and length unless specifically requested to change
- Ensure the improved version flows naturally
- Maintain professional tone unless specifically asked to change it
- Keep all factual information accurate
- Do not add false information or experiences
- Ensure the letter remains ATS-friendly

Please provide ONLY the improved cover letter text (no JSON, no explanations, just the cover letter):`
          , h = [{
            role: "system",
            content: "You are an expert cover letter editor who specializes in refining and improving cover letters based on specific feedback. Always provide only the improved cover letter text without any additional formatting or explanations."
        }, {
            role: "user",
            content: d
        }];
        try {
            const g = await this.makeRequest(h, .7);
            if (!g || g.trim().length < 100)
                throw new Error("Failed to generate improved cover letter. Please try again with a different improvement request.");
            return g.trim()
        } catch (g) {
            throw console.error("Failed to generate improved cover letter:", g),
            new Error("Failed to generate improved cover letter. Please try again with a different improvement request.")
        }
    }
}
const coverLetterService = new CoverLetterService
  , CoverLetterGenerator = ({resumeData: s, onClose: e}) => {
    const [i,o] = reactExports.useState("")
      , [a,c] = reactExports.useState("")
      , [d,h] = reactExports.useState("")
      , [g,b] = reactExports.useState([""])
      , [_,$] = reactExports.useState("professional")
      , [_e,tt] = reactExports.useState("medium")
      , [rt,et] = reactExports.useState(!1)
      , [it,st] = reactExports.useState(null)
      , [nt,lt] = reactExports.useState("")
      , [dt,ot] = reactExports.useState(!1)
      , [at,ht] = reactExports.useState("generate")
      , pt = () => {
        b([...g, ""])
    }
      , gt = vt => {
        g.length > 1 && b(g.filter( (bt, Tt) => Tt !== vt))
    }
      , wt = (vt, bt) => {
        const Tt = [...g];
        Tt[vt] = bt,
        b(Tt)
    }
      , yt = vt => {
        var Nt, jt;
        const Tt = ((Nt = vt.split(`
`)[0]) == null ? void 0 : Nt.toLowerCase()) || "";
        if (Tt.includes("position:") || Tt.includes("role:") || Tt.includes("job title:")) {
            const xt = ((jt = Tt.split(":")[1]) == null ? void 0 : jt.trim()) || "";
            h(xt)
        }
        const Yt = vt.match(/(?:at|@|company:)\s*([A-Z][a-zA-Z\s&.,]+?)(?:\n|,|\.|\s-)/i);
        Yt && c(Yt[1].trim())
    }
      , Rt = vt => {
        o(vt),
        vt && (!a || !d) && yt(vt)
    }
      , Mt = () => i.trim().length >= 50
      , ss = async () => {
        var vt, bt;
        if (!i.trim()) {
            Jt.error("Please enter a job description");
            return
        }
        if (i.trim().length < 50) {
            Jt.error("Please provide a more detailed job description (at least 50 characters)");
            return
        }
        if (!((vt = s == null ? void 0 : s.personalInfo) != null && vt.name) || !((bt = s == null ? void 0 : s.personalInfo) != null && bt.email)) {
            Jt.error("Please complete your personal information in the resume first");
            return
        }
        et(!0);
        try {
            const Tt = g.filter(jt => jt.trim())
              , Yt = {
                resumeData: s,
                jobDescription: i.trim(),
                keyPoints: Tt.length > 0 ? Tt : ["Highlight relevant experience and skills"],
                companyName: (a == null ? void 0 : a.trim()) || void 0,
                positionTitle: (d == null ? void 0 : d.trim()) || void 0,
                userPreferences: {
                    tone: _,
                    length: _e
                }
            };
            console.log("Generating cover letter with request:", Yt);
            const Nt = await coverLetterService.generateCoverLetter(Yt);
            console.log("Cover letter generated successfully:", Nt),
            st(Nt),
            Jt.success("Cover letter generated successfully!"),
            ht("preview")
        } catch (Tt) {
            console.error("Error generating cover letter:", Tt);
            let Yt = "Failed to generate cover letter. Please try again.";
            Tt.message && (Tt.message.includes("API key") ? Yt = "OpenAI API key is not configured. Please contact support." : Tt.message.includes("rate limit") ? Yt = "API rate limit exceeded. Please wait a moment and try again." : (Tt.message.includes("too short"),
            Yt = Tt.message)),
            Jt.error(Yt)
        } finally {
            et(!1)
        }
    }
      , zt = async () => {
        if (!it) {
            Jt.error("No cover letter to improve");
            return
        }
        if (!nt.trim()) {
            Jt.error("Please enter an improvement request");
            return
        }
        if (nt.trim().length < 10) {
            Jt.error("Please provide a more detailed improvement request");
            return
        }
        ot(!0);
        try {
            console.log("Improving cover letter with request:", nt);
            const vt = await coverLetterService.improveCoverLetter(it.coverLetter, nt.trim(), s, i);
            st({
                ...it,
                coverLetter: vt
            }),
            lt(""),
            Jt.success("Cover letter improved successfully!")
        } catch (vt) {
            console.error("Error improving cover letter:", vt);
            let bt = "Failed to improve cover letter. Please try again.";
            vt.message && (bt = vt.message),
            Jt.error(bt)
        } finally {
            ot(!1)
        }
    }
      , At = async vt => {
        try {
            await navigator.clipboard.writeText(vt),
            Jt.success("Copied to clipboard!")
        } catch {
            Jt.error("Failed to copy to clipboard")
        }
    }
      , kt = () => {
        if (!it)
            return;
        const vt = document.createElement("a")
          , bt = new Blob([it.coverLetter],{
            type: "text/plain"
        });
        vt.href = URL.createObjectURL(bt),
        vt.download = `cover-letter-${a || "job"}-${Date.now()}.txt`,
        document.body.appendChild(vt),
        vt.click(),
        document.body.removeChild(vt),
        Jt.success("Cover letter downloaded!")
    }
    ;
    return jsxRuntimeExports.jsx(TooltipProvider, {
        children: jsxRuntimeExports.jsxs("div", {
            className: "h-full flex flex-col",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "flex items-center justify-between p-6 border-b",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-3",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "p-2 bg-purple-100 rounded-lg",
                        children: jsxRuntimeExports.jsx(FileText, {
                            className: "h-5 w-5 text-purple-600"
                        })
                    }), jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("h2", {
                            className: "text-xl font-semibold",
                            children: "Cover Letter Generator"
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-sm text-muted-foreground",
                            children: "Create personalized cover letters using your resume data"
                        })]
                    })]
                }), e && jsxRuntimeExports.jsx(Button, {
                    variant: "ghost",
                    size: "sm",
                    onClick: e,
                    children: jsxRuntimeExports.jsx(X, {
                        className: "h-4 w-4"
                    })
                })]
            }), jsxRuntimeExports.jsx("div", {
                className: "flex-1 overflow-hidden",
                children: jsxRuntimeExports.jsxs(Tabs, {
                    defaultValue: "generate",
                    className: "h-full flex flex-col",
                    value: at,
                    onValueChange: ht,
                    children: [jsxRuntimeExports.jsxs(TabsList, {
                        className: "mx-6 mt-4 grid w-full grid-cols-2",
                        children: [jsxRuntimeExports.jsxs(TabsTrigger, {
                            value: "generate",
                            className: "flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(WandSparkles, {
                                className: "h-4 w-4"
                            }), "Generate"]
                        }), jsxRuntimeExports.jsxs(TabsTrigger, {
                            value: "preview",
                            className: "flex items-center gap-2",
                            disabled: !it,
                            children: [jsxRuntimeExports.jsx(FileText, {
                                className: "h-4 w-4"
                            }), "Preview"]
                        })]
                    }), jsxRuntimeExports.jsx(TabsContent, {
                        value: "generate",
                        className: "flex-1 overflow-hidden",
                        children: jsxRuntimeExports.jsx(ScrollArea, {
                            className: "h-full",
                            children: jsxRuntimeExports.jsxs("div", {
                                className: "space-y-6 px-6 pb-6",
                                children: [jsxRuntimeExports.jsxs(Card, {
                                    children: [jsxRuntimeExports.jsx(CardHeader, {
                                        children: jsxRuntimeExports.jsxs(CardTitle, {
                                            className: "flex items-center gap-2",
                                            children: [jsxRuntimeExports.jsx(Target, {
                                                className: "h-4 w-4"
                                            }), "Job Information"]
                                        })
                                    }), jsxRuntimeExports.jsxs(CardContent, {
                                        className: "space-y-4",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                            children: [jsxRuntimeExports.jsxs("div", {
                                                children: [jsxRuntimeExports.jsx(Label, {
                                                    htmlFor: "company",
                                                    children: "Company Name"
                                                }), jsxRuntimeExports.jsx(Input, {
                                                    id: "company",
                                                    value: a,
                                                    onChange: vt => c(vt.target.value),
                                                    placeholder: "e.g., Google, Microsoft"
                                                })]
                                            }), jsxRuntimeExports.jsxs("div", {
                                                children: [jsxRuntimeExports.jsx(Label, {
                                                    htmlFor: "position",
                                                    children: "Position Title"
                                                }), jsxRuntimeExports.jsx(Input, {
                                                    id: "position",
                                                    value: d,
                                                    onChange: vt => h(vt.target.value),
                                                    placeholder: "e.g., Software Engineer, Product Manager"
                                                })]
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsxs(Label, {
                                                htmlFor: "jobDescription",
                                                className: "flex items-center justify-between",
                                                children: [jsxRuntimeExports.jsx("span", {
                                                    children: "Job Description *"
                                                }), jsxRuntimeExports.jsxs("span", {
                                                    className: `text-xs ${i.length < 50 ? "text-red-500" : "text-green-600"}`,
                                                    children: [i.length, "/50 min"]
                                                })]
                                            }), jsxRuntimeExports.jsx(Textarea, {
                                                id: "jobDescription",
                                                value: i,
                                                onChange: vt => Rt(vt.target.value),
                                                placeholder: "Paste the complete job description here... Include responsibilities, requirements, qualifications, and company information for best results.",
                                                className: `min-h-[120px] resize-none ${i.length < 50 ? "border-red-300 focus:border-red-500" : ""}`
                                            }), jsxRuntimeExports.jsxs("div", {
                                                className: "flex justify-between items-center mt-1",
                                                children: [jsxRuntimeExports.jsx("p", {
                                                    className: "text-xs text-muted-foreground",
                                                    children: "Paste the full job posting to get the best results"
                                                }), i.length < 50 && i.length > 0 && jsxRuntimeExports.jsxs("p", {
                                                    className: "text-xs text-red-500",
                                                    children: ["Need ", 50 - i.length, " more characters"]
                                                })]
                                            })]
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs(Card, {
                                    children: [jsxRuntimeExports.jsxs(CardHeader, {
                                        children: [jsxRuntimeExports.jsxs(CardTitle, {
                                            className: "flex items-center gap-2",
                                            children: [jsxRuntimeExports.jsx(Lightbulb, {
                                                className: "h-4 w-4"
                                            }), "Key Points to Emphasize (Optional)"]
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-sm text-muted-foreground",
                                            children: 'Add specific points you want the AI to highlight in your cover letter. Examples: "Highlight my leadership experience", "Emphasize Python skills", "Mention startup experience". Leave empty for AI to choose automatically.'
                                        })]
                                    }), jsxRuntimeExports.jsxs(CardContent, {
                                        className: "space-y-3",
                                        children: [g.map( (vt, bt) => jsxRuntimeExports.jsxs("div", {
                                            className: "flex gap-2",
                                            children: [jsxRuntimeExports.jsx(Input, {
                                                value: vt,
                                                onChange: Tt => wt(bt, Tt.target.value),
                                                placeholder: bt === 0 ? "e.g., Highlight my 5+ years of React experience" : `Key point ${bt + 1}...`,
                                                className: "flex-1"
                                            }), g.length > 1 && jsxRuntimeExports.jsx(Button, {
                                                variant: "outline",
                                                size: "sm",
                                                onClick: () => gt(bt),
                                                children: jsxRuntimeExports.jsx(X, {
                                                    className: "h-4 w-4"
                                                })
                                            })]
                                        }, bt)), jsxRuntimeExports.jsxs(Button, {
                                            variant: "outline",
                                            size: "sm",
                                            onClick: pt,
                                            className: "w-full",
                                            disabled: g.length >= 5,
                                            children: [jsxRuntimeExports.jsx(Plus, {
                                                className: "h-4 w-4 mr-2"
                                            }), "Add Key Point ", g.length >= 5 && "(Max 5)"]
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs(Card, {
                                    children: [jsxRuntimeExports.jsx(CardHeader, {
                                        children: jsxRuntimeExports.jsx(CardTitle, {
                                            children: "Preferences"
                                        })
                                    }), jsxRuntimeExports.jsx(CardContent, {
                                        className: "space-y-4",
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                            children: [jsxRuntimeExports.jsxs("div", {
                                                children: [jsxRuntimeExports.jsx(Label, {
                                                    children: "Tone"
                                                }), jsxRuntimeExports.jsxs(Select, {
                                                    value: _,
                                                    onValueChange: vt => $(vt),
                                                    children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                                        children: jsxRuntimeExports.jsx(SelectValue, {})
                                                    }), jsxRuntimeExports.jsxs(SelectContent, {
                                                        children: [jsxRuntimeExports.jsx(SelectItem, {
                                                            value: "professional",
                                                            children: "Professional"
                                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                                            value: "enthusiastic",
                                                            children: "Enthusiastic"
                                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                                            value: "conversational",
                                                            children: "Conversational"
                                                        })]
                                                    })]
                                                })]
                                            }), jsxRuntimeExports.jsxs("div", {
                                                children: [jsxRuntimeExports.jsx(Label, {
                                                    children: "Length"
                                                }), jsxRuntimeExports.jsxs(Select, {
                                                    value: _e,
                                                    onValueChange: vt => tt(vt),
                                                    children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                                        children: jsxRuntimeExports.jsx(SelectValue, {})
                                                    }), jsxRuntimeExports.jsxs(SelectContent, {
                                                        children: [jsxRuntimeExports.jsx(SelectItem, {
                                                            value: "short",
                                                            children: "Short (2-3 paragraphs)"
                                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                                            value: "medium",
                                                            children: "Medium (3-4 paragraphs)"
                                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                                            value: "long",
                                                            children: "Long (4-5 paragraphs)"
                                                        })]
                                                    })]
                                                })]
                                            })]
                                        })
                                    })]
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "flex justify-center",
                                    children: jsxRuntimeExports.jsx(Button, {
                                        onClick: ss,
                                        disabled: !Mt() || rt,
                                        size: "lg",
                                        className: "min-w-[200px]",
                                        children: rt ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                            children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                                className: "h-4 w-4 mr-2 animate-spin"
                                            }), "Generating..."]
                                        }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                            children: [jsxRuntimeExports.jsx(Sparkles, {
                                                className: "h-4 w-4 mr-2"
                                            }), "Generate Cover Letter"]
                                        })
                                    })
                                })]
                            })
                        })
                    }), jsxRuntimeExports.jsx(TabsContent, {
                        value: "preview",
                        className: "flex-1 overflow-hidden",
                        children: it ? jsxRuntimeExports.jsxs("div", {
                            className: "h-full flex flex-col",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "p-6 border-b",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(CircleCheck, {
                                            className: "h-5 w-5 text-green-600"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "font-medium",
                                            children: "Cover Letter Generated"
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex gap-2",
                                        children: [jsxRuntimeExports.jsxs(Tooltip, {
                                            children: [jsxRuntimeExports.jsx(TooltipTrigger, {
                                                asChild: !0,
                                                children: jsxRuntimeExports.jsx(Button, {
                                                    variant: "outline",
                                                    size: "sm",
                                                    onClick: () => At(it.coverLetter),
                                                    children: jsxRuntimeExports.jsx(Copy, {
                                                        className: "h-4 w-4"
                                                    })
                                                })
                                            }), jsxRuntimeExports.jsx(TooltipContent, {
                                                children: "Copy to clipboard"
                                            })]
                                        }), jsxRuntimeExports.jsxs(Tooltip, {
                                            children: [jsxRuntimeExports.jsx(TooltipTrigger, {
                                                asChild: !0,
                                                children: jsxRuntimeExports.jsx(Button, {
                                                    variant: "outline",
                                                    size: "sm",
                                                    onClick: kt,
                                                    children: jsxRuntimeExports.jsx(Download, {
                                                        className: "h-4 w-4"
                                                    })
                                                })
                                            }), jsxRuntimeExports.jsx(TooltipContent, {
                                                children: "Download as text file"
                                            })]
                                        })]
                                    })]
                                })
                            }), jsxRuntimeExports.jsx("div", {
                                className: "flex-1 overflow-hidden",
                                children: jsxRuntimeExports.jsx(ScrollArea, {
                                    className: "h-full",
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "grid grid-cols-1 lg:grid-cols-3 gap-6 p-6",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "lg:col-span-2",
                                            children: jsxRuntimeExports.jsxs(Card, {
                                                className: "h-full",
                                                children: [jsxRuntimeExports.jsx(CardHeader, {
                                                    children: jsxRuntimeExports.jsx(CardTitle, {
                                                        children: "Your Cover Letter"
                                                    })
                                                }), jsxRuntimeExports.jsx(CardContent, {
                                                    children: jsxRuntimeExports.jsx(ScrollArea, {
                                                        className: "h-[400px]",
                                                        children: jsxRuntimeExports.jsx("div", {
                                                            className: "whitespace-pre-wrap text-sm leading-relaxed",
                                                            children: it.coverLetter
                                                        })
                                                    })
                                                })]
                                            })
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "space-y-4",
                                            children: [jsxRuntimeExports.jsxs(Card, {
                                                children: [jsxRuntimeExports.jsx(CardHeader, {
                                                    children: jsxRuntimeExports.jsx(CardTitle, {
                                                        className: "text-sm",
                                                        children: "Keywords Incorporated"
                                                    })
                                                }), jsxRuntimeExports.jsx(CardContent, {
                                                    children: jsxRuntimeExports.jsx("div", {
                                                        className: "flex flex-wrap gap-1",
                                                        children: it.keywordsUsed.map( (vt, bt) => jsxRuntimeExports.jsx(Badge, {
                                                            variant: "secondary",
                                                            className: "text-xs",
                                                            children: vt
                                                        }, bt))
                                                    })
                                                })]
                                            }), jsxRuntimeExports.jsxs(Card, {
                                                children: [jsxRuntimeExports.jsx(CardHeader, {
                                                    children: jsxRuntimeExports.jsx(CardTitle, {
                                                        className: "text-sm",
                                                        children: "Suggestions"
                                                    })
                                                }), jsxRuntimeExports.jsx(CardContent, {
                                                    children: jsxRuntimeExports.jsx(ScrollArea, {
                                                        className: "max-h-[200px]",
                                                        children: jsxRuntimeExports.jsx("ul", {
                                                            className: "space-y-2 text-xs",
                                                            children: it.suggestions.map( (vt, bt) => jsxRuntimeExports.jsxs("li", {
                                                                className: "flex items-start gap-2",
                                                                children: [jsxRuntimeExports.jsx("div", {
                                                                    className: "w-1 h-1 bg-muted-foreground rounded-full mt-2 flex-shrink-0"
                                                                }), jsxRuntimeExports.jsx("span", {
                                                                    children: vt
                                                                })]
                                                            }, bt))
                                                        })
                                                    })
                                                })]
                                            }), jsxRuntimeExports.jsxs(Card, {
                                                children: [jsxRuntimeExports.jsx(CardHeader, {
                                                    children: jsxRuntimeExports.jsx(CardTitle, {
                                                        className: "text-sm",
                                                        children: "Request Improvements"
                                                    })
                                                }), jsxRuntimeExports.jsxs(CardContent, {
                                                    className: "space-y-3",
                                                    children: [jsxRuntimeExports.jsx(Textarea, {
                                                        value: nt,
                                                        onChange: vt => lt(vt.target.value),
                                                        placeholder: "e.g., Make it more enthusiastic, add more technical details...",
                                                        className: "text-xs",
                                                        rows: 3
                                                    }), jsxRuntimeExports.jsx(Button, {
                                                        onClick: zt,
                                                        disabled: !nt.trim() || dt,
                                                        size: "sm",
                                                        className: "w-full",
                                                        children: dt ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                            children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                                                className: "h-3 w-3 mr-2 animate-spin"
                                                            }), "Improving..."]
                                                        }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                            children: [jsxRuntimeExports.jsx(RefreshCw, {
                                                                className: "h-3 w-3 mr-2"
                                                            }), "Improve"]
                                                        })
                                                    })]
                                                })]
                                            })]
                                        })]
                                    })
                                })
                            })]
                        }) : jsxRuntimeExports.jsx("div", {
                            className: "flex items-center justify-center h-full",
                            children: jsxRuntimeExports.jsxs("div", {
                                className: "text-center",
                                children: [jsxRuntimeExports.jsx(CircleAlert, {
                                    className: "h-12 w-12 text-muted-foreground mx-auto mb-4"
                                }), jsxRuntimeExports.jsx("h3", {
                                    className: "text-lg font-medium mb-2",
                                    children: "No Cover Letter Generated"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-muted-foreground mb-4",
                                    children: "Generate a cover letter first to see the preview"
                                })]
                            })
                        })
                    })]
                })
            })]
        })
    })
}
  , colorSchemes = {
    blue: {
        primary: "#2563eb",
        secondary: "#3b82f6",
        accent: "#dbeafe",
        text: "#1e40af"
    },
    green: {
        primary: "#059669",
        secondary: "#10b981",
        accent: "#d1fae5",
        text: "#047857"
    },
    purple: {
        primary: "#7c3aed",
        secondary: "#8b5cf6",
        accent: "#ede9fe",
        text: "#6d28d9"
    },
    red: {
        primary: "#dc2626",
        secondary: "#ef4444",
        accent: "#fee2e2",
        text: "#b91c1c"
    },
    orange: {
        primary: "#ea580c",
        secondary: "#f97316",
        accent: "#fed7aa",
        text: "#c2410c"
    },
    teal: {
        primary: "#0d9488",
        secondary: "#14b8a6",
        accent: "#ccfbf1",
        text: "#0f766e"
    },
    pink: {
        primary: "#db2777",
        secondary: "#ec4899",
        accent: "#fce7f3",
        text: "#be185d"
    },
    indigo: {
        primary: "#4f46e5",
        secondary: "#6366f1",
        accent: "#e0e7ff",
        text: "#4338ca"
    }
}
  , EnhancedResumePreview = ({data: s, settings: e}) => {
    var rt, et, it, st, nt, lt, dt, ot;
    colorSchemes[e.colorScheme] || colorSchemes.blue;
    const i = () => {
        switch (e.fontFamily) {
        case "Inter":
            return "Inter, sans-serif";
        case "Roboto":
            return "Roboto, sans-serif";
        case "Open Sans":
            return '"Open Sans", sans-serif';
        case "Lato":
            return "Lato, sans-serif";
        case "Arial":
            return "Arial, sans-serif";
        case "Times New Roman":
            return '"Times New Roman", serif';
        case "Georgia":
            return "Georgia, serif";
        default:
            return "Inter, sans-serif"
        }
    }
      , o = () => {
        switch (e.spacing) {
        case "compact":
            return 1.3;
        case "normal":
            return 1.4;
        case "relaxed":
            return 1.6;
        default:
            return 1.4
        }
    }
      , a = () => {
        switch (e.margins) {
        case "narrow":
            return "12mm";
        case "normal":
            return "15mm";
        case "wide":
            return "20mm";
        default:
            return "15mm"
        }
    }
      , c = () => {
        switch (e.headerStyle) {
        case "centered":
            return "text-center";
        case "modern":
            return "flex justify-between items-start";
        case "split-balanced":
            return "grid grid-cols-2 gap-4 items-start";
        case "split-contact-right":
            return "flex justify-between items-start";
        case "split-contact-left":
            return "flex flex-row-reverse justify-between items-start";
        case "minimalist":
            return "space-y-2";
        case "classic":
        default:
            return "text-left"
        }
    }
      , h = ( () => {
        const at = e.fontSize;
        return {
            name: `${Math.max(at + 8, 16)}px`,
            sectionTitle: `${Math.max(at + 2, 12)}px`,
            body: `${at}px`,
            small: `${Math.max(at - 1, 8)}px`
        }
    }
    )()
      , b = {
        container: "bg-white text-black shadow-sm",
        header: "flex justify-between items-start mb-6",
        headerName: "text-xl font-bold mb-3",
        headerDetails: "text-xs space-y-2",
        section: "mb-6",
        sectionTitle: "text-sm font-bold border-b border-gray-200 mb-3 pb-2 uppercase tracking-wide",
        layout: "perfect-fit"
    };
    console.log("EnhancedResumePreview - Current template:", e.template),
    console.log("EnhancedResumePreview - Template styles:", b);
    const _ = at => at ? new Date(at).toLocaleDateString("en-US", {
        year: "numeric",
        month: "short"
    }) : ""
      , $ = (at, ht, pt=!1) => {
        const gt = _(at)
          , wt = pt ? "Present" : _(ht);
        return `${gt} - ${wt}`
    }
      , _e = (at, ht, pt) => ht ? jsxRuntimeExports.jsxs(motion.section, {
        initial: {
            opacity: 0,
            y: 20
        },
        animate: {
            opacity: 1,
            y: 0
        },
        transition: {
            duration: .5
        },
        className: `${b.section} resume-section avoid-page-break`,
        style: {
            marginBottom: `${e.sectionSpacing || 16}px`,
            textAlign: e.textAlign === "justify" ? "justify" : "left"
        },
        children: [jsxRuntimeExports.jsx("h2", {
            className: b.sectionTitle,
            style: {
                borderBottom: e.showDividers !== !1 ? "1px solid black" : "none"
            },
            children: at
        }), ht]
    }) : null
      , tt = () => !e.enabledSections.summary || !s.summary ? null : _e("Professional Summary", jsxRuntimeExports.jsx(motion.div, {
        initial: {
            opacity: 0
        },
        animate: {
            opacity: 1
        },
        transition: {
            duration: .5
        },
        children: jsxRuntimeExports.jsx("p", {
            className: "text-gray-700 leading-relaxed",
            style: {
                fontSize: h.body
            },
            children: s.summary
        })
    }));
    return jsxRuntimeExports.jsx("div", {
        className: "w-full max-w-4xl p-4",
        children: jsxRuntimeExports.jsxs("div", {
            id: "resume-content",
            className: "bg-white text-black shadow-sm border border-gray-100 min-h-[11in]",
            style: {
                width: "210mm",
                minHeight: "297mm",
                padding: a(),
                margin: "0",
                boxSizing: "border-box",
                fontFamily: i(),
                fontSize: `${e.fontSize}pt`,
                lineHeight: o(),
                textAlign: e.textAlign === "justify" ? "justify" : "left",
                pageBreakInside: "auto",
                orphans: 3,
                widows: 3
            },
            children: [jsxRuntimeExports.jsx("style", {
                dangerouslySetInnerHTML: {
                    __html: `
                         @media print {
               .resume-section {
                 page-break-inside: avoid;
                 break-inside: avoid;
               }
               
               .experience-item,
               .education-item,
               .project-item,
               .certification-item {
                 page-break-inside: avoid;
                 break-inside: avoid;
                 margin-bottom: 16px;
               }
               
               h1, h2, h3, h4, h5, h6 {
                 page-break-after: avoid;
                 break-after: avoid;
                 page-break-inside: avoid;
                 break-inside: avoid;
               }
               
               /* Ensure second page content starts with proper margin */
               @page:first {
                 margin-top: 15mm;
               }
               
               @page {
                 margin-top: 15mm;
                 margin-bottom: 15mm;
                 margin-left: 15mm;
                 margin-right: 15mm;
               }
               
               /* Add top border line for subsequent pages */
               @page:not(:first) {
                 border-top: 0.5pt solid black;
                 margin-top: 17mm; /* Slightly more margin to accommodate border */
               }
             }
            
                         /* For PDF generation - ensure proper spacing */
             .page-break-before {
               page-break-before: always;
               break-before: page;
             }
             
             .avoid-page-break {
               page-break-inside: avoid;
               break-inside: avoid;
             }
             
             /* Simulate page break with top border for preview */
             .page-break-with-border {
               page-break-before: always;
               break-before: page;
               border-top: 1px solid #000;
               padding-top: 15mm;
               margin-top: 15mm;
             }
             
             /* Visual indicator for second page content in preview */
             .second-page-content {
               position: relative;
             }
             
             .second-page-content::before {
               content: '';
               position: absolute;
               top: -17mm;
               left: 0;
               right: 0;
               height: 1px;
               background-color: #000;
               opacity: 0.3;
             }
          `
                }
            }), jsxRuntimeExports.jsx("div", {
                className: c(),
                style: {
                    marginBottom: `${e.sectionSpacing || 16}px`
                },
                children: e.headerStyle === "centered" ? jsxRuntimeExports.jsxs("div", {
                    className: "text-center",
                    children: [jsxRuntimeExports.jsx("h1", {
                        className: "font-bold mb-2",
                        style: {
                            fontSize: h.name
                        },
                        children: s.personalInfo.name || "Your Name"
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-1",
                        style: {
                            fontSize: h.small
                        },
                        children: [s.personalInfo.email && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Email:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: `mailto:${s.personalInfo.email}`,
                                className: "text-blue-600 underline",
                                children: s.personalInfo.email
                            })]
                        }), s.personalInfo.phone && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Mobile:"
                            }), " ", s.personalInfo.phone]
                        }), s.personalInfo.website && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Portfolio:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: s.personalInfo.website,
                                target: "_blank",
                                rel: "noopener noreferrer",
                                className: "text-blue-600 underline",
                                children: s.personalInfo.website
                            })]
                        }), s.personalInfo.linkedin && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "LinkedIn:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: s.personalInfo.linkedin,
                                target: "_blank",
                                rel: "noopener noreferrer",
                                className: "text-blue-600 underline",
                                children: s.personalInfo.linkedin
                            })]
                        }), s.personalInfo.github && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "GitHub:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: s.personalInfo.github,
                                target: "_blank",
                                rel: "noopener noreferrer",
                                className: "text-blue-600 underline",
                                children: s.personalInfo.github
                            })]
                        })]
                    })]
                }) : e.headerStyle === "modern" || e.headerStyle === "split-contact-right" ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("h1", {
                            className: "font-bold mb-2",
                            style: {
                                fontSize: h.name
                            },
                            children: s.personalInfo.name || "Your Name"
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-1",
                            style: {
                                fontSize: h.small
                            },
                            children: [s.personalInfo.website && jsxRuntimeExports.jsxs("div", {
                                children: [jsxRuntimeExports.jsx("strong", {
                                    children: "Portfolio:"
                                }), " ", jsxRuntimeExports.jsx("a", {
                                    href: s.personalInfo.website,
                                    target: "_blank",
                                    rel: "noopener noreferrer",
                                    className: "text-blue-600 underline",
                                    children: s.personalInfo.website
                                })]
                            }), s.personalInfo.github && jsxRuntimeExports.jsxs("div", {
                                children: [jsxRuntimeExports.jsx("strong", {
                                    children: "GitHub:"
                                }), " ", jsxRuntimeExports.jsx("a", {
                                    href: s.personalInfo.github,
                                    target: "_blank",
                                    rel: "noopener noreferrer",
                                    className: "text-blue-600 underline",
                                    children: s.personalInfo.github
                                })]
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "text-right space-y-1",
                        style: {
                            fontSize: h.small
                        },
                        children: [s.personalInfo.email && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Email:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: `mailto:${s.personalInfo.email}`,
                                className: "text-blue-600 underline",
                                children: s.personalInfo.email
                            })]
                        }), s.personalInfo.phone && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Mobile:"
                            }), " ", s.personalInfo.phone]
                        }), s.personalInfo.linkedin && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "LinkedIn:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: s.personalInfo.linkedin,
                                target: "_blank",
                                rel: "noopener noreferrer",
                                className: "text-blue-600 underline",
                                children: s.personalInfo.linkedin
                            })]
                        })]
                    })]
                }) : e.headerStyle === "split-contact-left" ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "text-left space-y-1",
                        style: {
                            fontSize: h.small
                        },
                        children: [s.personalInfo.email && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Email:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: `mailto:${s.personalInfo.email}`,
                                className: "text-blue-600 underline",
                                children: s.personalInfo.email
                            })]
                        }), s.personalInfo.phone && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Mobile:"
                            }), " ", s.personalInfo.phone]
                        }), s.personalInfo.linkedin && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "LinkedIn:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: s.personalInfo.linkedin,
                                target: "_blank",
                                rel: "noopener noreferrer",
                                className: "text-blue-600 underline",
                                children: s.personalInfo.linkedin
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("h1", {
                            className: "font-bold mb-2 text-right",
                            style: {
                                fontSize: h.name
                            },
                            children: s.personalInfo.name || "Your Name"
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-1 text-right",
                            style: {
                                fontSize: h.small
                            },
                            children: [s.personalInfo.website && jsxRuntimeExports.jsxs("div", {
                                children: [jsxRuntimeExports.jsx("strong", {
                                    children: "Portfolio:"
                                }), " ", jsxRuntimeExports.jsx("a", {
                                    href: s.personalInfo.website,
                                    target: "_blank",
                                    rel: "noopener noreferrer",
                                    className: "text-blue-600 underline",
                                    children: s.personalInfo.website
                                })]
                            }), s.personalInfo.github && jsxRuntimeExports.jsxs("div", {
                                children: [jsxRuntimeExports.jsx("strong", {
                                    children: "GitHub:"
                                }), " ", jsxRuntimeExports.jsx("a", {
                                    href: s.personalInfo.github,
                                    target: "_blank",
                                    rel: "noopener noreferrer",
                                    className: "text-blue-600 underline",
                                    children: s.personalInfo.github
                                })]
                            })]
                        })]
                    })]
                }) : e.headerStyle === "split-balanced" ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("h1", {
                            className: "font-bold mb-2",
                            style: {
                                fontSize: h.name
                            },
                            children: s.personalInfo.name || "Your Name"
                        }), s.personalInfo.email && jsxRuntimeExports.jsxs("div", {
                            style: {
                                fontSize: h.small
                            },
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Email:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: `mailto:${s.personalInfo.email}`,
                                className: "text-blue-600 underline",
                                children: s.personalInfo.email
                            })]
                        }), s.personalInfo.phone && jsxRuntimeExports.jsxs("div", {
                            style: {
                                fontSize: h.small
                            },
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Mobile:"
                            }), " ", s.personalInfo.phone]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-1",
                        style: {
                            fontSize: h.small
                        },
                        children: [s.personalInfo.website && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Portfolio:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: s.personalInfo.website,
                                target: "_blank",
                                rel: "noopener noreferrer",
                                className: "text-blue-600 underline",
                                children: s.personalInfo.website
                            })]
                        }), s.personalInfo.linkedin && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "LinkedIn:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: s.personalInfo.linkedin,
                                target: "_blank",
                                rel: "noopener noreferrer",
                                className: "text-blue-600 underline",
                                children: s.personalInfo.linkedin
                            })]
                        }), s.personalInfo.github && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "GitHub:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: s.personalInfo.github,
                                target: "_blank",
                                rel: "noopener noreferrer",
                                className: "text-blue-600 underline",
                                children: s.personalInfo.github
                            })]
                        })]
                    })]
                }) : e.headerStyle === "minimalist" ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [jsxRuntimeExports.jsx("h1", {
                        className: "font-bold",
                        style: {
                            fontSize: h.name
                        },
                        children: s.personalInfo.name || "Your Name"
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex flex-wrap gap-x-4 gap-y-1",
                        style: {
                            fontSize: h.small
                        },
                        children: [s.personalInfo.email && jsxRuntimeExports.jsx("a", {
                            href: `mailto:${s.personalInfo.email}`,
                            className: "text-blue-600 underline",
                            children: s.personalInfo.email
                        }), s.personalInfo.phone && jsxRuntimeExports.jsx("span", {
                            children: s.personalInfo.phone
                        }), s.personalInfo.website && jsxRuntimeExports.jsx("a", {
                            href: s.personalInfo.website,
                            target: "_blank",
                            rel: "noopener noreferrer",
                            className: "text-blue-600 underline",
                            children: "Portfolio"
                        }), s.personalInfo.linkedin && jsxRuntimeExports.jsx("a", {
                            href: s.personalInfo.linkedin,
                            target: "_blank",
                            rel: "noopener noreferrer",
                            className: "text-blue-600 underline",
                            children: "LinkedIn"
                        }), s.personalInfo.github && jsxRuntimeExports.jsx("a", {
                            href: s.personalInfo.github,
                            target: "_blank",
                            rel: "noopener noreferrer",
                            className: "text-blue-600 underline",
                            children: "GitHub"
                        })]
                    })]
                }) : jsxRuntimeExports.jsxs("div", {
                    children: [jsxRuntimeExports.jsx("h1", {
                        className: "font-bold mb-2",
                        style: {
                            fontSize: h.name
                        },
                        children: s.personalInfo.name || "Your Name"
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-1",
                        style: {
                            fontSize: h.small
                        },
                        children: [s.personalInfo.email && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Email:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: `mailto:${s.personalInfo.email}`,
                                className: "text-blue-600 underline",
                                children: s.personalInfo.email
                            })]
                        }), s.personalInfo.phone && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Mobile:"
                            }), " ", s.personalInfo.phone]
                        }), s.personalInfo.website && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Portfolio:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: s.personalInfo.website,
                                target: "_blank",
                                rel: "noopener noreferrer",
                                className: "text-blue-600 underline",
                                children: s.personalInfo.website
                            })]
                        }), s.personalInfo.linkedin && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "LinkedIn:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: s.personalInfo.linkedin,
                                target: "_blank",
                                rel: "noopener noreferrer",
                                className: "text-blue-600 underline",
                                children: s.personalInfo.linkedin
                            })]
                        }), s.personalInfo.github && jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "GitHub:"
                            }), " ", jsxRuntimeExports.jsx("a", {
                                href: s.personalInfo.github,
                                target: "_blank",
                                rel: "noopener noreferrer",
                                className: "text-blue-600 underline",
                                children: s.personalInfo.github
                            })]
                        })]
                    })]
                })
            }), jsxRuntimeExports.jsx("div", {
                className: "avoid-page-break",
                children: tt()
            }), s.education && s.education.length > 0 && jsxRuntimeExports.jsxs("div", {
                className: "resume-section avoid-page-break",
                style: {
                    marginBottom: `${e.sectionSpacing || 16}px`
                },
                children: [jsxRuntimeExports.jsx("h2", {
                    className: "font-bold mb-2 pb-1",
                    style: {
                        fontSize: h.sectionTitle,
                        borderBottom: e.showDividers !== !1 ? "1px solid black" : "none"
                    },
                    children: "EDUCATION"
                }), s.education.map( (at, ht) => jsxRuntimeExports.jsxs("div", {
                    className: "education-item flex justify-between items-start mb-2",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex-1 pr-4",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "font-bold",
                            style: {
                                fontSize: h.body
                            },
                            children: at.school
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "italic",
                            style: {
                                fontSize: h.body
                            },
                            children: [at.degree, at.gpa && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                children: ["; GPA: ", at.gpa]
                            })]
                        }), at.coursework && at.coursework.length > 0 && jsxRuntimeExports.jsxs("div", {
                            className: "mt-1",
                            style: {
                                fontSize: h.small
                            },
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Courses:"
                            }), " ", at.coursework.join(", ")]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "text-right flex-shrink-0",
                        style: {
                            fontSize: h.small
                        },
                        children: [at.location && jsxRuntimeExports.jsx("div", {
                            children: at.location
                        }), jsxRuntimeExports.jsx("div", {
                            children: $(at.startDate, at.endDate)
                        })]
                    })]
                }, at.id || ht))]
            }), (((rt = s.skills.languages) == null ? void 0 : rt.length) > 0 || ((et = s.skills.frameworks) == null ? void 0 : et.length) > 0 || ((it = s.skills.technical) == null ? void 0 : it.length) > 0 || ((st = s.skills.soft) == null ? void 0 : st.length) > 0) && jsxRuntimeExports.jsxs("div", {
                style: {
                    marginBottom: `${e.sectionSpacing || 16}px`
                },
                children: [jsxRuntimeExports.jsx("h2", {
                    className: "font-bold mb-2 pb-1",
                    style: {
                        fontSize: h.sectionTitle,
                        borderBottom: e.showDividers !== !1 ? "1px solid black" : "none"
                    },
                    children: "SKILLS SUMMARY"
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-1",
                    style: {
                        fontSize: h.body
                    },
                    children: [((nt = s.skills.technical) == null ? void 0 : nt.length) > 0 && jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("strong", {
                            children: "Programming Languages:"
                        }), " ", s.skills.technical.filter(at => ["javascript", "python", "java", "c++", "typescript", "go", "rust", "swift", "kotlin", "c#", "php", "ruby"].some(ht => at.toLowerCase().includes(ht))).join(", ")]
                    }), ((lt = s.skills.frameworks) == null ? void 0 : lt.length) > 0 && jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("strong", {
                            children: "Frameworks & Libraries:"
                        }), " ", s.skills.frameworks.join(", ")]
                    }), ((dt = s.skills.technical) == null ? void 0 : dt.length) > 0 && jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("strong", {
                            children: "Technical Skills:"
                        }), " ", s.skills.technical.filter(at => !["javascript", "python", "java", "c++", "typescript", "go", "rust", "swift", "kotlin", "c#", "php", "ruby"].some(ht => at.toLowerCase().includes(ht))).join(", ")]
                    }), ((ot = s.skills.soft) == null ? void 0 : ot.length) > 0 && jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("strong", {
                            children: "Soft Skills:"
                        }), " ", s.skills.soft.join(", ")]
                    })]
                })]
            }), s.experience && s.experience.length > 0 && jsxRuntimeExports.jsxs("div", {
                style: {
                    marginBottom: `${e.sectionSpacing || 16}px`
                },
                children: [jsxRuntimeExports.jsx("h2", {
                    className: "font-bold mb-2 pb-1",
                    style: {
                        fontSize: h.sectionTitle,
                        borderBottom: e.showDividers !== !1 ? "1px solid black" : "none"
                    },
                    children: "EXPERIENCE"
                }), s.experience.map(at => jsxRuntimeExports.jsxs("div", {
                    className: "mb-3",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex justify-between items-start mb-1",
                        children: [jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "font-bold",
                                style: {
                                    fontSize: h.body
                                },
                                children: at.company
                            }), jsxRuntimeExports.jsx("div", {
                                className: "italic",
                                style: {
                                    fontSize: h.body
                                },
                                children: at.jobTitle
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "text-right",
                            style: {
                                fontSize: h.small
                            },
                            children: [jsxRuntimeExports.jsx("div", {
                                children: at.location
                            }), jsxRuntimeExports.jsx("div", {
                                children: $(at.startDate, at.endDate, at.current)
                            })]
                        })]
                    }), at.description && jsxRuntimeExports.jsx("div", {
                        className: "ml-3 mb-1",
                        children: jsxRuntimeExports.jsx("div", {
                            style: {
                                fontSize: h.body
                            },
                            children: at.description
                        })
                    }), at.achievements && Array.isArray(at.achievements) && at.achievements.length > 0 && jsxRuntimeExports.jsx("div", {
                        className: "ml-3",
                        children: at.achievements.map( (ht, pt) => jsxRuntimeExports.jsxs("div", {
                            className: "mb-1",
                            style: {
                                fontSize: h.body
                            },
                            children: [e.bulletStyle === "dash" ? "-" : e.bulletStyle === "arrow" ? "→" : e.bulletStyle === "chevron" ? "›" : "•", " ", ht]
                        }, pt))
                    })]
                }, at.id))]
            }), s.projects && s.projects.length > 0 && jsxRuntimeExports.jsxs("div", {
                style: {
                    marginBottom: `${e.sectionSpacing || 16}px`
                },
                children: [jsxRuntimeExports.jsx("h2", {
                    className: "font-bold mb-2 pb-1",
                    style: {
                        fontSize: h.sectionTitle,
                        borderBottom: e.showDividers !== !1 ? "1px solid black" : "none"
                    },
                    children: "PROJECTS"
                }), s.projects.map(at => jsxRuntimeExports.jsx("div", {
                    className: "mb-3",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex justify-between items-start mb-1",
                        children: [jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "font-bold",
                                style: {
                                    fontSize: h.body
                                },
                                children: at.name
                            }), at.description && jsxRuntimeExports.jsx("div", {
                                style: {
                                    fontSize: h.body
                                },
                                children: at.description
                            }), at.technologies && Array.isArray(at.technologies) && at.technologies.length > 0 && jsxRuntimeExports.jsxs("div", {
                                style: {
                                    fontSize: h.small
                                },
                                children: [jsxRuntimeExports.jsx("strong", {
                                    children: "Technologies:"
                                }), " ", at.technologies.join(", ")]
                            }), at.link && jsxRuntimeExports.jsxs("div", {
                                style: {
                                    fontSize: h.small
                                },
                                children: [jsxRuntimeExports.jsx("strong", {
                                    children: "Live Link:"
                                }), " ", jsxRuntimeExports.jsx("a", {
                                    href: at.link.startsWith("http") ? at.link : `https://${at.link}`,
                                    target: "_blank",
                                    rel: "noopener noreferrer",
                                    style: {
                                        color: "#2563eb",
                                        textDecoration: "underline"
                                    },
                                    children: at.link
                                })]
                            }), at.github && jsxRuntimeExports.jsxs("div", {
                                style: {
                                    fontSize: h.small
                                },
                                children: [jsxRuntimeExports.jsx("strong", {
                                    children: "GitHub:"
                                }), " ", jsxRuntimeExports.jsx("a", {
                                    href: at.github.startsWith("http") ? at.github : `https://${at.github}`,
                                    target: "_blank",
                                    rel: "noopener noreferrer",
                                    style: {
                                        color: "#2563eb",
                                        textDecoration: "underline"
                                    },
                                    children: at.github
                                })]
                            })]
                        }), jsxRuntimeExports.jsx("div", {
                            className: "text-right",
                            style: {
                                fontSize: h.small
                            },
                            children: (at.startDate || at.endDate) && jsxRuntimeExports.jsx("div", {
                                children: $(at.startDate, at.endDate)
                            })
                        })]
                    })
                }, at.id))]
            }), s.certifications && s.certifications.length > 0 && jsxRuntimeExports.jsxs("div", {
                style: {
                    marginBottom: `${e.sectionSpacing || 16}px`
                },
                children: [jsxRuntimeExports.jsx("h2", {
                    className: "font-bold mb-2 pb-1",
                    style: {
                        fontSize: h.sectionTitle,
                        borderBottom: e.showDividers !== !1 ? "1px solid black" : "none"
                    },
                    children: "CERTIFICATIONS"
                }), s.certifications.map(at => jsxRuntimeExports.jsx("div", {
                    className: "mb-2",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex justify-between items-start mb-1",
                        children: [jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "font-bold",
                                style: {
                                    fontSize: h.body
                                },
                                children: at.name
                            }), at.issuer && jsxRuntimeExports.jsx("div", {
                                className: "italic",
                                style: {
                                    fontSize: h.body
                                },
                                children: at.issuer
                            }), at.credentialId && jsxRuntimeExports.jsxs("div", {
                                style: {
                                    fontSize: h.small
                                },
                                children: ["Credential ID: ", at.credentialId]
                            }), at.link && jsxRuntimeExports.jsxs("div", {
                                style: {
                                    fontSize: h.small
                                },
                                children: ["Verification: ", jsxRuntimeExports.jsx("a", {
                                    href: at.link.startsWith("http") ? at.link : `https://${at.link}`,
                                    target: "_blank",
                                    rel: "noopener noreferrer",
                                    style: {
                                        color: "#2563eb",
                                        textDecoration: "underline"
                                    },
                                    children: at.link
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "text-right",
                            style: {
                                fontSize: h.small
                            },
                            children: [at.date && jsxRuntimeExports.jsxs("div", {
                                children: ["Issued: ", at.date]
                            }), at.expiryDate && jsxRuntimeExports.jsxs("div", {
                                children: ["Expires: ", at.expiryDate]
                            })]
                        })]
                    })
                }, at.id))]
            }), s.volunteer && s.volunteer.length > 0 && jsxRuntimeExports.jsxs("div", {
                style: {
                    marginBottom: `${e.sectionSpacing || 16}px`
                },
                children: [jsxRuntimeExports.jsx("h2", {
                    className: "font-bold mb-2 pb-1",
                    style: {
                        fontSize: h.sectionTitle,
                        borderBottom: e.showDividers !== !1 ? "1px solid black" : "none"
                    },
                    children: "VOLUNTEER EXPERIENCE"
                }), s.volunteer.map(at => jsxRuntimeExports.jsx("div", {
                    className: "mb-3",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex justify-between items-start mb-1",
                        children: [jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "font-bold",
                                style: {
                                    fontSize: h.body
                                },
                                children: [at.role, " at ", at.organization]
                            }), jsxRuntimeExports.jsx("div", {
                                className: "italic",
                                style: {
                                    fontSize: h.body
                                },
                                children: at.description
                            })]
                        }), jsxRuntimeExports.jsx("div", {
                            className: "text-right",
                            style: {
                                fontSize: h.small
                            },
                            children: jsxRuntimeExports.jsx("div", {
                                children: $(at.startDate, at.endDate)
                            })
                        })]
                    })
                }, at.id))]
            }), s.languages && s.languages.length > 0 && jsxRuntimeExports.jsxs("div", {
                style: {
                    marginBottom: `${e.sectionSpacing || 16}px`
                },
                children: [jsxRuntimeExports.jsx("h2", {
                    className: "font-bold mb-2 pb-1",
                    style: {
                        fontSize: h.sectionTitle,
                        borderBottom: e.showDividers !== !1 ? "1px solid black" : "none"
                    },
                    children: "LANGUAGES"
                }), jsxRuntimeExports.jsx("div", {
                    className: "grid grid-cols-2 gap-1",
                    children: s.languages.map(at => jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-1",
                        style: {
                            fontSize: h.body
                        },
                        children: [jsxRuntimeExports.jsxs("span", {
                            className: "font-medium",
                            children: [at.language, ":"]
                        }), jsxRuntimeExports.jsx("span", {
                            style: {
                                fontSize: h.small
                            },
                            children: at.proficiency
                        })]
                    }, at.id))
                })]
            }), s.awards && s.awards.length > 0 && jsxRuntimeExports.jsxs("div", {
                style: {
                    marginBottom: `${e.sectionSpacing || 16}px`
                },
                children: [jsxRuntimeExports.jsx("h2", {
                    className: "font-bold mb-2 pb-1",
                    style: {
                        fontSize: h.sectionTitle,
                        borderBottom: e.showDividers !== !1 ? "1px solid black" : "none"
                    },
                    children: "AWARDS AND HONORS"
                }), s.awards.map(at => jsxRuntimeExports.jsx("div", {
                    className: "mb-2",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex justify-between items-start mb-1",
                        children: [jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "font-bold",
                                style: {
                                    fontSize: h.body
                                },
                                children: at.title
                            }), at.issuer && jsxRuntimeExports.jsx("div", {
                                className: "italic",
                                style: {
                                    fontSize: h.body
                                },
                                children: at.issuer
                            }), at.description && jsxRuntimeExports.jsx("div", {
                                style: {
                                    fontSize: h.body
                                },
                                children: at.description
                            })]
                        }), at.date && jsxRuntimeExports.jsx("div", {
                            className: "text-right",
                            style: {
                                fontSize: h.small
                            },
                            children: jsxRuntimeExports.jsx("div", {
                                children: at.date
                            })
                        })]
                    })
                }, at.id))]
            })]
        })
    })
}
  , SECTION_CONFIGS = [{
    id: "ai",
    label: "Resume Copilot",
    icon: Sparkles,
    color: "purple"
}, {
    id: "personal",
    label: "Personal Info",
    icon: User,
    color: "blue"
}, {
    id: "summary",
    label: "Summary",
    icon: FileText,
    color: "green"
}, {
    id: "experience",
    label: "Experience",
    icon: Briefcase,
    color: "purple"
}, {
    id: "education",
    label: "Education",
    icon: GraduationCap,
    color: "amber"
}, {
    id: "skills",
    label: "Skills",
    icon: Code,
    color: "cyan"
}, {
    id: "projects",
    label: "Projects",
    icon: Globe,
    color: "pink"
}, {
    id: "certifications",
    label: "Certifications",
    icon: Award,
    color: "orange"
}, {
    id: "languages",
    label: "Languages",
    icon: Languages,
    color: "indigo"
}, {
    id: "volunteer",
    label: "Volunteer",
    icon: Heart,
    color: "red"
}, {
    id: "awards",
    label: "Awards",
    icon: Award,
    color: "yellow"
}]
  , EnhancedResumeBuilder = ({template: s, onBack: e}) => {
    var jt;
    useIsMobile();
    const [i,o] = reactExports.useState({
        personalInfo: {
            name: "",
            email: "",
            phone: "",
            location: "",
            website: "",
            linkedin: "",
            github: ""
        },
        summary: "",
        experience: [],
        education: [],
        skills: {
            technical: [],
            soft: [],
            languages: [],
            frameworks: []
        },
        projects: [],
        certifications: [],
        languages: [],
        volunteer: [],
        awards: []
    })
      , [a,c] = reactExports.useState({
        template: "perfect-fit",
        fontSize: 11,
        fontFamily: "Inter",
        colorScheme: "pink",
        spacing: "normal",
        showPhoto: !1,
        headerStyle: "modern",
        sectionOrder: ["ai", "personal", "summary", "experience", "education", "skills", "projects", "certifications", "languages", "volunteer", "awards"],
        enabledSections: {
            ai: !0,
            personal: !0,
            summary: !0,
            experience: !0,
            education: !0,
            skills: !0,
            projects: !0,
            certifications: !0,
            languages: !0,
            volunteer: !0,
            awards: !0
        }
    })
      , [d,h] = reactExports.useState("ai")
      , [g,b] = reactExports.useState(0)
      , [_,$] = reactExports.useState(!1)
      , [_e,tt] = reactExports.useState(!1)
      , [rt,et] = reactExports.useState(null)
      , [it,st] = reactExports.useState(!1)
      , [nt,lt] = reactExports.useState(!1)
      , [dt,ot] = reactExports.useState(!1)
      , [at,ht] = reactExports.useState(.8)
      , [pt,gt] = reactExports.useState(!1)
      , wt = reactExports.useRef(null)
      , yt = reactExports.useRef()
      , Rt = reactExports.useCallback( () => {
        const xt = SECTION_CONFIGS.filter(St => a.enabledSections[St.id])
          , Et = xt.filter(St => {
            switch (St.id) {
            case "ai":
                return !0;
            case "personal":
                return i.personalInfo.name && i.personalInfo.email;
            case "summary":
                return i.summary.length > 50;
            case "experience":
                return i.experience.length > 0;
            case "education":
                return i.education.length > 0;
            case "skills":
                return Object.values(i.skills).some(Bt => Bt.length > 0);
            case "projects":
                return i.projects.length > 0;
            case "certifications":
                return i.certifications.length > 0;
            case "languages":
                return i.languages.length > 0;
            case "volunteer":
                return i.volunteer.length > 0;
            case "awards":
                return i.awards.length > 0;
            default:
                return !1
            }
        }
        );
        return {
            percentage: xt.length > 0 ? Math.round(Et.length / xt.length * 100) : 0,
            completedSections: Et.length,
            totalSections: xt.length
        }
    }
    , [i, a.enabledSections])
      , Mt = reactExports.useCallback( () => {
        let xt = 0;
        i.personalInfo.name && i.personalInfo.email && i.personalInfo.phone && (xt += 20),
        i.summary && i.summary.length > 100 ? xt += 20 : i.summary && i.summary.length > 50 && (xt += 10),
        i.experience.length > 0 && (xt += 15,
        i.experience.some(St => St.description && St.description.length > 100) && (xt += 15)),
        i.education.length > 0 && (xt += 15);
        const Et = Object.values(i.skills).flat().length;
        return Et >= 8 ? xt += 15 : Et >= 5 ? xt += 10 : Et >= 3 && (xt += 5),
        Math.min(xt, 100)
    }
    , [i]);
    reactExports.useEffect( () => {
        b(Mt())
    }
    , [Mt]),
    reactExports.useEffect( () => (yt.current && clearTimeout(yt.current),
    yt.current = setTimeout( () => {
        localStorage.setItem("enhanced_resume_data", JSON.stringify(i)),
        localStorage.setItem("enhanced_resume_settings", JSON.stringify(a)),
        et(new Date)
    }
    , 2e3),
    () => {
        yt.current && clearTimeout(yt.current)
    }
    ), [i, a]),
    reactExports.useEffect( () => {
        const xt = localStorage.getItem("parsedResumeData");
        if (xt)
            try {
                const St = JSON.parse(xt)
                  , Bt = convertParsedResumeToEnhancedFormat(St);
                o(Bt),
                localStorage.removeItem("parsedResumeData");
                return
            } catch (St) {
                console.error("Error loading parsed resume data:", St)
            }
        const Et = localStorage.getItem("enhanced_resume_data")
          , Pt = localStorage.getItem("enhanced_resume_settings");
        if (Et)
            try {
                const St = JSON.parse(Et)
                  , Bt = {
                    personalInfo: St.personalInfo || {
                        name: "",
                        email: "",
                        phone: "",
                        location: "",
                        website: "",
                        linkedin: "",
                        github: ""
                    },
                    summary: St.summary || "",
                    experience: St.experience || [],
                    education: St.education || [],
                    skills: St.skills || {
                        technical: [],
                        soft: [],
                        languages: [],
                        frameworks: []
                    },
                    projects: St.projects || [],
                    certifications: St.certifications || [],
                    languages: St.languages || [],
                    volunteer: St.volunteer || [],
                    awards: St.awards || []
                };
                o(Bt)
            } catch (St) {
                console.error("Error loading saved resume data:", St)
            }
        if (Pt)
            try {
                c(St => ({
                    ...St,
                    ...JSON.parse(Pt)
                }))
            } catch (St) {
                console.error("Error loading saved settings:", St)
            }
    }
    , []),
    reactExports.useEffect( () => {
        const xt = Et => {
            if (Et.key === "Escape" && pt) {
                gt(!1);
                return
            }
            if (Et.ctrlKey || Et.metaKey)
                switch (Et.key) {
                case "f":
                    Et.preventDefault(),
                    tt(!0);
                    break;
                case "s":
                    Et.preventDefault(),
                    localStorage.setItem("enhanced_resume_data", JSON.stringify(i)),
                    localStorage.setItem("enhanced_resume_settings", JSON.stringify(a)),
                    et(new Date);
                    break
                }
        }
        ;
        return document.addEventListener("keydown", xt),
        () => document.removeEventListener("keydown", xt)
    }
    , [d, a.enabledSections, i, a, pt]);
    const ss = (xt, Et) => {
        o(Pt => ({
            ...Pt,
            [xt]: Et
        }))
    }
      , zt = xt => {
        c(Et => ({
            ...Et,
            ...xt
        }))
    }
      , At = xt => {
        xt === "ai" || xt === "personal" || c(Et => ({
            ...Et,
            enabledSections: {
                ...Et.enabledSections,
                [xt]: !Et.enabledSections[xt]
            }
        }))
    }
      , kt = () => {
        o({
            personalInfo: {
                name: "",
                email: "",
                phone: "",
                location: "",
                website: "",
                linkedin: "",
                github: ""
            },
            summary: "",
            experience: [],
            education: [],
            skills: {
                technical: [],
                soft: [],
                languages: [],
                frameworks: []
            },
            projects: [],
            certifications: [],
            languages: [],
            volunteer: [],
            awards: []
        }),
        h("personal")
    }
      , vt = async () => {
        if (wt.current) {
            st(!0);
            try {
                const {generateResumePDF: xt} = await __vitePreload(async () => {
                    const {generateResumePDF: Bt} = await import("./pdfGenerator-PDr4BZDB.js").then(os => os.p);
                    return {
                        generateResumePDF: Bt
                    }
                }
                , [])
                  , Et = wt.current.querySelector("#resume-content") || wt.current
                  , Pt = {
                    email: i.personalInfo.email,
                    phone: i.personalInfo.phone,
                    linkedin: i.personalInfo.linkedin,
                    github: i.personalInfo.github,
                    website: i.personalInfo.website
                }
                  , St = i.personalInfo.name ? `${i.personalInfo.name.replace(/\s+/g, "_")}_Resume.pdf` : "Resume.pdf";
                await xt(Et, Pt, St)
            } catch (xt) {
                console.error("Error generating PDF:", xt),
                alert("Failed to generate PDF. Please try again.")
            } finally {
                st(!1)
            }
        }
    }
      , bt = Rt()
      , Tt = xt => xt >= 80 ? "text-green-600" : xt >= 60 ? "text-yellow-600" : "text-red-600"
      , Yt = () => {
        const xt = [];
        return i.personalInfo.name && i.personalInfo.email && xt.push("personal"),
        i.summary && i.summary.trim().length > 0 && xt.push("summary"),
        i.experience && i.experience.length > 0 && xt.push("experience"),
        i.education && i.education.length > 0 && xt.push("education"),
        [...i.skills.technical, ...i.skills.soft, ...i.skills.languages, ...i.skills.frameworks].length > 0 && xt.push("skills"),
        i.projects && i.projects.length > 0 && xt.push("projects"),
        i.certifications && i.certifications.length > 0 && xt.push("certifications"),
        i.languages && i.languages.length > 0 && xt.push("languages"),
        i.volunteer && i.volunteer.length > 0 && xt.push("volunteer"),
        i.awards && i.awards.length > 0 && xt.push("awards"),
        xt.push("ai"),
        xt
    }
      , Nt = () => {
        switch (d) {
        case "ai":
            return jsxRuntimeExports.jsx(AIDashboard, {
                resumeData: i,
                onUpdateResumeData: ss
            });
        case "personal":
            return jsxRuntimeExports.jsx(EnhancedPersonalInfoSection, {
                data: i.personalInfo,
                onUpdate: xt => ss("personalInfo", xt)
            });
        case "summary":
            return jsxRuntimeExports.jsx(EnhancedSummarySection, {
                data: i.summary,
                onUpdate: xt => ss("summary", xt)
            });
        case "experience":
            return jsxRuntimeExports.jsx(EnhancedExperienceSection, {
                data: i.experience,
                onUpdate: xt => ss("experience", xt)
            });
        case "education":
            return jsxRuntimeExports.jsx(EnhancedEducationSection, {
                data: i.education,
                onUpdate: xt => ss("education", xt)
            });
        case "skills":
            return jsxRuntimeExports.jsx(EnhancedSkillsSection, {
                data: i.skills,
                onUpdate: xt => ss("skills", xt)
            });
        case "projects":
            return jsxRuntimeExports.jsx(EnhancedProjectsSection, {
                data: i.projects,
                onUpdate: xt => ss("projects", xt)
            });
        case "certifications":
            return jsxRuntimeExports.jsx(EnhancedCertificationsSection, {
                data: i.certifications,
                onUpdate: xt => ss("certifications", xt)
            });
        case "languages":
            return jsxRuntimeExports.jsx(EnhancedLanguagesSection, {
                data: i.languages,
                onUpdate: xt => ss("languages", xt)
            });
        case "volunteer":
            return jsxRuntimeExports.jsx(EnhancedVolunteerSection, {
                data: i.volunteer,
                onUpdate: xt => ss("volunteer", xt)
            });
        case "awards":
            return jsxRuntimeExports.jsx(EnhancedAwardsSection, {
                data: i.awards,
                onUpdate: xt => ss("awards", xt)
            });
        default:
            return null
        }
    }
    ;
    return jsxRuntimeExports.jsx(TooltipProvider, {
        children: jsxRuntimeExports.jsxs("div", {
            className: "h-full bg-gradient-to-br from-slate-50 via-white to-blue-50/30",
            children: [jsxRuntimeExports.jsx("div", {
                className: "bg-white/80 backdrop-blur-sm border-b border-gray-200/60 px-4 md:px-6 py-4",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex flex-col md:flex-row md:items-center md:justify-between gap-4",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-4",
                        children: [jsxRuntimeExports.jsx(AnimatePresence, {
                            children: rt && jsxRuntimeExports.jsxs(motion.div, {
                                initial: {
                                    opacity: 0,
                                    scale: .8
                                },
                                animate: {
                                    opacity: 1,
                                    scale: 1
                                },
                                exit: {
                                    opacity: 0,
                                    scale: .8
                                },
                                className: "text-xs text-gray-500 flex items-center gap-1",
                                children: [jsxRuntimeExports.jsx(CircleCheck, {
                                    className: "w-3 h-3 text-green-500"
                                }), "Saved ", rt.toLocaleTimeString()]
                            })
                        }), jsxRuntimeExports.jsxs(Tooltip, {
                            children: [jsxRuntimeExports.jsx(TooltipTrigger, {
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2 px-3 py-1 bg-gray-50 rounded-full",
                                    children: [jsxRuntimeExports.jsx(Target, {
                                        className: "w-4 h-4 text-gray-500"
                                    }), jsxRuntimeExports.jsxs("span", {
                                        className: `text-sm font-medium ${Tt(g)}`,
                                        children: ["ATS: ", g, "%"]
                                    })]
                                })
                            }), jsxRuntimeExports.jsx(TooltipContent, {
                                children: jsxRuntimeExports.jsx("p", {
                                    children: "Applicant Tracking System compatibility score"
                                })
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "md:hidden space-y-2",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex gap-2",
                            children: [jsxRuntimeExports.jsx(MobileButton, {
                                onClick: () => lt(!0),
                                variant: "outline",
                                size: "sm",
                                icon: Settings,
                                className: "flex-1",
                                children: "Settings"
                            }), jsxRuntimeExports.jsx(MobileButton, {
                                onClick: () => tt(!0),
                                variant: "outline",
                                size: "sm",
                                icon: Eye,
                                className: "flex-1",
                                children: "Preview"
                            })]
                        }), jsxRuntimeExports.jsx(MobileButton, {
                            onClick: vt,
                            disabled: it,
                            className: "w-full",
                            icon: it ? LoaderCircle : Download,
                            children: it ? "Generating..." : "Download PDF"
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "hidden md:flex items-center gap-2",
                        children: [jsxRuntimeExports.jsxs(Tooltip, {
                            children: [jsxRuntimeExports.jsx(TooltipTrigger, {
                                asChild: !0,
                                children: jsxRuntimeExports.jsxs(ShimmerButton, {
                                    onClick: () => window.location.href = "/resume-import",
                                    className: "h-9 px-3 text-sm flex items-center gap-2",
                                    background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                                    borderRadius: "6px",
                                    children: [jsxRuntimeExports.jsx(Upload, {
                                        className: "w-4 h-4"
                                    }), "Import Resume"]
                                })
                            }), jsxRuntimeExports.jsx(TooltipContent, {
                                children: jsxRuntimeExports.jsx("p", {
                                    children: "Import an existing resume to auto-fill this form"
                                })
                            })]
                        }), jsxRuntimeExports.jsxs(Button, {
                            variant: "outline",
                            size: "sm",
                            onClick: () => lt(!0),
                            className: "h-9 px-3 text-sm",
                            children: [jsxRuntimeExports.jsx(Settings, {
                                className: "w-4 h-4 mr-2"
                            }), "Settings"]
                        }), jsxRuntimeExports.jsxs(Button, {
                            variant: "outline",
                            size: "sm",
                            onClick: () => ot(!0),
                            className: "h-9 px-3 text-sm",
                            children: [jsxRuntimeExports.jsx(PanelsTopLeft, {
                                className: "w-4 h-4 mr-2"
                            }), "Sections"]
                        }), jsxRuntimeExports.jsxs(Tooltip, {
                            children: [jsxRuntimeExports.jsx(TooltipTrigger, {
                                asChild: !0,
                                children: jsxRuntimeExports.jsxs(Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: () => tt(!0),
                                    className: "h-9 px-3 text-sm",
                                    children: [jsxRuntimeExports.jsx(Eye, {
                                        className: "w-4 h-4 mr-2"
                                    }), "Preview"]
                                })
                            }), jsxRuntimeExports.jsx(TooltipContent, {
                                children: jsxRuntimeExports.jsx("p", {
                                    children: "Keyboard shortcut: Ctrl/Cmd + F"
                                })
                            })]
                        }), jsxRuntimeExports.jsxs(Tooltip, {
                            children: [jsxRuntimeExports.jsx(TooltipTrigger, {
                                asChild: !0,
                                children: jsxRuntimeExports.jsxs(Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: () => gt(!0),
                                    className: "h-9 px-3 text-sm",
                                    children: [jsxRuntimeExports.jsx(motion.div, {
                                        initial: {
                                            scale: 1
                                        },
                                        animate: {
                                            scale: [1, 1.2, 1]
                                        },
                                        transition: {
                                            repeat: 1 / 0,
                                            repeatType: "reverse",
                                            duration: 1.5
                                        },
                                        className: "mr-2 flex items-center",
                                        children: jsxRuntimeExports.jsx(Sparkles, {
                                            className: "w-4 h-4 text-blue-500"
                                        })
                                    }), "Cover Letter"]
                                })
                            }), jsxRuntimeExports.jsx(TooltipContent, {
                                children: jsxRuntimeExports.jsx("p", {
                                    children: "Generate AI-powered cover letters"
                                })
                            })]
                        }), jsxRuntimeExports.jsx(RainbowButton, {
                            onClick: vt,
                            disabled: it,
                            className: "h-9 px-3 text-sm",
                            children: it ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "w-4 h-4 mr-2 animate-spin rounded-full border-2 border-white border-t-transparent"
                                }), "Generating..."]
                            }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                children: [jsxRuntimeExports.jsx(Download, {
                                    className: "w-4 h-4 mr-2"
                                }), "Download PDF"]
                            })
                        })]
                    })]
                })
            }), jsxRuntimeExports.jsx("div", {
                className: "flex-1 p-4 md:p-6",
                children: jsxRuntimeExports.jsxs(ResizablePanelGroup, {
                    direction: "horizontal",
                    className: "h-[calc(100vh-20rem)] bg-white rounded-lg shadow-sm",
                    children: [jsxRuntimeExports.jsx(ResizablePanel, {
                        defaultSize: _ ? 30 : 50,
                        minSize: 25,
                        children: jsxRuntimeExports.jsx("div", {
                            className: "h-full pr-3",
                            children: jsxRuntimeExports.jsx(ScrollArea, {
                                className: "h-full",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-4 md:space-y-6 pb-32",
                                    children: [jsxRuntimeExports.jsx(motion.div, {
                                        initial: {
                                            opacity: 0,
                                            y: 20
                                        },
                                        animate: {
                                            opacity: 1,
                                            y: 0
                                        },
                                        transition: {
                                            duration: .3
                                        },
                                        children: jsxRuntimeExports.jsxs(Card, {
                                            className: "border-0 shadow-sm bg-white",
                                            children: [jsxRuntimeExports.jsxs(CardHeader, {
                                                className: "pb-4",
                                                children: [jsxRuntimeExports.jsxs("div", {
                                                    className: "flex items-center justify-between",
                                                    children: [jsxRuntimeExports.jsxs(CardTitle, {
                                                        className: "text-lg flex items-center gap-2",
                                                        children: [jsxRuntimeExports.jsx(Target, {
                                                            className: "w-5 h-5 text-primary"
                                                        }), "Resume Progress"]
                                                    }), jsxRuntimeExports.jsxs(Badge, {
                                                        variant: "outline",
                                                        className: "text-sm font-medium",
                                                        children: [bt.percentage, "% Complete"]
                                                    })]
                                                }), jsxRuntimeExports.jsx(Progress, {
                                                    value: bt.percentage,
                                                    className: "h-3"
                                                })]
                                            }), jsxRuntimeExports.jsx(CardContent, {
                                                children: jsxRuntimeExports.jsxs("div", {
                                                    className: "text-center py-4",
                                                    children: [jsxRuntimeExports.jsx("p", {
                                                        className: "text-sm text-gray-600 mb-3",
                                                        children: "Use the dock at the bottom to navigate between sections"
                                                    }), jsxRuntimeExports.jsx("div", {
                                                        className: "text-xs text-gray-500 space-y-1",
                                                        children: jsxRuntimeExports.jsx("div", {
                                                            className: "flex items-center justify-center gap-4",
                                                            children: jsxRuntimeExports.jsx("span", {
                                                                children: "← → : Navigate sections"
                                                            })
                                                        })
                                                    })]
                                                })
                                            })]
                                        })
                                    }), jsxRuntimeExports.jsx(AnimatePresence, {
                                        children: g < 80 && jsxRuntimeExports.jsx(motion.div, {
                                            initial: {
                                                opacity: 0,
                                                height: 0
                                            },
                                            animate: {
                                                opacity: 1,
                                                height: "auto"
                                            },
                                            exit: {
                                                opacity: 0,
                                                height: 0
                                            },
                                            children: jsxRuntimeExports.jsxs(Alert, {
                                                className: "border-amber-200 bg-amber-50",
                                                children: [jsxRuntimeExports.jsx(Zap, {
                                                    className: "h-4 w-4 text-amber-600"
                                                }), jsxRuntimeExports.jsxs(AlertDescription, {
                                                    className: "text-amber-800",
                                                    children: [jsxRuntimeExports.jsx("strong", {
                                                        children: "ATS Optimization Tips:"
                                                    }), g < 60 && " Add more detailed work experience descriptions.", Object.values(i.skills).flat().length < 5 && " Include more relevant skills.", !i.summary && " Write a compelling professional summary."]
                                                })]
                                            })
                                        })
                                    }), jsxRuntimeExports.jsx(motion.div, {
                                        initial: {
                                            opacity: 0,
                                            x: 20
                                        },
                                        animate: {
                                            opacity: 1,
                                            x: 0
                                        },
                                        transition: {
                                            duration: .3
                                        },
                                        children: jsxRuntimeExports.jsxs(Card, {
                                            className: "border-0 shadow-sm bg-white",
                                            children: [jsxRuntimeExports.jsx(CardHeader, {
                                                children: jsxRuntimeExports.jsxs(CardTitle, {
                                                    className: "flex items-center gap-2",
                                                    children: [( () => {
                                                        const xt = SECTION_CONFIGS.find(Pt => Pt.id === d)
                                                          , Et = (xt == null ? void 0 : xt.icon) || FileText;
                                                        return jsxRuntimeExports.jsx(Et, {
                                                            className: "w-5 h-5 text-primary"
                                                        })
                                                    }
                                                    )(), ((jt = SECTION_CONFIGS.find(xt => xt.id === d)) == null ? void 0 : jt.label) || "Section"]
                                                })
                                            }), jsxRuntimeExports.jsx(CardContent, {
                                                children: Nt()
                                            })]
                                        })
                                    }, d), jsxRuntimeExports.jsxs("div", {
                                        className: "flex flex-col md:flex-row gap-3",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            className: "md:hidden space-y-2",
                                            children: [jsxRuntimeExports.jsx(MobileButton, {
                                                onClick: kt,
                                                variant: "outline",
                                                className: "w-full",
                                                icon: RotateCcw,
                                                children: "Reset Form"
                                            }), jsxRuntimeExports.jsx(MobileButton, {
                                                className: "w-full",
                                                onClick: () => {
                                                    localStorage.setItem("enhanced_resume_data", JSON.stringify(i)),
                                                    localStorage.setItem("enhanced_resume_settings", JSON.stringify(a)),
                                                    et(new Date)
                                                }
                                                ,
                                                icon: Save,
                                                children: "Save Draft"
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "hidden md:flex gap-3 flex-1",
                                            children: [jsxRuntimeExports.jsx(InteractiveHoverButton, {
                                                onClick: kt,
                                                className: "flex-1",
                                                children: "↻ Reset Form"
                                            }), jsxRuntimeExports.jsx(ShinyButton, {
                                                className: "flex-1",
                                                onClick: () => {
                                                    localStorage.setItem("enhanced_resume_data", JSON.stringify(i)),
                                                    localStorage.setItem("enhanced_resume_settings", JSON.stringify(a)),
                                                    et(new Date)
                                                }
                                                ,
                                                children: "💾 Save Draft"
                                            })]
                                        })]
                                    })]
                                })
                            })
                        })
                    }), jsxRuntimeExports.jsx(ResizableHandle, {
                        withHandle: !0
                    }), jsxRuntimeExports.jsx(ResizablePanel, {
                        defaultSize: _ ? 70 : 50,
                        minSize: 30,
                        children: jsxRuntimeExports.jsx("div", {
                            className: "h-full pl-3",
                            children: jsxRuntimeExports.jsxs(Card, {
                                className: "h-full border-0 shadow-lg bg-white/80 backdrop-blur-sm",
                                children: [jsxRuntimeExports.jsx(CardHeader, {
                                    className: "pb-4",
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center justify-between",
                                        children: [jsxRuntimeExports.jsxs(CardTitle, {
                                            className: "flex items-center gap-2",
                                            children: [jsxRuntimeExports.jsx(Eye, {
                                                className: "w-5 h-5 text-blue-600"
                                            }), "Live Preview"]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-3",
                                            children: [jsxRuntimeExports.jsxs("div", {
                                                className: "flex items-center gap-2",
                                                children: [jsxRuntimeExports.jsx("span", {
                                                    className: "text-sm text-gray-600",
                                                    children: "Scale:"
                                                }), jsxRuntimeExports.jsx(Slider, {
                                                    value: [at],
                                                    onValueChange: ([xt]) => ht(xt),
                                                    min: .5,
                                                    max: 1.2,
                                                    step: .1,
                                                    className: "w-20"
                                                }), jsxRuntimeExports.jsxs("span", {
                                                    className: "text-sm text-gray-600 w-12",
                                                    children: [Math.round(at * 100), "%"]
                                                })]
                                            }), jsxRuntimeExports.jsxs("div", {
                                                className: "flex items-center gap-1",
                                                children: [jsxRuntimeExports.jsx(Button, {
                                                    variant: "outline",
                                                    size: "sm",
                                                    onClick: () => ht(.5),
                                                    className: "px-2 py-1 text-xs",
                                                    children: "50%"
                                                }), jsxRuntimeExports.jsx(Button, {
                                                    variant: "outline",
                                                    size: "sm",
                                                    onClick: () => ht(.75),
                                                    className: "px-2 py-1 text-xs",
                                                    children: "75%"
                                                }), jsxRuntimeExports.jsx(Button, {
                                                    variant: "outline",
                                                    size: "sm",
                                                    onClick: () => ht(1),
                                                    className: "px-2 py-1 text-xs",
                                                    children: "100%"
                                                }), jsxRuntimeExports.jsx(Button, {
                                                    variant: "outline",
                                                    size: "sm",
                                                    onClick: () => ht(1.2),
                                                    className: "px-2 py-1 text-xs",
                                                    children: "120%"
                                                })]
                                            })]
                                        })]
                                    })
                                }), jsxRuntimeExports.jsx(CardContent, {
                                    className: "flex-1 p-0",
                                    children: jsxRuntimeExports.jsx(ScrollArea, {
                                        className: "h-[calc(100%-4rem)]",
                                        children: jsxRuntimeExports.jsx("div", {
                                            className: "p-6",
                                            children: jsxRuntimeExports.jsx(motion.div, {
                                                ref: wt,
                                                style: {
                                                    transform: `scale(${at})`,
                                                    transformOrigin: "top left"
                                                },
                                                initial: {
                                                    opacity: 0
                                                },
                                                animate: {
                                                    opacity: 1
                                                },
                                                transition: {
                                                    duration: .5
                                                },
                                                children: jsxRuntimeExports.jsx(EnhancedResumePreview, {
                                                    data: i,
                                                    settings: a
                                                })
                                            })
                                        })
                                    })
                                })]
                            })
                        })
                    })]
                })
            }), jsxRuntimeExports.jsx(Dialog, {
                open: nt,
                onOpenChange: lt,
                children: jsxRuntimeExports.jsxs(DialogContent, {
                    className: "max-w-2xl max-h-[80vh] overflow-y-auto",
                    children: [jsxRuntimeExports.jsx(DialogHeader, {
                        children: jsxRuntimeExports.jsxs(DialogTitle, {
                            className: "flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(Settings, {
                                className: "w-5 h-5"
                            }), "Resume Settings"]
                        })
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-6 mt-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "space-y-3",
                            children: [jsxRuntimeExports.jsx("label", {
                                className: "text-sm font-medium",
                                children: "Template"
                            }), jsxRuntimeExports.jsxs(Select, {
                                value: a.template,
                                onValueChange: xt => zt({
                                    template: xt
                                }),
                                children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                    children: jsxRuntimeExports.jsx(SelectValue, {})
                                }), jsxRuntimeExports.jsx(SelectContent, {
                                    children: jsxRuntimeExports.jsx(SelectItem, {
                                        value: "perfect-fit",
                                        children: "Software Engineer (Recommended)"
                                    })
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "space-y-3",
                                children: [jsxRuntimeExports.jsxs("label", {
                                    className: "text-sm font-medium",
                                    children: ["Font Size: ", a.fontSize, "pt"]
                                }), jsxRuntimeExports.jsx(Slider, {
                                    value: [a.fontSize],
                                    onValueChange: ([xt]) => zt({
                                        fontSize: xt
                                    }),
                                    min: 8,
                                    max: 16,
                                    step: .5
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex justify-between text-xs text-gray-500",
                                    children: [jsxRuntimeExports.jsx("span", {
                                        children: "8pt"
                                    }), jsxRuntimeExports.jsx("span", {
                                        children: "12pt"
                                    }), jsxRuntimeExports.jsx("span", {
                                        children: "16pt"
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "p-4 border rounded-lg bg-gray-50",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "text-sm font-medium text-gray-700 mb-2",
                                    children: "Font Preview"
                                }), jsxRuntimeExports.jsxs("div", {
                                    style: {
                                        fontFamily: a.fontFamily === "Inter" ? "Inter, sans-serif" : a.fontFamily === "Roboto" ? "Roboto, sans-serif" : a.fontFamily === "Open Sans" ? '"Open Sans", sans-serif' : a.fontFamily === "Lato" ? "Lato, sans-serif" : a.fontFamily === "Arial" ? "Arial, sans-serif" : a.fontFamily === "Times New Roman" ? '"Times New Roman", serif' : a.fontFamily === "Georgia" ? "Georgia, serif" : "Inter, sans-serif",
                                        fontSize: `${a.fontSize}pt`,
                                        lineHeight: a.spacing === "compact" ? 1.3 : a.spacing === "relaxed" ? 1.6 : 1.4
                                    },
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "font-bold mb-1",
                                        children: "John Doe"
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "text-sm",
                                        children: "Software Engineer with 5+ years of experience in full-stack development."
                                    })]
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-3",
                            children: [jsxRuntimeExports.jsx("label", {
                                className: "text-sm font-medium",
                                children: "Line Spacing"
                            }), jsxRuntimeExports.jsxs(Select, {
                                value: a.spacing,
                                onValueChange: xt => zt({
                                    spacing: xt
                                }),
                                children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                    children: jsxRuntimeExports.jsx(SelectValue, {})
                                }), jsxRuntimeExports.jsxs(SelectContent, {
                                    children: [jsxRuntimeExports.jsx(SelectItem, {
                                        value: "compact",
                                        children: "Compact (1.3)"
                                    }), jsxRuntimeExports.jsx(SelectItem, {
                                        value: "normal",
                                        children: "Normal (1.4) (Recommended)"
                                    }), jsxRuntimeExports.jsx(SelectItem, {
                                        value: "relaxed",
                                        children: "Relaxed (1.6)"
                                    })]
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-3",
                            children: [jsxRuntimeExports.jsx("label", {
                                className: "text-sm font-medium",
                                children: "Color Scheme"
                            }), jsxRuntimeExports.jsx("div", {
                                className: "grid grid-cols-4 gap-2",
                                children: ["blue", "green", "purple", "red", "orange", "teal", "pink", "indigo"].map(xt => jsxRuntimeExports.jsxs(Button, {
                                    variant: a.colorScheme === xt ? "default" : "outline",
                                    size: "sm",
                                    onClick: () => zt({
                                        colorScheme: xt
                                    }),
                                    className: `capitalize ${a.colorScheme === xt ? `bg-${xt}-600` : ""}`,
                                    children: [xt, xt === "pink" && " (Recommended)"]
                                }, xt))
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-4 pt-4 border-t",
                            children: [jsxRuntimeExports.jsx("h4", {
                                className: "text-sm font-semibold text-gray-900",
                                children: "Advanced Settings"
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-3",
                                children: [jsxRuntimeExports.jsx("label", {
                                    className: "text-sm font-medium",
                                    children: "Page Margins"
                                }), jsxRuntimeExports.jsxs(Select, {
                                    value: a.margins || "normal",
                                    onValueChange: xt => zt({
                                        margins: xt
                                    }),
                                    children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                        children: jsxRuntimeExports.jsx(SelectValue, {})
                                    }), jsxRuntimeExports.jsxs(SelectContent, {
                                        children: [jsxRuntimeExports.jsx(SelectItem, {
                                            value: "narrow",
                                            children: "Narrow (0.5 inch)"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "normal",
                                            children: "Normal (0.75 inch) (Recommended)"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "wide",
                                            children: "Wide (1 inch)"
                                        })]
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-3",
                                children: [jsxRuntimeExports.jsx("label", {
                                    className: "text-sm font-medium",
                                    children: "Header Style"
                                }), jsxRuntimeExports.jsxs(Select, {
                                    value: a.headerStyle || "modern",
                                    onValueChange: xt => zt({
                                        headerStyle: xt
                                    }),
                                    children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                        children: jsxRuntimeExports.jsx(SelectValue, {})
                                    }), jsxRuntimeExports.jsxs(SelectContent, {
                                        children: [jsxRuntimeExports.jsx(SelectItem, {
                                            value: "classic",
                                            children: "Classic (Left-aligned)"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "centered",
                                            children: "Centered"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "modern",
                                            children: "Modern (Split layout) (Recommended)"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "split-balanced",
                                            children: "Split Balanced (Equal columns)"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "split-contact-right",
                                            children: "Split Contact (Contact info right)"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "split-contact-left",
                                            children: "Split Contact (Contact info left)"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "minimalist",
                                            children: "Minimalist (Clean spacing)"
                                        })]
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-3",
                                children: [jsxRuntimeExports.jsxs("label", {
                                    className: "text-sm font-medium",
                                    children: ["Section Spacing: ", a.sectionSpacing || 16, "px"]
                                }), jsxRuntimeExports.jsx(Slider, {
                                    value: [a.sectionSpacing || 16],
                                    onValueChange: ([xt]) => zt({
                                        sectionSpacing: xt
                                    }),
                                    min: 8,
                                    max: 32,
                                    step: 2
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex justify-between text-xs text-gray-500",
                                    children: [jsxRuntimeExports.jsx("span", {
                                        children: "Tight"
                                    }), jsxRuntimeExports.jsx("span", {
                                        children: "Normal"
                                    }), jsxRuntimeExports.jsx("span", {
                                        children: "Loose"
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-between",
                                children: [jsxRuntimeExports.jsx("label", {
                                    className: "text-sm font-medium",
                                    children: "Section Dividers"
                                }), jsxRuntimeExports.jsx(Switch, {
                                    checked: a.showDividers !== !1,
                                    onCheckedChange: xt => zt({
                                        showDividers: xt
                                    })
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-3",
                                children: [jsxRuntimeExports.jsx("label", {
                                    className: "text-sm font-medium",
                                    children: "Bullet Point Style"
                                }), jsxRuntimeExports.jsxs(Select, {
                                    value: a.bulletStyle || "bullet",
                                    onValueChange: xt => zt({
                                        bulletStyle: xt
                                    }),
                                    children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                        children: jsxRuntimeExports.jsx(SelectValue, {})
                                    }), jsxRuntimeExports.jsxs(SelectContent, {
                                        children: [jsxRuntimeExports.jsx(SelectItem, {
                                            value: "bullet",
                                            children: "• Bullet (Recommended)"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "dash",
                                            children: "- Dash"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "arrow",
                                            children: "→ Arrow"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "chevron",
                                            children: "› Chevron"
                                        })]
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-3",
                                children: [jsxRuntimeExports.jsx("label", {
                                    className: "text-sm font-medium",
                                    children: "Text Alignment"
                                }), jsxRuntimeExports.jsxs(Select, {
                                    value: a.textAlign || "left",
                                    onValueChange: xt => zt({
                                        textAlign: xt
                                    }),
                                    children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                        children: jsxRuntimeExports.jsx(SelectValue, {})
                                    }), jsxRuntimeExports.jsxs(SelectContent, {
                                        children: [jsxRuntimeExports.jsx(SelectItem, {
                                            value: "left",
                                            children: "Left Aligned (Recommended)"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "justify",
                                            children: "Justified"
                                        })]
                                    })]
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-4 pt-4 border-t",
                            children: [jsxRuntimeExports.jsx("h4", {
                                className: "text-sm font-semibold text-gray-900",
                                children: "Theme Presets"
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "grid grid-cols-2 gap-3",
                                children: [jsxRuntimeExports.jsx(Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: () => zt({
                                        fontFamily: "Times New Roman",
                                        fontSize: 11,
                                        spacing: "normal",
                                        colorScheme: "blue",
                                        margins: "normal",
                                        headerStyle: "classic"
                                    }),
                                    className: "justify-start",
                                    children: "📄 Traditional"
                                }), jsxRuntimeExports.jsx(Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: () => zt({
                                        fontFamily: "Inter",
                                        fontSize: 10,
                                        spacing: "compact",
                                        colorScheme: "indigo",
                                        margins: "narrow",
                                        headerStyle: "modern"
                                    }),
                                    className: "justify-start",
                                    children: "🚀 Modern (Recommended)"
                                }), jsxRuntimeExports.jsx(Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: () => zt({
                                        fontFamily: "Georgia",
                                        fontSize: 12,
                                        spacing: "relaxed",
                                        colorScheme: "green",
                                        margins: "wide",
                                        headerStyle: "centered"
                                    }),
                                    className: "justify-start",
                                    children: "🎨 Creative"
                                }), jsxRuntimeExports.jsx(Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: () => zt({
                                        fontFamily: "Arial",
                                        fontSize: 9,
                                        spacing: "compact",
                                        colorScheme: "purple",
                                        margins: "narrow",
                                        headerStyle: "minimalist"
                                    }),
                                    className: "justify-start",
                                    children: "💼 Executive"
                                })]
                            })]
                        })]
                    })]
                })
            }), jsxRuntimeExports.jsx(Dialog, {
                open: dt,
                onOpenChange: ot,
                children: jsxRuntimeExports.jsxs(DialogContent, {
                    className: "max-w-md max-h-[80vh] overflow-y-auto",
                    children: [jsxRuntimeExports.jsx(DialogHeader, {
                        children: jsxRuntimeExports.jsxs(DialogTitle, {
                            className: "flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(PanelsTopLeft, {
                                className: "w-5 h-5"
                            }), "Manage Resume Sections"]
                        })
                    }), jsxRuntimeExports.jsx("div", {
                        className: "space-y-6 mt-4",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "space-y-3",
                            children: [jsxRuntimeExports.jsx("p", {
                                className: "text-sm text-gray-600",
                                children: "Enable or disable sections to customize your resume. The Resume Copilot section is always enabled to help you optimize your resume."
                            }), jsxRuntimeExports.jsx("div", {
                                className: "grid grid-cols-1 gap-3",
                                children: SECTION_CONFIGS.map(xt => jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between p-3 border rounded-lg",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(xt.icon, {
                                            className: "w-4 h-4"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "text-sm",
                                            children: xt.label
                                        })]
                                    }), jsxRuntimeExports.jsx(Switch, {
                                        checked: a.enabledSections[xt.id],
                                        onCheckedChange: () => At(xt.id),
                                        disabled: xt.id === "personal" || xt.id === "ai"
                                    })]
                                }, xt.id))
                            })]
                        })
                    })]
                })
            }), jsxRuntimeExports.jsx(Dialog, {
                open: _e,
                onOpenChange: tt,
                children: jsxRuntimeExports.jsxs(DialogContent, {
                    className: "max-w-[95vw] max-h-[95vh] w-full h-full p-0",
                    children: [jsxRuntimeExports.jsx(DialogHeader, {
                        className: "p-6 pb-0",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between",
                            children: [jsxRuntimeExports.jsxs(DialogTitle, {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(Eye, {
                                    className: "w-5 h-5"
                                }), "Fullscreen Preview"]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx("span", {
                                        className: "text-sm text-gray-600",
                                        children: "Scale:"
                                    }), jsxRuntimeExports.jsx(Slider, {
                                        value: [at],
                                        onValueChange: ([xt]) => ht(xt),
                                        min: .3,
                                        max: 1.5,
                                        step: .1,
                                        className: "w-24"
                                    }), jsxRuntimeExports.jsxs("span", {
                                        className: "text-sm text-gray-600 w-12",
                                        children: [Math.round(at * 100), "%"]
                                    })]
                                }), jsxRuntimeExports.jsx(Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: () => ht(1),
                                    children: "Reset Zoom"
                                }), jsxRuntimeExports.jsx(Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: vt,
                                    disabled: it,
                                    className: "bg-primary hover:bg-primary/90",
                                    children: it ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-4 h-4 mr-2 animate-spin rounded-full border-2 border-gray-600 border-t-transparent"
                                        }), "Generating..."]
                                    }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                        children: [jsxRuntimeExports.jsx(Download, {
                                            className: "w-4 h-4 mr-2"
                                        }), "Download PDF"]
                                    })
                                })]
                            })]
                        })
                    }), jsxRuntimeExports.jsx("div", {
                        className: "flex-1 p-6 pt-4",
                        children: jsxRuntimeExports.jsx(ScrollArea, {
                            className: "h-[calc(95vh-8rem)]",
                            children: jsxRuntimeExports.jsx("div", {
                                className: "flex justify-center",
                                children: jsxRuntimeExports.jsx(motion.div, {
                                    style: {
                                        transform: `scale(${at})`,
                                        transformOrigin: "top center",
                                        marginBottom: `${(1 - at) * 500}px`
                                    },
                                    initial: {
                                        opacity: 0
                                    },
                                    animate: {
                                        opacity: 1
                                    },
                                    transition: {
                                        duration: .5
                                    },
                                    children: jsxRuntimeExports.jsx(EnhancedResumePreview, {
                                        data: i,
                                        settings: a
                                    })
                                })
                            })
                        })
                    })]
                })
            }), pt && jsxRuntimeExports.jsx("div", {
                className: "fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4",
                onClick: xt => {
                    xt.target === xt.currentTarget && gt(!1)
                }
                ,
                children: jsxRuntimeExports.jsx("div", {
                    className: "bg-white rounded-lg shadow-xl w-full max-w-7xl h-[90vh] flex flex-col",
                    children: jsxRuntimeExports.jsx(CoverLetterGenerator, {
                        resumeData: i,
                        onClose: () => gt(!1)
                    })
                })
            }), !pt && jsxRuntimeExports.jsx(ResumeSectionDock, {
                sections: SECTION_CONFIGS,
                activeSection: d,
                onSectionChange: h,
                completedSections: Yt(),
                enabledSections: a.enabledSections
            })]
        })
    })
}
  , Breadcrumb = reactExports.forwardRef( ({...s}, e) => jsxRuntimeExports.jsx("nav", {
    ref: e,
    "aria-label": "breadcrumb",
    ...s
}));
Breadcrumb.displayName = "Breadcrumb";
const BreadcrumbList = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx("ol", {
    ref: i,
    className: cn("flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5", s),
    ...e
}));
BreadcrumbList.displayName = "BreadcrumbList";
const BreadcrumbItem = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx("li", {
    ref: i,
    className: cn("inline-flex items-center gap-1.5", s),
    ...e
}));
BreadcrumbItem.displayName = "BreadcrumbItem";
const BreadcrumbLink = reactExports.forwardRef( ({asChild: s, className: e, ...i}, o) => {
    const a = s ? Slot : "a";
    return jsxRuntimeExports.jsx(a, {
        ref: o,
        className: cn("transition-colors hover:text-foreground", e),
        ...i
    })
}
);
BreadcrumbLink.displayName = "BreadcrumbLink";
const BreadcrumbPage = reactExports.forwardRef( ({className: s, ...e}, i) => jsxRuntimeExports.jsx("span", {
    ref: i,
    role: "link",
    "aria-disabled": "true",
    "aria-current": "page",
    className: cn("font-normal text-foreground", s),
    ...e
}));
BreadcrumbPage.displayName = "BreadcrumbPage";
const ResumeBuilder = () => {
    const s = useNavigate()
      , e = () => {
        s("/dashboard")
    }
    ;
    return jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50/30 md:flex",
        children: [jsxRuntimeExports.jsx(NewSidebar, {}), jsxRuntimeExports.jsxs("div", {
            className: "flex-1 flex flex-col min-h-screen w-full",
            children: [jsxRuntimeExports.jsx("header", {
                className: "hidden md:flex h-16 shrink-0 items-center gap-2 bg-white/80 backdrop-blur-sm border-b border-gray-200/60",
                children: jsxRuntimeExports.jsx("div", {
                    className: "flex items-center gap-2 px-6",
                    children: jsxRuntimeExports.jsx(Breadcrumb, {
                        children: jsxRuntimeExports.jsx(BreadcrumbList, {
                            children: jsxRuntimeExports.jsx(BreadcrumbItem, {
                                children: jsxRuntimeExports.jsxs(BreadcrumbPage, {
                                    className: "font-semibold flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(FileText, {
                                        className: "w-4 h-4"
                                    }), "Resume Builder"]
                                })
                            })
                        })
                    })
                })
            }), jsxRuntimeExports.jsx("header", {
                className: "md:hidden sticky top-12 z-20 bg-white/95 backdrop-blur-sm border-b border-gray-200/60 shadow-sm",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between p-3",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(MobileButton, {
                            onClick: e,
                            variant: "ghost",
                            size: "sm",
                            icon: ArrowLeft,
                            className: "h-8 w-8 p-0",
                            children: jsxRuntimeExports.jsx("span", {
                                className: "sr-only",
                                children: "Back"
                            })
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-1.5",
                            children: [jsxRuntimeExports.jsx(FileText, {
                                className: "w-4 h-4 text-primary"
                            }), jsxRuntimeExports.jsx("h1", {
                                className: "font-semibold mobile-body text-gray-900",
                                children: "Resume Builder"
                            })]
                        })]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "flex items-center gap-1.5",
                        children: jsxRuntimeExports.jsxs(Button, {
                            onClick: e,
                            variant: "outline",
                            size: "sm",
                            className: "hidden sm:flex",
                            children: [jsxRuntimeExports.jsx(ArrowLeft, {
                                className: "w-4 h-4 mr-2"
                            }), "Back"]
                        })
                    })]
                })
            }), jsxRuntimeExports.jsx("div", {
                className: "flex-1",
                children: jsxRuntimeExports.jsx(EnhancedResumeBuilder, {
                    template: "perfect-fit",
                    onBack: e
                })
            })]
        })]
    })
}
  , ResumeChoice = () => {
    const s = useNavigate()
      , e = () => {
        s("/resume-import")
    }
      , i = () => {
        localStorage.removeItem("parsedResumeData"),
        s("/resume-builder-form")
    }
    ;
    return jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50/30 md:flex",
        children: [jsxRuntimeExports.jsx(NewSidebar, {}), jsxRuntimeExports.jsxs("div", {
            className: "flex-1 flex flex-col max-h-screen overflow-hidden w-full",
            children: [jsxRuntimeExports.jsxs("header", {
                className: "hidden md:flex h-16 shrink-0 items-center gap-2 bg-white/80 backdrop-blur-sm border-b border-gray-200/60",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "flex items-center gap-2 px-6",
                    children: jsxRuntimeExports.jsx(Breadcrumb, {
                        children: jsxRuntimeExports.jsx(BreadcrumbList, {
                            children: jsxRuntimeExports.jsx(BreadcrumbItem, {
                                children: jsxRuntimeExports.jsxs(BreadcrumbPage, {
                                    className: "font-semibold flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(FileText, {
                                        className: "w-4 h-4"
                                    }), "Resume Builder"]
                                })
                            })
                        })
                    })
                }), jsxRuntimeExports.jsx("div", {
                    className: "ml-auto mr-6",
                    children: jsxRuntimeExports.jsx(Badge, {
                        variant: "outline",
                        className: "bg-pink-50 text-pink-700 border-pink-200",
                        children: "AI-Powered"
                    })
                })]
            }), jsxRuntimeExports.jsx("div", {
                className: "flex-1 overflow-y-auto",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "max-w-6xl mx-auto px-6 py-12",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "text-center mb-12",
                        children: [jsxRuntimeExports.jsx("h2", {
                            className: "text-3xl font-bold text-gray-900 mb-4",
                            children: "How would you like to get started?"
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-lg text-gray-600 max-w-2xl mx-auto",
                            children: "Choose the option that works best for you. Both paths use AI to help you create an ATS-optimized resume."
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "grid md:grid-cols-2 gap-8 max-w-4xl mx-auto",
                        children: [jsxRuntimeExports.jsx(motion.div, {
                            initial: {
                                opacity: 0,
                                y: 20
                            },
                            animate: {
                                opacity: 1,
                                y: 0
                            },
                            transition: {
                                duration: .5
                            },
                            children: jsxRuntimeExports.jsxs(Card, {
                                className: "h-full border-0 shadow-xl bg-white/90 backdrop-blur-sm hover:shadow-2xl transition-all duration-300 group cursor-pointer",
                                onClick: e,
                                children: [jsxRuntimeExports.jsxs(CardHeader, {
                                    className: "text-center pb-6",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "mx-auto w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300",
                                        children: jsxRuntimeExports.jsx(Upload, {
                                            className: "w-8 h-8 text-white"
                                        })
                                    }), jsxRuntimeExports.jsx(CardTitle, {
                                        className: "text-xl font-bold text-gray-900",
                                        children: "Import Existing Resume"
                                    }), jsxRuntimeExports.jsx(CardDescription, {
                                        className: "text-base",
                                        children: "Upload your current resume and let AI enhance it"
                                    })]
                                }), jsxRuntimeExports.jsxs(CardContent, {
                                    className: "space-y-6",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "space-y-3",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-3",
                                            children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                                                className: "w-5 h-5 text-green-600 flex-shrink-0"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "text-gray-700",
                                                children: "AI-powered content extraction"
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-3",
                                            children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                                                className: "w-5 h-5 text-green-600 flex-shrink-0"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "text-gray-700",
                                                children: "Automatic formatting optimization"
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-3",
                                            children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                                                className: "w-5 h-5 text-green-600 flex-shrink-0"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "text-gray-700",
                                                children: "ATS compatibility improvements"
                                            })]
                                        })]
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "pt-4",
                                        children: jsxRuntimeExports.jsxs(ShimmerButton, {
                                            className: "w-full",
                                            background: "linear-gradient(110deg,rgb(123, 62, 208) 0%,rgb(110, 35, 240) 50%,rgb(77, 84, 212) 100%)",
                                            onClick: e,
                                            children: ["Upload Resume", jsxRuntimeExports.jsx(ArrowRight, {
                                                className: "w-4 h-4 ml-2"
                                            })]
                                        })
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center justify-center gap-2 text-sm text-gray-500",
                                        children: [jsxRuntimeExports.jsx(Clock, {
                                            className: "w-4 h-4"
                                        }), jsxRuntimeExports.jsx("span", {
                                            children: "Takes 2-3 minutes"
                                        })]
                                    })]
                                })]
                            })
                        }), jsxRuntimeExports.jsx(motion.div, {
                            initial: {
                                opacity: 0,
                                y: 20
                            },
                            animate: {
                                opacity: 1,
                                y: 0
                            },
                            transition: {
                                duration: .5,
                                delay: .1
                            },
                            children: jsxRuntimeExports.jsxs(Card, {
                                className: "h-full border-0 shadow-xl bg-white/90 backdrop-blur-sm hover:shadow-2xl transition-all duration-300 group cursor-pointer",
                                onClick: i,
                                children: [jsxRuntimeExports.jsxs(CardHeader, {
                                    className: "text-center pb-6",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "mx-auto w-16 h-16 bg-gradient-to-br from-green-500 to-teal-600 rounded-full flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300",
                                        children: jsxRuntimeExports.jsx(FileText, {
                                            className: "w-8 h-8 text-white"
                                        })
                                    }), jsxRuntimeExports.jsx(CardTitle, {
                                        className: "text-xl font-bold text-gray-900",
                                        children: "Build from Scratch"
                                    }), jsxRuntimeExports.jsx(CardDescription, {
                                        className: "text-base",
                                        children: "Create a new resume with AI guidance"
                                    })]
                                }), jsxRuntimeExports.jsxs(CardContent, {
                                    className: "space-y-6",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "space-y-3",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-3",
                                            children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                                                className: "w-5 h-5 text-green-600 flex-shrink-0"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "text-gray-700",
                                                children: "Step-by-step guided process"
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-3",
                                            children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                                                className: "w-5 h-5 text-green-600 flex-shrink-0"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "text-gray-700",
                                                children: "AI-generated content suggestions"
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-3",
                                            children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                                                className: "w-5 h-5 text-green-600 flex-shrink-0"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "text-gray-700",
                                                children: "Professional templates"
                                            })]
                                        })]
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "pt-4",
                                        children: jsxRuntimeExports.jsxs(ShimmerButton, {
                                            className: "w-full",
                                            background: "linear-gradient(110deg, #059669 0%, #047857 50%, #059669 100%)",
                                            onClick: i,
                                            children: ["Start Building", jsxRuntimeExports.jsx(ArrowRight, {
                                                className: "w-4 h-4 ml-2"
                                            })]
                                        })
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center justify-center gap-2 text-sm text-gray-500",
                                        children: [jsxRuntimeExports.jsx(Clock, {
                                            className: "w-4 h-4"
                                        }), jsxRuntimeExports.jsx("span", {
                                            children: "Takes 10-15 minutes"
                                        })]
                                    })]
                                })]
                            })
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "mt-16 text-center",
                        children: [jsxRuntimeExports.jsx("h3", {
                            className: "text-xl font-semibold text-gray-900 mb-8",
                            children: "Why choose our AI Resume Builder?"
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "grid md:grid-cols-3 gap-6 max-w-3xl mx-auto",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex flex-col items-center text-center",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "w-12 h-12 bg-pink-100 rounded-full flex items-center justify-center mb-3",
                                    children: jsxRuntimeExports.jsx(Brain, {
                                        className: "w-6 h-6 text-pink-600"
                                    })
                                }), jsxRuntimeExports.jsx("h4", {
                                    className: "font-semibold text-gray-900 mb-2",
                                    children: "AI-Powered"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-sm text-gray-600",
                                    children: "Advanced AI analyzes job descriptions and optimizes your content"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex flex-col items-center text-center",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "w-12 h-12 bg-pink-100 rounded-full flex items-center justify-center mb-3",
                                    children: jsxRuntimeExports.jsx(Target, {
                                        className: "w-6 h-6 text-pink-600"
                                    })
                                }), jsxRuntimeExports.jsx("h4", {
                                    className: "font-semibold text-gray-900 mb-2",
                                    children: "ATS-Optimized"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-sm text-gray-600",
                                    children: "Ensures your resume passes through applicant tracking systems"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex flex-col items-center text-center",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "w-12 h-12 bg-pink-100 rounded-full flex items-center justify-center mb-3",
                                    children: jsxRuntimeExports.jsx(Zap, {
                                        className: "w-6 h-6 text-pink-600"
                                    })
                                }), jsxRuntimeExports.jsx("h4", {
                                    className: "font-semibold text-gray-900 mb-2",
                                    children: "Fast & Easy"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-sm text-gray-600",
                                    children: "Create professional resumes in minutes, not hours"
                                })]
                            })]
                        })]
                    })]
                })
            })]
        })]
    })
}
;
function commonjsRequire(s) {
    throw new Error('Could not dynamically require "' + s + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')
}
var pdf = {
    exports: {}
};
const __viteBrowserExternal = {}
  , __viteBrowserExternal$1 = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: __viteBrowserExternal
}, Symbol.toStringTag, {
    value: "Module"
}))
  , require$$5 = getAugmentedNamespace(__viteBrowserExternal$1);
(function(module, exports) {
    (function(e, i) {
        module.exports = e.pdfjsLib = i()
    }
    )(globalThis, () => ( () => {
        var __webpack_modules__ = [, (s, e) => {
            var sr;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.VerbosityLevel = e.Util = e.UnknownErrorException = e.UnexpectedResponseException = e.TextRenderingMode = e.RenderingIntentFlag = e.PromiseCapability = e.PermissionFlag = e.PasswordResponses = e.PasswordException = e.PageActionEventType = e.OPS = e.MissingPDFException = e.MAX_IMAGE_SIZE_TO_CACHE = e.LINE_FACTOR = e.LINE_DESCENT_FACTOR = e.InvalidPDFException = e.ImageKind = e.IDENTITY_MATRIX = e.FormatError = e.FeatureTest = e.FONT_IDENTITY_MATRIX = e.DocumentActionEventType = e.CMapCompressionType = e.BaseException = e.BASELINE_FACTOR = e.AnnotationType = e.AnnotationReplyType = e.AnnotationPrefix = e.AnnotationMode = e.AnnotationFlag = e.AnnotationFieldFlag = e.AnnotationEditorType = e.AnnotationEditorPrefix = e.AnnotationEditorParamsType = e.AnnotationBorderStyleType = e.AnnotationActionEventType = e.AbortException = void 0,
            e.assert = bt,
            e.bytesToString = js,
            e.createValidAbsoluteUrl = Yt,
            e.getModificationDate = Ms,
            e.getUuid = zs,
            e.getVerbosityLevel = zt,
            e.info = At,
            e.isArrayBuffer = ls,
            e.isArrayEqual = Ds,
            e.isNodeJS = void 0,
            e.normalizeUnicode = $s,
            e.objectFromMap = _s,
            e.objectSize = Ss,
            e.setVerbosityLevel = ss,
            e.shadow = Nt,
            e.string32 = vs,
            e.stringToBytes = ys,
            e.stringToPDFString = bs,
            e.stringToUTF8String = ks,
            e.unreachable = vt,
            e.utf8StringToString = Ts,
            e.warn = kt;
            const i = typeof process == "object" && process + "" == "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser");
            e.isNodeJS = i;
            const o = [1, 0, 0, 1, 0, 0];
            e.IDENTITY_MATRIX = o;
            const a = [.001, 0, 0, .001, 0, 0];
            e.FONT_IDENTITY_MATRIX = a;
            const c = 1e7;
            e.MAX_IMAGE_SIZE_TO_CACHE = c;
            const d = 1.35;
            e.LINE_FACTOR = d;
            const h = .35;
            e.LINE_DESCENT_FACTOR = h;
            const g = h / d;
            e.BASELINE_FACTOR = g;
            const b = {
                ANY: 1,
                DISPLAY: 2,
                PRINT: 4,
                SAVE: 8,
                ANNOTATIONS_FORMS: 16,
                ANNOTATIONS_STORAGE: 32,
                ANNOTATIONS_DISABLE: 64,
                OPLIST: 256
            };
            e.RenderingIntentFlag = b;
            const _ = {
                DISABLE: 0,
                ENABLE: 1,
                ENABLE_FORMS: 2,
                ENABLE_STORAGE: 3
            };
            e.AnnotationMode = _;
            const $ = "pdfjs_internal_editor_";
            e.AnnotationEditorPrefix = $;
            const _e = {
                DISABLE: -1,
                NONE: 0,
                FREETEXT: 3,
                STAMP: 13,
                INK: 15
            };
            e.AnnotationEditorType = _e;
            const tt = {
                RESIZE: 1,
                CREATE: 2,
                FREETEXT_SIZE: 11,
                FREETEXT_COLOR: 12,
                FREETEXT_OPACITY: 13,
                INK_COLOR: 21,
                INK_THICKNESS: 22,
                INK_OPACITY: 23
            };
            e.AnnotationEditorParamsType = tt;
            const rt = {
                PRINT: 4,
                MODIFY_CONTENTS: 8,
                COPY: 16,
                MODIFY_ANNOTATIONS: 32,
                FILL_INTERACTIVE_FORMS: 256,
                COPY_FOR_ACCESSIBILITY: 512,
                ASSEMBLE: 1024,
                PRINT_HIGH_QUALITY: 2048
            };
            e.PermissionFlag = rt;
            const et = {
                FILL: 0,
                STROKE: 1,
                FILL_STROKE: 2,
                INVISIBLE: 3,
                FILL_ADD_TO_PATH: 4,
                STROKE_ADD_TO_PATH: 5,
                FILL_STROKE_ADD_TO_PATH: 6,
                ADD_TO_PATH: 7,
                FILL_STROKE_MASK: 3,
                ADD_TO_PATH_FLAG: 4
            };
            e.TextRenderingMode = et;
            const it = {
                GRAYSCALE_1BPP: 1,
                RGB_24BPP: 2,
                RGBA_32BPP: 3
            };
            e.ImageKind = it;
            const st = {
                TEXT: 1,
                LINK: 2,
                FREETEXT: 3,
                LINE: 4,
                SQUARE: 5,
                CIRCLE: 6,
                POLYGON: 7,
                POLYLINE: 8,
                HIGHLIGHT: 9,
                UNDERLINE: 10,
                SQUIGGLY: 11,
                STRIKEOUT: 12,
                STAMP: 13,
                CARET: 14,
                INK: 15,
                POPUP: 16,
                FILEATTACHMENT: 17,
                SOUND: 18,
                MOVIE: 19,
                WIDGET: 20,
                SCREEN: 21,
                PRINTERMARK: 22,
                TRAPNET: 23,
                WATERMARK: 24,
                THREED: 25,
                REDACT: 26
            };
            e.AnnotationType = st;
            const nt = {
                GROUP: "Group",
                REPLY: "R"
            };
            e.AnnotationReplyType = nt;
            const lt = {
                INVISIBLE: 1,
                HIDDEN: 2,
                PRINT: 4,
                NOZOOM: 8,
                NOROTATE: 16,
                NOVIEW: 32,
                READONLY: 64,
                LOCKED: 128,
                TOGGLENOVIEW: 256,
                LOCKEDCONTENTS: 512
            };
            e.AnnotationFlag = lt;
            const dt = {
                READONLY: 1,
                REQUIRED: 2,
                NOEXPORT: 4,
                MULTILINE: 4096,
                PASSWORD: 8192,
                NOTOGGLETOOFF: 16384,
                RADIO: 32768,
                PUSHBUTTON: 65536,
                COMBO: 131072,
                EDIT: 262144,
                SORT: 524288,
                FILESELECT: 1048576,
                MULTISELECT: 2097152,
                DONOTSPELLCHECK: 4194304,
                DONOTSCROLL: 8388608,
                COMB: 16777216,
                RICHTEXT: 33554432,
                RADIOSINUNISON: 33554432,
                COMMITONSELCHANGE: 67108864
            };
            e.AnnotationFieldFlag = dt;
            const ot = {
                SOLID: 1,
                DASHED: 2,
                BEVELED: 3,
                INSET: 4,
                UNDERLINE: 5
            };
            e.AnnotationBorderStyleType = ot;
            const at = {
                E: "Mouse Enter",
                X: "Mouse Exit",
                D: "Mouse Down",
                U: "Mouse Up",
                Fo: "Focus",
                Bl: "Blur",
                PO: "PageOpen",
                PC: "PageClose",
                PV: "PageVisible",
                PI: "PageInvisible",
                K: "Keystroke",
                F: "Format",
                V: "Validate",
                C: "Calculate"
            };
            e.AnnotationActionEventType = at;
            const ht = {
                WC: "WillClose",
                WS: "WillSave",
                DS: "DidSave",
                WP: "WillPrint",
                DP: "DidPrint"
            };
            e.DocumentActionEventType = ht;
            const pt = {
                O: "PageOpen",
                C: "PageClose"
            };
            e.PageActionEventType = pt;
            const gt = {
                ERRORS: 0,
                WARNINGS: 1,
                INFOS: 5
            };
            e.VerbosityLevel = gt;
            const wt = {
                NONE: 0,
                BINARY: 1
            };
            e.CMapCompressionType = wt;
            const yt = {
                dependency: 1,
                setLineWidth: 2,
                setLineCap: 3,
                setLineJoin: 4,
                setMiterLimit: 5,
                setDash: 6,
                setRenderingIntent: 7,
                setFlatness: 8,
                setGState: 9,
                save: 10,
                restore: 11,
                transform: 12,
                moveTo: 13,
                lineTo: 14,
                curveTo: 15,
                curveTo2: 16,
                curveTo3: 17,
                closePath: 18,
                rectangle: 19,
                stroke: 20,
                closeStroke: 21,
                fill: 22,
                eoFill: 23,
                fillStroke: 24,
                eoFillStroke: 25,
                closeFillStroke: 26,
                closeEOFillStroke: 27,
                endPath: 28,
                clip: 29,
                eoClip: 30,
                beginText: 31,
                endText: 32,
                setCharSpacing: 33,
                setWordSpacing: 34,
                setHScale: 35,
                setLeading: 36,
                setFont: 37,
                setTextRenderingMode: 38,
                setTextRise: 39,
                moveText: 40,
                setLeadingMoveText: 41,
                setTextMatrix: 42,
                nextLine: 43,
                showText: 44,
                showSpacedText: 45,
                nextLineShowText: 46,
                nextLineSetSpacingShowText: 47,
                setCharWidth: 48,
                setCharWidthAndBounds: 49,
                setStrokeColorSpace: 50,
                setFillColorSpace: 51,
                setStrokeColor: 52,
                setStrokeColorN: 53,
                setFillColor: 54,
                setFillColorN: 55,
                setStrokeGray: 56,
                setFillGray: 57,
                setStrokeRGBColor: 58,
                setFillRGBColor: 59,
                setStrokeCMYKColor: 60,
                setFillCMYKColor: 61,
                shadingFill: 62,
                beginInlineImage: 63,
                beginImageData: 64,
                endInlineImage: 65,
                paintXObject: 66,
                markPoint: 67,
                markPointProps: 68,
                beginMarkedContent: 69,
                beginMarkedContentProps: 70,
                endMarkedContent: 71,
                beginCompat: 72,
                endCompat: 73,
                paintFormXObjectBegin: 74,
                paintFormXObjectEnd: 75,
                beginGroup: 76,
                endGroup: 77,
                beginAnnotation: 80,
                endAnnotation: 81,
                paintImageMaskXObject: 83,
                paintImageMaskXObjectGroup: 84,
                paintImageXObject: 85,
                paintInlineImageXObject: 86,
                paintInlineImageXObjectGroup: 87,
                paintImageXObjectRepeat: 88,
                paintImageMaskXObjectRepeat: 89,
                paintSolidColorImageMask: 90,
                constructPath: 91
            };
            e.OPS = yt;
            const Rt = {
                NEED_PASSWORD: 1,
                INCORRECT_PASSWORD: 2
            };
            e.PasswordResponses = Rt;
            let Mt = gt.WARNINGS;
            function ss(As) {
                Number.isInteger(As) && (Mt = As)
            }
            function zt() {
                return Mt
            }
            function At(As) {
                Mt >= gt.INFOS && console.log(`Info: ${As}`)
            }
            function kt(As) {
                Mt >= gt.WARNINGS && console.log(`Warning: ${As}`)
            }
            function vt(As) {
                throw new Error(As)
            }
            function bt(As, Es) {
                As || vt(Es)
            }
            function Tt(As) {
                switch (As == null ? void 0 : As.protocol) {
                case "http:":
                case "https:":
                case "ftp:":
                case "mailto:":
                case "tel:":
                    return !0;
                default:
                    return !1
                }
            }
            function Yt(As, Es=null, Rs=null) {
                if (!As)
                    return null;
                try {
                    if (Rs && typeof As == "string") {
                        if (Rs.addDefaultProtocol && As.startsWith("www.")) {
                            const Ps = As.match(/\./g);
                            (Ps == null ? void 0 : Ps.length) >= 2 && (As = `http://${As}`)
                        }
                        if (Rs.tryConvertEncoding)
                            try {
                                As = ks(As)
                            } catch {}
                    }
                    const as = Es ? new URL(As,Es) : new URL(As);
                    if (Tt(as))
                        return as
                } catch {}
                return null
            }
            function Nt(As, Es, Rs, as=!1) {
                return Object.defineProperty(As, Es, {
                    value: Rs,
                    enumerable: !as,
                    configurable: !0,
                    writable: !1
                }),
                Rs
            }
            const jt = function() {
                function Es(Rs, as) {
                    this.constructor === Es && vt("Cannot initialize BaseException."),
                    this.message = Rs,
                    this.name = as
                }
                return Es.prototype = new Error,
                Es.constructor = Es,
                Es
            }();
            e.BaseException = jt;
            class xt extends jt {
                constructor(Es, Rs) {
                    super(Es, "PasswordException"),
                    this.code = Rs
                }
            }
            e.PasswordException = xt;
            class Et extends jt {
                constructor(Es, Rs) {
                    super(Es, "UnknownErrorException"),
                    this.details = Rs
                }
            }
            e.UnknownErrorException = Et;
            class Pt extends jt {
                constructor(Es) {
                    super(Es, "InvalidPDFException")
                }
            }
            e.InvalidPDFException = Pt;
            class St extends jt {
                constructor(Es) {
                    super(Es, "MissingPDFException")
                }
            }
            e.MissingPDFException = St;
            class Bt extends jt {
                constructor(Es, Rs) {
                    super(Es, "UnexpectedResponseException"),
                    this.status = Rs
                }
            }
            e.UnexpectedResponseException = Bt;
            class os extends jt {
                constructor(Es) {
                    super(Es, "FormatError")
                }
            }
            e.FormatError = os;
            class ds extends jt {
                constructor(Es) {
                    super(Es, "AbortException")
                }
            }
            e.AbortException = ds;
            function js(As) {
                (typeof As != "object" || (As == null ? void 0 : As.length) === void 0) && vt("Invalid argument for bytesToString");
                const Es = As.length
                  , Rs = 8192;
                if (Es < Rs)
                    return String.fromCharCode.apply(null, As);
                const as = [];
                for (let Ps = 0; Ps < Es; Ps += Rs) {
                    const gs = Math.min(Ps + Rs, Es)
                      , es = As.subarray(Ps, gs);
                    as.push(String.fromCharCode.apply(null, es))
                }
                return as.join("")
            }
            function ys(As) {
                typeof As != "string" && vt("Invalid argument for stringToBytes");
                const Es = As.length
                  , Rs = new Uint8Array(Es);
                for (let as = 0; as < Es; ++as)
                    Rs[as] = As.charCodeAt(as) & 255;
                return Rs
            }
            function vs(As) {
                return String.fromCharCode(As >> 24 & 255, As >> 16 & 255, As >> 8 & 255, As & 255)
            }
            function Ss(As) {
                return Object.keys(As).length
            }
            function _s(As) {
                const Es = Object.create(null);
                for (const [Rs,as] of As)
                    Es[Rs] = as;
                return Es
            }
            function ns() {
                const As = new Uint8Array(4);
                return As[0] = 1,
                new Uint32Array(As.buffer,0,1)[0] === 1
            }
            function xs() {
                try {
                    return new Function(""),
                    !0
                } catch {
                    return !1
                }
            }
            class Lt {
                static get isLittleEndian() {
                    return Nt(this, "isLittleEndian", ns())
                }
                static get isEvalSupported() {
                    return Nt(this, "isEvalSupported", xs())
                }
                static get isOffscreenCanvasSupported() {
                    return Nt(this, "isOffscreenCanvasSupported", typeof OffscreenCanvas < "u")
                }
                static get platform() {
                    return typeof navigator > "u" ? Nt(this, "platform", {
                        isWin: !1,
                        isMac: !1
                    }) : Nt(this, "platform", {
                        isWin: navigator.platform.includes("Win"),
                        isMac: navigator.platform.includes("Mac")
                    })
                }
                static get isCSSRoundSupported() {
                    var Es, Rs;
                    return Nt(this, "isCSSRoundSupported", (Rs = (Es = globalThis.CSS) == null ? void 0 : Es.supports) == null ? void 0 : Rs.call(Es, "width: round(1.5px, 1px)"))
                }
            }
            e.FeatureTest = Lt;
            const ts = [...Array(256).keys()].map(As => As.toString(16).padStart(2, "0"));
            class ms {
                static makeHexColor(Es, Rs, as) {
                    return `#${ts[Es]}${ts[Rs]}${ts[as]}`
                }
                static scaleMinMax(Es, Rs) {
                    let as;
                    Es[0] ? (Es[0] < 0 && (as = Rs[0],
                    Rs[0] = Rs[1],
                    Rs[1] = as),
                    Rs[0] *= Es[0],
                    Rs[1] *= Es[0],
                    Es[3] < 0 && (as = Rs[2],
                    Rs[2] = Rs[3],
                    Rs[3] = as),
                    Rs[2] *= Es[3],
                    Rs[3] *= Es[3]) : (as = Rs[0],
                    Rs[0] = Rs[2],
                    Rs[2] = as,
                    as = Rs[1],
                    Rs[1] = Rs[3],
                    Rs[3] = as,
                    Es[1] < 0 && (as = Rs[2],
                    Rs[2] = Rs[3],
                    Rs[3] = as),
                    Rs[2] *= Es[1],
                    Rs[3] *= Es[1],
                    Es[2] < 0 && (as = Rs[0],
                    Rs[0] = Rs[1],
                    Rs[1] = as),
                    Rs[0] *= Es[2],
                    Rs[1] *= Es[2]),
                    Rs[0] += Es[4],
                    Rs[1] += Es[4],
                    Rs[2] += Es[5],
                    Rs[3] += Es[5]
                }
                static transform(Es, Rs) {
                    return [Es[0] * Rs[0] + Es[2] * Rs[1], Es[1] * Rs[0] + Es[3] * Rs[1], Es[0] * Rs[2] + Es[2] * Rs[3], Es[1] * Rs[2] + Es[3] * Rs[3], Es[0] * Rs[4] + Es[2] * Rs[5] + Es[4], Es[1] * Rs[4] + Es[3] * Rs[5] + Es[5]]
                }
                static applyTransform(Es, Rs) {
                    const as = Es[0] * Rs[0] + Es[1] * Rs[2] + Rs[4]
                      , Ps = Es[0] * Rs[1] + Es[1] * Rs[3] + Rs[5];
                    return [as, Ps]
                }
                static applyInverseTransform(Es, Rs) {
                    const as = Rs[0] * Rs[3] - Rs[1] * Rs[2]
                      , Ps = (Es[0] * Rs[3] - Es[1] * Rs[2] + Rs[2] * Rs[5] - Rs[4] * Rs[3]) / as
                      , gs = (-Es[0] * Rs[1] + Es[1] * Rs[0] + Rs[4] * Rs[1] - Rs[5] * Rs[0]) / as;
                    return [Ps, gs]
                }
                static getAxialAlignedBoundingBox(Es, Rs) {
                    const as = this.applyTransform(Es, Rs)
                      , Ps = this.applyTransform(Es.slice(2, 4), Rs)
                      , gs = this.applyTransform([Es[0], Es[3]], Rs)
                      , es = this.applyTransform([Es[2], Es[1]], Rs);
                    return [Math.min(as[0], Ps[0], gs[0], es[0]), Math.min(as[1], Ps[1], gs[1], es[1]), Math.max(as[0], Ps[0], gs[0], es[0]), Math.max(as[1], Ps[1], gs[1], es[1])]
                }
                static inverseTransform(Es) {
                    const Rs = Es[0] * Es[3] - Es[1] * Es[2];
                    return [Es[3] / Rs, -Es[1] / Rs, -Es[2] / Rs, Es[0] / Rs, (Es[2] * Es[5] - Es[4] * Es[3]) / Rs, (Es[4] * Es[1] - Es[5] * Es[0]) / Rs]
                }
                static singularValueDecompose2dScale(Es) {
                    const Rs = [Es[0], Es[2], Es[1], Es[3]]
                      , as = Es[0] * Rs[0] + Es[1] * Rs[2]
                      , Ps = Es[0] * Rs[1] + Es[1] * Rs[3]
                      , gs = Es[2] * Rs[0] + Es[3] * Rs[2]
                      , es = Es[2] * Rs[1] + Es[3] * Rs[3]
                      , ws = (as + es) / 2
                      , Is = Math.sqrt((as + es) ** 2 - 4 * (as * es - gs * Ps)) / 2
                      , Fs = ws + Is || 1
                      , Js = ws - Is || 1;
                    return [Math.sqrt(Fs), Math.sqrt(Js)]
                }
                static normalizeRect(Es) {
                    const Rs = Es.slice(0);
                    return Es[0] > Es[2] && (Rs[0] = Es[2],
                    Rs[2] = Es[0]),
                    Es[1] > Es[3] && (Rs[1] = Es[3],
                    Rs[3] = Es[1]),
                    Rs
                }
                static intersect(Es, Rs) {
                    const as = Math.max(Math.min(Es[0], Es[2]), Math.min(Rs[0], Rs[2]))
                      , Ps = Math.min(Math.max(Es[0], Es[2]), Math.max(Rs[0], Rs[2]));
                    if (as > Ps)
                        return null;
                    const gs = Math.max(Math.min(Es[1], Es[3]), Math.min(Rs[1], Rs[3]))
                      , es = Math.min(Math.max(Es[1], Es[3]), Math.max(Rs[1], Rs[3]));
                    return gs > es ? null : [as, gs, Ps, es]
                }
                static bezierBoundingBox(Es, Rs, as, Ps, gs, es, ws, Is) {
                    const Fs = []
                      , Js = [[], []];
                    let Us, is, rs, fs, Ns, Cs, Ls, Os;
                    for (let Qs = 0; Qs < 2; ++Qs) {
                        if (Qs === 0 ? (is = 6 * Es - 12 * as + 6 * gs,
                        Us = -3 * Es + 9 * as - 9 * gs + 3 * ws,
                        rs = 3 * as - 3 * Es) : (is = 6 * Rs - 12 * Ps + 6 * es,
                        Us = -3 * Rs + 9 * Ps - 9 * es + 3 * Is,
                        rs = 3 * Ps - 3 * Rs),
                        Math.abs(Us) < 1e-12) {
                            if (Math.abs(is) < 1e-12)
                                continue;
                            fs = -rs / is,
                            0 < fs && fs < 1 && Fs.push(fs);
                            continue
                        }
                        Ls = is * is - 4 * rs * Us,
                        Os = Math.sqrt(Ls),
                        !(Ls < 0) && (Ns = (-is + Os) / (2 * Us),
                        0 < Ns && Ns < 1 && Fs.push(Ns),
                        Cs = (-is - Os) / (2 * Us),
                        0 < Cs && Cs < 1 && Fs.push(Cs))
                    }
                    let qs = Fs.length, Ws;
                    const Bs = qs;
                    for (; qs--; )
                        fs = Fs[qs],
                        Ws = 1 - fs,
                        Js[0][qs] = Ws * Ws * Ws * Es + 3 * Ws * Ws * fs * as + 3 * Ws * fs * fs * gs + fs * fs * fs * ws,
                        Js[1][qs] = Ws * Ws * Ws * Rs + 3 * Ws * Ws * fs * Ps + 3 * Ws * fs * fs * es + fs * fs * fs * Is;
                    return Js[0][Bs] = Es,
                    Js[1][Bs] = Rs,
                    Js[0][Bs + 1] = ws,
                    Js[1][Bs + 1] = Is,
                    Js[0].length = Js[1].length = Bs + 2,
                    [Math.min(...Js[0]), Math.min(...Js[1]), Math.max(...Js[0]), Math.max(...Js[1])]
                }
            }
            e.Util = ms;
            const hs = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 711, 710, 729, 733, 731, 730, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8226, 8224, 8225, 8230, 8212, 8211, 402, 8260, 8249, 8250, 8722, 8240, 8222, 8220, 8221, 8216, 8217, 8218, 8482, 64257, 64258, 321, 338, 352, 376, 381, 305, 322, 339, 353, 382, 0, 8364];
            function bs(As) {
                if (As[0] >= "ï") {
                    let Rs;
                    if (As[0] === "þ" && As[1] === "ÿ" ? Rs = "utf-16be" : As[0] === "ÿ" && As[1] === "þ" ? Rs = "utf-16le" : As[0] === "ï" && As[1] === "»" && As[2] === "¿" && (Rs = "utf-8"),
                    Rs)
                        try {
                            const as = new TextDecoder(Rs,{
                                fatal: !0
                            })
                              , Ps = ys(As);
                            return as.decode(Ps)
                        } catch (as) {
                            kt(`stringToPDFString: "${as}".`)
                        }
                }
                const Es = [];
                for (let Rs = 0, as = As.length; Rs < as; Rs++) {
                    const Ps = hs[As.charCodeAt(Rs)];
                    Es.push(Ps ? String.fromCharCode(Ps) : As.charAt(Rs))
                }
                return Es.join("")
            }
            function ks(As) {
                return decodeURIComponent(escape(As))
            }
            function Ts(As) {
                return unescape(encodeURIComponent(As))
            }
            function ls(As) {
                return typeof As == "object" && (As == null ? void 0 : As.byteLength) !== void 0
            }
            function Ds(As, Es) {
                if (As.length !== Es.length)
                    return !1;
                for (let Rs = 0, as = As.length; Rs < as; Rs++)
                    if (As[Rs] !== Es[Rs])
                        return !1;
                return !0
            }
            function Ms(As=new Date) {
                return [As.getUTCFullYear().toString(), (As.getUTCMonth() + 1).toString().padStart(2, "0"), As.getUTCDate().toString().padStart(2, "0"), As.getUTCHours().toString().padStart(2, "0"), As.getUTCMinutes().toString().padStart(2, "0"), As.getUTCSeconds().toString().padStart(2, "0")].join("")
            }
            class Hs {
                constructor() {
                    ps(this, sr, !1);
                    this.promise = new Promise( (Es, Rs) => {
                        this.resolve = as => {
                            us(this, sr, !0),
                            Es(as)
                        }
                        ,
                        this.reject = as => {
                            us(this, sr, !0),
                            Rs(as)
                        }
                    }
                    )
                }
                get settled() {
                    return mt(this, sr)
                }
            }
            sr = new WeakMap,
            e.PromiseCapability = Hs;
            let Vs = null
              , Xs = null;
            function $s(As) {
                return Vs || (Vs = /([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,
                Xs = new Map([["ﬅ", "ſt"]])),
                As.replaceAll(Vs, (Es, Rs, as) => Rs ? Rs.normalize("NFKC") : Xs.get(as))
            }
            function zs() {
                if (typeof crypto < "u" && typeof (crypto == null ? void 0 : crypto.randomUUID) == "function")
                    return crypto.randomUUID();
                const As = new Uint8Array(32);
                if (typeof crypto < "u" && typeof (crypto == null ? void 0 : crypto.getRandomValues) == "function")
                    crypto.getRandomValues(As);
                else
                    for (let Es = 0; Es < 32; Es++)
                        As[Es] = Math.floor(Math.random() * 255);
                return js(As)
            }
            const Zs = "pdfjs_internal_id_";
            e.AnnotationPrefix = Zs
        }
        , (__unused_webpack_module, exports, __w_pdfjs_require__) => {
            var s, i, o, a, Jr, _n, h, g, b, _, $, _e, tt, rt, et, An, st, nt, Xn, dt, ot;
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }),
            exports.RenderTask = exports.PDFWorkerUtil = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDocumentLoadingTask = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultStandardFontDataFactory = exports.DefaultFilterFactory = exports.DefaultCanvasFactory = exports.DefaultCMapReaderFactory = void 0,
            Object.defineProperty(exports, "SVGGraphics", {
                enumerable: !0,
                get: function() {
                    return _displaySvg.SVGGraphics
                }
            }),
            exports.build = void 0,
            exports.getDocument = getDocument,
            exports.version = void 0;
            var _util = __w_pdfjs_require__(1)
              , _annotation_storage = __w_pdfjs_require__(3)
              , _display_utils = __w_pdfjs_require__(6)
              , _font_loader = __w_pdfjs_require__(9)
              , _displayNode_utils = __w_pdfjs_require__(10)
              , _canvas = __w_pdfjs_require__(11)
              , _worker_options = __w_pdfjs_require__(14)
              , _message_handler = __w_pdfjs_require__(15)
              , _metadata = __w_pdfjs_require__(16)
              , _optional_content_config = __w_pdfjs_require__(17)
              , _transport_stream = __w_pdfjs_require__(18)
              , _displayFetch_stream = __w_pdfjs_require__(19)
              , _displayNetwork = __w_pdfjs_require__(22)
              , _displayNode_stream = __w_pdfjs_require__(23)
              , _displaySvg = __w_pdfjs_require__(24)
              , _xfa_text = __w_pdfjs_require__(25);
            const DEFAULT_RANGE_CHUNK_SIZE = 65536
              , RENDERING_CANCELLED_TIMEOUT = 100
              , DELAYED_CLEANUP_TIMEOUT = 5e3
              , DefaultCanvasFactory = _util.isNodeJS ? _displayNode_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;
            exports.DefaultCanvasFactory = DefaultCanvasFactory;
            const DefaultCMapReaderFactory = _util.isNodeJS ? _displayNode_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;
            exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;
            const DefaultFilterFactory = _util.isNodeJS ? _displayNode_utils.NodeFilterFactory : _display_utils.DOMFilterFactory;
            exports.DefaultFilterFactory = DefaultFilterFactory;
            const DefaultStandardFontDataFactory = _util.isNodeJS ? _displayNode_utils.NodeStandardFontDataFactory : _display_utils.DOMStandardFontDataFactory;
            exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory;
            function getDocument(ht) {
                if (typeof ht == "string" || ht instanceof URL ? ht = {
                    url: ht
                } : (0,
                _util.isArrayBuffer)(ht) && (ht = {
                    data: ht
                }),
                typeof ht != "object")
                    throw new Error("Invalid parameter in getDocument, need parameter object.");
                if (!ht.url && !ht.data && !ht.range)
                    throw new Error("Invalid parameter object: need either .data, .range or .url");
                const pt = new PDFDocumentLoadingTask
                  , {docId: gt} = pt
                  , wt = ht.url ? getUrlProp(ht.url) : null
                  , yt = ht.data ? getDataProp(ht.data) : null
                  , Rt = ht.httpHeaders || null
                  , Mt = ht.withCredentials === !0
                  , ss = ht.password ?? null
                  , zt = ht.range instanceof PDFDataRangeTransport ? ht.range : null
                  , At = Number.isInteger(ht.rangeChunkSize) && ht.rangeChunkSize > 0 ? ht.rangeChunkSize : DEFAULT_RANGE_CHUNK_SIZE;
                let kt = ht.worker instanceof PDFWorker ? ht.worker : null;
                const vt = ht.verbosity
                  , bt = typeof ht.docBaseUrl == "string" && !(0,
                _display_utils.isDataScheme)(ht.docBaseUrl) ? ht.docBaseUrl : null
                  , Tt = typeof ht.cMapUrl == "string" ? ht.cMapUrl : null
                  , Yt = ht.cMapPacked !== !1
                  , Nt = ht.CMapReaderFactory || DefaultCMapReaderFactory
                  , jt = typeof ht.standardFontDataUrl == "string" ? ht.standardFontDataUrl : null
                  , xt = ht.StandardFontDataFactory || DefaultStandardFontDataFactory
                  , Et = ht.stopAtErrors !== !0
                  , Pt = Number.isInteger(ht.maxImageSize) && ht.maxImageSize > -1 ? ht.maxImageSize : -1
                  , St = ht.isEvalSupported !== !1
                  , Bt = typeof ht.isOffscreenCanvasSupported == "boolean" ? ht.isOffscreenCanvasSupported : !_util.isNodeJS
                  , os = Number.isInteger(ht.canvasMaxAreaInBytes) ? ht.canvasMaxAreaInBytes : -1
                  , ds = typeof ht.disableFontFace == "boolean" ? ht.disableFontFace : _util.isNodeJS
                  , js = ht.fontExtraProperties === !0
                  , ys = ht.enableXfa === !0
                  , vs = ht.ownerDocument || globalThis.document
                  , Ss = ht.disableRange === !0
                  , _s = ht.disableStream === !0
                  , ns = ht.disableAutoFetch === !0
                  , xs = ht.pdfBug === !0
                  , Lt = zt ? zt.length : ht.length ?? NaN
                  , ts = typeof ht.useSystemFonts == "boolean" ? ht.useSystemFonts : !_util.isNodeJS && !ds
                  , ms = typeof ht.useWorkerFetch == "boolean" ? ht.useWorkerFetch : Nt === _display_utils.DOMCMapReaderFactory && xt === _display_utils.DOMStandardFontDataFactory && Tt && jt && (0,
                _display_utils.isValidFetchUrl)(Tt, document.baseURI) && (0,
                _display_utils.isValidFetchUrl)(jt, document.baseURI)
                  , hs = ht.canvasFactory || new DefaultCanvasFactory({
                    ownerDocument: vs
                })
                  , bs = ht.filterFactory || new DefaultFilterFactory({
                    docId: gt,
                    ownerDocument: vs
                })
                  , ks = null;
                (0,
                _util.setVerbosityLevel)(vt);
                const Ts = {
                    canvasFactory: hs,
                    filterFactory: bs
                };
                if (ms || (Ts.cMapReaderFactory = new Nt({
                    baseUrl: Tt,
                    isCompressed: Yt
                }),
                Ts.standardFontDataFactory = new xt({
                    baseUrl: jt
                })),
                !kt) {
                    const Ms = {
                        verbosity: vt,
                        port: _worker_options.GlobalWorkerOptions.workerPort
                    };
                    kt = Ms.port ? PDFWorker.fromPort(Ms) : new PDFWorker(Ms),
                    pt._worker = kt
                }
                const ls = {
                    docId: gt,
                    apiVersion: "3.11.174",
                    data: yt,
                    password: ss,
                    disableAutoFetch: ns,
                    rangeChunkSize: At,
                    length: Lt,
                    docBaseUrl: bt,
                    enableXfa: ys,
                    evaluatorOptions: {
                        maxImageSize: Pt,
                        disableFontFace: ds,
                        ignoreErrors: Et,
                        isEvalSupported: St,
                        isOffscreenCanvasSupported: Bt,
                        canvasMaxAreaInBytes: os,
                        fontExtraProperties: js,
                        useSystemFonts: ts,
                        cMapUrl: ms ? Tt : null,
                        standardFontDataUrl: ms ? jt : null
                    }
                }
                  , Ds = {
                    ignoreErrors: Et,
                    isEvalSupported: St,
                    disableFontFace: ds,
                    fontExtraProperties: js,
                    enableXfa: ys,
                    ownerDocument: vs,
                    disableAutoFetch: ns,
                    pdfBug: xs,
                    styleElement: ks
                };
                return kt.promise.then(function() {
                    if (pt.destroyed)
                        throw new Error("Loading aborted");
                    const Ms = _fetchDocument(kt, ls)
                      , Hs = new Promise(function(Vs) {
                        let Xs;
                        zt ? Xs = new _transport_stream.PDFDataTransportStream({
                            length: Lt,
                            initialData: zt.initialData,
                            progressiveDone: zt.progressiveDone,
                            contentDispositionFilename: zt.contentDispositionFilename,
                            disableRange: Ss,
                            disableStream: _s
                        },zt) : yt || (Xs = (zs => _util.isNodeJS ? new _displayNode_stream.PDFNodeStream(zs) : (0,
                        _display_utils.isValidFetchUrl)(zs.url) ? new _displayFetch_stream.PDFFetchStream(zs) : new _displayNetwork.PDFNetworkStream(zs))({
                            url: wt,
                            length: Lt,
                            httpHeaders: Rt,
                            withCredentials: Mt,
                            rangeChunkSize: At,
                            disableRange: Ss,
                            disableStream: _s
                        })),
                        Vs(Xs)
                    }
                    );
                    return Promise.all([Ms, Hs]).then(function([Vs,Xs]) {
                        if (pt.destroyed)
                            throw new Error("Loading aborted");
                        const $s = new _message_handler.MessageHandler(gt,Vs,kt.port)
                          , zs = new WorkerTransport($s,pt,Xs,Ds,Ts);
                        pt._transport = zs,
                        $s.send("Ready", null)
                    })
                }).catch(pt._capability.reject),
                pt
            }
            async function _fetchDocument(ht, pt) {
                if (ht.destroyed)
                    throw new Error("Worker was destroyed");
                const gt = await ht.messageHandler.sendWithPromise("GetDocRequest", pt, pt.data ? [pt.data.buffer] : null);
                if (ht.destroyed)
                    throw new Error("Worker was destroyed");
                return gt
            }
            function getUrlProp(ht) {
                if (ht instanceof URL)
                    return ht.href;
                try {
                    return new URL(ht,window.location).href
                } catch {
                    if (_util.isNodeJS && typeof ht == "string")
                        return ht
                }
                throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.")
            }
            function getDataProp(ht) {
                if (_util.isNodeJS && typeof Buffer < "u" && ht instanceof Buffer)
                    throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");
                if (ht instanceof Uint8Array && ht.byteLength === ht.buffer.byteLength)
                    return ht;
                if (typeof ht == "string")
                    return (0,
                    _util.stringToBytes)(ht);
                if (typeof ht == "object" && !isNaN(ht == null ? void 0 : ht.length) || (0,
                _util.isArrayBuffer)(ht))
                    return new Uint8Array(ht);
                throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")
            }
            const e = class e {
                constructor() {
                    this._capability = new _util.PromiseCapability,
                    this._transport = null,
                    this._worker = null,
                    this.docId = `d${kr(e, s)._++}`,
                    this.destroyed = !1,
                    this.onPassword = null,
                    this.onProgress = null
                }
                get promise() {
                    return this._capability.promise
                }
                async destroy() {
                    var pt, gt, wt;
                    this.destroyed = !0;
                    try {
                        (pt = this._worker) != null && pt.port && (this._worker._pendingDestroy = !0),
                        await ((gt = this._transport) == null ? void 0 : gt.destroy())
                    } catch (yt) {
                        throw (wt = this._worker) != null && wt.port && delete this._worker._pendingDestroy,
                        yt
                    }
                    this._transport = null,
                    this._worker && (this._worker.destroy(),
                    this._worker = null)
                }
            }
            ;
            s = new WeakMap,
            ps(e, s, 0);
            let PDFDocumentLoadingTask = e;
            exports.PDFDocumentLoadingTask = PDFDocumentLoadingTask;
            class PDFDataRangeTransport {
                constructor(pt, gt, wt=!1, yt=null) {
                    this.length = pt,
                    this.initialData = gt,
                    this.progressiveDone = wt,
                    this.contentDispositionFilename = yt,
                    this._rangeListeners = [],
                    this._progressListeners = [],
                    this._progressiveReadListeners = [],
                    this._progressiveDoneListeners = [],
                    this._readyCapability = new _util.PromiseCapability
                }
                addRangeListener(pt) {
                    this._rangeListeners.push(pt)
                }
                addProgressListener(pt) {
                    this._progressListeners.push(pt)
                }
                addProgressiveReadListener(pt) {
                    this._progressiveReadListeners.push(pt)
                }
                addProgressiveDoneListener(pt) {
                    this._progressiveDoneListeners.push(pt)
                }
                onDataRange(pt, gt) {
                    for (const wt of this._rangeListeners)
                        wt(pt, gt)
                }
                onDataProgress(pt, gt) {
                    this._readyCapability.promise.then( () => {
                        for (const wt of this._progressListeners)
                            wt(pt, gt)
                    }
                    )
                }
                onDataProgressiveRead(pt) {
                    this._readyCapability.promise.then( () => {
                        for (const gt of this._progressiveReadListeners)
                            gt(pt)
                    }
                    )
                }
                onDataProgressiveDone() {
                    this._readyCapability.promise.then( () => {
                        for (const pt of this._progressiveDoneListeners)
                            pt()
                    }
                    )
                }
                transportReady() {
                    this._readyCapability.resolve()
                }
                requestDataRange(pt, gt) {
                    (0,
                    _util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")
                }
                abort() {}
            }
            exports.PDFDataRangeTransport = PDFDataRangeTransport;
            class PDFDocumentProxy {
                constructor(pt, gt) {
                    this._pdfInfo = pt,
                    this._transport = gt,
                    Object.defineProperty(this, "getJavaScript", {
                        value: () => ((0,
                        _display_utils.deprecated)("`PDFDocumentProxy.getJavaScript`, please use `PDFDocumentProxy.getJSActions` instead."),
                        this.getJSActions().then(wt => {
                            if (!wt)
                                return wt;
                            const yt = [];
                            for (const Rt in wt)
                                yt.push(...wt[Rt]);
                            return yt
                        }
                        ))
                    })
                }
                get annotationStorage() {
                    return this._transport.annotationStorage
                }
                get filterFactory() {
                    return this._transport.filterFactory
                }
                get numPages() {
                    return this._pdfInfo.numPages
                }
                get fingerprints() {
                    return this._pdfInfo.fingerprints
                }
                get isPureXfa() {
                    return (0,
                    _util.shadow)(this, "isPureXfa", !!this._transport._htmlForXfa)
                }
                get allXfaHtml() {
                    return this._transport._htmlForXfa
                }
                getPage(pt) {
                    return this._transport.getPage(pt)
                }
                getPageIndex(pt) {
                    return this._transport.getPageIndex(pt)
                }
                getDestinations() {
                    return this._transport.getDestinations()
                }
                getDestination(pt) {
                    return this._transport.getDestination(pt)
                }
                getPageLabels() {
                    return this._transport.getPageLabels()
                }
                getPageLayout() {
                    return this._transport.getPageLayout()
                }
                getPageMode() {
                    return this._transport.getPageMode()
                }
                getViewerPreferences() {
                    return this._transport.getViewerPreferences()
                }
                getOpenAction() {
                    return this._transport.getOpenAction()
                }
                getAttachments() {
                    return this._transport.getAttachments()
                }
                getJSActions() {
                    return this._transport.getDocJSActions()
                }
                getOutline() {
                    return this._transport.getOutline()
                }
                getOptionalContentConfig() {
                    return this._transport.getOptionalContentConfig()
                }
                getPermissions() {
                    return this._transport.getPermissions()
                }
                getMetadata() {
                    return this._transport.getMetadata()
                }
                getMarkInfo() {
                    return this._transport.getMarkInfo()
                }
                getData() {
                    return this._transport.getData()
                }
                saveDocument() {
                    return this._transport.saveDocument()
                }
                getDownloadInfo() {
                    return this._transport.downloadInfoCapability.promise
                }
                cleanup(pt=!1) {
                    return this._transport.startCleanup(pt || this.isPureXfa)
                }
                destroy() {
                    return this.loadingTask.destroy()
                }
                get loadingParams() {
                    return this._transport.loadingParams
                }
                get loadingTask() {
                    return this._transport.loadingTask
                }
                getFieldObjects() {
                    return this._transport.getFieldObjects()
                }
                hasJSActions() {
                    return this._transport.hasJSActions()
                }
                getCalculationOrderIds() {
                    return this._transport.getCalculationOrderIds()
                }
            }
            exports.PDFDocumentProxy = PDFDocumentProxy;
            class PDFPageProxy {
                constructor(pt, gt, wt, yt=!1) {
                    ps(this, a);
                    ps(this, i, null);
                    ps(this, o, !1);
                    this._pageIndex = pt,
                    this._pageInfo = gt,
                    this._transport = wt,
                    this._stats = yt ? new _display_utils.StatTimer : null,
                    this._pdfBug = yt,
                    this.commonObjs = wt.commonObjs,
                    this.objs = new PDFObjects,
                    this._maybeCleanupAfterRender = !1,
                    this._intentStates = new Map,
                    this.destroyed = !1
                }
                get pageNumber() {
                    return this._pageIndex + 1
                }
                get rotate() {
                    return this._pageInfo.rotate
                }
                get ref() {
                    return this._pageInfo.ref
                }
                get userUnit() {
                    return this._pageInfo.userUnit
                }
                get view() {
                    return this._pageInfo.view
                }
                getViewport({scale: pt, rotation: gt=this.rotate, offsetX: wt=0, offsetY: yt=0, dontFlip: Rt=!1}={}) {
                    return new _display_utils.PageViewport({
                        viewBox: this.view,
                        scale: pt,
                        rotation: gt,
                        offsetX: wt,
                        offsetY: yt,
                        dontFlip: Rt
                    })
                }
                getAnnotations({intent: pt="display"}={}) {
                    const gt = this._transport.getRenderingIntent(pt);
                    return this._transport.getAnnotations(this._pageIndex, gt.renderingIntent)
                }
                getJSActions() {
                    return this._transport.getPageJSActions(this._pageIndex)
                }
                get filterFactory() {
                    return this._transport.filterFactory
                }
                get isPureXfa() {
                    return (0,
                    _util.shadow)(this, "isPureXfa", !!this._transport._htmlForXfa)
                }
                async getXfa() {
                    var pt;
                    return ((pt = this._transport._htmlForXfa) == null ? void 0 : pt.children[this._pageIndex]) || null
                }
                render({canvasContext: pt, viewport: gt, intent: wt="display", annotationMode: yt=_util.AnnotationMode.ENABLE, transform: Rt=null, background: Mt=null, optionalContentConfigPromise: ss=null, annotationCanvasMap: zt=null, pageColors: At=null, printAnnotationStorage: kt=null}) {
                    var xt, Et;
                    (xt = this._stats) == null || xt.time("Overall");
                    const vt = this._transport.getRenderingIntent(wt, yt, kt);
                    us(this, o, !1),
                    cs(this, a, _n).call(this),
                    ss || (ss = this._transport.getOptionalContentConfig());
                    let bt = this._intentStates.get(vt.cacheKey);
                    bt || (bt = Object.create(null),
                    this._intentStates.set(vt.cacheKey, bt)),
                    bt.streamReaderCancelTimeout && (clearTimeout(bt.streamReaderCancelTimeout),
                    bt.streamReaderCancelTimeout = null);
                    const Tt = !!(vt.renderingIntent & _util.RenderingIntentFlag.PRINT);
                    bt.displayReadyCapability || (bt.displayReadyCapability = new _util.PromiseCapability,
                    bt.operatorList = {
                        fnArray: [],
                        argsArray: [],
                        lastChunk: !1,
                        separateAnnots: null
                    },
                    (Et = this._stats) == null || Et.time("Page Request"),
                    this._pumpOperatorList(vt));
                    const Yt = Pt => {
                        var St, Bt;
                        bt.renderTasks.delete(Nt),
                        (this._maybeCleanupAfterRender || Tt) && us(this, o, !0),
                        cs(this, a, Jr).call(this, !Tt),
                        Pt ? (Nt.capability.reject(Pt),
                        this._abortOperatorList({
                            intentState: bt,
                            reason: Pt instanceof Error ? Pt : new Error(Pt)
                        })) : Nt.capability.resolve(),
                        (St = this._stats) == null || St.timeEnd("Rendering"),
                        (Bt = this._stats) == null || Bt.timeEnd("Overall")
                    }
                      , Nt = new InternalRenderTask({
                        callback: Yt,
                        params: {
                            canvasContext: pt,
                            viewport: gt,
                            transform: Rt,
                            background: Mt
                        },
                        objs: this.objs,
                        commonObjs: this.commonObjs,
                        annotationCanvasMap: zt,
                        operatorList: bt.operatorList,
                        pageIndex: this._pageIndex,
                        canvasFactory: this._transport.canvasFactory,
                        filterFactory: this._transport.filterFactory,
                        useRequestAnimationFrame: !Tt,
                        pdfBug: this._pdfBug,
                        pageColors: At
                    });
                    (bt.renderTasks || (bt.renderTasks = new Set)).add(Nt);
                    const jt = Nt.task;
                    return Promise.all([bt.displayReadyCapability.promise, ss]).then( ([Pt,St]) => {
                        var Bt;
                        if (this.destroyed) {
                            Yt();
                            return
                        }
                        (Bt = this._stats) == null || Bt.time("Rendering"),
                        Nt.initializeGraphics({
                            transparency: Pt,
                            optionalContentConfig: St
                        }),
                        Nt.operatorListChanged()
                    }
                    ).catch(Yt),
                    jt
                }
                getOperatorList({intent: pt="display", annotationMode: gt=_util.AnnotationMode.ENABLE, printAnnotationStorage: wt=null}={}) {
                    var zt;
                    function yt() {
                        Mt.operatorList.lastChunk && (Mt.opListReadCapability.resolve(Mt.operatorList),
                        Mt.renderTasks.delete(ss))
                    }
                    const Rt = this._transport.getRenderingIntent(pt, gt, wt, !0);
                    let Mt = this._intentStates.get(Rt.cacheKey);
                    Mt || (Mt = Object.create(null),
                    this._intentStates.set(Rt.cacheKey, Mt));
                    let ss;
                    return Mt.opListReadCapability || (ss = Object.create(null),
                    ss.operatorListChanged = yt,
                    Mt.opListReadCapability = new _util.PromiseCapability,
                    (Mt.renderTasks || (Mt.renderTasks = new Set)).add(ss),
                    Mt.operatorList = {
                        fnArray: [],
                        argsArray: [],
                        lastChunk: !1,
                        separateAnnots: null
                    },
                    (zt = this._stats) == null || zt.time("Page Request"),
                    this._pumpOperatorList(Rt)),
                    Mt.opListReadCapability.promise
                }
                streamTextContent({includeMarkedContent: pt=!1, disableNormalization: gt=!1}={}) {
                    return this._transport.messageHandler.sendWithStream("GetTextContent", {
                        pageIndex: this._pageIndex,
                        includeMarkedContent: pt === !0,
                        disableNormalization: gt === !0
                    }, {
                        highWaterMark: 100,
                        size(yt) {
                            return yt.items.length
                        }
                    })
                }
                getTextContent(pt={}) {
                    if (this._transport._htmlForXfa)
                        return this.getXfa().then(wt => _xfa_text.XfaText.textContent(wt));
                    const gt = this.streamTextContent(pt);
                    return new Promise(function(wt, yt) {
                        function Rt() {
                            Mt.read().then(function({value: zt, done: At}) {
                                if (At) {
                                    wt(ss);
                                    return
                                }
                                Object.assign(ss.styles, zt.styles),
                                ss.items.push(...zt.items),
                                Rt()
                            }, yt)
                        }
                        const Mt = gt.getReader()
                          , ss = {
                            items: [],
                            styles: Object.create(null)
                        };
                        Rt()
                    }
                    )
                }
                getStructTree() {
                    return this._transport.getStructTree(this._pageIndex)
                }
                _destroy() {
                    this.destroyed = !0;
                    const pt = [];
                    for (const gt of this._intentStates.values())
                        if (this._abortOperatorList({
                            intentState: gt,
                            reason: new Error("Page was destroyed."),
                            force: !0
                        }),
                        !gt.opListReadCapability)
                            for (const wt of gt.renderTasks)
                                pt.push(wt.completed),
                                wt.cancel();
                    return this.objs.clear(),
                    us(this, o, !1),
                    cs(this, a, _n).call(this),
                    Promise.all(pt)
                }
                cleanup(pt=!1) {
                    us(this, o, !0);
                    const gt = cs(this, a, Jr).call(this, !1);
                    return pt && gt && this._stats && (this._stats = new _display_utils.StatTimer),
                    gt
                }
                _startRenderPage(pt, gt) {
                    var yt, Rt;
                    const wt = this._intentStates.get(gt);
                    wt && ((yt = this._stats) == null || yt.timeEnd("Page Request"),
                    (Rt = wt.displayReadyCapability) == null || Rt.resolve(pt))
                }
                _renderPageChunk(pt, gt) {
                    for (let wt = 0, yt = pt.length; wt < yt; wt++)
                        gt.operatorList.fnArray.push(pt.fnArray[wt]),
                        gt.operatorList.argsArray.push(pt.argsArray[wt]);
                    gt.operatorList.lastChunk = pt.lastChunk,
                    gt.operatorList.separateAnnots = pt.separateAnnots;
                    for (const wt of gt.renderTasks)
                        wt.operatorListChanged();
                    pt.lastChunk && cs(this, a, Jr).call(this, !0)
                }
                _pumpOperatorList({renderingIntent: pt, cacheKey: gt, annotationStorageSerializable: wt}) {
                    const {map: yt, transfers: Rt} = wt
                      , ss = this._transport.messageHandler.sendWithStream("GetOperatorList", {
                        pageIndex: this._pageIndex,
                        intent: pt,
                        cacheKey: gt,
                        annotationStorage: yt
                    }, Rt).getReader()
                      , zt = this._intentStates.get(gt);
                    zt.streamReader = ss;
                    const At = () => {
                        ss.read().then( ({value: kt, done: vt}) => {
                            if (vt) {
                                zt.streamReader = null;
                                return
                            }
                            this._transport.destroyed || (this._renderPageChunk(kt, zt),
                            At())
                        }
                        , kt => {
                            if (zt.streamReader = null,
                            !this._transport.destroyed) {
                                if (zt.operatorList) {
                                    zt.operatorList.lastChunk = !0;
                                    for (const vt of zt.renderTasks)
                                        vt.operatorListChanged();
                                    cs(this, a, Jr).call(this, !0)
                                }
                                if (zt.displayReadyCapability)
                                    zt.displayReadyCapability.reject(kt);
                                else if (zt.opListReadCapability)
                                    zt.opListReadCapability.reject(kt);
                                else
                                    throw kt
                            }
                        }
                        )
                    }
                    ;
                    At()
                }
                _abortOperatorList({intentState: pt, reason: gt, force: wt=!1}) {
                    if (pt.streamReader) {
                        if (pt.streamReaderCancelTimeout && (clearTimeout(pt.streamReaderCancelTimeout),
                        pt.streamReaderCancelTimeout = null),
                        !wt) {
                            if (pt.renderTasks.size > 0)
                                return;
                            if (gt instanceof _display_utils.RenderingCancelledException) {
                                let yt = RENDERING_CANCELLED_TIMEOUT;
                                gt.extraDelay > 0 && gt.extraDelay < 1e3 && (yt += gt.extraDelay),
                                pt.streamReaderCancelTimeout = setTimeout( () => {
                                    pt.streamReaderCancelTimeout = null,
                                    this._abortOperatorList({
                                        intentState: pt,
                                        reason: gt,
                                        force: !0
                                    })
                                }
                                , yt);
                                return
                            }
                        }
                        if (pt.streamReader.cancel(new _util.AbortException(gt.message)).catch( () => {}
                        ),
                        pt.streamReader = null,
                        !this._transport.destroyed) {
                            for (const [yt,Rt] of this._intentStates)
                                if (Rt === pt) {
                                    this._intentStates.delete(yt);
                                    break
                                }
                            this.cleanup()
                        }
                    }
                }
                get stats() {
                    return this._stats
                }
            }
            i = new WeakMap,
            o = new WeakMap,
            a = new WeakSet,
            Jr = function(pt=!1) {
                if (cs(this, a, _n).call(this),
                !mt(this, o) || this.destroyed)
                    return !1;
                if (pt)
                    return us(this, i, setTimeout( () => {
                        us(this, i, null),
                        cs(this, a, Jr).call(this, !1)
                    }
                    , DELAYED_CLEANUP_TIMEOUT)),
                    !1;
                for (const {renderTasks: gt, operatorList: wt} of this._intentStates.values())
                    if (gt.size > 0 || !wt.lastChunk)
                        return !1;
                return this._intentStates.clear(),
                this.objs.clear(),
                us(this, o, !1),
                !0
            }
            ,
            _n = function() {
                mt(this, i) && (clearTimeout(mt(this, i)),
                us(this, i, null))
            }
            ,
            exports.PDFPageProxy = PDFPageProxy;
            class LoopbackPort {
                constructor() {
                    ps(this, h, new Set);
                    ps(this, g, Promise.resolve())
                }
                postMessage(pt, gt) {
                    const wt = {
                        data: structuredClone(pt, gt ? {
                            transfer: gt
                        } : null)
                    };
                    mt(this, g).then( () => {
                        for (const yt of mt(this, h))
                            yt.call(this, wt)
                    }
                    )
                }
                addEventListener(pt, gt) {
                    mt(this, h).add(gt)
                }
                removeEventListener(pt, gt) {
                    mt(this, h).delete(gt)
                }
                terminate() {
                    mt(this, h).clear()
                }
            }
            h = new WeakMap,
            g = new WeakMap,
            exports.LoopbackPort = LoopbackPort;
            const PDFWorkerUtil = {
                isWorkerDisabled: !1,
                fallbackWorkerSrc: null,
                fakeWorkerId: 0
            };
            exports.PDFWorkerUtil = PDFWorkerUtil;
            {
                if (_util.isNodeJS && typeof commonjsRequire == "function")
                    PDFWorkerUtil.isWorkerDisabled = !0,
                    PDFWorkerUtil.fallbackWorkerSrc = "./pdf.worker.js";
                else if (typeof document == "object") {
                    const ht = (b = document == null ? void 0 : document.currentScript) == null ? void 0 : b.src;
                    ht && (PDFWorkerUtil.fallbackWorkerSrc = ht.replace(/(\.(?:min\.)?js)(\?.*)?$/i, ".worker$1$2"))
                }
                PDFWorkerUtil.isSameOrigin = function(ht, pt) {
                    let gt;
                    try {
                        if (gt = new URL(ht),
                        !gt.origin || gt.origin === "null")
                            return !1
                    } catch {
                        return !1
                    }
                    const wt = new URL(pt,gt);
                    return gt.origin === wt.origin
                }
                ,
                PDFWorkerUtil.createCDNWrapper = function(ht) {
                    const pt = `importScripts("${ht}");`;
                    return URL.createObjectURL(new Blob([pt]))
                }
            }
            const _PDFWorker = class _PDFWorker {
                constructor({name: ht=null, port: pt=null, verbosity: gt=(0,
                _util.getVerbosityLevel)()}={}) {
                    var wt;
                    if (this.name = ht,
                    this.destroyed = !1,
                    this.verbosity = gt,
                    this._readyCapability = new _util.PromiseCapability,
                    this._port = null,
                    this._webWorker = null,
                    this._messageHandler = null,
                    pt) {
                        if ((wt = mt(_PDFWorker, _)) != null && wt.has(pt))
                            throw new Error("Cannot use more than one PDFWorker per port.");
                        (mt(_PDFWorker, _) || us(_PDFWorker, _, new WeakMap)).set(pt, this),
                        this._initializeFromPort(pt);
                        return
                    }
                    this._initialize()
                }
                get promise() {
                    return this._readyCapability.promise
                }
                get port() {
                    return this._port
                }
                get messageHandler() {
                    return this._messageHandler
                }
                _initializeFromPort(ht) {
                    this._port = ht,
                    this._messageHandler = new _message_handler.MessageHandler("main","worker",ht),
                    this._messageHandler.on("ready", function() {}),
                    this._readyCapability.resolve(),
                    this._messageHandler.send("configure", {
                        verbosity: this.verbosity
                    })
                }
                _initialize() {
                    if (!PDFWorkerUtil.isWorkerDisabled && !_PDFWorker._mainThreadWorkerMessageHandler) {
                        let {workerSrc: ht} = _PDFWorker;
                        try {
                            PDFWorkerUtil.isSameOrigin(window.location.href, ht) || (ht = PDFWorkerUtil.createCDNWrapper(new URL(ht,window.location).href));
                            const pt = new Worker(ht)
                              , gt = new _message_handler.MessageHandler("main","worker",pt)
                              , wt = () => {
                                pt.removeEventListener("error", yt),
                                gt.destroy(),
                                pt.terminate(),
                                this.destroyed ? this._readyCapability.reject(new Error("Worker was destroyed")) : this._setupFakeWorker()
                            }
                              , yt = () => {
                                this._webWorker || wt()
                            }
                            ;
                            pt.addEventListener("error", yt),
                            gt.on("test", Mt => {
                                if (pt.removeEventListener("error", yt),
                                this.destroyed) {
                                    wt();
                                    return
                                }
                                Mt ? (this._messageHandler = gt,
                                this._port = pt,
                                this._webWorker = pt,
                                this._readyCapability.resolve(),
                                gt.send("configure", {
                                    verbosity: this.verbosity
                                })) : (this._setupFakeWorker(),
                                gt.destroy(),
                                pt.terminate())
                            }
                            ),
                            gt.on("ready", Mt => {
                                if (pt.removeEventListener("error", yt),
                                this.destroyed) {
                                    wt();
                                    return
                                }
                                try {
                                    Rt()
                                } catch {
                                    this._setupFakeWorker()
                                }
                            }
                            );
                            const Rt = () => {
                                const Mt = new Uint8Array;
                                gt.send("test", Mt, [Mt.buffer])
                            }
                            ;
                            Rt();
                            return
                        } catch {
                            (0,
                            _util.info)("The worker has been disabled.")
                        }
                    }
                    this._setupFakeWorker()
                }
                _setupFakeWorker() {
                    PDFWorkerUtil.isWorkerDisabled || ((0,
                    _util.warn)("Setting up fake worker."),
                    PDFWorkerUtil.isWorkerDisabled = !0),
                    _PDFWorker._setupFakeWorkerGlobal.then(ht => {
                        if (this.destroyed) {
                            this._readyCapability.reject(new Error("Worker was destroyed"));
                            return
                        }
                        const pt = new LoopbackPort;
                        this._port = pt;
                        const gt = `fake${PDFWorkerUtil.fakeWorkerId++}`
                          , wt = new _message_handler.MessageHandler(gt + "_worker",gt,pt);
                        ht.setup(wt, pt);
                        const yt = new _message_handler.MessageHandler(gt,gt + "_worker",pt);
                        this._messageHandler = yt,
                        this._readyCapability.resolve(),
                        yt.send("configure", {
                            verbosity: this.verbosity
                        })
                    }
                    ).catch(ht => {
                        this._readyCapability.reject(new Error(`Setting up fake worker failed: "${ht.message}".`))
                    }
                    )
                }
                destroy() {
                    var ht;
                    this.destroyed = !0,
                    this._webWorker && (this._webWorker.terminate(),
                    this._webWorker = null),
                    (ht = mt(_PDFWorker, _)) == null || ht.delete(this._port),
                    this._port = null,
                    this._messageHandler && (this._messageHandler.destroy(),
                    this._messageHandler = null)
                }
                static fromPort(ht) {
                    var gt;
                    if (!(ht != null && ht.port))
                        throw new Error("PDFWorker.fromPort - invalid method signature.");
                    const pt = (gt = mt(this, _)) == null ? void 0 : gt.get(ht.port);
                    if (pt) {
                        if (pt._pendingDestroy)
                            throw new Error("PDFWorker.fromPort - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");
                        return pt
                    }
                    return new _PDFWorker(ht)
                }
                static get workerSrc() {
                    if (_worker_options.GlobalWorkerOptions.workerSrc)
                        return _worker_options.GlobalWorkerOptions.workerSrc;
                    if (PDFWorkerUtil.fallbackWorkerSrc !== null)
                        return _util.isNodeJS || (0,
                        _display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),
                        PDFWorkerUtil.fallbackWorkerSrc;
                    throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')
                }
                static get _mainThreadWorkerMessageHandler() {
                    var ht;
                    try {
                        return ((ht = globalThis.pdfjsWorker) == null ? void 0 : ht.WorkerMessageHandler) || null
                    } catch {
                        return null
                    }
                }
                static get _setupFakeWorkerGlobal() {
                    const loader = async () => {
                        const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;
                        if (mainWorkerMessageHandler)
                            return mainWorkerMessageHandler;
                        if (_util.isNodeJS && typeof commonjsRequire == "function") {
                            const worker = eval("require")(this.workerSrc);
                            return worker.WorkerMessageHandler
                        }
                        return await (0,
                        _display_utils.loadScript)(this.workerSrc),
                        window.pdfjsWorker.WorkerMessageHandler
                    }
                    ;
                    return (0,
                    _util.shadow)(this, "_setupFakeWorkerGlobal", loader())
                }
            }
            ;
            _ = new WeakMap,
            ps(_PDFWorker, _);
            let PDFWorker = _PDFWorker;
            exports.PDFWorker = PDFWorker;
            class WorkerTransport {
                constructor(pt, gt, wt, yt, Rt) {
                    ps(this, et);
                    ps(this, $, new Map);
                    ps(this, _e, new Map);
                    ps(this, tt, new Map);
                    ps(this, rt, null);
                    this.messageHandler = pt,
                    this.loadingTask = gt,
                    this.commonObjs = new PDFObjects,
                    this.fontLoader = new _font_loader.FontLoader({
                        ownerDocument: yt.ownerDocument,
                        styleElement: yt.styleElement
                    }),
                    this._params = yt,
                    this.canvasFactory = Rt.canvasFactory,
                    this.filterFactory = Rt.filterFactory,
                    this.cMapReaderFactory = Rt.cMapReaderFactory,
                    this.standardFontDataFactory = Rt.standardFontDataFactory,
                    this.destroyed = !1,
                    this.destroyCapability = null,
                    this._networkStream = wt,
                    this._fullReader = null,
                    this._lastProgress = null,
                    this.downloadInfoCapability = new _util.PromiseCapability,
                    this.setupMessageHandler()
                }
                get annotationStorage() {
                    return (0,
                    _util.shadow)(this, "annotationStorage", new _annotation_storage.AnnotationStorage)
                }
                getRenderingIntent(pt, gt=_util.AnnotationMode.ENABLE, wt=null, yt=!1) {
                    let Rt = _util.RenderingIntentFlag.DISPLAY
                      , Mt = _annotation_storage.SerializableEmpty;
                    switch (pt) {
                    case "any":
                        Rt = _util.RenderingIntentFlag.ANY;
                        break;
                    case "display":
                        break;
                    case "print":
                        Rt = _util.RenderingIntentFlag.PRINT;
                        break;
                    default:
                        (0,
                        _util.warn)(`getRenderingIntent - invalid intent: ${pt}`)
                    }
                    switch (gt) {
                    case _util.AnnotationMode.DISABLE:
                        Rt += _util.RenderingIntentFlag.ANNOTATIONS_DISABLE;
                        break;
                    case _util.AnnotationMode.ENABLE:
                        break;
                    case _util.AnnotationMode.ENABLE_FORMS:
                        Rt += _util.RenderingIntentFlag.ANNOTATIONS_FORMS;
                        break;
                    case _util.AnnotationMode.ENABLE_STORAGE:
                        Rt += _util.RenderingIntentFlag.ANNOTATIONS_STORAGE,
                        Mt = (Rt & _util.RenderingIntentFlag.PRINT && wt instanceof _annotation_storage.PrintAnnotationStorage ? wt : this.annotationStorage).serializable;
                        break;
                    default:
                        (0,
                        _util.warn)(`getRenderingIntent - invalid annotationMode: ${gt}`)
                    }
                    return yt && (Rt += _util.RenderingIntentFlag.OPLIST),
                    {
                        renderingIntent: Rt,
                        cacheKey: `${Rt}_${Mt.hash}`,
                        annotationStorageSerializable: Mt
                    }
                }
                destroy() {
                    var wt;
                    if (this.destroyCapability)
                        return this.destroyCapability.promise;
                    this.destroyed = !0,
                    this.destroyCapability = new _util.PromiseCapability,
                    (wt = mt(this, rt)) == null || wt.reject(new Error("Worker was destroyed during onPassword callback"));
                    const pt = [];
                    for (const yt of mt(this, _e).values())
                        pt.push(yt._destroy());
                    mt(this, _e).clear(),
                    mt(this, tt).clear(),
                    this.hasOwnProperty("annotationStorage") && this.annotationStorage.resetModified();
                    const gt = this.messageHandler.sendWithPromise("Terminate", null);
                    return pt.push(gt),
                    Promise.all(pt).then( () => {
                        var yt;
                        this.commonObjs.clear(),
                        this.fontLoader.clear(),
                        mt(this, $).clear(),
                        this.filterFactory.destroy(),
                        (yt = this._networkStream) == null || yt.cancelAllRequests(new _util.AbortException("Worker was terminated.")),
                        this.messageHandler && (this.messageHandler.destroy(),
                        this.messageHandler = null),
                        this.destroyCapability.resolve()
                    }
                    , this.destroyCapability.reject),
                    this.destroyCapability.promise
                }
                setupMessageHandler() {
                    const {messageHandler: pt, loadingTask: gt} = this;
                    pt.on("GetReader", (wt, yt) => {
                        (0,
                        _util.assert)(this._networkStream, "GetReader - no `IPDFStream` instance available."),
                        this._fullReader = this._networkStream.getFullReader(),
                        this._fullReader.onProgress = Rt => {
                            this._lastProgress = {
                                loaded: Rt.loaded,
                                total: Rt.total
                            }
                        }
                        ,
                        yt.onPull = () => {
                            this._fullReader.read().then(function({value: Rt, done: Mt}) {
                                if (Mt) {
                                    yt.close();
                                    return
                                }
                                (0,
                                _util.assert)(Rt instanceof ArrayBuffer, "GetReader - expected an ArrayBuffer."),
                                yt.enqueue(new Uint8Array(Rt), 1, [Rt])
                            }).catch(Rt => {
                                yt.error(Rt)
                            }
                            )
                        }
                        ,
                        yt.onCancel = Rt => {
                            this._fullReader.cancel(Rt),
                            yt.ready.catch(Mt => {
                                if (!this.destroyed)
                                    throw Mt
                            }
                            )
                        }
                    }
                    ),
                    pt.on("ReaderHeadersReady", wt => {
                        const yt = new _util.PromiseCapability
                          , Rt = this._fullReader;
                        return Rt.headersReady.then( () => {
                            var Mt;
                            (!Rt.isStreamingSupported || !Rt.isRangeSupported) && (this._lastProgress && ((Mt = gt.onProgress) == null || Mt.call(gt, this._lastProgress)),
                            Rt.onProgress = ss => {
                                var zt;
                                (zt = gt.onProgress) == null || zt.call(gt, {
                                    loaded: ss.loaded,
                                    total: ss.total
                                })
                            }
                            ),
                            yt.resolve({
                                isStreamingSupported: Rt.isStreamingSupported,
                                isRangeSupported: Rt.isRangeSupported,
                                contentLength: Rt.contentLength
                            })
                        }
                        , yt.reject),
                        yt.promise
                    }
                    ),
                    pt.on("GetRangeReader", (wt, yt) => {
                        (0,
                        _util.assert)(this._networkStream, "GetRangeReader - no `IPDFStream` instance available.");
                        const Rt = this._networkStream.getRangeReader(wt.begin, wt.end);
                        if (!Rt) {
                            yt.close();
                            return
                        }
                        yt.onPull = () => {
                            Rt.read().then(function({value: Mt, done: ss}) {
                                if (ss) {
                                    yt.close();
                                    return
                                }
                                (0,
                                _util.assert)(Mt instanceof ArrayBuffer, "GetRangeReader - expected an ArrayBuffer."),
                                yt.enqueue(new Uint8Array(Mt), 1, [Mt])
                            }).catch(Mt => {
                                yt.error(Mt)
                            }
                            )
                        }
                        ,
                        yt.onCancel = Mt => {
                            Rt.cancel(Mt),
                            yt.ready.catch(ss => {
                                if (!this.destroyed)
                                    throw ss
                            }
                            )
                        }
                    }
                    ),
                    pt.on("GetDoc", ({pdfInfo: wt}) => {
                        this._numPages = wt.numPages,
                        this._htmlForXfa = wt.htmlForXfa,
                        delete wt.htmlForXfa,
                        gt._capability.resolve(new PDFDocumentProxy(wt,this))
                    }
                    ),
                    pt.on("DocException", function(wt) {
                        let yt;
                        switch (wt.name) {
                        case "PasswordException":
                            yt = new _util.PasswordException(wt.message,wt.code);
                            break;
                        case "InvalidPDFException":
                            yt = new _util.InvalidPDFException(wt.message);
                            break;
                        case "MissingPDFException":
                            yt = new _util.MissingPDFException(wt.message);
                            break;
                        case "UnexpectedResponseException":
                            yt = new _util.UnexpectedResponseException(wt.message,wt.status);
                            break;
                        case "UnknownErrorException":
                            yt = new _util.UnknownErrorException(wt.message,wt.details);
                            break;
                        default:
                            (0,
                            _util.unreachable)("DocException - expected a valid Error.")
                        }
                        gt._capability.reject(yt)
                    }),
                    pt.on("PasswordRequest", wt => {
                        if (us(this, rt, new _util.PromiseCapability),
                        gt.onPassword) {
                            const yt = Rt => {
                                Rt instanceof Error ? mt(this, rt).reject(Rt) : mt(this, rt).resolve({
                                    password: Rt
                                })
                            }
                            ;
                            try {
                                gt.onPassword(yt, wt.code)
                            } catch (Rt) {
                                mt(this, rt).reject(Rt)
                            }
                        } else
                            mt(this, rt).reject(new _util.PasswordException(wt.message,wt.code));
                        return mt(this, rt).promise
                    }
                    ),
                    pt.on("DataLoaded", wt => {
                        var yt;
                        (yt = gt.onProgress) == null || yt.call(gt, {
                            loaded: wt.length,
                            total: wt.length
                        }),
                        this.downloadInfoCapability.resolve(wt)
                    }
                    ),
                    pt.on("StartRenderPage", wt => {
                        if (this.destroyed)
                            return;
                        mt(this, _e).get(wt.pageIndex)._startRenderPage(wt.transparency, wt.cacheKey)
                    }
                    ),
                    pt.on("commonobj", ([wt,yt,Rt]) => {
                        var Mt;
                        if (!this.destroyed && !this.commonObjs.has(wt))
                            switch (yt) {
                            case "Font":
                                const ss = this._params;
                                if ("error"in Rt) {
                                    const kt = Rt.error;
                                    (0,
                                    _util.warn)(`Error during font loading: ${kt}`),
                                    this.commonObjs.resolve(wt, kt);
                                    break
                                }
                                const zt = ss.pdfBug && ((Mt = globalThis.FontInspector) != null && Mt.enabled) ? (kt, vt) => globalThis.FontInspector.fontAdded(kt, vt) : null
                                  , At = new _font_loader.FontFaceObject(Rt,{
                                    isEvalSupported: ss.isEvalSupported,
                                    disableFontFace: ss.disableFontFace,
                                    ignoreErrors: ss.ignoreErrors,
                                    inspectFont: zt
                                });
                                this.fontLoader.bind(At).catch(kt => pt.sendWithPromise("FontFallback", {
                                    id: wt
                                })).finally( () => {
                                    !ss.fontExtraProperties && At.data && (At.data = null),
                                    this.commonObjs.resolve(wt, At)
                                }
                                );
                                break;
                            case "FontPath":
                            case "Image":
                            case "Pattern":
                                this.commonObjs.resolve(wt, Rt);
                                break;
                            default:
                                throw new Error(`Got unknown common object type ${yt}`)
                            }
                    }
                    ),
                    pt.on("obj", ([wt,yt,Rt,Mt]) => {
                        var zt;
                        if (this.destroyed)
                            return;
                        const ss = mt(this, _e).get(yt);
                        if (!ss.objs.has(wt))
                            switch (Rt) {
                            case "Image":
                                if (ss.objs.resolve(wt, Mt),
                                Mt) {
                                    let At;
                                    if (Mt.bitmap) {
                                        const {width: kt, height: vt} = Mt;
                                        At = kt * vt * 4
                                    } else
                                        At = ((zt = Mt.data) == null ? void 0 : zt.length) || 0;
                                    At > _util.MAX_IMAGE_SIZE_TO_CACHE && (ss._maybeCleanupAfterRender = !0)
                                }
                                break;
                            case "Pattern":
                                ss.objs.resolve(wt, Mt);
                                break;
                            default:
                                throw new Error(`Got unknown object type ${Rt}`)
                            }
                    }
                    ),
                    pt.on("DocProgress", wt => {
                        var yt;
                        this.destroyed || (yt = gt.onProgress) == null || yt.call(gt, {
                            loaded: wt.loaded,
                            total: wt.total
                        })
                    }
                    ),
                    pt.on("FetchBuiltInCMap", wt => this.destroyed ? Promise.reject(new Error("Worker was destroyed.")) : this.cMapReaderFactory ? this.cMapReaderFactory.fetch(wt) : Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."))),
                    pt.on("FetchStandardFontData", wt => this.destroyed ? Promise.reject(new Error("Worker was destroyed.")) : this.standardFontDataFactory ? this.standardFontDataFactory.fetch(wt) : Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.")))
                }
                getData() {
                    return this.messageHandler.sendWithPromise("GetData", null)
                }
                saveDocument() {
                    var wt;
                    this.annotationStorage.size <= 0 && (0,
                    _util.warn)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");
                    const {map: pt, transfers: gt} = this.annotationStorage.serializable;
                    return this.messageHandler.sendWithPromise("SaveDocument", {
                        isPureXfa: !!this._htmlForXfa,
                        numPages: this._numPages,
                        annotationStorage: pt,
                        filename: ((wt = this._fullReader) == null ? void 0 : wt.filename) ?? null
                    }, gt).finally( () => {
                        this.annotationStorage.resetModified()
                    }
                    )
                }
                getPage(pt) {
                    if (!Number.isInteger(pt) || pt <= 0 || pt > this._numPages)
                        return Promise.reject(new Error("Invalid page request."));
                    const gt = pt - 1
                      , wt = mt(this, tt).get(gt);
                    if (wt)
                        return wt;
                    const yt = this.messageHandler.sendWithPromise("GetPage", {
                        pageIndex: gt
                    }).then(Rt => {
                        if (this.destroyed)
                            throw new Error("Transport destroyed");
                        const Mt = new PDFPageProxy(gt,Rt,this,this._params.pdfBug);
                        return mt(this, _e).set(gt, Mt),
                        Mt
                    }
                    );
                    return mt(this, tt).set(gt, yt),
                    yt
                }
                getPageIndex(pt) {
                    return typeof pt != "object" || pt === null || !Number.isInteger(pt.num) || pt.num < 0 || !Number.isInteger(pt.gen) || pt.gen < 0 ? Promise.reject(new Error("Invalid pageIndex request.")) : this.messageHandler.sendWithPromise("GetPageIndex", {
                        num: pt.num,
                        gen: pt.gen
                    })
                }
                getAnnotations(pt, gt) {
                    return this.messageHandler.sendWithPromise("GetAnnotations", {
                        pageIndex: pt,
                        intent: gt
                    })
                }
                getFieldObjects() {
                    return cs(this, et, An).call(this, "GetFieldObjects")
                }
                hasJSActions() {
                    return cs(this, et, An).call(this, "HasJSActions")
                }
                getCalculationOrderIds() {
                    return this.messageHandler.sendWithPromise("GetCalculationOrderIds", null)
                }
                getDestinations() {
                    return this.messageHandler.sendWithPromise("GetDestinations", null)
                }
                getDestination(pt) {
                    return typeof pt != "string" ? Promise.reject(new Error("Invalid destination request.")) : this.messageHandler.sendWithPromise("GetDestination", {
                        id: pt
                    })
                }
                getPageLabels() {
                    return this.messageHandler.sendWithPromise("GetPageLabels", null)
                }
                getPageLayout() {
                    return this.messageHandler.sendWithPromise("GetPageLayout", null)
                }
                getPageMode() {
                    return this.messageHandler.sendWithPromise("GetPageMode", null)
                }
                getViewerPreferences() {
                    return this.messageHandler.sendWithPromise("GetViewerPreferences", null)
                }
                getOpenAction() {
                    return this.messageHandler.sendWithPromise("GetOpenAction", null)
                }
                getAttachments() {
                    return this.messageHandler.sendWithPromise("GetAttachments", null)
                }
                getDocJSActions() {
                    return cs(this, et, An).call(this, "GetDocJSActions")
                }
                getPageJSActions(pt) {
                    return this.messageHandler.sendWithPromise("GetPageJSActions", {
                        pageIndex: pt
                    })
                }
                getStructTree(pt) {
                    return this.messageHandler.sendWithPromise("GetStructTree", {
                        pageIndex: pt
                    })
                }
                getOutline() {
                    return this.messageHandler.sendWithPromise("GetOutline", null)
                }
                getOptionalContentConfig() {
                    return this.messageHandler.sendWithPromise("GetOptionalContentConfig", null).then(pt => new _optional_content_config.OptionalContentConfig(pt))
                }
                getPermissions() {
                    return this.messageHandler.sendWithPromise("GetPermissions", null)
                }
                getMetadata() {
                    const pt = "GetMetadata"
                      , gt = mt(this, $).get(pt);
                    if (gt)
                        return gt;
                    const wt = this.messageHandler.sendWithPromise(pt, null).then(yt => {
                        var Rt, Mt;
                        return {
                            info: yt[0],
                            metadata: yt[1] ? new _metadata.Metadata(yt[1]) : null,
                            contentDispositionFilename: ((Rt = this._fullReader) == null ? void 0 : Rt.filename) ?? null,
                            contentLength: ((Mt = this._fullReader) == null ? void 0 : Mt.contentLength) ?? null
                        }
                    }
                    );
                    return mt(this, $).set(pt, wt),
                    wt
                }
                getMarkInfo() {
                    return this.messageHandler.sendWithPromise("GetMarkInfo", null)
                }
                async startCleanup(pt=!1) {
                    if (!this.destroyed) {
                        await this.messageHandler.sendWithPromise("Cleanup", null);
                        for (const gt of mt(this, _e).values())
                            if (!gt.cleanup())
                                throw new Error(`startCleanup: Page ${gt.pageNumber} is currently rendering.`);
                        this.commonObjs.clear(),
                        pt || this.fontLoader.clear(),
                        mt(this, $).clear(),
                        this.filterFactory.destroy(!0)
                    }
                }
                get loadingParams() {
                    const {disableAutoFetch: pt, enableXfa: gt} = this._params;
                    return (0,
                    _util.shadow)(this, "loadingParams", {
                        disableAutoFetch: pt,
                        enableXfa: gt
                    })
                }
            }
            $ = new WeakMap,
            _e = new WeakMap,
            tt = new WeakMap,
            rt = new WeakMap,
            et = new WeakSet,
            An = function(pt, gt=null) {
                const wt = mt(this, $).get(pt);
                if (wt)
                    return wt;
                const yt = this.messageHandler.sendWithPromise(pt, gt);
                return mt(this, $).set(pt, yt),
                yt
            }
            ;
            class PDFObjects {
                constructor() {
                    ps(this, nt);
                    ps(this, st, Object.create(null))
                }
                get(pt, gt=null) {
                    if (gt) {
                        const yt = cs(this, nt, Xn).call(this, pt);
                        return yt.capability.promise.then( () => gt(yt.data)),
                        null
                    }
                    const wt = mt(this, st)[pt];
                    if (!(wt != null && wt.capability.settled))
                        throw new Error(`Requesting object that isn't resolved yet ${pt}.`);
                    return wt.data
                }
                has(pt) {
                    const gt = mt(this, st)[pt];
                    return (gt == null ? void 0 : gt.capability.settled) || !1
                }
                resolve(pt, gt=null) {
                    const wt = cs(this, nt, Xn).call(this, pt);
                    wt.data = gt,
                    wt.capability.resolve()
                }
                clear() {
                    var pt;
                    for (const gt in mt(this, st)) {
                        const {data: wt} = mt(this, st)[gt];
                        (pt = wt == null ? void 0 : wt.bitmap) == null || pt.close()
                    }
                    us(this, st, Object.create(null))
                }
            }
            st = new WeakMap,
            nt = new WeakSet,
            Xn = function(pt) {
                var gt;
                return (gt = mt(this, st))[pt] || (gt[pt] = {
                    capability: new _util.PromiseCapability,
                    data: null
                })
            }
            ;
            class RenderTask {
                constructor(pt) {
                    ps(this, dt, null);
                    us(this, dt, pt),
                    this.onContinue = null
                }
                get promise() {
                    return mt(this, dt).capability.promise
                }
                cancel(pt=0) {
                    mt(this, dt).cancel(null, pt)
                }
                get separateAnnots() {
                    const {separateAnnots: pt} = mt(this, dt).operatorList;
                    if (!pt)
                        return !1;
                    const {annotationCanvasMap: gt} = mt(this, dt);
                    return pt.form || pt.canvas && (gt == null ? void 0 : gt.size) > 0
                }
            }
            dt = new WeakMap,
            exports.RenderTask = RenderTask;
            const at = class at {
                constructor({callback: pt, params: gt, objs: wt, commonObjs: yt, annotationCanvasMap: Rt, operatorList: Mt, pageIndex: ss, canvasFactory: zt, filterFactory: At, useRequestAnimationFrame: kt=!1, pdfBug: vt=!1, pageColors: bt=null}) {
                    this.callback = pt,
                    this.params = gt,
                    this.objs = wt,
                    this.commonObjs = yt,
                    this.annotationCanvasMap = Rt,
                    this.operatorListIdx = null,
                    this.operatorList = Mt,
                    this._pageIndex = ss,
                    this.canvasFactory = zt,
                    this.filterFactory = At,
                    this._pdfBug = vt,
                    this.pageColors = bt,
                    this.running = !1,
                    this.graphicsReadyCallback = null,
                    this.graphicsReady = !1,
                    this._useRequestAnimationFrame = kt === !0 && typeof window < "u",
                    this.cancelled = !1,
                    this.capability = new _util.PromiseCapability,
                    this.task = new RenderTask(this),
                    this._cancelBound = this.cancel.bind(this),
                    this._continueBound = this._continue.bind(this),
                    this._scheduleNextBound = this._scheduleNext.bind(this),
                    this._nextBound = this._next.bind(this),
                    this._canvas = gt.canvasContext.canvas
                }
                get completed() {
                    return this.capability.promise.catch(function() {})
                }
                initializeGraphics({transparency: pt=!1, optionalContentConfig: gt}) {
                    var ss, zt;
                    if (this.cancelled)
                        return;
                    if (this._canvas) {
                        if (mt(at, ot).has(this._canvas))
                            throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");
                        mt(at, ot).add(this._canvas)
                    }
                    this._pdfBug && ((ss = globalThis.StepperManager) != null && ss.enabled) && (this.stepper = globalThis.StepperManager.create(this._pageIndex),
                    this.stepper.init(this.operatorList),
                    this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint());
                    const {canvasContext: wt, viewport: yt, transform: Rt, background: Mt} = this.params;
                    this.gfx = new _canvas.CanvasGraphics(wt,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{
                        optionalContentConfig: gt
                    },this.annotationCanvasMap,this.pageColors),
                    this.gfx.beginDrawing({
                        transform: Rt,
                        viewport: yt,
                        transparency: pt,
                        background: Mt
                    }),
                    this.operatorListIdx = 0,
                    this.graphicsReady = !0,
                    (zt = this.graphicsReadyCallback) == null || zt.call(this)
                }
                cancel(pt=null, gt=0) {
                    var wt;
                    this.running = !1,
                    this.cancelled = !0,
                    (wt = this.gfx) == null || wt.endDrawing(),
                    mt(at, ot).delete(this._canvas),
                    this.callback(pt || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`,gt))
                }
                operatorListChanged() {
                    var pt;
                    if (!this.graphicsReady) {
                        this.graphicsReadyCallback || (this.graphicsReadyCallback = this._continueBound);
                        return
                    }
                    (pt = this.stepper) == null || pt.updateOperatorList(this.operatorList),
                    !this.running && this._continue()
                }
                _continue() {
                    this.running = !0,
                    !this.cancelled && (this.task.onContinue ? this.task.onContinue(this._scheduleNextBound) : this._scheduleNext())
                }
                _scheduleNext() {
                    this._useRequestAnimationFrame ? window.requestAnimationFrame( () => {
                        this._nextBound().catch(this._cancelBound)
                    }
                    ) : Promise.resolve().then(this._nextBound).catch(this._cancelBound)
                }
                async _next() {
                    this.cancelled || (this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper),
                    this.operatorListIdx === this.operatorList.argsArray.length && (this.running = !1,
                    this.operatorList.lastChunk && (this.gfx.endDrawing(),
                    mt(at, ot).delete(this._canvas),
                    this.callback())))
                }
            }
            ;
            ot = new WeakMap,
            ps(at, ot, new WeakSet);
            let InternalRenderTask = at;
            const version = "3.11.174";
            exports.version = version;
            const build = "ce8716743";
            exports.build = build
        }
        , (s, e, i) => {
            var b, _, $, Wo, tt;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.SerializableEmpty = e.PrintAnnotationStorage = e.AnnotationStorage = void 0;
            var o = i(1)
              , a = i(4)
              , c = i(8);
            const d = Object.freeze({
                map: null,
                hash: "",
                transfers: void 0
            });
            e.SerializableEmpty = d;
            class h {
                constructor() {
                    ps(this, $);
                    ps(this, b, !1);
                    ps(this, _, new Map);
                    this.onSetModified = null,
                    this.onResetModified = null,
                    this.onAnnotationEditor = null
                }
                getValue(et, it) {
                    const st = mt(this, _).get(et);
                    return st === void 0 ? it : Object.assign(it, st)
                }
                getRawValue(et) {
                    return mt(this, _).get(et)
                }
                remove(et) {
                    if (mt(this, _).delete(et),
                    mt(this, _).size === 0 && this.resetModified(),
                    typeof this.onAnnotationEditor == "function") {
                        for (const it of mt(this, _).values())
                            if (it instanceof a.AnnotationEditor)
                                return;
                        this.onAnnotationEditor(null)
                    }
                }
                setValue(et, it) {
                    const st = mt(this, _).get(et);
                    let nt = !1;
                    if (st !== void 0)
                        for (const [lt,dt] of Object.entries(it))
                            st[lt] !== dt && (nt = !0,
                            st[lt] = dt);
                    else
                        nt = !0,
                        mt(this, _).set(et, it);
                    nt && cs(this, $, Wo).call(this),
                    it instanceof a.AnnotationEditor && typeof this.onAnnotationEditor == "function" && this.onAnnotationEditor(it.constructor._type)
                }
                has(et) {
                    return mt(this, _).has(et)
                }
                getAll() {
                    return mt(this, _).size > 0 ? (0,
                    o.objectFromMap)(mt(this, _)) : null
                }
                setAll(et) {
                    for (const [it,st] of Object.entries(et))
                        this.setValue(it, st)
                }
                get size() {
                    return mt(this, _).size
                }
                resetModified() {
                    mt(this, b) && (us(this, b, !1),
                    typeof this.onResetModified == "function" && this.onResetModified())
                }
                get print() {
                    return new g(this)
                }
                get serializable() {
                    if (mt(this, _).size === 0)
                        return d;
                    const et = new Map
                      , it = new c.MurmurHash3_64
                      , st = []
                      , nt = Object.create(null);
                    let lt = !1;
                    for (const [dt,ot] of mt(this, _)) {
                        const at = ot instanceof a.AnnotationEditor ? ot.serialize(!1, nt) : ot;
                        at && (et.set(dt, at),
                        it.update(`${dt}:${JSON.stringify(at)}`),
                        lt || (lt = !!at.bitmap))
                    }
                    if (lt)
                        for (const dt of et.values())
                            dt.bitmap && st.push(dt.bitmap);
                    return et.size > 0 ? {
                        map: et,
                        hash: it.hexdigest(),
                        transfers: st
                    } : d
                }
            }
            b = new WeakMap,
            _ = new WeakMap,
            $ = new WeakSet,
            Wo = function() {
                mt(this, b) || (us(this, b, !0),
                typeof this.onSetModified == "function" && this.onSetModified())
            }
            ,
            e.AnnotationStorage = h;
            class g extends h {
                constructor(it) {
                    super();
                    ps(this, tt);
                    const {map: st, hash: nt, transfers: lt} = it.serializable
                      , dt = structuredClone(st, lt ? {
                        transfer: lt
                    } : null);
                    us(this, tt, {
                        map: dt,
                        hash: nt,
                        transfers: lt
                    })
                }
                get print() {
                    (0,
                    o.unreachable)("Should not call PrintAnnotationStorage.print")
                }
                get serializable() {
                    return mt(this, tt)
                }
            }
            tt = new WeakMap,
            e.PrintAnnotationStorage = g
        }
        , (s, e, i) => {
            var g, b, _, $, _e, tt, rt, et, it, st, nt, lt, dt, ot, at, Qn, Zn, gt, _i, eo, Go, qo, Ko, to, Jo;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.AnnotationEditor = void 0;
            var o = i(5)
              , a = i(1)
              , c = i(6);
            const kt = class kt {
                constructor(bt) {
                    ps(this, at);
                    ps(this, g, "");
                    ps(this, b, !1);
                    ps(this, _, null);
                    ps(this, $, null);
                    ps(this, _e, null);
                    ps(this, tt, !1);
                    ps(this, rt, null);
                    ps(this, et, this.focusin.bind(this));
                    ps(this, it, this.focusout.bind(this));
                    ps(this, st, !1);
                    ps(this, nt, !1);
                    ps(this, lt, !1);
                    tr(this, "_initialOptions", Object.create(null));
                    tr(this, "_uiManager", null);
                    tr(this, "_focusEventsAllowed", !0);
                    tr(this, "_l10nPromise", null);
                    ps(this, dt, !1);
                    ps(this, ot, kt._zIndex++);
                    this.constructor === kt && (0,
                    a.unreachable)("Cannot initialize AnnotationEditor."),
                    this.parent = bt.parent,
                    this.id = bt.id,
                    this.width = this.height = null,
                    this.pageIndex = bt.parent.pageIndex,
                    this.name = bt.name,
                    this.div = null,
                    this._uiManager = bt.uiManager,
                    this.annotationElementId = null,
                    this._willKeepAspectRatio = !1,
                    this._initialOptions.isCentered = bt.isCentered,
                    this._structTreeParentId = null;
                    const {rotation: Tt, rawDims: {pageWidth: Yt, pageHeight: Nt, pageX: jt, pageY: xt}} = this.parent.viewport;
                    this.rotation = Tt,
                    this.pageRotation = (360 + Tt - this._uiManager.viewParameters.rotation) % 360,
                    this.pageDimensions = [Yt, Nt],
                    this.pageTranslation = [jt, xt];
                    const [Et,Pt] = this.parentDimensions;
                    this.x = bt.x / Et,
                    this.y = bt.y / Pt,
                    this.isAttachedToDOM = !1,
                    this.deleted = !1
                }
                get editorType() {
                    return Object.getPrototypeOf(this).constructor._type
                }
                static get _defaultLineColor() {
                    return (0,
                    a.shadow)(this, "_defaultLineColor", this._colorManager.getHexCode("CanvasText"))
                }
                static deleteAnnotationElement(bt) {
                    const Tt = new h({
                        id: bt.parent.getNextId(),
                        parent: bt.parent,
                        uiManager: bt._uiManager
                    });
                    Tt.annotationElementId = bt.annotationElementId,
                    Tt.deleted = !0,
                    Tt._uiManager.addToAnnotationStorage(Tt)
                }
                static initialize(bt, Tt=null) {
                    if (kt._l10nPromise || (kt._l10nPromise = new Map(["editor_alt_text_button_label", "editor_alt_text_edit_button_label", "editor_alt_text_decorative_tooltip"].map(Nt => [Nt, bt.get(Nt)]))),
                    Tt != null && Tt.strings)
                        for (const Nt of Tt.strings)
                            kt._l10nPromise.set(Nt, bt.get(Nt));
                    if (kt._borderLineWidth !== -1)
                        return;
                    const Yt = getComputedStyle(document.documentElement);
                    kt._borderLineWidth = parseFloat(Yt.getPropertyValue("--outline-width")) || 0
                }
                static updateDefaultParams(bt, Tt) {}
                static get defaultPropertiesToUpdate() {
                    return []
                }
                static isHandlingMimeForPasting(bt) {
                    return !1
                }
                static paste(bt, Tt) {
                    (0,
                    a.unreachable)("Not implemented")
                }
                get propertiesToUpdate() {
                    return []
                }
                get _isDraggable() {
                    return mt(this, dt)
                }
                set _isDraggable(bt) {
                    var Tt;
                    us(this, dt, bt),
                    (Tt = this.div) == null || Tt.classList.toggle("draggable", bt)
                }
                center() {
                    const [bt,Tt] = this.pageDimensions;
                    switch (this.parentRotation) {
                    case 90:
                        this.x -= this.height * Tt / (bt * 2),
                        this.y += this.width * bt / (Tt * 2);
                        break;
                    case 180:
                        this.x += this.width / 2,
                        this.y += this.height / 2;
                        break;
                    case 270:
                        this.x += this.height * Tt / (bt * 2),
                        this.y -= this.width * bt / (Tt * 2);
                        break;
                    default:
                        this.x -= this.width / 2,
                        this.y -= this.height / 2;
                        break
                    }
                    this.fixAndSetPosition()
                }
                addCommands(bt) {
                    this._uiManager.addCommands(bt)
                }
                get currentLayer() {
                    return this._uiManager.currentLayer
                }
                setInBackground() {
                    this.div.style.zIndex = 0
                }
                setInForeground() {
                    this.div.style.zIndex = mt(this, ot)
                }
                setParent(bt) {
                    bt !== null && (this.pageIndex = bt.pageIndex,
                    this.pageDimensions = bt.pageDimensions),
                    this.parent = bt
                }
                focusin(bt) {
                    this._focusEventsAllowed && (mt(this, st) ? us(this, st, !1) : this.parent.setSelected(this))
                }
                focusout(bt) {
                    var Yt;
                    if (!this._focusEventsAllowed || !this.isAttachedToDOM)
                        return;
                    const Tt = bt.relatedTarget;
                    Tt != null && Tt.closest(`#${this.id}`) || (bt.preventDefault(),
                    (Yt = this.parent) != null && Yt.isMultipleSelection || this.commitOrRemove())
                }
                commitOrRemove() {
                    this.isEmpty() ? this.remove() : this.commit()
                }
                commit() {
                    this.addToAnnotationStorage()
                }
                addToAnnotationStorage() {
                    this._uiManager.addToAnnotationStorage(this)
                }
                setAt(bt, Tt, Yt, Nt) {
                    const [jt,xt] = this.parentDimensions;
                    [Yt,Nt] = this.screenToPageTranslation(Yt, Nt),
                    this.x = (bt + Yt) / jt,
                    this.y = (Tt + Nt) / xt,
                    this.fixAndSetPosition()
                }
                translate(bt, Tt) {
                    cs(this, at, Qn).call(this, this.parentDimensions, bt, Tt)
                }
                translateInPage(bt, Tt) {
                    cs(this, at, Qn).call(this, this.pageDimensions, bt, Tt),
                    this.div.scrollIntoView({
                        block: "nearest"
                    })
                }
                drag(bt, Tt) {
                    const [Yt,Nt] = this.parentDimensions;
                    if (this.x += bt / Yt,
                    this.y += Tt / Nt,
                    this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {
                        const {x: St, y: Bt} = this.div.getBoundingClientRect();
                        this.parent.findNewParent(this, St, Bt) && (this.x -= Math.floor(this.x),
                        this.y -= Math.floor(this.y))
                    }
                    let {x: jt, y: xt} = this;
                    const [Et,Pt] = cs(this, at, Zn).call(this);
                    jt += Et,
                    xt += Pt,
                    this.div.style.left = `${(100 * jt).toFixed(2)}%`,
                    this.div.style.top = `${(100 * xt).toFixed(2)}%`,
                    this.div.scrollIntoView({
                        block: "nearest"
                    })
                }
                fixAndSetPosition() {
                    const [bt,Tt] = this.pageDimensions;
                    let {x: Yt, y: Nt, width: jt, height: xt} = this;
                    switch (jt *= bt,
                    xt *= Tt,
                    Yt *= bt,
                    Nt *= Tt,
                    this.rotation) {
                    case 0:
                        Yt = Math.max(0, Math.min(bt - jt, Yt)),
                        Nt = Math.max(0, Math.min(Tt - xt, Nt));
                        break;
                    case 90:
                        Yt = Math.max(0, Math.min(bt - xt, Yt)),
                        Nt = Math.min(Tt, Math.max(jt, Nt));
                        break;
                    case 180:
                        Yt = Math.min(bt, Math.max(jt, Yt)),
                        Nt = Math.min(Tt, Math.max(xt, Nt));
                        break;
                    case 270:
                        Yt = Math.min(bt, Math.max(xt, Yt)),
                        Nt = Math.max(0, Math.min(Tt - jt, Nt));
                        break
                    }
                    this.x = Yt /= bt,
                    this.y = Nt /= Tt;
                    const [Et,Pt] = cs(this, at, Zn).call(this);
                    Yt += Et,
                    Nt += Pt;
                    const {style: St} = this.div;
                    St.left = `${(100 * Yt).toFixed(2)}%`,
                    St.top = `${(100 * Nt).toFixed(2)}%`,
                    this.moveInDOM()
                }
                screenToPageTranslation(bt, Tt) {
                    var Yt;
                    return cs(Yt = kt, gt, _i).call(Yt, bt, Tt, this.parentRotation)
                }
                pageTranslationToScreen(bt, Tt) {
                    var Yt;
                    return cs(Yt = kt, gt, _i).call(Yt, bt, Tt, 360 - this.parentRotation)
                }
                get parentScale() {
                    return this._uiManager.viewParameters.realScale
                }
                get parentRotation() {
                    return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360
                }
                get parentDimensions() {
                    const {parentScale: bt, pageDimensions: [Tt,Yt]} = this
                      , Nt = Tt * bt
                      , jt = Yt * bt;
                    return a.FeatureTest.isCSSRoundSupported ? [Math.round(Nt), Math.round(jt)] : [Nt, jt]
                }
                setDims(bt, Tt) {
                    var jt;
                    const [Yt,Nt] = this.parentDimensions;
                    this.div.style.width = `${(100 * bt / Yt).toFixed(2)}%`,
                    mt(this, tt) || (this.div.style.height = `${(100 * Tt / Nt).toFixed(2)}%`),
                    (jt = mt(this, _)) == null || jt.classList.toggle("small", bt < kt.SMALL_EDITOR_SIZE || Tt < kt.SMALL_EDITOR_SIZE)
                }
                fixDims() {
                    const {style: bt} = this.div
                      , {height: Tt, width: Yt} = bt
                      , Nt = Yt.endsWith("%")
                      , jt = !mt(this, tt) && Tt.endsWith("%");
                    if (Nt && jt)
                        return;
                    const [xt,Et] = this.parentDimensions;
                    Nt || (bt.width = `${(100 * parseFloat(Yt) / xt).toFixed(2)}%`),
                    !mt(this, tt) && !jt && (bt.height = `${(100 * parseFloat(Tt) / Et).toFixed(2)}%`)
                }
                getInitialTranslation() {
                    return [0, 0]
                }
                async addAltTextButton() {
                    if (mt(this, _))
                        return;
                    const bt = us(this, _, document.createElement("button"));
                    bt.className = "altText";
                    const Tt = await kt._l10nPromise.get("editor_alt_text_button_label");
                    bt.textContent = Tt,
                    bt.setAttribute("aria-label", Tt),
                    bt.tabIndex = "0",
                    bt.addEventListener("contextmenu", c.noContextMenu),
                    bt.addEventListener("pointerdown", Yt => Yt.stopPropagation()),
                    bt.addEventListener("click", Yt => {
                        Yt.preventDefault(),
                        this._uiManager.editAltText(this)
                    }
                    , {
                        capture: !0
                    }),
                    bt.addEventListener("keydown", Yt => {
                        Yt.target === bt && Yt.key === "Enter" && (Yt.preventDefault(),
                        this._uiManager.editAltText(this))
                    }
                    ),
                    cs(this, at, to).call(this),
                    this.div.append(bt),
                    kt.SMALL_EDITOR_SIZE || (kt.SMALL_EDITOR_SIZE = Math.min(128, Math.round(bt.getBoundingClientRect().width * 1.4)))
                }
                getClientDimensions() {
                    return this.div.getBoundingClientRect()
                }
                get altTextData() {
                    return {
                        altText: mt(this, g),
                        decorative: mt(this, b)
                    }
                }
                set altTextData({altText: bt, decorative: Tt}) {
                    mt(this, g) === bt && mt(this, b) === Tt || (us(this, g, bt),
                    us(this, b, Tt),
                    cs(this, at, to).call(this))
                }
                render() {
                    this.div = document.createElement("div"),
                    this.div.setAttribute("data-editor-rotation", (360 - this.rotation) % 360),
                    this.div.className = this.name,
                    this.div.setAttribute("id", this.id),
                    this.div.setAttribute("tabIndex", 0),
                    this.setInForeground(),
                    this.div.addEventListener("focusin", mt(this, et)),
                    this.div.addEventListener("focusout", mt(this, it));
                    const [bt,Tt] = this.parentDimensions;
                    this.parentRotation % 180 !== 0 && (this.div.style.maxWidth = `${(100 * Tt / bt).toFixed(2)}%`,
                    this.div.style.maxHeight = `${(100 * bt / Tt).toFixed(2)}%`);
                    const [Yt,Nt] = this.getInitialTranslation();
                    return this.translate(Yt, Nt),
                    (0,
                    o.bindEvents)(this, this.div, ["pointerdown"]),
                    this.div
                }
                pointerdown(bt) {
                    const {isMac: Tt} = a.FeatureTest.platform;
                    if (bt.button !== 0 || bt.ctrlKey && Tt) {
                        bt.preventDefault();
                        return
                    }
                    us(this, st, !0),
                    cs(this, at, Jo).call(this, bt)
                }
                moveInDOM() {
                    var bt;
                    (bt = this.parent) == null || bt.moveEditorInDOM(this)
                }
                _setParentAndPosition(bt, Tt, Yt) {
                    bt.changeParent(this),
                    this.x = Tt,
                    this.y = Yt,
                    this.fixAndSetPosition()
                }
                getRect(bt, Tt) {
                    const Yt = this.parentScale
                      , [Nt,jt] = this.pageDimensions
                      , [xt,Et] = this.pageTranslation
                      , Pt = bt / Yt
                      , St = Tt / Yt
                      , Bt = this.x * Nt
                      , os = this.y * jt
                      , ds = this.width * Nt
                      , js = this.height * jt;
                    switch (this.rotation) {
                    case 0:
                        return [Bt + Pt + xt, jt - os - St - js + Et, Bt + Pt + ds + xt, jt - os - St + Et];
                    case 90:
                        return [Bt + St + xt, jt - os + Pt + Et, Bt + St + js + xt, jt - os + Pt + ds + Et];
                    case 180:
                        return [Bt - Pt - ds + xt, jt - os + St + Et, Bt - Pt + xt, jt - os + St + js + Et];
                    case 270:
                        return [Bt - St - js + xt, jt - os - Pt - ds + Et, Bt - St + xt, jt - os - Pt + Et];
                    default:
                        throw new Error("Invalid rotation")
                    }
                }
                getRectInCurrentCoords(bt, Tt) {
                    const [Yt,Nt,jt,xt] = bt
                      , Et = jt - Yt
                      , Pt = xt - Nt;
                    switch (this.rotation) {
                    case 0:
                        return [Yt, Tt - xt, Et, Pt];
                    case 90:
                        return [Yt, Tt - Nt, Pt, Et];
                    case 180:
                        return [jt, Tt - Nt, Et, Pt];
                    case 270:
                        return [jt, Tt - xt, Pt, Et];
                    default:
                        throw new Error("Invalid rotation")
                    }
                }
                onceAdded() {}
                isEmpty() {
                    return !1
                }
                enableEditMode() {
                    us(this, lt, !0)
                }
                disableEditMode() {
                    us(this, lt, !1)
                }
                isInEditMode() {
                    return mt(this, lt)
                }
                shouldGetKeyboardEvents() {
                    return !1
                }
                needsToBeRebuilt() {
                    return this.div && !this.isAttachedToDOM
                }
                rebuild() {
                    var bt, Tt;
                    (bt = this.div) == null || bt.addEventListener("focusin", mt(this, et)),
                    (Tt = this.div) == null || Tt.addEventListener("focusout", mt(this, it))
                }
                serialize(bt=!1, Tt=null) {
                    (0,
                    a.unreachable)("An editor must be serializable")
                }
                static deserialize(bt, Tt, Yt) {
                    const Nt = new this.prototype.constructor({
                        parent: Tt,
                        id: Tt.getNextId(),
                        uiManager: Yt
                    });
                    Nt.rotation = bt.rotation;
                    const [jt,xt] = Nt.pageDimensions
                      , [Et,Pt,St,Bt] = Nt.getRectInCurrentCoords(bt.rect, xt);
                    return Nt.x = Et / jt,
                    Nt.y = Pt / xt,
                    Nt.width = St / jt,
                    Nt.height = Bt / xt,
                    Nt
                }
                remove() {
                    var bt;
                    this.div.removeEventListener("focusin", mt(this, et)),
                    this.div.removeEventListener("focusout", mt(this, it)),
                    this.isEmpty() || this.commit(),
                    this.parent ? this.parent.remove(this) : this._uiManager.removeEditor(this),
                    (bt = mt(this, _)) == null || bt.remove(),
                    us(this, _, null),
                    us(this, $, null)
                }
                get isResizable() {
                    return !1
                }
                makeResizable() {
                    this.isResizable && (cs(this, at, Go).call(this),
                    mt(this, rt).classList.remove("hidden"))
                }
                select() {
                    var bt;
                    this.makeResizable(),
                    (bt = this.div) == null || bt.classList.add("selectedEditor")
                }
                unselect() {
                    var bt, Tt, Yt;
                    (bt = mt(this, rt)) == null || bt.classList.add("hidden"),
                    (Tt = this.div) == null || Tt.classList.remove("selectedEditor"),
                    (Yt = this.div) != null && Yt.contains(document.activeElement) && this._uiManager.currentLayer.div.focus()
                }
                updateParams(bt, Tt) {}
                disableEditing() {
                    mt(this, _) && (mt(this, _).hidden = !0)
                }
                enableEditing() {
                    mt(this, _) && (mt(this, _).hidden = !1)
                }
                enterInEditMode() {}
                get contentDiv() {
                    return this.div
                }
                get isEditing() {
                    return mt(this, nt)
                }
                set isEditing(bt) {
                    us(this, nt, bt),
                    this.parent && (bt ? (this.parent.setSelected(this),
                    this.parent.setActiveEditor(this)) : this.parent.setActiveEditor(null))
                }
                setAspectRatio(bt, Tt) {
                    us(this, tt, !0);
                    const Yt = bt / Tt
                      , {style: Nt} = this.div;
                    Nt.aspectRatio = Yt,
                    Nt.height = "auto"
                }
                static get MIN_SIZE() {
                    return 16
                }
            }
            ;
            g = new WeakMap,
            b = new WeakMap,
            _ = new WeakMap,
            $ = new WeakMap,
            _e = new WeakMap,
            tt = new WeakMap,
            rt = new WeakMap,
            et = new WeakMap,
            it = new WeakMap,
            st = new WeakMap,
            nt = new WeakMap,
            lt = new WeakMap,
            dt = new WeakMap,
            ot = new WeakMap,
            at = new WeakSet,
            Qn = function([bt,Tt], Yt, Nt) {
                [Yt,Nt] = this.screenToPageTranslation(Yt, Nt),
                this.x += Yt / bt,
                this.y += Nt / Tt,
                this.fixAndSetPosition()
            }
            ,
            Zn = function() {
                const [bt,Tt] = this.parentDimensions
                  , {_borderLineWidth: Yt} = kt
                  , Nt = Yt / bt
                  , jt = Yt / Tt;
                switch (this.rotation) {
                case 90:
                    return [-Nt, jt];
                case 180:
                    return [Nt, jt];
                case 270:
                    return [Nt, -jt];
                default:
                    return [-Nt, -jt]
                }
            }
            ,
            gt = new WeakSet,
            _i = function(bt, Tt, Yt) {
                switch (Yt) {
                case 90:
                    return [Tt, -bt];
                case 180:
                    return [-bt, -Tt];
                case 270:
                    return [-Tt, bt];
                default:
                    return [bt, Tt]
                }
            }
            ,
            eo = function(bt) {
                switch (bt) {
                case 90:
                    {
                        const [Tt,Yt] = this.pageDimensions;
                        return [0, -Tt / Yt, Yt / Tt, 0]
                    }
                case 180:
                    return [-1, 0, 0, -1];
                case 270:
                    {
                        const [Tt,Yt] = this.pageDimensions;
                        return [0, Tt / Yt, -Yt / Tt, 0]
                    }
                default:
                    return [1, 0, 0, 1]
                }
            }
            ,
            Go = function() {
                if (mt(this, rt))
                    return;
                us(this, rt, document.createElement("div")),
                mt(this, rt).classList.add("resizers");
                const bt = ["topLeft", "topRight", "bottomRight", "bottomLeft"];
                this._willKeepAspectRatio || bt.push("topMiddle", "middleRight", "bottomMiddle", "middleLeft");
                for (const Tt of bt) {
                    const Yt = document.createElement("div");
                    mt(this, rt).append(Yt),
                    Yt.classList.add("resizer", Tt),
                    Yt.addEventListener("pointerdown", cs(this, at, qo).bind(this, Tt)),
                    Yt.addEventListener("contextmenu", c.noContextMenu)
                }
                this.div.prepend(mt(this, rt))
            }
            ,
            qo = function(bt, Tt) {
                Tt.preventDefault();
                const {isMac: Yt} = a.FeatureTest.platform;
                if (Tt.button !== 0 || Tt.ctrlKey && Yt)
                    return;
                const Nt = cs(this, at, Ko).bind(this, bt)
                  , jt = this._isDraggable;
                this._isDraggable = !1;
                const xt = {
                    passive: !0,
                    capture: !0
                };
                window.addEventListener("pointermove", Nt, xt);
                const Et = this.x
                  , Pt = this.y
                  , St = this.width
                  , Bt = this.height
                  , os = this.parent.div.style.cursor
                  , ds = this.div.style.cursor;
                this.div.style.cursor = this.parent.div.style.cursor = window.getComputedStyle(Tt.target).cursor;
                const js = () => {
                    this._isDraggable = jt,
                    window.removeEventListener("pointerup", js),
                    window.removeEventListener("blur", js),
                    window.removeEventListener("pointermove", Nt, xt),
                    this.parent.div.style.cursor = os,
                    this.div.style.cursor = ds;
                    const ys = this.x
                      , vs = this.y
                      , Ss = this.width
                      , _s = this.height;
                    ys === Et && vs === Pt && Ss === St && _s === Bt || this.addCommands({
                        cmd: () => {
                            this.width = Ss,
                            this.height = _s,
                            this.x = ys,
                            this.y = vs;
                            const [ns,xs] = this.parentDimensions;
                            this.setDims(ns * Ss, xs * _s),
                            this.fixAndSetPosition()
                        }
                        ,
                        undo: () => {
                            this.width = St,
                            this.height = Bt,
                            this.x = Et,
                            this.y = Pt;
                            const [ns,xs] = this.parentDimensions;
                            this.setDims(ns * St, xs * Bt),
                            this.fixAndSetPosition()
                        }
                        ,
                        mustExec: !0
                    })
                }
                ;
                window.addEventListener("pointerup", js),
                window.addEventListener("blur", js)
            }
            ,
            Ko = function(bt, Tt) {
                const [Yt,Nt] = this.parentDimensions
                  , jt = this.x
                  , xt = this.y
                  , Et = this.width
                  , Pt = this.height
                  , St = kt.MIN_SIZE / Yt
                  , Bt = kt.MIN_SIZE / Nt
                  , os = $s => Math.round($s * 1e4) / 1e4
                  , ds = cs(this, at, eo).call(this, this.rotation)
                  , js = ($s, zs) => [ds[0] * $s + ds[2] * zs, ds[1] * $s + ds[3] * zs]
                  , ys = cs(this, at, eo).call(this, 360 - this.rotation)
                  , vs = ($s, zs) => [ys[0] * $s + ys[2] * zs, ys[1] * $s + ys[3] * zs];
                let Ss, _s, ns = !1, xs = !1;
                switch (bt) {
                case "topLeft":
                    ns = !0,
                    Ss = ($s, zs) => [0, 0],
                    _s = ($s, zs) => [$s, zs];
                    break;
                case "topMiddle":
                    Ss = ($s, zs) => [$s / 2, 0],
                    _s = ($s, zs) => [$s / 2, zs];
                    break;
                case "topRight":
                    ns = !0,
                    Ss = ($s, zs) => [$s, 0],
                    _s = ($s, zs) => [0, zs];
                    break;
                case "middleRight":
                    xs = !0,
                    Ss = ($s, zs) => [$s, zs / 2],
                    _s = ($s, zs) => [0, zs / 2];
                    break;
                case "bottomRight":
                    ns = !0,
                    Ss = ($s, zs) => [$s, zs],
                    _s = ($s, zs) => [0, 0];
                    break;
                case "bottomMiddle":
                    Ss = ($s, zs) => [$s / 2, zs],
                    _s = ($s, zs) => [$s / 2, 0];
                    break;
                case "bottomLeft":
                    ns = !0,
                    Ss = ($s, zs) => [0, zs],
                    _s = ($s, zs) => [$s, 0];
                    break;
                case "middleLeft":
                    xs = !0,
                    Ss = ($s, zs) => [0, zs / 2],
                    _s = ($s, zs) => [$s, zs / 2];
                    break
                }
                const Lt = Ss(Et, Pt)
                  , ts = _s(Et, Pt);
                let ms = js(...ts);
                const hs = os(jt + ms[0])
                  , bs = os(xt + ms[1]);
                let ks = 1
                  , Ts = 1
                  , [ls,Ds] = this.screenToPageTranslation(Tt.movementX, Tt.movementY);
                if ([ls,Ds] = vs(ls / Yt, Ds / Nt),
                ns) {
                    const $s = Math.hypot(Et, Pt);
                    ks = Ts = Math.max(Math.min(Math.hypot(ts[0] - Lt[0] - ls, ts[1] - Lt[1] - Ds) / $s, 1 / Et, 1 / Pt), St / Et, Bt / Pt)
                } else
                    xs ? ks = Math.max(St, Math.min(1, Math.abs(ts[0] - Lt[0] - ls))) / Et : Ts = Math.max(Bt, Math.min(1, Math.abs(ts[1] - Lt[1] - Ds))) / Pt;
                const Ms = os(Et * ks)
                  , Hs = os(Pt * Ts);
                ms = js(..._s(Ms, Hs));
                const Vs = hs - ms[0]
                  , Xs = bs - ms[1];
                this.width = Ms,
                this.height = Hs,
                this.x = Vs,
                this.y = Xs,
                this.setDims(Yt * Ms, Nt * Hs),
                this.fixAndSetPosition()
            }
            ,
            to = async function() {
                var Yt;
                const bt = mt(this, _);
                if (!bt)
                    return;
                if (!mt(this, g) && !mt(this, b)) {
                    bt.classList.remove("done"),
                    (Yt = mt(this, $)) == null || Yt.remove();
                    return
                }
                kt._l10nPromise.get("editor_alt_text_edit_button_label").then(Nt => {
                    bt.setAttribute("aria-label", Nt)
                }
                );
                let Tt = mt(this, $);
                if (!Tt) {
                    us(this, $, Tt = document.createElement("span")),
                    Tt.className = "tooltip",
                    Tt.setAttribute("role", "tooltip");
                    const Nt = Tt.id = `alt-text-tooltip-${this.id}`;
                    bt.setAttribute("aria-describedby", Nt);
                    const jt = 100;
                    bt.addEventListener("mouseenter", () => {
                        us(this, _e, setTimeout( () => {
                            us(this, _e, null),
                            mt(this, $).classList.add("show"),
                            this._uiManager._eventBus.dispatch("reporttelemetry", {
                                source: this,
                                details: {
                                    type: "editing",
                                    subtype: this.editorType,
                                    data: {
                                        action: "alt_text_tooltip"
                                    }
                                }
                            })
                        }
                        , jt))
                    }
                    ),
                    bt.addEventListener("mouseleave", () => {
                        var xt;
                        clearTimeout(mt(this, _e)),
                        us(this, _e, null),
                        (xt = mt(this, $)) == null || xt.classList.remove("show")
                    }
                    )
                }
                bt.classList.add("done"),
                Tt.innerText = mt(this, b) ? await kt._l10nPromise.get("editor_alt_text_decorative_tooltip") : mt(this, g),
                Tt.parentNode || bt.append(Tt)
            }
            ,
            Jo = function(bt) {
                if (!this._isDraggable)
                    return;
                const Tt = this._uiManager.isSelected(this);
                this._uiManager.setUpDragSession();
                let Yt, Nt;
                Tt && (Yt = {
                    passive: !0,
                    capture: !0
                },
                Nt = xt => {
                    const [Et,Pt] = this.screenToPageTranslation(xt.movementX, xt.movementY);
                    this._uiManager.dragSelectedEditors(Et, Pt)
                }
                ,
                window.addEventListener("pointermove", Nt, Yt));
                const jt = () => {
                    if (window.removeEventListener("pointerup", jt),
                    window.removeEventListener("blur", jt),
                    Tt && window.removeEventListener("pointermove", Nt, Yt),
                    us(this, st, !1),
                    !this._uiManager.endDragSession()) {
                        const {isMac: xt} = a.FeatureTest.platform;
                        bt.ctrlKey && !xt || bt.shiftKey || bt.metaKey && xt ? this.parent.toggleSelected(this) : this.parent.setSelected(this)
                    }
                }
                ;
                window.addEventListener("pointerup", jt),
                window.addEventListener("blur", jt)
            }
            ,
            ps(kt, gt),
            tr(kt, "_borderLineWidth", -1),
            tr(kt, "_colorManager", new o.ColorManager),
            tr(kt, "_zIndex", 1),
            tr(kt, "SMALL_EDITOR_SIZE", 0);
            let d = kt;
            e.AnnotationEditor = d;
            class h extends d {
                constructor(bt) {
                    super(bt),
                    this.annotationElementId = bt.annotationElementId,
                    this.deleted = !0
                }
                serialize() {
                    return {
                        id: this.annotationElementId,
                        deleted: !0,
                        pageIndex: this.pageIndex
                    }
                }
            }
        }
        , (s, e, i) => {
            var tt, rt, et, it, st, so, dt, ot, at, ht, pt, Yo, yt, Rt, Mt, ss, zt, At, kt, vt, bt, Tt, Yt, Nt, jt, xt, Et, Pt, St, Bt, os, ds, js, ys, vs, Ss, _s, ns, xs, Lt, ts, ms, hs, bs, ks, Ts, ls, Xo, ro, no, kn, io, oo, fr, fn, Qo, Zo, ao, gn, lo;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.KeyboardManager = e.CommandManager = e.ColorManager = e.AnnotationEditorUIManager = void 0,
            e.bindEvents = c,
            e.opacityToHex = d;
            var o = i(1)
              , a = i(6);
            function c(gs, es, ws) {
                for (const Is of ws)
                    es.addEventListener(Is, gs[Is].bind(gs))
            }
            function d(gs) {
                return Math.round(Math.min(255, Math.max(1, 255 * gs))).toString(16).padStart(2, "0")
            }
            class h {
                constructor() {
                    ps(this, tt, 0)
                }
                getId() {
                    return `${o.AnnotationEditorPrefix}${kr(this, tt)._++}`
                }
            }
            tt = new WeakMap;
            const lt = class lt {
                constructor() {
                    ps(this, st);
                    ps(this, rt, (0,
                    o.getUuid)());
                    ps(this, et, 0);
                    ps(this, it, null)
                }
                static get _isSVGFittingCanvas() {
                    const es = 'data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>'
                      , Is = new OffscreenCanvas(1,3).getContext("2d")
                      , Fs = new Image;
                    Fs.src = es;
                    const Js = Fs.decode().then( () => (Is.drawImage(Fs, 0, 0, 1, 1, 0, 0, 1, 3),
                    new Uint32Array(Is.getImageData(0, 0, 1, 1).data.buffer)[0] === 0));
                    return (0,
                    o.shadow)(this, "_isSVGFittingCanvas", Js)
                }
                async getFromFile(es) {
                    const {lastModified: ws, name: Is, size: Fs, type: Js} = es;
                    return cs(this, st, so).call(this, `${ws}_${Is}_${Fs}_${Js}`, es)
                }
                async getFromUrl(es) {
                    return cs(this, st, so).call(this, es, es)
                }
                async getFromId(es) {
                    mt(this, it) || us(this, it, new Map);
                    const ws = mt(this, it).get(es);
                    return ws ? ws.bitmap ? (ws.refCounter += 1,
                    ws) : ws.file ? this.getFromFile(ws.file) : this.getFromUrl(ws.url) : null
                }
                getSvgUrl(es) {
                    const ws = mt(this, it).get(es);
                    return ws != null && ws.isSvg ? ws.svgUrl : null
                }
                deleteId(es) {
                    mt(this, it) || us(this, it, new Map);
                    const ws = mt(this, it).get(es);
                    ws && (ws.refCounter -= 1,
                    ws.refCounter === 0 && (ws.bitmap = null))
                }
                isValidId(es) {
                    return es.startsWith(`image_${mt(this, rt)}_`)
                }
            }
            ;
            rt = new WeakMap,
            et = new WeakMap,
            it = new WeakMap,
            st = new WeakSet,
            so = async function(es, ws) {
                mt(this, it) || us(this, it, new Map);
                let Is = mt(this, it).get(es);
                if (Is === null)
                    return null;
                if (Is != null && Is.bitmap)
                    return Is.refCounter += 1,
                    Is;
                try {
                    Is || (Is = {
                        bitmap: null,
                        id: `image_${mt(this, rt)}_${kr(this, et)._++}`,
                        refCounter: 0,
                        isSvg: !1
                    });
                    let Fs;
                    if (typeof ws == "string") {
                        Is.url = ws;
                        const Js = await fetch(ws);
                        if (!Js.ok)
                            throw new Error(Js.statusText);
                        Fs = await Js.blob()
                    } else
                        Fs = Is.file = ws;
                    if (Fs.type === "image/svg+xml") {
                        const Js = lt._isSVGFittingCanvas
                          , Us = new FileReader
                          , is = new Image
                          , rs = new Promise( (fs, Ns) => {
                            is.onload = () => {
                                Is.bitmap = is,
                                Is.isSvg = !0,
                                fs()
                            }
                            ,
                            Us.onload = async () => {
                                const Cs = Is.svgUrl = Us.result;
                                is.src = await Js ? `${Cs}#svgView(preserveAspectRatio(none))` : Cs
                            }
                            ,
                            is.onerror = Us.onerror = Ns
                        }
                        );
                        Us.readAsDataURL(Fs),
                        await rs
                    } else
                        Is.bitmap = await createImageBitmap(Fs);
                    Is.refCounter = 1
                } catch (Fs) {
                    console.error(Fs),
                    Is = null
                }
                return mt(this, it).set(es, Is),
                Is && mt(this, it).set(Is.id, Is),
                Is
            }
            ;
            let g = lt;
            class b {
                constructor(es=128) {
                    ps(this, dt, []);
                    ps(this, ot, !1);
                    ps(this, at);
                    ps(this, ht, -1);
                    us(this, at, es)
                }
                add({cmd: es, undo: ws, mustExec: Is, type: Fs=NaN, overwriteIfSameType: Js=!1, keepUndo: Us=!1}) {
                    if (Is && es(),
                    mt(this, ot))
                        return;
                    const is = {
                        cmd: es,
                        undo: ws,
                        type: Fs
                    };
                    if (mt(this, ht) === -1) {
                        mt(this, dt).length > 0 && (mt(this, dt).length = 0),
                        us(this, ht, 0),
                        mt(this, dt).push(is);
                        return
                    }
                    if (Js && mt(this, dt)[mt(this, ht)].type === Fs) {
                        Us && (is.undo = mt(this, dt)[mt(this, ht)].undo),
                        mt(this, dt)[mt(this, ht)] = is;
                        return
                    }
                    const rs = mt(this, ht) + 1;
                    rs === mt(this, at) ? mt(this, dt).splice(0, 1) : (us(this, ht, rs),
                    rs < mt(this, dt).length && mt(this, dt).splice(rs)),
                    mt(this, dt).push(is)
                }
                undo() {
                    mt(this, ht) !== -1 && (us(this, ot, !0),
                    mt(this, dt)[mt(this, ht)].undo(),
                    us(this, ot, !1),
                    us(this, ht, mt(this, ht) - 1))
                }
                redo() {
                    mt(this, ht) < mt(this, dt).length - 1 && (us(this, ht, mt(this, ht) + 1),
                    us(this, ot, !0),
                    mt(this, dt)[mt(this, ht)].cmd(),
                    us(this, ot, !1))
                }
                hasSomethingToUndo() {
                    return mt(this, ht) !== -1
                }
                hasSomethingToRedo() {
                    return mt(this, ht) < mt(this, dt).length - 1
                }
                destroy() {
                    us(this, dt, null)
                }
            }
            dt = new WeakMap,
            ot = new WeakMap,
            at = new WeakMap,
            ht = new WeakMap,
            e.CommandManager = b;
            class _ {
                constructor(es) {
                    ps(this, pt);
                    this.buffer = [],
                    this.callbacks = new Map,
                    this.allKeys = new Set;
                    const {isMac: ws} = o.FeatureTest.platform;
                    for (const [Is,Fs,Js={}] of es)
                        for (const Us of Is) {
                            const is = Us.startsWith("mac+");
                            ws && is ? (this.callbacks.set(Us.slice(4), {
                                callback: Fs,
                                options: Js
                            }),
                            this.allKeys.add(Us.split("+").at(-1))) : !ws && !is && (this.callbacks.set(Us, {
                                callback: Fs,
                                options: Js
                            }),
                            this.allKeys.add(Us.split("+").at(-1)))
                        }
                }
                exec(es, ws) {
                    if (!this.allKeys.has(ws.key))
                        return;
                    const Is = this.callbacks.get(cs(this, pt, Yo).call(this, ws));
                    if (!Is)
                        return;
                    const {callback: Fs, options: {bubbles: Js=!1, args: Us=[], checker: is=null}} = Is;
                    is && !is(es, ws) || (Fs.bind(es, ...Us)(),
                    Js || (ws.stopPropagation(),
                    ws.preventDefault()))
                }
            }
            pt = new WeakSet,
            Yo = function(es) {
                es.altKey && this.buffer.push("alt"),
                es.ctrlKey && this.buffer.push("ctrl"),
                es.metaKey && this.buffer.push("meta"),
                es.shiftKey && this.buffer.push("shift"),
                this.buffer.push(es.key);
                const ws = this.buffer.join("+");
                return this.buffer.length = 0,
                ws
            }
            ,
            e.KeyboardManager = _;
            const wt = class wt {
                get _colors() {
                    const es = new Map([["CanvasText", null], ["Canvas", null]]);
                    return (0,
                    a.getColorValues)(es),
                    (0,
                    o.shadow)(this, "_colors", es)
                }
                convert(es) {
                    const ws = (0,
                    a.getRGB)(es);
                    if (!window.matchMedia("(forced-colors: active)").matches)
                        return ws;
                    for (const [Is,Fs] of this._colors)
                        if (Fs.every( (Js, Us) => Js === ws[Us]))
                            return wt._colorsMapping.get(Is);
                    return ws
                }
                getHexCode(es) {
                    const ws = this._colors.get(es);
                    return ws ? o.Util.makeHexColor(...ws) : es
                }
            }
            ;
            tr(wt, "_colorsMapping", new Map([["CanvasText", [0, 0, 0]], ["Canvas", [255, 255, 255]]]));
            let $ = wt;
            e.ColorManager = $;
            const Ps = class Ps {
                constructor(es, ws, Is, Fs, Js, Us) {
                    ps(this, ls);
                    ps(this, yt, null);
                    ps(this, Rt, new Map);
                    ps(this, Mt, new Map);
                    ps(this, ss, null);
                    ps(this, zt, null);
                    ps(this, At, new b);
                    ps(this, kt, 0);
                    ps(this, vt, new Set);
                    ps(this, bt, null);
                    ps(this, Tt, null);
                    ps(this, Yt, new Set);
                    ps(this, Nt, null);
                    ps(this, jt, new h);
                    ps(this, xt, !1);
                    ps(this, Et, !1);
                    ps(this, Pt, null);
                    ps(this, St, o.AnnotationEditorType.NONE);
                    ps(this, Bt, new Set);
                    ps(this, os, null);
                    ps(this, ds, this.blur.bind(this));
                    ps(this, js, this.focus.bind(this));
                    ps(this, ys, this.copy.bind(this));
                    ps(this, vs, this.cut.bind(this));
                    ps(this, Ss, this.paste.bind(this));
                    ps(this, _s, this.keydown.bind(this));
                    ps(this, ns, this.onEditingAction.bind(this));
                    ps(this, xs, this.onPageChanging.bind(this));
                    ps(this, Lt, this.onScaleChanging.bind(this));
                    ps(this, ts, this.onRotationChanging.bind(this));
                    ps(this, ms, {
                        isEditing: !1,
                        isEmpty: !0,
                        hasSomethingToUndo: !1,
                        hasSomethingToRedo: !1,
                        hasSelectedEditor: !1
                    });
                    ps(this, hs, [0, 0]);
                    ps(this, bs, null);
                    ps(this, ks, null);
                    ps(this, Ts, null);
                    us(this, ks, es),
                    us(this, Ts, ws),
                    us(this, ss, Is),
                    this._eventBus = Fs,
                    this._eventBus._on("editingaction", mt(this, ns)),
                    this._eventBus._on("pagechanging", mt(this, xs)),
                    this._eventBus._on("scalechanging", mt(this, Lt)),
                    this._eventBus._on("rotationchanging", mt(this, ts)),
                    us(this, zt, Js.annotationStorage),
                    us(this, Nt, Js.filterFactory),
                    us(this, os, Us),
                    this.viewParameters = {
                        realScale: a.PixelsPerInch.PDF_TO_CSS_UNITS,
                        rotation: 0
                    }
                }
                static get _keyboardManager() {
                    const es = Ps.prototype
                      , ws = Js => {
                        const {activeElement: Us} = document;
                        return Us && mt(Js, ks).contains(Us) && Js.hasSomethingToControl()
                    }
                      , Is = this.TRANSLATE_SMALL
                      , Fs = this.TRANSLATE_BIG;
                    return (0,
                    o.shadow)(this, "_keyboardManager", new _([[["ctrl+a", "mac+meta+a"], es.selectAll], [["ctrl+z", "mac+meta+z"], es.undo], [["ctrl+y", "ctrl+shift+z", "mac+meta+shift+z", "ctrl+shift+Z", "mac+meta+shift+Z"], es.redo], [["Backspace", "alt+Backspace", "ctrl+Backspace", "shift+Backspace", "mac+Backspace", "mac+alt+Backspace", "mac+ctrl+Backspace", "Delete", "ctrl+Delete", "shift+Delete", "mac+Delete"], es.delete], [["Escape", "mac+Escape"], es.unselectAll], [["ArrowLeft", "mac+ArrowLeft"], es.translateSelectedEditors, {
                        args: [-Is, 0],
                        checker: ws
                    }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], es.translateSelectedEditors, {
                        args: [-Fs, 0],
                        checker: ws
                    }], [["ArrowRight", "mac+ArrowRight"], es.translateSelectedEditors, {
                        args: [Is, 0],
                        checker: ws
                    }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], es.translateSelectedEditors, {
                        args: [Fs, 0],
                        checker: ws
                    }], [["ArrowUp", "mac+ArrowUp"], es.translateSelectedEditors, {
                        args: [0, -Is],
                        checker: ws
                    }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], es.translateSelectedEditors, {
                        args: [0, -Fs],
                        checker: ws
                    }], [["ArrowDown", "mac+ArrowDown"], es.translateSelectedEditors, {
                        args: [0, Is],
                        checker: ws
                    }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], es.translateSelectedEditors, {
                        args: [0, Fs],
                        checker: ws
                    }]]))
                }
                destroy() {
                    cs(this, ls, kn).call(this),
                    cs(this, ls, ro).call(this),
                    this._eventBus._off("editingaction", mt(this, ns)),
                    this._eventBus._off("pagechanging", mt(this, xs)),
                    this._eventBus._off("scalechanging", mt(this, Lt)),
                    this._eventBus._off("rotationchanging", mt(this, ts));
                    for (const es of mt(this, Mt).values())
                        es.destroy();
                    mt(this, Mt).clear(),
                    mt(this, Rt).clear(),
                    mt(this, Yt).clear(),
                    us(this, yt, null),
                    mt(this, Bt).clear(),
                    mt(this, At).destroy(),
                    mt(this, ss).destroy()
                }
                get hcmFilter() {
                    return (0,
                    o.shadow)(this, "hcmFilter", mt(this, os) ? mt(this, Nt).addHCMFilter(mt(this, os).foreground, mt(this, os).background) : "none")
                }
                get direction() {
                    return (0,
                    o.shadow)(this, "direction", getComputedStyle(mt(this, ks)).direction)
                }
                editAltText(es) {
                    var ws;
                    (ws = mt(this, ss)) == null || ws.editAltText(this, es)
                }
                onPageChanging({pageNumber: es}) {
                    us(this, kt, es - 1)
                }
                focusMainContainer() {
                    mt(this, ks).focus()
                }
                findParent(es, ws) {
                    for (const Is of mt(this, Mt).values()) {
                        const {x: Fs, y: Js, width: Us, height: is} = Is.div.getBoundingClientRect();
                        if (es >= Fs && es <= Fs + Us && ws >= Js && ws <= Js + is)
                            return Is
                    }
                    return null
                }
                disableUserSelect(es=!1) {
                    mt(this, Ts).classList.toggle("noUserSelect", es)
                }
                addShouldRescale(es) {
                    mt(this, Yt).add(es)
                }
                removeShouldRescale(es) {
                    mt(this, Yt).delete(es)
                }
                onScaleChanging({scale: es}) {
                    this.commitOrRemove(),
                    this.viewParameters.realScale = es * a.PixelsPerInch.PDF_TO_CSS_UNITS;
                    for (const ws of mt(this, Yt))
                        ws.onScaleChanging()
                }
                onRotationChanging({pagesRotation: es}) {
                    this.commitOrRemove(),
                    this.viewParameters.rotation = es
                }
                addToAnnotationStorage(es) {
                    !es.isEmpty() && mt(this, zt) && !mt(this, zt).has(es.id) && mt(this, zt).setValue(es.id, es)
                }
                blur() {
                    if (!this.hasSelection)
                        return;
                    const {activeElement: es} = document;
                    for (const ws of mt(this, Bt))
                        if (ws.div.contains(es)) {
                            us(this, Pt, [ws, es]),
                            ws._focusEventsAllowed = !1;
                            break
                        }
                }
                focus() {
                    if (!mt(this, Pt))
                        return;
                    const [es,ws] = mt(this, Pt);
                    us(this, Pt, null),
                    ws.addEventListener("focusin", () => {
                        es._focusEventsAllowed = !0
                    }
                    , {
                        once: !0
                    }),
                    ws.focus()
                }
                addEditListeners() {
                    cs(this, ls, no).call(this),
                    cs(this, ls, io).call(this)
                }
                removeEditListeners() {
                    cs(this, ls, kn).call(this),
                    cs(this, ls, oo).call(this)
                }
                copy(es) {
                    var Is;
                    if (es.preventDefault(),
                    (Is = mt(this, yt)) == null || Is.commitOrRemove(),
                    !this.hasSelection)
                        return;
                    const ws = [];
                    for (const Fs of mt(this, Bt)) {
                        const Js = Fs.serialize(!0);
                        Js && ws.push(Js)
                    }
                    ws.length !== 0 && es.clipboardData.setData("application/pdfjs", JSON.stringify(ws))
                }
                cut(es) {
                    this.copy(es),
                    this.delete()
                }
                paste(es) {
                    es.preventDefault();
                    const {clipboardData: ws} = es;
                    for (const Js of ws.items)
                        for (const Us of mt(this, Tt))
                            if (Us.isHandlingMimeForPasting(Js.type)) {
                                Us.paste(Js, this.currentLayer);
                                return
                            }
                    let Is = ws.getData("application/pdfjs");
                    if (!Is)
                        return;
                    try {
                        Is = JSON.parse(Is)
                    } catch (Js) {
                        (0,
                        o.warn)(`paste: "${Js.message}".`);
                        return
                    }
                    if (!Array.isArray(Is))
                        return;
                    this.unselectAll();
                    const Fs = this.currentLayer;
                    try {
                        const Js = [];
                        for (const rs of Is) {
                            const fs = Fs.deserialize(rs);
                            if (!fs)
                                return;
                            Js.push(fs)
                        }
                        const Us = () => {
                            for (const rs of Js)
                                cs(this, ls, ao).call(this, rs);
                            cs(this, ls, lo).call(this, Js)
                        }
                          , is = () => {
                            for (const rs of Js)
                                rs.remove()
                        }
                        ;
                        this.addCommands({
                            cmd: Us,
                            undo: is,
                            mustExec: !0
                        })
                    } catch (Js) {
                        (0,
                        o.warn)(`paste: "${Js.message}".`)
                    }
                }
                keydown(es) {
                    var ws;
                    (ws = this.getActive()) != null && ws.shouldGetKeyboardEvents() || Ps._keyboardManager.exec(this, es)
                }
                onEditingAction(es) {
                    ["undo", "redo", "delete", "selectAll"].includes(es.name) && this[es.name]()
                }
                setEditingState(es) {
                    es ? (cs(this, ls, Xo).call(this),
                    cs(this, ls, no).call(this),
                    cs(this, ls, io).call(this),
                    cs(this, ls, fr).call(this, {
                        isEditing: mt(this, St) !== o.AnnotationEditorType.NONE,
                        isEmpty: cs(this, ls, gn).call(this),
                        hasSomethingToUndo: mt(this, At).hasSomethingToUndo(),
                        hasSomethingToRedo: mt(this, At).hasSomethingToRedo(),
                        hasSelectedEditor: !1
                    })) : (cs(this, ls, ro).call(this),
                    cs(this, ls, kn).call(this),
                    cs(this, ls, oo).call(this),
                    cs(this, ls, fr).call(this, {
                        isEditing: !1
                    }),
                    this.disableUserSelect(!1))
                }
                registerEditorTypes(es) {
                    if (!mt(this, Tt)) {
                        us(this, Tt, es);
                        for (const ws of mt(this, Tt))
                            cs(this, ls, fn).call(this, ws.defaultPropertiesToUpdate)
                    }
                }
                getId() {
                    return mt(this, jt).getId()
                }
                get currentLayer() {
                    return mt(this, Mt).get(mt(this, kt))
                }
                getLayer(es) {
                    return mt(this, Mt).get(es)
                }
                get currentPageIndex() {
                    return mt(this, kt)
                }
                addLayer(es) {
                    mt(this, Mt).set(es.pageIndex, es),
                    mt(this, xt) ? es.enable() : es.disable()
                }
                removeLayer(es) {
                    mt(this, Mt).delete(es.pageIndex)
                }
                updateMode(es, ws=null) {
                    if (mt(this, St) !== es) {
                        if (us(this, St, es),
                        es === o.AnnotationEditorType.NONE) {
                            this.setEditingState(!1),
                            cs(this, ls, Zo).call(this);
                            return
                        }
                        this.setEditingState(!0),
                        cs(this, ls, Qo).call(this),
                        this.unselectAll();
                        for (const Is of mt(this, Mt).values())
                            Is.updateMode(es);
                        if (ws) {
                            for (const Is of mt(this, Rt).values())
                                if (Is.annotationElementId === ws) {
                                    this.setSelected(Is),
                                    Is.enterInEditMode();
                                    break
                                }
                        }
                    }
                }
                updateToolbar(es) {
                    es !== mt(this, St) && this._eventBus.dispatch("switchannotationeditormode", {
                        source: this,
                        mode: es
                    })
                }
                updateParams(es, ws) {
                    if (mt(this, Tt)) {
                        if (es === o.AnnotationEditorParamsType.CREATE) {
                            this.currentLayer.addNewEditor(es);
                            return
                        }
                        for (const Is of mt(this, Bt))
                            Is.updateParams(es, ws);
                        for (const Is of mt(this, Tt))
                            Is.updateDefaultParams(es, ws)
                    }
                }
                enableWaiting(es=!1) {
                    if (mt(this, Et) !== es) {
                        us(this, Et, es);
                        for (const ws of mt(this, Mt).values())
                            es ? ws.disableClick() : ws.enableClick(),
                            ws.div.classList.toggle("waiting", es)
                    }
                }
                getEditors(es) {
                    const ws = [];
                    for (const Is of mt(this, Rt).values())
                        Is.pageIndex === es && ws.push(Is);
                    return ws
                }
                getEditor(es) {
                    return mt(this, Rt).get(es)
                }
                addEditor(es) {
                    mt(this, Rt).set(es.id, es)
                }
                removeEditor(es) {
                    var ws;
                    mt(this, Rt).delete(es.id),
                    this.unselect(es),
                    (!es.annotationElementId || !mt(this, vt).has(es.annotationElementId)) && ((ws = mt(this, zt)) == null || ws.remove(es.id))
                }
                addDeletedAnnotationElement(es) {
                    mt(this, vt).add(es.annotationElementId),
                    es.deleted = !0
                }
                isDeletedAnnotationElement(es) {
                    return mt(this, vt).has(es)
                }
                removeDeletedAnnotationElement(es) {
                    mt(this, vt).delete(es.annotationElementId),
                    es.deleted = !1
                }
                setActiveEditor(es) {
                    mt(this, yt) !== es && (us(this, yt, es),
                    es && cs(this, ls, fn).call(this, es.propertiesToUpdate))
                }
                toggleSelected(es) {
                    if (mt(this, Bt).has(es)) {
                        mt(this, Bt).delete(es),
                        es.unselect(),
                        cs(this, ls, fr).call(this, {
                            hasSelectedEditor: this.hasSelection
                        });
                        return
                    }
                    mt(this, Bt).add(es),
                    es.select(),
                    cs(this, ls, fn).call(this, es.propertiesToUpdate),
                    cs(this, ls, fr).call(this, {
                        hasSelectedEditor: !0
                    })
                }
                setSelected(es) {
                    for (const ws of mt(this, Bt))
                        ws !== es && ws.unselect();
                    mt(this, Bt).clear(),
                    mt(this, Bt).add(es),
                    es.select(),
                    cs(this, ls, fn).call(this, es.propertiesToUpdate),
                    cs(this, ls, fr).call(this, {
                        hasSelectedEditor: !0
                    })
                }
                isSelected(es) {
                    return mt(this, Bt).has(es)
                }
                unselect(es) {
                    es.unselect(),
                    mt(this, Bt).delete(es),
                    cs(this, ls, fr).call(this, {
                        hasSelectedEditor: this.hasSelection
                    })
                }
                get hasSelection() {
                    return mt(this, Bt).size !== 0
                }
                undo() {
                    mt(this, At).undo(),
                    cs(this, ls, fr).call(this, {
                        hasSomethingToUndo: mt(this, At).hasSomethingToUndo(),
                        hasSomethingToRedo: !0,
                        isEmpty: cs(this, ls, gn).call(this)
                    })
                }
                redo() {
                    mt(this, At).redo(),
                    cs(this, ls, fr).call(this, {
                        hasSomethingToUndo: !0,
                        hasSomethingToRedo: mt(this, At).hasSomethingToRedo(),
                        isEmpty: cs(this, ls, gn).call(this)
                    })
                }
                addCommands(es) {
                    mt(this, At).add(es),
                    cs(this, ls, fr).call(this, {
                        hasSomethingToUndo: !0,
                        hasSomethingToRedo: !1,
                        isEmpty: cs(this, ls, gn).call(this)
                    })
                }
                delete() {
                    if (this.commitOrRemove(),
                    !this.hasSelection)
                        return;
                    const es = [...mt(this, Bt)]
                      , ws = () => {
                        for (const Fs of es)
                            Fs.remove()
                    }
                      , Is = () => {
                        for (const Fs of es)
                            cs(this, ls, ao).call(this, Fs)
                    }
                    ;
                    this.addCommands({
                        cmd: ws,
                        undo: Is,
                        mustExec: !0
                    })
                }
                commitOrRemove() {
                    var es;
                    (es = mt(this, yt)) == null || es.commitOrRemove()
                }
                hasSomethingToControl() {
                    return mt(this, yt) || this.hasSelection
                }
                selectAll() {
                    for (const es of mt(this, Bt))
                        es.commit();
                    cs(this, ls, lo).call(this, mt(this, Rt).values())
                }
                unselectAll() {
                    if (mt(this, yt)) {
                        mt(this, yt).commitOrRemove();
                        return
                    }
                    if (this.hasSelection) {
                        for (const es of mt(this, Bt))
                            es.unselect();
                        mt(this, Bt).clear(),
                        cs(this, ls, fr).call(this, {
                            hasSelectedEditor: !1
                        })
                    }
                }
                translateSelectedEditors(es, ws, Is=!1) {
                    if (Is || this.commitOrRemove(),
                    !this.hasSelection)
                        return;
                    mt(this, hs)[0] += es,
                    mt(this, hs)[1] += ws;
                    const [Fs,Js] = mt(this, hs)
                      , Us = [...mt(this, Bt)]
                      , is = 1e3;
                    mt(this, bs) && clearTimeout(mt(this, bs)),
                    us(this, bs, setTimeout( () => {
                        us(this, bs, null),
                        mt(this, hs)[0] = mt(this, hs)[1] = 0,
                        this.addCommands({
                            cmd: () => {
                                for (const rs of Us)
                                    mt(this, Rt).has(rs.id) && rs.translateInPage(Fs, Js)
                            }
                            ,
                            undo: () => {
                                for (const rs of Us)
                                    mt(this, Rt).has(rs.id) && rs.translateInPage(-Fs, -Js)
                            }
                            ,
                            mustExec: !1
                        })
                    }
                    , is));
                    for (const rs of Us)
                        rs.translateInPage(es, ws)
                }
                setUpDragSession() {
                    if (this.hasSelection) {
                        this.disableUserSelect(!0),
                        us(this, bt, new Map);
                        for (const es of mt(this, Bt))
                            mt(this, bt).set(es, {
                                savedX: es.x,
                                savedY: es.y,
                                savedPageIndex: es.pageIndex,
                                newX: 0,
                                newY: 0,
                                newPageIndex: -1
                            })
                    }
                }
                endDragSession() {
                    if (!mt(this, bt))
                        return !1;
                    this.disableUserSelect(!1);
                    const es = mt(this, bt);
                    us(this, bt, null);
                    let ws = !1;
                    for (const [{x: Fs, y: Js, pageIndex: Us},is] of es)
                        is.newX = Fs,
                        is.newY = Js,
                        is.newPageIndex = Us,
                        ws || (ws = Fs !== is.savedX || Js !== is.savedY || Us !== is.savedPageIndex);
                    if (!ws)
                        return !1;
                    const Is = (Fs, Js, Us, is) => {
                        if (mt(this, Rt).has(Fs.id)) {
                            const rs = mt(this, Mt).get(is);
                            rs ? Fs._setParentAndPosition(rs, Js, Us) : (Fs.pageIndex = is,
                            Fs.x = Js,
                            Fs.y = Us)
                        }
                    }
                    ;
                    return this.addCommands({
                        cmd: () => {
                            for (const [Fs,{newX: Js, newY: Us, newPageIndex: is}] of es)
                                Is(Fs, Js, Us, is)
                        }
                        ,
                        undo: () => {
                            for (const [Fs,{savedX: Js, savedY: Us, savedPageIndex: is}] of es)
                                Is(Fs, Js, Us, is)
                        }
                        ,
                        mustExec: !0
                    }),
                    !0
                }
                dragSelectedEditors(es, ws) {
                    if (mt(this, bt))
                        for (const Is of mt(this, bt).keys())
                            Is.drag(es, ws)
                }
                rebuild(es) {
                    if (es.parent === null) {
                        const ws = this.getLayer(es.pageIndex);
                        ws ? (ws.changeParent(es),
                        ws.addOrRebuild(es)) : (this.addEditor(es),
                        this.addToAnnotationStorage(es),
                        es.rebuild())
                    } else
                        es.parent.addOrRebuild(es)
                }
                isActive(es) {
                    return mt(this, yt) === es
                }
                getActive() {
                    return mt(this, yt)
                }
                getMode() {
                    return mt(this, St)
                }
                get imageManager() {
                    return (0,
                    o.shadow)(this, "imageManager", new g)
                }
            }
            ;
            yt = new WeakMap,
            Rt = new WeakMap,
            Mt = new WeakMap,
            ss = new WeakMap,
            zt = new WeakMap,
            At = new WeakMap,
            kt = new WeakMap,
            vt = new WeakMap,
            bt = new WeakMap,
            Tt = new WeakMap,
            Yt = new WeakMap,
            Nt = new WeakMap,
            jt = new WeakMap,
            xt = new WeakMap,
            Et = new WeakMap,
            Pt = new WeakMap,
            St = new WeakMap,
            Bt = new WeakMap,
            os = new WeakMap,
            ds = new WeakMap,
            js = new WeakMap,
            ys = new WeakMap,
            vs = new WeakMap,
            Ss = new WeakMap,
            _s = new WeakMap,
            ns = new WeakMap,
            xs = new WeakMap,
            Lt = new WeakMap,
            ts = new WeakMap,
            ms = new WeakMap,
            hs = new WeakMap,
            bs = new WeakMap,
            ks = new WeakMap,
            Ts = new WeakMap,
            ls = new WeakSet,
            Xo = function() {
                window.addEventListener("focus", mt(this, js)),
                window.addEventListener("blur", mt(this, ds))
            }
            ,
            ro = function() {
                window.removeEventListener("focus", mt(this, js)),
                window.removeEventListener("blur", mt(this, ds))
            }
            ,
            no = function() {
                window.addEventListener("keydown", mt(this, _s), {
                    capture: !0
                })
            }
            ,
            kn = function() {
                window.removeEventListener("keydown", mt(this, _s), {
                    capture: !0
                })
            }
            ,
            io = function() {
                document.addEventListener("copy", mt(this, ys)),
                document.addEventListener("cut", mt(this, vs)),
                document.addEventListener("paste", mt(this, Ss))
            }
            ,
            oo = function() {
                document.removeEventListener("copy", mt(this, ys)),
                document.removeEventListener("cut", mt(this, vs)),
                document.removeEventListener("paste", mt(this, Ss))
            }
            ,
            fr = function(es) {
                Object.entries(es).some( ([Is,Fs]) => mt(this, ms)[Is] !== Fs) && this._eventBus.dispatch("annotationeditorstateschanged", {
                    source: this,
                    details: Object.assign(mt(this, ms), es)
                })
            }
            ,
            fn = function(es) {
                this._eventBus.dispatch("annotationeditorparamschanged", {
                    source: this,
                    details: es
                })
            }
            ,
            Qo = function() {
                if (!mt(this, xt)) {
                    us(this, xt, !0);
                    for (const es of mt(this, Mt).values())
                        es.enable()
                }
            }
            ,
            Zo = function() {
                if (this.unselectAll(),
                mt(this, xt)) {
                    us(this, xt, !1);
                    for (const es of mt(this, Mt).values())
                        es.disable()
                }
            }
            ,
            ao = function(es) {
                const ws = mt(this, Mt).get(es.pageIndex);
                ws ? ws.addOrRebuild(es) : this.addEditor(es)
            }
            ,
            gn = function() {
                if (mt(this, Rt).size === 0)
                    return !0;
                if (mt(this, Rt).size === 1)
                    for (const es of mt(this, Rt).values())
                        return es.isEmpty();
                return !1
            }
            ,
            lo = function(es) {
                mt(this, Bt).clear();
                for (const ws of es)
                    ws.isEmpty() || (mt(this, Bt).add(ws),
                    ws.select());
                cs(this, ls, fr).call(this, {
                    hasSelectedEditor: !0
                })
            }
            ,
            tr(Ps, "TRANSLATE_SMALL", 1),
            tr(Ps, "TRANSLATE_BIG", 10);
            let _e = Ps;
            e.AnnotationEditorUIManager = _e
        }
        , (s, e, i) => {
            var kt, vt, bt, Tt, Yt, Nt, jt, xt, Et, Pt, St, Bt, Yr, Xr, co, Tn, Pn, jn, yn;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.StatTimer = e.RenderingCancelledException = e.PixelsPerInch = e.PageViewport = e.PDFDateString = e.DOMStandardFontDataFactory = e.DOMSVGFactory = e.DOMFilterFactory = e.DOMCanvasFactory = e.DOMCMapReaderFactory = void 0,
            e.deprecated = ht,
            e.getColorValues = Rt,
            e.getCurrentTransform = Mt,
            e.getCurrentTransformInverse = ss,
            e.getFilenameFromUrl = st,
            e.getPdfFilenameFromUrl = nt,
            e.getRGB = yt,
            e.getXfaPageViewport = wt,
            e.isDataScheme = et,
            e.isPdfFile = it,
            e.isValidFetchUrl = dt,
            e.loadScript = at,
            e.noContextMenu = ot,
            e.setLayerDimensions = zt;
            var o = i(7)
              , a = i(1);
            const c = "http://www.w3.org/2000/svg"
              , At = class At {
            }
            ;
            tr(At, "CSS", 96),
            tr(At, "PDF", 72),
            tr(At, "PDF_TO_CSS_UNITS", At.CSS / At.PDF);
            let d = At;
            e.PixelsPerInch = d;
            class h extends o.BaseFilterFactory {
                constructor({docId: Lt, ownerDocument: ts=globalThis.document}={}) {
                    super();
                    ps(this, Bt);
                    ps(this, kt);
                    ps(this, vt);
                    ps(this, bt);
                    ps(this, Tt);
                    ps(this, Yt);
                    ps(this, Nt);
                    ps(this, jt);
                    ps(this, xt);
                    ps(this, Et);
                    ps(this, Pt);
                    ps(this, St, 0);
                    us(this, bt, Lt),
                    us(this, Tt, ts)
                }
                addFilter(Lt) {
                    if (!Lt)
                        return "none";
                    let ts = mt(this, Bt, Yr).get(Lt);
                    if (ts)
                        return ts;
                    let ms, hs, bs, ks;
                    if (Lt.length === 1) {
                        const Ms = Lt[0]
                          , Hs = new Array(256);
                        for (let Vs = 0; Vs < 256; Vs++)
                            Hs[Vs] = Ms[Vs] / 255;
                        ks = ms = hs = bs = Hs.join(",")
                    } else {
                        const [Ms,Hs,Vs] = Lt
                          , Xs = new Array(256)
                          , $s = new Array(256)
                          , zs = new Array(256);
                        for (let Zs = 0; Zs < 256; Zs++)
                            Xs[Zs] = Ms[Zs] / 255,
                            $s[Zs] = Hs[Zs] / 255,
                            zs[Zs] = Vs[Zs] / 255;
                        ms = Xs.join(","),
                        hs = $s.join(","),
                        bs = zs.join(","),
                        ks = `${ms}${hs}${bs}`
                    }
                    if (ts = mt(this, Bt, Yr).get(ks),
                    ts)
                        return mt(this, Bt, Yr).set(Lt, ts),
                        ts;
                    const Ts = `g_${mt(this, bt)}_transfer_map_${kr(this, St)._++}`
                      , ls = `url(#${Ts})`;
                    mt(this, Bt, Yr).set(Lt, ls),
                    mt(this, Bt, Yr).set(ks, ls);
                    const Ds = cs(this, Bt, Tn).call(this, Ts);
                    return cs(this, Bt, jn).call(this, ms, hs, bs, Ds),
                    ls
                }
                addHCMFilter(Lt, ts) {
                    var Hs;
                    const ms = `${Lt}-${ts}`;
                    if (mt(this, Nt) === ms)
                        return mt(this, jt);
                    if (us(this, Nt, ms),
                    us(this, jt, "none"),
                    (Hs = mt(this, Yt)) == null || Hs.remove(),
                    !Lt || !ts)
                        return mt(this, jt);
                    const hs = cs(this, Bt, yn).call(this, Lt);
                    Lt = a.Util.makeHexColor(...hs);
                    const bs = cs(this, Bt, yn).call(this, ts);
                    if (ts = a.Util.makeHexColor(...bs),
                    mt(this, Bt, Xr).style.color = "",
                    Lt === "#000000" && ts === "#ffffff" || Lt === ts)
                        return mt(this, jt);
                    const ks = new Array(256);
                    for (let Vs = 0; Vs <= 255; Vs++) {
                        const Xs = Vs / 255;
                        ks[Vs] = Xs <= .03928 ? Xs / 12.92 : ((Xs + .055) / 1.055) ** 2.4
                    }
                    const Ts = ks.join(",")
                      , ls = `g_${mt(this, bt)}_hcm_filter`
                      , Ds = us(this, xt, cs(this, Bt, Tn).call(this, ls));
                    cs(this, Bt, jn).call(this, Ts, Ts, Ts, Ds),
                    cs(this, Bt, co).call(this, Ds);
                    const Ms = (Vs, Xs) => {
                        const $s = hs[Vs] / 255
                          , zs = bs[Vs] / 255
                          , Zs = new Array(Xs + 1);
                        for (let sr = 0; sr <= Xs; sr++)
                            Zs[sr] = $s + sr / Xs * (zs - $s);
                        return Zs.join(",")
                    }
                    ;
                    return cs(this, Bt, jn).call(this, Ms(0, 5), Ms(1, 5), Ms(2, 5), Ds),
                    us(this, jt, `url(#${ls})`),
                    mt(this, jt)
                }
                addHighlightHCMFilter(Lt, ts, ms, hs) {
                    var zs;
                    const bs = `${Lt}-${ts}-${ms}-${hs}`;
                    if (mt(this, Et) === bs)
                        return mt(this, Pt);
                    if (us(this, Et, bs),
                    us(this, Pt, "none"),
                    (zs = mt(this, xt)) == null || zs.remove(),
                    !Lt || !ts)
                        return mt(this, Pt);
                    const [ks,Ts] = [Lt, ts].map(cs(this, Bt, yn).bind(this));
                    let ls = Math.round(.2126 * ks[0] + .7152 * ks[1] + .0722 * ks[2])
                      , Ds = Math.round(.2126 * Ts[0] + .7152 * Ts[1] + .0722 * Ts[2])
                      , [Ms,Hs] = [ms, hs].map(cs(this, Bt, yn).bind(this));
                    Ds < ls && ([ls,Ds,Ms,Hs] = [Ds, ls, Hs, Ms]),
                    mt(this, Bt, Xr).style.color = "";
                    const Vs = (Zs, sr, As) => {
                        const Es = new Array(256)
                          , Rs = (Ds - ls) / As
                          , as = Zs / 255
                          , Ps = (sr - Zs) / (255 * As);
                        let gs = 0;
                        for (let es = 0; es <= As; es++) {
                            const ws = Math.round(ls + es * Rs)
                              , Is = as + es * Ps;
                            for (let Fs = gs; Fs <= ws; Fs++)
                                Es[Fs] = Is;
                            gs = ws + 1
                        }
                        for (let es = gs; es < 256; es++)
                            Es[es] = Es[gs - 1];
                        return Es.join(",")
                    }
                      , Xs = `g_${mt(this, bt)}_hcm_highlight_filter`
                      , $s = us(this, xt, cs(this, Bt, Tn).call(this, Xs));
                    return cs(this, Bt, co).call(this, $s),
                    cs(this, Bt, jn).call(this, Vs(Ms[0], Hs[0], 5), Vs(Ms[1], Hs[1], 5), Vs(Ms[2], Hs[2], 5), $s),
                    us(this, Pt, `url(#${Xs})`),
                    mt(this, Pt)
                }
                destroy(Lt=!1) {
                    Lt && (mt(this, jt) || mt(this, Pt)) || (mt(this, vt) && (mt(this, vt).parentNode.parentNode.remove(),
                    us(this, vt, null)),
                    mt(this, kt) && (mt(this, kt).clear(),
                    us(this, kt, null)),
                    us(this, St, 0))
                }
            }
            kt = new WeakMap,
            vt = new WeakMap,
            bt = new WeakMap,
            Tt = new WeakMap,
            Yt = new WeakMap,
            Nt = new WeakMap,
            jt = new WeakMap,
            xt = new WeakMap,
            Et = new WeakMap,
            Pt = new WeakMap,
            St = new WeakMap,
            Bt = new WeakSet,
            Yr = function() {
                return mt(this, kt) || us(this, kt, new Map)
            }
            ,
            Xr = function() {
                if (!mt(this, vt)) {
                    const Lt = mt(this, Tt).createElement("div")
                      , {style: ts} = Lt;
                    ts.visibility = "hidden",
                    ts.contain = "strict",
                    ts.width = ts.height = 0,
                    ts.position = "absolute",
                    ts.top = ts.left = 0,
                    ts.zIndex = -1;
                    const ms = mt(this, Tt).createElementNS(c, "svg");
                    ms.setAttribute("width", 0),
                    ms.setAttribute("height", 0),
                    us(this, vt, mt(this, Tt).createElementNS(c, "defs")),
                    Lt.append(ms),
                    ms.append(mt(this, vt)),
                    mt(this, Tt).body.append(Lt)
                }
                return mt(this, vt)
            }
            ,
            co = function(Lt) {
                const ts = mt(this, Tt).createElementNS(c, "feColorMatrix");
                ts.setAttribute("type", "matrix"),
                ts.setAttribute("values", "0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"),
                Lt.append(ts)
            }
            ,
            Tn = function(Lt) {
                const ts = mt(this, Tt).createElementNS(c, "filter");
                return ts.setAttribute("color-interpolation-filters", "sRGB"),
                ts.setAttribute("id", Lt),
                mt(this, Bt, Xr).append(ts),
                ts
            }
            ,
            Pn = function(Lt, ts, ms) {
                const hs = mt(this, Tt).createElementNS(c, ts);
                hs.setAttribute("type", "discrete"),
                hs.setAttribute("tableValues", ms),
                Lt.append(hs)
            }
            ,
            jn = function(Lt, ts, ms, hs) {
                const bs = mt(this, Tt).createElementNS(c, "feComponentTransfer");
                hs.append(bs),
                cs(this, Bt, Pn).call(this, bs, "feFuncR", Lt),
                cs(this, Bt, Pn).call(this, bs, "feFuncG", ts),
                cs(this, Bt, Pn).call(this, bs, "feFuncB", ms)
            }
            ,
            yn = function(Lt) {
                return mt(this, Bt, Xr).style.color = Lt,
                yt(getComputedStyle(mt(this, Bt, Xr)).getPropertyValue("color"))
            }
            ,
            e.DOMFilterFactory = h;
            class g extends o.BaseCanvasFactory {
                constructor({ownerDocument: xs=globalThis.document}={}) {
                    super(),
                    this._document = xs
                }
                _createCanvas(xs, Lt) {
                    const ts = this._document.createElement("canvas");
                    return ts.width = xs,
                    ts.height = Lt,
                    ts
                }
            }
            e.DOMCanvasFactory = g;
            async function b(ns, xs=!1) {
                if (dt(ns, document.baseURI)) {
                    const Lt = await fetch(ns);
                    if (!Lt.ok)
                        throw new Error(Lt.statusText);
                    return xs ? new Uint8Array(await Lt.arrayBuffer()) : (0,
                    a.stringToBytes)(await Lt.text())
                }
                return new Promise( (Lt, ts) => {
                    const ms = new XMLHttpRequest;
                    ms.open("GET", ns, !0),
                    xs && (ms.responseType = "arraybuffer"),
                    ms.onreadystatechange = () => {
                        if (ms.readyState === XMLHttpRequest.DONE) {
                            if (ms.status === 200 || ms.status === 0) {
                                let hs;
                                if (xs && ms.response ? hs = new Uint8Array(ms.response) : !xs && ms.responseText && (hs = (0,
                                a.stringToBytes)(ms.responseText)),
                                hs) {
                                    Lt(hs);
                                    return
                                }
                            }
                            ts(new Error(ms.statusText))
                        }
                    }
                    ,
                    ms.send(null)
                }
                )
            }
            class _ extends o.BaseCMapReaderFactory {
                _fetchData(xs, Lt) {
                    return b(xs, this.isCompressed).then(ts => ({
                        cMapData: ts,
                        compressionType: Lt
                    }))
                }
            }
            e.DOMCMapReaderFactory = _;
            class $ extends o.BaseStandardFontDataFactory {
                _fetchData(xs) {
                    return b(xs, !0)
                }
            }
            e.DOMStandardFontDataFactory = $;
            class _e extends o.BaseSVGFactory {
                _createSVG(xs) {
                    return document.createElementNS(c, xs)
                }
            }
            e.DOMSVGFactory = _e;
            class tt {
                constructor({viewBox: xs, scale: Lt, rotation: ts, offsetX: ms=0, offsetY: hs=0, dontFlip: bs=!1}) {
                    this.viewBox = xs,
                    this.scale = Lt,
                    this.rotation = ts,
                    this.offsetX = ms,
                    this.offsetY = hs;
                    const ks = (xs[2] + xs[0]) / 2
                      , Ts = (xs[3] + xs[1]) / 2;
                    let ls, Ds, Ms, Hs;
                    switch (ts %= 360,
                    ts < 0 && (ts += 360),
                    ts) {
                    case 180:
                        ls = -1,
                        Ds = 0,
                        Ms = 0,
                        Hs = 1;
                        break;
                    case 90:
                        ls = 0,
                        Ds = 1,
                        Ms = 1,
                        Hs = 0;
                        break;
                    case 270:
                        ls = 0,
                        Ds = -1,
                        Ms = -1,
                        Hs = 0;
                        break;
                    case 0:
                        ls = 1,
                        Ds = 0,
                        Ms = 0,
                        Hs = -1;
                        break;
                    default:
                        throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")
                    }
                    bs && (Ms = -Ms,
                    Hs = -Hs);
                    let Vs, Xs, $s, zs;
                    ls === 0 ? (Vs = Math.abs(Ts - xs[1]) * Lt + ms,
                    Xs = Math.abs(ks - xs[0]) * Lt + hs,
                    $s = (xs[3] - xs[1]) * Lt,
                    zs = (xs[2] - xs[0]) * Lt) : (Vs = Math.abs(ks - xs[0]) * Lt + ms,
                    Xs = Math.abs(Ts - xs[1]) * Lt + hs,
                    $s = (xs[2] - xs[0]) * Lt,
                    zs = (xs[3] - xs[1]) * Lt),
                    this.transform = [ls * Lt, Ds * Lt, Ms * Lt, Hs * Lt, Vs - ls * Lt * ks - Ms * Lt * Ts, Xs - Ds * Lt * ks - Hs * Lt * Ts],
                    this.width = $s,
                    this.height = zs
                }
                get rawDims() {
                    const {viewBox: xs} = this;
                    return (0,
                    a.shadow)(this, "rawDims", {
                        pageWidth: xs[2] - xs[0],
                        pageHeight: xs[3] - xs[1],
                        pageX: xs[0],
                        pageY: xs[1]
                    })
                }
                clone({scale: xs=this.scale, rotation: Lt=this.rotation, offsetX: ts=this.offsetX, offsetY: ms=this.offsetY, dontFlip: hs=!1}={}) {
                    return new tt({
                        viewBox: this.viewBox.slice(),
                        scale: xs,
                        rotation: Lt,
                        offsetX: ts,
                        offsetY: ms,
                        dontFlip: hs
                    })
                }
                convertToViewportPoint(xs, Lt) {
                    return a.Util.applyTransform([xs, Lt], this.transform)
                }
                convertToViewportRectangle(xs) {
                    const Lt = a.Util.applyTransform([xs[0], xs[1]], this.transform)
                      , ts = a.Util.applyTransform([xs[2], xs[3]], this.transform);
                    return [Lt[0], Lt[1], ts[0], ts[1]]
                }
                convertToPdfPoint(xs, Lt) {
                    return a.Util.applyInverseTransform([xs, Lt], this.transform)
                }
            }
            e.PageViewport = tt;
            class rt extends a.BaseException {
                constructor(xs, Lt=0) {
                    super(xs, "RenderingCancelledException"),
                    this.extraDelay = Lt
                }
            }
            e.RenderingCancelledException = rt;
            function et(ns) {
                const xs = ns.length;
                let Lt = 0;
                for (; Lt < xs && ns[Lt].trim() === ""; )
                    Lt++;
                return ns.substring(Lt, Lt + 5).toLowerCase() === "data:"
            }
            function it(ns) {
                return typeof ns == "string" && /\.pdf$/i.test(ns)
            }
            function st(ns, xs=!1) {
                return xs || ([ns] = ns.split(/[#?]/, 1)),
                ns.substring(ns.lastIndexOf("/") + 1)
            }
            function nt(ns, xs="document.pdf") {
                if (typeof ns != "string")
                    return xs;
                if (et(ns))
                    return (0,
                    a.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),
                    xs;
                const Lt = /^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/
                  , ts = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i
                  , ms = Lt.exec(ns);
                let hs = ts.exec(ms[1]) || ts.exec(ms[2]) || ts.exec(ms[3]);
                if (hs && (hs = hs[0],
                hs.includes("%")))
                    try {
                        hs = ts.exec(decodeURIComponent(hs))[0]
                    } catch {}
                return hs || xs
            }
            class lt {
                constructor() {
                    tr(this, "started", Object.create(null));
                    tr(this, "times", [])
                }
                time(xs) {
                    xs in this.started && (0,
                    a.warn)(`Timer is already running for ${xs}`),
                    this.started[xs] = Date.now()
                }
                timeEnd(xs) {
                    xs in this.started || (0,
                    a.warn)(`Timer has not been started for ${xs}`),
                    this.times.push({
                        name: xs,
                        start: this.started[xs],
                        end: Date.now()
                    }),
                    delete this.started[xs]
                }
                toString() {
                    const xs = [];
                    let Lt = 0;
                    for (const {name: ts} of this.times)
                        Lt = Math.max(ts.length, Lt);
                    for (const {name: ts, start: ms, end: hs} of this.times)
                        xs.push(`${ts.padEnd(Lt)} ${hs - ms}ms
`);
                    return xs.join("")
                }
            }
            e.StatTimer = lt;
            function dt(ns, xs) {
                try {
                    const {protocol: Lt} = xs ? new URL(ns,xs) : new URL(ns);
                    return Lt === "http:" || Lt === "https:"
                } catch {
                    return !1
                }
            }
            function ot(ns) {
                ns.preventDefault()
            }
            function at(ns, xs=!1) {
                return new Promise( (Lt, ts) => {
                    const ms = document.createElement("script");
                    ms.src = ns,
                    ms.onload = function(hs) {
                        xs && ms.remove(),
                        Lt(hs)
                    }
                    ,
                    ms.onerror = function() {
                        ts(new Error(`Cannot load script at: ${ms.src}`))
                    }
                    ,
                    (document.head || document.documentElement).append(ms)
                }
                )
            }
            function ht(ns) {
                console.log("Deprecated API usage: " + ns)
            }
            let pt;
            class gt {
                static toDateObject(xs) {
                    if (!xs || typeof xs != "string")
                        return null;
                    pt || (pt = new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));
                    const Lt = pt.exec(xs);
                    if (!Lt)
                        return null;
                    const ts = parseInt(Lt[1], 10);
                    let ms = parseInt(Lt[2], 10);
                    ms = ms >= 1 && ms <= 12 ? ms - 1 : 0;
                    let hs = parseInt(Lt[3], 10);
                    hs = hs >= 1 && hs <= 31 ? hs : 1;
                    let bs = parseInt(Lt[4], 10);
                    bs = bs >= 0 && bs <= 23 ? bs : 0;
                    let ks = parseInt(Lt[5], 10);
                    ks = ks >= 0 && ks <= 59 ? ks : 0;
                    let Ts = parseInt(Lt[6], 10);
                    Ts = Ts >= 0 && Ts <= 59 ? Ts : 0;
                    const ls = Lt[7] || "Z";
                    let Ds = parseInt(Lt[8], 10);
                    Ds = Ds >= 0 && Ds <= 23 ? Ds : 0;
                    let Ms = parseInt(Lt[9], 10) || 0;
                    return Ms = Ms >= 0 && Ms <= 59 ? Ms : 0,
                    ls === "-" ? (bs += Ds,
                    ks += Ms) : ls === "+" && (bs -= Ds,
                    ks -= Ms),
                    new Date(Date.UTC(ts, ms, hs, bs, ks, Ts))
                }
            }
            e.PDFDateString = gt;
            function wt(ns, {scale: xs=1, rotation: Lt=0}) {
                const {width: ts, height: ms} = ns.attributes.style
                  , hs = [0, 0, parseInt(ts), parseInt(ms)];
                return new tt({
                    viewBox: hs,
                    scale: xs,
                    rotation: Lt
                })
            }
            function yt(ns) {
                if (ns.startsWith("#")) {
                    const xs = parseInt(ns.slice(1), 16);
                    return [(xs & 16711680) >> 16, (xs & 65280) >> 8, xs & 255]
                }
                return ns.startsWith("rgb(") ? ns.slice(4, -1).split(",").map(xs => parseInt(xs)) : ns.startsWith("rgba(") ? ns.slice(5, -1).split(",").map(xs => parseInt(xs)).slice(0, 3) : ((0,
                a.warn)(`Not a valid color format: "${ns}"`),
                [0, 0, 0])
            }
            function Rt(ns) {
                const xs = document.createElement("span");
                xs.style.visibility = "hidden",
                document.body.append(xs);
                for (const Lt of ns.keys()) {
                    xs.style.color = Lt;
                    const ts = window.getComputedStyle(xs).color;
                    ns.set(Lt, yt(ts))
                }
                xs.remove()
            }
            function Mt(ns) {
                const {a: xs, b: Lt, c: ts, d: ms, e: hs, f: bs} = ns.getTransform();
                return [xs, Lt, ts, ms, hs, bs]
            }
            function ss(ns) {
                const {a: xs, b: Lt, c: ts, d: ms, e: hs, f: bs} = ns.getTransform().invertSelf();
                return [xs, Lt, ts, ms, hs, bs]
            }
            function zt(ns, xs, Lt=!1, ts=!0) {
                if (xs instanceof tt) {
                    const {pageWidth: ms, pageHeight: hs} = xs.rawDims
                      , {style: bs} = ns
                      , ks = a.FeatureTest.isCSSRoundSupported
                      , Ts = `var(--scale-factor) * ${ms}px`
                      , ls = `var(--scale-factor) * ${hs}px`
                      , Ds = ks ? `round(${Ts}, 1px)` : `calc(${Ts})`
                      , Ms = ks ? `round(${ls}, 1px)` : `calc(${ls})`;
                    !Lt || xs.rotation % 180 === 0 ? (bs.width = Ds,
                    bs.height = Ms) : (bs.width = Ms,
                    bs.height = Ds)
                }
                ts && ns.setAttribute("data-main-rotation", xs.rotation)
            }
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.BaseStandardFontDataFactory = e.BaseSVGFactory = e.BaseFilterFactory = e.BaseCanvasFactory = e.BaseCMapReaderFactory = void 0;
            var o = i(1);
            class a {
                constructor() {
                    this.constructor === a && (0,
                    o.unreachable)("Cannot initialize BaseFilterFactory.")
                }
                addFilter(_) {
                    return "none"
                }
                addHCMFilter(_, $) {
                    return "none"
                }
                addHighlightHCMFilter(_, $, _e, tt) {
                    return "none"
                }
                destroy(_=!1) {}
            }
            e.BaseFilterFactory = a;
            class c {
                constructor() {
                    this.constructor === c && (0,
                    o.unreachable)("Cannot initialize BaseCanvasFactory.")
                }
                create(_, $) {
                    if (_ <= 0 || $ <= 0)
                        throw new Error("Invalid canvas size");
                    const _e = this._createCanvas(_, $);
                    return {
                        canvas: _e,
                        context: _e.getContext("2d")
                    }
                }
                reset(_, $, _e) {
                    if (!_.canvas)
                        throw new Error("Canvas is not specified");
                    if ($ <= 0 || _e <= 0)
                        throw new Error("Invalid canvas size");
                    _.canvas.width = $,
                    _.canvas.height = _e
                }
                destroy(_) {
                    if (!_.canvas)
                        throw new Error("Canvas is not specified");
                    _.canvas.width = 0,
                    _.canvas.height = 0,
                    _.canvas = null,
                    _.context = null
                }
                _createCanvas(_, $) {
                    (0,
                    o.unreachable)("Abstract method `_createCanvas` called.")
                }
            }
            e.BaseCanvasFactory = c;
            class d {
                constructor({baseUrl: _=null, isCompressed: $=!0}) {
                    this.constructor === d && (0,
                    o.unreachable)("Cannot initialize BaseCMapReaderFactory."),
                    this.baseUrl = _,
                    this.isCompressed = $
                }
                async fetch({name: _}) {
                    if (!this.baseUrl)
                        throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');
                    if (!_)
                        throw new Error("CMap name must be specified.");
                    const $ = this.baseUrl + _ + (this.isCompressed ? ".bcmap" : "")
                      , _e = this.isCompressed ? o.CMapCompressionType.BINARY : o.CMapCompressionType.NONE;
                    return this._fetchData($, _e).catch(tt => {
                        throw new Error(`Unable to load ${this.isCompressed ? "binary " : ""}CMap at: ${$}`)
                    }
                    )
                }
                _fetchData(_, $) {
                    (0,
                    o.unreachable)("Abstract method `_fetchData` called.")
                }
            }
            e.BaseCMapReaderFactory = d;
            class h {
                constructor({baseUrl: _=null}) {
                    this.constructor === h && (0,
                    o.unreachable)("Cannot initialize BaseStandardFontDataFactory."),
                    this.baseUrl = _
                }
                async fetch({filename: _}) {
                    if (!this.baseUrl)
                        throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');
                    if (!_)
                        throw new Error("Font filename must be specified.");
                    const $ = `${this.baseUrl}${_}`;
                    return this._fetchData($).catch(_e => {
                        throw new Error(`Unable to load font data at: ${$}`)
                    }
                    )
                }
                _fetchData(_) {
                    (0,
                    o.unreachable)("Abstract method `_fetchData` called.")
                }
            }
            e.BaseStandardFontDataFactory = h;
            class g {
                constructor() {
                    this.constructor === g && (0,
                    o.unreachable)("Cannot initialize BaseSVGFactory.")
                }
                create(_, $, _e=!1) {
                    if (_ <= 0 || $ <= 0)
                        throw new Error("Invalid SVG dimensions");
                    const tt = this._createSVG("svg:svg");
                    return tt.setAttribute("version", "1.1"),
                    _e || (tt.setAttribute("width", `${_}px`),
                    tt.setAttribute("height", `${$}px`)),
                    tt.setAttribute("preserveAspectRatio", "none"),
                    tt.setAttribute("viewBox", `0 0 ${_} ${$}`),
                    tt
                }
                createElement(_) {
                    if (typeof _ != "string")
                        throw new Error("Invalid SVG element type");
                    return this._createSVG(_)
                }
                _createSVG(_) {
                    (0,
                    o.unreachable)("Abstract method `_createSVG` called.")
                }
            }
            e.BaseSVGFactory = g
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.MurmurHash3_64 = void 0;
            var o = i(1);
            const a = 3285377520
              , c = 4294901760
              , d = 65535;
            class h {
                constructor(b) {
                    this.h1 = b ? b & 4294967295 : a,
                    this.h2 = b ? b & 4294967295 : a
                }
                update(b) {
                    let _, $;
                    if (typeof b == "string") {
                        _ = new Uint8Array(b.length * 2),
                        $ = 0;
                        for (let ht = 0, pt = b.length; ht < pt; ht++) {
                            const gt = b.charCodeAt(ht);
                            gt <= 255 ? _[$++] = gt : (_[$++] = gt >>> 8,
                            _[$++] = gt & 255)
                        }
                    } else if ((0,
                    o.isArrayBuffer)(b))
                        _ = b.slice(),
                        $ = _.byteLength;
                    else
                        throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");
                    const _e = $ >> 2
                      , tt = $ - _e * 4
                      , rt = new Uint32Array(_.buffer,0,_e);
                    let et = 0
                      , it = 0
                      , st = this.h1
                      , nt = this.h2;
                    const lt = 3432918353
                      , dt = 461845907
                      , ot = lt & d
                      , at = dt & d;
                    for (let ht = 0; ht < _e; ht++)
                        ht & 1 ? (et = rt[ht],
                        et = et * lt & c | et * ot & d,
                        et = et << 15 | et >>> 17,
                        et = et * dt & c | et * at & d,
                        st ^= et,
                        st = st << 13 | st >>> 19,
                        st = st * 5 + 3864292196) : (it = rt[ht],
                        it = it * lt & c | it * ot & d,
                        it = it << 15 | it >>> 17,
                        it = it * dt & c | it * at & d,
                        nt ^= it,
                        nt = nt << 13 | nt >>> 19,
                        nt = nt * 5 + 3864292196);
                    switch (et = 0,
                    tt) {
                    case 3:
                        et ^= _[_e * 4 + 2] << 16;
                    case 2:
                        et ^= _[_e * 4 + 1] << 8;
                    case 1:
                        et ^= _[_e * 4],
                        et = et * lt & c | et * ot & d,
                        et = et << 15 | et >>> 17,
                        et = et * dt & c | et * at & d,
                        _e & 1 ? st ^= et : nt ^= et
                    }
                    this.h1 = st,
                    this.h2 = nt
                }
                hexdigest() {
                    let b = this.h1
                      , _ = this.h2;
                    return b ^= _ >>> 1,
                    b = b * 3981806797 & c | b * 36045 & d,
                    _ = _ * 4283543511 & c | ((_ << 16 | b >>> 16) * 2950163797 & c) >>> 16,
                    b ^= _ >>> 1,
                    b = b * 444984403 & c | b * 60499 & d,
                    _ = _ * 3301882366 & c | ((_ << 16 | b >>> 16) * 3120437893 & c) >>> 16,
                    b ^= _ >>> 1,
                    (b >>> 0).toString(16).padStart(8, "0") + (_ >>> 0).toString(16).padStart(8, "0")
                }
            }
            e.MurmurHash3_64 = h
        }
        , (s, e, i) => {
            var d;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.FontLoader = e.FontFaceObject = void 0;
            var o = i(1);
            class a {
                constructor({ownerDocument: g=globalThis.document, styleElement: b=null}) {
                    ps(this, d, new Set);
                    this._document = g,
                    this.nativeFontFaces = new Set,
                    this.styleElement = null,
                    this.loadingRequests = [],
                    this.loadTestFontId = 0
                }
                addNativeFontFace(g) {
                    this.nativeFontFaces.add(g),
                    this._document.fonts.add(g)
                }
                removeNativeFontFace(g) {
                    this.nativeFontFaces.delete(g),
                    this._document.fonts.delete(g)
                }
                insertRule(g) {
                    this.styleElement || (this.styleElement = this._document.createElement("style"),
                    this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));
                    const b = this.styleElement.sheet;
                    b.insertRule(g, b.cssRules.length)
                }
                clear() {
                    for (const g of this.nativeFontFaces)
                        this._document.fonts.delete(g);
                    this.nativeFontFaces.clear(),
                    mt(this, d).clear(),
                    this.styleElement && (this.styleElement.remove(),
                    this.styleElement = null)
                }
                async loadSystemFont(g) {
                    if (!(!g || mt(this, d).has(g.loadedName))) {
                        if ((0,
                        o.assert)(!this.disableFontFace, "loadSystemFont shouldn't be called when `disableFontFace` is set."),
                        this.isFontLoadingAPISupported) {
                            const {loadedName: b, src: _, style: $} = g
                              , _e = new FontFace(b,_,$);
                            this.addNativeFontFace(_e);
                            try {
                                await _e.load(),
                                mt(this, d).add(b)
                            } catch {
                                (0,
                                o.warn)(`Cannot load system font: ${g.baseFontName}, installing it could help to improve PDF rendering.`),
                                this.removeNativeFontFace(_e)
                            }
                            return
                        }
                        (0,
                        o.unreachable)("Not implemented: loadSystemFont without the Font Loading API.")
                    }
                }
                async bind(g) {
                    if (g.attached || g.missingFile && !g.systemFontInfo)
                        return;
                    if (g.attached = !0,
                    g.systemFontInfo) {
                        await this.loadSystemFont(g.systemFontInfo);
                        return
                    }
                    if (this.isFontLoadingAPISupported) {
                        const _ = g.createNativeFontFace();
                        if (_) {
                            this.addNativeFontFace(_);
                            try {
                                await _.loaded
                            } catch ($) {
                                throw (0,
                                o.warn)(`Failed to load font '${_.family}': '${$}'.`),
                                g.disableFontFace = !0,
                                $
                            }
                        }
                        return
                    }
                    const b = g.createFontFaceRule();
                    if (b) {
                        if (this.insertRule(b),
                        this.isSyncFontLoadingSupported)
                            return;
                        await new Promise(_ => {
                            const $ = this._queueLoadingCallback(_);
                            this._prepareFontLoadEvent(g, $)
                        }
                        )
                    }
                }
                get isFontLoadingAPISupported() {
                    var b;
                    const g = !!((b = this._document) != null && b.fonts);
                    return (0,
                    o.shadow)(this, "isFontLoadingAPISupported", g)
                }
                get isSyncFontLoadingSupported() {
                    let g = !1;
                    return (o.isNodeJS || typeof navigator < "u" && /Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent)) && (g = !0),
                    (0,
                    o.shadow)(this, "isSyncFontLoadingSupported", g)
                }
                _queueLoadingCallback(g) {
                    function b() {
                        for ((0,
                        o.assert)(!$.done, "completeRequest() cannot be called twice."),
                        $.done = !0; _.length > 0 && _[0].done; ) {
                            const _e = _.shift();
                            setTimeout(_e.callback, 0)
                        }
                    }
                    const {loadingRequests: _} = this
                      , $ = {
                        done: !1,
                        complete: b,
                        callback: g
                    };
                    return _.push($),
                    $
                }
                get _loadTestFont() {
                    const g = atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");
                    return (0,
                    o.shadow)(this, "_loadTestFont", g)
                }
                _prepareFontLoadEvent(g, b) {
                    function _(yt, Rt) {
                        return yt.charCodeAt(Rt) << 24 | yt.charCodeAt(Rt + 1) << 16 | yt.charCodeAt(Rt + 2) << 8 | yt.charCodeAt(Rt + 3) & 255
                    }
                    function $(yt, Rt, Mt, ss) {
                        const zt = yt.substring(0, Rt)
                          , At = yt.substring(Rt + Mt);
                        return zt + ss + At
                    }
                    let _e, tt;
                    const rt = this._document.createElement("canvas");
                    rt.width = 1,
                    rt.height = 1;
                    const et = rt.getContext("2d");
                    let it = 0;
                    function st(yt, Rt) {
                        if (++it > 30) {
                            (0,
                            o.warn)("Load test font never loaded."),
                            Rt();
                            return
                        }
                        if (et.font = "30px " + yt,
                        et.fillText(".", 0, 20),
                        et.getImageData(0, 0, 1, 1).data[3] > 0) {
                            Rt();
                            return
                        }
                        setTimeout(st.bind(null, yt, Rt))
                    }
                    const nt = `lt${Date.now()}${this.loadTestFontId++}`;
                    let lt = this._loadTestFont;
                    lt = $(lt, 976, nt.length, nt);
                    const ot = 16
                      , at = 1482184792;
                    let ht = _(lt, ot);
                    for (_e = 0,
                    tt = nt.length - 3; _e < tt; _e += 4)
                        ht = ht - at + _(nt, _e) | 0;
                    _e < nt.length && (ht = ht - at + _(nt + "XXX", _e) | 0),
                    lt = $(lt, ot, 4, (0,
                    o.string32)(ht));
                    const pt = `url(data:font/opentype;base64,${btoa(lt)});`
                      , gt = `@font-face {font-family:"${nt}";src:${pt}}`;
                    this.insertRule(gt);
                    const wt = this._document.createElement("div");
                    wt.style.visibility = "hidden",
                    wt.style.width = wt.style.height = "10px",
                    wt.style.position = "absolute",
                    wt.style.top = wt.style.left = "0px";
                    for (const yt of [g.loadedName, nt]) {
                        const Rt = this._document.createElement("span");
                        Rt.textContent = "Hi",
                        Rt.style.fontFamily = yt,
                        wt.append(Rt)
                    }
                    this._document.body.append(wt),
                    st(nt, () => {
                        wt.remove(),
                        b.complete()
                    }
                    )
                }
            }
            d = new WeakMap,
            e.FontLoader = a;
            class c {
                constructor(g, {isEvalSupported: b=!0, disableFontFace: _=!1, ignoreErrors: $=!1, inspectFont: _e=null}) {
                    this.compiledGlyphs = Object.create(null);
                    for (const tt in g)
                        this[tt] = g[tt];
                    this.isEvalSupported = b !== !1,
                    this.disableFontFace = _ === !0,
                    this.ignoreErrors = $ === !0,
                    this._inspectFont = _e
                }
                createNativeFontFace() {
                    var b;
                    if (!this.data || this.disableFontFace)
                        return null;
                    let g;
                    if (!this.cssFontInfo)
                        g = new FontFace(this.loadedName,this.data,{});
                    else {
                        const _ = {
                            weight: this.cssFontInfo.fontWeight
                        };
                        this.cssFontInfo.italicAngle && (_.style = `oblique ${this.cssFontInfo.italicAngle}deg`),
                        g = new FontFace(this.cssFontInfo.fontFamily,this.data,_)
                    }
                    return (b = this._inspectFont) == null || b.call(this, this),
                    g
                }
                createFontFaceRule() {
                    var $;
                    if (!this.data || this.disableFontFace)
                        return null;
                    const g = (0,
                    o.bytesToString)(this.data)
                      , b = `url(data:${this.mimetype};base64,${btoa(g)});`;
                    let _;
                    if (!this.cssFontInfo)
                        _ = `@font-face {font-family:"${this.loadedName}";src:${b}}`;
                    else {
                        let _e = `font-weight: ${this.cssFontInfo.fontWeight};`;
                        this.cssFontInfo.italicAngle && (_e += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),
                        _ = `@font-face {font-family:"${this.cssFontInfo.fontFamily}";${_e}src:${b}}`
                    }
                    return ($ = this._inspectFont) == null || $.call(this, this, b),
                    _
                }
                getPathGenerator(g, b) {
                    if (this.compiledGlyphs[b] !== void 0)
                        return this.compiledGlyphs[b];
                    let _;
                    try {
                        _ = g.get(this.loadedName + "_path_" + b)
                    } catch ($) {
                        if (!this.ignoreErrors)
                            throw $;
                        return (0,
                        o.warn)(`getPathGenerator - ignoring character: "${$}".`),
                        this.compiledGlyphs[b] = function(_e, tt) {}
                    }
                    if (this.isEvalSupported && o.FeatureTest.isEvalSupported) {
                        const $ = [];
                        for (const _e of _) {
                            const tt = _e.args !== void 0 ? _e.args.join(",") : "";
                            $.push("c.", _e.cmd, "(", tt, `);
`)
                        }
                        return this.compiledGlyphs[b] = new Function("c","size",$.join(""))
                    }
                    return this.compiledGlyphs[b] = function($, _e) {
                        for (const tt of _)
                            tt.cmd === "scale" && (tt.args = [_e, -_e]),
                            $[tt.cmd].apply($, tt.args)
                    }
                }
            }
            e.FontFaceObject = c
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.NodeStandardFontDataFactory = e.NodeFilterFactory = e.NodeCanvasFactory = e.NodeCMapReaderFactory = void 0;
            var o = i(7);
            i(1);
            const a = function(b) {
                return new Promise( (_, $) => {
                    require$$5.readFile(b, (tt, rt) => {
                        if (tt || !rt) {
                            $(new Error(tt));
                            return
                        }
                        _(new Uint8Array(rt))
                    }
                    )
                }
                )
            };
            class c extends o.BaseFilterFactory {
            }
            e.NodeFilterFactory = c;
            class d extends o.BaseCanvasFactory {
                _createCanvas(_, $) {
                    return require$$5.createCanvas(_, $)
                }
            }
            e.NodeCanvasFactory = d;
            class h extends o.BaseCMapReaderFactory {
                _fetchData(_, $) {
                    return a(_).then(_e => ({
                        cMapData: _e,
                        compressionType: $
                    }))
                }
            }
            e.NodeCMapReaderFactory = h;
            class g extends o.BaseStandardFontDataFactory {
                _fetchData(_) {
                    return a(_)
                }
            }
            e.NodeStandardFontDataFactory = g
        }
        , (s, e, i) => {
            var vt, uo, mo;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.CanvasGraphics = void 0;
            var o = i(1)
              , a = i(6)
              , c = i(12)
              , d = i(13);
            const h = 16
              , g = 100
              , b = 4096
              , _ = 15
              , $ = 10
              , _e = 1e3
              , tt = 16;
            function rt(Nt, jt) {
                if (Nt._removeMirroring)
                    throw new Error("Context is already forwarding operations.");
                Nt.__originalSave = Nt.save,
                Nt.__originalRestore = Nt.restore,
                Nt.__originalRotate = Nt.rotate,
                Nt.__originalScale = Nt.scale,
                Nt.__originalTranslate = Nt.translate,
                Nt.__originalTransform = Nt.transform,
                Nt.__originalSetTransform = Nt.setTransform,
                Nt.__originalResetTransform = Nt.resetTransform,
                Nt.__originalClip = Nt.clip,
                Nt.__originalMoveTo = Nt.moveTo,
                Nt.__originalLineTo = Nt.lineTo,
                Nt.__originalBezierCurveTo = Nt.bezierCurveTo,
                Nt.__originalRect = Nt.rect,
                Nt.__originalClosePath = Nt.closePath,
                Nt.__originalBeginPath = Nt.beginPath,
                Nt._removeMirroring = () => {
                    Nt.save = Nt.__originalSave,
                    Nt.restore = Nt.__originalRestore,
                    Nt.rotate = Nt.__originalRotate,
                    Nt.scale = Nt.__originalScale,
                    Nt.translate = Nt.__originalTranslate,
                    Nt.transform = Nt.__originalTransform,
                    Nt.setTransform = Nt.__originalSetTransform,
                    Nt.resetTransform = Nt.__originalResetTransform,
                    Nt.clip = Nt.__originalClip,
                    Nt.moveTo = Nt.__originalMoveTo,
                    Nt.lineTo = Nt.__originalLineTo,
                    Nt.bezierCurveTo = Nt.__originalBezierCurveTo,
                    Nt.rect = Nt.__originalRect,
                    Nt.closePath = Nt.__originalClosePath,
                    Nt.beginPath = Nt.__originalBeginPath,
                    delete Nt._removeMirroring
                }
                ,
                Nt.save = function() {
                    jt.save(),
                    this.__originalSave()
                }
                ,
                Nt.restore = function() {
                    jt.restore(),
                    this.__originalRestore()
                }
                ,
                Nt.translate = function(Et, Pt) {
                    jt.translate(Et, Pt),
                    this.__originalTranslate(Et, Pt)
                }
                ,
                Nt.scale = function(Et, Pt) {
                    jt.scale(Et, Pt),
                    this.__originalScale(Et, Pt)
                }
                ,
                Nt.transform = function(Et, Pt, St, Bt, os, ds) {
                    jt.transform(Et, Pt, St, Bt, os, ds),
                    this.__originalTransform(Et, Pt, St, Bt, os, ds)
                }
                ,
                Nt.setTransform = function(Et, Pt, St, Bt, os, ds) {
                    jt.setTransform(Et, Pt, St, Bt, os, ds),
                    this.__originalSetTransform(Et, Pt, St, Bt, os, ds)
                }
                ,
                Nt.resetTransform = function() {
                    jt.resetTransform(),
                    this.__originalResetTransform()
                }
                ,
                Nt.rotate = function(Et) {
                    jt.rotate(Et),
                    this.__originalRotate(Et)
                }
                ,
                Nt.clip = function(Et) {
                    jt.clip(Et),
                    this.__originalClip(Et)
                }
                ,
                Nt.moveTo = function(xt, Et) {
                    jt.moveTo(xt, Et),
                    this.__originalMoveTo(xt, Et)
                }
                ,
                Nt.lineTo = function(xt, Et) {
                    jt.lineTo(xt, Et),
                    this.__originalLineTo(xt, Et)
                }
                ,
                Nt.bezierCurveTo = function(xt, Et, Pt, St, Bt, os) {
                    jt.bezierCurveTo(xt, Et, Pt, St, Bt, os),
                    this.__originalBezierCurveTo(xt, Et, Pt, St, Bt, os)
                }
                ,
                Nt.rect = function(xt, Et, Pt, St) {
                    jt.rect(xt, Et, Pt, St),
                    this.__originalRect(xt, Et, Pt, St)
                }
                ,
                Nt.closePath = function() {
                    jt.closePath(),
                    this.__originalClosePath()
                }
                ,
                Nt.beginPath = function() {
                    jt.beginPath(),
                    this.__originalBeginPath()
                }
            }
            class et {
                constructor(jt) {
                    this.canvasFactory = jt,
                    this.cache = Object.create(null)
                }
                getCanvas(jt, xt, Et) {
                    let Pt;
                    return this.cache[jt] !== void 0 ? (Pt = this.cache[jt],
                    this.canvasFactory.reset(Pt, xt, Et)) : (Pt = this.canvasFactory.create(xt, Et),
                    this.cache[jt] = Pt),
                    Pt
                }
                delete(jt) {
                    delete this.cache[jt]
                }
                clear() {
                    for (const jt in this.cache) {
                        const xt = this.cache[jt];
                        this.canvasFactory.destroy(xt),
                        delete this.cache[jt]
                    }
                }
            }
            function it(Nt, jt, xt, Et, Pt, St, Bt, os, ds, js) {
                const [ys,vs,Ss,_s,ns,xs] = (0,
                a.getCurrentTransform)(Nt);
                if (vs === 0 && Ss === 0) {
                    const ms = Bt * ys + ns
                      , hs = Math.round(ms)
                      , bs = os * _s + xs
                      , ks = Math.round(bs)
                      , Ts = (Bt + ds) * ys + ns
                      , ls = Math.abs(Math.round(Ts) - hs) || 1
                      , Ds = (os + js) * _s + xs
                      , Ms = Math.abs(Math.round(Ds) - ks) || 1;
                    return Nt.setTransform(Math.sign(ys), 0, 0, Math.sign(_s), hs, ks),
                    Nt.drawImage(jt, xt, Et, Pt, St, 0, 0, ls, Ms),
                    Nt.setTransform(ys, vs, Ss, _s, ns, xs),
                    [ls, Ms]
                }
                if (ys === 0 && _s === 0) {
                    const ms = os * Ss + ns
                      , hs = Math.round(ms)
                      , bs = Bt * vs + xs
                      , ks = Math.round(bs)
                      , Ts = (os + js) * Ss + ns
                      , ls = Math.abs(Math.round(Ts) - hs) || 1
                      , Ds = (Bt + ds) * vs + xs
                      , Ms = Math.abs(Math.round(Ds) - ks) || 1;
                    return Nt.setTransform(0, Math.sign(vs), Math.sign(Ss), 0, hs, ks),
                    Nt.drawImage(jt, xt, Et, Pt, St, 0, 0, Ms, ls),
                    Nt.setTransform(ys, vs, Ss, _s, ns, xs),
                    [Ms, ls]
                }
                Nt.drawImage(jt, xt, Et, Pt, St, Bt, os, ds, js);
                const Lt = Math.hypot(ys, vs)
                  , ts = Math.hypot(Ss, _s);
                return [Lt * ds, ts * js]
            }
            function st(Nt) {
                const {width: jt, height: xt} = Nt;
                if (jt > _e || xt > _e)
                    return null;
                const Et = 1e3
                  , Pt = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0])
                  , St = jt + 1;
                let Bt = new Uint8Array(St * (xt + 1)), os, ds, js;
                const ys = jt + 7 & -8;
                let vs = new Uint8Array(ys * xt)
                  , Ss = 0;
                for (const ts of Nt.data) {
                    let ms = 128;
                    for (; ms > 0; )
                        vs[Ss++] = ts & ms ? 0 : 255,
                        ms >>= 1
                }
                let _s = 0;
                for (Ss = 0,
                vs[Ss] !== 0 && (Bt[0] = 1,
                ++_s),
                ds = 1; ds < jt; ds++)
                    vs[Ss] !== vs[Ss + 1] && (Bt[ds] = vs[Ss] ? 2 : 1,
                    ++_s),
                    Ss++;
                for (vs[Ss] !== 0 && (Bt[ds] = 2,
                ++_s),
                os = 1; os < xt; os++) {
                    Ss = os * ys,
                    js = os * St,
                    vs[Ss - ys] !== vs[Ss] && (Bt[js] = vs[Ss] ? 1 : 8,
                    ++_s);
                    let ts = (vs[Ss] ? 4 : 0) + (vs[Ss - ys] ? 8 : 0);
                    for (ds = 1; ds < jt; ds++)
                        ts = (ts >> 2) + (vs[Ss + 1] ? 4 : 0) + (vs[Ss - ys + 1] ? 8 : 0),
                        Pt[ts] && (Bt[js + ds] = Pt[ts],
                        ++_s),
                        Ss++;
                    if (vs[Ss - ys] !== vs[Ss] && (Bt[js + ds] = vs[Ss] ? 2 : 4,
                    ++_s),
                    _s > Et)
                        return null
                }
                for (Ss = ys * (xt - 1),
                js = os * St,
                vs[Ss] !== 0 && (Bt[js] = 8,
                ++_s),
                ds = 1; ds < jt; ds++)
                    vs[Ss] !== vs[Ss + 1] && (Bt[js + ds] = vs[Ss] ? 4 : 8,
                    ++_s),
                    Ss++;
                if (vs[Ss] !== 0 && (Bt[js + ds] = 4,
                ++_s),
                _s > Et)
                    return null;
                const ns = new Int32Array([0, St, -1, 0, -St, 0, 0, 0, 1])
                  , xs = new Path2D;
                for (os = 0; _s && os <= xt; os++) {
                    let ts = os * St;
                    const ms = ts + jt;
                    for (; ts < ms && !Bt[ts]; )
                        ts++;
                    if (ts === ms)
                        continue;
                    xs.moveTo(ts % St, os);
                    const hs = ts;
                    let bs = Bt[ts];
                    do {
                        const ks = ns[bs];
                        do
                            ts += ks;
                        while (!Bt[ts]);
                        const Ts = Bt[ts];
                        Ts !== 5 && Ts !== 10 ? (bs = Ts,
                        Bt[ts] = 0) : (bs = Ts & 51 * bs >> 4,
                        Bt[ts] &= bs >> 2 | bs << 2),
                        xs.lineTo(ts % St, ts / St | 0),
                        Bt[ts] || --_s
                    } while (hs !== ts);
                    --os
                }
                return vs = null,
                Bt = null,
                function(ts) {
                    ts.save(),
                    ts.scale(1 / jt, -1 / xt),
                    ts.translate(0, -xt),
                    ts.fill(xs),
                    ts.beginPath(),
                    ts.restore()
                }
            }
            class nt {
                constructor(jt, xt) {
                    this.alphaIsShape = !1,
                    this.fontSize = 0,
                    this.fontSizeScale = 1,
                    this.textMatrix = o.IDENTITY_MATRIX,
                    this.textMatrixScale = 1,
                    this.fontMatrix = o.FONT_IDENTITY_MATRIX,
                    this.leading = 0,
                    this.x = 0,
                    this.y = 0,
                    this.lineX = 0,
                    this.lineY = 0,
                    this.charSpacing = 0,
                    this.wordSpacing = 0,
                    this.textHScale = 1,
                    this.textRenderingMode = o.TextRenderingMode.FILL,
                    this.textRise = 0,
                    this.fillColor = "#000000",
                    this.strokeColor = "#000000",
                    this.patternFill = !1,
                    this.fillAlpha = 1,
                    this.strokeAlpha = 1,
                    this.lineWidth = 1,
                    this.activeSMask = null,
                    this.transferMaps = "none",
                    this.startNewPathAndClipBox([0, 0, jt, xt])
                }
                clone() {
                    const jt = Object.create(this);
                    return jt.clipBox = this.clipBox.slice(),
                    jt
                }
                setCurrentPoint(jt, xt) {
                    this.x = jt,
                    this.y = xt
                }
                updatePathMinMax(jt, xt, Et) {
                    [xt,Et] = o.Util.applyTransform([xt, Et], jt),
                    this.minX = Math.min(this.minX, xt),
                    this.minY = Math.min(this.minY, Et),
                    this.maxX = Math.max(this.maxX, xt),
                    this.maxY = Math.max(this.maxY, Et)
                }
                updateRectMinMax(jt, xt) {
                    const Et = o.Util.applyTransform(xt, jt)
                      , Pt = o.Util.applyTransform(xt.slice(2), jt);
                    this.minX = Math.min(this.minX, Et[0], Pt[0]),
                    this.minY = Math.min(this.minY, Et[1], Pt[1]),
                    this.maxX = Math.max(this.maxX, Et[0], Pt[0]),
                    this.maxY = Math.max(this.maxY, Et[1], Pt[1])
                }
                updateScalingPathMinMax(jt, xt) {
                    o.Util.scaleMinMax(jt, xt),
                    this.minX = Math.min(this.minX, xt[0]),
                    this.maxX = Math.max(this.maxX, xt[1]),
                    this.minY = Math.min(this.minY, xt[2]),
                    this.maxY = Math.max(this.maxY, xt[3])
                }
                updateCurvePathMinMax(jt, xt, Et, Pt, St, Bt, os, ds, js, ys) {
                    const vs = o.Util.bezierBoundingBox(xt, Et, Pt, St, Bt, os, ds, js);
                    if (ys) {
                        ys[0] = Math.min(ys[0], vs[0], vs[2]),
                        ys[1] = Math.max(ys[1], vs[0], vs[2]),
                        ys[2] = Math.min(ys[2], vs[1], vs[3]),
                        ys[3] = Math.max(ys[3], vs[1], vs[3]);
                        return
                    }
                    this.updateRectMinMax(jt, vs)
                }
                getPathBoundingBox(jt=c.PathType.FILL, xt=null) {
                    const Et = [this.minX, this.minY, this.maxX, this.maxY];
                    if (jt === c.PathType.STROKE) {
                        xt || (0,
                        o.unreachable)("Stroke bounding box must include transform.");
                        const Pt = o.Util.singularValueDecompose2dScale(xt)
                          , St = Pt[0] * this.lineWidth / 2
                          , Bt = Pt[1] * this.lineWidth / 2;
                        Et[0] -= St,
                        Et[1] -= Bt,
                        Et[2] += St,
                        Et[3] += Bt
                    }
                    return Et
                }
                updateClipFromPath() {
                    const jt = o.Util.intersect(this.clipBox, this.getPathBoundingBox());
                    this.startNewPathAndClipBox(jt || [0, 0, 0, 0])
                }
                isEmptyClip() {
                    return this.minX === 1 / 0
                }
                startNewPathAndClipBox(jt) {
                    this.clipBox = jt,
                    this.minX = 1 / 0,
                    this.minY = 1 / 0,
                    this.maxX = 0,
                    this.maxY = 0
                }
                getClippedPathBoundingBox(jt=c.PathType.FILL, xt=null) {
                    return o.Util.intersect(this.clipBox, this.getPathBoundingBox(jt, xt))
                }
            }
            function lt(Nt, jt) {
                if (typeof ImageData < "u" && jt instanceof ImageData) {
                    Nt.putImageData(jt, 0, 0);
                    return
                }
                const xt = jt.height
                  , Et = jt.width
                  , Pt = xt % tt
                  , St = (xt - Pt) / tt
                  , Bt = Pt === 0 ? St : St + 1
                  , os = Nt.createImageData(Et, tt);
                let ds = 0, js;
                const ys = jt.data
                  , vs = os.data;
                let Ss, _s, ns, xs;
                if (jt.kind === o.ImageKind.GRAYSCALE_1BPP) {
                    const Lt = ys.byteLength
                      , ts = new Uint32Array(vs.buffer,0,vs.byteLength >> 2)
                      , ms = ts.length
                      , hs = Et + 7 >> 3
                      , bs = 4294967295
                      , ks = o.FeatureTest.isLittleEndian ? 4278190080 : 255;
                    for (Ss = 0; Ss < Bt; Ss++) {
                        for (ns = Ss < St ? tt : Pt,
                        js = 0,
                        _s = 0; _s < ns; _s++) {
                            const Ts = Lt - ds;
                            let ls = 0;
                            const Ds = Ts > hs ? Et : Ts * 8 - 7
                              , Ms = Ds & -8;
                            let Hs = 0
                              , Vs = 0;
                            for (; ls < Ms; ls += 8)
                                Vs = ys[ds++],
                                ts[js++] = Vs & 128 ? bs : ks,
                                ts[js++] = Vs & 64 ? bs : ks,
                                ts[js++] = Vs & 32 ? bs : ks,
                                ts[js++] = Vs & 16 ? bs : ks,
                                ts[js++] = Vs & 8 ? bs : ks,
                                ts[js++] = Vs & 4 ? bs : ks,
                                ts[js++] = Vs & 2 ? bs : ks,
                                ts[js++] = Vs & 1 ? bs : ks;
                            for (; ls < Ds; ls++)
                                Hs === 0 && (Vs = ys[ds++],
                                Hs = 128),
                                ts[js++] = Vs & Hs ? bs : ks,
                                Hs >>= 1
                        }
                        for (; js < ms; )
                            ts[js++] = 0;
                        Nt.putImageData(os, 0, Ss * tt)
                    }
                } else if (jt.kind === o.ImageKind.RGBA_32BPP) {
                    for (_s = 0,
                    xs = Et * tt * 4,
                    Ss = 0; Ss < St; Ss++)
                        vs.set(ys.subarray(ds, ds + xs)),
                        ds += xs,
                        Nt.putImageData(os, 0, _s),
                        _s += tt;
                    Ss < Bt && (xs = Et * Pt * 4,
                    vs.set(ys.subarray(ds, ds + xs)),
                    Nt.putImageData(os, 0, _s))
                } else if (jt.kind === o.ImageKind.RGB_24BPP)
                    for (ns = tt,
                    xs = Et * ns,
                    Ss = 0; Ss < Bt; Ss++) {
                        for (Ss >= St && (ns = Pt,
                        xs = Et * ns),
                        js = 0,
                        _s = xs; _s--; )
                            vs[js++] = ys[ds++],
                            vs[js++] = ys[ds++],
                            vs[js++] = ys[ds++],
                            vs[js++] = 255;
                        Nt.putImageData(os, 0, Ss * tt)
                    }
                else
                    throw new Error(`bad image kind: ${jt.kind}`)
            }
            function dt(Nt, jt) {
                if (jt.bitmap) {
                    Nt.drawImage(jt.bitmap, 0, 0);
                    return
                }
                const xt = jt.height
                  , Et = jt.width
                  , Pt = xt % tt
                  , St = (xt - Pt) / tt
                  , Bt = Pt === 0 ? St : St + 1
                  , os = Nt.createImageData(Et, tt);
                let ds = 0;
                const js = jt.data
                  , ys = os.data;
                for (let vs = 0; vs < Bt; vs++) {
                    const Ss = vs < St ? tt : Pt;
                    ({srcPos: ds} = (0,
                    d.convertBlackAndWhiteToRGBA)({
                        src: js,
                        srcPos: ds,
                        dest: ys,
                        width: Et,
                        height: Ss,
                        nonBlackColor: 0
                    })),
                    Nt.putImageData(os, 0, vs * tt)
                }
            }
            function ot(Nt, jt) {
                const xt = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font", "filter"];
                for (const Et of xt)
                    Nt[Et] !== void 0 && (jt[Et] = Nt[Et]);
                Nt.setLineDash !== void 0 && (jt.setLineDash(Nt.getLineDash()),
                jt.lineDashOffset = Nt.lineDashOffset)
            }
            function at(Nt) {
                if (Nt.strokeStyle = Nt.fillStyle = "#000000",
                Nt.fillRule = "nonzero",
                Nt.globalAlpha = 1,
                Nt.lineWidth = 1,
                Nt.lineCap = "butt",
                Nt.lineJoin = "miter",
                Nt.miterLimit = 10,
                Nt.globalCompositeOperation = "source-over",
                Nt.font = "10px sans-serif",
                Nt.setLineDash !== void 0 && (Nt.setLineDash([]),
                Nt.lineDashOffset = 0),
                !o.isNodeJS) {
                    const {filter: jt} = Nt;
                    jt !== "none" && jt !== "" && (Nt.filter = "none")
                }
            }
            function ht(Nt, jt, xt, Et) {
                const Pt = Nt.length;
                for (let St = 3; St < Pt; St += 4) {
                    const Bt = Nt[St];
                    if (Bt === 0)
                        Nt[St - 3] = jt,
                        Nt[St - 2] = xt,
                        Nt[St - 1] = Et;
                    else if (Bt < 255) {
                        const os = 255 - Bt;
                        Nt[St - 3] = Nt[St - 3] * Bt + jt * os >> 8,
                        Nt[St - 2] = Nt[St - 2] * Bt + xt * os >> 8,
                        Nt[St - 1] = Nt[St - 1] * Bt + Et * os >> 8
                    }
                }
            }
            function pt(Nt, jt, xt) {
                const Et = Nt.length
                  , Pt = 1 / 255;
                for (let St = 3; St < Et; St += 4) {
                    const Bt = xt ? xt[Nt[St]] : Nt[St];
                    jt[St] = jt[St] * Bt * Pt | 0
                }
            }
            function gt(Nt, jt, xt) {
                const Et = Nt.length;
                for (let Pt = 3; Pt < Et; Pt += 4) {
                    const St = Nt[Pt - 3] * 77 + Nt[Pt - 2] * 152 + Nt[Pt - 1] * 28;
                    jt[Pt] = xt ? jt[Pt] * xt[St >> 8] >> 8 : jt[Pt] * St >> 16
                }
            }
            function wt(Nt, jt, xt, Et, Pt, St, Bt, os, ds, js, ys) {
                const vs = !!St
                  , Ss = vs ? St[0] : 0
                  , _s = vs ? St[1] : 0
                  , ns = vs ? St[2] : 0
                  , xs = Pt === "Luminosity" ? gt : pt
                  , ts = Math.min(Et, Math.ceil(1048576 / xt));
                for (let ms = 0; ms < Et; ms += ts) {
                    const hs = Math.min(ts, Et - ms)
                      , bs = Nt.getImageData(os - js, ms + (ds - ys), xt, hs)
                      , ks = jt.getImageData(os, ms + ds, xt, hs);
                    vs && ht(bs.data, Ss, _s, ns),
                    xs(bs.data, ks.data, Bt),
                    jt.putImageData(ks, os, ms + ds)
                }
            }
            function yt(Nt, jt, xt, Et) {
                const Pt = Et[0]
                  , St = Et[1]
                  , Bt = Et[2] - Pt
                  , os = Et[3] - St;
                Bt === 0 || os === 0 || (wt(jt.context, xt, Bt, os, jt.subtype, jt.backdrop, jt.transferMap, Pt, St, jt.offsetX, jt.offsetY),
                Nt.save(),
                Nt.globalAlpha = 1,
                Nt.globalCompositeOperation = "source-over",
                Nt.setTransform(1, 0, 0, 1, 0, 0),
                Nt.drawImage(xt.canvas, 0, 0),
                Nt.restore())
            }
            function Rt(Nt, jt) {
                const xt = o.Util.singularValueDecompose2dScale(Nt);
                xt[0] = Math.fround(xt[0]),
                xt[1] = Math.fround(xt[1]);
                const Et = Math.fround((globalThis.devicePixelRatio || 1) * a.PixelsPerInch.PDF_TO_CSS_UNITS);
                return jt !== void 0 ? jt : xt[0] <= Et || xt[1] <= Et
            }
            const Mt = ["butt", "round", "square"]
              , ss = ["miter", "round", "bevel"]
              , zt = {}
              , At = {}
              , Yt = class Yt {
                constructor(jt, xt, Et, Pt, St, {optionalContentConfig: Bt, markedContentStack: os=null}, ds, js) {
                    ps(this, vt);
                    this.ctx = jt,
                    this.current = new nt(this.ctx.canvas.width,this.ctx.canvas.height),
                    this.stateStack = [],
                    this.pendingClip = null,
                    this.pendingEOFill = !1,
                    this.res = null,
                    this.xobjs = null,
                    this.commonObjs = xt,
                    this.objs = Et,
                    this.canvasFactory = Pt,
                    this.filterFactory = St,
                    this.groupStack = [],
                    this.processingType3 = null,
                    this.baseTransform = null,
                    this.baseTransformStack = [],
                    this.groupLevel = 0,
                    this.smaskStack = [],
                    this.smaskCounter = 0,
                    this.tempSMask = null,
                    this.suspendedCtx = null,
                    this.contentVisible = !0,
                    this.markedContentStack = os || [],
                    this.optionalContentConfig = Bt,
                    this.cachedCanvases = new et(this.canvasFactory),
                    this.cachedPatterns = new Map,
                    this.annotationCanvasMap = ds,
                    this.viewportScale = 1,
                    this.outputScaleX = 1,
                    this.outputScaleY = 1,
                    this.pageColors = js,
                    this._cachedScaleForStroking = [-1, 0],
                    this._cachedGetSinglePixelWidth = null,
                    this._cachedBitmapsMap = new Map
                }
                getObject(jt, xt=null) {
                    return typeof jt == "string" ? jt.startsWith("g_") ? this.commonObjs.get(jt) : this.objs.get(jt) : xt
                }
                beginDrawing({transform: jt, viewport: xt, transparency: Et=!1, background: Pt=null}) {
                    const St = this.ctx.canvas.width
                      , Bt = this.ctx.canvas.height
                      , os = this.ctx.fillStyle;
                    if (this.ctx.fillStyle = Pt || "#ffffff",
                    this.ctx.fillRect(0, 0, St, Bt),
                    this.ctx.fillStyle = os,
                    Et) {
                        const ds = this.cachedCanvases.getCanvas("transparent", St, Bt);
                        this.compositeCtx = this.ctx,
                        this.transparentCanvas = ds.canvas,
                        this.ctx = ds.context,
                        this.ctx.save(),
                        this.ctx.transform(...(0,
                        a.getCurrentTransform)(this.compositeCtx))
                    }
                    this.ctx.save(),
                    at(this.ctx),
                    jt && (this.ctx.transform(...jt),
                    this.outputScaleX = jt[0],
                    this.outputScaleY = jt[0]),
                    this.ctx.transform(...xt.transform),
                    this.viewportScale = xt.scale,
                    this.baseTransform = (0,
                    a.getCurrentTransform)(this.ctx)
                }
                executeOperatorList(jt, xt, Et, Pt) {
                    const St = jt.argsArray
                      , Bt = jt.fnArray;
                    let os = xt || 0;
                    const ds = St.length;
                    if (ds === os)
                        return os;
                    const js = ds - os > $ && typeof Et == "function"
                      , ys = js ? Date.now() + _ : 0;
                    let vs = 0;
                    const Ss = this.commonObjs
                      , _s = this.objs;
                    let ns;
                    for (; ; ) {
                        if (Pt !== void 0 && os === Pt.nextBreakPoint)
                            return Pt.breakIt(os, Et),
                            os;
                        if (ns = Bt[os],
                        ns !== o.OPS.dependency)
                            this[ns].apply(this, St[os]);
                        else
                            for (const xs of St[os]) {
                                const Lt = xs.startsWith("g_") ? Ss : _s;
                                if (!Lt.has(xs))
                                    return Lt.get(xs, Et),
                                    os
                            }
                        if (os++,
                        os === ds)
                            return os;
                        if (js && ++vs > $) {
                            if (Date.now() > ys)
                                return Et(),
                                os;
                            vs = 0
                        }
                    }
                }
                endDrawing() {
                    cs(this, vt, uo).call(this),
                    this.cachedCanvases.clear(),
                    this.cachedPatterns.clear();
                    for (const jt of this._cachedBitmapsMap.values()) {
                        for (const xt of jt.values())
                            typeof HTMLCanvasElement < "u" && xt instanceof HTMLCanvasElement && (xt.width = xt.height = 0);
                        jt.clear()
                    }
                    this._cachedBitmapsMap.clear(),
                    cs(this, vt, mo).call(this)
                }
                _scaleImage(jt, xt) {
                    const Et = jt.width
                      , Pt = jt.height;
                    let St = Math.max(Math.hypot(xt[0], xt[1]), 1), Bt = Math.max(Math.hypot(xt[2], xt[3]), 1), os = Et, ds = Pt, js = "prescale1", ys, vs;
                    for (; St > 2 && os > 1 || Bt > 2 && ds > 1; ) {
                        let Ss = os
                          , _s = ds;
                        St > 2 && os > 1 && (Ss = os >= 16384 ? Math.floor(os / 2) - 1 || 1 : Math.ceil(os / 2),
                        St /= os / Ss),
                        Bt > 2 && ds > 1 && (_s = ds >= 16384 ? Math.floor(ds / 2) - 1 || 1 : Math.ceil(ds) / 2,
                        Bt /= ds / _s),
                        ys = this.cachedCanvases.getCanvas(js, Ss, _s),
                        vs = ys.context,
                        vs.clearRect(0, 0, Ss, _s),
                        vs.drawImage(jt, 0, 0, os, ds, 0, 0, Ss, _s),
                        jt = ys.canvas,
                        os = Ss,
                        ds = _s,
                        js = js === "prescale1" ? "prescale2" : "prescale1"
                    }
                    return {
                        img: jt,
                        paintWidth: os,
                        paintHeight: ds
                    }
                }
                _createMaskCanvas(jt) {
                    const xt = this.ctx
                      , {width: Et, height: Pt} = jt
                      , St = this.current.fillColor
                      , Bt = this.current.patternFill
                      , os = (0,
                    a.getCurrentTransform)(xt);
                    let ds, js, ys, vs;
                    if ((jt.bitmap || jt.data) && jt.count > 1) {
                        const ls = jt.bitmap || jt.data.buffer;
                        js = JSON.stringify(Bt ? os : [os.slice(0, 4), St]),
                        ds = this._cachedBitmapsMap.get(ls),
                        ds || (ds = new Map,
                        this._cachedBitmapsMap.set(ls, ds));
                        const Ds = ds.get(js);
                        if (Ds && !Bt) {
                            const Ms = Math.round(Math.min(os[0], os[2]) + os[4])
                              , Hs = Math.round(Math.min(os[1], os[3]) + os[5]);
                            return {
                                canvas: Ds,
                                offsetX: Ms,
                                offsetY: Hs
                            }
                        }
                        ys = Ds
                    }
                    ys || (vs = this.cachedCanvases.getCanvas("maskCanvas", Et, Pt),
                    dt(vs.context, jt));
                    let Ss = o.Util.transform(os, [1 / Et, 0, 0, -1 / Pt, 0, 0]);
                    Ss = o.Util.transform(Ss, [1, 0, 0, 1, 0, -Pt]);
                    const _s = o.Util.applyTransform([0, 0], Ss)
                      , ns = o.Util.applyTransform([Et, Pt], Ss)
                      , xs = o.Util.normalizeRect([_s[0], _s[1], ns[0], ns[1]])
                      , Lt = Math.round(xs[2] - xs[0]) || 1
                      , ts = Math.round(xs[3] - xs[1]) || 1
                      , ms = this.cachedCanvases.getCanvas("fillCanvas", Lt, ts)
                      , hs = ms.context
                      , bs = Math.min(_s[0], ns[0])
                      , ks = Math.min(_s[1], ns[1]);
                    hs.translate(-bs, -ks),
                    hs.transform(...Ss),
                    ys || (ys = this._scaleImage(vs.canvas, (0,
                    a.getCurrentTransformInverse)(hs)),
                    ys = ys.img,
                    ds && Bt && ds.set(js, ys)),
                    hs.imageSmoothingEnabled = Rt((0,
                    a.getCurrentTransform)(hs), jt.interpolate),
                    it(hs, ys, 0, 0, ys.width, ys.height, 0, 0, Et, Pt),
                    hs.globalCompositeOperation = "source-in";
                    const Ts = o.Util.transform((0,
                    a.getCurrentTransformInverse)(hs), [1, 0, 0, 1, -bs, -ks]);
                    return hs.fillStyle = Bt ? St.getPattern(xt, this, Ts, c.PathType.FILL) : St,
                    hs.fillRect(0, 0, Et, Pt),
                    ds && !Bt && (this.cachedCanvases.delete("fillCanvas"),
                    ds.set(js, ms.canvas)),
                    {
                        canvas: ms.canvas,
                        offsetX: Math.round(bs),
                        offsetY: Math.round(ks)
                    }
                }
                setLineWidth(jt) {
                    jt !== this.current.lineWidth && (this._cachedScaleForStroking[0] = -1),
                    this.current.lineWidth = jt,
                    this.ctx.lineWidth = jt
                }
                setLineCap(jt) {
                    this.ctx.lineCap = Mt[jt]
                }
                setLineJoin(jt) {
                    this.ctx.lineJoin = ss[jt]
                }
                setMiterLimit(jt) {
                    this.ctx.miterLimit = jt
                }
                setDash(jt, xt) {
                    const Et = this.ctx;
                    Et.setLineDash !== void 0 && (Et.setLineDash(jt),
                    Et.lineDashOffset = xt)
                }
                setRenderingIntent(jt) {}
                setFlatness(jt) {}
                setGState(jt) {
                    for (const [xt,Et] of jt)
                        switch (xt) {
                        case "LW":
                            this.setLineWidth(Et);
                            break;
                        case "LC":
                            this.setLineCap(Et);
                            break;
                        case "LJ":
                            this.setLineJoin(Et);
                            break;
                        case "ML":
                            this.setMiterLimit(Et);
                            break;
                        case "D":
                            this.setDash(Et[0], Et[1]);
                            break;
                        case "RI":
                            this.setRenderingIntent(Et);
                            break;
                        case "FL":
                            this.setFlatness(Et);
                            break;
                        case "Font":
                            this.setFont(Et[0], Et[1]);
                            break;
                        case "CA":
                            this.current.strokeAlpha = Et;
                            break;
                        case "ca":
                            this.current.fillAlpha = Et,
                            this.ctx.globalAlpha = Et;
                            break;
                        case "BM":
                            this.ctx.globalCompositeOperation = Et;
                            break;
                        case "SMask":
                            this.current.activeSMask = Et ? this.tempSMask : null,
                            this.tempSMask = null,
                            this.checkSMaskState();
                            break;
                        case "TR":
                            this.ctx.filter = this.current.transferMaps = this.filterFactory.addFilter(Et);
                            break
                        }
                }
                get inSMaskMode() {
                    return !!this.suspendedCtx
                }
                checkSMaskState() {
                    const jt = this.inSMaskMode;
                    this.current.activeSMask && !jt ? this.beginSMaskMode() : !this.current.activeSMask && jt && this.endSMaskMode()
                }
                beginSMaskMode() {
                    if (this.inSMaskMode)
                        throw new Error("beginSMaskMode called while already in smask mode");
                    const jt = this.ctx.canvas.width
                      , xt = this.ctx.canvas.height
                      , Et = "smaskGroupAt" + this.groupLevel
                      , Pt = this.cachedCanvases.getCanvas(Et, jt, xt);
                    this.suspendedCtx = this.ctx,
                    this.ctx = Pt.context;
                    const St = this.ctx;
                    St.setTransform(...(0,
                    a.getCurrentTransform)(this.suspendedCtx)),
                    ot(this.suspendedCtx, St),
                    rt(St, this.suspendedCtx),
                    this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]])
                }
                endSMaskMode() {
                    if (!this.inSMaskMode)
                        throw new Error("endSMaskMode called while not in smask mode");
                    this.ctx._removeMirroring(),
                    ot(this.ctx, this.suspendedCtx),
                    this.ctx = this.suspendedCtx,
                    this.suspendedCtx = null
                }
                compose(jt) {
                    if (!this.current.activeSMask)
                        return;
                    jt ? (jt[0] = Math.floor(jt[0]),
                    jt[1] = Math.floor(jt[1]),
                    jt[2] = Math.ceil(jt[2]),
                    jt[3] = Math.ceil(jt[3])) : jt = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];
                    const xt = this.current.activeSMask
                      , Et = this.suspendedCtx;
                    yt(Et, xt, this.ctx, jt),
                    this.ctx.save(),
                    this.ctx.setTransform(1, 0, 0, 1, 0, 0),
                    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height),
                    this.ctx.restore()
                }
                save() {
                    this.inSMaskMode ? (ot(this.ctx, this.suspendedCtx),
                    this.suspendedCtx.save()) : this.ctx.save();
                    const jt = this.current;
                    this.stateStack.push(jt),
                    this.current = jt.clone()
                }
                restore() {
                    this.stateStack.length === 0 && this.inSMaskMode && this.endSMaskMode(),
                    this.stateStack.length !== 0 && (this.current = this.stateStack.pop(),
                    this.inSMaskMode ? (this.suspendedCtx.restore(),
                    ot(this.suspendedCtx, this.ctx)) : this.ctx.restore(),
                    this.checkSMaskState(),
                    this.pendingClip = null,
                    this._cachedScaleForStroking[0] = -1,
                    this._cachedGetSinglePixelWidth = null)
                }
                transform(jt, xt, Et, Pt, St, Bt) {
                    this.ctx.transform(jt, xt, Et, Pt, St, Bt),
                    this._cachedScaleForStroking[0] = -1,
                    this._cachedGetSinglePixelWidth = null
                }
                constructPath(jt, xt, Et) {
                    const Pt = this.ctx
                      , St = this.current;
                    let Bt = St.x, os = St.y, ds, js;
                    const ys = (0,
                    a.getCurrentTransform)(Pt)
                      , vs = ys[0] === 0 && ys[3] === 0 || ys[1] === 0 && ys[2] === 0
                      , Ss = vs ? Et.slice(0) : null;
                    for (let _s = 0, ns = 0, xs = jt.length; _s < xs; _s++)
                        switch (jt[_s] | 0) {
                        case o.OPS.rectangle:
                            Bt = xt[ns++],
                            os = xt[ns++];
                            const Lt = xt[ns++]
                              , ts = xt[ns++]
                              , ms = Bt + Lt
                              , hs = os + ts;
                            Pt.moveTo(Bt, os),
                            Lt === 0 || ts === 0 ? Pt.lineTo(ms, hs) : (Pt.lineTo(ms, os),
                            Pt.lineTo(ms, hs),
                            Pt.lineTo(Bt, hs)),
                            vs || St.updateRectMinMax(ys, [Bt, os, ms, hs]),
                            Pt.closePath();
                            break;
                        case o.OPS.moveTo:
                            Bt = xt[ns++],
                            os = xt[ns++],
                            Pt.moveTo(Bt, os),
                            vs || St.updatePathMinMax(ys, Bt, os);
                            break;
                        case o.OPS.lineTo:
                            Bt = xt[ns++],
                            os = xt[ns++],
                            Pt.lineTo(Bt, os),
                            vs || St.updatePathMinMax(ys, Bt, os);
                            break;
                        case o.OPS.curveTo:
                            ds = Bt,
                            js = os,
                            Bt = xt[ns + 4],
                            os = xt[ns + 5],
                            Pt.bezierCurveTo(xt[ns], xt[ns + 1], xt[ns + 2], xt[ns + 3], Bt, os),
                            St.updateCurvePathMinMax(ys, ds, js, xt[ns], xt[ns + 1], xt[ns + 2], xt[ns + 3], Bt, os, Ss),
                            ns += 6;
                            break;
                        case o.OPS.curveTo2:
                            ds = Bt,
                            js = os,
                            Pt.bezierCurveTo(Bt, os, xt[ns], xt[ns + 1], xt[ns + 2], xt[ns + 3]),
                            St.updateCurvePathMinMax(ys, ds, js, Bt, os, xt[ns], xt[ns + 1], xt[ns + 2], xt[ns + 3], Ss),
                            Bt = xt[ns + 2],
                            os = xt[ns + 3],
                            ns += 4;
                            break;
                        case o.OPS.curveTo3:
                            ds = Bt,
                            js = os,
                            Bt = xt[ns + 2],
                            os = xt[ns + 3],
                            Pt.bezierCurveTo(xt[ns], xt[ns + 1], Bt, os, Bt, os),
                            St.updateCurvePathMinMax(ys, ds, js, xt[ns], xt[ns + 1], Bt, os, Bt, os, Ss),
                            ns += 4;
                            break;
                        case o.OPS.closePath:
                            Pt.closePath();
                            break
                        }
                    vs && St.updateScalingPathMinMax(ys, Ss),
                    St.setCurrentPoint(Bt, os)
                }
                closePath() {
                    this.ctx.closePath()
                }
                stroke(jt=!0) {
                    const xt = this.ctx
                      , Et = this.current.strokeColor;
                    xt.globalAlpha = this.current.strokeAlpha,
                    this.contentVisible && (typeof Et == "object" && (Et != null && Et.getPattern) ? (xt.save(),
                    xt.strokeStyle = Et.getPattern(xt, this, (0,
                    a.getCurrentTransformInverse)(xt), c.PathType.STROKE),
                    this.rescaleAndStroke(!1),
                    xt.restore()) : this.rescaleAndStroke(!0)),
                    jt && this.consumePath(this.current.getClippedPathBoundingBox()),
                    xt.globalAlpha = this.current.fillAlpha
                }
                closeStroke() {
                    this.closePath(),
                    this.stroke()
                }
                fill(jt=!0) {
                    const xt = this.ctx
                      , Et = this.current.fillColor
                      , Pt = this.current.patternFill;
                    let St = !1;
                    Pt && (xt.save(),
                    xt.fillStyle = Et.getPattern(xt, this, (0,
                    a.getCurrentTransformInverse)(xt), c.PathType.FILL),
                    St = !0);
                    const Bt = this.current.getClippedPathBoundingBox();
                    this.contentVisible && Bt !== null && (this.pendingEOFill ? (xt.fill("evenodd"),
                    this.pendingEOFill = !1) : xt.fill()),
                    St && xt.restore(),
                    jt && this.consumePath(Bt)
                }
                eoFill() {
                    this.pendingEOFill = !0,
                    this.fill()
                }
                fillStroke() {
                    this.fill(!1),
                    this.stroke(!1),
                    this.consumePath()
                }
                eoFillStroke() {
                    this.pendingEOFill = !0,
                    this.fillStroke()
                }
                closeFillStroke() {
                    this.closePath(),
                    this.fillStroke()
                }
                closeEOFillStroke() {
                    this.pendingEOFill = !0,
                    this.closePath(),
                    this.fillStroke()
                }
                endPath() {
                    this.consumePath()
                }
                clip() {
                    this.pendingClip = zt
                }
                eoClip() {
                    this.pendingClip = At
                }
                beginText() {
                    this.current.textMatrix = o.IDENTITY_MATRIX,
                    this.current.textMatrixScale = 1,
                    this.current.x = this.current.lineX = 0,
                    this.current.y = this.current.lineY = 0
                }
                endText() {
                    const jt = this.pendingTextPaths
                      , xt = this.ctx;
                    if (jt === void 0) {
                        xt.beginPath();
                        return
                    }
                    xt.save(),
                    xt.beginPath();
                    for (const Et of jt)
                        xt.setTransform(...Et.transform),
                        xt.translate(Et.x, Et.y),
                        Et.addToPath(xt, Et.fontSize);
                    xt.restore(),
                    xt.clip(),
                    xt.beginPath(),
                    delete this.pendingTextPaths
                }
                setCharSpacing(jt) {
                    this.current.charSpacing = jt
                }
                setWordSpacing(jt) {
                    this.current.wordSpacing = jt
                }
                setHScale(jt) {
                    this.current.textHScale = jt / 100
                }
                setLeading(jt) {
                    this.current.leading = -jt
                }
                setFont(jt, xt) {
                    var ys;
                    const Et = this.commonObjs.get(jt)
                      , Pt = this.current;
                    if (!Et)
                        throw new Error(`Can't find font for ${jt}`);
                    if (Pt.fontMatrix = Et.fontMatrix || o.FONT_IDENTITY_MATRIX,
                    (Pt.fontMatrix[0] === 0 || Pt.fontMatrix[3] === 0) && (0,
                    o.warn)("Invalid font matrix for font " + jt),
                    xt < 0 ? (xt = -xt,
                    Pt.fontDirection = -1) : Pt.fontDirection = 1,
                    this.current.font = Et,
                    this.current.fontSize = xt,
                    Et.isType3Font)
                        return;
                    const St = Et.loadedName || "sans-serif"
                      , Bt = ((ys = Et.systemFontInfo) == null ? void 0 : ys.css) || `"${St}", ${Et.fallbackName}`;
                    let os = "normal";
                    Et.black ? os = "900" : Et.bold && (os = "bold");
                    const ds = Et.italic ? "italic" : "normal";
                    let js = xt;
                    xt < h ? js = h : xt > g && (js = g),
                    this.current.fontSizeScale = xt / js,
                    this.ctx.font = `${ds} ${os} ${js}px ${Bt}`
                }
                setTextRenderingMode(jt) {
                    this.current.textRenderingMode = jt
                }
                setTextRise(jt) {
                    this.current.textRise = jt
                }
                moveText(jt, xt) {
                    this.current.x = this.current.lineX += jt,
                    this.current.y = this.current.lineY += xt
                }
                setLeadingMoveText(jt, xt) {
                    this.setLeading(-xt),
                    this.moveText(jt, xt)
                }
                setTextMatrix(jt, xt, Et, Pt, St, Bt) {
                    this.current.textMatrix = [jt, xt, Et, Pt, St, Bt],
                    this.current.textMatrixScale = Math.hypot(jt, xt),
                    this.current.x = this.current.lineX = 0,
                    this.current.y = this.current.lineY = 0
                }
                nextLine() {
                    this.moveText(0, this.current.leading)
                }
                paintChar(jt, xt, Et, Pt) {
                    const St = this.ctx
                      , Bt = this.current
                      , os = Bt.font
                      , ds = Bt.textRenderingMode
                      , js = Bt.fontSize / Bt.fontSizeScale
                      , ys = ds & o.TextRenderingMode.FILL_STROKE_MASK
                      , vs = !!(ds & o.TextRenderingMode.ADD_TO_PATH_FLAG)
                      , Ss = Bt.patternFill && !os.missingFile;
                    let _s;
                    (os.disableFontFace || vs || Ss) && (_s = os.getPathGenerator(this.commonObjs, jt)),
                    os.disableFontFace || Ss ? (St.save(),
                    St.translate(xt, Et),
                    St.beginPath(),
                    _s(St, js),
                    Pt && St.setTransform(...Pt),
                    (ys === o.TextRenderingMode.FILL || ys === o.TextRenderingMode.FILL_STROKE) && St.fill(),
                    (ys === o.TextRenderingMode.STROKE || ys === o.TextRenderingMode.FILL_STROKE) && St.stroke(),
                    St.restore()) : ((ys === o.TextRenderingMode.FILL || ys === o.TextRenderingMode.FILL_STROKE) && St.fillText(jt, xt, Et),
                    (ys === o.TextRenderingMode.STROKE || ys === o.TextRenderingMode.FILL_STROKE) && St.strokeText(jt, xt, Et)),
                    vs && (this.pendingTextPaths || (this.pendingTextPaths = [])).push({
                        transform: (0,
                        a.getCurrentTransform)(St),
                        x: xt,
                        y: Et,
                        fontSize: js,
                        addToPath: _s
                    })
                }
                get isFontSubpixelAAEnabled() {
                    const {context: jt} = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10);
                    jt.scale(1.5, 1),
                    jt.fillText("I", 0, 10);
                    const xt = jt.getImageData(0, 0, 10, 10).data;
                    let Et = !1;
                    for (let Pt = 3; Pt < xt.length; Pt += 4)
                        if (xt[Pt] > 0 && xt[Pt] < 255) {
                            Et = !0;
                            break
                        }
                    return (0,
                    o.shadow)(this, "isFontSubpixelAAEnabled", Et)
                }
                showText(jt) {
                    const xt = this.current
                      , Et = xt.font;
                    if (Et.isType3Font)
                        return this.showType3Text(jt);
                    const Pt = xt.fontSize;
                    if (Pt === 0)
                        return;
                    const St = this.ctx
                      , Bt = xt.fontSizeScale
                      , os = xt.charSpacing
                      , ds = xt.wordSpacing
                      , js = xt.fontDirection
                      , ys = xt.textHScale * js
                      , vs = jt.length
                      , Ss = Et.vertical
                      , _s = Ss ? 1 : -1
                      , ns = Et.defaultVMetrics
                      , xs = Pt * xt.fontMatrix[0]
                      , Lt = xt.textRenderingMode === o.TextRenderingMode.FILL && !Et.disableFontFace && !xt.patternFill;
                    St.save(),
                    St.transform(...xt.textMatrix),
                    St.translate(xt.x, xt.y + xt.textRise),
                    js > 0 ? St.scale(ys, -1) : St.scale(ys, 1);
                    let ts;
                    if (xt.patternFill) {
                        St.save();
                        const Ts = xt.fillColor.getPattern(St, this, (0,
                        a.getCurrentTransformInverse)(St), c.PathType.FILL);
                        ts = (0,
                        a.getCurrentTransform)(St),
                        St.restore(),
                        St.fillStyle = Ts
                    }
                    let ms = xt.lineWidth;
                    const hs = xt.textMatrixScale;
                    if (hs === 0 || ms === 0) {
                        const Ts = xt.textRenderingMode & o.TextRenderingMode.FILL_STROKE_MASK;
                        (Ts === o.TextRenderingMode.STROKE || Ts === o.TextRenderingMode.FILL_STROKE) && (ms = this.getSinglePixelWidth())
                    } else
                        ms /= hs;
                    if (Bt !== 1 && (St.scale(Bt, Bt),
                    ms /= Bt),
                    St.lineWidth = ms,
                    Et.isInvalidPDFjsFont) {
                        const Ts = [];
                        let ls = 0;
                        for (const Ds of jt)
                            Ts.push(Ds.unicode),
                            ls += Ds.width;
                        St.fillText(Ts.join(""), 0, 0),
                        xt.x += ls * xs * ys,
                        St.restore(),
                        this.compose();
                        return
                    }
                    let bs = 0, ks;
                    for (ks = 0; ks < vs; ++ks) {
                        const Ts = jt[ks];
                        if (typeof Ts == "number") {
                            bs += _s * Ts * Pt / 1e3;
                            continue
                        }
                        let ls = !1;
                        const Ds = (Ts.isSpace ? ds : 0) + os
                          , Ms = Ts.fontChar
                          , Hs = Ts.accent;
                        let Vs, Xs, $s = Ts.width;
                        if (Ss) {
                            const Zs = Ts.vmetric || ns
                              , sr = -(Ts.vmetric ? Zs[1] : $s * .5) * xs
                              , As = Zs[2] * xs;
                            $s = Zs ? -Zs[0] : $s,
                            Vs = sr / Bt,
                            Xs = (bs + As) / Bt
                        } else
                            Vs = bs / Bt,
                            Xs = 0;
                        if (Et.remeasure && $s > 0) {
                            const Zs = St.measureText(Ms).width * 1e3 / Pt * Bt;
                            if ($s < Zs && this.isFontSubpixelAAEnabled) {
                                const sr = $s / Zs;
                                ls = !0,
                                St.save(),
                                St.scale(sr, 1),
                                Vs /= sr
                            } else
                                $s !== Zs && (Vs += ($s - Zs) / 2e3 * Pt / Bt)
                        }
                        if (this.contentVisible && (Ts.isInFont || Et.missingFile)) {
                            if (Lt && !Hs)
                                St.fillText(Ms, Vs, Xs);
                            else if (this.paintChar(Ms, Vs, Xs, ts),
                            Hs) {
                                const Zs = Vs + Pt * Hs.offset.x / Bt
                                  , sr = Xs - Pt * Hs.offset.y / Bt;
                                this.paintChar(Hs.fontChar, Zs, sr, ts)
                            }
                        }
                        const zs = Ss ? $s * xs - Ds * js : $s * xs + Ds * js;
                        bs += zs,
                        ls && St.restore()
                    }
                    Ss ? xt.y -= bs : xt.x += bs * ys,
                    St.restore(),
                    this.compose()
                }
                showType3Text(jt) {
                    const xt = this.ctx
                      , Et = this.current
                      , Pt = Et.font
                      , St = Et.fontSize
                      , Bt = Et.fontDirection
                      , os = Pt.vertical ? 1 : -1
                      , ds = Et.charSpacing
                      , js = Et.wordSpacing
                      , ys = Et.textHScale * Bt
                      , vs = Et.fontMatrix || o.FONT_IDENTITY_MATRIX
                      , Ss = jt.length
                      , _s = Et.textRenderingMode === o.TextRenderingMode.INVISIBLE;
                    let ns, xs, Lt, ts;
                    if (!(_s || St === 0)) {
                        for (this._cachedScaleForStroking[0] = -1,
                        this._cachedGetSinglePixelWidth = null,
                        xt.save(),
                        xt.transform(...Et.textMatrix),
                        xt.translate(Et.x, Et.y),
                        xt.scale(ys, Bt),
                        ns = 0; ns < Ss; ++ns) {
                            if (xs = jt[ns],
                            typeof xs == "number") {
                                ts = os * xs * St / 1e3,
                                this.ctx.translate(ts, 0),
                                Et.x += ts * ys;
                                continue
                            }
                            const ms = (xs.isSpace ? js : 0) + ds
                              , hs = Pt.charProcOperatorList[xs.operatorListId];
                            if (!hs) {
                                (0,
                                o.warn)(`Type3 character "${xs.operatorListId}" is not available.`);
                                continue
                            }
                            this.contentVisible && (this.processingType3 = xs,
                            this.save(),
                            xt.scale(St, St),
                            xt.transform(...vs),
                            this.executeOperatorList(hs),
                            this.restore()),
                            Lt = o.Util.applyTransform([xs.width, 0], vs)[0] * St + ms,
                            xt.translate(Lt, 0),
                            Et.x += Lt * ys
                        }
                        xt.restore(),
                        this.processingType3 = null
                    }
                }
                setCharWidth(jt, xt) {}
                setCharWidthAndBounds(jt, xt, Et, Pt, St, Bt) {
                    this.ctx.rect(Et, Pt, St - Et, Bt - Pt),
                    this.ctx.clip(),
                    this.endPath()
                }
                getColorN_Pattern(jt) {
                    let xt;
                    if (jt[0] === "TilingPattern") {
                        const Et = jt[1]
                          , Pt = this.baseTransform || (0,
                        a.getCurrentTransform)(this.ctx)
                          , St = {
                            createCanvasGraphics: Bt => new Yt(Bt,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{
                                optionalContentConfig: this.optionalContentConfig,
                                markedContentStack: this.markedContentStack
                            })
                        };
                        xt = new c.TilingPattern(jt,Et,this.ctx,St,Pt)
                    } else
                        xt = this._getPattern(jt[1], jt[2]);
                    return xt
                }
                setStrokeColorN() {
                    this.current.strokeColor = this.getColorN_Pattern(arguments)
                }
                setFillColorN() {
                    this.current.fillColor = this.getColorN_Pattern(arguments),
                    this.current.patternFill = !0
                }
                setStrokeRGBColor(jt, xt, Et) {
                    const Pt = o.Util.makeHexColor(jt, xt, Et);
                    this.ctx.strokeStyle = Pt,
                    this.current.strokeColor = Pt
                }
                setFillRGBColor(jt, xt, Et) {
                    const Pt = o.Util.makeHexColor(jt, xt, Et);
                    this.ctx.fillStyle = Pt,
                    this.current.fillColor = Pt,
                    this.current.patternFill = !1
                }
                _getPattern(jt, xt=null) {
                    let Et;
                    return this.cachedPatterns.has(jt) ? Et = this.cachedPatterns.get(jt) : (Et = (0,
                    c.getShadingPattern)(this.getObject(jt)),
                    this.cachedPatterns.set(jt, Et)),
                    xt && (Et.matrix = xt),
                    Et
                }
                shadingFill(jt) {
                    if (!this.contentVisible)
                        return;
                    const xt = this.ctx;
                    this.save();
                    const Et = this._getPattern(jt);
                    xt.fillStyle = Et.getPattern(xt, this, (0,
                    a.getCurrentTransformInverse)(xt), c.PathType.SHADING);
                    const Pt = (0,
                    a.getCurrentTransformInverse)(xt);
                    if (Pt) {
                        const {width: St, height: Bt} = xt.canvas
                          , [os,ds,js,ys] = o.Util.getAxialAlignedBoundingBox([0, 0, St, Bt], Pt);
                        this.ctx.fillRect(os, ds, js - os, ys - ds)
                    } else
                        this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
                    this.compose(this.current.getClippedPathBoundingBox()),
                    this.restore()
                }
                beginInlineImage() {
                    (0,
                    o.unreachable)("Should not call beginInlineImage")
                }
                beginImageData() {
                    (0,
                    o.unreachable)("Should not call beginImageData")
                }
                paintFormXObjectBegin(jt, xt) {
                    if (this.contentVisible && (this.save(),
                    this.baseTransformStack.push(this.baseTransform),
                    Array.isArray(jt) && jt.length === 6 && this.transform(...jt),
                    this.baseTransform = (0,
                    a.getCurrentTransform)(this.ctx),
                    xt)) {
                        const Et = xt[2] - xt[0]
                          , Pt = xt[3] - xt[1];
                        this.ctx.rect(xt[0], xt[1], Et, Pt),
                        this.current.updateRectMinMax((0,
                        a.getCurrentTransform)(this.ctx), xt),
                        this.clip(),
                        this.endPath()
                    }
                }
                paintFormXObjectEnd() {
                    this.contentVisible && (this.restore(),
                    this.baseTransform = this.baseTransformStack.pop())
                }
                beginGroup(jt) {
                    if (!this.contentVisible)
                        return;
                    this.save(),
                    this.inSMaskMode && (this.endSMaskMode(),
                    this.current.activeSMask = null);
                    const xt = this.ctx;
                    jt.isolated || (0,
                    o.info)("TODO: Support non-isolated groups."),
                    jt.knockout && (0,
                    o.warn)("Knockout groups not supported.");
                    const Et = (0,
                    a.getCurrentTransform)(xt);
                    if (jt.matrix && xt.transform(...jt.matrix),
                    !jt.bbox)
                        throw new Error("Bounding box is required.");
                    let Pt = o.Util.getAxialAlignedBoundingBox(jt.bbox, (0,
                    a.getCurrentTransform)(xt));
                    const St = [0, 0, xt.canvas.width, xt.canvas.height];
                    Pt = o.Util.intersect(Pt, St) || [0, 0, 0, 0];
                    const Bt = Math.floor(Pt[0])
                      , os = Math.floor(Pt[1]);
                    let ds = Math.max(Math.ceil(Pt[2]) - Bt, 1)
                      , js = Math.max(Math.ceil(Pt[3]) - os, 1)
                      , ys = 1
                      , vs = 1;
                    ds > b && (ys = ds / b,
                    ds = b),
                    js > b && (vs = js / b,
                    js = b),
                    this.current.startNewPathAndClipBox([0, 0, ds, js]);
                    let Ss = "groupAt" + this.groupLevel;
                    jt.smask && (Ss += "_smask_" + this.smaskCounter++ % 2);
                    const _s = this.cachedCanvases.getCanvas(Ss, ds, js)
                      , ns = _s.context;
                    ns.scale(1 / ys, 1 / vs),
                    ns.translate(-Bt, -os),
                    ns.transform(...Et),
                    jt.smask ? this.smaskStack.push({
                        canvas: _s.canvas,
                        context: ns,
                        offsetX: Bt,
                        offsetY: os,
                        scaleX: ys,
                        scaleY: vs,
                        subtype: jt.smask.subtype,
                        backdrop: jt.smask.backdrop,
                        transferMap: jt.smask.transferMap || null,
                        startTransformInverse: null
                    }) : (xt.setTransform(1, 0, 0, 1, 0, 0),
                    xt.translate(Bt, os),
                    xt.scale(ys, vs),
                    xt.save()),
                    ot(xt, ns),
                    this.ctx = ns,
                    this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]),
                    this.groupStack.push(xt),
                    this.groupLevel++
                }
                endGroup(jt) {
                    if (!this.contentVisible)
                        return;
                    this.groupLevel--;
                    const xt = this.ctx
                      , Et = this.groupStack.pop();
                    if (this.ctx = Et,
                    this.ctx.imageSmoothingEnabled = !1,
                    jt.smask)
                        this.tempSMask = this.smaskStack.pop(),
                        this.restore();
                    else {
                        this.ctx.restore();
                        const Pt = (0,
                        a.getCurrentTransform)(this.ctx);
                        this.restore(),
                        this.ctx.save(),
                        this.ctx.setTransform(...Pt);
                        const St = o.Util.getAxialAlignedBoundingBox([0, 0, xt.canvas.width, xt.canvas.height], Pt);
                        this.ctx.drawImage(xt.canvas, 0, 0),
                        this.ctx.restore(),
                        this.compose(St)
                    }
                }
                beginAnnotation(jt, xt, Et, Pt, St) {
                    if (cs(this, vt, uo).call(this),
                    at(this.ctx),
                    this.ctx.save(),
                    this.save(),
                    this.baseTransform && this.ctx.setTransform(...this.baseTransform),
                    Array.isArray(xt) && xt.length === 4) {
                        const Bt = xt[2] - xt[0]
                          , os = xt[3] - xt[1];
                        if (St && this.annotationCanvasMap) {
                            Et = Et.slice(),
                            Et[4] -= xt[0],
                            Et[5] -= xt[1],
                            xt = xt.slice(),
                            xt[0] = xt[1] = 0,
                            xt[2] = Bt,
                            xt[3] = os;
                            const [ds,js] = o.Util.singularValueDecompose2dScale((0,
                            a.getCurrentTransform)(this.ctx))
                              , {viewportScale: ys} = this
                              , vs = Math.ceil(Bt * this.outputScaleX * ys)
                              , Ss = Math.ceil(os * this.outputScaleY * ys);
                            this.annotationCanvas = this.canvasFactory.create(vs, Ss);
                            const {canvas: _s, context: ns} = this.annotationCanvas;
                            this.annotationCanvasMap.set(jt, _s),
                            this.annotationCanvas.savedCtx = this.ctx,
                            this.ctx = ns,
                            this.ctx.save(),
                            this.ctx.setTransform(ds, 0, 0, -js, 0, os * js),
                            at(this.ctx)
                        } else
                            at(this.ctx),
                            this.ctx.rect(xt[0], xt[1], Bt, os),
                            this.ctx.clip(),
                            this.endPath()
                    }
                    this.current = new nt(this.ctx.canvas.width,this.ctx.canvas.height),
                    this.transform(...Et),
                    this.transform(...Pt)
                }
                endAnnotation() {
                    this.annotationCanvas && (this.ctx.restore(),
                    cs(this, vt, mo).call(this),
                    this.ctx = this.annotationCanvas.savedCtx,
                    delete this.annotationCanvas.savedCtx,
                    delete this.annotationCanvas)
                }
                paintImageMaskXObject(jt) {
                    if (!this.contentVisible)
                        return;
                    const xt = jt.count;
                    jt = this.getObject(jt.data, jt),
                    jt.count = xt;
                    const Et = this.ctx
                      , Pt = this.processingType3;
                    if (Pt && (Pt.compiled === void 0 && (Pt.compiled = st(jt)),
                    Pt.compiled)) {
                        Pt.compiled(Et);
                        return
                    }
                    const St = this._createMaskCanvas(jt)
                      , Bt = St.canvas;
                    Et.save(),
                    Et.setTransform(1, 0, 0, 1, 0, 0),
                    Et.drawImage(Bt, St.offsetX, St.offsetY),
                    Et.restore(),
                    this.compose()
                }
                paintImageMaskXObjectRepeat(jt, xt, Et=0, Pt=0, St, Bt) {
                    if (!this.contentVisible)
                        return;
                    jt = this.getObject(jt.data, jt);
                    const os = this.ctx;
                    os.save();
                    const ds = (0,
                    a.getCurrentTransform)(os);
                    os.transform(xt, Et, Pt, St, 0, 0);
                    const js = this._createMaskCanvas(jt);
                    os.setTransform(1, 0, 0, 1, js.offsetX - ds[4], js.offsetY - ds[5]);
                    for (let ys = 0, vs = Bt.length; ys < vs; ys += 2) {
                        const Ss = o.Util.transform(ds, [xt, Et, Pt, St, Bt[ys], Bt[ys + 1]])
                          , [_s,ns] = o.Util.applyTransform([0, 0], Ss);
                        os.drawImage(js.canvas, _s, ns)
                    }
                    os.restore(),
                    this.compose()
                }
                paintImageMaskXObjectGroup(jt) {
                    if (!this.contentVisible)
                        return;
                    const xt = this.ctx
                      , Et = this.current.fillColor
                      , Pt = this.current.patternFill;
                    for (const St of jt) {
                        const {data: Bt, width: os, height: ds, transform: js} = St
                          , ys = this.cachedCanvases.getCanvas("maskCanvas", os, ds)
                          , vs = ys.context;
                        vs.save();
                        const Ss = this.getObject(Bt, St);
                        dt(vs, Ss),
                        vs.globalCompositeOperation = "source-in",
                        vs.fillStyle = Pt ? Et.getPattern(vs, this, (0,
                        a.getCurrentTransformInverse)(xt), c.PathType.FILL) : Et,
                        vs.fillRect(0, 0, os, ds),
                        vs.restore(),
                        xt.save(),
                        xt.transform(...js),
                        xt.scale(1, -1),
                        it(xt, ys.canvas, 0, 0, os, ds, 0, -1, 1, 1),
                        xt.restore()
                    }
                    this.compose()
                }
                paintImageXObject(jt) {
                    if (!this.contentVisible)
                        return;
                    const xt = this.getObject(jt);
                    if (!xt) {
                        (0,
                        o.warn)("Dependent image isn't ready yet");
                        return
                    }
                    this.paintInlineImageXObject(xt)
                }
                paintImageXObjectRepeat(jt, xt, Et, Pt) {
                    if (!this.contentVisible)
                        return;
                    const St = this.getObject(jt);
                    if (!St) {
                        (0,
                        o.warn)("Dependent image isn't ready yet");
                        return
                    }
                    const Bt = St.width
                      , os = St.height
                      , ds = [];
                    for (let js = 0, ys = Pt.length; js < ys; js += 2)
                        ds.push({
                            transform: [xt, 0, 0, Et, Pt[js], Pt[js + 1]],
                            x: 0,
                            y: 0,
                            w: Bt,
                            h: os
                        });
                    this.paintInlineImageXObjectGroup(St, ds)
                }
                applyTransferMapsToCanvas(jt) {
                    return this.current.transferMaps !== "none" && (jt.filter = this.current.transferMaps,
                    jt.drawImage(jt.canvas, 0, 0),
                    jt.filter = "none"),
                    jt.canvas
                }
                applyTransferMapsToBitmap(jt) {
                    if (this.current.transferMaps === "none")
                        return jt.bitmap;
                    const {bitmap: xt, width: Et, height: Pt} = jt
                      , St = this.cachedCanvases.getCanvas("inlineImage", Et, Pt)
                      , Bt = St.context;
                    return Bt.filter = this.current.transferMaps,
                    Bt.drawImage(xt, 0, 0),
                    Bt.filter = "none",
                    St.canvas
                }
                paintInlineImageXObject(jt) {
                    if (!this.contentVisible)
                        return;
                    const xt = jt.width
                      , Et = jt.height
                      , Pt = this.ctx;
                    if (this.save(),
                    !o.isNodeJS) {
                        const {filter: os} = Pt;
                        os !== "none" && os !== "" && (Pt.filter = "none")
                    }
                    Pt.scale(1 / xt, -1 / Et);
                    let St;
                    if (jt.bitmap)
                        St = this.applyTransferMapsToBitmap(jt);
                    else if (typeof HTMLElement == "function" && jt instanceof HTMLElement || !jt.data)
                        St = jt;
                    else {
                        const ds = this.cachedCanvases.getCanvas("inlineImage", xt, Et).context;
                        lt(ds, jt),
                        St = this.applyTransferMapsToCanvas(ds)
                    }
                    const Bt = this._scaleImage(St, (0,
                    a.getCurrentTransformInverse)(Pt));
                    Pt.imageSmoothingEnabled = Rt((0,
                    a.getCurrentTransform)(Pt), jt.interpolate),
                    it(Pt, Bt.img, 0, 0, Bt.paintWidth, Bt.paintHeight, 0, -Et, xt, Et),
                    this.compose(),
                    this.restore()
                }
                paintInlineImageXObjectGroup(jt, xt) {
                    if (!this.contentVisible)
                        return;
                    const Et = this.ctx;
                    let Pt;
                    if (jt.bitmap)
                        Pt = jt.bitmap;
                    else {
                        const St = jt.width
                          , Bt = jt.height
                          , ds = this.cachedCanvases.getCanvas("inlineImage", St, Bt).context;
                        lt(ds, jt),
                        Pt = this.applyTransferMapsToCanvas(ds)
                    }
                    for (const St of xt)
                        Et.save(),
                        Et.transform(...St.transform),
                        Et.scale(1, -1),
                        it(Et, Pt, St.x, St.y, St.w, St.h, 0, -1, 1, 1),
                        Et.restore();
                    this.compose()
                }
                paintSolidColorImageMask() {
                    this.contentVisible && (this.ctx.fillRect(0, 0, 1, 1),
                    this.compose())
                }
                markPoint(jt) {}
                markPointProps(jt, xt) {}
                beginMarkedContent(jt) {
                    this.markedContentStack.push({
                        visible: !0
                    })
                }
                beginMarkedContentProps(jt, xt) {
                    jt === "OC" ? this.markedContentStack.push({
                        visible: this.optionalContentConfig.isVisible(xt)
                    }) : this.markedContentStack.push({
                        visible: !0
                    }),
                    this.contentVisible = this.isContentVisible()
                }
                endMarkedContent() {
                    this.markedContentStack.pop(),
                    this.contentVisible = this.isContentVisible()
                }
                beginCompat() {}
                endCompat() {}
                consumePath(jt) {
                    const xt = this.current.isEmptyClip();
                    this.pendingClip && this.current.updateClipFromPath(),
                    this.pendingClip || this.compose(jt);
                    const Et = this.ctx;
                    this.pendingClip && (xt || (this.pendingClip === At ? Et.clip("evenodd") : Et.clip()),
                    this.pendingClip = null),
                    this.current.startNewPathAndClipBox(this.current.clipBox),
                    Et.beginPath()
                }
                getSinglePixelWidth() {
                    if (!this._cachedGetSinglePixelWidth) {
                        const jt = (0,
                        a.getCurrentTransform)(this.ctx);
                        if (jt[1] === 0 && jt[2] === 0)
                            this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(jt[0]), Math.abs(jt[3]));
                        else {
                            const xt = Math.abs(jt[0] * jt[3] - jt[2] * jt[1])
                              , Et = Math.hypot(jt[0], jt[2])
                              , Pt = Math.hypot(jt[1], jt[3]);
                            this._cachedGetSinglePixelWidth = Math.max(Et, Pt) / xt
                        }
                    }
                    return this._cachedGetSinglePixelWidth
                }
                getScaleForStroking() {
                    if (this._cachedScaleForStroking[0] === -1) {
                        const {lineWidth: jt} = this.current
                          , {a: xt, b: Et, c: Pt, d: St} = this.ctx.getTransform();
                        let Bt, os;
                        if (Et === 0 && Pt === 0) {
                            const ds = Math.abs(xt)
                              , js = Math.abs(St);
                            if (ds === js)
                                if (jt === 0)
                                    Bt = os = 1 / ds;
                                else {
                                    const ys = ds * jt;
                                    Bt = os = ys < 1 ? 1 / ys : 1
                                }
                            else if (jt === 0)
                                Bt = 1 / ds,
                                os = 1 / js;
                            else {
                                const ys = ds * jt
                                  , vs = js * jt;
                                Bt = ys < 1 ? 1 / ys : 1,
                                os = vs < 1 ? 1 / vs : 1
                            }
                        } else {
                            const ds = Math.abs(xt * St - Et * Pt)
                              , js = Math.hypot(xt, Et)
                              , ys = Math.hypot(Pt, St);
                            if (jt === 0)
                                Bt = ys / ds,
                                os = js / ds;
                            else {
                                const vs = jt * ds;
                                Bt = ys > vs ? ys / vs : 1,
                                os = js > vs ? js / vs : 1
                            }
                        }
                        this._cachedScaleForStroking[0] = Bt,
                        this._cachedScaleForStroking[1] = os
                    }
                    return this._cachedScaleForStroking
                }
                rescaleAndStroke(jt) {
                    const {ctx: xt} = this
                      , {lineWidth: Et} = this.current
                      , [Pt,St] = this.getScaleForStroking();
                    if (xt.lineWidth = Et || 1,
                    Pt === 1 && St === 1) {
                        xt.stroke();
                        return
                    }
                    const Bt = xt.getLineDash();
                    if (jt && xt.save(),
                    xt.scale(Pt, St),
                    Bt.length > 0) {
                        const os = Math.max(Pt, St);
                        xt.setLineDash(Bt.map(ds => ds / os)),
                        xt.lineDashOffset /= os
                    }
                    xt.stroke(),
                    jt && xt.restore()
                }
                isContentVisible() {
                    for (let jt = this.markedContentStack.length - 1; jt >= 0; jt--)
                        if (!this.markedContentStack[jt].visible)
                            return !1;
                    return !0
                }
            }
            ;
            vt = new WeakSet,
            uo = function() {
                for (; this.stateStack.length || this.inSMaskMode; )
                    this.restore();
                this.ctx.restore(),
                this.transparentCanvas && (this.ctx = this.compositeCtx,
                this.ctx.save(),
                this.ctx.setTransform(1, 0, 0, 1, 0, 0),
                this.ctx.drawImage(this.transparentCanvas, 0, 0),
                this.ctx.restore(),
                this.transparentCanvas = null)
            }
            ,
            mo = function() {
                if (this.pageColors) {
                    const jt = this.filterFactory.addHCMFilter(this.pageColors.foreground, this.pageColors.background);
                    if (jt !== "none") {
                        const xt = this.ctx.filter;
                        this.ctx.filter = jt,
                        this.ctx.drawImage(this.ctx.canvas, 0, 0),
                        this.ctx.filter = xt
                    }
                }
            }
            ;
            let kt = Yt;
            e.CanvasGraphics = kt;
            for (const Nt in o.OPS)
                kt.prototype[Nt] !== void 0 && (kt.prototype[o.OPS[Nt]] = kt.prototype[Nt])
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.TilingPattern = e.PathType = void 0,
            e.getShadingPattern = tt;
            var o = i(1)
              , a = i(6);
            const c = {
                FILL: "Fill",
                STROKE: "Stroke",
                SHADING: "Shading"
            };
            e.PathType = c;
            function d(st, nt) {
                if (!nt)
                    return;
                const lt = nt[2] - nt[0]
                  , dt = nt[3] - nt[1]
                  , ot = new Path2D;
                ot.rect(nt[0], nt[1], lt, dt),
                st.clip(ot)
            }
            class h {
                constructor() {
                    this.constructor === h && (0,
                    o.unreachable)("Cannot initialize BaseShadingPattern.")
                }
                getPattern() {
                    (0,
                    o.unreachable)("Abstract method `getPattern` called.")
                }
            }
            class g extends h {
                constructor(nt) {
                    super(),
                    this._type = nt[1],
                    this._bbox = nt[2],
                    this._colorStops = nt[3],
                    this._p0 = nt[4],
                    this._p1 = nt[5],
                    this._r0 = nt[6],
                    this._r1 = nt[7],
                    this.matrix = null
                }
                _createGradient(nt) {
                    let lt;
                    this._type === "axial" ? lt = nt.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]) : this._type === "radial" && (lt = nt.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1));
                    for (const dt of this._colorStops)
                        lt.addColorStop(dt[0], dt[1]);
                    return lt
                }
                getPattern(nt, lt, dt, ot) {
                    let at;
                    if (ot === c.STROKE || ot === c.FILL) {
                        const ht = lt.current.getClippedPathBoundingBox(ot, (0,
                        a.getCurrentTransform)(nt)) || [0, 0, 0, 0]
                          , pt = Math.ceil(ht[2] - ht[0]) || 1
                          , gt = Math.ceil(ht[3] - ht[1]) || 1
                          , wt = lt.cachedCanvases.getCanvas("pattern", pt, gt, !0)
                          , yt = wt.context;
                        yt.clearRect(0, 0, yt.canvas.width, yt.canvas.height),
                        yt.beginPath(),
                        yt.rect(0, 0, yt.canvas.width, yt.canvas.height),
                        yt.translate(-ht[0], -ht[1]),
                        dt = o.Util.transform(dt, [1, 0, 0, 1, ht[0], ht[1]]),
                        yt.transform(...lt.baseTransform),
                        this.matrix && yt.transform(...this.matrix),
                        d(yt, this._bbox),
                        yt.fillStyle = this._createGradient(yt),
                        yt.fill(),
                        at = nt.createPattern(wt.canvas, "no-repeat");
                        const Rt = new DOMMatrix(dt);
                        at.setTransform(Rt)
                    } else
                        d(nt, this._bbox),
                        at = this._createGradient(nt);
                    return at
                }
            }
            function b(st, nt, lt, dt, ot, at, ht, pt) {
                const gt = nt.coords
                  , wt = nt.colors
                  , yt = st.data
                  , Rt = st.width * 4;
                let Mt;
                gt[lt + 1] > gt[dt + 1] && (Mt = lt,
                lt = dt,
                dt = Mt,
                Mt = at,
                at = ht,
                ht = Mt),
                gt[dt + 1] > gt[ot + 1] && (Mt = dt,
                dt = ot,
                ot = Mt,
                Mt = ht,
                ht = pt,
                pt = Mt),
                gt[lt + 1] > gt[dt + 1] && (Mt = lt,
                lt = dt,
                dt = Mt,
                Mt = at,
                at = ht,
                ht = Mt);
                const ss = (gt[lt] + nt.offsetX) * nt.scaleX
                  , zt = (gt[lt + 1] + nt.offsetY) * nt.scaleY
                  , At = (gt[dt] + nt.offsetX) * nt.scaleX
                  , kt = (gt[dt + 1] + nt.offsetY) * nt.scaleY
                  , vt = (gt[ot] + nt.offsetX) * nt.scaleX
                  , bt = (gt[ot + 1] + nt.offsetY) * nt.scaleY;
                if (zt >= bt)
                    return;
                const Tt = wt[at]
                  , Yt = wt[at + 1]
                  , Nt = wt[at + 2]
                  , jt = wt[ht]
                  , xt = wt[ht + 1]
                  , Et = wt[ht + 2]
                  , Pt = wt[pt]
                  , St = wt[pt + 1]
                  , Bt = wt[pt + 2]
                  , os = Math.round(zt)
                  , ds = Math.round(bt);
                let js, ys, vs, Ss, _s, ns, xs, Lt;
                for (let ts = os; ts <= ds; ts++) {
                    if (ts < kt) {
                        const Ts = ts < zt ? 0 : (zt - ts) / (zt - kt);
                        js = ss - (ss - At) * Ts,
                        ys = Tt - (Tt - jt) * Ts,
                        vs = Yt - (Yt - xt) * Ts,
                        Ss = Nt - (Nt - Et) * Ts
                    } else {
                        let Ts;
                        ts > bt ? Ts = 1 : kt === bt ? Ts = 0 : Ts = (kt - ts) / (kt - bt),
                        js = At - (At - vt) * Ts,
                        ys = jt - (jt - Pt) * Ts,
                        vs = xt - (xt - St) * Ts,
                        Ss = Et - (Et - Bt) * Ts
                    }
                    let ms;
                    ts < zt ? ms = 0 : ts > bt ? ms = 1 : ms = (zt - ts) / (zt - bt),
                    _s = ss - (ss - vt) * ms,
                    ns = Tt - (Tt - Pt) * ms,
                    xs = Yt - (Yt - St) * ms,
                    Lt = Nt - (Nt - Bt) * ms;
                    const hs = Math.round(Math.min(js, _s))
                      , bs = Math.round(Math.max(js, _s));
                    let ks = Rt * ts + hs * 4;
                    for (let Ts = hs; Ts <= bs; Ts++)
                        ms = (js - Ts) / (js - _s),
                        ms < 0 ? ms = 0 : ms > 1 && (ms = 1),
                        yt[ks++] = ys - (ys - ns) * ms | 0,
                        yt[ks++] = vs - (vs - xs) * ms | 0,
                        yt[ks++] = Ss - (Ss - Lt) * ms | 0,
                        yt[ks++] = 255
                }
            }
            function _(st, nt, lt) {
                const dt = nt.coords
                  , ot = nt.colors;
                let at, ht;
                switch (nt.type) {
                case "lattice":
                    const pt = nt.verticesPerRow
                      , gt = Math.floor(dt.length / pt) - 1
                      , wt = pt - 1;
                    for (at = 0; at < gt; at++) {
                        let yt = at * pt;
                        for (let Rt = 0; Rt < wt; Rt++,
                        yt++)
                            b(st, lt, dt[yt], dt[yt + 1], dt[yt + pt], ot[yt], ot[yt + 1], ot[yt + pt]),
                            b(st, lt, dt[yt + pt + 1], dt[yt + 1], dt[yt + pt], ot[yt + pt + 1], ot[yt + 1], ot[yt + pt])
                    }
                    break;
                case "triangles":
                    for (at = 0,
                    ht = dt.length; at < ht; at += 3)
                        b(st, lt, dt[at], dt[at + 1], dt[at + 2], ot[at], ot[at + 1], ot[at + 2]);
                    break;
                default:
                    throw new Error("illegal figure")
                }
            }
            class $ extends h {
                constructor(nt) {
                    super(),
                    this._coords = nt[2],
                    this._colors = nt[3],
                    this._figures = nt[4],
                    this._bounds = nt[5],
                    this._bbox = nt[7],
                    this._background = nt[8],
                    this.matrix = null
                }
                _createMeshCanvas(nt, lt, dt) {
                    const pt = Math.floor(this._bounds[0])
                      , gt = Math.floor(this._bounds[1])
                      , wt = Math.ceil(this._bounds[2]) - pt
                      , yt = Math.ceil(this._bounds[3]) - gt
                      , Rt = Math.min(Math.ceil(Math.abs(wt * nt[0] * 1.1)), 3e3)
                      , Mt = Math.min(Math.ceil(Math.abs(yt * nt[1] * 1.1)), 3e3)
                      , ss = wt / Rt
                      , zt = yt / Mt
                      , At = {
                        coords: this._coords,
                        colors: this._colors,
                        offsetX: -pt,
                        offsetY: -gt,
                        scaleX: 1 / ss,
                        scaleY: 1 / zt
                    }
                      , kt = Rt + 2 * 2
                      , vt = Mt + 2 * 2
                      , bt = dt.getCanvas("mesh", kt, vt, !1)
                      , Tt = bt.context
                      , Yt = Tt.createImageData(Rt, Mt);
                    if (lt) {
                        const jt = Yt.data;
                        for (let xt = 0, Et = jt.length; xt < Et; xt += 4)
                            jt[xt] = lt[0],
                            jt[xt + 1] = lt[1],
                            jt[xt + 2] = lt[2],
                            jt[xt + 3] = 255
                    }
                    for (const jt of this._figures)
                        _(Yt, jt, At);
                    return Tt.putImageData(Yt, 2, 2),
                    {
                        canvas: bt.canvas,
                        offsetX: pt - 2 * ss,
                        offsetY: gt - 2 * zt,
                        scaleX: ss,
                        scaleY: zt
                    }
                }
                getPattern(nt, lt, dt, ot) {
                    d(nt, this._bbox);
                    let at;
                    if (ot === c.SHADING)
                        at = o.Util.singularValueDecompose2dScale((0,
                        a.getCurrentTransform)(nt));
                    else if (at = o.Util.singularValueDecompose2dScale(lt.baseTransform),
                    this.matrix) {
                        const pt = o.Util.singularValueDecompose2dScale(this.matrix);
                        at = [at[0] * pt[0], at[1] * pt[1]]
                    }
                    const ht = this._createMeshCanvas(at, ot === c.SHADING ? null : this._background, lt.cachedCanvases);
                    return ot !== c.SHADING && (nt.setTransform(...lt.baseTransform),
                    this.matrix && nt.transform(...this.matrix)),
                    nt.translate(ht.offsetX, ht.offsetY),
                    nt.scale(ht.scaleX, ht.scaleY),
                    nt.createPattern(ht.canvas, "no-repeat")
                }
            }
            class _e extends h {
                getPattern() {
                    return "hotpink"
                }
            }
            function tt(st) {
                switch (st[0]) {
                case "RadialAxial":
                    return new g(st);
                case "Mesh":
                    return new $(st);
                case "Dummy":
                    return new _e
                }
                throw new Error(`Unknown IR type: ${st[0]}`)
            }
            const rt = {
                COLORED: 1,
                UNCOLORED: 2
            }
              , it = class it {
                constructor(nt, lt, dt, ot, at) {
                    this.operatorList = nt[2],
                    this.matrix = nt[3] || [1, 0, 0, 1, 0, 0],
                    this.bbox = nt[4],
                    this.xstep = nt[5],
                    this.ystep = nt[6],
                    this.paintType = nt[7],
                    this.tilingType = nt[8],
                    this.color = lt,
                    this.ctx = dt,
                    this.canvasGraphicsFactory = ot,
                    this.baseTransform = at
                }
                createPatternCanvas(nt) {
                    const lt = this.operatorList
                      , dt = this.bbox
                      , ot = this.xstep
                      , at = this.ystep
                      , ht = this.paintType
                      , pt = this.tilingType
                      , gt = this.color
                      , wt = this.canvasGraphicsFactory;
                    (0,
                    o.info)("TilingType: " + pt);
                    const yt = dt[0]
                      , Rt = dt[1]
                      , Mt = dt[2]
                      , ss = dt[3]
                      , zt = o.Util.singularValueDecompose2dScale(this.matrix)
                      , At = o.Util.singularValueDecompose2dScale(this.baseTransform)
                      , kt = [zt[0] * At[0], zt[1] * At[1]]
                      , vt = this.getSizeAndScale(ot, this.ctx.canvas.width, kt[0])
                      , bt = this.getSizeAndScale(at, this.ctx.canvas.height, kt[1])
                      , Tt = nt.cachedCanvases.getCanvas("pattern", vt.size, bt.size, !0)
                      , Yt = Tt.context
                      , Nt = wt.createCanvasGraphics(Yt);
                    Nt.groupLevel = nt.groupLevel,
                    this.setFillAndStrokeStyleToContext(Nt, ht, gt);
                    let jt = yt
                      , xt = Rt
                      , Et = Mt
                      , Pt = ss;
                    return yt < 0 && (jt = 0,
                    Et += Math.abs(yt)),
                    Rt < 0 && (xt = 0,
                    Pt += Math.abs(Rt)),
                    Yt.translate(-(vt.scale * jt), -(bt.scale * xt)),
                    Nt.transform(vt.scale, 0, 0, bt.scale, 0, 0),
                    Yt.save(),
                    this.clipBbox(Nt, jt, xt, Et, Pt),
                    Nt.baseTransform = (0,
                    a.getCurrentTransform)(Nt.ctx),
                    Nt.executeOperatorList(lt),
                    Nt.endDrawing(),
                    {
                        canvas: Tt.canvas,
                        scaleX: vt.scale,
                        scaleY: bt.scale,
                        offsetX: jt,
                        offsetY: xt
                    }
                }
                getSizeAndScale(nt, lt, dt) {
                    nt = Math.abs(nt);
                    const ot = Math.max(it.MAX_PATTERN_SIZE, lt);
                    let at = Math.ceil(nt * dt);
                    return at >= ot ? at = ot : dt = at / nt,
                    {
                        scale: dt,
                        size: at
                    }
                }
                clipBbox(nt, lt, dt, ot, at) {
                    const ht = ot - lt
                      , pt = at - dt;
                    nt.ctx.rect(lt, dt, ht, pt),
                    nt.current.updateRectMinMax((0,
                    a.getCurrentTransform)(nt.ctx), [lt, dt, ot, at]),
                    nt.clip(),
                    nt.endPath()
                }
                setFillAndStrokeStyleToContext(nt, lt, dt) {
                    const ot = nt.ctx
                      , at = nt.current;
                    switch (lt) {
                    case rt.COLORED:
                        const ht = this.ctx;
                        ot.fillStyle = ht.fillStyle,
                        ot.strokeStyle = ht.strokeStyle,
                        at.fillColor = ht.fillStyle,
                        at.strokeColor = ht.strokeStyle;
                        break;
                    case rt.UNCOLORED:
                        const pt = o.Util.makeHexColor(dt[0], dt[1], dt[2]);
                        ot.fillStyle = pt,
                        ot.strokeStyle = pt,
                        at.fillColor = pt,
                        at.strokeColor = pt;
                        break;
                    default:
                        throw new o.FormatError(`Unsupported paint type: ${lt}`)
                    }
                }
                getPattern(nt, lt, dt, ot) {
                    let at = dt;
                    ot !== c.SHADING && (at = o.Util.transform(at, lt.baseTransform),
                    this.matrix && (at = o.Util.transform(at, this.matrix)));
                    const ht = this.createPatternCanvas(lt);
                    let pt = new DOMMatrix(at);
                    pt = pt.translate(ht.offsetX, ht.offsetY),
                    pt = pt.scale(1 / ht.scaleX, 1 / ht.scaleY);
                    const gt = nt.createPattern(ht.canvas, "repeat");
                    return gt.setTransform(pt),
                    gt
                }
            }
            ;
            tr(it, "MAX_PATTERN_SIZE", 3e3);
            let et = it;
            e.TilingPattern = et
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.convertBlackAndWhiteToRGBA = c,
            e.convertToRGBA = a,
            e.grayToRGBA = h;
            var o = i(1);
            function a(g) {
                switch (g.kind) {
                case o.ImageKind.GRAYSCALE_1BPP:
                    return c(g);
                case o.ImageKind.RGB_24BPP:
                    return d(g)
                }
                return null
            }
            function c({src: g, srcPos: b=0, dest: _, width: $, height: _e, nonBlackColor: tt=4294967295, inverseDecode: rt=!1}) {
                const et = o.FeatureTest.isLittleEndian ? 4278190080 : 255
                  , [it,st] = rt ? [tt, et] : [et, tt]
                  , nt = $ >> 3
                  , lt = $ & 7
                  , dt = g.length;
                _ = new Uint32Array(_.buffer);
                let ot = 0;
                for (let at = 0; at < _e; at++) {
                    for (const pt = b + nt; b < pt; b++) {
                        const gt = b < dt ? g[b] : 255;
                        _[ot++] = gt & 128 ? st : it,
                        _[ot++] = gt & 64 ? st : it,
                        _[ot++] = gt & 32 ? st : it,
                        _[ot++] = gt & 16 ? st : it,
                        _[ot++] = gt & 8 ? st : it,
                        _[ot++] = gt & 4 ? st : it,
                        _[ot++] = gt & 2 ? st : it,
                        _[ot++] = gt & 1 ? st : it
                    }
                    if (lt === 0)
                        continue;
                    const ht = b < dt ? g[b++] : 255;
                    for (let pt = 0; pt < lt; pt++)
                        _[ot++] = ht & 1 << 7 - pt ? st : it
                }
                return {
                    srcPos: b,
                    destPos: ot
                }
            }
            function d({src: g, srcPos: b=0, dest: _, destPos: $=0, width: _e, height: tt}) {
                let rt = 0;
                const et = g.length >> 2
                  , it = new Uint32Array(g.buffer,b,et);
                if (o.FeatureTest.isLittleEndian) {
                    for (; rt < et - 2; rt += 3,
                    $ += 4) {
                        const st = it[rt]
                          , nt = it[rt + 1]
                          , lt = it[rt + 2];
                        _[$] = st | 4278190080,
                        _[$ + 1] = st >>> 24 | nt << 8 | 4278190080,
                        _[$ + 2] = nt >>> 16 | lt << 16 | 4278190080,
                        _[$ + 3] = lt >>> 8 | 4278190080
                    }
                    for (let st = rt * 4, nt = g.length; st < nt; st += 3)
                        _[$++] = g[st] | g[st + 1] << 8 | g[st + 2] << 16 | 4278190080
                } else {
                    for (; rt < et - 2; rt += 3,
                    $ += 4) {
                        const st = it[rt]
                          , nt = it[rt + 1]
                          , lt = it[rt + 2];
                        _[$] = st | 255,
                        _[$ + 1] = st << 24 | nt >>> 8 | 255,
                        _[$ + 2] = nt << 16 | lt >>> 16 | 255,
                        _[$ + 3] = lt << 8 | 255
                    }
                    for (let st = rt * 4, nt = g.length; st < nt; st += 3)
                        _[$++] = g[st] << 24 | g[st + 1] << 16 | g[st + 2] << 8 | 255
                }
                return {
                    srcPos: b,
                    destPos: $
                }
            }
            function h(g, b) {
                if (o.FeatureTest.isLittleEndian)
                    for (let _ = 0, $ = g.length; _ < $; _++)
                        b[_] = g[_] * 65793 | 4278190080;
                else
                    for (let _ = 0, $ = g.length; _ < $; _++)
                        b[_] = g[_] * 16843008 | 255
            }
        }
        , (s, e) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.GlobalWorkerOptions = void 0;
            const i = Object.create(null);
            e.GlobalWorkerOptions = i,
            i.workerPort = null,
            i.workerSrc = ""
        }
        , (s, e, i) => {
            var g, na, xa, In;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.MessageHandler = void 0;
            var o = i(1);
            const a = {
                UNKNOWN: 0,
                DATA: 1,
                ERROR: 2
            }
              , c = {
                UNKNOWN: 0,
                CANCEL: 1,
                CANCEL_COMPLETE: 2,
                CLOSE: 3,
                ENQUEUE: 4,
                ERROR: 5,
                PULL: 6,
                PULL_COMPLETE: 7,
                START_COMPLETE: 8
            };
            function d(_e) {
                switch (_e instanceof Error || typeof _e == "object" && _e !== null || (0,
                o.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),
                _e.name) {
                case "AbortException":
                    return new o.AbortException(_e.message);
                case "MissingPDFException":
                    return new o.MissingPDFException(_e.message);
                case "PasswordException":
                    return new o.PasswordException(_e.message,_e.code);
                case "UnexpectedResponseException":
                    return new o.UnexpectedResponseException(_e.message,_e.status);
                case "UnknownErrorException":
                    return new o.UnknownErrorException(_e.message,_e.details);
                default:
                    return new o.UnknownErrorException(_e.message,_e.toString())
                }
            }
            class h {
                constructor(tt, rt, et) {
                    ps(this, g);
                    this.sourceName = tt,
                    this.targetName = rt,
                    this.comObj = et,
                    this.callbackId = 1,
                    this.streamId = 1,
                    this.streamSinks = Object.create(null),
                    this.streamControllers = Object.create(null),
                    this.callbackCapabilities = Object.create(null),
                    this.actionHandler = Object.create(null),
                    this._onComObjOnMessage = it => {
                        const st = it.data;
                        if (st.targetName !== this.sourceName)
                            return;
                        if (st.stream) {
                            cs(this, g, xa).call(this, st);
                            return
                        }
                        if (st.callback) {
                            const lt = st.callbackId
                              , dt = this.callbackCapabilities[lt];
                            if (!dt)
                                throw new Error(`Cannot resolve callback ${lt}`);
                            if (delete this.callbackCapabilities[lt],
                            st.callback === a.DATA)
                                dt.resolve(st.data);
                            else if (st.callback === a.ERROR)
                                dt.reject(d(st.reason));
                            else
                                throw new Error("Unexpected callback case");
                            return
                        }
                        const nt = this.actionHandler[st.action];
                        if (!nt)
                            throw new Error(`Unknown action from worker: ${st.action}`);
                        if (st.callbackId) {
                            const lt = this.sourceName
                              , dt = st.sourceName;
                            new Promise(function(ot) {
                                ot(nt(st.data))
                            }
                            ).then(function(ot) {
                                et.postMessage({
                                    sourceName: lt,
                                    targetName: dt,
                                    callback: a.DATA,
                                    callbackId: st.callbackId,
                                    data: ot
                                })
                            }, function(ot) {
                                et.postMessage({
                                    sourceName: lt,
                                    targetName: dt,
                                    callback: a.ERROR,
                                    callbackId: st.callbackId,
                                    reason: d(ot)
                                })
                            });
                            return
                        }
                        if (st.streamId) {
                            cs(this, g, na).call(this, st);
                            return
                        }
                        nt(st.data)
                    }
                    ,
                    et.addEventListener("message", this._onComObjOnMessage)
                }
                on(tt, rt) {
                    const et = this.actionHandler;
                    if (et[tt])
                        throw new Error(`There is already an actionName called "${tt}"`);
                    et[tt] = rt
                }
                send(tt, rt, et) {
                    this.comObj.postMessage({
                        sourceName: this.sourceName,
                        targetName: this.targetName,
                        action: tt,
                        data: rt
                    }, et)
                }
                sendWithPromise(tt, rt, et) {
                    const it = this.callbackId++
                      , st = new o.PromiseCapability;
                    this.callbackCapabilities[it] = st;
                    try {
                        this.comObj.postMessage({
                            sourceName: this.sourceName,
                            targetName: this.targetName,
                            action: tt,
                            callbackId: it,
                            data: rt
                        }, et)
                    } catch (nt) {
                        st.reject(nt)
                    }
                    return st.promise
                }
                sendWithStream(tt, rt, et, it) {
                    const st = this.streamId++
                      , nt = this.sourceName
                      , lt = this.targetName
                      , dt = this.comObj;
                    return new ReadableStream({
                        start: ot => {
                            const at = new o.PromiseCapability;
                            return this.streamControllers[st] = {
                                controller: ot,
                                startCall: at,
                                pullCall: null,
                                cancelCall: null,
                                isClosed: !1
                            },
                            dt.postMessage({
                                sourceName: nt,
                                targetName: lt,
                                action: tt,
                                streamId: st,
                                data: rt,
                                desiredSize: ot.desiredSize
                            }, it),
                            at.promise
                        }
                        ,
                        pull: ot => {
                            const at = new o.PromiseCapability;
                            return this.streamControllers[st].pullCall = at,
                            dt.postMessage({
                                sourceName: nt,
                                targetName: lt,
                                stream: c.PULL,
                                streamId: st,
                                desiredSize: ot.desiredSize
                            }),
                            at.promise
                        }
                        ,
                        cancel: ot => {
                            (0,
                            o.assert)(ot instanceof Error, "cancel must have a valid reason");
                            const at = new o.PromiseCapability;
                            return this.streamControllers[st].cancelCall = at,
                            this.streamControllers[st].isClosed = !0,
                            dt.postMessage({
                                sourceName: nt,
                                targetName: lt,
                                stream: c.CANCEL,
                                streamId: st,
                                reason: d(ot)
                            }),
                            at.promise
                        }
                    },et)
                }
                destroy() {
                    this.comObj.removeEventListener("message", this._onComObjOnMessage)
                }
            }
            g = new WeakSet,
            na = function(tt) {
                const rt = tt.streamId
                  , et = this.sourceName
                  , it = tt.sourceName
                  , st = this.comObj
                  , nt = this
                  , lt = this.actionHandler[tt.action]
                  , dt = {
                    enqueue(ot, at=1, ht) {
                        if (this.isCancelled)
                            return;
                        const pt = this.desiredSize;
                        this.desiredSize -= at,
                        pt > 0 && this.desiredSize <= 0 && (this.sinkCapability = new o.PromiseCapability,
                        this.ready = this.sinkCapability.promise),
                        st.postMessage({
                            sourceName: et,
                            targetName: it,
                            stream: c.ENQUEUE,
                            streamId: rt,
                            chunk: ot
                        }, ht)
                    },
                    close() {
                        this.isCancelled || (this.isCancelled = !0,
                        st.postMessage({
                            sourceName: et,
                            targetName: it,
                            stream: c.CLOSE,
                            streamId: rt
                        }),
                        delete nt.streamSinks[rt])
                    },
                    error(ot) {
                        (0,
                        o.assert)(ot instanceof Error, "error must have a valid reason"),
                        !this.isCancelled && (this.isCancelled = !0,
                        st.postMessage({
                            sourceName: et,
                            targetName: it,
                            stream: c.ERROR,
                            streamId: rt,
                            reason: d(ot)
                        }))
                    },
                    sinkCapability: new o.PromiseCapability,
                    onPull: null,
                    onCancel: null,
                    isCancelled: !1,
                    desiredSize: tt.desiredSize,
                    ready: null
                };
                dt.sinkCapability.resolve(),
                dt.ready = dt.sinkCapability.promise,
                this.streamSinks[rt] = dt,
                new Promise(function(ot) {
                    ot(lt(tt.data, dt))
                }
                ).then(function() {
                    st.postMessage({
                        sourceName: et,
                        targetName: it,
                        stream: c.START_COMPLETE,
                        streamId: rt,
                        success: !0
                    })
                }, function(ot) {
                    st.postMessage({
                        sourceName: et,
                        targetName: it,
                        stream: c.START_COMPLETE,
                        streamId: rt,
                        reason: d(ot)
                    })
                })
            }
            ,
            xa = function(tt) {
                const rt = tt.streamId
                  , et = this.sourceName
                  , it = tt.sourceName
                  , st = this.comObj
                  , nt = this.streamControllers[rt]
                  , lt = this.streamSinks[rt];
                switch (tt.stream) {
                case c.START_COMPLETE:
                    tt.success ? nt.startCall.resolve() : nt.startCall.reject(d(tt.reason));
                    break;
                case c.PULL_COMPLETE:
                    tt.success ? nt.pullCall.resolve() : nt.pullCall.reject(d(tt.reason));
                    break;
                case c.PULL:
                    if (!lt) {
                        st.postMessage({
                            sourceName: et,
                            targetName: it,
                            stream: c.PULL_COMPLETE,
                            streamId: rt,
                            success: !0
                        });
                        break
                    }
                    lt.desiredSize <= 0 && tt.desiredSize > 0 && lt.sinkCapability.resolve(),
                    lt.desiredSize = tt.desiredSize,
                    new Promise(function(dt) {
                        var ot;
                        dt((ot = lt.onPull) == null ? void 0 : ot.call(lt))
                    }
                    ).then(function() {
                        st.postMessage({
                            sourceName: et,
                            targetName: it,
                            stream: c.PULL_COMPLETE,
                            streamId: rt,
                            success: !0
                        })
                    }, function(dt) {
                        st.postMessage({
                            sourceName: et,
                            targetName: it,
                            stream: c.PULL_COMPLETE,
                            streamId: rt,
                            reason: d(dt)
                        })
                    });
                    break;
                case c.ENQUEUE:
                    if ((0,
                    o.assert)(nt, "enqueue should have stream controller"),
                    nt.isClosed)
                        break;
                    nt.controller.enqueue(tt.chunk);
                    break;
                case c.CLOSE:
                    if ((0,
                    o.assert)(nt, "close should have stream controller"),
                    nt.isClosed)
                        break;
                    nt.isClosed = !0,
                    nt.controller.close(),
                    cs(this, g, In).call(this, nt, rt);
                    break;
                case c.ERROR:
                    (0,
                    o.assert)(nt, "error should have stream controller"),
                    nt.controller.error(d(tt.reason)),
                    cs(this, g, In).call(this, nt, rt);
                    break;
                case c.CANCEL_COMPLETE:
                    tt.success ? nt.cancelCall.resolve() : nt.cancelCall.reject(d(tt.reason)),
                    cs(this, g, In).call(this, nt, rt);
                    break;
                case c.CANCEL:
                    if (!lt)
                        break;
                    new Promise(function(dt) {
                        var ot;
                        dt((ot = lt.onCancel) == null ? void 0 : ot.call(lt, d(tt.reason)))
                    }
                    ).then(function() {
                        st.postMessage({
                            sourceName: et,
                            targetName: it,
                            stream: c.CANCEL_COMPLETE,
                            streamId: rt,
                            success: !0
                        })
                    }, function(dt) {
                        st.postMessage({
                            sourceName: et,
                            targetName: it,
                            stream: c.CANCEL_COMPLETE,
                            streamId: rt,
                            reason: d(dt)
                        })
                    }),
                    lt.sinkCapability.reject(d(tt.reason)),
                    lt.isCancelled = !0,
                    delete this.streamSinks[rt];
                    break;
                default:
                    throw new Error("Unexpected stream case")
                }
            }
            ,
            In = async function(tt, rt) {
                var et, it, st;
                await Promise.allSettled([(et = tt.startCall) == null ? void 0 : et.promise, (it = tt.pullCall) == null ? void 0 : it.promise, (st = tt.cancelCall) == null ? void 0 : st.promise]),
                delete this.streamControllers[rt]
            }
            ,
            e.MessageHandler = h
        }
        , (s, e, i) => {
            var c, d;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.Metadata = void 0;
            var o = i(1);
            class a {
                constructor({parsedData: g, rawData: b}) {
                    ps(this, c);
                    ps(this, d);
                    us(this, c, g),
                    us(this, d, b)
                }
                getRaw() {
                    return mt(this, d)
                }
                get(g) {
                    return mt(this, c).get(g) ?? null
                }
                getAll() {
                    return (0,
                    o.objectFromMap)(mt(this, c))
                }
                has(g) {
                    return mt(this, c).has(g)
                }
            }
            c = new WeakMap,
            d = new WeakMap,
            e.Metadata = a
        }
        , (s, e, i) => {
            var g, b, _, $, _e, tt, ho;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.OptionalContentConfig = void 0;
            var o = i(1)
              , a = i(8);
            const c = Symbol("INTERNAL");
            class d {
                constructor(it, st) {
                    ps(this, g, !0);
                    this.name = it,
                    this.intent = st
                }
                get visible() {
                    return mt(this, g)
                }
                _setVisible(it, st) {
                    it !== c && (0,
                    o.unreachable)("Internal method `_setVisible` called."),
                    us(this, g, st)
                }
            }
            g = new WeakMap;
            class h {
                constructor(it) {
                    ps(this, tt);
                    ps(this, b, null);
                    ps(this, _, new Map);
                    ps(this, $, null);
                    ps(this, _e, null);
                    if (this.name = null,
                    this.creator = null,
                    it !== null) {
                        this.name = it.name,
                        this.creator = it.creator,
                        us(this, _e, it.order);
                        for (const st of it.groups)
                            mt(this, _).set(st.id, new d(st.name,st.intent));
                        if (it.baseState === "OFF")
                            for (const st of mt(this, _).values())
                                st._setVisible(c, !1);
                        for (const st of it.on)
                            mt(this, _).get(st)._setVisible(c, !0);
                        for (const st of it.off)
                            mt(this, _).get(st)._setVisible(c, !1);
                        us(this, $, this.getHash())
                    }
                }
                isVisible(it) {
                    if (mt(this, _).size === 0)
                        return !0;
                    if (!it)
                        return (0,
                        o.warn)("Optional content group not defined."),
                        !0;
                    if (it.type === "OCG")
                        return mt(this, _).has(it.id) ? mt(this, _).get(it.id).visible : ((0,
                        o.warn)(`Optional content group not found: ${it.id}`),
                        !0);
                    if (it.type === "OCMD") {
                        if (it.expression)
                            return cs(this, tt, ho).call(this, it.expression);
                        if (!it.policy || it.policy === "AnyOn") {
                            for (const st of it.ids) {
                                if (!mt(this, _).has(st))
                                    return (0,
                                    o.warn)(`Optional content group not found: ${st}`),
                                    !0;
                                if (mt(this, _).get(st).visible)
                                    return !0
                            }
                            return !1
                        } else if (it.policy === "AllOn") {
                            for (const st of it.ids) {
                                if (!mt(this, _).has(st))
                                    return (0,
                                    o.warn)(`Optional content group not found: ${st}`),
                                    !0;
                                if (!mt(this, _).get(st).visible)
                                    return !1
                            }
                            return !0
                        } else if (it.policy === "AnyOff") {
                            for (const st of it.ids) {
                                if (!mt(this, _).has(st))
                                    return (0,
                                    o.warn)(`Optional content group not found: ${st}`),
                                    !0;
                                if (!mt(this, _).get(st).visible)
                                    return !0
                            }
                            return !1
                        } else if (it.policy === "AllOff") {
                            for (const st of it.ids) {
                                if (!mt(this, _).has(st))
                                    return (0,
                                    o.warn)(`Optional content group not found: ${st}`),
                                    !0;
                                if (mt(this, _).get(st).visible)
                                    return !1
                            }
                            return !0
                        }
                        return (0,
                        o.warn)(`Unknown optional content policy ${it.policy}.`),
                        !0
                    }
                    return (0,
                    o.warn)(`Unknown group type ${it.type}.`),
                    !0
                }
                setVisibility(it, st=!0) {
                    if (!mt(this, _).has(it)) {
                        (0,
                        o.warn)(`Optional content group not found: ${it}`);
                        return
                    }
                    mt(this, _).get(it)._setVisible(c, !!st),
                    us(this, b, null)
                }
                get hasInitialVisibility() {
                    return mt(this, $) === null || this.getHash() === mt(this, $)
                }
                getOrder() {
                    return mt(this, _).size ? mt(this, _e) ? mt(this, _e).slice() : [...mt(this, _).keys()] : null
                }
                getGroups() {
                    return mt(this, _).size > 0 ? (0,
                    o.objectFromMap)(mt(this, _)) : null
                }
                getGroup(it) {
                    return mt(this, _).get(it) || null
                }
                getHash() {
                    if (mt(this, b) !== null)
                        return mt(this, b);
                    const it = new a.MurmurHash3_64;
                    for (const [st,nt] of mt(this, _))
                        it.update(`${st}:${nt.visible}`);
                    return us(this, b, it.hexdigest())
                }
            }
            b = new WeakMap,
            _ = new WeakMap,
            $ = new WeakMap,
            _e = new WeakMap,
            tt = new WeakSet,
            ho = function(it) {
                const st = it.length;
                if (st < 2)
                    return !0;
                const nt = it[0];
                for (let lt = 1; lt < st; lt++) {
                    const dt = it[lt];
                    let ot;
                    if (Array.isArray(dt))
                        ot = cs(this, tt, ho).call(this, dt);
                    else if (mt(this, _).has(dt))
                        ot = mt(this, _).get(dt).visible;
                    else
                        return (0,
                        o.warn)(`Optional content group not found: ${dt}`),
                        !0;
                    switch (nt) {
                    case "And":
                        if (!ot)
                            return !1;
                        break;
                    case "Or":
                        if (ot)
                            return !0;
                        break;
                    case "Not":
                        return !ot;
                    default:
                        return !0
                    }
                }
                return nt === "And"
            }
            ,
            e.OptionalContentConfig = h
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.PDFDataTransportStream = void 0;
            var o = i(1)
              , a = i(6);
            class c {
                constructor({length: b, initialData: _, progressiveDone: $=!1, contentDispositionFilename: _e=null, disableRange: tt=!1, disableStream: rt=!1}, et) {
                    if ((0,
                    o.assert)(et, 'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),
                    this._queuedChunks = [],
                    this._progressiveDone = $,
                    this._contentDispositionFilename = _e,
                    (_ == null ? void 0 : _.length) > 0) {
                        const it = _ instanceof Uint8Array && _.byteLength === _.buffer.byteLength ? _.buffer : new Uint8Array(_).buffer;
                        this._queuedChunks.push(it)
                    }
                    this._pdfDataRangeTransport = et,
                    this._isStreamingSupported = !rt,
                    this._isRangeSupported = !tt,
                    this._contentLength = b,
                    this._fullRequestReader = null,
                    this._rangeReaders = [],
                    this._pdfDataRangeTransport.addRangeListener( (it, st) => {
                        this._onReceiveData({
                            begin: it,
                            chunk: st
                        })
                    }
                    ),
                    this._pdfDataRangeTransport.addProgressListener( (it, st) => {
                        this._onProgress({
                            loaded: it,
                            total: st
                        })
                    }
                    ),
                    this._pdfDataRangeTransport.addProgressiveReadListener(it => {
                        this._onReceiveData({
                            chunk: it
                        })
                    }
                    ),
                    this._pdfDataRangeTransport.addProgressiveDoneListener( () => {
                        this._onProgressiveDone()
                    }
                    ),
                    this._pdfDataRangeTransport.transportReady()
                }
                _onReceiveData({begin: b, chunk: _}) {
                    const $ = _ instanceof Uint8Array && _.byteLength === _.buffer.byteLength ? _.buffer : new Uint8Array(_).buffer;
                    if (b === void 0)
                        this._fullRequestReader ? this._fullRequestReader._enqueue($) : this._queuedChunks.push($);
                    else {
                        const _e = this._rangeReaders.some(function(tt) {
                            return tt._begin !== b ? !1 : (tt._enqueue($),
                            !0)
                        });
                        (0,
                        o.assert)(_e, "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")
                    }
                }
                get _progressiveDataLength() {
                    var b;
                    return ((b = this._fullRequestReader) == null ? void 0 : b._loaded) ?? 0
                }
                _onProgress(b) {
                    var _, $, _e, tt;
                    b.total === void 0 ? ($ = (_ = this._rangeReaders[0]) == null ? void 0 : _.onProgress) == null || $.call(_, {
                        loaded: b.loaded
                    }) : (tt = (_e = this._fullRequestReader) == null ? void 0 : _e.onProgress) == null || tt.call(_e, {
                        loaded: b.loaded,
                        total: b.total
                    })
                }
                _onProgressiveDone() {
                    var b;
                    (b = this._fullRequestReader) == null || b.progressiveDone(),
                    this._progressiveDone = !0
                }
                _removeRangeReader(b) {
                    const _ = this._rangeReaders.indexOf(b);
                    _ >= 0 && this._rangeReaders.splice(_, 1)
                }
                getFullReader() {
                    (0,
                    o.assert)(!this._fullRequestReader, "PDFDataTransportStream.getFullReader can only be called once.");
                    const b = this._queuedChunks;
                    return this._queuedChunks = null,
                    new d(this,b,this._progressiveDone,this._contentDispositionFilename)
                }
                getRangeReader(b, _) {
                    if (_ <= this._progressiveDataLength)
                        return null;
                    const $ = new h(this,b,_);
                    return this._pdfDataRangeTransport.requestDataRange(b, _),
                    this._rangeReaders.push($),
                    $
                }
                cancelAllRequests(b) {
                    var _;
                    (_ = this._fullRequestReader) == null || _.cancel(b);
                    for (const $ of this._rangeReaders.slice(0))
                        $.cancel(b);
                    this._pdfDataRangeTransport.abort()
                }
            }
            e.PDFDataTransportStream = c;
            class d {
                constructor(b, _, $=!1, _e=null) {
                    this._stream = b,
                    this._done = $ || !1,
                    this._filename = (0,
                    a.isPdfFile)(_e) ? _e : null,
                    this._queuedChunks = _ || [],
                    this._loaded = 0;
                    for (const tt of this._queuedChunks)
                        this._loaded += tt.byteLength;
                    this._requests = [],
                    this._headersReady = Promise.resolve(),
                    b._fullRequestReader = this,
                    this.onProgress = null
                }
                _enqueue(b) {
                    this._done || (this._requests.length > 0 ? this._requests.shift().resolve({
                        value: b,
                        done: !1
                    }) : this._queuedChunks.push(b),
                    this._loaded += b.byteLength)
                }
                get headersReady() {
                    return this._headersReady
                }
                get filename() {
                    return this._filename
                }
                get isRangeSupported() {
                    return this._stream._isRangeSupported
                }
                get isStreamingSupported() {
                    return this._stream._isStreamingSupported
                }
                get contentLength() {
                    return this._stream._contentLength
                }
                async read() {
                    if (this._queuedChunks.length > 0)
                        return {
                            value: this._queuedChunks.shift(),
                            done: !1
                        };
                    if (this._done)
                        return {
                            value: void 0,
                            done: !0
                        };
                    const b = new o.PromiseCapability;
                    return this._requests.push(b),
                    b.promise
                }
                cancel(b) {
                    this._done = !0;
                    for (const _ of this._requests)
                        _.resolve({
                            value: void 0,
                            done: !0
                        });
                    this._requests.length = 0
                }
                progressiveDone() {
                    this._done || (this._done = !0)
                }
            }
            class h {
                constructor(b, _, $) {
                    this._stream = b,
                    this._begin = _,
                    this._end = $,
                    this._queuedChunk = null,
                    this._requests = [],
                    this._done = !1,
                    this.onProgress = null
                }
                _enqueue(b) {
                    if (!this._done) {
                        if (this._requests.length === 0)
                            this._queuedChunk = b;
                        else {
                            this._requests.shift().resolve({
                                value: b,
                                done: !1
                            });
                            for (const $ of this._requests)
                                $.resolve({
                                    value: void 0,
                                    done: !0
                                });
                            this._requests.length = 0
                        }
                        this._done = !0,
                        this._stream._removeRangeReader(this)
                    }
                }
                get isStreamingSupported() {
                    return !1
                }
                async read() {
                    if (this._queuedChunk) {
                        const _ = this._queuedChunk;
                        return this._queuedChunk = null,
                        {
                            value: _,
                            done: !1
                        }
                    }
                    if (this._done)
                        return {
                            value: void 0,
                            done: !0
                        };
                    const b = new o.PromiseCapability;
                    return this._requests.push(b),
                    b.promise
                }
                cancel(b) {
                    this._done = !0;
                    for (const _ of this._requests)
                        _.resolve({
                            value: void 0,
                            done: !0
                        });
                    this._requests.length = 0,
                    this._stream._removeRangeReader(this)
                }
            }
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.PDFFetchStream = void 0;
            var o = i(1)
              , a = i(20);
            function c($, _e, tt) {
                return {
                    method: "GET",
                    headers: $,
                    signal: tt.signal,
                    mode: "cors",
                    credentials: _e ? "include" : "same-origin",
                    redirect: "follow"
                }
            }
            function d($) {
                const _e = new Headers;
                for (const tt in $) {
                    const rt = $[tt];
                    rt !== void 0 && _e.append(tt, rt)
                }
                return _e
            }
            function h($) {
                return $ instanceof Uint8Array ? $.buffer : $ instanceof ArrayBuffer ? $ : ((0,
                o.warn)(`getArrayBuffer - unexpected data format: ${$}`),
                new Uint8Array($).buffer)
            }
            class g {
                constructor(_e) {
                    this.source = _e,
                    this.isHttp = /^https?:/i.test(_e.url),
                    this.httpHeaders = this.isHttp && _e.httpHeaders || {},
                    this._fullRequestReader = null,
                    this._rangeRequestReaders = []
                }
                get _progressiveDataLength() {
                    var _e;
                    return ((_e = this._fullRequestReader) == null ? void 0 : _e._loaded) ?? 0
                }
                getFullReader() {
                    return (0,
                    o.assert)(!this._fullRequestReader, "PDFFetchStream.getFullReader can only be called once."),
                    this._fullRequestReader = new b(this),
                    this._fullRequestReader
                }
                getRangeReader(_e, tt) {
                    if (tt <= this._progressiveDataLength)
                        return null;
                    const rt = new _(this,_e,tt);
                    return this._rangeRequestReaders.push(rt),
                    rt
                }
                cancelAllRequests(_e) {
                    var tt;
                    (tt = this._fullRequestReader) == null || tt.cancel(_e);
                    for (const rt of this._rangeRequestReaders.slice(0))
                        rt.cancel(_e)
                }
            }
            e.PDFFetchStream = g;
            class b {
                constructor(_e) {
                    this._stream = _e,
                    this._reader = null,
                    this._loaded = 0,
                    this._filename = null;
                    const tt = _e.source;
                    this._withCredentials = tt.withCredentials || !1,
                    this._contentLength = tt.length,
                    this._headersCapability = new o.PromiseCapability,
                    this._disableRange = tt.disableRange || !1,
                    this._rangeChunkSize = tt.rangeChunkSize,
                    !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0),
                    this._abortController = new AbortController,
                    this._isStreamingSupported = !tt.disableStream,
                    this._isRangeSupported = !tt.disableRange,
                    this._headers = d(this._stream.httpHeaders);
                    const rt = tt.url;
                    fetch(rt, c(this._headers, this._withCredentials, this._abortController)).then(et => {
                        if (!(0,
                        a.validateResponseStatus)(et.status))
                            throw (0,
                            a.createResponseStatusError)(et.status, rt);
                        this._reader = et.body.getReader(),
                        this._headersCapability.resolve();
                        const it = lt => et.headers.get(lt)
                          , {allowRangeRequests: st, suggestedLength: nt} = (0,
                        a.validateRangeRequestCapabilities)({
                            getResponseHeader: it,
                            isHttp: this._stream.isHttp,
                            rangeChunkSize: this._rangeChunkSize,
                            disableRange: this._disableRange
                        });
                        this._isRangeSupported = st,
                        this._contentLength = nt || this._contentLength,
                        this._filename = (0,
                        a.extractFilenameFromHeader)(it),
                        !this._isStreamingSupported && this._isRangeSupported && this.cancel(new o.AbortException("Streaming is disabled."))
                    }
                    ).catch(this._headersCapability.reject),
                    this.onProgress = null
                }
                get headersReady() {
                    return this._headersCapability.promise
                }
                get filename() {
                    return this._filename
                }
                get contentLength() {
                    return this._contentLength
                }
                get isRangeSupported() {
                    return this._isRangeSupported
                }
                get isStreamingSupported() {
                    return this._isStreamingSupported
                }
                async read() {
                    var rt;
                    await this._headersCapability.promise;
                    const {value: _e, done: tt} = await this._reader.read();
                    return tt ? {
                        value: _e,
                        done: tt
                    } : (this._loaded += _e.byteLength,
                    (rt = this.onProgress) == null || rt.call(this, {
                        loaded: this._loaded,
                        total: this._contentLength
                    }),
                    {
                        value: h(_e),
                        done: !1
                    })
                }
                cancel(_e) {
                    var tt;
                    (tt = this._reader) == null || tt.cancel(_e),
                    this._abortController.abort()
                }
            }
            class _ {
                constructor(_e, tt, rt) {
                    this._stream = _e,
                    this._reader = null,
                    this._loaded = 0;
                    const et = _e.source;
                    this._withCredentials = et.withCredentials || !1,
                    this._readCapability = new o.PromiseCapability,
                    this._isStreamingSupported = !et.disableStream,
                    this._abortController = new AbortController,
                    this._headers = d(this._stream.httpHeaders),
                    this._headers.append("Range", `bytes=${tt}-${rt - 1}`);
                    const it = et.url;
                    fetch(it, c(this._headers, this._withCredentials, this._abortController)).then(st => {
                        if (!(0,
                        a.validateResponseStatus)(st.status))
                            throw (0,
                            a.createResponseStatusError)(st.status, it);
                        this._readCapability.resolve(),
                        this._reader = st.body.getReader()
                    }
                    ).catch(this._readCapability.reject),
                    this.onProgress = null
                }
                get isStreamingSupported() {
                    return this._isStreamingSupported
                }
                async read() {
                    var rt;
                    await this._readCapability.promise;
                    const {value: _e, done: tt} = await this._reader.read();
                    return tt ? {
                        value: _e,
                        done: tt
                    } : (this._loaded += _e.byteLength,
                    (rt = this.onProgress) == null || rt.call(this, {
                        loaded: this._loaded
                    }),
                    {
                        value: h(_e),
                        done: !1
                    })
                }
                cancel(_e) {
                    var tt;
                    (tt = this._reader) == null || tt.cancel(_e),
                    this._abortController.abort()
                }
            }
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.createResponseStatusError = g,
            e.extractFilenameFromHeader = h,
            e.validateRangeRequestCapabilities = d,
            e.validateResponseStatus = b;
            var o = i(1)
              , a = i(21)
              , c = i(6);
            function d({getResponseHeader: _, isHttp: $, rangeChunkSize: _e, disableRange: tt}) {
                const rt = {
                    allowRangeRequests: !1,
                    suggestedLength: void 0
                }
                  , et = parseInt(_("Content-Length"), 10);
                return !Number.isInteger(et) || (rt.suggestedLength = et,
                et <= 2 * _e) || tt || !$ || _("Accept-Ranges") !== "bytes" || (_("Content-Encoding") || "identity") !== "identity" || (rt.allowRangeRequests = !0),
                rt
            }
            function h(_) {
                const $ = _("Content-Disposition");
                if ($) {
                    let _e = (0,
                    a.getFilenameFromContentDispositionHeader)($);
                    if (_e.includes("%"))
                        try {
                            _e = decodeURIComponent(_e)
                        } catch {}
                    if ((0,
                    c.isPdfFile)(_e))
                        return _e
                }
                return null
            }
            function g(_, $) {
                return _ === 404 || _ === 0 && $.startsWith("file:") ? new o.MissingPDFException('Missing PDF "' + $ + '".') : new o.UnexpectedResponseException(`Unexpected server response (${_}) while retrieving PDF "${$}".`,_)
            }
            function b(_) {
                return _ === 200 || _ === 206
            }
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.getFilenameFromContentDispositionHeader = a;
            var o = i(1);
            function a(c) {
                let d = !0
                  , h = g("filename\\*", "i").exec(c);
                if (h) {
                    h = h[1];
                    let et = _e(h);
                    return et = unescape(et),
                    et = tt(et),
                    et = rt(et),
                    _(et)
                }
                if (h = $(c),
                h) {
                    const et = rt(h);
                    return _(et)
                }
                if (h = g("filename", "i").exec(c),
                h) {
                    h = h[1];
                    let et = _e(h);
                    return et = rt(et),
                    _(et)
                }
                function g(et, it) {
                    return new RegExp("(?:^|;)\\s*" + et + '\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',it)
                }
                function b(et, it) {
                    if (et) {
                        if (!/^[\x00-\xFF]+$/.test(it))
                            return it;
                        try {
                            const st = new TextDecoder(et,{
                                fatal: !0
                            })
                              , nt = (0,
                            o.stringToBytes)(it);
                            it = st.decode(nt),
                            d = !1
                        } catch {}
                    }
                    return it
                }
                function _(et) {
                    return d && /[\x80-\xff]/.test(et) && (et = b("utf-8", et),
                    d && (et = b("iso-8859-1", et))),
                    et
                }
                function $(et) {
                    const it = [];
                    let st;
                    const nt = g("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");
                    for (; (st = nt.exec(et)) !== null; ) {
                        let[,dt,ot,at] = st;
                        if (dt = parseInt(dt, 10),
                        dt in it) {
                            if (dt === 0)
                                break;
                            continue
                        }
                        it[dt] = [ot, at]
                    }
                    const lt = [];
                    for (let dt = 0; dt < it.length && dt in it; ++dt) {
                        let[ot,at] = it[dt];
                        at = _e(at),
                        ot && (at = unescape(at),
                        dt === 0 && (at = tt(at))),
                        lt.push(at)
                    }
                    return lt.join("")
                }
                function _e(et) {
                    if (et.startsWith('"')) {
                        const it = et.slice(1).split('\\"');
                        for (let st = 0; st < it.length; ++st) {
                            const nt = it[st].indexOf('"');
                            nt !== -1 && (it[st] = it[st].slice(0, nt),
                            it.length = st + 1),
                            it[st] = it[st].replaceAll(/\\(.)/g, "$1")
                        }
                        et = it.join('"')
                    }
                    return et
                }
                function tt(et) {
                    const it = et.indexOf("'");
                    if (it === -1)
                        return et;
                    const st = et.slice(0, it)
                      , lt = et.slice(it + 1).replace(/^[^']*'/, "");
                    return b(st, lt)
                }
                function rt(et) {
                    return !et.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(et) ? et : et.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, function(it, st, nt, lt) {
                        if (nt === "q" || nt === "Q")
                            return lt = lt.replaceAll("_", " "),
                            lt = lt.replaceAll(/=([0-9a-fA-F]{2})/g, function(dt, ot) {
                                return String.fromCharCode(parseInt(ot, 16))
                            }),
                            b(st, lt);
                        try {
                            lt = atob(lt)
                        } catch {}
                        return b(st, lt)
                    })
                }
                return ""
            }
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.PDFNetworkStream = void 0;
            var o = i(1)
              , a = i(20);
            const c = 200
              , d = 206;
            function h(_e) {
                const tt = _e.response;
                return typeof tt != "string" ? tt : (0,
                o.stringToBytes)(tt).buffer
            }
            class g {
                constructor(tt, rt={}) {
                    this.url = tt,
                    this.isHttp = /^https?:/i.test(tt),
                    this.httpHeaders = this.isHttp && rt.httpHeaders || Object.create(null),
                    this.withCredentials = rt.withCredentials || !1,
                    this.currXhrId = 0,
                    this.pendingRequests = Object.create(null)
                }
                requestRange(tt, rt, et) {
                    const it = {
                        begin: tt,
                        end: rt
                    };
                    for (const st in et)
                        it[st] = et[st];
                    return this.request(it)
                }
                requestFull(tt) {
                    return this.request(tt)
                }
                request(tt) {
                    const rt = new XMLHttpRequest
                      , et = this.currXhrId++
                      , it = this.pendingRequests[et] = {
                        xhr: rt
                    };
                    rt.open("GET", this.url),
                    rt.withCredentials = this.withCredentials;
                    for (const st in this.httpHeaders) {
                        const nt = this.httpHeaders[st];
                        nt !== void 0 && rt.setRequestHeader(st, nt)
                    }
                    return this.isHttp && "begin"in tt && "end"in tt ? (rt.setRequestHeader("Range", `bytes=${tt.begin}-${tt.end - 1}`),
                    it.expectedStatus = d) : it.expectedStatus = c,
                    rt.responseType = "arraybuffer",
                    tt.onError && (rt.onerror = function(st) {
                        tt.onError(rt.status)
                    }
                    ),
                    rt.onreadystatechange = this.onStateChange.bind(this, et),
                    rt.onprogress = this.onProgress.bind(this, et),
                    it.onHeadersReceived = tt.onHeadersReceived,
                    it.onDone = tt.onDone,
                    it.onError = tt.onError,
                    it.onProgress = tt.onProgress,
                    rt.send(null),
                    et
                }
                onProgress(tt, rt) {
                    var it;
                    const et = this.pendingRequests[tt];
                    et && ((it = et.onProgress) == null || it.call(et, rt))
                }
                onStateChange(tt, rt) {
                    var dt, ot, at;
                    const et = this.pendingRequests[tt];
                    if (!et)
                        return;
                    const it = et.xhr;
                    if (it.readyState >= 2 && et.onHeadersReceived && (et.onHeadersReceived(),
                    delete et.onHeadersReceived),
                    it.readyState !== 4 || !(tt in this.pendingRequests))
                        return;
                    if (delete this.pendingRequests[tt],
                    it.status === 0 && this.isHttp) {
                        (dt = et.onError) == null || dt.call(et, it.status);
                        return
                    }
                    const st = it.status || c;
                    if (!(st === c && et.expectedStatus === d) && st !== et.expectedStatus) {
                        (ot = et.onError) == null || ot.call(et, it.status);
                        return
                    }
                    const lt = h(it);
                    if (st === d) {
                        const ht = it.getResponseHeader("Content-Range")
                          , pt = /bytes (\d+)-(\d+)\/(\d+)/.exec(ht);
                        et.onDone({
                            begin: parseInt(pt[1], 10),
                            chunk: lt
                        })
                    } else
                        lt ? et.onDone({
                            begin: 0,
                            chunk: lt
                        }) : (at = et.onError) == null || at.call(et, it.status)
                }
                getRequestXhr(tt) {
                    return this.pendingRequests[tt].xhr
                }
                isPendingRequest(tt) {
                    return tt in this.pendingRequests
                }
                abortRequest(tt) {
                    const rt = this.pendingRequests[tt].xhr;
                    delete this.pendingRequests[tt],
                    rt.abort()
                }
            }
            class b {
                constructor(tt) {
                    this._source = tt,
                    this._manager = new g(tt.url,{
                        httpHeaders: tt.httpHeaders,
                        withCredentials: tt.withCredentials
                    }),
                    this._rangeChunkSize = tt.rangeChunkSize,
                    this._fullRequestReader = null,
                    this._rangeRequestReaders = []
                }
                _onRangeRequestReaderClosed(tt) {
                    const rt = this._rangeRequestReaders.indexOf(tt);
                    rt >= 0 && this._rangeRequestReaders.splice(rt, 1)
                }
                getFullReader() {
                    return (0,
                    o.assert)(!this._fullRequestReader, "PDFNetworkStream.getFullReader can only be called once."),
                    this._fullRequestReader = new _(this._manager,this._source),
                    this._fullRequestReader
                }
                getRangeReader(tt, rt) {
                    const et = new $(this._manager,tt,rt);
                    return et.onClosed = this._onRangeRequestReaderClosed.bind(this),
                    this._rangeRequestReaders.push(et),
                    et
                }
                cancelAllRequests(tt) {
                    var rt;
                    (rt = this._fullRequestReader) == null || rt.cancel(tt);
                    for (const et of this._rangeRequestReaders.slice(0))
                        et.cancel(tt)
                }
            }
            e.PDFNetworkStream = b;
            class _ {
                constructor(tt, rt) {
                    this._manager = tt;
                    const et = {
                        onHeadersReceived: this._onHeadersReceived.bind(this),
                        onDone: this._onDone.bind(this),
                        onError: this._onError.bind(this),
                        onProgress: this._onProgress.bind(this)
                    };
                    this._url = rt.url,
                    this._fullRequestId = tt.requestFull(et),
                    this._headersReceivedCapability = new o.PromiseCapability,
                    this._disableRange = rt.disableRange || !1,
                    this._contentLength = rt.length,
                    this._rangeChunkSize = rt.rangeChunkSize,
                    !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0),
                    this._isStreamingSupported = !1,
                    this._isRangeSupported = !1,
                    this._cachedChunks = [],
                    this._requests = [],
                    this._done = !1,
                    this._storedError = void 0,
                    this._filename = null,
                    this.onProgress = null
                }
                _onHeadersReceived() {
                    const tt = this._fullRequestId
                      , rt = this._manager.getRequestXhr(tt)
                      , et = nt => rt.getResponseHeader(nt)
                      , {allowRangeRequests: it, suggestedLength: st} = (0,
                    a.validateRangeRequestCapabilities)({
                        getResponseHeader: et,
                        isHttp: this._manager.isHttp,
                        rangeChunkSize: this._rangeChunkSize,
                        disableRange: this._disableRange
                    });
                    it && (this._isRangeSupported = !0),
                    this._contentLength = st || this._contentLength,
                    this._filename = (0,
                    a.extractFilenameFromHeader)(et),
                    this._isRangeSupported && this._manager.abortRequest(tt),
                    this._headersReceivedCapability.resolve()
                }
                _onDone(tt) {
                    if (tt && (this._requests.length > 0 ? this._requests.shift().resolve({
                        value: tt.chunk,
                        done: !1
                    }) : this._cachedChunks.push(tt.chunk)),
                    this._done = !0,
                    !(this._cachedChunks.length > 0)) {
                        for (const rt of this._requests)
                            rt.resolve({
                                value: void 0,
                                done: !0
                            });
                        this._requests.length = 0
                    }
                }
                _onError(tt) {
                    this._storedError = (0,
                    a.createResponseStatusError)(tt, this._url),
                    this._headersReceivedCapability.reject(this._storedError);
                    for (const rt of this._requests)
                        rt.reject(this._storedError);
                    this._requests.length = 0,
                    this._cachedChunks.length = 0
                }
                _onProgress(tt) {
                    var rt;
                    (rt = this.onProgress) == null || rt.call(this, {
                        loaded: tt.loaded,
                        total: tt.lengthComputable ? tt.total : this._contentLength
                    })
                }
                get filename() {
                    return this._filename
                }
                get isRangeSupported() {
                    return this._isRangeSupported
                }
                get isStreamingSupported() {
                    return this._isStreamingSupported
                }
                get contentLength() {
                    return this._contentLength
                }
                get headersReady() {
                    return this._headersReceivedCapability.promise
                }
                async read() {
                    if (this._storedError)
                        throw this._storedError;
                    if (this._cachedChunks.length > 0)
                        return {
                            value: this._cachedChunks.shift(),
                            done: !1
                        };
                    if (this._done)
                        return {
                            value: void 0,
                            done: !0
                        };
                    const tt = new o.PromiseCapability;
                    return this._requests.push(tt),
                    tt.promise
                }
                cancel(tt) {
                    this._done = !0,
                    this._headersReceivedCapability.reject(tt);
                    for (const rt of this._requests)
                        rt.resolve({
                            value: void 0,
                            done: !0
                        });
                    this._requests.length = 0,
                    this._manager.isPendingRequest(this._fullRequestId) && this._manager.abortRequest(this._fullRequestId),
                    this._fullRequestReader = null
                }
            }
            class $ {
                constructor(tt, rt, et) {
                    this._manager = tt;
                    const it = {
                        onDone: this._onDone.bind(this),
                        onError: this._onError.bind(this),
                        onProgress: this._onProgress.bind(this)
                    };
                    this._url = tt.url,
                    this._requestId = tt.requestRange(rt, et, it),
                    this._requests = [],
                    this._queuedChunk = null,
                    this._done = !1,
                    this._storedError = void 0,
                    this.onProgress = null,
                    this.onClosed = null
                }
                _close() {
                    var tt;
                    (tt = this.onClosed) == null || tt.call(this, this)
                }
                _onDone(tt) {
                    const rt = tt.chunk;
                    this._requests.length > 0 ? this._requests.shift().resolve({
                        value: rt,
                        done: !1
                    }) : this._queuedChunk = rt,
                    this._done = !0;
                    for (const et of this._requests)
                        et.resolve({
                            value: void 0,
                            done: !0
                        });
                    this._requests.length = 0,
                    this._close()
                }
                _onError(tt) {
                    this._storedError = (0,
                    a.createResponseStatusError)(tt, this._url);
                    for (const rt of this._requests)
                        rt.reject(this._storedError);
                    this._requests.length = 0,
                    this._queuedChunk = null
                }
                _onProgress(tt) {
                    var rt;
                    this.isStreamingSupported || (rt = this.onProgress) == null || rt.call(this, {
                        loaded: tt.loaded
                    })
                }
                get isStreamingSupported() {
                    return !1
                }
                async read() {
                    if (this._storedError)
                        throw this._storedError;
                    if (this._queuedChunk !== null) {
                        const rt = this._queuedChunk;
                        return this._queuedChunk = null,
                        {
                            value: rt,
                            done: !1
                        }
                    }
                    if (this._done)
                        return {
                            value: void 0,
                            done: !0
                        };
                    const tt = new o.PromiseCapability;
                    return this._requests.push(tt),
                    tt.promise
                }
                cancel(tt) {
                    this._done = !0;
                    for (const rt of this._requests)
                        rt.resolve({
                            value: void 0,
                            done: !0
                        });
                    this._requests.length = 0,
                    this._manager.isPendingRequest(this._requestId) && this._manager.abortRequest(this._requestId),
                    this._close()
                }
            }
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.PDFNodeStream = void 0;
            var o = i(1)
              , a = i(20);
            const c = /^file:\/\/\/[a-zA-Z]:\//;
            function d(et) {
                const it = require$$5
                  , st = it.parse(et);
                return st.protocol === "file:" || st.host ? st : /^[a-z]:[/\\]/i.test(et) ? it.parse(`file:///${et}`) : (st.host || (st.protocol = "file:"),
                st)
            }
            class h {
                constructor(it) {
                    this.source = it,
                    this.url = d(it.url),
                    this.isHttp = this.url.protocol === "http:" || this.url.protocol === "https:",
                    this.isFsUrl = this.url.protocol === "file:",
                    this.httpHeaders = this.isHttp && it.httpHeaders || {},
                    this._fullRequestReader = null,
                    this._rangeRequestReaders = []
                }
                get _progressiveDataLength() {
                    var it;
                    return ((it = this._fullRequestReader) == null ? void 0 : it._loaded) ?? 0
                }
                getFullReader() {
                    return (0,
                    o.assert)(!this._fullRequestReader, "PDFNodeStream.getFullReader can only be called once."),
                    this._fullRequestReader = this.isFsUrl ? new tt(this) : new $(this),
                    this._fullRequestReader
                }
                getRangeReader(it, st) {
                    if (st <= this._progressiveDataLength)
                        return null;
                    const nt = this.isFsUrl ? new rt(this,it,st) : new _e(this,it,st);
                    return this._rangeRequestReaders.push(nt),
                    nt
                }
                cancelAllRequests(it) {
                    var st;
                    (st = this._fullRequestReader) == null || st.cancel(it);
                    for (const nt of this._rangeRequestReaders.slice(0))
                        nt.cancel(it)
                }
            }
            e.PDFNodeStream = h;
            class g {
                constructor(it) {
                    this._url = it.url,
                    this._done = !1,
                    this._storedError = null,
                    this.onProgress = null;
                    const st = it.source;
                    this._contentLength = st.length,
                    this._loaded = 0,
                    this._filename = null,
                    this._disableRange = st.disableRange || !1,
                    this._rangeChunkSize = st.rangeChunkSize,
                    !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0),
                    this._isStreamingSupported = !st.disableStream,
                    this._isRangeSupported = !st.disableRange,
                    this._readableStream = null,
                    this._readCapability = new o.PromiseCapability,
                    this._headersCapability = new o.PromiseCapability
                }
                get headersReady() {
                    return this._headersCapability.promise
                }
                get filename() {
                    return this._filename
                }
                get contentLength() {
                    return this._contentLength
                }
                get isRangeSupported() {
                    return this._isRangeSupported
                }
                get isStreamingSupported() {
                    return this._isStreamingSupported
                }
                async read() {
                    var nt;
                    if (await this._readCapability.promise,
                    this._done)
                        return {
                            value: void 0,
                            done: !0
                        };
                    if (this._storedError)
                        throw this._storedError;
                    const it = this._readableStream.read();
                    return it === null ? (this._readCapability = new o.PromiseCapability,
                    this.read()) : (this._loaded += it.length,
                    (nt = this.onProgress) == null || nt.call(this, {
                        loaded: this._loaded,
                        total: this._contentLength
                    }),
                    {
                        value: new Uint8Array(it).buffer,
                        done: !1
                    })
                }
                cancel(it) {
                    if (!this._readableStream) {
                        this._error(it);
                        return
                    }
                    this._readableStream.destroy(it)
                }
                _error(it) {
                    this._storedError = it,
                    this._readCapability.resolve()
                }
                _setReadableStream(it) {
                    this._readableStream = it,
                    it.on("readable", () => {
                        this._readCapability.resolve()
                    }
                    ),
                    it.on("end", () => {
                        it.destroy(),
                        this._done = !0,
                        this._readCapability.resolve()
                    }
                    ),
                    it.on("error", st => {
                        this._error(st)
                    }
                    ),
                    !this._isStreamingSupported && this._isRangeSupported && this._error(new o.AbortException("streaming is disabled")),
                    this._storedError && this._readableStream.destroy(this._storedError)
                }
            }
            class b {
                constructor(it) {
                    this._url = it.url,
                    this._done = !1,
                    this._storedError = null,
                    this.onProgress = null,
                    this._loaded = 0,
                    this._readableStream = null,
                    this._readCapability = new o.PromiseCapability;
                    const st = it.source;
                    this._isStreamingSupported = !st.disableStream
                }
                get isStreamingSupported() {
                    return this._isStreamingSupported
                }
                async read() {
                    var nt;
                    if (await this._readCapability.promise,
                    this._done)
                        return {
                            value: void 0,
                            done: !0
                        };
                    if (this._storedError)
                        throw this._storedError;
                    const it = this._readableStream.read();
                    return it === null ? (this._readCapability = new o.PromiseCapability,
                    this.read()) : (this._loaded += it.length,
                    (nt = this.onProgress) == null || nt.call(this, {
                        loaded: this._loaded
                    }),
                    {
                        value: new Uint8Array(it).buffer,
                        done: !1
                    })
                }
                cancel(it) {
                    if (!this._readableStream) {
                        this._error(it);
                        return
                    }
                    this._readableStream.destroy(it)
                }
                _error(it) {
                    this._storedError = it,
                    this._readCapability.resolve()
                }
                _setReadableStream(it) {
                    this._readableStream = it,
                    it.on("readable", () => {
                        this._readCapability.resolve()
                    }
                    ),
                    it.on("end", () => {
                        it.destroy(),
                        this._done = !0,
                        this._readCapability.resolve()
                    }
                    ),
                    it.on("error", st => {
                        this._error(st)
                    }
                    ),
                    this._storedError && this._readableStream.destroy(this._storedError)
                }
            }
            function _(et, it) {
                return {
                    protocol: et.protocol,
                    auth: et.auth,
                    host: et.hostname,
                    port: et.port,
                    path: et.path,
                    method: "GET",
                    headers: it
                }
            }
            class $ extends g {
                constructor(it) {
                    super(it);
                    const st = nt => {
                        if (nt.statusCode === 404) {
                            const at = new o.MissingPDFException(`Missing PDF "${this._url}".`);
                            this._storedError = at,
                            this._headersCapability.reject(at);
                            return
                        }
                        this._headersCapability.resolve(),
                        this._setReadableStream(nt);
                        const lt = at => this._readableStream.headers[at.toLowerCase()]
                          , {allowRangeRequests: dt, suggestedLength: ot} = (0,
                        a.validateRangeRequestCapabilities)({
                            getResponseHeader: lt,
                            isHttp: it.isHttp,
                            rangeChunkSize: this._rangeChunkSize,
                            disableRange: this._disableRange
                        });
                        this._isRangeSupported = dt,
                        this._contentLength = ot || this._contentLength,
                        this._filename = (0,
                        a.extractFilenameFromHeader)(lt)
                    }
                    ;
                    if (this._request = null,
                    this._url.protocol === "http:") {
                        const nt = require$$5;
                        this._request = nt.request(_(this._url, it.httpHeaders), st)
                    } else {
                        const nt = require$$5;
                        this._request = nt.request(_(this._url, it.httpHeaders), st)
                    }
                    this._request.on("error", nt => {
                        this._storedError = nt,
                        this._headersCapability.reject(nt)
                    }
                    ),
                    this._request.end()
                }
            }
            class _e extends b {
                constructor(it, st, nt) {
                    super(it),
                    this._httpHeaders = {};
                    for (const dt in it.httpHeaders) {
                        const ot = it.httpHeaders[dt];
                        ot !== void 0 && (this._httpHeaders[dt] = ot)
                    }
                    this._httpHeaders.Range = `bytes=${st}-${nt - 1}`;
                    const lt = dt => {
                        if (dt.statusCode === 404) {
                            const ot = new o.MissingPDFException(`Missing PDF "${this._url}".`);
                            this._storedError = ot;
                            return
                        }
                        this._setReadableStream(dt)
                    }
                    ;
                    if (this._request = null,
                    this._url.protocol === "http:") {
                        const dt = require$$5;
                        this._request = dt.request(_(this._url, this._httpHeaders), lt)
                    } else {
                        const dt = require$$5;
                        this._request = dt.request(_(this._url, this._httpHeaders), lt)
                    }
                    this._request.on("error", dt => {
                        this._storedError = dt
                    }
                    ),
                    this._request.end()
                }
            }
            class tt extends g {
                constructor(it) {
                    super(it);
                    let st = decodeURIComponent(this._url.path);
                    c.test(this._url.href) && (st = st.replace(/^\//, ""));
                    const nt = require$$5;
                    nt.lstat(st, (lt, dt) => {
                        if (lt) {
                            lt.code === "ENOENT" && (lt = new o.MissingPDFException(`Missing PDF "${st}".`)),
                            this._storedError = lt,
                            this._headersCapability.reject(lt);
                            return
                        }
                        this._contentLength = dt.size,
                        this._setReadableStream(nt.createReadStream(st)),
                        this._headersCapability.resolve()
                    }
                    )
                }
            }
            class rt extends b {
                constructor(it, st, nt) {
                    super(it);
                    let lt = decodeURIComponent(this._url.path);
                    c.test(this._url.href) && (lt = lt.replace(/^\//, ""));
                    const dt = require$$5;
                    this._setReadableStream(dt.createReadStream(lt, {
                        start: st,
                        end: nt - 1
                    }))
                }
            }
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.SVGGraphics = void 0;
            var o = i(6)
              , a = i(1);
            const c = {
                fontStyle: "normal",
                fontWeight: "normal",
                fillColor: "#000000"
            }
              , d = "http://www.w3.org/XML/1998/namespace"
              , h = "http://www.w3.org/1999/xlink"
              , g = ["butt", "round", "square"]
              , b = ["miter", "round", "bevel"]
              , _ = function(dt, ot="", at=!1) {
                if (URL.createObjectURL && typeof Blob < "u" && !at)
                    return URL.createObjectURL(new Blob([dt],{
                        type: ot
                    }));
                const ht = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
                let pt = `data:${ot};base64,`;
                for (let gt = 0, wt = dt.length; gt < wt; gt += 3) {
                    const yt = dt[gt] & 255
                      , Rt = dt[gt + 1] & 255
                      , Mt = dt[gt + 2] & 255
                      , ss = yt >> 2
                      , zt = (yt & 3) << 4 | Rt >> 4
                      , At = gt + 1 < wt ? (Rt & 15) << 2 | Mt >> 6 : 64
                      , kt = gt + 2 < wt ? Mt & 63 : 64;
                    pt += ht[ss] + ht[zt] + ht[At] + ht[kt]
                }
                return pt
            }
              , $ = function() {
                const dt = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10])
                  , ot = 12
                  , at = new Int32Array(256);
                for (let Mt = 0; Mt < 256; Mt++) {
                    let ss = Mt;
                    for (let zt = 0; zt < 8; zt++)
                        ss = ss & 1 ? 3988292384 ^ ss >> 1 & 2147483647 : ss >> 1 & 2147483647;
                    at[Mt] = ss
                }
                function ht(Mt, ss, zt) {
                    let At = -1;
                    for (let kt = ss; kt < zt; kt++) {
                        const vt = (At ^ Mt[kt]) & 255
                          , bt = at[vt];
                        At = At >>> 8 ^ bt
                    }
                    return At ^ -1
                }
                function pt(Mt, ss, zt, At) {
                    let kt = At;
                    const vt = ss.length;
                    zt[kt] = vt >> 24 & 255,
                    zt[kt + 1] = vt >> 16 & 255,
                    zt[kt + 2] = vt >> 8 & 255,
                    zt[kt + 3] = vt & 255,
                    kt += 4,
                    zt[kt] = Mt.charCodeAt(0) & 255,
                    zt[kt + 1] = Mt.charCodeAt(1) & 255,
                    zt[kt + 2] = Mt.charCodeAt(2) & 255,
                    zt[kt + 3] = Mt.charCodeAt(3) & 255,
                    kt += 4,
                    zt.set(ss, kt),
                    kt += ss.length;
                    const bt = ht(zt, At + 4, kt);
                    zt[kt] = bt >> 24 & 255,
                    zt[kt + 1] = bt >> 16 & 255,
                    zt[kt + 2] = bt >> 8 & 255,
                    zt[kt + 3] = bt & 255
                }
                function gt(Mt, ss, zt) {
                    let At = 1
                      , kt = 0;
                    for (let vt = ss; vt < zt; ++vt)
                        At = (At + (Mt[vt] & 255)) % 65521,
                        kt = (kt + At) % 65521;
                    return kt << 16 | At
                }
                function wt(Mt) {
                    if (!a.isNodeJS)
                        return yt(Mt);
                    try {
                        const ss = parseInt(process.versions.node) >= 8 ? Mt : Buffer.from(Mt)
                          , zt = require$$5.deflateSync(ss, {
                            level: 9
                        });
                        return zt instanceof Uint8Array ? zt : new Uint8Array(zt)
                    } catch (ss) {
                        (0,
                        a.warn)("Not compressing PNG because zlib.deflateSync is unavailable: " + ss)
                    }
                    return yt(Mt)
                }
                function yt(Mt) {
                    let ss = Mt.length;
                    const zt = 65535
                      , At = Math.ceil(ss / zt)
                      , kt = new Uint8Array(2 + ss + At * 5 + 4);
                    let vt = 0;
                    kt[vt++] = 120,
                    kt[vt++] = 156;
                    let bt = 0;
                    for (; ss > zt; )
                        kt[vt++] = 0,
                        kt[vt++] = 255,
                        kt[vt++] = 255,
                        kt[vt++] = 0,
                        kt[vt++] = 0,
                        kt.set(Mt.subarray(bt, bt + zt), vt),
                        vt += zt,
                        bt += zt,
                        ss -= zt;
                    kt[vt++] = 1,
                    kt[vt++] = ss & 255,
                    kt[vt++] = ss >> 8 & 255,
                    kt[vt++] = ~ss & 65535 & 255,
                    kt[vt++] = (~ss & 65535) >> 8 & 255,
                    kt.set(Mt.subarray(bt), vt),
                    vt += Mt.length - bt;
                    const Tt = gt(Mt, 0, Mt.length);
                    return kt[vt++] = Tt >> 24 & 255,
                    kt[vt++] = Tt >> 16 & 255,
                    kt[vt++] = Tt >> 8 & 255,
                    kt[vt++] = Tt & 255,
                    kt
                }
                function Rt(Mt, ss, zt, At) {
                    const kt = Mt.width
                      , vt = Mt.height;
                    let bt, Tt, Yt;
                    const Nt = Mt.data;
                    switch (ss) {
                    case a.ImageKind.GRAYSCALE_1BPP:
                        Tt = 0,
                        bt = 1,
                        Yt = kt + 7 >> 3;
                        break;
                    case a.ImageKind.RGB_24BPP:
                        Tt = 2,
                        bt = 8,
                        Yt = kt * 3;
                        break;
                    case a.ImageKind.RGBA_32BPP:
                        Tt = 6,
                        bt = 8,
                        Yt = kt * 4;
                        break;
                    default:
                        throw new Error("invalid format")
                    }
                    const jt = new Uint8Array((1 + Yt) * vt);
                    let xt = 0
                      , Et = 0;
                    for (let js = 0; js < vt; ++js)
                        jt[xt++] = 0,
                        jt.set(Nt.subarray(Et, Et + Yt), xt),
                        Et += Yt,
                        xt += Yt;
                    if (ss === a.ImageKind.GRAYSCALE_1BPP && At) {
                        xt = 0;
                        for (let js = 0; js < vt; js++) {
                            xt++;
                            for (let ys = 0; ys < Yt; ys++)
                                jt[xt++] ^= 255
                        }
                    }
                    const Pt = new Uint8Array([kt >> 24 & 255, kt >> 16 & 255, kt >> 8 & 255, kt & 255, vt >> 24 & 255, vt >> 16 & 255, vt >> 8 & 255, vt & 255, bt, Tt, 0, 0, 0])
                      , St = wt(jt)
                      , Bt = dt.length + ot * 3 + Pt.length + St.length
                      , os = new Uint8Array(Bt);
                    let ds = 0;
                    return os.set(dt, ds),
                    ds += dt.length,
                    pt("IHDR", Pt, os, ds),
                    ds += ot + Pt.length,
                    pt("IDATA", St, os, ds),
                    ds += ot + St.length,
                    pt("IEND", new Uint8Array(0), os, ds),
                    _(os, "image/png", zt)
                }
                return function(ss, zt, At) {
                    const kt = ss.kind === void 0 ? a.ImageKind.GRAYSCALE_1BPP : ss.kind;
                    return Rt(ss, kt, zt, At)
                }
            }();
            class _e {
                constructor() {
                    this.fontSizeScale = 1,
                    this.fontWeight = c.fontWeight,
                    this.fontSize = 0,
                    this.textMatrix = a.IDENTITY_MATRIX,
                    this.fontMatrix = a.FONT_IDENTITY_MATRIX,
                    this.leading = 0,
                    this.textRenderingMode = a.TextRenderingMode.FILL,
                    this.textMatrixScale = 1,
                    this.x = 0,
                    this.y = 0,
                    this.lineX = 0,
                    this.lineY = 0,
                    this.charSpacing = 0,
                    this.wordSpacing = 0,
                    this.textHScale = 1,
                    this.textRise = 0,
                    this.fillColor = c.fillColor,
                    this.strokeColor = "#000000",
                    this.fillAlpha = 1,
                    this.strokeAlpha = 1,
                    this.lineWidth = 1,
                    this.lineJoin = "",
                    this.lineCap = "",
                    this.miterLimit = 0,
                    this.dashArray = [],
                    this.dashPhase = 0,
                    this.dependencies = [],
                    this.activeClipUrl = null,
                    this.clipGroup = null,
                    this.maskId = ""
                }
                clone() {
                    return Object.create(this)
                }
                setCurrentPoint(ot, at) {
                    this.x = ot,
                    this.y = at
                }
            }
            function tt(dt) {
                let ot = [];
                const at = [];
                for (const ht of dt) {
                    if (ht.fn === "save") {
                        ot.push({
                            fnId: 92,
                            fn: "group",
                            items: []
                        }),
                        at.push(ot),
                        ot = ot.at(-1).items;
                        continue
                    }
                    ht.fn === "restore" ? ot = at.pop() : ot.push(ht)
                }
                return ot
            }
            function rt(dt) {
                if (Number.isInteger(dt))
                    return dt.toString();
                const ot = dt.toFixed(10);
                let at = ot.length - 1;
                if (ot[at] !== "0")
                    return ot;
                do
                    at--;
                while (ot[at] === "0");
                return ot.substring(0, ot[at] === "." ? at : at + 1)
            }
            function et(dt) {
                if (dt[4] === 0 && dt[5] === 0) {
                    if (dt[1] === 0 && dt[2] === 0)
                        return dt[0] === 1 && dt[3] === 1 ? "" : `scale(${rt(dt[0])} ${rt(dt[3])})`;
                    if (dt[0] === dt[3] && dt[1] === -dt[2]) {
                        const ot = Math.acos(dt[0]) * 180 / Math.PI;
                        return `rotate(${rt(ot)})`
                    }
                } else if (dt[0] === 1 && dt[1] === 0 && dt[2] === 0 && dt[3] === 1)
                    return `translate(${rt(dt[4])} ${rt(dt[5])})`;
                return `matrix(${rt(dt[0])} ${rt(dt[1])} ${rt(dt[2])} ${rt(dt[3])} ${rt(dt[4])} ${rt(dt[5])})`
            }
            let it = 0
              , st = 0
              , nt = 0;
            class lt {
                constructor(ot, at, ht=!1) {
                    (0,
                    o.deprecated)("The SVG back-end is no longer maintained and *may* be removed in the future."),
                    this.svgFactory = new o.DOMSVGFactory,
                    this.current = new _e,
                    this.transformMatrix = a.IDENTITY_MATRIX,
                    this.transformStack = [],
                    this.extraStack = [],
                    this.commonObjs = ot,
                    this.objs = at,
                    this.pendingClip = null,
                    this.pendingEOFill = !1,
                    this.embedFonts = !1,
                    this.embeddedFonts = Object.create(null),
                    this.cssStyle = null,
                    this.forceDataSchema = !!ht,
                    this._operatorIdMapping = [];
                    for (const pt in a.OPS)
                        this._operatorIdMapping[a.OPS[pt]] = pt
                }
                getObject(ot, at=null) {
                    return typeof ot == "string" ? ot.startsWith("g_") ? this.commonObjs.get(ot) : this.objs.get(ot) : at
                }
                save() {
                    this.transformStack.push(this.transformMatrix);
                    const ot = this.current;
                    this.extraStack.push(ot),
                    this.current = ot.clone()
                }
                restore() {
                    this.transformMatrix = this.transformStack.pop(),
                    this.current = this.extraStack.pop(),
                    this.pendingClip = null,
                    this.tgrp = null
                }
                group(ot) {
                    this.save(),
                    this.executeOpTree(ot),
                    this.restore()
                }
                loadDependencies(ot) {
                    const at = ot.fnArray
                      , ht = ot.argsArray;
                    for (let pt = 0, gt = at.length; pt < gt; pt++)
                        if (at[pt] === a.OPS.dependency)
                            for (const wt of ht[pt]) {
                                const yt = wt.startsWith("g_") ? this.commonObjs : this.objs
                                  , Rt = new Promise(Mt => {
                                    yt.get(wt, Mt)
                                }
                                );
                                this.current.dependencies.push(Rt)
                            }
                    return Promise.all(this.current.dependencies)
                }
                transform(ot, at, ht, pt, gt, wt) {
                    const yt = [ot, at, ht, pt, gt, wt];
                    this.transformMatrix = a.Util.transform(this.transformMatrix, yt),
                    this.tgrp = null
                }
                getSVG(ot, at) {
                    this.viewport = at;
                    const ht = this._initialize(at);
                    return this.loadDependencies(ot).then( () => (this.transformMatrix = a.IDENTITY_MATRIX,
                    this.executeOpTree(this.convertOpList(ot)),
                    ht))
                }
                convertOpList(ot) {
                    const at = this._operatorIdMapping
                      , ht = ot.argsArray
                      , pt = ot.fnArray
                      , gt = [];
                    for (let wt = 0, yt = pt.length; wt < yt; wt++) {
                        const Rt = pt[wt];
                        gt.push({
                            fnId: Rt,
                            fn: at[Rt],
                            args: ht[wt]
                        })
                    }
                    return tt(gt)
                }
                executeOpTree(ot) {
                    for (const at of ot) {
                        const ht = at.fn
                          , pt = at.fnId
                          , gt = at.args;
                        switch (pt | 0) {
                        case a.OPS.beginText:
                            this.beginText();
                            break;
                        case a.OPS.dependency:
                            break;
                        case a.OPS.setLeading:
                            this.setLeading(gt);
                            break;
                        case a.OPS.setLeadingMoveText:
                            this.setLeadingMoveText(gt[0], gt[1]);
                            break;
                        case a.OPS.setFont:
                            this.setFont(gt);
                            break;
                        case a.OPS.showText:
                            this.showText(gt[0]);
                            break;
                        case a.OPS.showSpacedText:
                            this.showText(gt[0]);
                            break;
                        case a.OPS.endText:
                            this.endText();
                            break;
                        case a.OPS.moveText:
                            this.moveText(gt[0], gt[1]);
                            break;
                        case a.OPS.setCharSpacing:
                            this.setCharSpacing(gt[0]);
                            break;
                        case a.OPS.setWordSpacing:
                            this.setWordSpacing(gt[0]);
                            break;
                        case a.OPS.setHScale:
                            this.setHScale(gt[0]);
                            break;
                        case a.OPS.setTextMatrix:
                            this.setTextMatrix(gt[0], gt[1], gt[2], gt[3], gt[4], gt[5]);
                            break;
                        case a.OPS.setTextRise:
                            this.setTextRise(gt[0]);
                            break;
                        case a.OPS.setTextRenderingMode:
                            this.setTextRenderingMode(gt[0]);
                            break;
                        case a.OPS.setLineWidth:
                            this.setLineWidth(gt[0]);
                            break;
                        case a.OPS.setLineJoin:
                            this.setLineJoin(gt[0]);
                            break;
                        case a.OPS.setLineCap:
                            this.setLineCap(gt[0]);
                            break;
                        case a.OPS.setMiterLimit:
                            this.setMiterLimit(gt[0]);
                            break;
                        case a.OPS.setFillRGBColor:
                            this.setFillRGBColor(gt[0], gt[1], gt[2]);
                            break;
                        case a.OPS.setStrokeRGBColor:
                            this.setStrokeRGBColor(gt[0], gt[1], gt[2]);
                            break;
                        case a.OPS.setStrokeColorN:
                            this.setStrokeColorN(gt);
                            break;
                        case a.OPS.setFillColorN:
                            this.setFillColorN(gt);
                            break;
                        case a.OPS.shadingFill:
                            this.shadingFill(gt[0]);
                            break;
                        case a.OPS.setDash:
                            this.setDash(gt[0], gt[1]);
                            break;
                        case a.OPS.setRenderingIntent:
                            this.setRenderingIntent(gt[0]);
                            break;
                        case a.OPS.setFlatness:
                            this.setFlatness(gt[0]);
                            break;
                        case a.OPS.setGState:
                            this.setGState(gt[0]);
                            break;
                        case a.OPS.fill:
                            this.fill();
                            break;
                        case a.OPS.eoFill:
                            this.eoFill();
                            break;
                        case a.OPS.stroke:
                            this.stroke();
                            break;
                        case a.OPS.fillStroke:
                            this.fillStroke();
                            break;
                        case a.OPS.eoFillStroke:
                            this.eoFillStroke();
                            break;
                        case a.OPS.clip:
                            this.clip("nonzero");
                            break;
                        case a.OPS.eoClip:
                            this.clip("evenodd");
                            break;
                        case a.OPS.paintSolidColorImageMask:
                            this.paintSolidColorImageMask();
                            break;
                        case a.OPS.paintImageXObject:
                            this.paintImageXObject(gt[0]);
                            break;
                        case a.OPS.paintInlineImageXObject:
                            this.paintInlineImageXObject(gt[0]);
                            break;
                        case a.OPS.paintImageMaskXObject:
                            this.paintImageMaskXObject(gt[0]);
                            break;
                        case a.OPS.paintFormXObjectBegin:
                            this.paintFormXObjectBegin(gt[0], gt[1]);
                            break;
                        case a.OPS.paintFormXObjectEnd:
                            this.paintFormXObjectEnd();
                            break;
                        case a.OPS.closePath:
                            this.closePath();
                            break;
                        case a.OPS.closeStroke:
                            this.closeStroke();
                            break;
                        case a.OPS.closeFillStroke:
                            this.closeFillStroke();
                            break;
                        case a.OPS.closeEOFillStroke:
                            this.closeEOFillStroke();
                            break;
                        case a.OPS.nextLine:
                            this.nextLine();
                            break;
                        case a.OPS.transform:
                            this.transform(gt[0], gt[1], gt[2], gt[3], gt[4], gt[5]);
                            break;
                        case a.OPS.constructPath:
                            this.constructPath(gt[0], gt[1]);
                            break;
                        case a.OPS.endPath:
                            this.endPath();
                            break;
                        case 92:
                            this.group(at.items);
                            break;
                        default:
                            (0,
                            a.warn)(`Unimplemented operator ${ht}`);
                            break
                        }
                    }
                }
                setWordSpacing(ot) {
                    this.current.wordSpacing = ot
                }
                setCharSpacing(ot) {
                    this.current.charSpacing = ot
                }
                nextLine() {
                    this.moveText(0, this.current.leading)
                }
                setTextMatrix(ot, at, ht, pt, gt, wt) {
                    const yt = this.current;
                    yt.textMatrix = yt.lineMatrix = [ot, at, ht, pt, gt, wt],
                    yt.textMatrixScale = Math.hypot(ot, at),
                    yt.x = yt.lineX = 0,
                    yt.y = yt.lineY = 0,
                    yt.xcoords = [],
                    yt.ycoords = [],
                    yt.tspan = this.svgFactory.createElement("svg:tspan"),
                    yt.tspan.setAttributeNS(null, "font-family", yt.fontFamily),
                    yt.tspan.setAttributeNS(null, "font-size", `${rt(yt.fontSize)}px`),
                    yt.tspan.setAttributeNS(null, "y", rt(-yt.y)),
                    yt.txtElement = this.svgFactory.createElement("svg:text"),
                    yt.txtElement.append(yt.tspan)
                }
                beginText() {
                    const ot = this.current;
                    ot.x = ot.lineX = 0,
                    ot.y = ot.lineY = 0,
                    ot.textMatrix = a.IDENTITY_MATRIX,
                    ot.lineMatrix = a.IDENTITY_MATRIX,
                    ot.textMatrixScale = 1,
                    ot.tspan = this.svgFactory.createElement("svg:tspan"),
                    ot.txtElement = this.svgFactory.createElement("svg:text"),
                    ot.txtgrp = this.svgFactory.createElement("svg:g"),
                    ot.xcoords = [],
                    ot.ycoords = []
                }
                moveText(ot, at) {
                    const ht = this.current;
                    ht.x = ht.lineX += ot,
                    ht.y = ht.lineY += at,
                    ht.xcoords = [],
                    ht.ycoords = [],
                    ht.tspan = this.svgFactory.createElement("svg:tspan"),
                    ht.tspan.setAttributeNS(null, "font-family", ht.fontFamily),
                    ht.tspan.setAttributeNS(null, "font-size", `${rt(ht.fontSize)}px`),
                    ht.tspan.setAttributeNS(null, "y", rt(-ht.y))
                }
                showText(ot) {
                    const at = this.current
                      , ht = at.font
                      , pt = at.fontSize;
                    if (pt === 0)
                        return;
                    const gt = at.fontSizeScale
                      , wt = at.charSpacing
                      , yt = at.wordSpacing
                      , Rt = at.fontDirection
                      , Mt = at.textHScale * Rt
                      , ss = ht.vertical
                      , zt = ss ? 1 : -1
                      , At = ht.defaultVMetrics
                      , kt = pt * at.fontMatrix[0];
                    let vt = 0;
                    for (const Yt of ot) {
                        if (Yt === null) {
                            vt += Rt * yt;
                            continue
                        } else if (typeof Yt == "number") {
                            vt += zt * Yt * pt / 1e3;
                            continue
                        }
                        const Nt = (Yt.isSpace ? yt : 0) + wt
                          , jt = Yt.fontChar;
                        let xt, Et, Pt = Yt.width;
                        if (ss) {
                            let Bt;
                            const os = Yt.vmetric || At;
                            Bt = Yt.vmetric ? os[1] : Pt * .5,
                            Bt = -Bt * kt;
                            const ds = os[2] * kt;
                            Pt = os ? -os[0] : Pt,
                            xt = Bt / gt,
                            Et = (vt + ds) / gt
                        } else
                            xt = vt / gt,
                            Et = 0;
                        (Yt.isInFont || ht.missingFile) && (at.xcoords.push(at.x + xt),
                        ss && at.ycoords.push(-at.y + Et),
                        at.tspan.textContent += jt);
                        const St = ss ? Pt * kt - Nt * Rt : Pt * kt + Nt * Rt;
                        vt += St
                    }
                    at.tspan.setAttributeNS(null, "x", at.xcoords.map(rt).join(" ")),
                    ss ? at.tspan.setAttributeNS(null, "y", at.ycoords.map(rt).join(" ")) : at.tspan.setAttributeNS(null, "y", rt(-at.y)),
                    ss ? at.y -= vt : at.x += vt * Mt,
                    at.tspan.setAttributeNS(null, "font-family", at.fontFamily),
                    at.tspan.setAttributeNS(null, "font-size", `${rt(at.fontSize)}px`),
                    at.fontStyle !== c.fontStyle && at.tspan.setAttributeNS(null, "font-style", at.fontStyle),
                    at.fontWeight !== c.fontWeight && at.tspan.setAttributeNS(null, "font-weight", at.fontWeight);
                    const bt = at.textRenderingMode & a.TextRenderingMode.FILL_STROKE_MASK;
                    if (bt === a.TextRenderingMode.FILL || bt === a.TextRenderingMode.FILL_STROKE ? (at.fillColor !== c.fillColor && at.tspan.setAttributeNS(null, "fill", at.fillColor),
                    at.fillAlpha < 1 && at.tspan.setAttributeNS(null, "fill-opacity", at.fillAlpha)) : at.textRenderingMode === a.TextRenderingMode.ADD_TO_PATH ? at.tspan.setAttributeNS(null, "fill", "transparent") : at.tspan.setAttributeNS(null, "fill", "none"),
                    bt === a.TextRenderingMode.STROKE || bt === a.TextRenderingMode.FILL_STROKE) {
                        const Yt = 1 / (at.textMatrixScale || 1);
                        this._setStrokeAttributes(at.tspan, Yt)
                    }
                    let Tt = at.textMatrix;
                    at.textRise !== 0 && (Tt = Tt.slice(),
                    Tt[5] += at.textRise),
                    at.txtElement.setAttributeNS(null, "transform", `${et(Tt)} scale(${rt(Mt)}, -1)`),
                    at.txtElement.setAttributeNS(d, "xml:space", "preserve"),
                    at.txtElement.append(at.tspan),
                    at.txtgrp.append(at.txtElement),
                    this._ensureTransformGroup().append(at.txtElement)
                }
                setLeadingMoveText(ot, at) {
                    this.setLeading(-at),
                    this.moveText(ot, at)
                }
                addFontStyle(ot) {
                    if (!ot.data)
                        throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');
                    this.cssStyle || (this.cssStyle = this.svgFactory.createElement("svg:style"),
                    this.cssStyle.setAttributeNS(null, "type", "text/css"),
                    this.defs.append(this.cssStyle));
                    const at = _(ot.data, ot.mimetype, this.forceDataSchema);
                    this.cssStyle.textContent += `@font-face { font-family: "${ot.loadedName}"; src: url(${at}); }
`
                }
                setFont(ot) {
                    const at = this.current
                      , ht = this.commonObjs.get(ot[0]);
                    let pt = ot[1];
                    at.font = ht,
                    this.embedFonts && !ht.missingFile && !this.embeddedFonts[ht.loadedName] && (this.addFontStyle(ht),
                    this.embeddedFonts[ht.loadedName] = ht),
                    at.fontMatrix = ht.fontMatrix || a.FONT_IDENTITY_MATRIX;
                    let gt = "normal";
                    ht.black ? gt = "900" : ht.bold && (gt = "bold");
                    const wt = ht.italic ? "italic" : "normal";
                    pt < 0 ? (pt = -pt,
                    at.fontDirection = -1) : at.fontDirection = 1,
                    at.fontSize = pt,
                    at.fontFamily = ht.loadedName,
                    at.fontWeight = gt,
                    at.fontStyle = wt,
                    at.tspan = this.svgFactory.createElement("svg:tspan"),
                    at.tspan.setAttributeNS(null, "y", rt(-at.y)),
                    at.xcoords = [],
                    at.ycoords = []
                }
                endText() {
                    var at;
                    const ot = this.current;
                    ot.textRenderingMode & a.TextRenderingMode.ADD_TO_PATH_FLAG && ((at = ot.txtElement) != null && at.hasChildNodes()) && (ot.element = ot.txtElement,
                    this.clip("nonzero"),
                    this.endPath())
                }
                setLineWidth(ot) {
                    ot > 0 && (this.current.lineWidth = ot)
                }
                setLineCap(ot) {
                    this.current.lineCap = g[ot]
                }
                setLineJoin(ot) {
                    this.current.lineJoin = b[ot]
                }
                setMiterLimit(ot) {
                    this.current.miterLimit = ot
                }
                setStrokeAlpha(ot) {
                    this.current.strokeAlpha = ot
                }
                setStrokeRGBColor(ot, at, ht) {
                    this.current.strokeColor = a.Util.makeHexColor(ot, at, ht)
                }
                setFillAlpha(ot) {
                    this.current.fillAlpha = ot
                }
                setFillRGBColor(ot, at, ht) {
                    this.current.fillColor = a.Util.makeHexColor(ot, at, ht),
                    this.current.tspan = this.svgFactory.createElement("svg:tspan"),
                    this.current.xcoords = [],
                    this.current.ycoords = []
                }
                setStrokeColorN(ot) {
                    this.current.strokeColor = this._makeColorN_Pattern(ot)
                }
                setFillColorN(ot) {
                    this.current.fillColor = this._makeColorN_Pattern(ot)
                }
                shadingFill(ot) {
                    const {width: at, height: ht} = this.viewport
                      , pt = a.Util.inverseTransform(this.transformMatrix)
                      , [gt,wt,yt,Rt] = a.Util.getAxialAlignedBoundingBox([0, 0, at, ht], pt)
                      , Mt = this.svgFactory.createElement("svg:rect");
                    Mt.setAttributeNS(null, "x", gt),
                    Mt.setAttributeNS(null, "y", wt),
                    Mt.setAttributeNS(null, "width", yt - gt),
                    Mt.setAttributeNS(null, "height", Rt - wt),
                    Mt.setAttributeNS(null, "fill", this._makeShadingPattern(ot)),
                    this.current.fillAlpha < 1 && Mt.setAttributeNS(null, "fill-opacity", this.current.fillAlpha),
                    this._ensureTransformGroup().append(Mt)
                }
                _makeColorN_Pattern(ot) {
                    return ot[0] === "TilingPattern" ? this._makeTilingPattern(ot) : this._makeShadingPattern(ot)
                }
                _makeTilingPattern(ot) {
                    const at = ot[1]
                      , ht = ot[2]
                      , pt = ot[3] || a.IDENTITY_MATRIX
                      , [gt,wt,yt,Rt] = ot[4]
                      , Mt = ot[5]
                      , ss = ot[6]
                      , zt = ot[7]
                      , At = `shading${nt++}`
                      , [kt,vt,bt,Tt] = a.Util.normalizeRect([...a.Util.applyTransform([gt, wt], pt), ...a.Util.applyTransform([yt, Rt], pt)])
                      , [Yt,Nt] = a.Util.singularValueDecompose2dScale(pt)
                      , jt = Mt * Yt
                      , xt = ss * Nt
                      , Et = this.svgFactory.createElement("svg:pattern");
                    Et.setAttributeNS(null, "id", At),
                    Et.setAttributeNS(null, "patternUnits", "userSpaceOnUse"),
                    Et.setAttributeNS(null, "width", jt),
                    Et.setAttributeNS(null, "height", xt),
                    Et.setAttributeNS(null, "x", `${kt}`),
                    Et.setAttributeNS(null, "y", `${vt}`);
                    const Pt = this.svg
                      , St = this.transformMatrix
                      , Bt = this.current.fillColor
                      , os = this.current.strokeColor
                      , ds = this.svgFactory.create(bt - kt, Tt - vt);
                    if (this.svg = ds,
                    this.transformMatrix = pt,
                    zt === 2) {
                        const js = a.Util.makeHexColor(...at);
                        this.current.fillColor = js,
                        this.current.strokeColor = js
                    }
                    return this.executeOpTree(this.convertOpList(ht)),
                    this.svg = Pt,
                    this.transformMatrix = St,
                    this.current.fillColor = Bt,
                    this.current.strokeColor = os,
                    Et.append(ds.childNodes[0]),
                    this.defs.append(Et),
                    `url(#${At})`
                }
                _makeShadingPattern(ot) {
                    switch (typeof ot == "string" && (ot = this.objs.get(ot)),
                    ot[0]) {
                    case "RadialAxial":
                        const at = `shading${nt++}`
                          , ht = ot[3];
                        let pt;
                        switch (ot[1]) {
                        case "axial":
                            const gt = ot[4]
                              , wt = ot[5];
                            pt = this.svgFactory.createElement("svg:linearGradient"),
                            pt.setAttributeNS(null, "id", at),
                            pt.setAttributeNS(null, "gradientUnits", "userSpaceOnUse"),
                            pt.setAttributeNS(null, "x1", gt[0]),
                            pt.setAttributeNS(null, "y1", gt[1]),
                            pt.setAttributeNS(null, "x2", wt[0]),
                            pt.setAttributeNS(null, "y2", wt[1]);
                            break;
                        case "radial":
                            const yt = ot[4]
                              , Rt = ot[5]
                              , Mt = ot[6]
                              , ss = ot[7];
                            pt = this.svgFactory.createElement("svg:radialGradient"),
                            pt.setAttributeNS(null, "id", at),
                            pt.setAttributeNS(null, "gradientUnits", "userSpaceOnUse"),
                            pt.setAttributeNS(null, "cx", Rt[0]),
                            pt.setAttributeNS(null, "cy", Rt[1]),
                            pt.setAttributeNS(null, "r", ss),
                            pt.setAttributeNS(null, "fx", yt[0]),
                            pt.setAttributeNS(null, "fy", yt[1]),
                            pt.setAttributeNS(null, "fr", Mt);
                            break;
                        default:
                            throw new Error(`Unknown RadialAxial type: ${ot[1]}`)
                        }
                        for (const gt of ht) {
                            const wt = this.svgFactory.createElement("svg:stop");
                            wt.setAttributeNS(null, "offset", gt[0]),
                            wt.setAttributeNS(null, "stop-color", gt[1]),
                            pt.append(wt)
                        }
                        return this.defs.append(pt),
                        `url(#${at})`;
                    case "Mesh":
                        return (0,
                        a.warn)("Unimplemented pattern Mesh"),
                        null;
                    case "Dummy":
                        return "hotpink";
                    default:
                        throw new Error(`Unknown IR type: ${ot[0]}`)
                    }
                }
                setDash(ot, at) {
                    this.current.dashArray = ot,
                    this.current.dashPhase = at
                }
                constructPath(ot, at) {
                    const ht = this.current;
                    let pt = ht.x
                      , gt = ht.y
                      , wt = []
                      , yt = 0;
                    for (const Rt of ot)
                        switch (Rt | 0) {
                        case a.OPS.rectangle:
                            pt = at[yt++],
                            gt = at[yt++];
                            const Mt = at[yt++]
                              , ss = at[yt++]
                              , zt = pt + Mt
                              , At = gt + ss;
                            wt.push("M", rt(pt), rt(gt), "L", rt(zt), rt(gt), "L", rt(zt), rt(At), "L", rt(pt), rt(At), "Z");
                            break;
                        case a.OPS.moveTo:
                            pt = at[yt++],
                            gt = at[yt++],
                            wt.push("M", rt(pt), rt(gt));
                            break;
                        case a.OPS.lineTo:
                            pt = at[yt++],
                            gt = at[yt++],
                            wt.push("L", rt(pt), rt(gt));
                            break;
                        case a.OPS.curveTo:
                            pt = at[yt + 4],
                            gt = at[yt + 5],
                            wt.push("C", rt(at[yt]), rt(at[yt + 1]), rt(at[yt + 2]), rt(at[yt + 3]), rt(pt), rt(gt)),
                            yt += 6;
                            break;
                        case a.OPS.curveTo2:
                            wt.push("C", rt(pt), rt(gt), rt(at[yt]), rt(at[yt + 1]), rt(at[yt + 2]), rt(at[yt + 3])),
                            pt = at[yt + 2],
                            gt = at[yt + 3],
                            yt += 4;
                            break;
                        case a.OPS.curveTo3:
                            pt = at[yt + 2],
                            gt = at[yt + 3],
                            wt.push("C", rt(at[yt]), rt(at[yt + 1]), rt(pt), rt(gt), rt(pt), rt(gt)),
                            yt += 4;
                            break;
                        case a.OPS.closePath:
                            wt.push("Z");
                            break
                        }
                    wt = wt.join(" "),
                    ht.path && ot.length > 0 && ot[0] !== a.OPS.rectangle && ot[0] !== a.OPS.moveTo ? wt = ht.path.getAttributeNS(null, "d") + wt : (ht.path = this.svgFactory.createElement("svg:path"),
                    this._ensureTransformGroup().append(ht.path)),
                    ht.path.setAttributeNS(null, "d", wt),
                    ht.path.setAttributeNS(null, "fill", "none"),
                    ht.element = ht.path,
                    ht.setCurrentPoint(pt, gt)
                }
                endPath() {
                    const ot = this.current;
                    if (ot.path = null,
                    !this.pendingClip)
                        return;
                    if (!ot.element) {
                        this.pendingClip = null;
                        return
                    }
                    const at = `clippath${it++}`
                      , ht = this.svgFactory.createElement("svg:clipPath");
                    ht.setAttributeNS(null, "id", at),
                    ht.setAttributeNS(null, "transform", et(this.transformMatrix));
                    const pt = ot.element.cloneNode(!0);
                    if (this.pendingClip === "evenodd" ? pt.setAttributeNS(null, "clip-rule", "evenodd") : pt.setAttributeNS(null, "clip-rule", "nonzero"),
                    this.pendingClip = null,
                    ht.append(pt),
                    this.defs.append(ht),
                    ot.activeClipUrl) {
                        ot.clipGroup = null;
                        for (const gt of this.extraStack)
                            gt.clipGroup = null;
                        ht.setAttributeNS(null, "clip-path", ot.activeClipUrl)
                    }
                    ot.activeClipUrl = `url(#${at})`,
                    this.tgrp = null
                }
                clip(ot) {
                    this.pendingClip = ot
                }
                closePath() {
                    const ot = this.current;
                    if (ot.path) {
                        const at = `${ot.path.getAttributeNS(null, "d")}Z`;
                        ot.path.setAttributeNS(null, "d", at)
                    }
                }
                setLeading(ot) {
                    this.current.leading = -ot
                }
                setTextRise(ot) {
                    this.current.textRise = ot
                }
                setTextRenderingMode(ot) {
                    this.current.textRenderingMode = ot
                }
                setHScale(ot) {
                    this.current.textHScale = ot / 100
                }
                setRenderingIntent(ot) {}
                setFlatness(ot) {}
                setGState(ot) {
                    for (const [at,ht] of ot)
                        switch (at) {
                        case "LW":
                            this.setLineWidth(ht);
                            break;
                        case "LC":
                            this.setLineCap(ht);
                            break;
                        case "LJ":
                            this.setLineJoin(ht);
                            break;
                        case "ML":
                            this.setMiterLimit(ht);
                            break;
                        case "D":
                            this.setDash(ht[0], ht[1]);
                            break;
                        case "RI":
                            this.setRenderingIntent(ht);
                            break;
                        case "FL":
                            this.setFlatness(ht);
                            break;
                        case "Font":
                            this.setFont(ht);
                            break;
                        case "CA":
                            this.setStrokeAlpha(ht);
                            break;
                        case "ca":
                            this.setFillAlpha(ht);
                            break;
                        default:
                            (0,
                            a.warn)(`Unimplemented graphic state operator ${at}`);
                            break
                        }
                }
                fill() {
                    const ot = this.current;
                    ot.element && (ot.element.setAttributeNS(null, "fill", ot.fillColor),
                    ot.element.setAttributeNS(null, "fill-opacity", ot.fillAlpha),
                    this.endPath())
                }
                stroke() {
                    const ot = this.current;
                    ot.element && (this._setStrokeAttributes(ot.element),
                    ot.element.setAttributeNS(null, "fill", "none"),
                    this.endPath())
                }
                _setStrokeAttributes(ot, at=1) {
                    const ht = this.current;
                    let pt = ht.dashArray;
                    at !== 1 && pt.length > 0 && (pt = pt.map(function(gt) {
                        return at * gt
                    })),
                    ot.setAttributeNS(null, "stroke", ht.strokeColor),
                    ot.setAttributeNS(null, "stroke-opacity", ht.strokeAlpha),
                    ot.setAttributeNS(null, "stroke-miterlimit", rt(ht.miterLimit)),
                    ot.setAttributeNS(null, "stroke-linecap", ht.lineCap),
                    ot.setAttributeNS(null, "stroke-linejoin", ht.lineJoin),
                    ot.setAttributeNS(null, "stroke-width", rt(at * ht.lineWidth) + "px"),
                    ot.setAttributeNS(null, "stroke-dasharray", pt.map(rt).join(" ")),
                    ot.setAttributeNS(null, "stroke-dashoffset", rt(at * ht.dashPhase) + "px")
                }
                eoFill() {
                    var ot;
                    (ot = this.current.element) == null || ot.setAttributeNS(null, "fill-rule", "evenodd"),
                    this.fill()
                }
                fillStroke() {
                    this.stroke(),
                    this.fill()
                }
                eoFillStroke() {
                    var ot;
                    (ot = this.current.element) == null || ot.setAttributeNS(null, "fill-rule", "evenodd"),
                    this.fillStroke()
                }
                closeStroke() {
                    this.closePath(),
                    this.stroke()
                }
                closeFillStroke() {
                    this.closePath(),
                    this.fillStroke()
                }
                closeEOFillStroke() {
                    this.closePath(),
                    this.eoFillStroke()
                }
                paintSolidColorImageMask() {
                    const ot = this.svgFactory.createElement("svg:rect");
                    ot.setAttributeNS(null, "x", "0"),
                    ot.setAttributeNS(null, "y", "0"),
                    ot.setAttributeNS(null, "width", "1px"),
                    ot.setAttributeNS(null, "height", "1px"),
                    ot.setAttributeNS(null, "fill", this.current.fillColor),
                    this._ensureTransformGroup().append(ot)
                }
                paintImageXObject(ot) {
                    const at = this.getObject(ot);
                    if (!at) {
                        (0,
                        a.warn)(`Dependent image with object ID ${ot} is not ready yet`);
                        return
                    }
                    this.paintInlineImageXObject(at)
                }
                paintInlineImageXObject(ot, at) {
                    const ht = ot.width
                      , pt = ot.height
                      , gt = $(ot, this.forceDataSchema, !!at)
                      , wt = this.svgFactory.createElement("svg:rect");
                    wt.setAttributeNS(null, "x", "0"),
                    wt.setAttributeNS(null, "y", "0"),
                    wt.setAttributeNS(null, "width", rt(ht)),
                    wt.setAttributeNS(null, "height", rt(pt)),
                    this.current.element = wt,
                    this.clip("nonzero");
                    const yt = this.svgFactory.createElement("svg:image");
                    yt.setAttributeNS(h, "xlink:href", gt),
                    yt.setAttributeNS(null, "x", "0"),
                    yt.setAttributeNS(null, "y", rt(-pt)),
                    yt.setAttributeNS(null, "width", rt(ht) + "px"),
                    yt.setAttributeNS(null, "height", rt(pt) + "px"),
                    yt.setAttributeNS(null, "transform", `scale(${rt(1 / ht)} ${rt(-1 / pt)})`),
                    at ? at.append(yt) : this._ensureTransformGroup().append(yt)
                }
                paintImageMaskXObject(ot) {
                    const at = this.getObject(ot.data, ot);
                    if (at.bitmap) {
                        (0,
                        a.warn)("paintImageMaskXObject: ImageBitmap support is not implemented, ensure that the `isOffscreenCanvasSupported` API parameter is disabled.");
                        return
                    }
                    const ht = this.current
                      , pt = at.width
                      , gt = at.height
                      , wt = ht.fillColor;
                    ht.maskId = `mask${st++}`;
                    const yt = this.svgFactory.createElement("svg:mask");
                    yt.setAttributeNS(null, "id", ht.maskId);
                    const Rt = this.svgFactory.createElement("svg:rect");
                    Rt.setAttributeNS(null, "x", "0"),
                    Rt.setAttributeNS(null, "y", "0"),
                    Rt.setAttributeNS(null, "width", rt(pt)),
                    Rt.setAttributeNS(null, "height", rt(gt)),
                    Rt.setAttributeNS(null, "fill", wt),
                    Rt.setAttributeNS(null, "mask", `url(#${ht.maskId})`),
                    this.defs.append(yt),
                    this._ensureTransformGroup().append(Rt),
                    this.paintInlineImageXObject(at, yt)
                }
                paintFormXObjectBegin(ot, at) {
                    if (Array.isArray(ot) && ot.length === 6 && this.transform(ot[0], ot[1], ot[2], ot[3], ot[4], ot[5]),
                    at) {
                        const ht = at[2] - at[0]
                          , pt = at[3] - at[1]
                          , gt = this.svgFactory.createElement("svg:rect");
                        gt.setAttributeNS(null, "x", at[0]),
                        gt.setAttributeNS(null, "y", at[1]),
                        gt.setAttributeNS(null, "width", rt(ht)),
                        gt.setAttributeNS(null, "height", rt(pt)),
                        this.current.element = gt,
                        this.clip("nonzero"),
                        this.endPath()
                    }
                }
                paintFormXObjectEnd() {}
                _initialize(ot) {
                    const at = this.svgFactory.create(ot.width, ot.height)
                      , ht = this.svgFactory.createElement("svg:defs");
                    at.append(ht),
                    this.defs = ht;
                    const pt = this.svgFactory.createElement("svg:g");
                    return pt.setAttributeNS(null, "transform", et(ot.transform)),
                    at.append(pt),
                    this.svg = pt,
                    at
                }
                _ensureClipGroup() {
                    if (!this.current.clipGroup) {
                        const ot = this.svgFactory.createElement("svg:g");
                        ot.setAttributeNS(null, "clip-path", this.current.activeClipUrl),
                        this.svg.append(ot),
                        this.current.clipGroup = ot
                    }
                    return this.current.clipGroup
                }
                _ensureTransformGroup() {
                    return this.tgrp || (this.tgrp = this.svgFactory.createElement("svg:g"),
                    this.tgrp.setAttributeNS(null, "transform", et(this.transformMatrix)),
                    this.current.activeClipUrl ? this._ensureClipGroup().append(this.tgrp) : this.svg.append(this.tgrp)),
                    this.tgrp
                }
            }
            e.SVGGraphics = lt
        }
        , (s, e) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.XfaText = void 0;
            class i {
                static textContent(a) {
                    const c = []
                      , d = {
                        items: c,
                        styles: Object.create(null)
                    };
                    function h(g) {
                        var $;
                        if (!g)
                            return;
                        let b = null;
                        const _ = g.name;
                        if (_ === "#text")
                            b = g.value;
                        else if (i.shouldBuildText(_))
                            ($ = g == null ? void 0 : g.attributes) != null && $.textContent ? b = g.attributes.textContent : g.value && (b = g.value);
                        else
                            return;
                        if (b !== null && c.push({
                            str: b
                        }),
                        !!g.children)
                            for (const _e of g.children)
                                h(_e)
                    }
                    return h(a),
                    d
                }
                static shouldBuildText(a) {
                    return !(a === "textarea" || a === "input" || a === "option" || a === "select")
                }
            }
            e.XfaText = i
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.TextLayerRenderTask = void 0,
            e.renderTextLayer = et,
            e.updateTextLayer = it;
            var o = i(1)
              , a = i(6);
            const c = 1e5
              , d = 30
              , h = .8
              , g = new Map;
            function b(st, nt) {
                let lt;
                if (nt && o.FeatureTest.isOffscreenCanvasSupported)
                    lt = new OffscreenCanvas(st,st).getContext("2d", {
                        alpha: !1
                    });
                else {
                    const dt = document.createElement("canvas");
                    dt.width = dt.height = st,
                    lt = dt.getContext("2d", {
                        alpha: !1
                    })
                }
                return lt
            }
            function _(st, nt) {
                const lt = g.get(st);
                if (lt)
                    return lt;
                const dt = b(d, nt);
                dt.font = `${d}px ${st}`;
                const ot = dt.measureText("");
                let at = ot.fontBoundingBoxAscent
                  , ht = Math.abs(ot.fontBoundingBoxDescent);
                if (at) {
                    const gt = at / (at + ht);
                    return g.set(st, gt),
                    dt.canvas.width = dt.canvas.height = 0,
                    gt
                }
                dt.strokeStyle = "red",
                dt.clearRect(0, 0, d, d),
                dt.strokeText("g", 0, 0);
                let pt = dt.getImageData(0, 0, d, d).data;
                ht = 0;
                for (let gt = pt.length - 1 - 3; gt >= 0; gt -= 4)
                    if (pt[gt] > 0) {
                        ht = Math.ceil(gt / 4 / d);
                        break
                    }
                dt.clearRect(0, 0, d, d),
                dt.strokeText("A", 0, d),
                pt = dt.getImageData(0, 0, d, d).data,
                at = 0;
                for (let gt = 0, wt = pt.length; gt < wt; gt += 4)
                    if (pt[gt] > 0) {
                        at = d - Math.floor(gt / 4 / d);
                        break
                    }
                if (dt.canvas.width = dt.canvas.height = 0,
                at) {
                    const gt = at / (at + ht);
                    return g.set(st, gt),
                    gt
                }
                return g.set(st, h),
                h
            }
            function $(st, nt, lt) {
                const dt = document.createElement("span")
                  , ot = {
                    angle: 0,
                    canvasWidth: 0,
                    hasText: nt.str !== "",
                    hasEOL: nt.hasEOL,
                    fontSize: 0
                };
                st._textDivs.push(dt);
                const at = o.Util.transform(st._transform, nt.transform);
                let ht = Math.atan2(at[1], at[0]);
                const pt = lt[nt.fontName];
                pt.vertical && (ht += Math.PI / 2);
                const gt = Math.hypot(at[2], at[3])
                  , wt = gt * _(pt.fontFamily, st._isOffscreenCanvasSupported);
                let yt, Rt;
                ht === 0 ? (yt = at[4],
                Rt = at[5] - wt) : (yt = at[4] + wt * Math.sin(ht),
                Rt = at[5] - wt * Math.cos(ht));
                const Mt = "calc(var(--scale-factor)*"
                  , ss = dt.style;
                st._container === st._rootContainer ? (ss.left = `${(100 * yt / st._pageWidth).toFixed(2)}%`,
                ss.top = `${(100 * Rt / st._pageHeight).toFixed(2)}%`) : (ss.left = `${Mt}${yt.toFixed(2)}px)`,
                ss.top = `${Mt}${Rt.toFixed(2)}px)`),
                ss.fontSize = `${Mt}${gt.toFixed(2)}px)`,
                ss.fontFamily = pt.fontFamily,
                ot.fontSize = gt,
                dt.setAttribute("role", "presentation"),
                dt.textContent = nt.str,
                dt.dir = nt.dir,
                st._fontInspectorEnabled && (dt.dataset.fontName = nt.fontName),
                ht !== 0 && (ot.angle = ht * (180 / Math.PI));
                let zt = !1;
                if (nt.str.length > 1)
                    zt = !0;
                else if (nt.str !== " " && nt.transform[0] !== nt.transform[3]) {
                    const At = Math.abs(nt.transform[0])
                      , kt = Math.abs(nt.transform[3]);
                    At !== kt && Math.max(At, kt) / Math.min(At, kt) > 1.5 && (zt = !0)
                }
                zt && (ot.canvasWidth = pt.vertical ? nt.height : nt.width),
                st._textDivProperties.set(dt, ot),
                st._isReadableStream && st._layoutText(dt)
            }
            function _e(st) {
                const {div: nt, scale: lt, properties: dt, ctx: ot, prevFontSize: at, prevFontFamily: ht} = st
                  , {style: pt} = nt;
                let gt = "";
                if (dt.canvasWidth !== 0 && dt.hasText) {
                    const {fontFamily: wt} = pt
                      , {canvasWidth: yt, fontSize: Rt} = dt;
                    (at !== Rt || ht !== wt) && (ot.font = `${Rt * lt}px ${wt}`,
                    st.prevFontSize = Rt,
                    st.prevFontFamily = wt);
                    const {width: Mt} = ot.measureText(nt.textContent);
                    Mt > 0 && (gt = `scaleX(${yt * lt / Mt})`)
                }
                dt.angle !== 0 && (gt = `rotate(${dt.angle}deg) ${gt}`),
                gt.length > 0 && (pt.transform = gt)
            }
            function tt(st) {
                if (st._canceled)
                    return;
                const nt = st._textDivs
                  , lt = st._capability;
                if (nt.length > c) {
                    lt.resolve();
                    return
                }
                if (!st._isReadableStream)
                    for (const ot of nt)
                        st._layoutText(ot);
                lt.resolve()
            }
            class rt {
                constructor({textContentSource: nt, container: lt, viewport: dt, textDivs: ot, textDivProperties: at, textContentItemsStr: ht, isOffscreenCanvasSupported: pt}) {
                    var Mt;
                    this._textContentSource = nt,
                    this._isReadableStream = nt instanceof ReadableStream,
                    this._container = this._rootContainer = lt,
                    this._textDivs = ot || [],
                    this._textContentItemsStr = ht || [],
                    this._isOffscreenCanvasSupported = pt,
                    this._fontInspectorEnabled = !!((Mt = globalThis.FontInspector) != null && Mt.enabled),
                    this._reader = null,
                    this._textDivProperties = at || new WeakMap,
                    this._canceled = !1,
                    this._capability = new o.PromiseCapability,
                    this._layoutTextParams = {
                        prevFontSize: null,
                        prevFontFamily: null,
                        div: null,
                        scale: dt.scale * (globalThis.devicePixelRatio || 1),
                        properties: null,
                        ctx: b(0, pt)
                    };
                    const {pageWidth: gt, pageHeight: wt, pageX: yt, pageY: Rt} = dt.rawDims;
                    this._transform = [1, 0, 0, -1, -yt, Rt + wt],
                    this._pageWidth = gt,
                    this._pageHeight = wt,
                    (0,
                    a.setLayerDimensions)(lt, dt),
                    this._capability.promise.finally( () => {
                        this._layoutTextParams = null
                    }
                    ).catch( () => {}
                    )
                }
                get promise() {
                    return this._capability.promise
                }
                cancel() {
                    this._canceled = !0,
                    this._reader && (this._reader.cancel(new o.AbortException("TextLayer task cancelled.")).catch( () => {}
                    ),
                    this._reader = null),
                    this._capability.reject(new o.AbortException("TextLayer task cancelled."))
                }
                _processItems(nt, lt) {
                    for (const dt of nt) {
                        if (dt.str === void 0) {
                            if (dt.type === "beginMarkedContentProps" || dt.type === "beginMarkedContent") {
                                const ot = this._container;
                                this._container = document.createElement("span"),
                                this._container.classList.add("markedContent"),
                                dt.id !== null && this._container.setAttribute("id", `${dt.id}`),
                                ot.append(this._container)
                            } else
                                dt.type === "endMarkedContent" && (this._container = this._container.parentNode);
                            continue
                        }
                        this._textContentItemsStr.push(dt.str),
                        $(this, dt, lt)
                    }
                }
                _layoutText(nt) {
                    const lt = this._layoutTextParams.properties = this._textDivProperties.get(nt);
                    if (this._layoutTextParams.div = nt,
                    _e(this._layoutTextParams),
                    lt.hasText && this._container.append(nt),
                    lt.hasEOL) {
                        const dt = document.createElement("br");
                        dt.setAttribute("role", "presentation"),
                        this._container.append(dt)
                    }
                }
                _render() {
                    const nt = new o.PromiseCapability;
                    let lt = Object.create(null);
                    if (this._isReadableStream) {
                        const dt = () => {
                            this._reader.read().then( ({value: ot, done: at}) => {
                                if (at) {
                                    nt.resolve();
                                    return
                                }
                                Object.assign(lt, ot.styles),
                                this._processItems(ot.items, lt),
                                dt()
                            }
                            , nt.reject)
                        }
                        ;
                        this._reader = this._textContentSource.getReader(),
                        dt()
                    } else if (this._textContentSource) {
                        const {items: dt, styles: ot} = this._textContentSource;
                        this._processItems(dt, ot),
                        nt.resolve()
                    } else
                        throw new Error('No "textContentSource" parameter specified.');
                    nt.promise.then( () => {
                        lt = null,
                        tt(this)
                    }
                    , this._capability.reject)
                }
            }
            e.TextLayerRenderTask = rt;
            function et(st) {
                !st.textContentSource && (st.textContent || st.textContentStream) && ((0,
                a.deprecated)("The TextLayerRender `textContent`/`textContentStream` parameters will be removed in the future, please use `textContentSource` instead."),
                st.textContentSource = st.textContent || st.textContentStream);
                const {container: nt, viewport: lt} = st
                  , dt = getComputedStyle(nt)
                  , ot = dt.getPropertyValue("visibility")
                  , at = parseFloat(dt.getPropertyValue("--scale-factor"));
                ot === "visible" && (!at || Math.abs(at - lt.scale) > 1e-5) && console.error("The `--scale-factor` CSS-variable must be set, to the same value as `viewport.scale`, either on the `container`-element itself or higher up in the DOM.");
                const ht = new rt(st);
                return ht._render(),
                ht
            }
            function it({container: st, viewport: nt, textDivs: lt, textDivProperties: dt, isOffscreenCanvasSupported: ot, mustRotate: at=!0, mustRescale: ht=!0}) {
                if (at && (0,
                a.setLayerDimensions)(st, {
                    rotation: nt.rotation
                }),
                ht) {
                    const pt = b(0, ot)
                      , wt = {
                        prevFontSize: null,
                        prevFontFamily: null,
                        div: null,
                        scale: nt.scale * (globalThis.devicePixelRatio || 1),
                        properties: null,
                        ctx: pt
                    };
                    for (const yt of lt)
                        wt.properties = dt.get(yt),
                        wt.div = yt,
                        _e(wt)
                }
            }
        }
        , (s, e, i) => {
            var _, $, _e, tt, rt, et, it, st, nt, lt, dt, po, Mn, xo, fo;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.AnnotationEditorLayer = void 0;
            var o = i(1)
              , a = i(4)
              , c = i(28)
              , d = i(33)
              , h = i(6)
              , g = i(34);
            const gt = class gt {
                constructor({uiManager: yt, pageIndex: Rt, div: Mt, accessibilityManager: ss, annotationLayer: zt, viewport: At, l10n: kt}) {
                    ps(this, dt);
                    ps(this, _);
                    ps(this, $, !1);
                    ps(this, _e, null);
                    ps(this, tt, this.pointerup.bind(this));
                    ps(this, rt, this.pointerdown.bind(this));
                    ps(this, et, new Map);
                    ps(this, it, !1);
                    ps(this, st, !1);
                    ps(this, nt, !1);
                    ps(this, lt);
                    const vt = [c.FreeTextEditor, d.InkEditor, g.StampEditor];
                    if (!gt._initialized) {
                        gt._initialized = !0;
                        for (const bt of vt)
                            bt.initialize(kt)
                    }
                    yt.registerEditorTypes(vt),
                    us(this, lt, yt),
                    this.pageIndex = Rt,
                    this.div = Mt,
                    us(this, _, ss),
                    us(this, _e, zt),
                    this.viewport = At,
                    mt(this, lt).addLayer(this)
                }
                get isEmpty() {
                    return mt(this, et).size === 0
                }
                updateToolbar(yt) {
                    mt(this, lt).updateToolbar(yt)
                }
                updateMode(yt=mt(this, lt).getMode()) {
                    cs(this, dt, fo).call(this),
                    yt === o.AnnotationEditorType.INK ? (this.addInkEditorIfNeeded(!1),
                    this.disableClick()) : this.enableClick(),
                    yt !== o.AnnotationEditorType.NONE && (this.div.classList.toggle("freeTextEditing", yt === o.AnnotationEditorType.FREETEXT),
                    this.div.classList.toggle("inkEditing", yt === o.AnnotationEditorType.INK),
                    this.div.classList.toggle("stampEditing", yt === o.AnnotationEditorType.STAMP),
                    this.div.hidden = !1)
                }
                addInkEditorIfNeeded(yt) {
                    if (!yt && mt(this, lt).getMode() !== o.AnnotationEditorType.INK)
                        return;
                    if (!yt) {
                        for (const Mt of mt(this, et).values())
                            if (Mt.isEmpty()) {
                                Mt.setInBackground();
                                return
                            }
                    }
                    cs(this, dt, Mn).call(this, {
                        offsetX: 0,
                        offsetY: 0
                    }, !1).setInBackground()
                }
                setEditingState(yt) {
                    mt(this, lt).setEditingState(yt)
                }
                addCommands(yt) {
                    mt(this, lt).addCommands(yt)
                }
                enable() {
                    this.div.style.pointerEvents = "auto";
                    const yt = new Set;
                    for (const Mt of mt(this, et).values())
                        Mt.enableEditing(),
                        Mt.annotationElementId && yt.add(Mt.annotationElementId);
                    if (!mt(this, _e))
                        return;
                    const Rt = mt(this, _e).getEditableAnnotations();
                    for (const Mt of Rt) {
                        if (Mt.hide(),
                        mt(this, lt).isDeletedAnnotationElement(Mt.data.id) || yt.has(Mt.data.id))
                            continue;
                        const ss = this.deserialize(Mt);
                        ss && (this.addOrRebuild(ss),
                        ss.enableEditing())
                    }
                }
                disable() {
                    var Rt;
                    us(this, nt, !0),
                    this.div.style.pointerEvents = "none";
                    const yt = new Set;
                    for (const Mt of mt(this, et).values()) {
                        if (Mt.disableEditing(),
                        !Mt.annotationElementId || Mt.serialize() !== null) {
                            yt.add(Mt.annotationElementId);
                            continue
                        }
                        (Rt = this.getEditableAnnotation(Mt.annotationElementId)) == null || Rt.show(),
                        Mt.remove()
                    }
                    if (mt(this, _e)) {
                        const Mt = mt(this, _e).getEditableAnnotations();
                        for (const ss of Mt) {
                            const {id: zt} = ss.data;
                            yt.has(zt) || mt(this, lt).isDeletedAnnotationElement(zt) || ss.show()
                        }
                    }
                    cs(this, dt, fo).call(this),
                    this.isEmpty && (this.div.hidden = !0),
                    us(this, nt, !1)
                }
                getEditableAnnotation(yt) {
                    var Rt;
                    return ((Rt = mt(this, _e)) == null ? void 0 : Rt.getEditableAnnotation(yt)) || null
                }
                setActiveEditor(yt) {
                    mt(this, lt).getActive() !== yt && mt(this, lt).setActiveEditor(yt)
                }
                enableClick() {
                    this.div.addEventListener("pointerdown", mt(this, rt)),
                    this.div.addEventListener("pointerup", mt(this, tt))
                }
                disableClick() {
                    this.div.removeEventListener("pointerdown", mt(this, rt)),
                    this.div.removeEventListener("pointerup", mt(this, tt))
                }
                attach(yt) {
                    mt(this, et).set(yt.id, yt);
                    const {annotationElementId: Rt} = yt;
                    Rt && mt(this, lt).isDeletedAnnotationElement(Rt) && mt(this, lt).removeDeletedAnnotationElement(yt)
                }
                detach(yt) {
                    var Rt;
                    mt(this, et).delete(yt.id),
                    (Rt = mt(this, _)) == null || Rt.removePointerInTextLayer(yt.contentDiv),
                    !mt(this, nt) && yt.annotationElementId && mt(this, lt).addDeletedAnnotationElement(yt)
                }
                remove(yt) {
                    this.detach(yt),
                    mt(this, lt).removeEditor(yt),
                    yt.div.contains(document.activeElement) && setTimeout( () => {
                        mt(this, lt).focusMainContainer()
                    }
                    , 0),
                    yt.div.remove(),
                    yt.isAttachedToDOM = !1,
                    mt(this, st) || this.addInkEditorIfNeeded(!1)
                }
                changeParent(yt) {
                    var Rt;
                    yt.parent !== this && (yt.annotationElementId && (mt(this, lt).addDeletedAnnotationElement(yt.annotationElementId),
                    a.AnnotationEditor.deleteAnnotationElement(yt),
                    yt.annotationElementId = null),
                    this.attach(yt),
                    (Rt = yt.parent) == null || Rt.detach(yt),
                    yt.setParent(this),
                    yt.div && yt.isAttachedToDOM && (yt.div.remove(),
                    this.div.append(yt.div)))
                }
                add(yt) {
                    if (this.changeParent(yt),
                    mt(this, lt).addEditor(yt),
                    this.attach(yt),
                    !yt.isAttachedToDOM) {
                        const Rt = yt.render();
                        this.div.append(Rt),
                        yt.isAttachedToDOM = !0
                    }
                    yt.fixAndSetPosition(),
                    yt.onceAdded(),
                    mt(this, lt).addToAnnotationStorage(yt)
                }
                moveEditorInDOM(yt) {
                    var Mt;
                    if (!yt.isAttachedToDOM)
                        return;
                    const {activeElement: Rt} = document;
                    yt.div.contains(Rt) && (yt._focusEventsAllowed = !1,
                    setTimeout( () => {
                        yt.div.contains(document.activeElement) ? yt._focusEventsAllowed = !0 : (yt.div.addEventListener("focusin", () => {
                            yt._focusEventsAllowed = !0
                        }
                        , {
                            once: !0
                        }),
                        Rt.focus())
                    }
                    , 0)),
                    yt._structTreeParentId = (Mt = mt(this, _)) == null ? void 0 : Mt.moveElementInDOM(this.div, yt.div, yt.contentDiv, !0)
                }
                addOrRebuild(yt) {
                    yt.needsToBeRebuilt() ? yt.rebuild() : this.add(yt)
                }
                addUndoableEditor(yt) {
                    const Rt = () => yt._uiManager.rebuild(yt)
                      , Mt = () => {
                        yt.remove()
                    }
                    ;
                    this.addCommands({
                        cmd: Rt,
                        undo: Mt,
                        mustExec: !1
                    })
                }
                getNextId() {
                    return mt(this, lt).getId()
                }
                pasteEditor(yt, Rt) {
                    mt(this, lt).updateToolbar(yt),
                    mt(this, lt).updateMode(yt);
                    const {offsetX: Mt, offsetY: ss} = cs(this, dt, xo).call(this)
                      , zt = this.getNextId()
                      , At = cs(this, dt, po).call(this, {
                        parent: this,
                        id: zt,
                        x: Mt,
                        y: ss,
                        uiManager: mt(this, lt),
                        isCentered: !0,
                        ...Rt
                    });
                    At && this.add(At)
                }
                deserialize(yt) {
                    switch (yt.annotationType ?? yt.annotationEditorType) {
                    case o.AnnotationEditorType.FREETEXT:
                        return c.FreeTextEditor.deserialize(yt, this, mt(this, lt));
                    case o.AnnotationEditorType.INK:
                        return d.InkEditor.deserialize(yt, this, mt(this, lt));
                    case o.AnnotationEditorType.STAMP:
                        return g.StampEditor.deserialize(yt, this, mt(this, lt))
                    }
                    return null
                }
                addNewEditor() {
                    cs(this, dt, Mn).call(this, cs(this, dt, xo).call(this), !0)
                }
                setSelected(yt) {
                    mt(this, lt).setSelected(yt)
                }
                toggleSelected(yt) {
                    mt(this, lt).toggleSelected(yt)
                }
                isSelected(yt) {
                    return mt(this, lt).isSelected(yt)
                }
                unselect(yt) {
                    mt(this, lt).unselect(yt)
                }
                pointerup(yt) {
                    const {isMac: Rt} = o.FeatureTest.platform;
                    if (!(yt.button !== 0 || yt.ctrlKey && Rt) && yt.target === this.div && mt(this, it)) {
                        if (us(this, it, !1),
                        !mt(this, $)) {
                            us(this, $, !0);
                            return
                        }
                        if (mt(this, lt).getMode() === o.AnnotationEditorType.STAMP) {
                            mt(this, lt).unselectAll();
                            return
                        }
                        cs(this, dt, Mn).call(this, yt, !1)
                    }
                }
                pointerdown(yt) {
                    if (mt(this, it)) {
                        us(this, it, !1);
                        return
                    }
                    const {isMac: Rt} = o.FeatureTest.platform;
                    if (yt.button !== 0 || yt.ctrlKey && Rt || yt.target !== this.div)
                        return;
                    us(this, it, !0);
                    const Mt = mt(this, lt).getActive();
                    us(this, $, !Mt || Mt.isEmpty())
                }
                findNewParent(yt, Rt, Mt) {
                    const ss = mt(this, lt).findParent(Rt, Mt);
                    return ss === null || ss === this ? !1 : (ss.changeParent(yt),
                    !0)
                }
                destroy() {
                    var yt, Rt;
                    ((yt = mt(this, lt).getActive()) == null ? void 0 : yt.parent) === this && (mt(this, lt).commitOrRemove(),
                    mt(this, lt).setActiveEditor(null));
                    for (const Mt of mt(this, et).values())
                        (Rt = mt(this, _)) == null || Rt.removePointerInTextLayer(Mt.contentDiv),
                        Mt.setParent(null),
                        Mt.isAttachedToDOM = !1,
                        Mt.div.remove();
                    this.div = null,
                    mt(this, et).clear(),
                    mt(this, lt).removeLayer(this)
                }
                render({viewport: yt}) {
                    this.viewport = yt,
                    (0,
                    h.setLayerDimensions)(this.div, yt);
                    for (const Rt of mt(this, lt).getEditors(this.pageIndex))
                        this.add(Rt);
                    this.updateMode()
                }
                update({viewport: yt}) {
                    mt(this, lt).commitOrRemove(),
                    this.viewport = yt,
                    (0,
                    h.setLayerDimensions)(this.div, {
                        rotation: yt.rotation
                    }),
                    this.updateMode()
                }
                get pageDimensions() {
                    const {pageWidth: yt, pageHeight: Rt} = this.viewport.rawDims;
                    return [yt, Rt]
                }
            }
            ;
            _ = new WeakMap,
            $ = new WeakMap,
            _e = new WeakMap,
            tt = new WeakMap,
            rt = new WeakMap,
            et = new WeakMap,
            it = new WeakMap,
            st = new WeakMap,
            nt = new WeakMap,
            lt = new WeakMap,
            dt = new WeakSet,
            po = function(yt) {
                switch (mt(this, lt).getMode()) {
                case o.AnnotationEditorType.FREETEXT:
                    return new c.FreeTextEditor(yt);
                case o.AnnotationEditorType.INK:
                    return new d.InkEditor(yt);
                case o.AnnotationEditorType.STAMP:
                    return new g.StampEditor(yt)
                }
                return null
            }
            ,
            Mn = function(yt, Rt) {
                const Mt = this.getNextId()
                  , ss = cs(this, dt, po).call(this, {
                    parent: this,
                    id: Mt,
                    x: yt.offsetX,
                    y: yt.offsetY,
                    uiManager: mt(this, lt),
                    isCentered: Rt
                });
                return ss && this.add(ss),
                ss
            }
            ,
            xo = function() {
                const {x: yt, y: Rt, width: Mt, height: ss} = this.div.getBoundingClientRect()
                  , zt = Math.max(0, yt)
                  , At = Math.max(0, Rt)
                  , kt = Math.min(window.innerWidth, yt + Mt)
                  , vt = Math.min(window.innerHeight, Rt + ss)
                  , bt = (zt + kt) / 2 - yt
                  , Tt = (At + vt) / 2 - Rt
                  , [Yt,Nt] = this.viewport.rotation % 180 === 0 ? [bt, Tt] : [Tt, bt];
                return {
                    offsetX: Yt,
                    offsetY: Nt
                }
            }
            ,
            fo = function() {
                us(this, st, !0);
                for (const yt of mt(this, et).values())
                    yt.isEmpty() && yt.remove();
                us(this, st, !1)
            }
            ,
            tr(gt, "_initialized", !1);
            let b = gt;
            e.AnnotationEditorLayer = b
        }
        , (s, e, i) => {
            var g, b, _, $, _e, tt, rt, et, it, st, ga, ba, _a, En, go, $a, jo;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.FreeTextEditor = void 0;
            var o = i(1)
              , a = i(5)
              , c = i(4)
              , d = i(29);
            const gt = class gt extends c.AnnotationEditor {
                constructor(Rt) {
                    super({
                        ...Rt,
                        name: "freeTextEditor"
                    });
                    ps(this, st);
                    ps(this, g, this.editorDivBlur.bind(this));
                    ps(this, b, this.editorDivFocus.bind(this));
                    ps(this, _, this.editorDivInput.bind(this));
                    ps(this, $, this.editorDivKeydown.bind(this));
                    ps(this, _e);
                    ps(this, tt, "");
                    ps(this, rt, `${this.id}-editor`);
                    ps(this, et);
                    ps(this, it, null);
                    us(this, _e, Rt.color || gt._defaultColor || c.AnnotationEditor._defaultLineColor),
                    us(this, et, Rt.fontSize || gt._defaultFontSize)
                }
                static get _keyboardManager() {
                    const Rt = gt.prototype
                      , Mt = At => At.isEmpty()
                      , ss = a.AnnotationEditorUIManager.TRANSLATE_SMALL
                      , zt = a.AnnotationEditorUIManager.TRANSLATE_BIG;
                    return (0,
                    o.shadow)(this, "_keyboardManager", new a.KeyboardManager([[["ctrl+s", "mac+meta+s", "ctrl+p", "mac+meta+p"], Rt.commitOrRemove, {
                        bubbles: !0
                    }], [["ctrl+Enter", "mac+meta+Enter", "Escape", "mac+Escape"], Rt.commitOrRemove], [["ArrowLeft", "mac+ArrowLeft"], Rt._translateEmpty, {
                        args: [-ss, 0],
                        checker: Mt
                    }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], Rt._translateEmpty, {
                        args: [-zt, 0],
                        checker: Mt
                    }], [["ArrowRight", "mac+ArrowRight"], Rt._translateEmpty, {
                        args: [ss, 0],
                        checker: Mt
                    }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], Rt._translateEmpty, {
                        args: [zt, 0],
                        checker: Mt
                    }], [["ArrowUp", "mac+ArrowUp"], Rt._translateEmpty, {
                        args: [0, -ss],
                        checker: Mt
                    }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], Rt._translateEmpty, {
                        args: [0, -zt],
                        checker: Mt
                    }], [["ArrowDown", "mac+ArrowDown"], Rt._translateEmpty, {
                        args: [0, ss],
                        checker: Mt
                    }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], Rt._translateEmpty, {
                        args: [0, zt],
                        checker: Mt
                    }]]))
                }
                static initialize(Rt) {
                    c.AnnotationEditor.initialize(Rt, {
                        strings: ["free_text2_default_content", "editor_free_text2_aria_label"]
                    });
                    const Mt = getComputedStyle(document.documentElement);
                    this._internalPadding = parseFloat(Mt.getPropertyValue("--freetext-padding"))
                }
                static updateDefaultParams(Rt, Mt) {
                    switch (Rt) {
                    case o.AnnotationEditorParamsType.FREETEXT_SIZE:
                        gt._defaultFontSize = Mt;
                        break;
                    case o.AnnotationEditorParamsType.FREETEXT_COLOR:
                        gt._defaultColor = Mt;
                        break
                    }
                }
                updateParams(Rt, Mt) {
                    switch (Rt) {
                    case o.AnnotationEditorParamsType.FREETEXT_SIZE:
                        cs(this, st, ga).call(this, Mt);
                        break;
                    case o.AnnotationEditorParamsType.FREETEXT_COLOR:
                        cs(this, st, ba).call(this, Mt);
                        break
                    }
                }
                static get defaultPropertiesToUpdate() {
                    return [[o.AnnotationEditorParamsType.FREETEXT_SIZE, gt._defaultFontSize], [o.AnnotationEditorParamsType.FREETEXT_COLOR, gt._defaultColor || c.AnnotationEditor._defaultLineColor]]
                }
                get propertiesToUpdate() {
                    return [[o.AnnotationEditorParamsType.FREETEXT_SIZE, mt(this, et)], [o.AnnotationEditorParamsType.FREETEXT_COLOR, mt(this, _e)]]
                }
                _translateEmpty(Rt, Mt) {
                    this._uiManager.translateSelectedEditors(Rt, Mt, !0)
                }
                getInitialTranslation() {
                    const Rt = this.parentScale;
                    return [-gt._internalPadding * Rt, -(gt._internalPadding + mt(this, et)) * Rt]
                }
                rebuild() {
                    this.parent && (super.rebuild(),
                    this.div !== null && (this.isAttachedToDOM || this.parent.add(this)))
                }
                enableEditMode() {
                    this.isInEditMode() || (this.parent.setEditingState(!1),
                    this.parent.updateToolbar(o.AnnotationEditorType.FREETEXT),
                    super.enableEditMode(),
                    this.overlayDiv.classList.remove("enabled"),
                    this.editorDiv.contentEditable = !0,
                    this._isDraggable = !1,
                    this.div.removeAttribute("aria-activedescendant"),
                    this.editorDiv.addEventListener("keydown", mt(this, $)),
                    this.editorDiv.addEventListener("focus", mt(this, b)),
                    this.editorDiv.addEventListener("blur", mt(this, g)),
                    this.editorDiv.addEventListener("input", mt(this, _)))
                }
                disableEditMode() {
                    this.isInEditMode() && (this.parent.setEditingState(!0),
                    super.disableEditMode(),
                    this.overlayDiv.classList.add("enabled"),
                    this.editorDiv.contentEditable = !1,
                    this.div.setAttribute("aria-activedescendant", mt(this, rt)),
                    this._isDraggable = !0,
                    this.editorDiv.removeEventListener("keydown", mt(this, $)),
                    this.editorDiv.removeEventListener("focus", mt(this, b)),
                    this.editorDiv.removeEventListener("blur", mt(this, g)),
                    this.editorDiv.removeEventListener("input", mt(this, _)),
                    this.div.focus({
                        preventScroll: !0
                    }),
                    this.isEditing = !1,
                    this.parent.div.classList.add("freeTextEditing"))
                }
                focusin(Rt) {
                    this._focusEventsAllowed && (super.focusin(Rt),
                    Rt.target !== this.editorDiv && this.editorDiv.focus())
                }
                onceAdded() {
                    var Rt;
                    if (this.width) {
                        cs(this, st, jo).call(this);
                        return
                    }
                    this.enableEditMode(),
                    this.editorDiv.focus(),
                    (Rt = this._initialOptions) != null && Rt.isCentered && this.center(),
                    this._initialOptions = null
                }
                isEmpty() {
                    return !this.editorDiv || this.editorDiv.innerText.trim() === ""
                }
                remove() {
                    this.isEditing = !1,
                    this.parent && (this.parent.setEditingState(!0),
                    this.parent.div.classList.add("freeTextEditing")),
                    super.remove()
                }
                commit() {
                    if (!this.isInEditMode())
                        return;
                    super.commit(),
                    this.disableEditMode();
                    const Rt = mt(this, tt)
                      , Mt = us(this, tt, cs(this, st, _a).call(this).trimEnd());
                    if (Rt === Mt)
                        return;
                    const ss = zt => {
                        if (us(this, tt, zt),
                        !zt) {
                            this.remove();
                            return
                        }
                        cs(this, st, go).call(this),
                        this._uiManager.rebuild(this),
                        cs(this, st, En).call(this)
                    }
                    ;
                    this.addCommands({
                        cmd: () => {
                            ss(Mt)
                        }
                        ,
                        undo: () => {
                            ss(Rt)
                        }
                        ,
                        mustExec: !1
                    }),
                    cs(this, st, En).call(this)
                }
                shouldGetKeyboardEvents() {
                    return this.isInEditMode()
                }
                enterInEditMode() {
                    this.enableEditMode(),
                    this.editorDiv.focus()
                }
                dblclick(Rt) {
                    this.enterInEditMode()
                }
                keydown(Rt) {
                    Rt.target === this.div && Rt.key === "Enter" && (this.enterInEditMode(),
                    Rt.preventDefault())
                }
                editorDivKeydown(Rt) {
                    gt._keyboardManager.exec(this, Rt)
                }
                editorDivFocus(Rt) {
                    this.isEditing = !0
                }
                editorDivBlur(Rt) {
                    this.isEditing = !1
                }
                editorDivInput(Rt) {
                    this.parent.div.classList.toggle("freeTextEditing", this.isEmpty())
                }
                disableEditing() {
                    this.editorDiv.setAttribute("role", "comment"),
                    this.editorDiv.removeAttribute("aria-multiline")
                }
                enableEditing() {
                    this.editorDiv.setAttribute("role", "textbox"),
                    this.editorDiv.setAttribute("aria-multiline", !0)
                }
                render() {
                    if (this.div)
                        return this.div;
                    let Rt, Mt;
                    this.width && (Rt = this.x,
                    Mt = this.y),
                    super.render(),
                    this.editorDiv = document.createElement("div"),
                    this.editorDiv.className = "internal",
                    this.editorDiv.setAttribute("id", mt(this, rt)),
                    this.enableEditing(),
                    c.AnnotationEditor._l10nPromise.get("editor_free_text2_aria_label").then(zt => {
                        var At;
                        return (At = this.editorDiv) == null ? void 0 : At.setAttribute("aria-label", zt)
                    }
                    ),
                    c.AnnotationEditor._l10nPromise.get("free_text2_default_content").then(zt => {
                        var At;
                        return (At = this.editorDiv) == null ? void 0 : At.setAttribute("default-content", zt)
                    }
                    ),
                    this.editorDiv.contentEditable = !0;
                    const {style: ss} = this.editorDiv;
                    if (ss.fontSize = `calc(${mt(this, et)}px * var(--scale-factor))`,
                    ss.color = mt(this, _e),
                    this.div.append(this.editorDiv),
                    this.overlayDiv = document.createElement("div"),
                    this.overlayDiv.classList.add("overlay", "enabled"),
                    this.div.append(this.overlayDiv),
                    (0,
                    a.bindEvents)(this, this.div, ["dblclick", "keydown"]),
                    this.width) {
                        const [zt,At] = this.parentDimensions;
                        if (this.annotationElementId) {
                            const {position: kt} = mt(this, it);
                            let[vt,bt] = this.getInitialTranslation();
                            [vt,bt] = this.pageTranslationToScreen(vt, bt);
                            const [Tt,Yt] = this.pageDimensions
                              , [Nt,jt] = this.pageTranslation;
                            let xt, Et;
                            switch (this.rotation) {
                            case 0:
                                xt = Rt + (kt[0] - Nt) / Tt,
                                Et = Mt + this.height - (kt[1] - jt) / Yt;
                                break;
                            case 90:
                                xt = Rt + (kt[0] - Nt) / Tt,
                                Et = Mt - (kt[1] - jt) / Yt,
                                [vt,bt] = [bt, -vt];
                                break;
                            case 180:
                                xt = Rt - this.width + (kt[0] - Nt) / Tt,
                                Et = Mt - (kt[1] - jt) / Yt,
                                [vt,bt] = [-vt, -bt];
                                break;
                            case 270:
                                xt = Rt + (kt[0] - Nt - this.height * Yt) / Tt,
                                Et = Mt + (kt[1] - jt - this.width * Tt) / Yt,
                                [vt,bt] = [-bt, vt];
                                break
                            }
                            this.setAt(xt * zt, Et * At, vt, bt)
                        } else
                            this.setAt(Rt * zt, Mt * At, this.width * zt, this.height * At);
                        cs(this, st, go).call(this),
                        this._isDraggable = !0,
                        this.editorDiv.contentEditable = !1
                    } else
                        this._isDraggable = !1,
                        this.editorDiv.contentEditable = !0;
                    return this.div
                }
                get contentDiv() {
                    return this.editorDiv
                }
                static deserialize(Rt, Mt, ss) {
                    let zt = null;
                    if (Rt instanceof d.FreeTextAnnotationElement) {
                        const {data: {defaultAppearanceData: {fontSize: kt, fontColor: vt}, rect: bt, rotation: Tt, id: Yt}, textContent: Nt, textPosition: jt, parent: {page: {pageNumber: xt}}} = Rt;
                        if (!Nt || Nt.length === 0)
                            return null;
                        zt = Rt = {
                            annotationType: o.AnnotationEditorType.FREETEXT,
                            color: Array.from(vt),
                            fontSize: kt,
                            value: Nt.join(`
`),
                            position: jt,
                            pageIndex: xt - 1,
                            rect: bt,
                            rotation: Tt,
                            id: Yt,
                            deleted: !1
                        }
                    }
                    const At = super.deserialize(Rt, Mt, ss);
                    return us(At, et, Rt.fontSize),
                    us(At, _e, o.Util.makeHexColor(...Rt.color)),
                    us(At, tt, Rt.value),
                    At.annotationElementId = Rt.id || null,
                    us(At, it, zt),
                    At
                }
                serialize(Rt=!1) {
                    if (this.isEmpty())
                        return null;
                    if (this.deleted)
                        return {
                            pageIndex: this.pageIndex,
                            id: this.annotationElementId,
                            deleted: !0
                        };
                    const Mt = gt._internalPadding * this.parentScale
                      , ss = this.getRect(Mt, Mt)
                      , zt = c.AnnotationEditor._colorManager.convert(this.isAttachedToDOM ? getComputedStyle(this.editorDiv).color : mt(this, _e))
                      , At = {
                        annotationType: o.AnnotationEditorType.FREETEXT,
                        color: zt,
                        fontSize: mt(this, et),
                        value: mt(this, tt),
                        pageIndex: this.pageIndex,
                        rect: ss,
                        rotation: this.rotation,
                        structTreeParentId: this._structTreeParentId
                    };
                    return Rt ? At : this.annotationElementId && !cs(this, st, $a).call(this, At) ? null : (At.id = this.annotationElementId,
                    At)
                }
            }
            ;
            g = new WeakMap,
            b = new WeakMap,
            _ = new WeakMap,
            $ = new WeakMap,
            _e = new WeakMap,
            tt = new WeakMap,
            rt = new WeakMap,
            et = new WeakMap,
            it = new WeakMap,
            st = new WeakSet,
            ga = function(Rt) {
                const Mt = zt => {
                    this.editorDiv.style.fontSize = `calc(${zt}px * var(--scale-factor))`,
                    this.translate(0, -(zt - mt(this, et)) * this.parentScale),
                    us(this, et, zt),
                    cs(this, st, En).call(this)
                }
                  , ss = mt(this, et);
                this.addCommands({
                    cmd: () => {
                        Mt(Rt)
                    }
                    ,
                    undo: () => {
                        Mt(ss)
                    }
                    ,
                    mustExec: !0,
                    type: o.AnnotationEditorParamsType.FREETEXT_SIZE,
                    overwriteIfSameType: !0,
                    keepUndo: !0
                })
            }
            ,
            ba = function(Rt) {
                const Mt = mt(this, _e);
                this.addCommands({
                    cmd: () => {
                        us(this, _e, this.editorDiv.style.color = Rt)
                    }
                    ,
                    undo: () => {
                        us(this, _e, this.editorDiv.style.color = Mt)
                    }
                    ,
                    mustExec: !0,
                    type: o.AnnotationEditorParamsType.FREETEXT_COLOR,
                    overwriteIfSameType: !0,
                    keepUndo: !0
                })
            }
            ,
            _a = function() {
                const Rt = this.editorDiv.getElementsByTagName("div");
                if (Rt.length === 0)
                    return this.editorDiv.innerText;
                const Mt = [];
                for (const ss of Rt)
                    Mt.push(ss.innerText.replace(/\r\n?|\n/, ""));
                return Mt.join(`
`)
            }
            ,
            En = function() {
                const [Rt,Mt] = this.parentDimensions;
                let ss;
                if (this.isAttachedToDOM)
                    ss = this.div.getBoundingClientRect();
                else {
                    const {currentLayer: zt, div: At} = this
                      , kt = At.style.display;
                    At.style.display = "hidden",
                    zt.div.append(this.div),
                    ss = At.getBoundingClientRect(),
                    At.remove(),
                    At.style.display = kt
                }
                this.rotation % 180 === this.parentRotation % 180 ? (this.width = ss.width / Rt,
                this.height = ss.height / Mt) : (this.width = ss.height / Rt,
                this.height = ss.width / Mt),
                this.fixAndSetPosition()
            }
            ,
            go = function() {
                if (this.editorDiv.replaceChildren(),
                !!mt(this, tt))
                    for (const Rt of mt(this, tt).split(`
`)) {
                        const Mt = document.createElement("div");
                        Mt.append(Rt ? document.createTextNode(Rt) : document.createElement("br")),
                        this.editorDiv.append(Mt)
                    }
            }
            ,
            $a = function(Rt) {
                const {value: Mt, fontSize: ss, color: zt, rect: At, pageIndex: kt} = mt(this, it);
                return Rt.value !== Mt || Rt.fontSize !== ss || Rt.rect.some( (vt, bt) => Math.abs(vt - At[bt]) >= 1) || Rt.color.some( (vt, bt) => vt !== zt[bt]) || Rt.pageIndex !== kt
            }
            ,
            jo = function(Rt=!1) {
                if (!this.annotationElementId)
                    return;
                if (cs(this, st, En).call(this),
                !Rt && (this.width === 0 || this.height === 0)) {
                    setTimeout( () => cs(this, st, jo).call(this, !0), 0);
                    return
                }
                const Mt = gt._internalPadding * this.parentScale;
                mt(this, it).rect = this.getRect(Mt, Mt)
            }
            ,
            tr(gt, "_freeTextDefaultContent", ""),
            tr(gt, "_internalPadding", 0),
            tr(gt, "_defaultColor", null),
            tr(gt, "_defaultFontSize", 10),
            tr(gt, "_type", "freetext");
            let h = gt;
            e.FreeTextEditor = h
        }
        , (s, e, i) => {
            var Et, St, Ur, xl, ds, js, ys, vs, Ss, _s, ns, xs, Lt, ts, ms, hs, bs, ks, Ts, ls, Ds, Ms, yl, Ln, yo, Eo, zs, Zs, sr, As, Es, Rs, as, vo, gs, es, ws, Is, El, bo;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.StampAnnotationElement = e.InkAnnotationElement = e.FreeTextAnnotationElement = e.AnnotationLayer = void 0;
            var o = i(1)
              , a = i(6)
              , c = i(3)
              , d = i(30)
              , h = i(31)
              , g = i(32);
            const b = 1e3
              , _ = 9
              , $ = new WeakSet;
            function _e(Us) {
                return {
                    width: Us[2] - Us[0],
                    height: Us[3] - Us[1]
                }
            }
            class tt {
                static create(is) {
                    switch (is.data.annotationType) {
                    case o.AnnotationType.LINK:
                        return new et(is);
                    case o.AnnotationType.TEXT:
                        return new it(is);
                    case o.AnnotationType.WIDGET:
                        switch (is.data.fieldType) {
                        case "Tx":
                            return new nt(is);
                        case "Btn":
                            return is.data.radioButton ? new ot(is) : is.data.checkBox ? new dt(is) : new at(is);
                        case "Ch":
                            return new ht(is);
                        case "Sig":
                            return new lt(is)
                        }
                        return new st(is);
                    case o.AnnotationType.POPUP:
                        return new pt(is);
                    case o.AnnotationType.FREETEXT:
                        return new wt(is);
                    case o.AnnotationType.LINE:
                        return new yt(is);
                    case o.AnnotationType.SQUARE:
                        return new Rt(is);
                    case o.AnnotationType.CIRCLE:
                        return new Mt(is);
                    case o.AnnotationType.POLYLINE:
                        return new ss(is);
                    case o.AnnotationType.CARET:
                        return new At(is);
                    case o.AnnotationType.INK:
                        return new kt(is);
                    case o.AnnotationType.POLYGON:
                        return new zt(is);
                    case o.AnnotationType.HIGHLIGHT:
                        return new vt(is);
                    case o.AnnotationType.UNDERLINE:
                        return new bt(is);
                    case o.AnnotationType.SQUIGGLY:
                        return new Tt(is);
                    case o.AnnotationType.STRIKEOUT:
                        return new Yt(is);
                    case o.AnnotationType.STAMP:
                        return new Nt(is);
                    case o.AnnotationType.FILEATTACHMENT:
                        return new jt(is);
                    default:
                        return new rt(is)
                    }
                }
            }
            const Pt = class Pt {
                constructor(is, {isRenderable: rs=!1, ignoreBorder: fs=!1, createQuadrilaterals: Ns=!1}={}) {
                    ps(this, Et, !1);
                    this.isRenderable = rs,
                    this.data = is.data,
                    this.layer = is.layer,
                    this.linkService = is.linkService,
                    this.downloadManager = is.downloadManager,
                    this.imageResourcesPath = is.imageResourcesPath,
                    this.renderForms = is.renderForms,
                    this.svgFactory = is.svgFactory,
                    this.annotationStorage = is.annotationStorage,
                    this.enableScripting = is.enableScripting,
                    this.hasJSActions = is.hasJSActions,
                    this._fieldObjects = is.fieldObjects,
                    this.parent = is.parent,
                    rs && (this.container = this._createContainer(fs)),
                    Ns && this._createQuadrilaterals()
                }
                static _hasPopupData({titleObj: is, contentsObj: rs, richText: fs}) {
                    return !!(is != null && is.str || rs != null && rs.str || fs != null && fs.str)
                }
                get hasPopupData() {
                    return Pt._hasPopupData(this.data)
                }
                _createContainer(is) {
                    const {data: rs, parent: {page: fs, viewport: Ns}} = this
                      , Cs = document.createElement("section");
                    Cs.setAttribute("data-annotation-id", rs.id),
                    this instanceof st || (Cs.tabIndex = b),
                    Cs.style.zIndex = this.parent.zIndex++,
                    this.data.popupRef && Cs.setAttribute("aria-haspopup", "dialog"),
                    rs.noRotate && Cs.classList.add("norotate");
                    const {pageWidth: Ls, pageHeight: Os, pageX: qs, pageY: Ws} = Ns.rawDims;
                    if (!rs.rect || this instanceof pt) {
                        const {rotation: Ys} = rs;
                        return !rs.hasOwnCanvas && Ys !== 0 && this.setRotation(Ys, Cs),
                        Cs
                    }
                    const {width: Bs, height: Qs} = _e(rs.rect)
                      , Gs = o.Util.normalizeRect([rs.rect[0], fs.view[3] - rs.rect[1] + fs.view[1], rs.rect[2], fs.view[3] - rs.rect[3] + fs.view[1]]);
                    if (!is && rs.borderStyle.width > 0) {
                        Cs.style.borderWidth = `${rs.borderStyle.width}px`;
                        const Ys = rs.borderStyle.horizontalCornerRadius
                          , er = rs.borderStyle.verticalCornerRadius;
                        if (Ys > 0 || er > 0) {
                            const ir = `calc(${Ys}px * var(--scale-factor)) / calc(${er}px * var(--scale-factor))`;
                            Cs.style.borderRadius = ir
                        } else if (this instanceof ot) {
                            const ir = `calc(${Bs}px * var(--scale-factor)) / calc(${Qs}px * var(--scale-factor))`;
                            Cs.style.borderRadius = ir
                        }
                        switch (rs.borderStyle.style) {
                        case o.AnnotationBorderStyleType.SOLID:
                            Cs.style.borderStyle = "solid";
                            break;
                        case o.AnnotationBorderStyleType.DASHED:
                            Cs.style.borderStyle = "dashed";
                            break;
                        case o.AnnotationBorderStyleType.BEVELED:
                            (0,
                            o.warn)("Unimplemented border style: beveled");
                            break;
                        case o.AnnotationBorderStyleType.INSET:
                            (0,
                            o.warn)("Unimplemented border style: inset");
                            break;
                        case o.AnnotationBorderStyleType.UNDERLINE:
                            Cs.style.borderBottomStyle = "solid";
                            break
                        }
                        const rr = rs.borderColor || null;
                        rr ? (us(this, Et, !0),
                        Cs.style.borderColor = o.Util.makeHexColor(rr[0] | 0, rr[1] | 0, rr[2] | 0)) : Cs.style.borderWidth = 0
                    }
                    Cs.style.left = `${100 * (Gs[0] - qs) / Ls}%`,
                    Cs.style.top = `${100 * (Gs[1] - Ws) / Os}%`;
                    const {rotation: Ks} = rs;
                    return rs.hasOwnCanvas || Ks === 0 ? (Cs.style.width = `${100 * Bs / Ls}%`,
                    Cs.style.height = `${100 * Qs / Os}%`) : this.setRotation(Ks, Cs),
                    Cs
                }
                setRotation(is, rs=this.container) {
                    if (!this.data.rect)
                        return;
                    const {pageWidth: fs, pageHeight: Ns} = this.parent.viewport.rawDims
                      , {width: Cs, height: Ls} = _e(this.data.rect);
                    let Os, qs;
                    is % 180 === 0 ? (Os = 100 * Cs / fs,
                    qs = 100 * Ls / Ns) : (Os = 100 * Ls / fs,
                    qs = 100 * Cs / Ns),
                    rs.style.width = `${Os}%`,
                    rs.style.height = `${qs}%`,
                    rs.setAttribute("data-main-rotation", (360 - is) % 360)
                }
                get _commonActions() {
                    const is = (rs, fs, Ns) => {
                        const Cs = Ns.detail[rs]
                          , Ls = Cs[0]
                          , Os = Cs.slice(1);
                        Ns.target.style[fs] = d.ColorConverters[`${Ls}_HTML`](Os),
                        this.annotationStorage.setValue(this.data.id, {
                            [fs]: d.ColorConverters[`${Ls}_rgb`](Os)
                        })
                    }
                    ;
                    return (0,
                    o.shadow)(this, "_commonActions", {
                        display: rs => {
                            const {display: fs} = rs.detail
                              , Ns = fs % 2 === 1;
                            this.container.style.visibility = Ns ? "hidden" : "visible",
                            this.annotationStorage.setValue(this.data.id, {
                                noView: Ns,
                                noPrint: fs === 1 || fs === 2
                            })
                        }
                        ,
                        print: rs => {
                            this.annotationStorage.setValue(this.data.id, {
                                noPrint: !rs.detail.print
                            })
                        }
                        ,
                        hidden: rs => {
                            const {hidden: fs} = rs.detail;
                            this.container.style.visibility = fs ? "hidden" : "visible",
                            this.annotationStorage.setValue(this.data.id, {
                                noPrint: fs,
                                noView: fs
                            })
                        }
                        ,
                        focus: rs => {
                            setTimeout( () => rs.target.focus({
                                preventScroll: !1
                            }), 0)
                        }
                        ,
                        userName: rs => {
                            rs.target.title = rs.detail.userName
                        }
                        ,
                        readonly: rs => {
                            rs.target.disabled = rs.detail.readonly
                        }
                        ,
                        required: rs => {
                            this._setRequired(rs.target, rs.detail.required)
                        }
                        ,
                        bgColor: rs => {
                            is("bgColor", "backgroundColor", rs)
                        }
                        ,
                        fillColor: rs => {
                            is("fillColor", "backgroundColor", rs)
                        }
                        ,
                        fgColor: rs => {
                            is("fgColor", "color", rs)
                        }
                        ,
                        textColor: rs => {
                            is("textColor", "color", rs)
                        }
                        ,
                        borderColor: rs => {
                            is("borderColor", "borderColor", rs)
                        }
                        ,
                        strokeColor: rs => {
                            is("strokeColor", "borderColor", rs)
                        }
                        ,
                        rotation: rs => {
                            const fs = rs.detail.rotation;
                            this.setRotation(fs),
                            this.annotationStorage.setValue(this.data.id, {
                                rotation: fs
                            })
                        }
                    })
                }
                _dispatchEventFromSandbox(is, rs) {
                    const fs = this._commonActions;
                    for (const Ns of Object.keys(rs.detail)) {
                        const Cs = is[Ns] || fs[Ns];
                        Cs == null || Cs(rs)
                    }
                }
                _setDefaultPropertiesFromJS(is) {
                    if (!this.enableScripting)
                        return;
                    const rs = this.annotationStorage.getRawValue(this.data.id);
                    if (!rs)
                        return;
                    const fs = this._commonActions;
                    for (const [Ns,Cs] of Object.entries(rs)) {
                        const Ls = fs[Ns];
                        if (Ls) {
                            const Os = {
                                detail: {
                                    [Ns]: Cs
                                },
                                target: is
                            };
                            Ls(Os),
                            delete rs[Ns]
                        }
                    }
                }
                _createQuadrilaterals() {
                    if (!this.container)
                        return;
                    const {quadPoints: is} = this.data;
                    if (!is)
                        return;
                    const [rs,fs,Ns,Cs] = this.data.rect;
                    if (is.length === 1) {
                        const [,{x: er, y: rr},{x: ir, y: cr}] = is[0];
                        if (Ns === er && Cs === rr && rs === ir && fs === cr)
                            return
                    }
                    const {style: Ls} = this.container;
                    let Os;
                    if (mt(this, Et)) {
                        const {borderColor: er, borderWidth: rr} = Ls;
                        Ls.borderWidth = 0,
                        Os = ["url('data:image/svg+xml;utf8,", '<svg xmlns="http://www.w3.org/2000/svg"', ' preserveAspectRatio="none" viewBox="0 0 1 1">', `<g fill="transparent" stroke="${er}" stroke-width="${rr}">`],
                        this.container.classList.add("hasBorder")
                    }
                    const qs = Ns - rs
                      , Ws = Cs - fs
                      , {svgFactory: Bs} = this
                      , Qs = Bs.createElement("svg");
                    Qs.classList.add("quadrilateralsContainer"),
                    Qs.setAttribute("width", 0),
                    Qs.setAttribute("height", 0);
                    const Gs = Bs.createElement("defs");
                    Qs.append(Gs);
                    const Ks = Bs.createElement("clipPath")
                      , Ys = `clippath_${this.data.id}`;
                    Ks.setAttribute("id", Ys),
                    Ks.setAttribute("clipPathUnits", "objectBoundingBox"),
                    Gs.append(Ks);
                    for (const [,{x: er, y: rr},{x: ir, y: cr}] of is) {
                        const ar = Bs.createElement("rect")
                          , Rr = (ir - rs) / qs
                          , _r = (Cs - rr) / Ws
                          , Ar = (er - ir) / qs
                          , To = (rr - cr) / Ws;
                        ar.setAttribute("x", Rr),
                        ar.setAttribute("y", _r),
                        ar.setAttribute("width", Ar),
                        ar.setAttribute("height", To),
                        Ks.append(ar),
                        Os == null || Os.push(`<rect vector-effect="non-scaling-stroke" x="${Rr}" y="${_r}" width="${Ar}" height="${To}"/>`)
                    }
                    mt(this, Et) && (Os.push("</g></svg>')"),
                    Ls.backgroundImage = Os.join("")),
                    this.container.append(Qs),
                    this.container.style.clipPath = `url(#${Ys})`
                }
                _createPopup() {
                    const {container: is, data: rs} = this;
                    is.setAttribute("aria-haspopup", "dialog");
                    const fs = new pt({
                        data: {
                            color: rs.color,
                            titleObj: rs.titleObj,
                            modificationDate: rs.modificationDate,
                            contentsObj: rs.contentsObj,
                            richText: rs.richText,
                            parentRect: rs.rect,
                            borderStyle: 0,
                            id: `popup_${rs.id}`,
                            rotation: rs.rotation
                        },
                        parent: this.parent,
                        elements: [this]
                    });
                    this.parent.div.append(fs.render())
                }
                render() {
                    (0,
                    o.unreachable)("Abstract method `AnnotationElement.render` called")
                }
                _getElementsByName(is, rs=null) {
                    const fs = [];
                    if (this._fieldObjects) {
                        const Ns = this._fieldObjects[is];
                        if (Ns)
                            for (const {page: Cs, id: Ls, exportValues: Os} of Ns) {
                                if (Cs === -1 || Ls === rs)
                                    continue;
                                const qs = typeof Os == "string" ? Os : null
                                  , Ws = document.querySelector(`[data-element-id="${Ls}"]`);
                                if (Ws && !$.has(Ws)) {
                                    (0,
                                    o.warn)(`_getElementsByName - element not allowed: ${Ls}`);
                                    continue
                                }
                                fs.push({
                                    id: Ls,
                                    exportValue: qs,
                                    domElement: Ws
                                })
                            }
                        return fs
                    }
                    for (const Ns of document.getElementsByName(is)) {
                        const {exportValue: Cs} = Ns
                          , Ls = Ns.getAttribute("data-element-id");
                        Ls !== rs && $.has(Ns) && fs.push({
                            id: Ls,
                            exportValue: Cs,
                            domElement: Ns
                        })
                    }
                    return fs
                }
                show() {
                    var is;
                    this.container && (this.container.hidden = !1),
                    (is = this.popup) == null || is.maybeShow()
                }
                hide() {
                    var is;
                    this.container && (this.container.hidden = !0),
                    (is = this.popup) == null || is.forceHide()
                }
                getElementsToTriggerPopup() {
                    return this.container
                }
                addHighlightArea() {
                    const is = this.getElementsToTriggerPopup();
                    if (Array.isArray(is))
                        for (const rs of is)
                            rs.classList.add("highlightArea");
                    else
                        is.classList.add("highlightArea")
                }
                _editOnDoubleClick() {
                    const {annotationEditorType: is, data: {id: rs}} = this;
                    this.container.addEventListener("dblclick", () => {
                        var fs;
                        (fs = this.linkService.eventBus) == null || fs.dispatch("switchannotationeditormode", {
                            source: this,
                            mode: is,
                            editId: rs
                        })
                    }
                    )
                }
            }
            ;
            Et = new WeakMap;
            let rt = Pt;
            class et extends rt {
                constructor(rs, fs=null) {
                    super(rs, {
                        isRenderable: !0,
                        ignoreBorder: !!(fs != null && fs.ignoreBorder),
                        createQuadrilaterals: !0
                    });
                    ps(this, St);
                    this.isTooltipOnly = rs.data.isTooltipOnly
                }
                render() {
                    const {data: rs, linkService: fs} = this
                      , Ns = document.createElement("a");
                    Ns.setAttribute("data-element-id", rs.id);
                    let Cs = !1;
                    return rs.url ? (fs.addLinkAttributes(Ns, rs.url, rs.newWindow),
                    Cs = !0) : rs.action ? (this._bindNamedAction(Ns, rs.action),
                    Cs = !0) : rs.attachment ? (this._bindAttachment(Ns, rs.attachment),
                    Cs = !0) : rs.setOCGState ? (cs(this, St, xl).call(this, Ns, rs.setOCGState),
                    Cs = !0) : rs.dest ? (this._bindLink(Ns, rs.dest),
                    Cs = !0) : (rs.actions && (rs.actions.Action || rs.actions["Mouse Up"] || rs.actions["Mouse Down"]) && this.enableScripting && this.hasJSActions && (this._bindJSAction(Ns, rs),
                    Cs = !0),
                    rs.resetForm ? (this._bindResetFormAction(Ns, rs.resetForm),
                    Cs = !0) : this.isTooltipOnly && !Cs && (this._bindLink(Ns, ""),
                    Cs = !0)),
                    this.container.classList.add("linkAnnotation"),
                    Cs && this.container.append(Ns),
                    this.container
                }
                _bindLink(rs, fs) {
                    rs.href = this.linkService.getDestinationHash(fs),
                    rs.onclick = () => (fs && this.linkService.goToDestination(fs),
                    !1),
                    (fs || fs === "") && cs(this, St, Ur).call(this)
                }
                _bindNamedAction(rs, fs) {
                    rs.href = this.linkService.getAnchorUrl(""),
                    rs.onclick = () => (this.linkService.executeNamedAction(fs),
                    !1),
                    cs(this, St, Ur).call(this)
                }
                _bindAttachment(rs, fs) {
                    rs.href = this.linkService.getAnchorUrl(""),
                    rs.onclick = () => {
                        var Ns;
                        return (Ns = this.downloadManager) == null || Ns.openOrDownloadData(this.container, fs.content, fs.filename),
                        !1
                    }
                    ,
                    cs(this, St, Ur).call(this)
                }
                _bindJSAction(rs, fs) {
                    rs.href = this.linkService.getAnchorUrl("");
                    const Ns = new Map([["Action", "onclick"], ["Mouse Up", "onmouseup"], ["Mouse Down", "onmousedown"]]);
                    for (const Cs of Object.keys(fs.actions)) {
                        const Ls = Ns.get(Cs);
                        Ls && (rs[Ls] = () => {
                            var Os;
                            return (Os = this.linkService.eventBus) == null || Os.dispatch("dispatcheventinsandbox", {
                                source: this,
                                detail: {
                                    id: fs.id,
                                    name: Cs
                                }
                            }),
                            !1
                        }
                        )
                    }
                    rs.onclick || (rs.onclick = () => !1),
                    cs(this, St, Ur).call(this)
                }
                _bindResetFormAction(rs, fs) {
                    const Ns = rs.onclick;
                    if (Ns || (rs.href = this.linkService.getAnchorUrl("")),
                    cs(this, St, Ur).call(this),
                    !this._fieldObjects) {
                        (0,
                        o.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),
                        Ns || (rs.onclick = () => !1);
                        return
                    }
                    rs.onclick = () => {
                        var Qs;
                        Ns == null || Ns();
                        const {fields: Cs, refs: Ls, include: Os} = fs
                          , qs = [];
                        if (Cs.length !== 0 || Ls.length !== 0) {
                            const Gs = new Set(Ls);
                            for (const Ks of Cs) {
                                const Ys = this._fieldObjects[Ks] || [];
                                for (const {id: er} of Ys)
                                    Gs.add(er)
                            }
                            for (const Ks of Object.values(this._fieldObjects))
                                for (const Ys of Ks)
                                    Gs.has(Ys.id) === Os && qs.push(Ys)
                        } else
                            for (const Gs of Object.values(this._fieldObjects))
                                qs.push(...Gs);
                        const Ws = this.annotationStorage
                          , Bs = [];
                        for (const Gs of qs) {
                            const {id: Ks} = Gs;
                            switch (Bs.push(Ks),
                            Gs.type) {
                            case "text":
                                {
                                    const er = Gs.defaultValue || "";
                                    Ws.setValue(Ks, {
                                        value: er
                                    });
                                    break
                                }
                            case "checkbox":
                            case "radiobutton":
                                {
                                    const er = Gs.defaultValue === Gs.exportValues;
                                    Ws.setValue(Ks, {
                                        value: er
                                    });
                                    break
                                }
                            case "combobox":
                            case "listbox":
                                {
                                    const er = Gs.defaultValue || "";
                                    Ws.setValue(Ks, {
                                        value: er
                                    });
                                    break
                                }
                            default:
                                continue
                            }
                            const Ys = document.querySelector(`[data-element-id="${Ks}"]`);
                            if (Ys) {
                                if (!$.has(Ys)) {
                                    (0,
                                    o.warn)(`_bindResetFormAction - element not allowed: ${Ks}`);
                                    continue
                                }
                            } else
                                continue;
                            Ys.dispatchEvent(new Event("resetform"))
                        }
                        return this.enableScripting && ((Qs = this.linkService.eventBus) == null || Qs.dispatch("dispatcheventinsandbox", {
                            source: this,
                            detail: {
                                id: "app",
                                ids: Bs,
                                name: "ResetForm"
                            }
                        })),
                        !1
                    }
                }
            }
            St = new WeakSet,
            Ur = function() {
                this.container.setAttribute("data-internal-link", "")
            }
            ,
            xl = function(rs, fs) {
                rs.href = this.linkService.getAnchorUrl(""),
                rs.onclick = () => (this.linkService.executeSetOCGState(fs),
                !1),
                cs(this, St, Ur).call(this)
            }
            ;
            class it extends rt {
                constructor(is) {
                    super(is, {
                        isRenderable: !0
                    })
                }
                render() {
                    this.container.classList.add("textAnnotation");
                    const is = document.createElement("img");
                    return is.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg",
                    is.alt = "[{{type}} Annotation]",
                    is.dataset.l10nId = "text_annotation_type",
                    is.dataset.l10nArgs = JSON.stringify({
                        type: this.data.name
                    }),
                    !this.data.popupRef && this.hasPopupData && this._createPopup(),
                    this.container.append(is),
                    this.container
                }
            }
            class st extends rt {
                render() {
                    return this.data.alternativeText && (this.container.title = this.data.alternativeText),
                    this.container
                }
                showElementAndHideCanvas(is) {
                    var rs;
                    this.data.hasOwnCanvas && (((rs = is.previousSibling) == null ? void 0 : rs.nodeName) === "CANVAS" && (is.previousSibling.hidden = !0),
                    is.hidden = !1)
                }
                _getKeyModifier(is) {
                    const {isWin: rs, isMac: fs} = o.FeatureTest.platform;
                    return rs && is.ctrlKey || fs && is.metaKey
                }
                _setEventListener(is, rs, fs, Ns, Cs) {
                    fs.includes("mouse") ? is.addEventListener(fs, Ls => {
                        var Os;
                        (Os = this.linkService.eventBus) == null || Os.dispatch("dispatcheventinsandbox", {
                            source: this,
                            detail: {
                                id: this.data.id,
                                name: Ns,
                                value: Cs(Ls),
                                shift: Ls.shiftKey,
                                modifier: this._getKeyModifier(Ls)
                            }
                        })
                    }
                    ) : is.addEventListener(fs, Ls => {
                        var Os;
                        if (fs === "blur") {
                            if (!rs.focused || !Ls.relatedTarget)
                                return;
                            rs.focused = !1
                        } else if (fs === "focus") {
                            if (rs.focused)
                                return;
                            rs.focused = !0
                        }
                        Cs && ((Os = this.linkService.eventBus) == null || Os.dispatch("dispatcheventinsandbox", {
                            source: this,
                            detail: {
                                id: this.data.id,
                                name: Ns,
                                value: Cs(Ls)
                            }
                        }))
                    }
                    )
                }
                _setEventListeners(is, rs, fs, Ns) {
                    var Cs, Ls, Os;
                    for (const [qs,Ws] of fs)
                        (Ws === "Action" || (Cs = this.data.actions) != null && Cs[Ws]) && ((Ws === "Focus" || Ws === "Blur") && (rs || (rs = {
                            focused: !1
                        })),
                        this._setEventListener(is, rs, qs, Ws, Ns),
                        Ws === "Focus" && !((Ls = this.data.actions) != null && Ls.Blur) ? this._setEventListener(is, rs, "blur", "Blur", null) : Ws === "Blur" && !((Os = this.data.actions) != null && Os.Focus) && this._setEventListener(is, rs, "focus", "Focus", null))
                }
                _setBackgroundColor(is) {
                    const rs = this.data.backgroundColor || null;
                    is.style.backgroundColor = rs === null ? "transparent" : o.Util.makeHexColor(rs[0], rs[1], rs[2])
                }
                _setTextStyle(is) {
                    const rs = ["left", "center", "right"]
                      , {fontColor: fs} = this.data.defaultAppearanceData
                      , Ns = this.data.defaultAppearanceData.fontSize || _
                      , Cs = is.style;
                    let Ls;
                    const Os = 2
                      , qs = Ws => Math.round(10 * Ws) / 10;
                    if (this.data.multiLine) {
                        const Ws = Math.abs(this.data.rect[3] - this.data.rect[1] - Os)
                          , Bs = Math.round(Ws / (o.LINE_FACTOR * Ns)) || 1
                          , Qs = Ws / Bs;
                        Ls = Math.min(Ns, qs(Qs / o.LINE_FACTOR))
                    } else {
                        const Ws = Math.abs(this.data.rect[3] - this.data.rect[1] - Os);
                        Ls = Math.min(Ns, qs(Ws / o.LINE_FACTOR))
                    }
                    Cs.fontSize = `calc(${Ls}px * var(--scale-factor))`,
                    Cs.color = o.Util.makeHexColor(fs[0], fs[1], fs[2]),
                    this.data.textAlignment !== null && (Cs.textAlign = rs[this.data.textAlignment])
                }
                _setRequired(is, rs) {
                    rs ? is.setAttribute("required", !0) : is.removeAttribute("required"),
                    is.setAttribute("aria-required", rs)
                }
            }
            class nt extends st {
                constructor(is) {
                    const rs = is.renderForms || !is.data.hasAppearance && !!is.data.fieldValue;
                    super(is, {
                        isRenderable: rs
                    })
                }
                setPropertyOnSiblings(is, rs, fs, Ns) {
                    const Cs = this.annotationStorage;
                    for (const Ls of this._getElementsByName(is.name, is.id))
                        Ls.domElement && (Ls.domElement[rs] = fs),
                        Cs.setValue(Ls.id, {
                            [Ns]: fs
                        })
                }
                render() {
                    var Ns, Cs;
                    const is = this.annotationStorage
                      , rs = this.data.id;
                    this.container.classList.add("textWidgetAnnotation");
                    let fs = null;
                    if (this.renderForms) {
                        const Ls = is.getValue(rs, {
                            value: this.data.fieldValue
                        });
                        let Os = Ls.value || "";
                        const qs = is.getValue(rs, {
                            charLimit: this.data.maxLen
                        }).charLimit;
                        qs && Os.length > qs && (Os = Os.slice(0, qs));
                        let Ws = Ls.formattedValue || ((Ns = this.data.textContent) == null ? void 0 : Ns.join(`
`)) || null;
                        Ws && this.data.comb && (Ws = Ws.replaceAll(/\s+/g, ""));
                        const Bs = {
                            userValue: Os,
                            formattedValue: Ws,
                            lastCommittedValue: null,
                            commitKey: 1,
                            focused: !1
                        };
                        this.data.multiLine ? (fs = document.createElement("textarea"),
                        fs.textContent = Ws ?? Os,
                        this.data.doNotScroll && (fs.style.overflowY = "hidden")) : (fs = document.createElement("input"),
                        fs.type = "text",
                        fs.setAttribute("value", Ws ?? Os),
                        this.data.doNotScroll && (fs.style.overflowX = "hidden")),
                        this.data.hasOwnCanvas && (fs.hidden = !0),
                        $.add(fs),
                        fs.setAttribute("data-element-id", rs),
                        fs.disabled = this.data.readOnly,
                        fs.name = this.data.fieldName,
                        fs.tabIndex = b,
                        this._setRequired(fs, this.data.required),
                        qs && (fs.maxLength = qs),
                        fs.addEventListener("input", Gs => {
                            is.setValue(rs, {
                                value: Gs.target.value
                            }),
                            this.setPropertyOnSiblings(fs, "value", Gs.target.value, "value"),
                            Bs.formattedValue = null
                        }
                        ),
                        fs.addEventListener("resetform", Gs => {
                            const Ks = this.data.defaultFieldValue ?? "";
                            fs.value = Bs.userValue = Ks,
                            Bs.formattedValue = null
                        }
                        );
                        let Qs = Gs => {
                            const {formattedValue: Ks} = Bs;
                            Ks != null && (Gs.target.value = Ks),
                            Gs.target.scrollLeft = 0
                        }
                        ;
                        if (this.enableScripting && this.hasJSActions) {
                            fs.addEventListener("focus", Ks => {
                                if (Bs.focused)
                                    return;
                                const {target: Ys} = Ks;
                                Bs.userValue && (Ys.value = Bs.userValue),
                                Bs.lastCommittedValue = Ys.value,
                                Bs.commitKey = 1,
                                Bs.focused = !0
                            }
                            ),
                            fs.addEventListener("updatefromsandbox", Ks => {
                                this.showElementAndHideCanvas(Ks.target);
                                const Ys = {
                                    value(er) {
                                        Bs.userValue = er.detail.value ?? "",
                                        is.setValue(rs, {
                                            value: Bs.userValue.toString()
                                        }),
                                        er.target.value = Bs.userValue
                                    },
                                    formattedValue(er) {
                                        const {formattedValue: rr} = er.detail;
                                        Bs.formattedValue = rr,
                                        rr != null && er.target !== document.activeElement && (er.target.value = rr),
                                        is.setValue(rs, {
                                            formattedValue: rr
                                        })
                                    },
                                    selRange(er) {
                                        er.target.setSelectionRange(...er.detail.selRange)
                                    },
                                    charLimit: er => {
                                        var ar;
                                        const {charLimit: rr} = er.detail
                                          , {target: ir} = er;
                                        if (rr === 0) {
                                            ir.removeAttribute("maxLength");
                                            return
                                        }
                                        ir.setAttribute("maxLength", rr);
                                        let cr = Bs.userValue;
                                        !cr || cr.length <= rr || (cr = cr.slice(0, rr),
                                        ir.value = Bs.userValue = cr,
                                        is.setValue(rs, {
                                            value: cr
                                        }),
                                        (ar = this.linkService.eventBus) == null || ar.dispatch("dispatcheventinsandbox", {
                                            source: this,
                                            detail: {
                                                id: rs,
                                                name: "Keystroke",
                                                value: cr,
                                                willCommit: !0,
                                                commitKey: 1,
                                                selStart: ir.selectionStart,
                                                selEnd: ir.selectionEnd
                                            }
                                        }))
                                    }
                                };
                                this._dispatchEventFromSandbox(Ys, Ks)
                            }
                            ),
                            fs.addEventListener("keydown", Ks => {
                                var rr;
                                Bs.commitKey = 1;
                                let Ys = -1;
                                if (Ks.key === "Escape" ? Ys = 0 : Ks.key === "Enter" && !this.data.multiLine ? Ys = 2 : Ks.key === "Tab" && (Bs.commitKey = 3),
                                Ys === -1)
                                    return;
                                const {value: er} = Ks.target;
                                Bs.lastCommittedValue !== er && (Bs.lastCommittedValue = er,
                                Bs.userValue = er,
                                (rr = this.linkService.eventBus) == null || rr.dispatch("dispatcheventinsandbox", {
                                    source: this,
                                    detail: {
                                        id: rs,
                                        name: "Keystroke",
                                        value: er,
                                        willCommit: !0,
                                        commitKey: Ys,
                                        selStart: Ks.target.selectionStart,
                                        selEnd: Ks.target.selectionEnd
                                    }
                                }))
                            }
                            );
                            const Gs = Qs;
                            Qs = null,
                            fs.addEventListener("blur", Ks => {
                                var er;
                                if (!Bs.focused || !Ks.relatedTarget)
                                    return;
                                Bs.focused = !1;
                                const {value: Ys} = Ks.target;
                                Bs.userValue = Ys,
                                Bs.lastCommittedValue !== Ys && ((er = this.linkService.eventBus) == null || er.dispatch("dispatcheventinsandbox", {
                                    source: this,
                                    detail: {
                                        id: rs,
                                        name: "Keystroke",
                                        value: Ys,
                                        willCommit: !0,
                                        commitKey: Bs.commitKey,
                                        selStart: Ks.target.selectionStart,
                                        selEnd: Ks.target.selectionEnd
                                    }
                                })),
                                Gs(Ks)
                            }
                            ),
                            (Cs = this.data.actions) != null && Cs.Keystroke && fs.addEventListener("beforeinput", Ks => {
                                var _r;
                                Bs.lastCommittedValue = null;
                                const {data: Ys, target: er} = Ks
                                  , {value: rr, selectionStart: ir, selectionEnd: cr} = er;
                                let ar = ir
                                  , Rr = cr;
                                switch (Ks.inputType) {
                                case "deleteWordBackward":
                                    {
                                        const Ar = rr.substring(0, ir).match(/\w*[^\w]*$/);
                                        Ar && (ar -= Ar[0].length);
                                        break
                                    }
                                case "deleteWordForward":
                                    {
                                        const Ar = rr.substring(ir).match(/^[^\w]*\w*/);
                                        Ar && (Rr += Ar[0].length);
                                        break
                                    }
                                case "deleteContentBackward":
                                    ir === cr && (ar -= 1);
                                    break;
                                case "deleteContentForward":
                                    ir === cr && (Rr += 1);
                                    break
                                }
                                Ks.preventDefault(),
                                (_r = this.linkService.eventBus) == null || _r.dispatch("dispatcheventinsandbox", {
                                    source: this,
                                    detail: {
                                        id: rs,
                                        name: "Keystroke",
                                        value: rr,
                                        change: Ys || "",
                                        willCommit: !1,
                                        selStart: ar,
                                        selEnd: Rr
                                    }
                                })
                            }
                            ),
                            this._setEventListeners(fs, Bs, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], Ks => Ks.target.value)
                        }
                        if (Qs && fs.addEventListener("blur", Qs),
                        this.data.comb) {
                            const Ks = (this.data.rect[2] - this.data.rect[0]) / qs;
                            fs.classList.add("comb"),
                            fs.style.letterSpacing = `calc(${Ks}px * var(--scale-factor) - 1ch)`
                        }
                    } else
                        fs = document.createElement("div"),
                        fs.textContent = this.data.fieldValue,
                        fs.style.verticalAlign = "middle",
                        fs.style.display = "table-cell";
                    return this._setTextStyle(fs),
                    this._setBackgroundColor(fs),
                    this._setDefaultPropertiesFromJS(fs),
                    this.container.append(fs),
                    this.container
                }
            }
            class lt extends st {
                constructor(is) {
                    super(is, {
                        isRenderable: !!is.data.hasOwnCanvas
                    })
                }
            }
            class dt extends st {
                constructor(is) {
                    super(is, {
                        isRenderable: is.renderForms
                    })
                }
                render() {
                    const is = this.annotationStorage
                      , rs = this.data
                      , fs = rs.id;
                    let Ns = is.getValue(fs, {
                        value: rs.exportValue === rs.fieldValue
                    }).value;
                    typeof Ns == "string" && (Ns = Ns !== "Off",
                    is.setValue(fs, {
                        value: Ns
                    })),
                    this.container.classList.add("buttonWidgetAnnotation", "checkBox");
                    const Cs = document.createElement("input");
                    return $.add(Cs),
                    Cs.setAttribute("data-element-id", fs),
                    Cs.disabled = rs.readOnly,
                    this._setRequired(Cs, this.data.required),
                    Cs.type = "checkbox",
                    Cs.name = rs.fieldName,
                    Ns && Cs.setAttribute("checked", !0),
                    Cs.setAttribute("exportValue", rs.exportValue),
                    Cs.tabIndex = b,
                    Cs.addEventListener("change", Ls => {
                        const {name: Os, checked: qs} = Ls.target;
                        for (const Ws of this._getElementsByName(Os, fs)) {
                            const Bs = qs && Ws.exportValue === rs.exportValue;
                            Ws.domElement && (Ws.domElement.checked = Bs),
                            is.setValue(Ws.id, {
                                value: Bs
                            })
                        }
                        is.setValue(fs, {
                            value: qs
                        })
                    }
                    ),
                    Cs.addEventListener("resetform", Ls => {
                        const Os = rs.defaultFieldValue || "Off";
                        Ls.target.checked = Os === rs.exportValue
                    }
                    ),
                    this.enableScripting && this.hasJSActions && (Cs.addEventListener("updatefromsandbox", Ls => {
                        const Os = {
                            value(qs) {
                                qs.target.checked = qs.detail.value !== "Off",
                                is.setValue(fs, {
                                    value: qs.target.checked
                                })
                            }
                        };
                        this._dispatchEventFromSandbox(Os, Ls)
                    }
                    ),
                    this._setEventListeners(Cs, null, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], Ls => Ls.target.checked)),
                    this._setBackgroundColor(Cs),
                    this._setDefaultPropertiesFromJS(Cs),
                    this.container.append(Cs),
                    this.container
                }
            }
            class ot extends st {
                constructor(is) {
                    super(is, {
                        isRenderable: is.renderForms
                    })
                }
                render() {
                    this.container.classList.add("buttonWidgetAnnotation", "radioButton");
                    const is = this.annotationStorage
                      , rs = this.data
                      , fs = rs.id;
                    let Ns = is.getValue(fs, {
                        value: rs.fieldValue === rs.buttonValue
                    }).value;
                    typeof Ns == "string" && (Ns = Ns !== rs.buttonValue,
                    is.setValue(fs, {
                        value: Ns
                    }));
                    const Cs = document.createElement("input");
                    if ($.add(Cs),
                    Cs.setAttribute("data-element-id", fs),
                    Cs.disabled = rs.readOnly,
                    this._setRequired(Cs, this.data.required),
                    Cs.type = "radio",
                    Cs.name = rs.fieldName,
                    Ns && Cs.setAttribute("checked", !0),
                    Cs.tabIndex = b,
                    Cs.addEventListener("change", Ls => {
                        const {name: Os, checked: qs} = Ls.target;
                        for (const Ws of this._getElementsByName(Os, fs))
                            is.setValue(Ws.id, {
                                value: !1
                            });
                        is.setValue(fs, {
                            value: qs
                        })
                    }
                    ),
                    Cs.addEventListener("resetform", Ls => {
                        const Os = rs.defaultFieldValue;
                        Ls.target.checked = Os != null && Os === rs.buttonValue
                    }
                    ),
                    this.enableScripting && this.hasJSActions) {
                        const Ls = rs.buttonValue;
                        Cs.addEventListener("updatefromsandbox", Os => {
                            const qs = {
                                value: Ws => {
                                    const Bs = Ls === Ws.detail.value;
                                    for (const Qs of this._getElementsByName(Ws.target.name)) {
                                        const Gs = Bs && Qs.id === fs;
                                        Qs.domElement && (Qs.domElement.checked = Gs),
                                        is.setValue(Qs.id, {
                                            value: Gs
                                        })
                                    }
                                }
                            };
                            this._dispatchEventFromSandbox(qs, Os)
                        }
                        ),
                        this._setEventListeners(Cs, null, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], Os => Os.target.checked)
                    }
                    return this._setBackgroundColor(Cs),
                    this._setDefaultPropertiesFromJS(Cs),
                    this.container.append(Cs),
                    this.container
                }
            }
            class at extends et {
                constructor(is) {
                    super(is, {
                        ignoreBorder: is.data.hasAppearance
                    })
                }
                render() {
                    const is = super.render();
                    is.classList.add("buttonWidgetAnnotation", "pushButton"),
                    this.data.alternativeText && (is.title = this.data.alternativeText);
                    const rs = is.lastChild;
                    return this.enableScripting && this.hasJSActions && rs && (this._setDefaultPropertiesFromJS(rs),
                    rs.addEventListener("updatefromsandbox", fs => {
                        this._dispatchEventFromSandbox({}, fs)
                    }
                    )),
                    is
                }
            }
            class ht extends st {
                constructor(is) {
                    super(is, {
                        isRenderable: is.renderForms
                    })
                }
                render() {
                    this.container.classList.add("choiceWidgetAnnotation");
                    const is = this.annotationStorage
                      , rs = this.data.id
                      , fs = is.getValue(rs, {
                        value: this.data.fieldValue
                    })
                      , Ns = document.createElement("select");
                    $.add(Ns),
                    Ns.setAttribute("data-element-id", rs),
                    Ns.disabled = this.data.readOnly,
                    this._setRequired(Ns, this.data.required),
                    Ns.name = this.data.fieldName,
                    Ns.tabIndex = b;
                    let Cs = this.data.combo && this.data.options.length > 0;
                    this.data.combo || (Ns.size = this.data.options.length,
                    this.data.multiSelect && (Ns.multiple = !0)),
                    Ns.addEventListener("resetform", Bs => {
                        const Qs = this.data.defaultFieldValue;
                        for (const Gs of Ns.options)
                            Gs.selected = Gs.value === Qs
                    }
                    );
                    for (const Bs of this.data.options) {
                        const Qs = document.createElement("option");
                        Qs.textContent = Bs.displayValue,
                        Qs.value = Bs.exportValue,
                        fs.value.includes(Bs.exportValue) && (Qs.setAttribute("selected", !0),
                        Cs = !1),
                        Ns.append(Qs)
                    }
                    let Ls = null;
                    if (Cs) {
                        const Bs = document.createElement("option");
                        Bs.value = " ",
                        Bs.setAttribute("hidden", !0),
                        Bs.setAttribute("selected", !0),
                        Ns.prepend(Bs),
                        Ls = () => {
                            Bs.remove(),
                            Ns.removeEventListener("input", Ls),
                            Ls = null
                        }
                        ,
                        Ns.addEventListener("input", Ls)
                    }
                    const Os = Bs => {
                        const Qs = Bs ? "value" : "textContent"
                          , {options: Gs, multiple: Ks} = Ns;
                        return Ks ? Array.prototype.filter.call(Gs, Ys => Ys.selected).map(Ys => Ys[Qs]) : Gs.selectedIndex === -1 ? null : Gs[Gs.selectedIndex][Qs]
                    }
                    ;
                    let qs = Os(!1);
                    const Ws = Bs => {
                        const Qs = Bs.target.options;
                        return Array.prototype.map.call(Qs, Gs => ({
                            displayValue: Gs.textContent,
                            exportValue: Gs.value
                        }))
                    }
                    ;
                    return this.enableScripting && this.hasJSActions ? (Ns.addEventListener("updatefromsandbox", Bs => {
                        const Qs = {
                            value(Gs) {
                                Ls == null || Ls();
                                const Ks = Gs.detail.value
                                  , Ys = new Set(Array.isArray(Ks) ? Ks : [Ks]);
                                for (const er of Ns.options)
                                    er.selected = Ys.has(er.value);
                                is.setValue(rs, {
                                    value: Os(!0)
                                }),
                                qs = Os(!1)
                            },
                            multipleSelection(Gs) {
                                Ns.multiple = !0
                            },
                            remove(Gs) {
                                const Ks = Ns.options
                                  , Ys = Gs.detail.remove;
                                Ks[Ys].selected = !1,
                                Ns.remove(Ys),
                                Ks.length > 0 && Array.prototype.findIndex.call(Ks, rr => rr.selected) === -1 && (Ks[0].selected = !0),
                                is.setValue(rs, {
                                    value: Os(!0),
                                    items: Ws(Gs)
                                }),
                                qs = Os(!1)
                            },
                            clear(Gs) {
                                for (; Ns.length !== 0; )
                                    Ns.remove(0);
                                is.setValue(rs, {
                                    value: null,
                                    items: []
                                }),
                                qs = Os(!1)
                            },
                            insert(Gs) {
                                const {index: Ks, displayValue: Ys, exportValue: er} = Gs.detail.insert
                                  , rr = Ns.children[Ks]
                                  , ir = document.createElement("option");
                                ir.textContent = Ys,
                                ir.value = er,
                                rr ? rr.before(ir) : Ns.append(ir),
                                is.setValue(rs, {
                                    value: Os(!0),
                                    items: Ws(Gs)
                                }),
                                qs = Os(!1)
                            },
                            items(Gs) {
                                const {items: Ks} = Gs.detail;
                                for (; Ns.length !== 0; )
                                    Ns.remove(0);
                                for (const Ys of Ks) {
                                    const {displayValue: er, exportValue: rr} = Ys
                                      , ir = document.createElement("option");
                                    ir.textContent = er,
                                    ir.value = rr,
                                    Ns.append(ir)
                                }
                                Ns.options.length > 0 && (Ns.options[0].selected = !0),
                                is.setValue(rs, {
                                    value: Os(!0),
                                    items: Ws(Gs)
                                }),
                                qs = Os(!1)
                            },
                            indices(Gs) {
                                const Ks = new Set(Gs.detail.indices);
                                for (const Ys of Gs.target.options)
                                    Ys.selected = Ks.has(Ys.index);
                                is.setValue(rs, {
                                    value: Os(!0)
                                }),
                                qs = Os(!1)
                            },
                            editable(Gs) {
                                Gs.target.disabled = !Gs.detail.editable
                            }
                        };
                        this._dispatchEventFromSandbox(Qs, Bs)
                    }
                    ),
                    Ns.addEventListener("input", Bs => {
                        var Gs;
                        const Qs = Os(!0);
                        is.setValue(rs, {
                            value: Qs
                        }),
                        Bs.preventDefault(),
                        (Gs = this.linkService.eventBus) == null || Gs.dispatch("dispatcheventinsandbox", {
                            source: this,
                            detail: {
                                id: rs,
                                name: "Keystroke",
                                value: qs,
                                changeEx: Qs,
                                willCommit: !1,
                                commitKey: 1,
                                keyDown: !1
                            }
                        })
                    }
                    ),
                    this._setEventListeners(Ns, null, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"], ["input", "Action"], ["input", "Validate"]], Bs => Bs.target.value)) : Ns.addEventListener("input", function(Bs) {
                        is.setValue(rs, {
                            value: Os(!0)
                        })
                    }),
                    this.data.combo && this._setTextStyle(Ns),
                    this._setBackgroundColor(Ns),
                    this._setDefaultPropertiesFromJS(Ns),
                    this.container.append(Ns),
                    this.container
                }
            }
            class pt extends rt {
                constructor(is) {
                    const {data: rs, elements: fs} = is;
                    super(is, {
                        isRenderable: rt._hasPopupData(rs)
                    }),
                    this.elements = fs
                }
                render() {
                    this.container.classList.add("popupAnnotation");
                    const is = new gt({
                        container: this.container,
                        color: this.data.color,
                        titleObj: this.data.titleObj,
                        modificationDate: this.data.modificationDate,
                        contentsObj: this.data.contentsObj,
                        richText: this.data.richText,
                        rect: this.data.rect,
                        parentRect: this.data.parentRect || null,
                        parent: this.parent,
                        elements: this.elements,
                        open: this.data.open
                    })
                      , rs = [];
                    for (const fs of this.elements)
                        fs.popup = is,
                        rs.push(fs.data.id),
                        fs.addHighlightArea();
                    return this.container.setAttribute("aria-controls", rs.map(fs => `${o.AnnotationPrefix}${fs}`).join(",")),
                    this.container
                }
            }
            class gt {
                constructor({container: is, color: rs, elements: fs, titleObj: Ns, modificationDate: Cs, contentsObj: Ls, richText: Os, parent: qs, rect: Ws, parentRect: Bs, open: Qs}) {
                    ps(this, Ms);
                    ps(this, ds, null);
                    ps(this, js, cs(this, Ms, yl).bind(this));
                    ps(this, ys, cs(this, Ms, Eo).bind(this));
                    ps(this, vs, cs(this, Ms, yo).bind(this));
                    ps(this, Ss, cs(this, Ms, Ln).bind(this));
                    ps(this, _s, null);
                    ps(this, ns, null);
                    ps(this, xs, null);
                    ps(this, Lt, null);
                    ps(this, ts, null);
                    ps(this, ms, null);
                    ps(this, hs, !1);
                    ps(this, bs, null);
                    ps(this, ks, null);
                    ps(this, Ts, null);
                    ps(this, ls, null);
                    ps(this, Ds, !1);
                    var Ks;
                    us(this, ns, is),
                    us(this, ls, Ns),
                    us(this, xs, Ls),
                    us(this, Ts, Os),
                    us(this, ts, qs),
                    us(this, _s, rs),
                    us(this, ks, Ws),
                    us(this, ms, Bs),
                    us(this, Lt, fs);
                    const Gs = a.PDFDateString.toDateObject(Cs);
                    Gs && us(this, ds, qs.l10n.get("annotation_date_string", {
                        date: Gs.toLocaleDateString(),
                        time: Gs.toLocaleTimeString()
                    })),
                    this.trigger = fs.flatMap(Ys => Ys.getElementsToTriggerPopup());
                    for (const Ys of this.trigger)
                        Ys.addEventListener("click", mt(this, Ss)),
                        Ys.addEventListener("mouseenter", mt(this, vs)),
                        Ys.addEventListener("mouseleave", mt(this, ys)),
                        Ys.classList.add("popupTriggerArea");
                    for (const Ys of fs)
                        (Ks = Ys.container) == null || Ks.addEventListener("keydown", mt(this, js));
                    mt(this, ns).hidden = !0,
                    Qs && cs(this, Ms, Ln).call(this)
                }
                render() {
                    if (mt(this, bs))
                        return;
                    const {page: {view: is}, viewport: {rawDims: {pageWidth: rs, pageHeight: fs, pageX: Ns, pageY: Cs}}} = mt(this, ts)
                      , Ls = us(this, bs, document.createElement("div"));
                    if (Ls.className = "popup",
                    mt(this, _s)) {
                        const ar = Ls.style.outlineColor = o.Util.makeHexColor(...mt(this, _s));
                        CSS.supports("background-color", "color-mix(in srgb, red 30%, white)") ? Ls.style.backgroundColor = `color-mix(in srgb, ${ar} 30%, white)` : Ls.style.backgroundColor = o.Util.makeHexColor(...mt(this, _s).map(_r => Math.floor(.7 * (255 - _r) + _r)))
                    }
                    const Os = document.createElement("span");
                    Os.className = "header";
                    const qs = document.createElement("h1");
                    if (Os.append(qs),
                    {dir: qs.dir, str: qs.textContent} = mt(this, ls),
                    Ls.append(Os),
                    mt(this, ds)) {
                        const ar = document.createElement("span");
                        ar.classList.add("popupDate"),
                        mt(this, ds).then(Rr => {
                            ar.textContent = Rr
                        }
                        ),
                        Os.append(ar)
                    }
                    const Ws = mt(this, xs)
                      , Bs = mt(this, Ts);
                    if (Bs != null && Bs.str && (!(Ws != null && Ws.str) || Ws.str === Bs.str))
                        g.XfaLayer.render({
                            xfaHtml: Bs.html,
                            intent: "richText",
                            div: Ls
                        }),
                        Ls.lastChild.classList.add("richText", "popupContent");
                    else {
                        const ar = this._formatContents(Ws);
                        Ls.append(ar)
                    }
                    let Qs = !!mt(this, ms)
                      , Gs = Qs ? mt(this, ms) : mt(this, ks);
                    for (const ar of mt(this, Lt))
                        if (!Gs || o.Util.intersect(ar.data.rect, Gs) !== null) {
                            Gs = ar.data.rect,
                            Qs = !0;
                            break
                        }
                    const Ks = o.Util.normalizeRect([Gs[0], is[3] - Gs[1] + is[1], Gs[2], is[3] - Gs[3] + is[1]])
                      , er = Qs ? Gs[2] - Gs[0] + 5 : 0
                      , rr = Ks[0] + er
                      , ir = Ks[1]
                      , {style: cr} = mt(this, ns);
                    cr.left = `${100 * (rr - Ns) / rs}%`,
                    cr.top = `${100 * (ir - Cs) / fs}%`,
                    mt(this, ns).append(Ls)
                }
                _formatContents({str: is, dir: rs}) {
                    const fs = document.createElement("p");
                    fs.classList.add("popupContent"),
                    fs.dir = rs;
                    const Ns = is.split(/(?:\r\n?|\n)/);
                    for (let Cs = 0, Ls = Ns.length; Cs < Ls; ++Cs) {
                        const Os = Ns[Cs];
                        fs.append(document.createTextNode(Os)),
                        Cs < Ls - 1 && fs.append(document.createElement("br"))
                    }
                    return fs
                }
                forceHide() {
                    us(this, Ds, this.isVisible),
                    mt(this, Ds) && (mt(this, ns).hidden = !0)
                }
                maybeShow() {
                    mt(this, Ds) && (us(this, Ds, !1),
                    mt(this, ns).hidden = !1)
                }
                get isVisible() {
                    return mt(this, ns).hidden === !1
                }
            }
            ds = new WeakMap,
            js = new WeakMap,
            ys = new WeakMap,
            vs = new WeakMap,
            Ss = new WeakMap,
            _s = new WeakMap,
            ns = new WeakMap,
            xs = new WeakMap,
            Lt = new WeakMap,
            ts = new WeakMap,
            ms = new WeakMap,
            hs = new WeakMap,
            bs = new WeakMap,
            ks = new WeakMap,
            Ts = new WeakMap,
            ls = new WeakMap,
            Ds = new WeakMap,
            Ms = new WeakSet,
            yl = function(is) {
                is.altKey || is.shiftKey || is.ctrlKey || is.metaKey || (is.key === "Enter" || is.key === "Escape" && mt(this, hs)) && cs(this, Ms, Ln).call(this)
            }
            ,
            Ln = function() {
                us(this, hs, !mt(this, hs)),
                mt(this, hs) ? (cs(this, Ms, yo).call(this),
                mt(this, ns).addEventListener("click", mt(this, Ss)),
                mt(this, ns).addEventListener("keydown", mt(this, js))) : (cs(this, Ms, Eo).call(this),
                mt(this, ns).removeEventListener("click", mt(this, Ss)),
                mt(this, ns).removeEventListener("keydown", mt(this, js)))
            }
            ,
            yo = function() {
                mt(this, bs) || this.render(),
                this.isVisible ? mt(this, hs) && mt(this, ns).classList.add("focused") : (mt(this, ns).hidden = !1,
                mt(this, ns).style.zIndex = parseInt(mt(this, ns).style.zIndex) + 1e3)
            }
            ,
            Eo = function() {
                mt(this, ns).classList.remove("focused"),
                !(mt(this, hs) || !this.isVisible) && (mt(this, ns).hidden = !0,
                mt(this, ns).style.zIndex = parseInt(mt(this, ns).style.zIndex) - 1e3)
            }
            ;
            class wt extends rt {
                constructor(is) {
                    super(is, {
                        isRenderable: !0,
                        ignoreBorder: !0
                    }),
                    this.textContent = is.data.textContent,
                    this.textPosition = is.data.textPosition,
                    this.annotationEditorType = o.AnnotationEditorType.FREETEXT
                }
                render() {
                    if (this.container.classList.add("freeTextAnnotation"),
                    this.textContent) {
                        const is = document.createElement("div");
                        is.classList.add("annotationTextContent"),
                        is.setAttribute("role", "comment");
                        for (const rs of this.textContent) {
                            const fs = document.createElement("span");
                            fs.textContent = rs,
                            is.append(fs)
                        }
                        this.container.append(is)
                    }
                    return !this.data.popupRef && this.hasPopupData && this._createPopup(),
                    this._editOnDoubleClick(),
                    this.container
                }
            }
            e.FreeTextAnnotationElement = wt;
            class yt extends rt {
                constructor(rs) {
                    super(rs, {
                        isRenderable: !0,
                        ignoreBorder: !0
                    });
                    ps(this, zs, null)
                }
                render() {
                    this.container.classList.add("lineAnnotation");
                    const rs = this.data
                      , {width: fs, height: Ns} = _e(rs.rect)
                      , Cs = this.svgFactory.create(fs, Ns, !0)
                      , Ls = us(this, zs, this.svgFactory.createElement("svg:line"));
                    return Ls.setAttribute("x1", rs.rect[2] - rs.lineCoordinates[0]),
                    Ls.setAttribute("y1", rs.rect[3] - rs.lineCoordinates[1]),
                    Ls.setAttribute("x2", rs.rect[2] - rs.lineCoordinates[2]),
                    Ls.setAttribute("y2", rs.rect[3] - rs.lineCoordinates[3]),
                    Ls.setAttribute("stroke-width", rs.borderStyle.width || 1),
                    Ls.setAttribute("stroke", "transparent"),
                    Ls.setAttribute("fill", "transparent"),
                    Cs.append(Ls),
                    this.container.append(Cs),
                    !rs.popupRef && this.hasPopupData && this._createPopup(),
                    this.container
                }
                getElementsToTriggerPopup() {
                    return mt(this, zs)
                }
                addHighlightArea() {
                    this.container.classList.add("highlightArea")
                }
            }
            zs = new WeakMap;
            class Rt extends rt {
                constructor(rs) {
                    super(rs, {
                        isRenderable: !0,
                        ignoreBorder: !0
                    });
                    ps(this, Zs, null)
                }
                render() {
                    this.container.classList.add("squareAnnotation");
                    const rs = this.data
                      , {width: fs, height: Ns} = _e(rs.rect)
                      , Cs = this.svgFactory.create(fs, Ns, !0)
                      , Ls = rs.borderStyle.width
                      , Os = us(this, Zs, this.svgFactory.createElement("svg:rect"));
                    return Os.setAttribute("x", Ls / 2),
                    Os.setAttribute("y", Ls / 2),
                    Os.setAttribute("width", fs - Ls),
                    Os.setAttribute("height", Ns - Ls),
                    Os.setAttribute("stroke-width", Ls || 1),
                    Os.setAttribute("stroke", "transparent"),
                    Os.setAttribute("fill", "transparent"),
                    Cs.append(Os),
                    this.container.append(Cs),
                    !rs.popupRef && this.hasPopupData && this._createPopup(),
                    this.container
                }
                getElementsToTriggerPopup() {
                    return mt(this, Zs)
                }
                addHighlightArea() {
                    this.container.classList.add("highlightArea")
                }
            }
            Zs = new WeakMap;
            class Mt extends rt {
                constructor(rs) {
                    super(rs, {
                        isRenderable: !0,
                        ignoreBorder: !0
                    });
                    ps(this, sr, null)
                }
                render() {
                    this.container.classList.add("circleAnnotation");
                    const rs = this.data
                      , {width: fs, height: Ns} = _e(rs.rect)
                      , Cs = this.svgFactory.create(fs, Ns, !0)
                      , Ls = rs.borderStyle.width
                      , Os = us(this, sr, this.svgFactory.createElement("svg:ellipse"));
                    return Os.setAttribute("cx", fs / 2),
                    Os.setAttribute("cy", Ns / 2),
                    Os.setAttribute("rx", fs / 2 - Ls / 2),
                    Os.setAttribute("ry", Ns / 2 - Ls / 2),
                    Os.setAttribute("stroke-width", Ls || 1),
                    Os.setAttribute("stroke", "transparent"),
                    Os.setAttribute("fill", "transparent"),
                    Cs.append(Os),
                    this.container.append(Cs),
                    !rs.popupRef && this.hasPopupData && this._createPopup(),
                    this.container
                }
                getElementsToTriggerPopup() {
                    return mt(this, sr)
                }
                addHighlightArea() {
                    this.container.classList.add("highlightArea")
                }
            }
            sr = new WeakMap;
            class ss extends rt {
                constructor(rs) {
                    super(rs, {
                        isRenderable: !0,
                        ignoreBorder: !0
                    });
                    ps(this, As, null);
                    this.containerClassName = "polylineAnnotation",
                    this.svgElementName = "svg:polyline"
                }
                render() {
                    this.container.classList.add(this.containerClassName);
                    const rs = this.data
                      , {width: fs, height: Ns} = _e(rs.rect)
                      , Cs = this.svgFactory.create(fs, Ns, !0);
                    let Ls = [];
                    for (const qs of rs.vertices) {
                        const Ws = qs.x - rs.rect[0]
                          , Bs = rs.rect[3] - qs.y;
                        Ls.push(Ws + "," + Bs)
                    }
                    Ls = Ls.join(" ");
                    const Os = us(this, As, this.svgFactory.createElement(this.svgElementName));
                    return Os.setAttribute("points", Ls),
                    Os.setAttribute("stroke-width", rs.borderStyle.width || 1),
                    Os.setAttribute("stroke", "transparent"),
                    Os.setAttribute("fill", "transparent"),
                    Cs.append(Os),
                    this.container.append(Cs),
                    !rs.popupRef && this.hasPopupData && this._createPopup(),
                    this.container
                }
                getElementsToTriggerPopup() {
                    return mt(this, As)
                }
                addHighlightArea() {
                    this.container.classList.add("highlightArea")
                }
            }
            As = new WeakMap;
            class zt extends ss {
                constructor(is) {
                    super(is),
                    this.containerClassName = "polygonAnnotation",
                    this.svgElementName = "svg:polygon"
                }
            }
            class At extends rt {
                constructor(is) {
                    super(is, {
                        isRenderable: !0,
                        ignoreBorder: !0
                    })
                }
                render() {
                    return this.container.classList.add("caretAnnotation"),
                    !this.data.popupRef && this.hasPopupData && this._createPopup(),
                    this.container
                }
            }
            class kt extends rt {
                constructor(rs) {
                    super(rs, {
                        isRenderable: !0,
                        ignoreBorder: !0
                    });
                    ps(this, Es, []);
                    this.containerClassName = "inkAnnotation",
                    this.svgElementName = "svg:polyline",
                    this.annotationEditorType = o.AnnotationEditorType.INK
                }
                render() {
                    this.container.classList.add(this.containerClassName);
                    const rs = this.data
                      , {width: fs, height: Ns} = _e(rs.rect)
                      , Cs = this.svgFactory.create(fs, Ns, !0);
                    for (const Ls of rs.inkLists) {
                        let Os = [];
                        for (const Ws of Ls) {
                            const Bs = Ws.x - rs.rect[0]
                              , Qs = rs.rect[3] - Ws.y;
                            Os.push(`${Bs},${Qs}`)
                        }
                        Os = Os.join(" ");
                        const qs = this.svgFactory.createElement(this.svgElementName);
                        mt(this, Es).push(qs),
                        qs.setAttribute("points", Os),
                        qs.setAttribute("stroke-width", rs.borderStyle.width || 1),
                        qs.setAttribute("stroke", "transparent"),
                        qs.setAttribute("fill", "transparent"),
                        !rs.popupRef && this.hasPopupData && this._createPopup(),
                        Cs.append(qs)
                    }
                    return this.container.append(Cs),
                    this.container
                }
                getElementsToTriggerPopup() {
                    return mt(this, Es)
                }
                addHighlightArea() {
                    this.container.classList.add("highlightArea")
                }
            }
            Es = new WeakMap,
            e.InkAnnotationElement = kt;
            class vt extends rt {
                constructor(is) {
                    super(is, {
                        isRenderable: !0,
                        ignoreBorder: !0,
                        createQuadrilaterals: !0
                    })
                }
                render() {
                    return !this.data.popupRef && this.hasPopupData && this._createPopup(),
                    this.container.classList.add("highlightAnnotation"),
                    this.container
                }
            }
            class bt extends rt {
                constructor(is) {
                    super(is, {
                        isRenderable: !0,
                        ignoreBorder: !0,
                        createQuadrilaterals: !0
                    })
                }
                render() {
                    return !this.data.popupRef && this.hasPopupData && this._createPopup(),
                    this.container.classList.add("underlineAnnotation"),
                    this.container
                }
            }
            class Tt extends rt {
                constructor(is) {
                    super(is, {
                        isRenderable: !0,
                        ignoreBorder: !0,
                        createQuadrilaterals: !0
                    })
                }
                render() {
                    return !this.data.popupRef && this.hasPopupData && this._createPopup(),
                    this.container.classList.add("squigglyAnnotation"),
                    this.container
                }
            }
            class Yt extends rt {
                constructor(is) {
                    super(is, {
                        isRenderable: !0,
                        ignoreBorder: !0,
                        createQuadrilaterals: !0
                    })
                }
                render() {
                    return !this.data.popupRef && this.hasPopupData && this._createPopup(),
                    this.container.classList.add("strikeoutAnnotation"),
                    this.container
                }
            }
            class Nt extends rt {
                constructor(is) {
                    super(is, {
                        isRenderable: !0,
                        ignoreBorder: !0
                    })
                }
                render() {
                    return this.container.classList.add("stampAnnotation"),
                    !this.data.popupRef && this.hasPopupData && this._createPopup(),
                    this.container
                }
            }
            e.StampAnnotationElement = Nt;
            class jt extends rt {
                constructor(rs) {
                    var Cs;
                    super(rs, {
                        isRenderable: !0
                    });
                    ps(this, as);
                    ps(this, Rs, null);
                    const {filename: fs, content: Ns} = this.data.file;
                    this.filename = (0,
                    a.getFilenameFromUrl)(fs, !0),
                    this.content = Ns,
                    (Cs = this.linkService.eventBus) == null || Cs.dispatch("fileattachmentannotation", {
                        source: this,
                        filename: fs,
                        content: Ns
                    })
                }
                render() {
                    this.container.classList.add("fileAttachmentAnnotation");
                    const {container: rs, data: fs} = this;
                    let Ns;
                    fs.hasAppearance || fs.fillAlpha === 0 ? Ns = document.createElement("div") : (Ns = document.createElement("img"),
                    Ns.src = `${this.imageResourcesPath}annotation-${/paperclip/i.test(fs.name) ? "paperclip" : "pushpin"}.svg`,
                    fs.fillAlpha && fs.fillAlpha < 1 && (Ns.style = `filter: opacity(${Math.round(fs.fillAlpha * 100)}%);`)),
                    Ns.addEventListener("dblclick", cs(this, as, vo).bind(this)),
                    us(this, Rs, Ns);
                    const {isMac: Cs} = o.FeatureTest.platform;
                    return rs.addEventListener("keydown", Ls => {
                        Ls.key === "Enter" && (Cs ? Ls.metaKey : Ls.ctrlKey) && cs(this, as, vo).call(this)
                    }
                    ),
                    !fs.popupRef && this.hasPopupData ? this._createPopup() : Ns.classList.add("popupTriggerArea"),
                    rs.append(Ns),
                    rs
                }
                getElementsToTriggerPopup() {
                    return mt(this, Rs)
                }
                addHighlightArea() {
                    this.container.classList.add("highlightArea")
                }
            }
            Rs = new WeakMap,
            as = new WeakSet,
            vo = function() {
                var rs;
                (rs = this.downloadManager) == null || rs.openOrDownloadData(this.container, this.content, this.filename)
            }
            ;
            class xt {
                constructor({div: is, accessibilityManager: rs, annotationCanvasMap: fs, l10n: Ns, page: Cs, viewport: Ls}) {
                    ps(this, Is);
                    ps(this, gs, null);
                    ps(this, es, null);
                    ps(this, ws, new Map);
                    this.div = is,
                    us(this, gs, rs),
                    us(this, es, fs),
                    this.l10n = Ns,
                    this.page = Cs,
                    this.viewport = Ls,
                    this.zIndex = 0,
                    this.l10n || (this.l10n = h.NullL10n)
                }
                async render(is) {
                    const {annotations: rs} = is
                      , fs = this.div;
                    (0,
                    a.setLayerDimensions)(fs, this.viewport);
                    const Ns = new Map
                      , Cs = {
                        data: null,
                        layer: fs,
                        linkService: is.linkService,
                        downloadManager: is.downloadManager,
                        imageResourcesPath: is.imageResourcesPath || "",
                        renderForms: is.renderForms !== !1,
                        svgFactory: new a.DOMSVGFactory,
                        annotationStorage: is.annotationStorage || new c.AnnotationStorage,
                        enableScripting: is.enableScripting === !0,
                        hasJSActions: is.hasJSActions,
                        fieldObjects: is.fieldObjects,
                        parent: this,
                        elements: null
                    };
                    for (const Ls of rs) {
                        if (Ls.noHTML)
                            continue;
                        const Os = Ls.annotationType === o.AnnotationType.POPUP;
                        if (Os) {
                            const Bs = Ns.get(Ls.id);
                            if (!Bs)
                                continue;
                            Cs.elements = Bs
                        } else {
                            const {width: Bs, height: Qs} = _e(Ls.rect);
                            if (Bs <= 0 || Qs <= 0)
                                continue
                        }
                        Cs.data = Ls;
                        const qs = tt.create(Cs);
                        if (!qs.isRenderable)
                            continue;
                        if (!Os && Ls.popupRef) {
                            const Bs = Ns.get(Ls.popupRef);
                            Bs ? Bs.push(qs) : Ns.set(Ls.popupRef, [qs])
                        }
                        qs.annotationEditorType > 0 && mt(this, ws).set(qs.data.id, qs);
                        const Ws = qs.render();
                        Ls.hidden && (Ws.style.visibility = "hidden"),
                        cs(this, Is, El).call(this, Ws, Ls.id)
                    }
                    cs(this, Is, bo).call(this),
                    await this.l10n.translate(fs)
                }
                update({viewport: is}) {
                    const rs = this.div;
                    this.viewport = is,
                    (0,
                    a.setLayerDimensions)(rs, {
                        rotation: is.rotation
                    }),
                    cs(this, Is, bo).call(this),
                    rs.hidden = !1
                }
                getEditableAnnotations() {
                    return Array.from(mt(this, ws).values())
                }
                getEditableAnnotation(is) {
                    return mt(this, ws).get(is)
                }
            }
            gs = new WeakMap,
            es = new WeakMap,
            ws = new WeakMap,
            Is = new WeakSet,
            El = function(is, rs) {
                var Ns;
                const fs = is.firstChild || is;
                fs.id = `${o.AnnotationPrefix}${rs}`,
                this.div.append(is),
                (Ns = mt(this, gs)) == null || Ns.moveElementInDOM(this.div, is, fs, !1)
            }
            ,
            bo = function() {
                if (!mt(this, es))
                    return;
                const is = this.div;
                for (const [rs,fs] of mt(this, es)) {
                    const Ns = is.querySelector(`[data-annotation-id="${rs}"]`);
                    if (!Ns)
                        continue;
                    const {firstChild: Cs} = Ns;
                    Cs ? Cs.nodeName === "CANVAS" ? Cs.replaceWith(fs) : Cs.before(fs) : Ns.append(fs)
                }
                mt(this, es).clear()
            }
            ,
            e.AnnotationLayer = xt
        }
        , (s, e) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.ColorConverters = void 0;
            function i(c) {
                return Math.floor(Math.max(0, Math.min(1, c)) * 255).toString(16).padStart(2, "0")
            }
            function o(c) {
                return Math.max(0, Math.min(255, 255 * c))
            }
            class a {
                static CMYK_G([d,h,g,b]) {
                    return ["G", 1 - Math.min(1, .3 * d + .59 * g + .11 * h + b)]
                }
                static G_CMYK([d]) {
                    return ["CMYK", 0, 0, 0, 1 - d]
                }
                static G_RGB([d]) {
                    return ["RGB", d, d, d]
                }
                static G_rgb([d]) {
                    return d = o(d),
                    [d, d, d]
                }
                static G_HTML([d]) {
                    const h = i(d);
                    return `#${h}${h}${h}`
                }
                static RGB_G([d,h,g]) {
                    return ["G", .3 * d + .59 * h + .11 * g]
                }
                static RGB_rgb(d) {
                    return d.map(o)
                }
                static RGB_HTML(d) {
                    return `#${d.map(i).join("")}`
                }
                static T_HTML() {
                    return "#00000000"
                }
                static T_rgb() {
                    return [null]
                }
                static CMYK_RGB([d,h,g,b]) {
                    return ["RGB", 1 - Math.min(1, d + b), 1 - Math.min(1, g + b), 1 - Math.min(1, h + b)]
                }
                static CMYK_rgb([d,h,g,b]) {
                    return [o(1 - Math.min(1, d + b)), o(1 - Math.min(1, g + b)), o(1 - Math.min(1, h + b))]
                }
                static CMYK_HTML(d) {
                    const h = this.CMYK_RGB(d).slice(1);
                    return this.RGB_HTML(h)
                }
                static RGB_CMYK([d,h,g]) {
                    const b = 1 - d
                      , _ = 1 - h
                      , $ = 1 - g
                      , _e = Math.min(b, _, $);
                    return ["CMYK", b, _, $, _e]
                }
            }
            e.ColorConverters = a
        }
        , (s, e) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.NullL10n = void 0,
            e.getL10nFallback = o;
            const i = {
                of_pages: "of {{pagesCount}}",
                page_of_pages: "({{pageNumber}} of {{pagesCount}})",
                document_properties_kb: "{{size_kb}} KB ({{size_b}} bytes)",
                document_properties_mb: "{{size_mb}} MB ({{size_b}} bytes)",
                document_properties_date_string: "{{date}}, {{time}}",
                document_properties_page_size_unit_inches: "in",
                document_properties_page_size_unit_millimeters: "mm",
                document_properties_page_size_orientation_portrait: "portrait",
                document_properties_page_size_orientation_landscape: "landscape",
                document_properties_page_size_name_a3: "A3",
                document_properties_page_size_name_a4: "A4",
                document_properties_page_size_name_letter: "Letter",
                document_properties_page_size_name_legal: "Legal",
                document_properties_page_size_dimension_string: "{{width}} × {{height}} {{unit}} ({{orientation}})",
                document_properties_page_size_dimension_name_string: "{{width}} × {{height}} {{unit}} ({{name}}, {{orientation}})",
                document_properties_linearized_yes: "Yes",
                document_properties_linearized_no: "No",
                additional_layers: "Additional Layers",
                page_landmark: "Page {{page}}",
                thumb_page_title: "Page {{page}}",
                thumb_page_canvas: "Thumbnail of Page {{page}}",
                find_reached_top: "Reached top of document, continued from bottom",
                find_reached_bottom: "Reached end of document, continued from top",
                "find_match_count[one]": "{{current}} of {{total}} match",
                "find_match_count[other]": "{{current}} of {{total}} matches",
                "find_match_count_limit[one]": "More than {{limit}} match",
                "find_match_count_limit[other]": "More than {{limit}} matches",
                find_not_found: "Phrase not found",
                page_scale_width: "Page Width",
                page_scale_fit: "Page Fit",
                page_scale_auto: "Automatic Zoom",
                page_scale_actual: "Actual Size",
                page_scale_percent: "{{scale}}%",
                loading_error: "An error occurred while loading the PDF.",
                invalid_file_error: "Invalid or corrupted PDF file.",
                missing_file_error: "Missing PDF file.",
                unexpected_response_error: "Unexpected server response.",
                rendering_error: "An error occurred while rendering the page.",
                annotation_date_string: "{{date}}, {{time}}",
                printing_not_supported: "Warning: Printing is not fully supported by this browser.",
                printing_not_ready: "Warning: The PDF is not fully loaded for printing.",
                web_fonts_disabled: "Web fonts are disabled: unable to use embedded PDF fonts.",
                free_text2_default_content: "Start typing…",
                editor_free_text2_aria_label: "Text Editor",
                editor_ink2_aria_label: "Draw Editor",
                editor_ink_canvas_aria_label: "User-created image",
                editor_alt_text_button_label: "Alt text",
                editor_alt_text_edit_button_label: "Edit alt text",
                editor_alt_text_decorative_tooltip: "Marked as decorative"
            };
            i.print_progress_percent = "{{progress}}%";
            function o(d, h) {
                switch (d) {
                case "find_match_count":
                    d = `find_match_count[${h.total === 1 ? "one" : "other"}]`;
                    break;
                case "find_match_count_limit":
                    d = `find_match_count_limit[${h.limit === 1 ? "one" : "other"}]`;
                    break
                }
                return i[d] || ""
            }
            function a(d, h) {
                return h ? d.replaceAll(/\{\{\s*(\w+)\s*\}\}/g, (g, b) => b in h ? h[b] : "{{" + b + "}}") : d
            }
            const c = {
                async getLanguage() {
                    return "en-us"
                },
                async getDirection() {
                    return "ltr"
                },
                async get(d, h=null, g=o(d, h)) {
                    return a(g, h)
                },
                async translate(d) {}
            };
            e.NullL10n = c
        }
        , (s, e, i) => {
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.XfaLayer = void 0;
            var o = i(25);
            class a {
                static setupStorage(d, h, g, b, _) {
                    const $ = b.getValue(h, {
                        value: null
                    });
                    switch (g.name) {
                    case "textarea":
                        if ($.value !== null && (d.textContent = $.value),
                        _ === "print")
                            break;
                        d.addEventListener("input", _e => {
                            b.setValue(h, {
                                value: _e.target.value
                            })
                        }
                        );
                        break;
                    case "input":
                        if (g.attributes.type === "radio" || g.attributes.type === "checkbox") {
                            if ($.value === g.attributes.xfaOn ? d.setAttribute("checked", !0) : $.value === g.attributes.xfaOff && d.removeAttribute("checked"),
                            _ === "print")
                                break;
                            d.addEventListener("change", _e => {
                                b.setValue(h, {
                                    value: _e.target.checked ? _e.target.getAttribute("xfaOn") : _e.target.getAttribute("xfaOff")
                                })
                            }
                            )
                        } else {
                            if ($.value !== null && d.setAttribute("value", $.value),
                            _ === "print")
                                break;
                            d.addEventListener("input", _e => {
                                b.setValue(h, {
                                    value: _e.target.value
                                })
                            }
                            )
                        }
                        break;
                    case "select":
                        if ($.value !== null) {
                            d.setAttribute("value", $.value);
                            for (const _e of g.children)
                                _e.attributes.value === $.value ? _e.attributes.selected = !0 : _e.attributes.hasOwnProperty("selected") && delete _e.attributes.selected
                        }
                        d.addEventListener("input", _e => {
                            const tt = _e.target.options
                              , rt = tt.selectedIndex === -1 ? "" : tt[tt.selectedIndex].value;
                            b.setValue(h, {
                                value: rt
                            })
                        }
                        );
                        break
                    }
                }
                static setAttributes({html: d, element: h, storage: g=null, intent: b, linkService: _}) {
                    const {attributes: $} = h
                      , _e = d instanceof HTMLAnchorElement;
                    $.type === "radio" && ($.name = `${$.name}-${b}`);
                    for (const [tt,rt] of Object.entries($))
                        if (rt != null)
                            switch (tt) {
                            case "class":
                                rt.length && d.setAttribute(tt, rt.join(" "));
                                break;
                            case "dataId":
                                break;
                            case "id":
                                d.setAttribute("data-element-id", rt);
                                break;
                            case "style":
                                Object.assign(d.style, rt);
                                break;
                            case "textContent":
                                d.textContent = rt;
                                break;
                            default:
                                (!_e || tt !== "href" && tt !== "newWindow") && d.setAttribute(tt, rt)
                            }
                    _e && _.addLinkAttributes(d, $.href, $.newWindow),
                    g && $.dataId && this.setupStorage(d, $.dataId, h, g)
                }
                static render(d) {
                    var et;
                    const h = d.annotationStorage
                      , g = d.linkService
                      , b = d.xfaHtml
                      , _ = d.intent || "display"
                      , $ = document.createElement(b.name);
                    b.attributes && this.setAttributes({
                        html: $,
                        element: b,
                        intent: _,
                        linkService: g
                    });
                    const _e = [[b, -1, $]]
                      , tt = d.div;
                    if (tt.append($),
                    d.viewport) {
                        const it = `matrix(${d.viewport.transform.join(",")})`;
                        tt.style.transform = it
                    }
                    _ !== "richText" && tt.setAttribute("class", "xfaLayer xfaFont");
                    const rt = [];
                    for (; _e.length > 0; ) {
                        const [it,st,nt] = _e.at(-1);
                        if (st + 1 === it.children.length) {
                            _e.pop();
                            continue
                        }
                        const lt = it.children[++_e.at(-1)[1]];
                        if (lt === null)
                            continue;
                        const {name: dt} = lt;
                        if (dt === "#text") {
                            const at = document.createTextNode(lt.value);
                            rt.push(at),
                            nt.append(at);
                            continue
                        }
                        const ot = (et = lt == null ? void 0 : lt.attributes) != null && et.xmlns ? document.createElementNS(lt.attributes.xmlns, dt) : document.createElement(dt);
                        if (nt.append(ot),
                        lt.attributes && this.setAttributes({
                            html: ot,
                            element: lt,
                            storage: h,
                            intent: _,
                            linkService: g
                        }),
                        lt.children && lt.children.length > 0)
                            _e.push([lt, -1, ot]);
                        else if (lt.value) {
                            const at = document.createTextNode(lt.value);
                            o.XfaText.shouldBuildText(dt) && rt.push(at),
                            ot.append(at)
                        }
                    }
                    for (const it of tt.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))
                        it.setAttribute("readOnly", !0);
                    return {
                        textDivs: rt
                    }
                }
                static update(d) {
                    const h = `matrix(${d.viewport.transform.join(",")})`;
                    d.div.style.transform = h,
                    d.div.hidden = !1
                }
            }
            e.XfaLayer = a
        }
        , (s, e, i) => {
            var b, _, $, _e, tt, rt, et, it, st, nt, lt, dt, ot, at, ht, Rl, wl, Sl, Nl, Ro, Cl, wo, _l, Al, Tl, Pl, Il, Sr, So, Dn, On, Qr, No, Fn, St, Ml, Co, Ll, Dl, _o, $n, Zr;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.InkEditor = void 0;
            var o = i(1)
              , a = i(4)
              , c = i(29)
              , d = i(6)
              , h = i(5);
            const _s = class _s extends a.AnnotationEditor {
                constructor(Lt) {
                    super({
                        ...Lt,
                        name: "inkEditor"
                    });
                    ps(this, ht);
                    ps(this, b, 0);
                    ps(this, _, 0);
                    ps(this, $, this.canvasPointermove.bind(this));
                    ps(this, _e, this.canvasPointerleave.bind(this));
                    ps(this, tt, this.canvasPointerup.bind(this));
                    ps(this, rt, this.canvasPointerdown.bind(this));
                    ps(this, et, new Path2D);
                    ps(this, it, !1);
                    ps(this, st, !1);
                    ps(this, nt, !1);
                    ps(this, lt, null);
                    ps(this, dt, 0);
                    ps(this, ot, 0);
                    ps(this, at, null);
                    this.color = Lt.color || null,
                    this.thickness = Lt.thickness || null,
                    this.opacity = Lt.opacity || null,
                    this.paths = [],
                    this.bezierPath2D = [],
                    this.allRawPaths = [],
                    this.currentPath = [],
                    this.scaleFactor = 1,
                    this.translationX = this.translationY = 0,
                    this.x = 0,
                    this.y = 0,
                    this._willKeepAspectRatio = !0
                }
                static initialize(Lt) {
                    a.AnnotationEditor.initialize(Lt, {
                        strings: ["editor_ink_canvas_aria_label", "editor_ink2_aria_label"]
                    })
                }
                static updateDefaultParams(Lt, ts) {
                    switch (Lt) {
                    case o.AnnotationEditorParamsType.INK_THICKNESS:
                        _s._defaultThickness = ts;
                        break;
                    case o.AnnotationEditorParamsType.INK_COLOR:
                        _s._defaultColor = ts;
                        break;
                    case o.AnnotationEditorParamsType.INK_OPACITY:
                        _s._defaultOpacity = ts / 100;
                        break
                    }
                }
                updateParams(Lt, ts) {
                    switch (Lt) {
                    case o.AnnotationEditorParamsType.INK_THICKNESS:
                        cs(this, ht, Rl).call(this, ts);
                        break;
                    case o.AnnotationEditorParamsType.INK_COLOR:
                        cs(this, ht, wl).call(this, ts);
                        break;
                    case o.AnnotationEditorParamsType.INK_OPACITY:
                        cs(this, ht, Sl).call(this, ts);
                        break
                    }
                }
                static get defaultPropertiesToUpdate() {
                    return [[o.AnnotationEditorParamsType.INK_THICKNESS, _s._defaultThickness], [o.AnnotationEditorParamsType.INK_COLOR, _s._defaultColor || a.AnnotationEditor._defaultLineColor], [o.AnnotationEditorParamsType.INK_OPACITY, Math.round(_s._defaultOpacity * 100)]]
                }
                get propertiesToUpdate() {
                    return [[o.AnnotationEditorParamsType.INK_THICKNESS, this.thickness || _s._defaultThickness], [o.AnnotationEditorParamsType.INK_COLOR, this.color || _s._defaultColor || a.AnnotationEditor._defaultLineColor], [o.AnnotationEditorParamsType.INK_OPACITY, Math.round(100 * (this.opacity ?? _s._defaultOpacity))]]
                }
                rebuild() {
                    this.parent && (super.rebuild(),
                    this.div !== null && (this.canvas || (cs(this, ht, Dn).call(this),
                    cs(this, ht, On).call(this)),
                    this.isAttachedToDOM || (this.parent.add(this),
                    cs(this, ht, Qr).call(this)),
                    cs(this, ht, Zr).call(this)))
                }
                remove() {
                    this.canvas !== null && (this.isEmpty() || this.commit(),
                    this.canvas.width = this.canvas.height = 0,
                    this.canvas.remove(),
                    this.canvas = null,
                    mt(this, lt).disconnect(),
                    us(this, lt, null),
                    super.remove())
                }
                setParent(Lt) {
                    !this.parent && Lt ? this._uiManager.removeShouldRescale(this) : this.parent && Lt === null && this._uiManager.addShouldRescale(this),
                    super.setParent(Lt)
                }
                onScaleChanging() {
                    const [Lt,ts] = this.parentDimensions
                      , ms = this.width * Lt
                      , hs = this.height * ts;
                    this.setDimensions(ms, hs)
                }
                enableEditMode() {
                    mt(this, it) || this.canvas === null || (super.enableEditMode(),
                    this._isDraggable = !1,
                    this.canvas.addEventListener("pointerdown", mt(this, rt)))
                }
                disableEditMode() {
                    !this.isInEditMode() || this.canvas === null || (super.disableEditMode(),
                    this._isDraggable = !this.isEmpty(),
                    this.div.classList.remove("editing"),
                    this.canvas.removeEventListener("pointerdown", mt(this, rt)))
                }
                onceAdded() {
                    this._isDraggable = !this.isEmpty()
                }
                isEmpty() {
                    return this.paths.length === 0 || this.paths.length === 1 && this.paths[0].length === 0
                }
                commit() {
                    mt(this, it) || (super.commit(),
                    this.isEditing = !1,
                    this.disableEditMode(),
                    this.setInForeground(),
                    us(this, it, !0),
                    this.div.classList.add("disabled"),
                    cs(this, ht, Zr).call(this, !0),
                    this.makeResizable(),
                    this.parent.addInkEditorIfNeeded(!0),
                    this.moveInDOM(),
                    this.div.focus({
                        preventScroll: !0
                    }))
                }
                focusin(Lt) {
                    this._focusEventsAllowed && (super.focusin(Lt),
                    this.enableEditMode())
                }
                canvasPointerdown(Lt) {
                    Lt.button !== 0 || !this.isInEditMode() || mt(this, it) || (this.setInForeground(),
                    Lt.preventDefault(),
                    Lt.type !== "mouse" && this.div.focus(),
                    cs(this, ht, Cl).call(this, Lt.offsetX, Lt.offsetY))
                }
                canvasPointermove(Lt) {
                    Lt.preventDefault(),
                    cs(this, ht, wo).call(this, Lt.offsetX, Lt.offsetY)
                }
                canvasPointerup(Lt) {
                    Lt.preventDefault(),
                    cs(this, ht, So).call(this, Lt)
                }
                canvasPointerleave(Lt) {
                    cs(this, ht, So).call(this, Lt)
                }
                get isResizable() {
                    return !this.isEmpty() && mt(this, it)
                }
                render() {
                    if (this.div)
                        return this.div;
                    let Lt, ts;
                    this.width && (Lt = this.x,
                    ts = this.y),
                    super.render(),
                    a.AnnotationEditor._l10nPromise.get("editor_ink2_aria_label").then(Ts => {
                        var ls;
                        return (ls = this.div) == null ? void 0 : ls.setAttribute("aria-label", Ts)
                    }
                    );
                    const [ms,hs,bs,ks] = cs(this, ht, Nl).call(this);
                    if (this.setAt(ms, hs, 0, 0),
                    this.setDims(bs, ks),
                    cs(this, ht, Dn).call(this),
                    this.width) {
                        const [Ts,ls] = this.parentDimensions;
                        this.setAspectRatio(this.width * Ts, this.height * ls),
                        this.setAt(Lt * Ts, ts * ls, this.width * Ts, this.height * ls),
                        us(this, nt, !0),
                        cs(this, ht, Qr).call(this),
                        this.setDims(this.width * Ts, this.height * ls),
                        cs(this, ht, Sr).call(this),
                        this.div.classList.add("disabled")
                    } else
                        this.div.classList.add("editing"),
                        this.enableEditMode();
                    return cs(this, ht, On).call(this),
                    this.div
                }
                setDimensions(Lt, ts) {
                    const ms = Math.round(Lt)
                      , hs = Math.round(ts);
                    if (mt(this, dt) === ms && mt(this, ot) === hs)
                        return;
                    us(this, dt, ms),
                    us(this, ot, hs),
                    this.canvas.style.visibility = "hidden";
                    const [bs,ks] = this.parentDimensions;
                    this.width = Lt / bs,
                    this.height = ts / ks,
                    this.fixAndSetPosition(),
                    mt(this, it) && cs(this, ht, No).call(this, Lt, ts),
                    cs(this, ht, Qr).call(this),
                    cs(this, ht, Sr).call(this),
                    this.canvas.style.visibility = "visible",
                    this.fixDims()
                }
                static deserialize(Lt, ts, ms) {
                    var zs, Zs, sr;
                    if (Lt instanceof c.InkAnnotationElement)
                        return null;
                    const hs = super.deserialize(Lt, ts, ms);
                    hs.thickness = Lt.thickness,
                    hs.color = o.Util.makeHexColor(...Lt.color),
                    hs.opacity = Lt.opacity;
                    const [bs,ks] = hs.pageDimensions
                      , Ts = hs.width * bs
                      , ls = hs.height * ks
                      , Ds = hs.parentScale
                      , Ms = Lt.thickness / 2;
                    us(hs, it, !0),
                    us(hs, dt, Math.round(Ts)),
                    us(hs, ot, Math.round(ls));
                    const {paths: Hs, rect: Vs, rotation: Xs} = Lt;
                    for (let {bezier: As} of Hs) {
                        As = cs(zs = _s, St, Ll).call(zs, As, Vs, Xs);
                        const Es = [];
                        hs.paths.push(Es);
                        let Rs = Ds * (As[0] - Ms)
                          , as = Ds * (As[1] - Ms);
                        for (let gs = 2, es = As.length; gs < es; gs += 6) {
                            const ws = Ds * (As[gs] - Ms)
                              , Is = Ds * (As[gs + 1] - Ms)
                              , Fs = Ds * (As[gs + 2] - Ms)
                              , Js = Ds * (As[gs + 3] - Ms)
                              , Us = Ds * (As[gs + 4] - Ms)
                              , is = Ds * (As[gs + 5] - Ms);
                            Es.push([[Rs, as], [ws, Is], [Fs, Js], [Us, is]]),
                            Rs = Us,
                            as = is
                        }
                        const Ps = cs(this, St, Ml).call(this, Es);
                        hs.bezierPath2D.push(Ps)
                    }
                    const $s = cs(Zs = hs, ht, _o).call(Zs);
                    return us(hs, _, Math.max(a.AnnotationEditor.MIN_SIZE, $s[2] - $s[0])),
                    us(hs, b, Math.max(a.AnnotationEditor.MIN_SIZE, $s[3] - $s[1])),
                    cs(sr = hs, ht, No).call(sr, Ts, ls),
                    hs
                }
                serialize() {
                    if (this.isEmpty())
                        return null;
                    const Lt = this.getRect(0, 0)
                      , ts = a.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);
                    return {
                        annotationType: o.AnnotationEditorType.INK,
                        color: ts,
                        thickness: this.thickness,
                        opacity: this.opacity,
                        paths: cs(this, ht, Dl).call(this, this.scaleFactor / this.parentScale, this.translationX, this.translationY, Lt),
                        pageIndex: this.pageIndex,
                        rect: Lt,
                        rotation: this.rotation,
                        structTreeParentId: this._structTreeParentId
                    }
                }
            }
            ;
            b = new WeakMap,
            _ = new WeakMap,
            $ = new WeakMap,
            _e = new WeakMap,
            tt = new WeakMap,
            rt = new WeakMap,
            et = new WeakMap,
            it = new WeakMap,
            st = new WeakMap,
            nt = new WeakMap,
            lt = new WeakMap,
            dt = new WeakMap,
            ot = new WeakMap,
            at = new WeakMap,
            ht = new WeakSet,
            Rl = function(Lt) {
                const ts = this.thickness;
                this.addCommands({
                    cmd: () => {
                        this.thickness = Lt,
                        cs(this, ht, Zr).call(this)
                    }
                    ,
                    undo: () => {
                        this.thickness = ts,
                        cs(this, ht, Zr).call(this)
                    }
                    ,
                    mustExec: !0,
                    type: o.AnnotationEditorParamsType.INK_THICKNESS,
                    overwriteIfSameType: !0,
                    keepUndo: !0
                })
            }
            ,
            wl = function(Lt) {
                const ts = this.color;
                this.addCommands({
                    cmd: () => {
                        this.color = Lt,
                        cs(this, ht, Sr).call(this)
                    }
                    ,
                    undo: () => {
                        this.color = ts,
                        cs(this, ht, Sr).call(this)
                    }
                    ,
                    mustExec: !0,
                    type: o.AnnotationEditorParamsType.INK_COLOR,
                    overwriteIfSameType: !0,
                    keepUndo: !0
                })
            }
            ,
            Sl = function(Lt) {
                Lt /= 100;
                const ts = this.opacity;
                this.addCommands({
                    cmd: () => {
                        this.opacity = Lt,
                        cs(this, ht, Sr).call(this)
                    }
                    ,
                    undo: () => {
                        this.opacity = ts,
                        cs(this, ht, Sr).call(this)
                    }
                    ,
                    mustExec: !0,
                    type: o.AnnotationEditorParamsType.INK_OPACITY,
                    overwriteIfSameType: !0,
                    keepUndo: !0
                })
            }
            ,
            Nl = function() {
                const {parentRotation: Lt, parentDimensions: [ts,ms]} = this;
                switch (Lt) {
                case 90:
                    return [0, ms, ms, ts];
                case 180:
                    return [ts, ms, ts, ms];
                case 270:
                    return [ts, 0, ms, ts];
                default:
                    return [0, 0, ts, ms]
                }
            }
            ,
            Ro = function() {
                const {ctx: Lt, color: ts, opacity: ms, thickness: hs, parentScale: bs, scaleFactor: ks} = this;
                Lt.lineWidth = hs * bs / ks,
                Lt.lineCap = "round",
                Lt.lineJoin = "round",
                Lt.miterLimit = 10,
                Lt.strokeStyle = `${ts}${(0,
                h.opacityToHex)(ms)}`
            }
            ,
            Cl = function(Lt, ts) {
                this.canvas.addEventListener("contextmenu", d.noContextMenu),
                this.canvas.addEventListener("pointerleave", mt(this, _e)),
                this.canvas.addEventListener("pointermove", mt(this, $)),
                this.canvas.addEventListener("pointerup", mt(this, tt)),
                this.canvas.removeEventListener("pointerdown", mt(this, rt)),
                this.isEditing = !0,
                mt(this, nt) || (us(this, nt, !0),
                cs(this, ht, Qr).call(this),
                this.thickness || (this.thickness = _s._defaultThickness),
                this.color || (this.color = _s._defaultColor || a.AnnotationEditor._defaultLineColor),
                this.opacity ?? (this.opacity = _s._defaultOpacity)),
                this.currentPath.push([Lt, ts]),
                us(this, st, !1),
                cs(this, ht, Ro).call(this),
                us(this, at, () => {
                    cs(this, ht, Tl).call(this),
                    mt(this, at) && window.requestAnimationFrame(mt(this, at))
                }
                ),
                window.requestAnimationFrame(mt(this, at))
            }
            ,
            wo = function(Lt, ts) {
                const [ms,hs] = this.currentPath.at(-1);
                if (this.currentPath.length > 1 && Lt === ms && ts === hs)
                    return;
                const bs = this.currentPath;
                let ks = mt(this, et);
                if (bs.push([Lt, ts]),
                us(this, st, !0),
                bs.length <= 2) {
                    ks.moveTo(...bs[0]),
                    ks.lineTo(Lt, ts);
                    return
                }
                bs.length === 3 && (us(this, et, ks = new Path2D),
                ks.moveTo(...bs[0])),
                cs(this, ht, Pl).call(this, ks, ...bs.at(-3), ...bs.at(-2), Lt, ts)
            }
            ,
            _l = function() {
                if (this.currentPath.length === 0)
                    return;
                const Lt = this.currentPath.at(-1);
                mt(this, et).lineTo(...Lt)
            }
            ,
            Al = function(Lt, ts) {
                us(this, at, null),
                Lt = Math.min(Math.max(Lt, 0), this.canvas.width),
                ts = Math.min(Math.max(ts, 0), this.canvas.height),
                cs(this, ht, wo).call(this, Lt, ts),
                cs(this, ht, _l).call(this);
                let ms;
                if (this.currentPath.length !== 1)
                    ms = cs(this, ht, Il).call(this);
                else {
                    const ls = [Lt, ts];
                    ms = [[ls, ls.slice(), ls.slice(), ls]]
                }
                const hs = mt(this, et)
                  , bs = this.currentPath;
                this.currentPath = [],
                us(this, et, new Path2D);
                const ks = () => {
                    this.allRawPaths.push(bs),
                    this.paths.push(ms),
                    this.bezierPath2D.push(hs),
                    this.rebuild()
                }
                  , Ts = () => {
                    this.allRawPaths.pop(),
                    this.paths.pop(),
                    this.bezierPath2D.pop(),
                    this.paths.length === 0 ? this.remove() : (this.canvas || (cs(this, ht, Dn).call(this),
                    cs(this, ht, On).call(this)),
                    cs(this, ht, Zr).call(this))
                }
                ;
                this.addCommands({
                    cmd: ks,
                    undo: Ts,
                    mustExec: !0
                })
            }
            ,
            Tl = function() {
                if (!mt(this, st))
                    return;
                us(this, st, !1);
                const Lt = Math.ceil(this.thickness * this.parentScale)
                  , ts = this.currentPath.slice(-3)
                  , ms = ts.map(ks => ks[0])
                  , hs = ts.map(ks => ks[1]);
                Math.min(...ms) - Lt,
                Math.max(...ms) + Lt,
                Math.min(...hs) - Lt,
                Math.max(...hs) + Lt;
                const {ctx: bs} = this;
                bs.save(),
                bs.clearRect(0, 0, this.canvas.width, this.canvas.height);
                for (const ks of this.bezierPath2D)
                    bs.stroke(ks);
                bs.stroke(mt(this, et)),
                bs.restore()
            }
            ,
            Pl = function(Lt, ts, ms, hs, bs, ks, Ts) {
                const ls = (ts + hs) / 2
                  , Ds = (ms + bs) / 2
                  , Ms = (hs + ks) / 2
                  , Hs = (bs + Ts) / 2;
                Lt.bezierCurveTo(ls + 2 * (hs - ls) / 3, Ds + 2 * (bs - Ds) / 3, Ms + 2 * (hs - Ms) / 3, Hs + 2 * (bs - Hs) / 3, Ms, Hs)
            }
            ,
            Il = function() {
                const Lt = this.currentPath;
                if (Lt.length <= 2)
                    return [[Lt[0], Lt[0], Lt.at(-1), Lt.at(-1)]];
                const ts = [];
                let ms, [hs,bs] = Lt[0];
                for (ms = 1; ms < Lt.length - 2; ms++) {
                    const [Vs,Xs] = Lt[ms]
                      , [$s,zs] = Lt[ms + 1]
                      , Zs = (Vs + $s) / 2
                      , sr = (Xs + zs) / 2
                      , As = [hs + 2 * (Vs - hs) / 3, bs + 2 * (Xs - bs) / 3]
                      , Es = [Zs + 2 * (Vs - Zs) / 3, sr + 2 * (Xs - sr) / 3];
                    ts.push([[hs, bs], As, Es, [Zs, sr]]),
                    [hs,bs] = [Zs, sr]
                }
                const [ks,Ts] = Lt[ms]
                  , [ls,Ds] = Lt[ms + 1]
                  , Ms = [hs + 2 * (ks - hs) / 3, bs + 2 * (Ts - bs) / 3]
                  , Hs = [ls + 2 * (ks - ls) / 3, Ds + 2 * (Ts - Ds) / 3];
                return ts.push([[hs, bs], Ms, Hs, [ls, Ds]]),
                ts
            }
            ,
            Sr = function() {
                if (this.isEmpty()) {
                    cs(this, ht, Fn).call(this);
                    return
                }
                cs(this, ht, Ro).call(this);
                const {canvas: Lt, ctx: ts} = this;
                ts.setTransform(1, 0, 0, 1, 0, 0),
                ts.clearRect(0, 0, Lt.width, Lt.height),
                cs(this, ht, Fn).call(this);
                for (const ms of this.bezierPath2D)
                    ts.stroke(ms)
            }
            ,
            So = function(Lt) {
                this.canvas.removeEventListener("pointerleave", mt(this, _e)),
                this.canvas.removeEventListener("pointermove", mt(this, $)),
                this.canvas.removeEventListener("pointerup", mt(this, tt)),
                this.canvas.addEventListener("pointerdown", mt(this, rt)),
                setTimeout( () => {
                    this.canvas.removeEventListener("contextmenu", d.noContextMenu)
                }
                , 10),
                cs(this, ht, Al).call(this, Lt.offsetX, Lt.offsetY),
                this.addToAnnotationStorage(),
                this.setInBackground()
            }
            ,
            Dn = function() {
                this.canvas = document.createElement("canvas"),
                this.canvas.width = this.canvas.height = 0,
                this.canvas.className = "inkEditorCanvas",
                a.AnnotationEditor._l10nPromise.get("editor_ink_canvas_aria_label").then(Lt => {
                    var ts;
                    return (ts = this.canvas) == null ? void 0 : ts.setAttribute("aria-label", Lt)
                }
                ),
                this.div.append(this.canvas),
                this.ctx = this.canvas.getContext("2d")
            }
            ,
            On = function() {
                us(this, lt, new ResizeObserver(Lt => {
                    const ts = Lt[0].contentRect;
                    ts.width && ts.height && this.setDimensions(ts.width, ts.height)
                }
                )),
                mt(this, lt).observe(this.div)
            }
            ,
            Qr = function() {
                if (!mt(this, nt))
                    return;
                const [Lt,ts] = this.parentDimensions;
                this.canvas.width = Math.ceil(this.width * Lt),
                this.canvas.height = Math.ceil(this.height * ts),
                cs(this, ht, Fn).call(this)
            }
            ,
            No = function(Lt, ts) {
                const ms = cs(this, ht, $n).call(this)
                  , hs = (Lt - ms) / mt(this, _)
                  , bs = (ts - ms) / mt(this, b);
                this.scaleFactor = Math.min(hs, bs)
            }
            ,
            Fn = function() {
                const Lt = cs(this, ht, $n).call(this) / 2;
                this.ctx.setTransform(this.scaleFactor, 0, 0, this.scaleFactor, this.translationX * this.scaleFactor + Lt, this.translationY * this.scaleFactor + Lt)
            }
            ,
            St = new WeakSet,
            Ml = function(Lt) {
                const ts = new Path2D;
                for (let ms = 0, hs = Lt.length; ms < hs; ms++) {
                    const [bs,ks,Ts,ls] = Lt[ms];
                    ms === 0 && ts.moveTo(...bs),
                    ts.bezierCurveTo(ks[0], ks[1], Ts[0], Ts[1], ls[0], ls[1])
                }
                return ts
            }
            ,
            Co = function(Lt, ts, ms) {
                const [hs,bs,ks,Ts] = ts;
                switch (ms) {
                case 0:
                    for (let ls = 0, Ds = Lt.length; ls < Ds; ls += 2)
                        Lt[ls] += hs,
                        Lt[ls + 1] = Ts - Lt[ls + 1];
                    break;
                case 90:
                    for (let ls = 0, Ds = Lt.length; ls < Ds; ls += 2) {
                        const Ms = Lt[ls];
                        Lt[ls] = Lt[ls + 1] + hs,
                        Lt[ls + 1] = Ms + bs
                    }
                    break;
                case 180:
                    for (let ls = 0, Ds = Lt.length; ls < Ds; ls += 2)
                        Lt[ls] = ks - Lt[ls],
                        Lt[ls + 1] += bs;
                    break;
                case 270:
                    for (let ls = 0, Ds = Lt.length; ls < Ds; ls += 2) {
                        const Ms = Lt[ls];
                        Lt[ls] = ks - Lt[ls + 1],
                        Lt[ls + 1] = Ts - Ms
                    }
                    break;
                default:
                    throw new Error("Invalid rotation")
                }
                return Lt
            }
            ,
            Ll = function(Lt, ts, ms) {
                const [hs,bs,ks,Ts] = ts;
                switch (ms) {
                case 0:
                    for (let ls = 0, Ds = Lt.length; ls < Ds; ls += 2)
                        Lt[ls] -= hs,
                        Lt[ls + 1] = Ts - Lt[ls + 1];
                    break;
                case 90:
                    for (let ls = 0, Ds = Lt.length; ls < Ds; ls += 2) {
                        const Ms = Lt[ls];
                        Lt[ls] = Lt[ls + 1] - bs,
                        Lt[ls + 1] = Ms - hs
                    }
                    break;
                case 180:
                    for (let ls = 0, Ds = Lt.length; ls < Ds; ls += 2)
                        Lt[ls] = ks - Lt[ls],
                        Lt[ls + 1] -= bs;
                    break;
                case 270:
                    for (let ls = 0, Ds = Lt.length; ls < Ds; ls += 2) {
                        const Ms = Lt[ls];
                        Lt[ls] = Ts - Lt[ls + 1],
                        Lt[ls + 1] = ks - Ms
                    }
                    break;
                default:
                    throw new Error("Invalid rotation")
                }
                return Lt
            }
            ,
            Dl = function(Lt, ts, ms, hs) {
                var Ds, Ms;
                const bs = []
                  , ks = this.thickness / 2
                  , Ts = Lt * ts + ks
                  , ls = Lt * ms + ks;
                for (const Hs of this.paths) {
                    const Vs = []
                      , Xs = [];
                    for (let $s = 0, zs = Hs.length; $s < zs; $s++) {
                        const [Zs,sr,As,Es] = Hs[$s]
                          , Rs = Lt * Zs[0] + Ts
                          , as = Lt * Zs[1] + ls
                          , Ps = Lt * sr[0] + Ts
                          , gs = Lt * sr[1] + ls
                          , es = Lt * As[0] + Ts
                          , ws = Lt * As[1] + ls
                          , Is = Lt * Es[0] + Ts
                          , Fs = Lt * Es[1] + ls;
                        $s === 0 && (Vs.push(Rs, as),
                        Xs.push(Rs, as)),
                        Vs.push(Ps, gs, es, ws, Is, Fs),
                        Xs.push(Ps, gs),
                        $s === zs - 1 && Xs.push(Is, Fs)
                    }
                    bs.push({
                        bezier: cs(Ds = _s, St, Co).call(Ds, Vs, hs, this.rotation),
                        points: cs(Ms = _s, St, Co).call(Ms, Xs, hs, this.rotation)
                    })
                }
                return bs
            }
            ,
            _o = function() {
                let Lt = 1 / 0
                  , ts = -1 / 0
                  , ms = 1 / 0
                  , hs = -1 / 0;
                for (const bs of this.paths)
                    for (const [ks,Ts,ls,Ds] of bs) {
                        const Ms = o.Util.bezierBoundingBox(...ks, ...Ts, ...ls, ...Ds);
                        Lt = Math.min(Lt, Ms[0]),
                        ms = Math.min(ms, Ms[1]),
                        ts = Math.max(ts, Ms[2]),
                        hs = Math.max(hs, Ms[3])
                    }
                return [Lt, ms, ts, hs]
            }
            ,
            $n = function() {
                return mt(this, it) ? Math.ceil(this.thickness * this.parentScale) : 0
            }
            ,
            Zr = function(Lt=!1) {
                if (this.isEmpty())
                    return;
                if (!mt(this, it)) {
                    cs(this, ht, Sr).call(this);
                    return
                }
                const ts = cs(this, ht, _o).call(this)
                  , ms = cs(this, ht, $n).call(this);
                us(this, _, Math.max(a.AnnotationEditor.MIN_SIZE, ts[2] - ts[0])),
                us(this, b, Math.max(a.AnnotationEditor.MIN_SIZE, ts[3] - ts[1]));
                const hs = Math.ceil(ms + mt(this, _) * this.scaleFactor)
                  , bs = Math.ceil(ms + mt(this, b) * this.scaleFactor)
                  , [ks,Ts] = this.parentDimensions;
                this.width = hs / ks,
                this.height = bs / Ts,
                this.setAspectRatio(hs, bs);
                const ls = this.translationX
                  , Ds = this.translationY;
                this.translationX = -ts[0],
                this.translationY = -ts[1],
                cs(this, ht, Qr).call(this),
                cs(this, ht, Sr).call(this),
                us(this, dt, hs),
                us(this, ot, bs),
                this.setDims(hs, bs);
                const Ms = Lt ? ms / this.scaleFactor / 2 : 0;
                this.translate(ls - this.translationX - Ms, Ds - this.translationY - Ms)
            }
            ,
            ps(_s, St),
            tr(_s, "_defaultColor", null),
            tr(_s, "_defaultOpacity", 1),
            tr(_s, "_defaultThickness", 1),
            tr(_s, "_type", "ink");
            let g = _s;
            e.InkEditor = g
        }
        , (s, e, i) => {
            var g, b, _, $, _e, tt, rt, et, it, st, nt, vn, bn, Bn, Ao, Ol, Fl, ko, Un, $l;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.StampEditor = void 0;
            var o = i(1)
              , a = i(4)
              , c = i(6)
              , d = i(29);
            const Rt = class Rt extends a.AnnotationEditor {
                constructor(zt) {
                    super({
                        ...zt,
                        name: "stampEditor"
                    });
                    ps(this, nt);
                    ps(this, g, null);
                    ps(this, b, null);
                    ps(this, _, null);
                    ps(this, $, null);
                    ps(this, _e, null);
                    ps(this, tt, null);
                    ps(this, rt, null);
                    ps(this, et, null);
                    ps(this, it, !1);
                    ps(this, st, !1);
                    us(this, $, zt.bitmapUrl),
                    us(this, _e, zt.bitmapFile)
                }
                static initialize(zt) {
                    a.AnnotationEditor.initialize(zt)
                }
                static get supportedTypes() {
                    const zt = ["apng", "avif", "bmp", "gif", "jpeg", "png", "svg+xml", "webp", "x-icon"];
                    return (0,
                    o.shadow)(this, "supportedTypes", zt.map(At => `image/${At}`))
                }
                static get supportedTypesStr() {
                    return (0,
                    o.shadow)(this, "supportedTypesStr", this.supportedTypes.join(","))
                }
                static isHandlingMimeForPasting(zt) {
                    return this.supportedTypes.includes(zt)
                }
                static paste(zt, At) {
                    At.pasteEditor(o.AnnotationEditorType.STAMP, {
                        bitmapFile: zt.getAsFile()
                    })
                }
                remove() {
                    var zt, At;
                    mt(this, b) && (us(this, g, null),
                    this._uiManager.imageManager.deleteId(mt(this, b)),
                    (zt = mt(this, tt)) == null || zt.remove(),
                    us(this, tt, null),
                    (At = mt(this, rt)) == null || At.disconnect(),
                    us(this, rt, null)),
                    super.remove()
                }
                rebuild() {
                    if (!this.parent) {
                        mt(this, b) && cs(this, nt, Bn).call(this);
                        return
                    }
                    super.rebuild(),
                    this.div !== null && (mt(this, b) && cs(this, nt, Bn).call(this),
                    this.isAttachedToDOM || this.parent.add(this))
                }
                onceAdded() {
                    this._isDraggable = !0,
                    this.div.focus()
                }
                isEmpty() {
                    return !(mt(this, _) || mt(this, g) || mt(this, $) || mt(this, _e))
                }
                get isResizable() {
                    return !0
                }
                render() {
                    if (this.div)
                        return this.div;
                    let zt, At;
                    if (this.width && (zt = this.x,
                    At = this.y),
                    super.render(),
                    this.div.hidden = !0,
                    mt(this, g) ? cs(this, nt, Ao).call(this) : cs(this, nt, Bn).call(this),
                    this.width) {
                        const [kt,vt] = this.parentDimensions;
                        this.setAt(zt * kt, At * vt, this.width * kt, this.height * vt)
                    }
                    return this.div
                }
                static deserialize(zt, At, kt) {
                    if (zt instanceof d.StampAnnotationElement)
                        return null;
                    const vt = super.deserialize(zt, At, kt)
                      , {rect: bt, bitmapUrl: Tt, bitmapId: Yt, isSvg: Nt, accessibilityData: jt} = zt;
                    Yt && kt.imageManager.isValidId(Yt) ? us(vt, b, Yt) : us(vt, $, Tt),
                    us(vt, it, Nt);
                    const [xt,Et] = vt.pageDimensions;
                    return vt.width = (bt[2] - bt[0]) / xt,
                    vt.height = (bt[3] - bt[1]) / Et,
                    jt && (vt.altTextData = jt),
                    vt
                }
                serialize(zt=!1, At=null) {
                    if (this.isEmpty())
                        return null;
                    const kt = {
                        annotationType: o.AnnotationEditorType.STAMP,
                        bitmapId: mt(this, b),
                        pageIndex: this.pageIndex,
                        rect: this.getRect(0, 0),
                        rotation: this.rotation,
                        isSvg: mt(this, it),
                        structTreeParentId: this._structTreeParentId
                    };
                    if (zt)
                        return kt.bitmapUrl = cs(this, nt, Un).call(this, !0),
                        kt.accessibilityData = this.altTextData,
                        kt;
                    const {decorative: vt, altText: bt} = this.altTextData;
                    if (!vt && bt && (kt.accessibilityData = {
                        type: "Figure",
                        alt: bt
                    }),
                    At === null)
                        return kt;
                    At.stamps || (At.stamps = new Map);
                    const Tt = mt(this, it) ? (kt.rect[2] - kt.rect[0]) * (kt.rect[3] - kt.rect[1]) : null;
                    if (!At.stamps.has(mt(this, b)))
                        At.stamps.set(mt(this, b), {
                            area: Tt,
                            serialized: kt
                        }),
                        kt.bitmap = cs(this, nt, Un).call(this, !1);
                    else if (mt(this, it)) {
                        const Yt = At.stamps.get(mt(this, b));
                        Tt > Yt.area && (Yt.area = Tt,
                        Yt.serialized.bitmap.close(),
                        Yt.serialized.bitmap = cs(this, nt, Un).call(this, !1))
                    }
                    return kt
                }
            }
            ;
            g = new WeakMap,
            b = new WeakMap,
            _ = new WeakMap,
            $ = new WeakMap,
            _e = new WeakMap,
            tt = new WeakMap,
            rt = new WeakMap,
            et = new WeakMap,
            it = new WeakMap,
            st = new WeakMap,
            nt = new WeakSet,
            vn = function(zt, At=!1) {
                if (!zt) {
                    this.remove();
                    return
                }
                us(this, g, zt.bitmap),
                At || (us(this, b, zt.id),
                us(this, it, zt.isSvg)),
                cs(this, nt, Ao).call(this)
            }
            ,
            bn = function() {
                us(this, _, null),
                this._uiManager.enableWaiting(!1),
                mt(this, tt) && this.div.focus()
            }
            ,
            Bn = function() {
                if (mt(this, b)) {
                    this._uiManager.enableWaiting(!0),
                    this._uiManager.imageManager.getFromId(mt(this, b)).then(At => cs(this, nt, vn).call(this, At, !0)).finally( () => cs(this, nt, bn).call(this));
                    return
                }
                if (mt(this, $)) {
                    const At = mt(this, $);
                    us(this, $, null),
                    this._uiManager.enableWaiting(!0),
                    us(this, _, this._uiManager.imageManager.getFromUrl(At).then(kt => cs(this, nt, vn).call(this, kt)).finally( () => cs(this, nt, bn).call(this)));
                    return
                }
                if (mt(this, _e)) {
                    const At = mt(this, _e);
                    us(this, _e, null),
                    this._uiManager.enableWaiting(!0),
                    us(this, _, this._uiManager.imageManager.getFromFile(At).then(kt => cs(this, nt, vn).call(this, kt)).finally( () => cs(this, nt, bn).call(this)));
                    return
                }
                const zt = document.createElement("input");
                zt.type = "file",
                zt.accept = Rt.supportedTypesStr,
                us(this, _, new Promise(At => {
                    zt.addEventListener("change", async () => {
                        if (!zt.files || zt.files.length === 0)
                            this.remove();
                        else {
                            this._uiManager.enableWaiting(!0);
                            const kt = await this._uiManager.imageManager.getFromFile(zt.files[0]);
                            cs(this, nt, vn).call(this, kt)
                        }
                        At()
                    }
                    ),
                    zt.addEventListener("cancel", () => {
                        this.remove(),
                        At()
                    }
                    )
                }
                ).finally( () => cs(this, nt, bn).call(this))),
                zt.click()
            }
            ,
            Ao = function() {
                const {div: zt} = this;
                let {width: At, height: kt} = mt(this, g);
                const [vt,bt] = this.pageDimensions
                  , Tt = .75;
                if (this.width)
                    At = this.width * vt,
                    kt = this.height * bt;
                else if (At > Tt * vt || kt > Tt * bt) {
                    const xt = Math.min(Tt * vt / At, Tt * bt / kt);
                    At *= xt,
                    kt *= xt
                }
                const [Yt,Nt] = this.parentDimensions;
                this.setDims(At * Yt / vt, kt * Nt / bt),
                this._uiManager.enableWaiting(!1);
                const jt = us(this, tt, document.createElement("canvas"));
                zt.append(jt),
                zt.hidden = !1,
                cs(this, nt, ko).call(this, At, kt),
                cs(this, nt, $l).call(this),
                mt(this, st) || (this.parent.addUndoableEditor(this),
                us(this, st, !0)),
                this._uiManager._eventBus.dispatch("reporttelemetry", {
                    source: this,
                    details: {
                        type: "editing",
                        subtype: this.editorType,
                        data: {
                            action: "inserted_image"
                        }
                    }
                }),
                this.addAltTextButton()
            }
            ,
            Ol = function(zt, At) {
                var Tt;
                const [kt,vt] = this.parentDimensions;
                this.width = zt / kt,
                this.height = At / vt,
                this.setDims(zt, At),
                (Tt = this._initialOptions) != null && Tt.isCentered ? this.center() : this.fixAndSetPosition(),
                this._initialOptions = null,
                mt(this, et) !== null && clearTimeout(mt(this, et)),
                us(this, et, setTimeout( () => {
                    us(this, et, null),
                    cs(this, nt, ko).call(this, zt, At)
                }
                , 200))
            }
            ,
            Fl = function(zt, At) {
                const {width: kt, height: vt} = mt(this, g);
                let bt = kt
                  , Tt = vt
                  , Yt = mt(this, g);
                for (; bt > 2 * zt || Tt > 2 * At; ) {
                    const Nt = bt
                      , jt = Tt;
                    bt > 2 * zt && (bt = bt >= 16384 ? Math.floor(bt / 2) - 1 : Math.ceil(bt / 2)),
                    Tt > 2 * At && (Tt = Tt >= 16384 ? Math.floor(Tt / 2) - 1 : Math.ceil(Tt / 2));
                    const xt = new OffscreenCanvas(bt,Tt);
                    xt.getContext("2d").drawImage(Yt, 0, 0, Nt, jt, 0, 0, bt, Tt),
                    Yt = xt.transferToImageBitmap()
                }
                return Yt
            }
            ,
            ko = function(zt, At) {
                zt = Math.ceil(zt),
                At = Math.ceil(At);
                const kt = mt(this, tt);
                if (!kt || kt.width === zt && kt.height === At)
                    return;
                kt.width = zt,
                kt.height = At;
                const vt = mt(this, it) ? mt(this, g) : cs(this, nt, Fl).call(this, zt, At)
                  , bt = kt.getContext("2d");
                bt.filter = this._uiManager.hcmFilter,
                bt.drawImage(vt, 0, 0, vt.width, vt.height, 0, 0, zt, At)
            }
            ,
            Un = function(zt) {
                if (zt) {
                    if (mt(this, it)) {
                        const vt = this._uiManager.imageManager.getSvgUrl(mt(this, b));
                        if (vt)
                            return vt
                    }
                    const At = document.createElement("canvas");
                    return {width: At.width, height: At.height} = mt(this, g),
                    At.getContext("2d").drawImage(mt(this, g), 0, 0),
                    At.toDataURL()
                }
                if (mt(this, it)) {
                    const [At,kt] = this.pageDimensions
                      , vt = Math.round(this.width * At * c.PixelsPerInch.PDF_TO_CSS_UNITS)
                      , bt = Math.round(this.height * kt * c.PixelsPerInch.PDF_TO_CSS_UNITS)
                      , Tt = new OffscreenCanvas(vt,bt);
                    return Tt.getContext("2d").drawImage(mt(this, g), 0, 0, mt(this, g).width, mt(this, g).height, 0, 0, vt, bt),
                    Tt.transferToImageBitmap()
                }
                return structuredClone(mt(this, g))
            }
            ,
            $l = function() {
                us(this, rt, new ResizeObserver(zt => {
                    const At = zt[0].contentRect;
                    At.width && At.height && cs(this, nt, Ol).call(this, At.width, At.height)
                }
                )),
                mt(this, rt).observe(this.div)
            }
            ,
            tr(Rt, "_type", "stamp");
            let h = Rt;
            e.StampEditor = h
        }
        ]
          , __webpack_module_cache__ = {};
        function __w_pdfjs_require__(s) {
            var e = __webpack_module_cache__[s];
            if (e !== void 0)
                return e.exports;
            var i = __webpack_module_cache__[s] = {
                exports: {}
            };
            return __webpack_modules__[s](i, i.exports, __w_pdfjs_require__),
            i.exports
        }
        var __webpack_exports__ = {};
        return ( () => {
            var s = __webpack_exports__;
            Object.defineProperty(s, "__esModule", {
                value: !0
            }),
            Object.defineProperty(s, "AbortException", {
                enumerable: !0,
                get: function() {
                    return e.AbortException
                }
            }),
            Object.defineProperty(s, "AnnotationEditorLayer", {
                enumerable: !0,
                get: function() {
                    return c.AnnotationEditorLayer
                }
            }),
            Object.defineProperty(s, "AnnotationEditorParamsType", {
                enumerable: !0,
                get: function() {
                    return e.AnnotationEditorParamsType
                }
            }),
            Object.defineProperty(s, "AnnotationEditorType", {
                enumerable: !0,
                get: function() {
                    return e.AnnotationEditorType
                }
            }),
            Object.defineProperty(s, "AnnotationEditorUIManager", {
                enumerable: !0,
                get: function() {
                    return d.AnnotationEditorUIManager
                }
            }),
            Object.defineProperty(s, "AnnotationLayer", {
                enumerable: !0,
                get: function() {
                    return h.AnnotationLayer
                }
            }),
            Object.defineProperty(s, "AnnotationMode", {
                enumerable: !0,
                get: function() {
                    return e.AnnotationMode
                }
            }),
            Object.defineProperty(s, "CMapCompressionType", {
                enumerable: !0,
                get: function() {
                    return e.CMapCompressionType
                }
            }),
            Object.defineProperty(s, "DOMSVGFactory", {
                enumerable: !0,
                get: function() {
                    return o.DOMSVGFactory
                }
            }),
            Object.defineProperty(s, "FeatureTest", {
                enumerable: !0,
                get: function() {
                    return e.FeatureTest
                }
            }),
            Object.defineProperty(s, "GlobalWorkerOptions", {
                enumerable: !0,
                get: function() {
                    return g.GlobalWorkerOptions
                }
            }),
            Object.defineProperty(s, "ImageKind", {
                enumerable: !0,
                get: function() {
                    return e.ImageKind
                }
            }),
            Object.defineProperty(s, "InvalidPDFException", {
                enumerable: !0,
                get: function() {
                    return e.InvalidPDFException
                }
            }),
            Object.defineProperty(s, "MissingPDFException", {
                enumerable: !0,
                get: function() {
                    return e.MissingPDFException
                }
            }),
            Object.defineProperty(s, "OPS", {
                enumerable: !0,
                get: function() {
                    return e.OPS
                }
            }),
            Object.defineProperty(s, "PDFDataRangeTransport", {
                enumerable: !0,
                get: function() {
                    return i.PDFDataRangeTransport
                }
            }),
            Object.defineProperty(s, "PDFDateString", {
                enumerable: !0,
                get: function() {
                    return o.PDFDateString
                }
            }),
            Object.defineProperty(s, "PDFWorker", {
                enumerable: !0,
                get: function() {
                    return i.PDFWorker
                }
            }),
            Object.defineProperty(s, "PasswordResponses", {
                enumerable: !0,
                get: function() {
                    return e.PasswordResponses
                }
            }),
            Object.defineProperty(s, "PermissionFlag", {
                enumerable: !0,
                get: function() {
                    return e.PermissionFlag
                }
            }),
            Object.defineProperty(s, "PixelsPerInch", {
                enumerable: !0,
                get: function() {
                    return o.PixelsPerInch
                }
            }),
            Object.defineProperty(s, "PromiseCapability", {
                enumerable: !0,
                get: function() {
                    return e.PromiseCapability
                }
            }),
            Object.defineProperty(s, "RenderingCancelledException", {
                enumerable: !0,
                get: function() {
                    return o.RenderingCancelledException
                }
            }),
            Object.defineProperty(s, "SVGGraphics", {
                enumerable: !0,
                get: function() {
                    return i.SVGGraphics
                }
            }),
            Object.defineProperty(s, "UnexpectedResponseException", {
                enumerable: !0,
                get: function() {
                    return e.UnexpectedResponseException
                }
            }),
            Object.defineProperty(s, "Util", {
                enumerable: !0,
                get: function() {
                    return e.Util
                }
            }),
            Object.defineProperty(s, "VerbosityLevel", {
                enumerable: !0,
                get: function() {
                    return e.VerbosityLevel
                }
            }),
            Object.defineProperty(s, "XfaLayer", {
                enumerable: !0,
                get: function() {
                    return b.XfaLayer
                }
            }),
            Object.defineProperty(s, "build", {
                enumerable: !0,
                get: function() {
                    return i.build
                }
            }),
            Object.defineProperty(s, "createValidAbsoluteUrl", {
                enumerable: !0,
                get: function() {
                    return e.createValidAbsoluteUrl
                }
            }),
            Object.defineProperty(s, "getDocument", {
                enumerable: !0,
                get: function() {
                    return i.getDocument
                }
            }),
            Object.defineProperty(s, "getFilenameFromUrl", {
                enumerable: !0,
                get: function() {
                    return o.getFilenameFromUrl
                }
            }),
            Object.defineProperty(s, "getPdfFilenameFromUrl", {
                enumerable: !0,
                get: function() {
                    return o.getPdfFilenameFromUrl
                }
            }),
            Object.defineProperty(s, "getXfaPageViewport", {
                enumerable: !0,
                get: function() {
                    return o.getXfaPageViewport
                }
            }),
            Object.defineProperty(s, "isDataScheme", {
                enumerable: !0,
                get: function() {
                    return o.isDataScheme
                }
            }),
            Object.defineProperty(s, "isPdfFile", {
                enumerable: !0,
                get: function() {
                    return o.isPdfFile
                }
            }),
            Object.defineProperty(s, "loadScript", {
                enumerable: !0,
                get: function() {
                    return o.loadScript
                }
            }),
            Object.defineProperty(s, "noContextMenu", {
                enumerable: !0,
                get: function() {
                    return o.noContextMenu
                }
            }),
            Object.defineProperty(s, "normalizeUnicode", {
                enumerable: !0,
                get: function() {
                    return e.normalizeUnicode
                }
            }),
            Object.defineProperty(s, "renderTextLayer", {
                enumerable: !0,
                get: function() {
                    return a.renderTextLayer
                }
            }),
            Object.defineProperty(s, "setLayerDimensions", {
                enumerable: !0,
                get: function() {
                    return o.setLayerDimensions
                }
            }),
            Object.defineProperty(s, "shadow", {
                enumerable: !0,
                get: function() {
                    return e.shadow
                }
            }),
            Object.defineProperty(s, "updateTextLayer", {
                enumerable: !0,
                get: function() {
                    return a.updateTextLayer
                }
            }),
            Object.defineProperty(s, "version", {
                enumerable: !0,
                get: function() {
                    return i.version
                }
            });
            var e = __w_pdfjs_require__(1)
              , i = __w_pdfjs_require__(2)
              , o = __w_pdfjs_require__(6)
              , a = __w_pdfjs_require__(26)
              , c = __w_pdfjs_require__(27)
              , d = __w_pdfjs_require__(5)
              , h = __w_pdfjs_require__(29)
              , g = __w_pdfjs_require__(14)
              , b = __w_pdfjs_require__(32)
        }
        )(),
        __webpack_exports__
    }
    )())
}
)(pdf);
var pdfExports = pdf.exports;
pdfExports.GlobalWorkerOptions.workerSrc = "/pdf.worker.min.js";
class OpenAIResumeParser {
    constructor() {
        tr(this, "baseUrl");
        this.baseUrl = `${getConfig().supabase.url}/functions/v1/openai-proxy`
    }
    async extractTextFromPDF(e) {
        try {
            const i = await e.arrayBuffer()
              , o = await pdfExports.getDocument(i).promise;
            let a = "";
            for (let c = 1; c <= o.numPages; c++) {
                const g = (await (await o.getPage(c)).getTextContent()).items.map(b => b.str).join(" ");
                a += g + `
`
            }
            return a.trim()
        } catch (i) {
            throw console.error("Error extracting text from PDF:", i),
            new Error("Failed to extract text from PDF")
        }
    }
    async makeOpenAIRequest(e, i=.1) {
        try {
            const {data: {session: o}} = await supabase.auth.getSession();
            if (!(o != null && o.access_token))
                throw new Error("Authentication required. Please sign in to parse resumes.");
            const a = await fetch(this.baseUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${o.access_token}`
                },
                body: JSON.stringify({
                    model: "gpt-3.5-turbo",
                    messages: e,
                    temperature: i,
                    max_tokens: 2e3
                })
            });
            if (!a.ok) {
                const d = await a.json();
                throw new Error(d.error || `HTTP error! status: ${a.status}`)
            }
            const c = await a.json();
            if (!c.choices || !c.choices[0] || !c.choices[0].message)
                throw new Error("Invalid response format from OpenAI API");
            return c.choices[0].message.content
        } catch (o) {
            throw console.error("Error making OpenAI request:", o),
            o
        }
    }
    async parseResumeWithAI(e) {
        const i = `
You are an expert resume parser. Extract and structure the following resume text into a comprehensive JSON format.

RESUME TEXT:
${e}

Please extract ALL available information and structure it into the following JSON format. If a section is not present or information is not available, use empty arrays or empty strings as appropriate:

{
  "profile": {
    "name": "Full name of the person",
    "email": "Email address",
    "phone": "Phone number",
    "location": "City, State or full address",
    "url": "Primary website/portfolio URL (extract the main one, not LinkedIn/GitHub)",
    "linkedin": "LinkedIn profile URL or username (separate from main URL)",
    "github": "GitHub profile URL or username (separate from main URL)",
    "summary": "Professional summary or objective statement"
  },
  "workExperiences": [
    {
      "company": "Company name",
      "jobTitle": "Job title/position",
      "date": "Employment dates (e.g., 'Jan 2020 - Present' or '2020-2022')",
      "jobDescription": "Brief overview of the role and main responsibilities (2-3 sentences max)",
      "achievements": ["Specific achievement with quantifiable results", "Another measurable accomplishment", "Key contribution or impact"]
    }
  ],
  "educations": [
    {
      "school": "Institution name",
      "degree": "Degree type and field of study",
      "date": "Graduation date or date range",
      "gpa": "GPA if mentioned",
      "coursework": ["Relevant coursework item 1", "Relevant coursework item 2"],
      "honors": ["Academic honors", "Dean's List", "Magna Cum Laude"],
      "activities": ["Student organizations", "Academic projects", "Leadership roles"]
    }
  ],
  "skills": {
    "programmingLanguages": ["JavaScript", "Python", "Java", "C++", "TypeScript", "Go", "Rust", "Swift", "Kotlin"],
    "frameworks": ["React", "Angular", "Vue", "Node.js", "Express", "Django", "Spring", "Laravel", "Flutter"],
    "technicalSkills": ["AWS", "Docker", "Kubernetes", "Git", "SQL", "MongoDB", "Redis", "GraphQL", "REST APIs"],
    "softSkills": ["Leadership", "Communication", "Problem Solving", "Team Collaboration", "Project Management"],
    "tools": ["VS Code", "IntelliJ", "Figma", "Photoshop", "Jira", "Slack", "Trello"]
  },
  "projects": [
    {
      "project": "Project name",
      "date": "Project date or date range",
      "descriptions": ["Project description", "Technologies used", "Key achievements"]
    }
  ],
  "certifications": [
    {
      "name": "Certification name",
      "issuer": "Issuing organization",
      "date": "Date obtained",
      "expiryDate": "Expiry date if mentioned",
      "credentialId": "Credential ID if mentioned"
    }
  ],
  "languages": [
    {
      "language": "Language name",
      "proficiency": "Proficiency level (e.g., Native, Fluent, Intermediate, Basic)"
    }
  ],
  "volunteers": [
    {
      "organization": "Organization name",
      "role": "Volunteer role/position",
      "date": "Date range of volunteer work",
      "descriptions": ["Description of volunteer work", "Achievements"]
    }
  ],
  "awards": [
    {
      "title": "Award or honor title",
      "issuer": "Issuing organization",
      "date": "Date received",
      "description": "Description of the award"
    }
  ]
}

CRITICAL PARSING INSTRUCTIONS:

1. CONTACT INFORMATION:
   - Extract email, phone, and location from header/contact section
   - For URLs: Separate LinkedIn, GitHub, and main website/portfolio URLs
   - LinkedIn: Look for linkedin.com/in/ patterns
   - GitHub: Look for github.com/ patterns  
   - Main URL: Portfolio, personal website, or other professional URLs

2. WORK EXPERIENCE - SEPARATE JOB DESCRIPTION FROM ACHIEVEMENTS:
   - jobDescription: Brief role overview and main responsibilities (avoid bullet points)
   - achievements: Specific accomplishments with numbers, metrics, or measurable impact
   - DO NOT duplicate content between jobDescription and achievements
   - achievements should be quantifiable results, not general responsibilities

3. EDUCATION - CATEGORIZE DESCRIPTIONS PROPERLY:
   - coursework: Only actual course names or academic subjects
   - honors: Academic achievements like "Dean's List", "Magna Cum Laude", "Summa Cum Laude"
   - activities: Student organizations, clubs, leadership roles, academic projects
   - DO NOT put everything in one array - categorize appropriately

4. SKILLS - INTELLIGENT CATEGORIZATION:
   - programmingLanguages: Only actual programming languages
   - frameworks: Libraries, frameworks, and development platforms
   - technicalSkills: Tools, databases, cloud services, methodologies
   - softSkills: Interpersonal and management skills
   - tools: Software applications and development tools
   - DO NOT put all skills in one category

5. GENERAL RULES:
   - Extract ALL information present in the resume
   - Break down long paragraphs into individual bullet points
   - Standardize date formats but keep original meaning
   - Make reasonable inferences based on context
   - Ensure JSON is valid and properly formatted
   - Do not add information not present in the resume

Return ONLY the JSON object, no additional text or explanation.
`;
        try {
            const o = [{
                role: "system",
                content: "You are an expert resume parser. Always respond with valid JSON only."
            }, {
                role: "user",
                content: i
            }]
              , c = (await this.makeOpenAIRequest(o)).trim()
              , d = c.match(/\{[\s\S]*\}/)
              , h = d ? d[0] : c;
            return JSON.parse(h)
        } catch (o) {
            throw console.error("Error parsing resume with AI:", o),
            new Error("Failed to parse resume with AI. Please try again.")
        }
    }
    convertToResumeType(e) {
        return {
            profile: {
                name: e.profile.name || "",
                email: e.profile.email || "",
                phone: e.profile.phone || "",
                url: e.profile.url || "",
                linkedin: e.profile.linkedin || "",
                github: e.profile.github || "",
                summary: e.profile.summary || "",
                location: e.profile.location || ""
            },
            workExperiences: e.workExperiences.map(i => ({
                company: i.company || "",
                jobTitle: i.jobTitle || "",
                date: i.date || "",
                jobDescription: i.jobDescription || "",
                achievements: i.achievements || [],
                descriptions: i.achievements || []
            })),
            educations: e.educations.map(i => ({
                school: i.school || "",
                degree: i.degree || "",
                date: i.date || "",
                gpa: i.gpa || "",
                coursework: i.coursework || [],
                honors: i.honors || [],
                activities: i.activities || [],
                descriptions: [...i.coursework || [], ...i.honors || [], ...i.activities || []]
            })),
            projects: e.projects.map(i => ({
                project: i.project || "",
                date: i.date || "",
                descriptions: i.descriptions || []
            })),
            skills: {
                programmingLanguages: e.skills.programmingLanguages || [],
                frameworks: e.skills.frameworks || [],
                technicalSkills: e.skills.technicalSkills || [],
                softSkills: e.skills.softSkills || [],
                tools: e.skills.tools || [],
                featuredSkills: [],
                descriptions: [...e.skills.programmingLanguages || [], ...e.skills.frameworks || [], ...e.skills.technicalSkills || [], ...e.skills.softSkills || [], ...e.skills.tools || []]
            },
            awards: e.awards.map(i => ({
                title: i.title || "",
                issuer: i.issuer || "",
                date: i.date || "",
                description: i.description || ""
            })),
            volunteers: e.volunteers.map(i => ({
                organization: i.organization || "",
                role: i.role || "",
                date: i.date || "",
                descriptions: i.descriptions || []
            })),
            certifications: e.certifications.map(i => ({
                name: i.name || "",
                issuer: i.issuer || "",
                date: i.date || "",
                expiryDate: i.expiryDate || "",
                credentialId: i.credentialId || ""
            })),
            languages: e.languages.map(i => ({
                language: i.language || "",
                proficiency: i.proficiency || ""
            })),
            custom: {
                descriptions: []
            }
        }
    }
    async parseResumeFromPdf(e) {
        try {
            console.log("Starting OpenAI-based resume parsing..."),
            console.log("Extracting text from PDF...");
            const i = await this.extractTextFromPDF(e);
            if (!i.trim())
                throw new Error("No text could be extracted from the PDF. Please ensure the PDF contains readable text.");
            console.log("Extracted text length:", i.length),
            console.log("Parsing resume with OpenAI...");
            const o = await this.parseResumeWithAI(i);
            console.log("Converting to Resume format...");
            const a = this.convertToResumeType(o);
            return console.log("Resume parsing completed successfully!"),
            a
        } catch (i) {
            throw console.error("Error in OpenAI resume parsing:", i),
            i
        }
    }
}
const openaiResumeParser = new OpenAIResumeParser
  , parseResumeFromPdf = s => openaiResumeParser.parseResumeFromPdf(s)
  , defaultFileState = {
    name: "",
    size: 0,
    fileUrl: ""
}
  , ResumeDropzone = ({onResumeExtracted: s, onFileUrlChange: e, className: i, disabled: o=!1}) => {
    const [a,c] = reactExports.useState(defaultFileState)
      , [d,h] = reactExports.useState(!1)
      , [g,b] = reactExports.useState(!1)
      , [_,$] = reactExports.useState(!1)
      , [_e,tt] = reactExports.useState(null)
      , rt = !!a.name
      , et = ot => {
        a.fileUrl && URL.revokeObjectURL(a.fileUrl);
        const {name: at, size: ht} = ot
          , pt = URL.createObjectURL(ot);
        c({
            name: at,
            size: ht,
            fileUrl: pt
        }),
        e == null || e(pt),
        tt(null)
    }
      , it = ot => {
        if (ot.preventDefault(),
        o)
            return;
        const at = ot.dataTransfer.files[0];
        at != null && at.name.endsWith(".pdf") ? (b(!1),
        et(at)) : b(!0),
        h(!1)
    }
      , st = async ot => {
        const at = ot.target.files;
        if (!at || o)
            return;
        const ht = at[0];
        ht != null && ht.name.endsWith(".pdf") ? (b(!1),
        et(ht)) : b(!0)
    }
      , nt = () => {
        a.fileUrl && URL.revokeObjectURL(a.fileUrl),
        c(defaultFileState),
        e == null || e(""),
        tt(null)
    }
      , lt = async () => {
        if (a.fileUrl) {
            $(!0),
            tt(null);
            try {
                const ot = await parseResumeFromPdf(a.fileUrl);
                s(ot)
            } catch (ot) {
                console.error("Error parsing resume:", ot),
                tt("Failed to parse resume. Please make sure the PDF is readable and try again.")
            } finally {
                $(!1)
            }
        }
    }
      , dt = ot => {
        const at = ot / 1024
          , ht = at / 1024;
        return at < 1e3 ? at.toPrecision(3) + " KB" : ht.toPrecision(3) + " MB"
    }
    ;
    return jsxRuntimeExports.jsx("div", {
        className: cn("flex justify-center rounded-xl border-2 border-dashed border-gray-300 px-6 py-12 transition-all duration-200", d && !o && "border-blue-400 bg-blue-50 scale-[1.02]", o && "opacity-50 cursor-not-allowed", !rt && "hover:border-gray-400 hover:bg-gray-50", i),
        onDragOver: ot => {
            ot.preventDefault(),
            o || h(!0)
        }
        ,
        onDragLeave: () => h(!1),
        onDrop: it,
        children: jsxRuntimeExports.jsxs("div", {
            className: "text-center space-y-4",
            children: [rt ? jsxRuntimeExports.jsxs("div", {
                className: "space-y-4",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-center gap-3",
                    children: [jsxRuntimeExports.jsx(FileText, {
                        className: "h-8 w-8 text-blue-500"
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "text-left",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "font-semibold text-gray-900",
                            children: a.name
                        }), jsxRuntimeExports.jsx("div", {
                            className: "text-sm text-gray-500",
                            children: dt(a.size)
                        })]
                    }), jsxRuntimeExports.jsx(Button, {
                        variant: "ghost",
                        size: "sm",
                        onClick: nt,
                        disabled: o || _,
                        className: "ml-2",
                        children: jsxRuntimeExports.jsx(X, {
                            className: "h-4 w-4"
                        })
                    })]
                }), _e && jsxRuntimeExports.jsx("div", {
                    className: "text-sm text-red-600 bg-red-50 p-3 rounded-md",
                    children: _e
                }), jsxRuntimeExports.jsx(Button, {
                    onClick: lt,
                    disabled: o || _,
                    className: "w-full h-12 text-base bg-blue-600 hover:bg-blue-700",
                    children: _ ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"
                        }), "Parsing Resume..."]
                    }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [jsxRuntimeExports.jsx(Zap, {
                            className: "w-4 h-4 mr-2"
                        }), "Parse Resume & Auto-fill"]
                    })
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-xs text-gray-500",
                    children: "Powered by AI - Works with any resume format and layout"
                })]
            }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [jsxRuntimeExports.jsx("div", {
                    className: "mx-auto h-12 w-12 text-gray-400",
                    children: jsxRuntimeExports.jsx(Upload, {
                        className: "h-full w-full"
                    })
                }), jsxRuntimeExports.jsxs("div", {
                    children: [jsxRuntimeExports.jsx("p", {
                        className: "text-lg font-semibold text-gray-900",
                        children: "Upload your resume PDF"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-sm text-gray-500 mt-1",
                        children: "Drag and drop your PDF file here, or click to browse"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-center text-sm text-gray-500",
                    children: [jsxRuntimeExports.jsx(Lock, {
                        className: "mr-1 h-3 w-3"
                    }), "File data is processed locally and never leaves your browser"]
                })]
            }), !rt && jsxRuntimeExports.jsxs("div", {
                children: [jsxRuntimeExports.jsxs("label", {
                    className: "cursor-pointer inline-flex items-center px-6 py-3 border border-gray-300 rounded-lg shadow-sm text-base font-medium text-gray-700 bg-white hover:bg-gray-50 hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200",
                    children: [jsxRuntimeExports.jsx(Upload, {
                        className: "w-4 h-4 mr-2"
                    }), "Browse Files", jsxRuntimeExports.jsx("input", {
                        type: "file",
                        className: "sr-only",
                        accept: ".pdf",
                        onChange: st,
                        disabled: o
                    })]
                }), g && jsxRuntimeExports.jsx("p", {
                    className: "mt-2 text-sm text-red-600",
                    children: "Only PDF files are supported"
                })]
            })]
        })
    })
}
  , ResumeImport = ({onResumeImported: s, showCreateFromScratch: e=!0}) => {
    const [i,o] = reactExports.useState(!1)
      , [a,c] = reactExports.useState(!1)
      , [d,h] = reactExports.useState(0)
      , [g,b] = reactExports.useState(null)
      , _ = useNavigate()
      , $ = [{
        label: "Uploading file",
        icon: Upload
    }, {
        label: "Analyzing document",
        icon: Brain
    }, {
        label: "Extracting information",
        icon: FileCheck
    }, {
        label: "Optimizing content",
        icon: Target
    }, {
        label: "Ready to build",
        icon: CircleCheckBig
    }]
      , _e = it => {
        o(!0),
        b(it),
        s == null || s(it),
        localStorage.setItem("parsedResumeData", JSON.stringify(it)),
        c(!0),
        h(0);
        const st = setInterval( () => {
            h(nt => nt >= $.length - 1 ? (clearInterval(st),
            setTimeout( () => {
                c(!1),
                _("/resume-builder-form")
            }
            , 1e3),
            nt) : nt + 1)
        }
        , 800)
    }
      , tt = () => {
        localStorage.removeItem("parsedResumeData"),
        _("/resume-builder-form")
    }
      , rt = () => {
        o(!1),
        b(null),
        c(!1),
        h(0)
    }
      , et = () => {
        _("/resume-builder")
    }
    ;
    return jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-gradient-to-br from-pink-50 via-white to-pink-100",
        children: [jsxRuntimeExports.jsx("div", {
            className: "bg-white/80 backdrop-blur-sm border-b border-pink-200 sticky top-0 z-10",
            children: jsxRuntimeExports.jsx("div", {
                className: "max-w-6xl mx-auto px-6 py-4",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-4",
                        children: [jsxRuntimeExports.jsxs(Button, {
                            variant: "ghost",
                            size: "sm",
                            onClick: et,
                            className: "flex items-center gap-2 hover:bg-pink-100",
                            children: [jsxRuntimeExports.jsx(ArrowLeft, {
                                className: "w-4 h-4"
                            }), "Back to Builder"]
                        }), jsxRuntimeExports.jsx(Separator, {
                            orientation: "vertical",
                            className: "h-6"
                        }), jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsxs("h1", {
                                className: "text-xl font-semibold text-gray-900 flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(Sparkles, {
                                    className: "w-5 h-5 text-primary"
                                }), "Smart Resume Import"]
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-sm text-gray-600",
                                children: "AI-powered resume parsing and optimization"
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs(Badge, {
                        variant: "outline",
                        className: "bg-pink-50 text-pink-700 border-pink-200",
                        children: [jsxRuntimeExports.jsx(Shield, {
                            className: "w-3 h-3 mr-1"
                        }), "100% Secure & Private"]
                    })]
                })
            })
        }), jsxRuntimeExports.jsx("div", {
            className: "max-w-6xl mx-auto px-6 py-12",
            children: jsxRuntimeExports.jsx(AnimatePresence, {
                mode: "wait",
                children: a ? jsxRuntimeExports.jsx(motion.div, {
                    initial: {
                        opacity: 0,
                        scale: .95
                    },
                    animate: {
                        opacity: 1,
                        scale: 1
                    },
                    exit: {
                        opacity: 0,
                        scale: .95
                    },
                    className: "max-w-2xl mx-auto",
                    children: jsxRuntimeExports.jsxs(Card, {
                        className: "border-0 shadow-2xl bg-white/90 backdrop-blur-sm",
                        children: [jsxRuntimeExports.jsxs(CardHeader, {
                            className: "text-center pb-6",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "mx-auto w-16 h-16 bg-pink-100 rounded-full flex items-center justify-center mb-4",
                                children: jsxRuntimeExports.jsx(motion.div, {
                                    animate: {
                                        rotate: 360
                                    },
                                    transition: {
                                        duration: 2,
                                        repeat: 1 / 0,
                                        ease: "linear"
                                    },
                                    children: jsxRuntimeExports.jsx(Brain, {
                                        className: "w-8 h-8 text-pink-600"
                                    })
                                })
                            }), jsxRuntimeExports.jsx(CardTitle, {
                                className: "text-2xl",
                                children: "Processing Your Resume"
                            }), jsxRuntimeExports.jsx(CardDescription, {
                                className: "text-lg",
                                children: "Our AI is analyzing and optimizing your resume content"
                            })]
                        }), jsxRuntimeExports.jsxs(CardContent, {
                            className: "space-y-6",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "space-y-4",
                                children: $.map( (it, st) => {
                                    const nt = st === d
                                      , lt = st < d
                                      , dt = it.icon;
                                    return jsxRuntimeExports.jsxs(motion.div, {
                                        initial: {
                                            opacity: 0,
                                            x: -20
                                        },
                                        animate: {
                                            opacity: 1,
                                            x: 0
                                        },
                                        transition: {
                                            delay: st * .1
                                        },
                                        className: `flex items-center gap-3 p-3 rounded-lg transition-all ${nt ? "bg-pink-50 border border-pink-200" : lt ? "bg-green-50" : "bg-gray-50"}`,
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: `w-8 h-8 rounded-full flex items-center justify-center ${nt ? "bg-pink-600 text-white" : lt ? "bg-green-600 text-white" : "bg-gray-300 text-gray-600"}`,
                                            children: lt ? jsxRuntimeExports.jsx(CircleCheckBig, {
                                                className: "w-4 h-4"
                                            }) : jsxRuntimeExports.jsx(dt, {
                                                className: `w-4 h-4 ${nt ? "animate-pulse" : ""}`
                                            })
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: `font-medium ${nt ? "text-pink-900" : lt ? "text-green-900" : "text-gray-600"}`,
                                            children: it.label
                                        }), nt && jsxRuntimeExports.jsx(motion.div, {
                                            animate: {
                                                opacity: [.5, 1, .5]
                                            },
                                            transition: {
                                                duration: 1.5,
                                                repeat: 1 / 0
                                            },
                                            className: "ml-auto",
                                            children: jsxRuntimeExports.jsx("div", {
                                                className: "w-2 h-2 bg-pink-600 rounded-full"
                                            })
                                        })]
                                    }, st)
                                }
                                )
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex justify-between text-sm text-gray-600",
                                    children: [jsxRuntimeExports.jsx("span", {
                                        children: "Progress"
                                    }), jsxRuntimeExports.jsxs("span", {
                                        children: [Math.round((d + 1) / $.length * 100), "%"]
                                    })]
                                }), jsxRuntimeExports.jsx(Progress, {
                                    value: (d + 1) / $.length * 100,
                                    className: "h-2"
                                })]
                            })]
                        })]
                    })
                }, "processing") : i ? jsxRuntimeExports.jsx(motion.div, {
                    initial: {
                        opacity: 0,
                        scale: .95
                    },
                    animate: {
                        opacity: 1,
                        scale: 1
                    },
                    exit: {
                        opacity: 0,
                        scale: .95
                    },
                    className: "max-w-2xl mx-auto text-center",
                    children: jsxRuntimeExports.jsxs(Card, {
                        className: "border-0 shadow-2xl bg-white/90 backdrop-blur-sm",
                        children: [jsxRuntimeExports.jsxs(CardHeader, {
                            className: "text-center pb-6",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4",
                                children: jsxRuntimeExports.jsx(CircleCheckBig, {
                                    className: "w-8 h-8 text-green-600"
                                })
                            }), jsxRuntimeExports.jsx(CardTitle, {
                                className: "text-2xl text-green-900",
                                children: "Resume Successfully Imported!"
                            }), jsxRuntimeExports.jsx(CardDescription, {
                                className: "text-lg",
                                children: "Your resume has been parsed and is ready for enhancement"
                            })]
                        }), jsxRuntimeExports.jsxs(CardContent, {
                            className: "space-y-6",
                            children: [jsxRuntimeExports.jsxs(Alert, {
                                className: "border-green-200 bg-green-50",
                                children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                                    className: "h-4 w-4 text-green-600"
                                }), jsxRuntimeExports.jsxs(AlertDescription, {
                                    className: "text-green-800",
                                    children: [jsxRuntimeExports.jsx("strong", {
                                        children: "Great!"
                                    }), " We've extracted your information and you'll be redirected to the resume builder shortly."]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex gap-3",
                                children: [jsxRuntimeExports.jsxs(Button, {
                                    onClick: rt,
                                    variant: "outline",
                                    className: "flex-1",
                                    children: [jsxRuntimeExports.jsx(RefreshCw, {
                                        className: "w-4 h-4 mr-2"
                                    }), "Try Another Resume"]
                                }), jsxRuntimeExports.jsxs(Button, {
                                    onClick: () => _("/resume-builder-form"),
                                    className: "flex-1 bg-green-600 hover:bg-green-700",
                                    children: ["Continue Building", jsxRuntimeExports.jsx(ArrowRight, {
                                        className: "w-4 h-4 ml-2"
                                    })]
                                })]
                            })]
                        })]
                    })
                }, "success") : jsxRuntimeExports.jsxs(motion.div, {
                    initial: {
                        opacity: 0,
                        y: 20
                    },
                    animate: {
                        opacity: 1,
                        y: 0
                    },
                    exit: {
                        opacity: 0,
                        y: -20
                    },
                    className: "space-y-8",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "text-center space-y-6 max-w-4xl mx-auto",
                        children: [jsxRuntimeExports.jsxs(motion.div, {
                            initial: {
                                opacity: 0,
                                scale: .9
                            },
                            animate: {
                                opacity: 1,
                                scale: 1
                            },
                            transition: {
                                delay: .1
                            },
                            children: [jsxRuntimeExports.jsx("h1", {
                                className: "text-4xl font-bold text-gray-900 mb-4",
                                children: "Transform Your Resume with AI"
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed",
                                children: "Upload your existing resume and watch our AI extract, optimize, and enhance your content for maximum impact with recruiters and ATS systems."
                            })]
                        }), jsxRuntimeExports.jsxs(motion.div, {
                            initial: {
                                opacity: 0,
                                y: 20
                            },
                            animate: {
                                opacity: 1,
                                y: 0
                            },
                            transition: {
                                delay: .2
                            },
                            className: "grid md:grid-cols-3 gap-6 mt-12",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex flex-col items-center text-center p-6 bg-white/60 rounded-xl border border-gray-200",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "w-12 h-12 bg-pink-100 rounded-full flex items-center justify-center mb-4",
                                    children: jsxRuntimeExports.jsx(Zap, {
                                        className: "w-6 h-6 text-pink-600"
                                    })
                                }), jsxRuntimeExports.jsx("h3", {
                                    className: "font-semibold text-gray-900 mb-2",
                                    children: "Lightning Fast"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-sm text-gray-600",
                                    children: "Extract all information from your PDF in seconds with 95%+ accuracy"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex flex-col items-center text-center p-6 bg-white/60 rounded-xl border border-gray-200",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mb-4",
                                    children: jsxRuntimeExports.jsx(Shield, {
                                        className: "w-6 h-6 text-green-600"
                                    })
                                }), jsxRuntimeExports.jsx("h3", {
                                    className: "font-semibold text-gray-900 mb-2",
                                    children: "100% Private"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-sm text-gray-600",
                                    children: "Your data never leaves your browser. Everything is processed locally"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex flex-col items-center text-center p-6 bg-white/60 rounded-xl border border-gray-200",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mb-4",
                                    children: jsxRuntimeExports.jsx(Target, {
                                        className: "w-6 h-6 text-purple-600"
                                    })
                                }), jsxRuntimeExports.jsx("h3", {
                                    className: "font-semibold text-gray-900 mb-2",
                                    children: "ATS Optimized"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-sm text-gray-600",
                                    children: "Automatically optimize content for Applicant Tracking Systems"
                                })]
                            })]
                        })]
                    }), jsxRuntimeExports.jsx(motion.div, {
                        initial: {
                            opacity: 0,
                            y: 20
                        },
                        animate: {
                            opacity: 1,
                            y: 0
                        },
                        transition: {
                            delay: .3
                        },
                        className: "max-w-3xl mx-auto",
                        children: jsxRuntimeExports.jsxs(Card, {
                            className: "border-0 shadow-2xl bg-white/90 backdrop-blur-sm",
                            children: [jsxRuntimeExports.jsxs(CardHeader, {
                                className: "text-center",
                                children: [jsxRuntimeExports.jsxs(CardTitle, {
                                    className: "text-2xl flex items-center justify-center gap-2",
                                    children: [jsxRuntimeExports.jsx(Upload, {
                                        className: "w-6 h-6 text-pink-600"
                                    }), "Upload Your Resume"]
                                }), jsxRuntimeExports.jsx(CardDescription, {
                                    className: "text-lg",
                                    children: "Drag and drop your PDF file or click to browse"
                                })]
                            }), jsxRuntimeExports.jsxs(CardContent, {
                                children: [jsxRuntimeExports.jsx(ResumeDropzone, {
                                    onResumeExtracted: _e
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "mt-6 p-4 bg-pink-50 rounded-lg border border-pink-200",
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-start gap-3",
                                        children: [jsxRuntimeExports.jsx(Lightbulb, {
                                            className: "w-5 h-5 text-pink-600 mt-0.5 flex-shrink-0"
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("h4", {
                                                className: "font-medium text-pink-900 mb-1",
                                                children: "Pro Tips for Best Results"
                                            }), jsxRuntimeExports.jsxs("ul", {
                                                className: "text-sm text-pink-800 space-y-1",
                                                children: [jsxRuntimeExports.jsx("li", {
                                                    children: "• Use a single-column resume format for optimal parsing"
                                                }), jsxRuntimeExports.jsx("li", {
                                                    children: "• Ensure text is selectable (not scanned images)"
                                                }), jsxRuntimeExports.jsx("li", {
                                                    children: "• Include standard section headers (Experience, Education, Skills)"
                                                }), jsxRuntimeExports.jsx("li", {
                                                    children: "• File size should be under 10MB"
                                                })]
                                            })]
                                        })]
                                    })
                                })]
                            })]
                        })
                    }), e && jsxRuntimeExports.jsxs(motion.div, {
                        initial: {
                            opacity: 0,
                            y: 20
                        },
                        animate: {
                            opacity: 1,
                            y: 0
                        },
                        transition: {
                            delay: .4
                        },
                        className: "max-w-2xl mx-auto",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "relative",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "absolute inset-0 flex items-center",
                                children: jsxRuntimeExports.jsx(Separator, {
                                    className: "w-full"
                                })
                            }), jsxRuntimeExports.jsx("div", {
                                className: "relative flex justify-center text-sm",
                                children: jsxRuntimeExports.jsx("span", {
                                    className: "bg-white px-6 text-gray-500 font-medium",
                                    children: "or"
                                })
                            })]
                        }), jsxRuntimeExports.jsxs(Card, {
                            className: "mt-6 border border-gray-200 hover:border-gray-300 transition-colors",
                            children: [jsxRuntimeExports.jsxs(CardHeader, {
                                className: "text-center",
                                children: [jsxRuntimeExports.jsxs(CardTitle, {
                                    className: "text-lg flex items-center justify-center gap-2",
                                    children: [jsxRuntimeExports.jsx(FileText, {
                                        className: "w-5 h-5 text-green-600"
                                    }), "Start from Scratch"]
                                }), jsxRuntimeExports.jsx(CardDescription, {
                                    children: "Don't have a resume yet? Create one from the beginning with our guided builder"
                                })]
                            }), jsxRuntimeExports.jsx(CardContent, {
                                children: jsxRuntimeExports.jsxs(Button, {
                                    onClick: tt,
                                    variant: "outline",
                                    className: "w-full h-12 text-base hover:bg-green-50 hover:border-green-300",
                                    children: [jsxRuntimeExports.jsx(FileText, {
                                        className: "w-4 h-4 mr-2"
                                    }), "Create New Resume", jsxRuntimeExports.jsx(ArrowRight, {
                                        className: "w-4 h-4 ml-2"
                                    })]
                                })
                            })]
                        })]
                    })]
                }, "upload")
            })
        })]
    })
}
  , ResumeImportPage = () => jsxRuntimeExports.jsx("div", {
    className: "min-h-screen bg-gradient-to-br from-pink-50 to-pink-100",
    children: jsxRuntimeExports.jsx(ResumeImport, {})
})
  , jobApplicationQueryKeys = {
    all: ["jobApplications"],
    lists: () => [...jobApplicationQueryKeys.all, "list"],
    list: s => [...jobApplicationQueryKeys.lists(), s],
    userApplications: s => [...jobApplicationQueryKeys.all, "user", s],
    adminApplications: () => [...jobApplicationQueryKeys.all, "admin"],
    adminList: s => [...jobApplicationQueryKeys.adminApplications(), s],
    stats: () => [...jobApplicationQueryKeys.all, "stats"],
    hasApplied: (s, e) => [...jobApplicationQueryKeys.all, "hasApplied", s, e]
};
function useUserApplications(s) {
    return useQuery({
        queryKey: jobApplicationQueryKeys.userApplications(s || ""),
        queryFn: () => JobApplicationService.getUserApplications(s),
        enabled: !!s,
        staleTime: 2 * 60 * 1e3
    })
}
function useCreateJobApplication() {
    const s = useQueryClient();
    return useMutation({
        mutationFn: async ({userId: e, userEmail: i, jobData: o, userProfile: a, userExperiences: c=[]}) => JobApplicationService.createApplication(e, i, o, a, c),
        onSuccess: (e, i) => {
            s.invalidateQueries({
                queryKey: jobApplicationQueryKeys.userApplications(i.userId)
            }),
            s.invalidateQueries({
                queryKey: jobApplicationQueryKeys.hasApplied(i.userId, i.jobData.job_id)
            }),
            s.invalidateQueries({
                queryKey: jobApplicationQueryKeys.adminApplications()
            }),
            s.invalidateQueries({
                queryKey: jobApplicationQueryKeys.stats()
            }),
            Jt.success("Application submitted successfully!")
        }
        ,
        onError: e => {
            console.error("Error creating application:", e),
            Jt.error(e.message || "Failed to submit application")
        }
    })
}
function useCreateRegularApplication() {
    const s = useQueryClient();
    return useMutation({
        mutationFn: async ({userId: e, userEmail: i, job: o, userProfile: a}) => JobApplicationService.createRegularApplication(e, i, o, a),
        onSuccess: (e, i) => {
            s.invalidateQueries({
                queryKey: jobApplicationQueryKeys.userApplications(i.userId)
            }),
            s.invalidateQueries({
                queryKey: jobApplicationQueryKeys.hasApplied(i.userId, i.job.id)
            }),
            s.invalidateQueries({
                queryKey: jobApplicationQueryKeys.adminApplications()
            }),
            s.invalidateQueries({
                queryKey: jobApplicationQueryKeys.stats()
            }),
            Jt.success("Application tracked successfully!")
        }
        ,
        onError: e => {
            console.error("Error tracking regular application:", e),
            Jt.error(e.message || "Failed to track application")
        }
    })
}
function useAdminApplications(s={}) {
    return useQuery({
        queryKey: jobApplicationQueryKeys.adminList(s),
        queryFn: () => JobApplicationService.getAllApplications(s),
        staleTime: 1 * 60 * 1e3
    })
}
function useUpdateApplicationStatus() {
    const s = useQueryClient();
    return useMutation({
        mutationFn: async ({applicationId: e, status: i, adminNotes: o, reviewedBy: a}) => JobApplicationService.updateApplicationStatus(e, i, o, a),
        onSuccess: () => {
            s.invalidateQueries({
                queryKey: jobApplicationQueryKeys.adminApplications()
            }),
            s.invalidateQueries({
                queryKey: jobApplicationQueryKeys.stats()
            }),
            Jt.success("Application status updated successfully!")
        }
        ,
        onError: e => {
            console.error("Error updating application status:", e),
            Jt.error(e.message || "Failed to update application status")
        }
    })
}
function useApplicationStats() {
    return useQuery({
        queryKey: jobApplicationQueryKeys.stats(),
        queryFn: () => JobApplicationService.getApplicationStats(),
        staleTime: 5 * 60 * 1e3
    })
}
const ApplicationConfirmationPopup = ({isOpen: s, onClose: e, job: i, onConfirmApplication: o, onDenyApplication: a, isSubmitting: c=!1}) => {
    const [d,h] = reactExports.useState(!1)
      , g = () => {
        h(!0),
        o()
    }
      , b = () => {
        h(!0),
        a()
    }
      , _ = () => {
        h(!1),
        e()
    }
    ;
    return i ? jsxRuntimeExports.jsx(Dialog, {
        open: s,
        onOpenChange: _,
        children: jsxRuntimeExports.jsxs(DialogContent, {
            className: "max-w-md mx-auto",
            children: [jsxRuntimeExports.jsxs(DialogHeader, {
                className: "text-center pb-4",
                children: [jsxRuntimeExports.jsx(motion.div, {
                    initial: {
                        scale: 0
                    },
                    animate: {
                        scale: 1
                    },
                    transition: {
                        duration: .3,
                        type: "spring"
                    },
                    className: "mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4",
                    children: jsxRuntimeExports.jsx(Briefcase, {
                        className: "w-8 h-8 text-blue-600"
                    })
                }), jsxRuntimeExports.jsx(DialogTitle, {
                    className: "text-xl font-semibold text-gray-900",
                    children: "Did you apply for this job?"
                }), jsxRuntimeExports.jsx(DialogDescription, {
                    className: "text-gray-600 mt-2",
                    children: "We noticed you opened the application link. Let us know if you submitted your application so we can track it for you."
                })]
            }), jsxRuntimeExports.jsx(motion.div, {
                initial: {
                    opacity: 0,
                    y: 20
                },
                animate: {
                    opacity: 1,
                    y: 0
                },
                transition: {
                    delay: .2
                },
                className: "bg-gray-50 rounded-lg p-4 mb-6",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex items-start gap-3",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "w-12 h-12 bg-white rounded-lg flex items-center justify-center shadow-sm",
                        children: jsxRuntimeExports.jsx(Building, {
                            className: "w-6 h-6 text-gray-600"
                        })
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex-1 min-w-0",
                        children: [jsxRuntimeExports.jsx("h3", {
                            className: "font-semibold text-gray-900 truncate",
                            children: i.title
                        }), jsxRuntimeExports.jsxs("p", {
                            className: "text-sm text-gray-600 flex items-center gap-1 mt-1",
                            children: [jsxRuntimeExports.jsx(Building, {
                                className: "w-3 h-3"
                            }), i.company]
                        }), i.location && jsxRuntimeExports.jsxs("p", {
                            className: "text-sm text-gray-500 flex items-center gap-1 mt-1",
                            children: [jsxRuntimeExports.jsx(MapPin, {
                                className: "w-3 h-3"
                            }), i.location]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2 mt-2",
                            children: [i.isRemote && jsxRuntimeExports.jsx(Badge, {
                                variant: "outline",
                                className: "text-xs",
                                children: "Remote"
                            }), i.experienceRequired && jsxRuntimeExports.jsx(Badge, {
                                variant: "outline",
                                className: "text-xs",
                                children: i.experienceRequired
                            })]
                        })]
                    })]
                })
            }), jsxRuntimeExports.jsx(AnimatePresence, {
                mode: "wait",
                children: d ? jsxRuntimeExports.jsx(motion.div, {
                    initial: {
                        opacity: 0,
                        scale: .9
                    },
                    animate: {
                        opacity: 1,
                        scale: 1
                    },
                    className: "text-center py-4",
                    children: c ? jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-center gap-2 text-blue-600",
                        children: [jsxRuntimeExports.jsx(motion.div, {
                            animate: {
                                rotate: 360
                            },
                            transition: {
                                duration: 1,
                                repeat: 1 / 0,
                                ease: "linear"
                            },
                            children: jsxRuntimeExports.jsx(Clock, {
                                className: "w-5 h-5"
                            })
                        }), jsxRuntimeExports.jsx("span", {
                            children: "Saving your application..."
                        })]
                    }) : jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-center gap-2 text-green-600",
                        children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                            className: "w-5 h-5"
                        }), jsxRuntimeExports.jsx("span", {
                            children: "Application tracked successfully!"
                        })]
                    })
                }, "confirmation") : jsxRuntimeExports.jsxs(motion.div, {
                    initial: {
                        opacity: 0
                    },
                    animate: {
                        opacity: 1
                    },
                    exit: {
                        opacity: 0
                    },
                    className: "flex gap-3",
                    children: [jsxRuntimeExports.jsxs(Button, {
                        variant: "outline",
                        onClick: b,
                        disabled: c,
                        className: "flex-1 gap-2",
                        children: [jsxRuntimeExports.jsx(CircleX, {
                            className: "w-4 h-4"
                        }), "No, I didn't apply"]
                    }), jsxRuntimeExports.jsxs(Button, {
                        onClick: g,
                        disabled: c,
                        className: "flex-1 bg-green-600 hover:bg-green-700 gap-2",
                        children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                            className: "w-4 h-4"
                        }), "Yes, I applied!"]
                    })]
                }, "buttons")
            }), jsxRuntimeExports.jsx("div", {
                className: "text-center mt-4",
                children: jsxRuntimeExports.jsx("p", {
                    className: "text-xs text-gray-500",
                    children: "This helps us track your applications and provide better job recommendations."
                })
            })]
        })
    }) : null
}
  , useApplicationConfirmation = ({onConfirmApplication: s}) => {
    const [e,i] = reactExports.useState(!1)
      , [o,a] = reactExports.useState(null)
      , [c,d] = reactExports.useState(!1)
      , h = reactExports.useRef(0)
      , g = reactExports.useRef(new Map)
      , b = "hirebuddy_pending_applications"
      , _ = 2e3
      , $ = 30 * 60 * 1e3;
    reactExports.useEffect( () => {
        try {
            const nt = localStorage.getItem(b);
            if (nt) {
                const lt = JSON.parse(nt)
                  , dt = Date.now();
                Object.entries(lt).forEach( ([ot,at]) => {
                    dt - at.timestamp < $ && g.current.set(ot, at)
                }
                ),
                _e()
            }
        } catch (nt) {
            console.error("Error loading pending applications:", nt)
        }
    }
    , []);
    const _e = reactExports.useCallback( () => {
        try {
            const nt = {};
            g.current.forEach( (lt, dt) => {
                nt[dt] = lt
            }
            ),
            localStorage.setItem(b, JSON.stringify(nt))
        } catch (nt) {
            console.error("Error saving pending applications:", nt)
        }
    }
    , [])
      , tt = reactExports.useCallback(nt => {
        const lt = Date.now()
          , dt = `${nt.id}_${lt}`;
        g.current.set(nt.id, {
            job: nt,
            timestamp: lt,
            tabId: dt
        }),
        _e(),
        sessionStorage.setItem("hirebuddy_last_external_job", nt.id),
        sessionStorage.setItem("hirebuddy_external_timestamp", lt.toString())
    }
    , [_e])
      , rt = reactExports.useCallback( () => {
        const nt = sessionStorage.getItem("hirebuddy_last_external_job")
          , lt = sessionStorage.getItem("hirebuddy_external_timestamp");
        if (!nt || !lt)
            return;
        const dt = parseInt(lt)
          , at = Date.now() - dt;
        if (at < $ && at > 5e3) {
            const ht = g.current.get(nt);
            ht && !e && (sessionStorage.removeItem("hirebuddy_last_external_job"),
            sessionStorage.removeItem("hirebuddy_external_timestamp"),
            setTimeout( () => {
                a(ht.job),
                i(!0)
            }
            , _))
        }
    }
    , [e]);
    reactExports.useEffect( () => {
        const nt = () => {
            if (document.visibilityState === "visible") {
                const lt = Date.now();
                lt - h.current > 5e3 && rt(),
                h.current = lt
            } else
                h.current = Date.now()
        }
        ;
        return document.addEventListener("visibilitychange", nt),
        setTimeout(rt, 1e3),
        () => {
            document.removeEventListener("visibilitychange", nt)
        }
    }
    , [rt]),
    reactExports.useEffect( () => {
        const nt = () => {
            Date.now() - h.current > 5e3 && rt()
        }
        ;
        return window.addEventListener("focus", nt),
        () => window.removeEventListener("focus", nt)
    }
    , [rt]);
    const et = reactExports.useCallback(async () => {
        if (o) {
            d(!0);
            try {
                await s(o),
                g.current.delete(o.id),
                _e(),
                setTimeout( () => {
                    i(!1),
                    a(null),
                    d(!1)
                }
                , 1500)
            } catch (nt) {
                console.error("Error confirming application:", nt),
                d(!1)
            }
        }
    }
    , [o, s, _e])
      , it = reactExports.useCallback( () => {
        o && (g.current.delete(o.id),
        _e(),
        i(!1),
        a(null),
        d(!1))
    }
    , [o, _e])
      , st = reactExports.useCallback( () => {
        i(!1),
        a(null),
        d(!1)
    }
    , []);
    return reactExports.useEffect( () => {
        const lt = setInterval( () => {
            const dt = Date.now();
            let ot = !1;
            g.current.forEach( (at, ht) => {
                dt - at.timestamp > $ && (g.current.delete(ht),
                ot = !0)
            }
            ),
            ot && _e()
        }
        , 3e5);
        return () => clearInterval(lt)
    }
    , [_e]),
    {
        isPopupOpen: e,
        pendingJob: o,
        isSubmitting: c,
        trackExternalApplication: tt,
        confirmApplication: et,
        denyApplication: it,
        closePopup: st
    }
}
  , ProfileCompletionWarning = ({completionPercentage: s, missingFields: e, requiredPercentage: i=85, showAsDialog: o=!1, onClose: a}) => {
    const c = jsxRuntimeExports.jsxs(Alert, {
        className: "border-orange-200 bg-orange-50",
        children: [jsxRuntimeExports.jsx(TriangleAlert, {
            className: "h-4 w-4 text-orange-600"
        }), jsxRuntimeExports.jsxs(AlertTitle, {
            className: "text-orange-800",
            children: ["Profile Completion Required (", s, "% complete)"]
        }), jsxRuntimeExports.jsxs(AlertDescription, {
            className: "space-y-3",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "text-orange-700",
                children: [jsxRuntimeExports.jsxs("p", {
                    className: "mb-2",
                    children: ["To send emails and auto-apply to jobs, your profile must be at least ", i, "% complete. This helps ensure professional communication and better response rates."]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "mb-3",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-between text-sm mb-1",
                        children: [jsxRuntimeExports.jsx("span", {
                            children: "Profile Completion"
                        }), jsxRuntimeExports.jsxs("span", {
                            className: "font-medium",
                            children: [s, "%"]
                        })]
                    }), jsxRuntimeExports.jsx(Progress, {
                        value: s,
                        className: "h-2"
                    })]
                }), e.length > 0 && jsxRuntimeExports.jsxs("div", {
                    children: [jsxRuntimeExports.jsx("p", {
                        className: "font-medium mb-2",
                        children: "Missing information:"
                    }), jsxRuntimeExports.jsx("ul", {
                        className: "list-disc list-inside space-y-1 text-sm",
                        children: e.map( (d, h) => jsxRuntimeExports.jsx("li", {
                            className: "text-orange-600",
                            children: d
                        }, h))
                    })]
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex items-center gap-2 pt-2",
                children: [jsxRuntimeExports.jsx(Button, {
                    asChild: !0,
                    size: "sm",
                    className: "bg-blue-600 hover:bg-blue-700 text-white shadow-md",
                    children: jsxRuntimeExports.jsxs(Link, {
                        to: "/profile",
                        children: [jsxRuntimeExports.jsx(User, {
                            className: "h-4 w-4 mr-2"
                        }), "Complete Profile", jsxRuntimeExports.jsx(ArrowRight, {
                            className: "h-4 w-4 ml-2"
                        })]
                    })
                }), a && jsxRuntimeExports.jsx(Button, {
                    variant: "outline",
                    size: "sm",
                    onClick: a,
                    children: "Cancel"
                })]
            })]
        })]
    });
    return o ? jsxRuntimeExports.jsx("div", {
        className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4",
        children: jsxRuntimeExports.jsx("div", {
            className: "bg-white rounded-lg max-w-md w-full p-6",
            children: c
        })
    }) : c
}
  , ProfileCompletionPopup = ({isOpen: s, onClose: e, completionPercentage: i, missingFields: o, isNewUser: a=!1}) => jsxRuntimeExports.jsx(Dialog, {
    open: s,
    onOpenChange: e,
    children: jsxRuntimeExports.jsxs(DialogContent, {
        className: "max-w-sm mx-auto",
        children: [jsxRuntimeExports.jsx(DialogHeader, {
            className: "text-center pb-3",
            children: jsxRuntimeExports.jsx(DialogTitle, {
                className: "text-lg font-semibold text-gray-900",
                children: a ? "Welcome to Hirebuddy!" : "Complete Your Profile"
            })
        }), jsxRuntimeExports.jsxs("div", {
            className: "space-y-4",
            children: [jsxRuntimeExports.jsx("div", {
                className: "text-center",
                children: jsxRuntimeExports.jsx("p", {
                    className: "text-gray-600 text-sm",
                    children: a ? "Complete your profile to unlock premium features and start applying to jobs!" : "Your profile needs to be at least 85% complete to access premium features."
                })
            }), jsxRuntimeExports.jsxs("div", {
                className: "bg-gray-50 rounded-lg p-3",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between mb-2",
                    children: [jsxRuntimeExports.jsx("span", {
                        className: "text-sm font-medium text-gray-700",
                        children: "Profile Completion"
                    }), jsxRuntimeExports.jsxs("span", {
                        className: "text-lg font-bold text-blue-600",
                        children: [i, "%"]
                    })]
                }), jsxRuntimeExports.jsx(Progress, {
                    value: i,
                    className: "h-2 mb-2"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-xs text-gray-500",
                    children: i < 85 ? `${85 - i}% more needed to unlock all features` : "All features unlocked!"
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex gap-3",
                children: [jsxRuntimeExports.jsx(Button, {
                    asChild: !0,
                    className: "flex-1",
                    children: jsxRuntimeExports.jsxs(Link, {
                        to: "/profile",
                        className: "flex items-center justify-center gap-2",
                        children: [jsxRuntimeExports.jsx(User, {
                            className: "h-4 w-4"
                        }), "Complete Profile"]
                    })
                }), jsxRuntimeExports.jsx(Button, {
                    variant: "outline",
                    onClick: e,
                    className: "flex-1",
                    children: "Later"
                })]
            }), a && jsxRuntimeExports.jsx("div", {
                className: "text-center",
                children: jsxRuntimeExports.jsx("p", {
                    className: "text-xs text-gray-500",
                    children: "💡 Tip: Upload your resume to quickly reach 85%"
                })
            })]
        })]
    })
})
  , MobileSearchBar = ({value: s, onChange: e, placeholder: i="Search...", onFilter: o, filterCount: a=0, className: c}) => jsxRuntimeExports.jsxs("div", {
    className: cn("flex items-center gap-2 p-3 bg-white border-b border-gray-200", c),
    children: [jsxRuntimeExports.jsxs("div", {
        className: "flex-1 relative",
        children: [jsxRuntimeExports.jsx(Search, {
            className: "absolute left-2.5 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
        }), jsxRuntimeExports.jsx(Input, {
            value: s,
            onChange: d => e(d.target.value),
            placeholder: i,
            className: cn("pl-8 pr-8 h-9 mobile-body rounded-lg border-2 border-gray-200", "focus:border-primary focus:ring-2 focus:ring-primary/20", "mobile-touch-target")
        }), s && jsxRuntimeExports.jsx("button", {
            onClick: () => e(""),
            className: "absolute right-2.5 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 p-0.5 rounded-full hover:bg-gray-100 transition-colors",
            children: jsxRuntimeExports.jsx(X, {
                className: "w-3 h-3"
            })
        })]
    }), o && jsxRuntimeExports.jsxs("div", {
        className: "relative",
        children: [jsxRuntimeExports.jsx(MobileButton, {
            variant: "outline",
            size: "sm",
            onClick: o,
            icon: SlidersHorizontal,
            className: "h-9 w-9 p-0",
            children: jsxRuntimeExports.jsx("span", {
                className: "sr-only",
                children: "Filter"
            })
        }), a > 0 && jsxRuntimeExports.jsx("div", {
            className: "absolute -top-1 -right-1 w-4 h-4 bg-primary text-primary-foreground rounded-full flex items-center justify-center mobile-body-xs font-bold",
            children: a
        })]
    })]
})
  , MobileJobCard = ({job: s, onClick: e, onApply: i, applied: o=!1, className: a}) => {
    const c = h => {
        const g = new Date(h)
          , _ = Math.floor((new Date().getTime() - g.getTime()) / (1e3 * 60 * 60));
        return _ < 24 ? `${_}h ago` : `${Math.floor(_ / 24)}d ago`
    }
      , d = h => h ? h.replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") : null;
    return jsxRuntimeExports.jsx(MobileCard, {
        className: cn("mb-2", a),
        variant: "compact",
        onClick: e,
        children: jsxRuntimeExports.jsxs("div", {
            className: "space-y-2",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "flex items-start justify-between",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex-1 min-w-0",
                    children: [jsxRuntimeExports.jsx("h3", {
                        className: "font-semibold mobile-body text-gray-900 line-clamp-2 leading-tight",
                        children: s.job_title
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-1.5 mt-0.5",
                        children: [jsxRuntimeExports.jsx(Building, {
                            className: "w-3 h-3 text-gray-500 flex-shrink-0"
                        }), jsxRuntimeExports.jsx("p", {
                            className: "mobile-body-xs text-gray-600 truncate",
                            children: s.company_name
                        })]
                    })]
                }), jsxRuntimeExports.jsx(ChevronRight, {
                    className: "w-4 h-4 text-gray-400 ml-1.5 flex-shrink-0"
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex items-center gap-3 mobile-body-xs text-gray-600",
                children: [s.location && jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-1",
                    children: [jsxRuntimeExports.jsx(MapPin, {
                        className: "w-3 h-3"
                    }), jsxRuntimeExports.jsx("span", {
                        className: "truncate",
                        children: s.location
                    })]
                }), s.is_remote && jsxRuntimeExports.jsx(Badge, {
                    variant: "secondary",
                    className: "mobile-body-xs",
                    children: "Remote"
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-1 ml-auto",
                    children: [jsxRuntimeExports.jsx(Clock, {
                        className: "w-3 h-3"
                    }), jsxRuntimeExports.jsx("span", {
                        children: c(s.created_at)
                    })]
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex items-center gap-1.5 flex-wrap",
                children: [s.salary_range && jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-1 mobile-body-xs text-green-600 font-medium",
                    children: [jsxRuntimeExports.jsx(DollarSign, {
                        className: "w-3 h-3"
                    }), jsxRuntimeExports.jsx("span", {
                        children: d(s.salary_range)
                    })]
                }), s.job_type && jsxRuntimeExports.jsx(Badge, {
                    variant: "outline",
                    className: "mobile-body-xs",
                    children: s.job_type
                }), s.experience_level && jsxRuntimeExports.jsx(Badge, {
                    variant: "outline",
                    className: "mobile-body-xs",
                    children: s.experience_level
                })]
            }), s.skills && s.skills.length > 0 && jsxRuntimeExports.jsxs("div", {
                className: "flex flex-wrap gap-1",
                children: [s.skills.slice(0, 3).map( (h, g) => jsxRuntimeExports.jsx(Badge, {
                    variant: "secondary",
                    className: "mobile-body-xs",
                    children: h
                }, g)), s.skills.length > 3 && jsxRuntimeExports.jsxs(Badge, {
                    variant: "secondary",
                    className: "mobile-body-xs",
                    children: ["+", s.skills.length - 3, " more"]
                })]
            }), i && jsxRuntimeExports.jsx("div", {
                className: "pt-1.5",
                children: jsxRuntimeExports.jsx(MobileButton, {
                    variant: o ? "secondary" : "primary",
                    size: "full",
                    onClick: () => i(),
                    disabled: o,
                    className: `${o ? "" : "mobile-button-primary"}`,
                    children: o ? "Applied" : "Apply Now"
                })
            })]
        })
    })
}
  , Jobs = () => {
    var Rs, as, Ps;
    const {user: s} = useAuth()
      , {isPremium: e, loading: i} = usePremiumUser()
      , [o,a] = reactExports.useState("")
      , [c,d] = reactExports.useState({
        location: "",
        experience: "any",
        remote: "all",
        company: ""
    })
      , [h,g] = reactExports.useState(null)
      , [b,_] = reactExports.useState(!1)
      , [$,_e] = reactExports.useState("created_at")
      , [tt,rt] = reactExports.useState("desc")
      , [et,it] = reactExports.useState(new Set);
    reactExports.useState("list");
    const [st,nt] = reactExports.useState("all")
      , [lt,dt] = reactExports.useState(!1)
      , [ot,at] = reactExports.useState(null)
      , [ht,pt] = reactExports.useState([])
      , [gt,wt] = reactExports.useState(!1);
    reactExports.useState(!1);
    const {data: yt, isLoading: Rt} = useUserApplications(s == null ? void 0 : s.id);
    reactExports.useEffect( () => {
        yt && it(new Set(yt.map(gs => gs.job_id)))
    }
    , [yt]);
    const Mt = reactExports.useMemo( () => {
        const gs = Object.values(c).some(es => es !== "" && es !== "all" && es !== "any");
        return {
            query: o || void 0,
            filters: gs ? c : void 0,
            sortBy: $,
            sortOrder: tt,
            limit: 20
        }
    }
    , [o, c, $, tt])
      , ss = reactExports.useMemo( () => s && ot && JobRankingService.hasEnoughProfileData(ot), [s, ot])
      , {data: zt, isLoading: At, error: kt, fetchNextPage: vt, hasNextPage: bt, isFetchingNextPage: Tt} = ss ? useInfiniteRankedJobs(ot, Mt) : useInfiniteJobs(Mt)
      , {data: Yt, isLoading: Nt, error: jt, fetchNextPage: xt, hasNextPage: Et, isFetchingNextPage: Pt} = useInfiniteRemoteJobs(Mt)
      , {data: St, isLoading: Bt, error: os, fetchNextPage: ds, hasNextPage: js, isFetchingNextPage: ys} = useInfiniteExclusiveJobs(Mt)
      , {data: vs, isLoading: Ss} = useJobStats()
      , _s = useCreateJobApplication()
      , ns = useCreateRegularApplication()
      , xs = useApplicationConfirmation({
        onConfirmApplication: async gs => {
            if (!s) {
                Jt.error("Please sign in to track applications");
                return
            }
            await ns.mutateAsync({
                userId: s.id,
                userEmail: s.email || "",
                job: {
                    id: gs.id,
                    title: gs.title,
                    company: gs.company,
                    location: gs.location,
                    applyLink: gs.applyLink
                },
                userProfile: ot || void 0
            });
            const es = new Set(et);
            es.add(gs.id),
            it(es)
        }
    })
      , Lt = reactExports.useMemo( () => (zt == null ? void 0 : zt.pages.flatMap(gs => gs.jobs)) || [], [zt])
      , ts = reactExports.useMemo( () => (Yt == null ? void 0 : Yt.pages.flatMap(gs => gs.jobs)) || [], [Yt])
      , ms = reactExports.useMemo( () => (St == null ? void 0 : St.pages.flatMap(gs => gs.jobs)) || [], [St]);
    reactExports.useMemo( () => ss && (zt != null && zt.pages) ? zt.pages.flatMap(gs => gs.rankedJobs || []) : [], [zt, ss]);
    const hs = ((Rs = zt == null ? void 0 : zt.pages[0]) == null ? void 0 : Rs.total) || 0
      , bs = ((as = Yt == null ? void 0 : Yt.pages[0]) == null ? void 0 : as.total) || 0
      , ks = ((Ps = St == null ? void 0 : St.pages[0]) == null ? void 0 : Ps.total) || 0;
    reactExports.useEffect( () => {
        (async () => {
            if (s != null && s.id) {
                wt(!0);
                try {
                    const [es,ws] = await Promise.all([ProfileService.getProfile(s.id), ProfileService.getUserExperiences(s.id)]);
                    at(es),
                    pt(ws || [])
                } catch (es) {
                    console.error("Error loading user profile:", es)
                } finally {
                    wt(!1)
                }
            }
        }
        )()
    }
    , [s == null ? void 0 : s.id]);
    const Ts = reactExports.useMemo( () => {
        if (st === "applied") {
            const gs = Lt.filter(Is => et.has(Is.id))
              , es = ts.filter(Is => et.has(Is.id) && !Lt.some(Fs => Fs.id === Is.id))
              , ws = ms.filter(Is => et.has(Is.id) && !Lt.some(Fs => Fs.id === Is.id) && !ts.some(Fs => Fs.id === Is.id));
            return [...gs, ...es, ...ws]
        } else
            return st === "exclusive" ? ms.filter(gs => !et.has(gs.id)) : st === "remote" ? ts.filter(gs => !et.has(gs.id)) : Lt.filter(gs => !et.has(gs.id))
    }
    , [Lt, ts, ms, st, et])
      , {getJobLogo: ls, isLogoLoading: Ds} = useProgressiveLogos(Ts)
      , Ms = gs => {
        g(gs),
        dt(!0)
    }
      , Hs = async (gs, es) => {
        if (es && es.stopPropagation(),
        !checkJobApplicationPermission(ot, ht).canApply) {
            Jt.error("Complete your profile to 85% before applying to jobs");
            return
        }
        if (st === "exclusive" || ms.some(Fs => Fs.id === gs.id)) {
            if (!s) {
                Jt.error("Please sign in to apply for exclusive jobs");
                return
            }
            if (!ot) {
                Jt.error("Please complete your profile before applying");
                return
            }
            if (!ot.resume_url) {
                Jt.error("Please upload your resume before applying to exclusive jobs");
                return
            }
            try {
                await _s.mutateAsync({
                    userId: s.id,
                    userEmail: s.email || "",
                    jobData: {
                        job_id: gs.id,
                        job_title: gs.title,
                        company_name: gs.company,
                        job_type: "exclusive"
                    },
                    userProfile: ot,
                    userExperiences: ht
                });
                const Fs = new Set(et);
                Fs.add(gs.id),
                it(Fs)
            } catch (Fs) {
                console.error("Application error:", Fs)
            }
        } else
            gs.applyLink ? (xs.trackExternalApplication(gs),
            window.open(gs.applyLink, "_blank"),
            Jt.success("Application opened in new tab")) : Jt.info("No application link available for this job")
    }
      , Vs = () => {
        st === "all" ? vt() : st === "remote" ? xt() : st === "exclusive" && ds()
    }
      , Xs = st === "all" ? At : st === "remote" ? Nt : st === "exclusive" ? Bt : !1
      , $s = st === "all" ? Tt : st === "remote" ? Pt : st === "exclusive" ? ys : !1
      , zs = st === "all" ? bt : st === "remote" ? Et : st === "exclusive" ? js : !1
      , Zs = st === "all" ? kt : st === "remote" ? jt : st === "exclusive" ? os : null
      , sr = () => {
        d({
            location: "",
            experience: "any",
            remote: "all",
            company: ""
        }),
        a(""),
        Jt.info("All filters cleared")
    }
      , As = Object.values(c).filter(gs => gs !== "" && gs !== "all" && gs !== "any").length + (o ? 1 : 0)
      , Es = gs => {
        switch (gs) {
        case "applied":
            return et.size;
        case "remote":
            return bs;
        case "exclusive":
            return ks;
        default:
            return hs
        }
    }
    ;
    return jsxRuntimeExports.jsxs(TooltipProvider, {
        children: [jsxRuntimeExports.jsxs("div", {
            className: "min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50/30 md:flex mobile-page",
            children: [jsxRuntimeExports.jsx(NewSidebar, {}), jsxRuntimeExports.jsxs("div", {
                className: "flex-1 flex flex-col max-h-screen overflow-hidden w-full",
                children: [jsxRuntimeExports.jsx("header", {
                    className: "hidden md:flex h-16 shrink-0 items-center gap-2 bg-white/80 backdrop-blur-sm border-b border-gray-200/60",
                    children: jsxRuntimeExports.jsx("div", {
                        className: "flex items-center gap-2 px-6",
                        children: jsxRuntimeExports.jsx(Breadcrumb, {
                            children: jsxRuntimeExports.jsx(BreadcrumbList, {
                                children: jsxRuntimeExports.jsx(BreadcrumbItem, {
                                    children: jsxRuntimeExports.jsxs(BreadcrumbPage, {
                                        className: "font-semibold flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(Briefcase, {
                                            className: "w-4 h-4"
                                        }), "Job Search"]
                                    })
                                })
                            })
                        })
                    })
                }), Zs && jsxRuntimeExports.jsx(motion.div, {
                    initial: {
                        opacity: 0,
                        y: -20
                    },
                    animate: {
                        opacity: 1,
                        y: 0
                    },
                    className: "bg-red-50 border-b border-red-200 px-6 py-3",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-3",
                        children: [jsxRuntimeExports.jsx(CircleAlert, {
                            className: "w-5 h-5 text-red-600"
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex-1",
                            children: [jsxRuntimeExports.jsx("p", {
                                className: "text-sm font-medium text-red-800",
                                children: "Failed to Load Jobs"
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-xs text-red-700",
                                children: "There was an error loading jobs from the database. Please try again."
                            })]
                        }), jsxRuntimeExports.jsxs(Button, {
                            variant: "outline",
                            size: "sm",
                            onClick: () => {
                                st === "all" ? vt() : st === "remote" ? xt() : st === "exclusive" && ds()
                            }
                            ,
                            className: "text-red-700 border-red-300 hover:bg-red-100",
                            children: [jsxRuntimeExports.jsx(RefreshCw, {
                                className: "w-4 h-4 mr-2"
                            }), "Retry"]
                        })]
                    })
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex-1 flex overflow-hidden",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex-1 flex flex-col overflow-hidden",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "bg-white border-b border-gray-200 p-4 md:p-6 space-y-4",
                            children: [jsxRuntimeExports.jsxs(motion.div, {
                                initial: {
                                    opacity: 0,
                                    y: 20
                                },
                                animate: {
                                    opacity: 1,
                                    y: 0
                                },
                                transition: {
                                    duration: .5
                                },
                                className: "grid grid-cols-2 md:grid-cols-4 gap-3",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "mobile-card-compact bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-2 border border-blue-200",
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-1.5",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-6 h-6 md:w-10 md:h-10 bg-blue-500 rounded-full flex items-center justify-center mobile-touch-target-sm",
                                            children: jsxRuntimeExports.jsx(Briefcase, {
                                                className: "w-3 h-3 md:w-5 md:h-5 text-white"
                                            })
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("p", {
                                                className: "mobile-body-xs text-blue-600 font-medium",
                                                children: "Total Jobs"
                                            }), jsxRuntimeExports.jsx("p", {
                                                className: "mobile-heading-sm md:text-lg font-bold text-blue-900",
                                                children: Ss ? jsxRuntimeExports.jsx(Skeleton, {
                                                    className: "h-4 w-8"
                                                }) : (vs == null ? void 0 : vs.total) || 0
                                            })]
                                        })]
                                    })
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "mobile-card-compact bg-gradient-to-r from-green-50 to-green-100 rounded-lg p-2 border border-green-200",
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-1.5",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-6 h-6 md:w-10 md:h-10 bg-green-500 rounded-full flex items-center justify-center mobile-touch-target-sm",
                                            children: jsxRuntimeExports.jsx(Globe, {
                                                className: "w-3 h-3 md:w-5 md:h-5 text-white"
                                            })
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("p", {
                                                className: "mobile-body-xs text-green-600 font-medium",
                                                children: "Remote"
                                            }), jsxRuntimeExports.jsx("p", {
                                                className: "mobile-heading-sm md:text-lg font-bold text-green-900",
                                                children: Ss ? jsxRuntimeExports.jsx(Skeleton, {
                                                    className: "h-4 w-8"
                                                }) : (vs == null ? void 0 : vs.remote) || 0
                                            })]
                                        })]
                                    })
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "mobile-card-compact bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg p-2 border border-purple-200",
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-1.5",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-6 h-6 md:w-10 md:h-10 bg-purple-500 rounded-full flex items-center justify-center mobile-touch-target-sm",
                                            children: jsxRuntimeExports.jsx(Building, {
                                                className: "w-3 h-3 md:w-5 md:h-5 text-white"
                                            })
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("p", {
                                                className: "mobile-body-xs text-purple-600 font-medium",
                                                children: "Companies"
                                            }), jsxRuntimeExports.jsx("p", {
                                                className: "mobile-heading-sm md:text-lg font-bold text-purple-900",
                                                children: Ss ? jsxRuntimeExports.jsx(Skeleton, {
                                                    className: "h-4 w-8"
                                                }) : (vs == null ? void 0 : vs.companies) || 0
                                            })]
                                        })]
                                    })
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "mobile-card-compact bg-gradient-to-r from-orange-50 to-orange-100 rounded-lg p-2 border border-orange-200",
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-1.5",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-6 h-6 md:w-10 md:h-10 bg-orange-500 rounded-full flex items-center justify-center mobile-touch-target-sm",
                                            children: jsxRuntimeExports.jsx(TrendingUp, {
                                                className: "w-3 h-3 md:w-5 md:h-5 text-white"
                                            })
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("p", {
                                                className: "mobile-body-xs text-orange-600 font-medium",
                                                children: "This Week"
                                            }), jsxRuntimeExports.jsx("p", {
                                                className: "mobile-heading-sm md:text-lg font-bold text-orange-900",
                                                children: Ss ? jsxRuntimeExports.jsx(Skeleton, {
                                                    className: "h-4 w-8"
                                                }) : (vs == null ? void 0 : vs.thisWeek) || 0
                                            })]
                                        })]
                                    })
                                })]
                            }), jsxRuntimeExports.jsx("div", {
                                className: "md:hidden",
                                children: jsxRuntimeExports.jsx(MobileSearchBar, {
                                    value: o,
                                    onChange: a,
                                    placeholder: "Search jobs, companies, skills...",
                                    onFilter: () => _(!b),
                                    filterCount: As,
                                    className: "border-0 p-0 bg-transparent"
                                })
                            }), jsxRuntimeExports.jsxs(motion.div, {
                                initial: {
                                    opacity: 0,
                                    y: 20
                                },
                                animate: {
                                    opacity: 1,
                                    y: 0
                                },
                                transition: {
                                    duration: .5,
                                    delay: .1
                                },
                                className: "hidden md:flex items-center gap-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "relative flex-1",
                                    children: [jsxRuntimeExports.jsx(Search, {
                                        className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5"
                                    }), jsxRuntimeExports.jsx(Input, {
                                        placeholder: "Search jobs, companies, skills, or locations...",
                                        value: o,
                                        onChange: gs => a(gs.target.value),
                                        className: "pl-10 pr-4 h-11 text-base border-2 border-gray-200 focus:border-blue-500 transition-colors"
                                    }), o && jsxRuntimeExports.jsx(Button, {
                                        variant: "ghost",
                                        size: "sm",
                                        onClick: () => a(""),
                                        className: "absolute right-2 top-1/2 transform -translate-y-1/2",
                                        children: jsxRuntimeExports.jsx(X, {
                                            className: "w-4 h-4"
                                        })
                                    })]
                                }), jsxRuntimeExports.jsxs(Button, {
                                    variant: "outline",
                                    onClick: () => _(!b),
                                    className: "h-11 px-5 border-2 border-gray-200 hover:border-blue-500 transition-colors relative",
                                    children: [jsxRuntimeExports.jsx(SlidersHorizontal, {
                                        className: "w-4 h-4 mr-2"
                                    }), "Filters", As > 0 && jsxRuntimeExports.jsx(Badge, {
                                        variant: "destructive",
                                        className: "absolute -top-2 -right-2 w-5 h-5 p-0 flex items-center justify-center text-xs",
                                        children: As
                                    })]
                                }), jsxRuntimeExports.jsxs(Select, {
                                    value: $,
                                    onValueChange: gs => _e(gs),
                                    children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                        className: "w-44 h-11 border-2 border-gray-200",
                                        children: jsxRuntimeExports.jsx(SelectValue, {
                                            placeholder: "Sort by"
                                        })
                                    }), jsxRuntimeExports.jsxs(SelectContent, {
                                        children: [jsxRuntimeExports.jsx(SelectItem, {
                                            value: "created_at",
                                            children: "Date Posted"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "job_title",
                                            children: "Job Title"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "company_name",
                                            children: "Company"
                                        })]
                                    })]
                                })]
                            }), jsxRuntimeExports.jsx(AnimatePresence, {
                                children: b && jsxRuntimeExports.jsxs(motion.div, {
                                    initial: {
                                        opacity: 0,
                                        height: 0
                                    },
                                    animate: {
                                        opacity: 1,
                                        height: "auto"
                                    },
                                    exit: {
                                        opacity: 0,
                                        height: 0
                                    },
                                    transition: {
                                        duration: .3
                                    },
                                    className: "bg-gray-50 rounded-lg p-4 border border-gray-200",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "grid grid-cols-1 md:grid-cols-4 gap-4",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("label", {
                                                className: "text-sm font-medium text-gray-700 mb-2 block",
                                                children: "Location"
                                            }), jsxRuntimeExports.jsx(Input, {
                                                placeholder: "City, State, or Remote",
                                                value: c.location,
                                                onChange: gs => d({
                                                    ...c,
                                                    location: gs.target.value
                                                }),
                                                className: "border-gray-300"
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("label", {
                                                className: "text-sm font-medium text-gray-700 mb-2 block",
                                                children: "Experience Level"
                                            }), jsxRuntimeExports.jsxs(Select, {
                                                value: c.experience,
                                                onValueChange: gs => d({
                                                    ...c,
                                                    experience: gs
                                                }),
                                                children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                                    className: "border-gray-300",
                                                    children: jsxRuntimeExports.jsx(SelectValue, {
                                                        placeholder: "Any Experience"
                                                    })
                                                }), jsxRuntimeExports.jsxs(SelectContent, {
                                                    children: [jsxRuntimeExports.jsx(SelectItem, {
                                                        value: "any",
                                                        children: "Any Experience"
                                                    }), jsxRuntimeExports.jsx(SelectItem, {
                                                        value: "entry",
                                                        children: "Entry Level"
                                                    }), jsxRuntimeExports.jsx(SelectItem, {
                                                        value: "mid",
                                                        children: "Mid Level"
                                                    }), jsxRuntimeExports.jsx(SelectItem, {
                                                        value: "senior",
                                                        children: "Senior Level"
                                                    }), jsxRuntimeExports.jsx(SelectItem, {
                                                        value: "lead",
                                                        children: "Lead/Principal"
                                                    }), jsxRuntimeExports.jsx(SelectItem, {
                                                        value: "intern",
                                                        children: "Internship"
                                                    })]
                                                })]
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("label", {
                                                className: "text-sm font-medium text-gray-700 mb-2 block",
                                                children: "Work Type"
                                            }), jsxRuntimeExports.jsxs(Select, {
                                                value: c.remote,
                                                onValueChange: gs => d({
                                                    ...c,
                                                    remote: gs
                                                }),
                                                children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                                    className: "border-gray-300",
                                                    children: jsxRuntimeExports.jsx(SelectValue, {
                                                        placeholder: "All Types"
                                                    })
                                                }), jsxRuntimeExports.jsxs(SelectContent, {
                                                    children: [jsxRuntimeExports.jsx(SelectItem, {
                                                        value: "all",
                                                        children: "All Types"
                                                    }), jsxRuntimeExports.jsx(SelectItem, {
                                                        value: "remote",
                                                        children: "Remote Only"
                                                    }), jsxRuntimeExports.jsx(SelectItem, {
                                                        value: "onsite",
                                                        children: "On-site Only"
                                                    })]
                                                })]
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("label", {
                                                className: "text-sm font-medium text-gray-700 mb-2 block",
                                                children: "Company"
                                            }), jsxRuntimeExports.jsx(Input, {
                                                placeholder: "Company name",
                                                value: c.company,
                                                onChange: gs => d({
                                                    ...c,
                                                    company: gs.target.value
                                                }),
                                                className: "border-gray-300"
                                            })]
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex justify-end gap-2 mt-4",
                                        children: [jsxRuntimeExports.jsx(Button, {
                                            variant: "outline",
                                            onClick: sr,
                                            children: "Clear All"
                                        }), jsxRuntimeExports.jsx(Button, {
                                            onClick: () => _(!1),
                                            children: "Apply Filters"
                                        })]
                                    })]
                                })
                            })]
                        }), jsxRuntimeExports.jsx("div", {
                            className: "bg-white border-b border-gray-200 px-3 md:px-6",
                            children: jsxRuntimeExports.jsx(Tabs, {
                                value: st,
                                onValueChange: nt,
                                className: "w-full",
                                children: jsxRuntimeExports.jsxs(TabsList, {
                                    className: "grid w-full grid-cols-4 bg-gray-100 h-7 md:h-10 p-0.5 md:p-1",
                                    children: [jsxRuntimeExports.jsxs(TabsTrigger, {
                                        value: "all",
                                        className: "flex items-center gap-1 md:gap-2 px-1 md:px-3 mobile-body-xs md:text-sm",
                                        children: [jsxRuntimeExports.jsx(Briefcase, {
                                            className: "w-2.5 h-2.5 md:w-4 md:h-4"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "hidden sm:inline",
                                            children: "All Jobs"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "sm:hidden",
                                            children: "All"
                                        }), jsxRuntimeExports.jsx(Badge, {
                                            variant: "secondary",
                                            className: "ml-0.5 md:ml-1 mobile-body-xs px-1",
                                            children: Es("all")
                                        })]
                                    }), jsxRuntimeExports.jsxs(TabsTrigger, {
                                        value: "applied",
                                        className: "flex items-center gap-1 md:gap-2 px-1 md:px-3 mobile-body-xs md:text-sm",
                                        children: [jsxRuntimeExports.jsx(Send, {
                                            className: "w-2.5 h-2.5 md:w-4 md:h-4"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "hidden sm:inline",
                                            children: "Applied"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "sm:hidden",
                                            children: "App"
                                        }), jsxRuntimeExports.jsx(Badge, {
                                            variant: "secondary",
                                            className: "ml-0.5 md:ml-1 mobile-body-xs px-1",
                                            children: Es("applied")
                                        })]
                                    }), jsxRuntimeExports.jsxs(TabsTrigger, {
                                        value: "remote",
                                        className: "flex items-center gap-1 md:gap-2 px-1 md:px-3 mobile-body-xs md:text-sm",
                                        children: [jsxRuntimeExports.jsx(Globe, {
                                            className: "w-2.5 h-2.5 md:w-4 md:h-4"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "hidden sm:inline",
                                            children: "Remote"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "sm:hidden",
                                            children: "Rem"
                                        }), jsxRuntimeExports.jsx(Badge, {
                                            variant: "secondary",
                                            className: "ml-0.5 md:ml-1 mobile-body-xs px-1",
                                            children: Es("remote")
                                        })]
                                    }), jsxRuntimeExports.jsxs(TabsTrigger, {
                                        value: "exclusive",
                                        className: "flex items-center gap-1 md:gap-2 px-1 md:px-3 mobile-body-xs md:text-sm",
                                        children: [jsxRuntimeExports.jsx(Star, {
                                            className: "w-2.5 h-2.5 md:w-4 md:h-4"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "hidden sm:inline",
                                            children: "Exclusive"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "sm:hidden",
                                            children: "Exc"
                                        }), e && jsxRuntimeExports.jsxs(Badge, {
                                            className: "bg-gradient-to-r from-yellow-400 to-orange-500 text-white text-xs hidden md:inline-flex",
                                            children: [jsxRuntimeExports.jsx(Crown, {
                                                className: "w-3 h-3 mr-1"
                                            }), "Premium"]
                                        }), jsxRuntimeExports.jsx(Badge, {
                                            variant: "secondary",
                                            className: "ml-0.5 md:ml-1 mobile-body-xs px-1",
                                            children: Es("exclusive")
                                        })]
                                    })]
                                })
                            })
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex-1 overflow-auto p-6",
                            children: [s && ot && ( () => {
                                const gs = checkJobApplicationPermission(ot, ht);
                                return gs.canApply ? null : jsxRuntimeExports.jsx("div", {
                                    className: "mb-6",
                                    children: jsxRuntimeExports.jsx(ProfileCompletionWarning, {
                                        completionPercentage: gs.completionPercentage,
                                        missingFields: gs.missingFields,
                                        requiredPercentage: 85
                                    })
                                })
                            }
                            )(), st === "exclusive" && !e && !i && jsxRuntimeExports.jsxs("div", {
                                className: "relative",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "filter blur-sm pointer-events-none",
                                    children: jsxRuntimeExports.jsx("div", {
                                        className: "space-y-4",
                                        children: Array.from({
                                            length: 3
                                        }).map( (gs, es) => jsxRuntimeExports.jsx(Card, {
                                            className: "p-6",
                                            children: jsxRuntimeExports.jsxs("div", {
                                                className: "flex items-start gap-4",
                                                children: [jsxRuntimeExports.jsx("div", {
                                                    className: "w-14 h-14 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center",
                                                    children: jsxRuntimeExports.jsx(Star, {
                                                        className: "w-8 h-8 text-white"
                                                    })
                                                }), jsxRuntimeExports.jsxs("div", {
                                                    className: "flex-1 space-y-2",
                                                    children: [jsxRuntimeExports.jsxs("div", {
                                                        className: "flex items-center gap-2",
                                                        children: [jsxRuntimeExports.jsx("h3", {
                                                            className: "text-lg font-semibold text-gray-900",
                                                            children: "Senior Software Engineer - Exclusive"
                                                        }), jsxRuntimeExports.jsxs(Badge, {
                                                            className: "bg-gradient-to-r from-yellow-400 to-orange-500 text-white",
                                                            children: [jsxRuntimeExports.jsx(Crown, {
                                                                className: "w-3 h-3 mr-1"
                                                            }), "Premium"]
                                                        })]
                                                    }), jsxRuntimeExports.jsx("p", {
                                                        className: "text-gray-600 font-medium",
                                                        children: "TechCorp Inc."
                                                    }), jsxRuntimeExports.jsxs("div", {
                                                        className: "flex items-center gap-4 text-sm text-gray-500",
                                                        children: [jsxRuntimeExports.jsx("span", {
                                                            children: "San Francisco, CA"
                                                        }), jsxRuntimeExports.jsx("span", {
                                                            children: "2 days ago"
                                                        }), jsxRuntimeExports.jsx("span", {
                                                            children: "Full-time"
                                                        })]
                                                    }), jsxRuntimeExports.jsx("p", {
                                                        className: "text-gray-600",
                                                        children: "Join our exclusive network of premium opportunities..."
                                                    }), jsxRuntimeExports.jsxs("div", {
                                                        className: "flex gap-2",
                                                        children: [jsxRuntimeExports.jsx(Badge, {
                                                            variant: "secondary",
                                                            children: "React"
                                                        }), jsxRuntimeExports.jsx(Badge, {
                                                            variant: "secondary",
                                                            children: "TypeScript"
                                                        }), jsxRuntimeExports.jsx(Badge, {
                                                            variant: "secondary",
                                                            children: "Node.js"
                                                        })]
                                                    })]
                                                })]
                                            })
                                        }, es))
                                    })
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center",
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "text-center p-8 max-w-md",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-20 h-20 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center mx-auto mb-4",
                                            children: jsxRuntimeExports.jsx(Lock, {
                                                className: "w-10 h-10 text-white"
                                            })
                                        }), jsxRuntimeExports.jsx("h3", {
                                            className: "text-2xl font-bold text-gray-900 mb-2",
                                            children: "Unlock Exclusive Jobs"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-gray-600 mb-6",
                                            children: "Access premium job opportunities from top companies. Get priority placement and exclusive roles not available to regular users."
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "space-y-3",
                                            children: [jsxRuntimeExports.jsx("a", {
                                                href: "https://payments.cashfree.com/forms/hirebuddy_premium_subscription",
                                                target: "_parent",
                                                className: "block w-full",
                                                style: {
                                                    textDecoration: "none"
                                                },
                                                children: jsxRuntimeExports.jsxs(Button, {
                                                    className: "w-full bg-gradient-to-r from-yellow-500 to-orange-600 hover:from-yellow-600 hover:to-orange-700 text-white font-semibold py-3",
                                                    children: [jsxRuntimeExports.jsx(Crown, {
                                                        className: "w-5 h-5 mr-2"
                                                    }), "Upgrade to Premium"]
                                                })
                                            }), jsxRuntimeExports.jsx("p", {
                                                className: "text-sm text-gray-500",
                                                children: "Join thousands of professionals who found their dream jobs"
                                            })]
                                        })]
                                    })
                                })]
                            }), !(st === "exclusive" && !e) && jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                                children: Xs ? jsxRuntimeExports.jsx("div", {
                                    className: "space-y-4",
                                    children: Array.from({
                                        length: 5
                                    }).map( (gs, es) => jsxRuntimeExports.jsx(Card, {
                                        className: "p-6",
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-start gap-4",
                                            children: [jsxRuntimeExports.jsx(Skeleton, {
                                                className: "w-12 h-12 rounded-full"
                                            }), jsxRuntimeExports.jsxs("div", {
                                                className: "flex-1 space-y-2",
                                                children: [jsxRuntimeExports.jsx(Skeleton, {
                                                    className: "h-5 w-3/4"
                                                }), jsxRuntimeExports.jsx(Skeleton, {
                                                    className: "h-4 w-1/2"
                                                }), jsxRuntimeExports.jsx(Skeleton, {
                                                    className: "h-4 w-full"
                                                }), jsxRuntimeExports.jsxs("div", {
                                                    className: "flex gap-2",
                                                    children: [jsxRuntimeExports.jsx(Skeleton, {
                                                        className: "h-6 w-16"
                                                    }), jsxRuntimeExports.jsx(Skeleton, {
                                                        className: "h-6 w-20"
                                                    })]
                                                })]
                                            })]
                                        })
                                    }, es))
                                }) : Ts.length === 0 ? jsxRuntimeExports.jsxs(motion.div, {
                                    initial: {
                                        opacity: 0,
                                        y: 20
                                    },
                                    animate: {
                                        opacity: 1,
                                        y: 0
                                    },
                                    className: "text-center py-12",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4",
                                        children: jsxRuntimeExports.jsx(Briefcase, {
                                            className: "w-12 h-12 text-gray-400"
                                        })
                                    }), jsxRuntimeExports.jsx("h3", {
                                        className: "text-xl font-semibold text-gray-900 mb-2",
                                        children: "No jobs found"
                                    }), jsxRuntimeExports.jsx("p", {
                                        className: "text-gray-600 mb-4",
                                        children: o || As > 0 ? "Try adjusting your search criteria or filters" : "No jobs are available at the moment. Check back later!"
                                    }), (o || As > 0) && jsxRuntimeExports.jsx(Button, {
                                        onClick: sr,
                                        variant: "outline",
                                        children: "Clear All Filters"
                                    })]
                                }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "md:hidden space-y-3",
                                        children: jsxRuntimeExports.jsx(AnimatePresence, {
                                            children: Ts.map( (gs, es) => jsxRuntimeExports.jsx(motion.div, {
                                                initial: {
                                                    opacity: 0,
                                                    y: 20
                                                },
                                                animate: {
                                                    opacity: 1,
                                                    y: 0
                                                },
                                                exit: {
                                                    opacity: 0,
                                                    y: -20
                                                },
                                                transition: {
                                                    duration: .3,
                                                    delay: es * .05
                                                },
                                                children: jsxRuntimeExports.jsx(MobileJobCard, {
                                                    job: {
                                                        id: gs.id,
                                                        job_title: gs.title,
                                                        company_name: gs.company,
                                                        location: gs.location,
                                                        salary_range: gs.salary,
                                                        job_type: gs.type,
                                                        experience_level: gs.experienceRequired || "Not specified",
                                                        created_at: gs.posted,
                                                        is_remote: gs.isRemote,
                                                        skills: gs.tags
                                                    },
                                                    onClick: () => Ms(gs),
                                                    onApply: () => Hs(gs),
                                                    applied: et.has(gs.id)
                                                })
                                            }, gs.id))
                                        })
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "hidden md:block space-y-4",
                                        children: jsxRuntimeExports.jsx(AnimatePresence, {
                                            children: Ts.map( (gs, es) => jsxRuntimeExports.jsx(motion.div, {
                                                initial: {
                                                    opacity: 0,
                                                    y: 20
                                                },
                                                animate: {
                                                    opacity: 1,
                                                    y: 0
                                                },
                                                exit: {
                                                    opacity: 0,
                                                    y: -20
                                                },
                                                transition: {
                                                    duration: .3,
                                                    delay: es * .05
                                                },
                                                whileHover: {
                                                    y: -2
                                                },
                                                onClick: () => Ms(gs),
                                                children: jsxRuntimeExports.jsx(Card, {
                                                    className: "cursor-pointer hover:shadow-lg transition-all duration-300 border-0 bg-white/80 backdrop-blur-sm group",
                                                    children: jsxRuntimeExports.jsx(CardContent, {
                                                        className: "p-6",
                                                        children: jsxRuntimeExports.jsxs("div", {
                                                            className: "flex items-start gap-4",
                                                            children: [jsxRuntimeExports.jsxs("div", {
                                                                className: "relative",
                                                                children: [jsxRuntimeExports.jsx(CompanyLogo, {
                                                                    companyName: gs.company,
                                                                    logoUrl: ls(gs),
                                                                    isLoading: Ds(gs.id),
                                                                    size: "md",
                                                                    className: "border-2 border-gray-100"
                                                                }), gs.isRemote && jsxRuntimeExports.jsx("div", {
                                                                    className: "absolute -top-1 -right-1 w-5 h-5 bg-green-500 rounded-full flex items-center justify-center",
                                                                    children: jsxRuntimeExports.jsx(Globe, {
                                                                        className: "w-3 h-3 text-white"
                                                                    })
                                                                })]
                                                            }), jsxRuntimeExports.jsx("div", {
                                                                className: "flex-1 min-w-0",
                                                                children: jsxRuntimeExports.jsxs("div", {
                                                                    className: "flex items-start justify-between gap-4",
                                                                    children: [jsxRuntimeExports.jsxs("div", {
                                                                        className: "flex-1 min-w-0",
                                                                        children: [jsxRuntimeExports.jsx("div", {
                                                                            className: "flex items-center gap-2 mb-1",
                                                                            children: jsxRuntimeExports.jsx("h3", {
                                                                                className: "text-lg font-semibold text-gray-900 group-hover:text-blue-600 transition-colors line-clamp-1",
                                                                                children: gs.title
                                                                            })
                                                                        }), jsxRuntimeExports.jsx("p", {
                                                                            className: "text-gray-600 font-medium",
                                                                            children: gs.company
                                                                        }), jsxRuntimeExports.jsxs("div", {
                                                                            className: "flex items-center gap-4 mt-2 text-sm text-gray-500",
                                                                            children: [jsxRuntimeExports.jsxs("div", {
                                                                                className: "flex items-center gap-1",
                                                                                children: [jsxRuntimeExports.jsx(MapPin, {
                                                                                    className: "w-4 h-4"
                                                                                }), jsxRuntimeExports.jsx("span", {
                                                                                    children: gs.location
                                                                                })]
                                                                            }), jsxRuntimeExports.jsxs("div", {
                                                                                className: "flex items-center gap-1",
                                                                                children: [jsxRuntimeExports.jsx(Clock, {
                                                                                    className: "w-4 h-4"
                                                                                }), jsxRuntimeExports.jsx("span", {
                                                                                    children: gs.posted
                                                                                })]
                                                                            }), jsxRuntimeExports.jsxs("div", {
                                                                                className: "flex items-center gap-1",
                                                                                children: [jsxRuntimeExports.jsx(Briefcase, {
                                                                                    className: "w-4 h-4"
                                                                                }), jsxRuntimeExports.jsx("span", {
                                                                                    children: gs.type
                                                                                })]
                                                                            })]
                                                                        }), jsxRuntimeExports.jsx("p", {
                                                                            className: "text-gray-600 mt-2 line-clamp-2",
                                                                            children: gs.description
                                                                        }), jsxRuntimeExports.jsxs("div", {
                                                                            className: "flex flex-wrap gap-2 mt-3",
                                                                            children: [gs.tags.slice(0, 4).map( (ws, Is) => jsxRuntimeExports.jsx(Badge, {
                                                                                variant: "secondary",
                                                                                className: "text-xs",
                                                                                children: ws
                                                                            }, Is)), gs.tags.length > 4 && jsxRuntimeExports.jsxs(Badge, {
                                                                                variant: "outline",
                                                                                className: "text-xs",
                                                                                children: ["+", gs.tags.length - 4, " more"]
                                                                            })]
                                                                        })]
                                                                    }), jsxRuntimeExports.jsxs("div", {
                                                                        className: "flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity",
                                                                        children: [jsxRuntimeExports.jsxs(Tooltip, {
                                                                            children: [jsxRuntimeExports.jsx(TooltipTrigger, {
                                                                                asChild: !0,
                                                                                children: jsxRuntimeExports.jsx(Button, {
                                                                                    variant: "ghost",
                                                                                    size: "sm",
                                                                                    onClick: ws => Hs(gs, ws),
                                                                                    className: "text-gray-400 hover:text-green-600",
                                                                                    children: jsxRuntimeExports.jsx(ExternalLink, {
                                                                                        className: "w-4 h-4"
                                                                                    })
                                                                                })
                                                                            }), jsxRuntimeExports.jsx(TooltipContent, {
                                                                                children: "Apply to job"
                                                                            })]
                                                                        }), jsxRuntimeExports.jsx(Button, {
                                                                            size: "sm",
                                                                            onClick: ws => {
                                                                                ws.stopPropagation(),
                                                                                Hs(gs)
                                                                            }
                                                                            ,
                                                                            className: "bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700",
                                                                            disabled: et.has(gs.id),
                                                                            children: et.has(gs.id) ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                                                children: [jsxRuntimeExports.jsx(Send, {
                                                                                    className: "w-4 h-4 mr-2"
                                                                                }), "Applied"]
                                                                            }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                                                children: [jsxRuntimeExports.jsx(Send, {
                                                                                    className: "w-4 h-4 mr-2"
                                                                                }), "Apply"]
                                                                            })
                                                                        })]
                                                                    })]
                                                                })
                                                            })]
                                                        })
                                                    })
                                                })
                                            }, gs.id))
                                        })
                                    }), zs && jsxRuntimeExports.jsx("div", {
                                        className: "flex justify-center mt-8",
                                        children: jsxRuntimeExports.jsx(Button, {
                                            onClick: Vs,
                                            disabled: $s,
                                            variant: "outline",
                                            size: "lg",
                                            className: "px-8 py-3 text-base font-medium",
                                            children: $s ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                                    className: "w-5 h-5 mr-2 animate-spin"
                                                }), "Loading more jobs..."]
                                            }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx(ChevronDown, {
                                                    className: "w-5 h-5 mr-2"
                                                }), "Load More Jobs"]
                                            })
                                        })
                                    })]
                                })
                            })]
                        })]
                    }), jsxRuntimeExports.jsx(AnimatePresence, {
                        children: h && lt && jsxRuntimeExports.jsxs(motion.div, {
                            initial: {
                                x: "100%"
                            },
                            animate: {
                                x: 0
                            },
                            exit: {
                                x: "100%"
                            },
                            transition: {
                                type: "spring",
                                damping: 20,
                                stiffness: 100
                            },
                            className: "w-96 bg-white border-l border-gray-200 flex flex-col",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "p-6 border-b border-gray-200",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-start justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-start gap-3",
                                        children: [jsxRuntimeExports.jsx(CompanyLogo, {
                                            companyName: h.company,
                                            logoUrl: ls(h),
                                            isLoading: Ds(h.id),
                                            size: "md"
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("h2", {
                                                className: "text-lg font-semibold text-gray-900 line-clamp-2",
                                                children: h.title
                                            }), jsxRuntimeExports.jsx("p", {
                                                className: "text-gray-600",
                                                children: h.company
                                            })]
                                        })]
                                    }), jsxRuntimeExports.jsx(Button, {
                                        variant: "ghost",
                                        size: "sm",
                                        onClick: () => dt(!1),
                                        children: jsxRuntimeExports.jsx(X, {
                                            className: "w-4 h-4"
                                        })
                                    })]
                                })
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex-1 overflow-auto p-6 space-y-6",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-3",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2 text-sm text-gray-600",
                                        children: [jsxRuntimeExports.jsx(MapPin, {
                                            className: "w-4 h-4"
                                        }), jsxRuntimeExports.jsx("span", {
                                            children: h.location
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2 text-sm text-gray-600",
                                        children: [jsxRuntimeExports.jsx(Clock, {
                                            className: "w-4 h-4"
                                        }), jsxRuntimeExports.jsxs("span", {
                                            children: ["Posted ", h.posted]
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2 text-sm text-gray-600",
                                        children: [jsxRuntimeExports.jsx(Briefcase, {
                                            className: "w-4 h-4"
                                        }), jsxRuntimeExports.jsx("span", {
                                            children: h.type
                                        })]
                                    }), h.isRemote && jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2 text-sm text-green-600",
                                        children: [jsxRuntimeExports.jsx(Globe, {
                                            className: "w-4 h-4"
                                        }), jsxRuntimeExports.jsx("span", {
                                            children: "Remote Work Available"
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsx(Separator, {}), jsxRuntimeExports.jsxs("div", {
                                    children: [jsxRuntimeExports.jsx("h3", {
                                        className: "text-sm font-semibold text-gray-900 mb-2",
                                        children: "Skills & Tags"
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "flex flex-wrap gap-2",
                                        children: h.tags.map( (gs, es) => jsxRuntimeExports.jsx(Badge, {
                                            variant: "secondary",
                                            children: gs
                                        }, es))
                                    })]
                                }), jsxRuntimeExports.jsx(Separator, {}), jsxRuntimeExports.jsxs("div", {
                                    children: [jsxRuntimeExports.jsx("h3", {
                                        className: "text-sm font-semibold text-gray-900 mb-2",
                                        children: "Job Description"
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "text-sm text-gray-600 whitespace-pre-wrap",
                                        children: h.description
                                    })]
                                }), h.experienceRequired && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                    children: [jsxRuntimeExports.jsx(Separator, {}), jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx("h3", {
                                            className: "text-sm font-semibold text-gray-900 mb-2",
                                            children: "Experience Required"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-sm text-gray-600",
                                            children: h.experienceRequired
                                        })]
                                    })]
                                })]
                            }), jsxRuntimeExports.jsx("div", {
                                className: "p-6 border-t border-gray-200",
                                children: jsxRuntimeExports.jsx(Button, {
                                    onClick: () => Hs(h),
                                    className: "w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700",
                                    disabled: et.has(h.id),
                                    children: et.has(h.id) ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                        children: [jsxRuntimeExports.jsx(Send, {
                                            className: "w-4 h-4 mr-2"
                                        }), "Applied"]
                                    }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                        children: [jsxRuntimeExports.jsx(ExternalLink, {
                                            className: "w-4 h-4 mr-2"
                                        }), "Apply Now"]
                                    })
                                })
                            })]
                        })
                    })]
                })]
            })]
        }), jsxRuntimeExports.jsx(ApplicationConfirmationPopup, {
            isOpen: xs.isPopupOpen,
            onClose: xs.closePopup,
            job: xs.pendingJob,
            onConfirmApplication: xs.confirmApplication,
            onDenyApplication: xs.denyApplication,
            isSubmitting: xs.isSubmitting
        })]
    })
}
  , ExperienceManager = ({experiences: s, onUpdate: e, isEditing: i}) => {
    const {toast: o} = useToast()
      , [a,c] = reactExports.useState(new Set)
      , [d,h] = reactExports.useState({})
      , [g,b] = reactExports.useState({});
    reactExports.useEffect( () => {
        s.length > 0 && !s[0].job_title && !s[0].company && c(new Set(["0"]))
    }
    , [s]);
    const _ = () => {
        const ot = {
            job_title: "",
            company: "",
            location: "",
            start_date: "",
            end_date: "",
            is_current: !1,
            description: "",
            achievements: [],
            skills_used: [],
            display_order: s.length
        }
          , at = [...s, ot];
        e(at),
        c(ht => new Set([...ht, s.length.toString()])),
        o({
            title: "Experience Added",
            description: "New work experience added. Fill in the details below."
        })
    }
      , $ = (ot, at, ht) => {
        try {
            const pt = [...s];
            pt[ot] = {
                ...pt[ot],
                [at]: ht
            };
            const gt = `${ot}_${at}`;
            if (g[gt]) {
                const wt = {
                    ...g
                };
                delete wt[gt],
                b(wt)
            }
            e(pt)
        } catch (pt) {
            console.error("Error updating experience:", pt),
            o({
                title: "Error",
                description: "Failed to update experience. Please try again.",
                variant: "destructive"
            })
        }
    }
      , _e = ot => {
        try {
            const at = s.filter( (gt, wt) => wt !== ot);
            e(at);
            const ht = ot.toString();
            c(gt => {
                const wt = new Set(gt);
                return wt.delete(ht),
                wt
            }
            );
            const pt = {
                ...g
            };
            Object.keys(pt).forEach(gt => {
                gt.startsWith(`${ot}_`) && delete pt[gt]
            }
            ),
            b(pt),
            o({
                title: "Experience Removed",
                description: "Work experience has been removed successfully."
            })
        } catch (at) {
            console.error("Error removing experience:", at),
            o({
                title: "Error",
                description: "Failed to remove experience. Please try again.",
                variant: "destructive"
            })
        }
    }
      , tt = ot => {
        const at = ot.toString();
        c(ht => {
            const pt = new Set(ht);
            return pt.has(at) ? pt.delete(at) : pt.add(at),
            pt
        }
        )
    }
      , rt = ot => {
        var gt;
        const at = (gt = d[ot.toString()]) == null ? void 0 : gt.trim();
        if (!at) {
            o({
                title: "Invalid Skill",
                description: "Please enter a skill name.",
                variant: "destructive"
            });
            return
        }
        const pt = s[ot].skills_used || [];
        if (pt.includes(at)) {
            o({
                title: "Duplicate Skill",
                description: "This skill is already added.",
                variant: "destructive"
            });
            return
        }
        $(ot, "skills_used", [...pt, at]),
        h(wt => ({
            ...wt,
            [ot.toString()]: ""
        }))
    }
      , et = (ot, at) => {
        const pt = s[ot].skills_used || [];
        $(ot, "skills_used", pt.filter(gt => gt !== at))
    }
      , it = ot => {
        const ht = s[ot].achievements || [];
        $(ot, "achievements", [...ht, ""])
    }
      , st = (ot, at, ht) => {
        const gt = [...s[ot].achievements || []];
        gt[at] = ht,
        $(ot, "achievements", gt)
    }
      , nt = (ot, at) => {
        const pt = s[ot].achievements || [];
        $(ot, "achievements", pt.filter( (gt, wt) => wt !== at))
    }
      , lt = ot => {
        if (!ot)
            return "";
        try {
            if (ot.includes("-") && ot.length === 7) {
                const [at,ht] = ot.split("-");
                return new Date(parseInt(at),parseInt(ht) - 1).toLocaleDateString("en-US", {
                    month: "short",
                    year: "numeric"
                })
            }
            return ot
        } catch {
            return ot
        }
    }
      , dt = (ot, at) => {
        ot.key === "Enter" && (ot.preventDefault(),
        rt(at))
    }
    ;
    return s.length === 0 && !i ? jsxRuntimeExports.jsxs(Card, {
        children: [jsxRuntimeExports.jsx(CardHeader, {
            children: jsxRuntimeExports.jsxs(CardTitle, {
                className: "flex items-center gap-2",
                children: [jsxRuntimeExports.jsx(Briefcase, {
                    className: "w-5 h-5 text-blue-600"
                }), "Work Experience"]
            })
        }), jsxRuntimeExports.jsx(CardContent, {
            children: jsxRuntimeExports.jsxs("div", {
                className: "text-center py-8 text-gray-500",
                children: [jsxRuntimeExports.jsx(Briefcase, {
                    className: "w-12 h-12 mx-auto mb-4 text-gray-400"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-lg font-medium",
                    children: "No work experience added yet"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-sm",
                    children: "Add your work experience to showcase your professional journey"
                })]
            })
        })]
    }) : jsxRuntimeExports.jsxs(Card, {
        children: [jsxRuntimeExports.jsx(CardHeader, {
            children: jsxRuntimeExports.jsxs(CardTitle, {
                className: "flex items-center gap-2",
                children: [jsxRuntimeExports.jsx(Briefcase, {
                    className: "w-5 h-5 text-blue-600"
                }), "Work Experience", s.length > 0 && jsxRuntimeExports.jsxs(Badge, {
                    variant: "secondary",
                    className: "ml-2",
                    children: [s.length, " ", s.length === 1 ? "position" : "positions"]
                })]
            })
        }), jsxRuntimeExports.jsxs(CardContent, {
            className: "space-y-6",
            children: [s.map( (ot, at) => {
                const ht = a.has(at.toString())
                  , pt = ot.job_title && ot.company;
                return jsxRuntimeExports.jsxs("div", {
                    className: "border rounded-lg p-4 bg-gray-50 hover:bg-gray-100 transition-colors",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-start justify-between mb-4",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "flex-1",
                            children: i ? jsxRuntimeExports.jsxs("div", {
                                className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        htmlFor: `job_title_${at}`,
                                        className: "text-sm font-medium",
                                        children: "Job Title *"
                                    }), jsxRuntimeExports.jsx(Input, {
                                        id: `job_title_${at}`,
                                        value: ot.job_title || "",
                                        onChange: gt => $(at, "job_title", gt.target.value),
                                        placeholder: "e.g. Senior Software Engineer",
                                        className: ot.job_title ? "" : "border-red-300"
                                    }), !ot.job_title && jsxRuntimeExports.jsx("p", {
                                        className: "text-xs text-red-500 mt-1",
                                        children: "Job title is required"
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        htmlFor: `company_${at}`,
                                        className: "text-sm font-medium",
                                        children: "Company *"
                                    }), jsxRuntimeExports.jsx(Input, {
                                        id: `company_${at}`,
                                        value: ot.company || "",
                                        onChange: gt => $(at, "company", gt.target.value),
                                        placeholder: "e.g. Tech Corp",
                                        className: ot.company ? "" : "border-red-300"
                                    }), !ot.company && jsxRuntimeExports.jsx("p", {
                                        className: "text-xs text-red-500 mt-1",
                                        children: "Company name is required"
                                    })]
                                })]
                            }) : jsxRuntimeExports.jsxs("div", {
                                children: [jsxRuntimeExports.jsx("h3", {
                                    className: "text-lg font-semibold text-gray-900",
                                    children: ot.job_title || "Job Title"
                                }), jsxRuntimeExports.jsxs("p", {
                                    className: "text-blue-600 font-medium flex items-center mt-1",
                                    children: [jsxRuntimeExports.jsx(Building, {
                                        className: "w-4 h-4 mr-1"
                                    }), ot.company || "Company Name"]
                                })]
                            })
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2",
                            children: [!pt && !i && jsxRuntimeExports.jsx(CircleAlert, {
                                className: "w-4 h-4 text-amber-500",
                                "aria-label": "Incomplete information"
                            }), !i && jsxRuntimeExports.jsx(Button, {
                                variant: "ghost",
                                size: "sm",
                                onClick: () => tt(at),
                                className: "hover:bg-gray-200",
                                children: ht ? jsxRuntimeExports.jsx(ChevronUp, {
                                    className: "w-4 h-4"
                                }) : jsxRuntimeExports.jsx(ChevronDown, {
                                    className: "w-4 h-4"
                                })
                            }), i && jsxRuntimeExports.jsx(Button, {
                                variant: "destructive",
                                size: "sm",
                                onClick: () => _e(at),
                                className: "hover:bg-red-600",
                                children: jsxRuntimeExports.jsx(Trash2, {
                                    className: "w-4 h-4"
                                })
                            })]
                        })]
                    }), i ? jsxRuntimeExports.jsxs("div", {
                        className: "grid grid-cols-1 md:grid-cols-3 gap-4 mb-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx(Label, {
                                htmlFor: `location_${at}`,
                                className: "text-sm font-medium",
                                children: "Location"
                            }), jsxRuntimeExports.jsx(Input, {
                                id: `location_${at}`,
                                value: ot.location || "",
                                onChange: gt => $(at, "location", gt.target.value),
                                placeholder: "e.g. San Francisco, CA"
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx(Label, {
                                htmlFor: `start_date_${at}`,
                                className: "text-sm font-medium",
                                children: "Start Date"
                            }), jsxRuntimeExports.jsx(Input, {
                                id: `start_date_${at}`,
                                type: "month",
                                value: ot.start_date || "",
                                onChange: gt => $(at, "start_date", gt.target.value)
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2 mb-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    htmlFor: `end_date_${at}`,
                                    className: "text-sm font-medium",
                                    children: "End Date"
                                }), ot.is_current && jsxRuntimeExports.jsx(Badge, {
                                    variant: "secondary",
                                    className: "text-xs bg-green-100 text-green-700 border-green-200",
                                    children: "Current"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Input, {
                                    id: `end_date_${at}`,
                                    type: "month",
                                    value: ot.end_date || "",
                                    onChange: gt => $(at, "end_date", gt.target.value),
                                    disabled: !!ot.is_current,
                                    className: ot.is_current ? "bg-gray-100 cursor-not-allowed" : "",
                                    placeholder: ot.is_current ? "Current position" : "Select end date"
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center space-x-2",
                                    children: [jsxRuntimeExports.jsx(Switch, {
                                        id: `is_current_${at}`,
                                        checked: !!ot.is_current,
                                        onCheckedChange: gt => {
                                            const wt = [...s];
                                            wt[at] = {
                                                ...wt[at],
                                                is_current: gt,
                                                end_date: gt ? "" : wt[at].end_date
                                            },
                                            e(wt),
                                            o({
                                                title: gt ? "Current Position Set" : "Current Position Removed",
                                                description: gt ? "End date has been cleared" : "You can now set an end date"
                                            })
                                        }
                                    }), jsxRuntimeExports.jsx(Label, {
                                        htmlFor: `is_current_${at}`,
                                        className: "text-sm cursor-pointer",
                                        children: "Current position"
                                    })]
                                })]
                            })]
                        })]
                    }) : jsxRuntimeExports.jsxs("div", {
                        className: "flex flex-wrap gap-4 text-sm text-gray-600 mb-3",
                        children: [ot.location && jsxRuntimeExports.jsxs("span", {
                            className: "flex items-center",
                            children: [jsxRuntimeExports.jsx(MapPin, {
                                className: "w-3 h-3 mr-1"
                            }), ot.location]
                        }), jsxRuntimeExports.jsxs("span", {
                            className: "flex items-center",
                            children: [jsxRuntimeExports.jsx(Calendar, {
                                className: "w-3 h-3 mr-1"
                            }), lt(ot.start_date) || "Start date", " - ", ot.is_current ? jsxRuntimeExports.jsx("span", {
                                className: "text-green-600 font-medium",
                                children: "Present"
                            }) : lt(ot.end_date) || "End date"]
                        })]
                    }), (ht || i) && jsxRuntimeExports.jsxs("div", {
                        className: "space-y-4",
                        children: [jsxRuntimeExports.jsx(Separator, {}), jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx(Label, {
                                htmlFor: `description_${at}`,
                                className: "text-sm font-medium",
                                children: "Job Description"
                            }), i ? jsxRuntimeExports.jsx(Textarea, {
                                id: `description_${at}`,
                                value: ot.description || "",
                                onChange: gt => $(at, "description", gt.target.value),
                                placeholder: "Describe your role, responsibilities, and key contributions...",
                                rows: 3,
                                className: "mt-1"
                            }) : jsxRuntimeExports.jsx("p", {
                                className: "mt-1 text-sm text-gray-700 whitespace-pre-wrap",
                                children: ot.description || "No description provided"
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx(Label, {
                                className: "text-sm font-medium",
                                children: "Skills & Technologies"
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex flex-wrap gap-2 mt-2 mb-2",
                                children: [(ot.skills_used || []).map( (gt, wt) => jsxRuntimeExports.jsxs(Badge, {
                                    variant: "secondary",
                                    className: "px-2 py-1",
                                    children: [gt, i && jsxRuntimeExports.jsx("button", {
                                        onClick: () => et(at, gt),
                                        className: "ml-2 hover:text-red-600 transition-colors",
                                        title: "Remove skill",
                                        children: jsxRuntimeExports.jsx(X, {
                                            className: "w-3 h-3"
                                        })
                                    })]
                                }, `skill-${wt}`)), (ot.skills_used || []).length === 0 && !i && jsxRuntimeExports.jsx("span", {
                                    className: "text-sm text-gray-500 italic",
                                    children: "No skills specified"
                                })]
                            }), i && jsxRuntimeExports.jsxs("div", {
                                className: "flex space-x-2",
                                children: [jsxRuntimeExports.jsx(Input, {
                                    value: d[at.toString()] || "",
                                    onChange: gt => h(wt => ({
                                        ...wt,
                                        [at.toString()]: gt.target.value
                                    })),
                                    placeholder: "Add a skill or technology...",
                                    onKeyDown: gt => dt(gt, at)
                                }), jsxRuntimeExports.jsx(Button, {
                                    onClick: () => rt(at),
                                    size: "sm",
                                    type: "button",
                                    children: jsxRuntimeExports.jsx(Plus, {
                                        className: "w-4 h-4"
                                    })
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-between mb-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    className: "text-sm font-medium",
                                    children: "Key Achievements"
                                }), i && jsxRuntimeExports.jsxs(Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: () => it(at),
                                    type: "button",
                                    children: [jsxRuntimeExports.jsx(Plus, {
                                        className: "w-3 h-3 mr-1"
                                    }), "Add Achievement"]
                                })]
                            }), (ot.achievements || []).length === 0 ? jsxRuntimeExports.jsx("p", {
                                className: "text-sm text-gray-500 italic",
                                children: "No achievements added yet"
                            }) : jsxRuntimeExports.jsx("div", {
                                className: "space-y-2",
                                children: (ot.achievements || []).map( (gt, wt) => jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-start gap-2",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "flex-1",
                                        children: i ? jsxRuntimeExports.jsx(Textarea, {
                                            value: gt,
                                            onChange: yt => st(at, wt, yt.target.value),
                                            placeholder: "Describe a key achievement, impact, or accomplishment...",
                                            rows: 2
                                        }) : jsxRuntimeExports.jsxs("p", {
                                            className: "text-sm text-gray-700",
                                            children: ["• ", gt]
                                        })
                                    }), i && jsxRuntimeExports.jsx(Button, {
                                        variant: "ghost",
                                        size: "sm",
                                        onClick: () => nt(at, wt),
                                        className: "text-red-600 hover:text-red-800 hover:bg-red-50",
                                        title: "Remove achievement",
                                        type: "button",
                                        children: jsxRuntimeExports.jsx(Trash2, {
                                            className: "w-3 h-3"
                                        })
                                    })]
                                }, `achievement-${wt}`))
                            })]
                        })]
                    })]
                }, `experience-${at}`)
            }
            ), i && jsxRuntimeExports.jsxs(Button, {
                variant: "outline",
                onClick: _,
                className: "w-full flex items-center justify-center gap-2 border-dashed border-2 hover:border-blue-400 hover:text-blue-600",
                type: "button",
                children: [jsxRuntimeExports.jsx(Plus, {
                    className: "w-4 h-4"
                }), "Add Work Experience"]
            }), !i && s.length > 0 && jsxRuntimeExports.jsx("div", {
                className: "mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200",
                children: jsxRuntimeExports.jsxs("p", {
                    className: "text-sm text-blue-700",
                    children: [jsxRuntimeExports.jsx("strong", {
                        children: s.length
                    }), " work experience", s.length !== 1 ? "s" : "", " added", s.filter(ot => ot.is_current).length > 0 && jsxRuntimeExports.jsxs("span", {
                        children: [" • ", jsxRuntimeExports.jsx("strong", {
                            children: s.filter(ot => ot.is_current).length
                        }), " current position", s.filter(ot => ot.is_current).length !== 1 ? "s" : ""]
                    })]
                })
            })]
        })]
    })
}
  , Profile = () => {
    var ds, js, ys, vs, Ss, _s;
    const {user: s, signOut: e, isFirstTimeUser: i, markUserAsReturning: o} = useAuth()
      , {toast: a} = useToast()
      , [c] = useSearchParams()
      , [d,h] = reactExports.useState(!1)
      , [g,b] = reactExports.useState(!0)
      , [_,$] = reactExports.useState(!1)
      , [_e,tt] = reactExports.useState(!1)
      , [rt,et] = reactExports.useState(null)
      , [it,st] = reactExports.useState([])
      , [nt,lt] = reactExports.useState("")
      , [dt,ot] = reactExports.useState(((ds = s == null ? void 0 : s.user_metadata) == null ? void 0 : ds.full_name) || ((js = s == null ? void 0 : s.email) == null ? void 0 : js.split("@")[0]) || "User")
      , [at,ht] = reactExports.useState(!1)
      , [pt,gt] = reactExports.useState(!0)
      , [wt,yt] = reactExports.useState(!1)
      , Rt = dt.split(" ").map(ns => ns[0]).join("").toUpperCase()
      , Mt = calculateProfileCompletion(rt, it)
      , ss = checkEmailPermission(rt, it);
    reactExports.useEffect( () => {
        var ns, xs;
        s && ot(((ns = s.user_metadata) == null ? void 0 : ns.full_name) || ((xs = s.email) == null ? void 0 : xs.split("@")[0]) || s.email || "User")
    }
    , [s]),
    reactExports.useEffect( () => {
        const ns = c.get("newUser") === "true";
        if ((i || ns) && !g && rt) {
            const xs = setTimeout( () => {
                yt(!0)
            }
            , 500);
            return () => clearTimeout(xs)
        }
    }
    , [i, g, rt, c]);
    const zt = () => {
        yt(!1),
        o(),
        c.get("newUser") && window.history.replaceState({}, "", "/profile")
    }
    ;
    reactExports.useEffect( () => {
        s != null && s.id ? At() : (et({
            full_name: "Demo User",
            title: "Software Developer",
            company: "Tech Company",
            location: "San Francisco, CA",
            phone: "+91 1234567890",
            bio: "Passionate software developer with experience in modern web technologies. I love building scalable applications and working with cutting-edge technologies.",
            website: "https://demouser.dev",
            github: "demouser",
            linkedin: "demouser",
            college: "IIT Bombay",
            skills: ["React", "TypeScript", "Node.js", "Python", "AWS", "Docker"],
            experience_years: 5,
            available_for_work: !0,
            profile_image_url: null,
            resume_url: "/sample-resume.pdf",
            resume_filename: "Demo_User_Resume.pdf",
            resume_uploaded_at: new Date(Date.now() - 7 * 24 * 60 * 60 * 1e3).toISOString()
        }),
        b(!1))
    }
    , [s == null ? void 0 : s.id]);
    const At = async () => {
        var ns, xs, Lt, ts;
        if (s != null && s.id)
            try {
                b(!0);
                try {
                    const [ms,hs] = await Promise.all([ProfileService.getProfile(s.id), ProfileService.getUserExperiences(s.id)]);
                    if (ms)
                        et(ms);
                    else {
                        const bs = {
                            full_name: ((ns = s.user_metadata) == null ? void 0 : ns.full_name) || ((xs = s.email) == null ? void 0 : xs.split("@")[0]) || "User",
                            skills: []
                        }
                          , ks = await ProfileService.upsertProfile(s.id, bs);
                        et(ks)
                    }
                    st(hs || [])
                } catch (ms) {
                    console.warn("Database not connected, using mock data:", ms),
                    et({
                        full_name: ((Lt = s.user_metadata) == null ? void 0 : Lt.full_name) || ((ts = s.email) == null ? void 0 : ts.split("@")[0]) || "User",
                        title: "",
                        company: "",
                        location: "",
                        phone: "",
                        bio: "",
                        linkedin: "",
                        github: "",
                        website: "",
                        college: "",
                        skills: [],
                        experience_years: 0,
                        available_for_work: !1,
                        profile_image_url: null,
                        resume_url: null,
                        resume_filename: null,
                        resume_uploaded_at: null
                    }),
                    st([{
                        job_title: "Senior Software Engineer",
                        company: "Tech Corp",
                        location: "San Francisco, CA",
                        start_date: "2022-01",
                        end_date: "",
                        is_current: !0,
                        description: "Leading development of web applications using React and Node.js",
                        achievements: ["Improved application performance by 40%", "Led a team of 5 developers"],
                        skills_used: ["React", "Node.js", "TypeScript", "AWS"]
                    }]),
                    a({
                        title: "Demo Mode",
                        description: "Database not connected. Using demo data. Changes won't be saved.",
                        variant: "default"
                    })
                }
            } catch (ms) {
                console.error("Error loading profile:", ms),
                a({
                    title: "Error",
                    description: "Failed to load profile data",
                    variant: "destructive"
                })
            } finally {
                b(!1)
            }
    }
      , kt = (ns, xs) => {
        rt && et({
            ...rt,
            [ns]: xs
        })
    }
      , vt = ns => {
        st(ns)
    }
      , bt = async () => {
        if (s != null && s.id)
            try {
                const xs = (await ProfileService.getUserExperiences(s.id)).filter(hs => hs.id && !it.find(bs => bs.id === hs.id));
                for (const hs of xs)
                    hs.id && await ProfileService.deleteExperience(hs.id);
                const Lt = it.filter(hs => !hs.id)
                  , ts = it.filter(hs => hs.id);
                for (const hs of Lt)
                    await ProfileService.createExperience(s.id, hs);
                for (const hs of ts)
                    hs.id && await ProfileService.updateExperience(hs.id, hs);
                const ms = await ProfileService.getUserExperiences(s.id);
                st(ms)
            } catch (ns) {
                throw console.error("Error saving experiences:", ns),
                ns
            }
    }
      , Tt = async () => {
        if (rt)
            try {
                if ($(!0),
                s != null && s.id)
                    try {
                        const ns = await ProfileService.updateProfile(s.id, rt);
                        et(ns),
                        await bt(),
                        h(!1),
                        a({
                            title: "Success",
                            description: "Profile and experience updated successfully"
                        })
                    } catch (ns) {
                        console.warn("Database not connected, saving locally only:", ns),
                        h(!1),
                        a({
                            title: "Demo Mode",
                            description: "Changes saved locally only. Database not connected.",
                            variant: "default"
                        })
                    }
                else
                    h(!1),
                    a({
                        title: "Demo Mode",
                        description: "Changes saved locally only. Please log in to save permanently.",
                        variant: "default"
                    })
            } catch (ns) {
                console.error("Error saving profile:", ns),
                a({
                    title: "Error",
                    description: "Failed to save profile",
                    variant: "destructive"
                })
            } finally {
                $(!1)
            }
    }
      , Yt = () => {
        if (!nt.trim() || !rt)
            return;
        const ns = rt.skills || [];
        ns.includes(nt.trim()) || (kt("skills", [...ns, nt.trim()]),
        lt(""))
    }
      , Nt = ns => {
        if (!rt)
            return;
        const xs = rt.skills || [];
        kt("skills", xs.filter(Lt => Lt !== ns))
    }
      , jt = (ns, xs) => {
        var ts;
        const Lt = (ts = ns.target.files) == null ? void 0 : ts[0];
        Lt && (xs === "profile_picture" ? xt(Lt) : Et(Lt))
    }
      , xt = async ns => {
        if (!["image/jpeg", "image/png", "image/webp", "image/gif"].includes(ns.type)) {
            a({
                title: "Invalid File Type",
                description: "Please upload a JPEG, PNG, WebP, or GIF image.",
                variant: "destructive"
            });
            return
        }
        if (ns.size > 5 * 1024 * 1024) {
            a({
                title: "File Too Large",
                description: "Please upload an image smaller than 5MB.",
                variant: "destructive"
            });
            return
        }
        try {
            if (tt(!0),
            s != null && s.id)
                try {
                    const Lt = await ProfileService.uploadProfileImage(s.id, ns);
                    et(ts => ts ? {
                        ...ts,
                        profile_image_url: Lt
                    } : null),
                    a({
                        title: "Success",
                        description: "Profile image updated successfully"
                    })
                } catch (Lt) {
                    console.warn("Database not connected, using local preview:", Lt);
                    const ts = URL.createObjectURL(ns);
                    et(ms => ms ? {
                        ...ms,
                        profile_image_url: ts
                    } : null),
                    a({
                        title: "Demo Mode",
                        description: "Image preview only. Database not connected.",
                        variant: "default"
                    })
                }
            else {
                const Lt = URL.createObjectURL(ns);
                et(ts => ts ? {
                    ...ts,
                    profile_image_url: Lt
                } : null),
                a({
                    title: "Demo Mode",
                    description: "Image preview only. Please log in to save permanently.",
                    variant: "default"
                })
            }
        } catch (Lt) {
            console.error("Error uploading image:", Lt),
            a({
                title: "Error",
                description: "Failed to upload image",
                variant: "destructive"
            })
        } finally {
            tt(!1)
        }
    }
      , Et = async ns => {
        if (!["application/pdf", "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"].includes(ns.type)) {
            a({
                title: "Invalid File Type",
                description: "Please upload a PDF or Word document.",
                variant: "destructive"
            });
            return
        }
        if (ns.size > 10 * 1024 * 1024) {
            a({
                title: "File Too Large",
                description: "Please upload a file smaller than 10MB.",
                variant: "destructive"
            });
            return
        }
        try {
            if (tt(!0),
            s != null && s.id)
                try {
                    const {url: Lt, filename: ts} = await ProfileService.uploadResume(s.id, ns);
                    et(ms => ms ? {
                        ...ms,
                        resume_url: Lt,
                        resume_filename: ts,
                        resume_uploaded_at: new Date().toISOString()
                    } : null),
                    a({
                        title: "Success",
                        description: "Resume uploaded successfully"
                    })
                } catch (Lt) {
                    console.warn("Database not connected, using local preview:", Lt);
                    const ts = URL.createObjectURL(ns);
                    et(ms => ms ? {
                        ...ms,
                        resume_url: ts,
                        resume_filename: ns.name,
                        resume_uploaded_at: new Date().toISOString()
                    } : null),
                    a({
                        title: "Demo Mode",
                        description: "Resume preview only. Database not connected.",
                        variant: "default"
                    })
                }
            else {
                const Lt = URL.createObjectURL(ns);
                et(ts => ts ? {
                    ...ts,
                    resume_url: Lt,
                    resume_filename: ns.name,
                    resume_uploaded_at: new Date().toISOString()
                } : null),
                a({
                    title: "Demo Mode",
                    description: "Resume preview only. Please log in to save permanently.",
                    variant: "default"
                })
            }
        } catch (Lt) {
            console.error("Error uploading resume:", Lt),
            a({
                title: "Error",
                description: "Failed to upload resume",
                variant: "destructive"
            })
        } finally {
            tt(!1)
        }
    }
      , Pt = async () => {
        if (!(!(rt != null && rt.resume_url) || !(rt != null && rt.resume_filename)))
            try {
                if (s != null && s.id && !rt.resume_url.startsWith("blob:"))
                    await ProfileService.downloadResume(rt.resume_url, rt.resume_filename);
                else {
                    const ns = document.createElement("a");
                    ns.href = rt.resume_url,
                    ns.download = rt.resume_filename || "resume.pdf",
                    document.body.appendChild(ns),
                    ns.click(),
                    document.body.removeChild(ns)
                }
                a({
                    title: "Success",
                    description: "Resume download started"
                })
            } catch (ns) {
                console.error("Error downloading resume:", ns),
                a({
                    title: "Error",
                    description: "Failed to download resume",
                    variant: "destructive"
                })
            }
    }
      , St = ns => "<10MB"
      , Bt = ns => {
        var Lt;
        const xs = (Lt = ns == null ? void 0 : ns.split(".").pop()) == null ? void 0 : Lt.toUpperCase();
        return xs === "PDF" ? "PDF" : xs === "DOC" || xs === "DOCX" ? "DOC" : "FILE"
    }
      , os = async () => {
        if (!(!(rt != null && rt.resume_url) || !(s != null && s.id)))
            try {
                tt(!0),
                rt.resume_url.startsWith("blob:") || await ProfileService.deleteResume(s.id, rt.resume_url),
                et(ns => ns ? {
                    ...ns,
                    resume_url: null,
                    resume_filename: null,
                    resume_uploaded_at: null
                } : null),
                a({
                    title: "Success",
                    description: "Resume deleted successfully"
                })
            } catch (ns) {
                console.error("Error deleting resume:", ns),
                a({
                    title: "Error",
                    description: "Failed to delete resume",
                    variant: "destructive"
                })
            } finally {
                tt(!1)
            }
    }
    ;
    return g ? jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-white md:flex",
        children: [jsxRuntimeExports.jsx(NewSidebar, {}), jsxRuntimeExports.jsx("div", {
            className: "flex-1 flex flex-col w-full",
            children: jsxRuntimeExports.jsx("div", {
                className: "flex items-center justify-center h-[80vh]",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex flex-col items-center gap-4 bg-white p-8 rounded-lg shadow-sm",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "w-10 h-10 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-sm text-gray-500",
                        children: "Loading your profile..."
                    })]
                })
            })
        })]
    }) : rt ? jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-white md:flex",
        children: [jsxRuntimeExports.jsx(NewSidebar, {}), jsxRuntimeExports.jsxs("div", {
            className: "flex-1 flex flex-col w-full",
            children: [jsxRuntimeExports.jsxs("header", {
                className: "hidden md:flex h-16 shrink-0 items-center justify-between px-6 border-b bg-white sticky top-0 z-10 shadow-sm",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "flex items-center gap-4",
                    children: jsxRuntimeExports.jsx(Breadcrumb, {
                        children: jsxRuntimeExports.jsx(BreadcrumbList, {
                            children: jsxRuntimeExports.jsx(BreadcrumbItem, {
                                children: jsxRuntimeExports.jsx(BreadcrumbPage, {
                                    children: "Profile"
                                })
                            })
                        })
                    })
                }), jsxRuntimeExports.jsx("div", {
                    className: "flex items-center gap-4",
                    children: jsxRuntimeExports.jsxs(DropdownMenu, {
                        children: [jsxRuntimeExports.jsx(DropdownMenuTrigger, {
                            asChild: !0,
                            children: jsxRuntimeExports.jsxs(Button, {
                                variant: "ghost",
                                className: "rounded-full flex items-center gap-2 p-1 pl-2",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "text-sm font-medium hidden md:inline",
                                    children: dt
                                }), jsxRuntimeExports.jsxs(Avatar, {
                                    className: "h-8 w-8",
                                    children: [jsxRuntimeExports.jsx(AvatarImage, {
                                        src: (rt == null ? void 0 : rt.profile_image_url) || ((ys = s == null ? void 0 : s.user_metadata) == null ? void 0 : ys.avatar_url)
                                    }), jsxRuntimeExports.jsx(AvatarFallback, {
                                        children: Rt
                                    })]
                                })]
                            })
                        }), jsxRuntimeExports.jsxs(DropdownMenuContent, {
                            align: "end",
                            className: "w-56",
                            children: [jsxRuntimeExports.jsx(DropdownMenuLabel, {
                                children: "My Account"
                            }), jsxRuntimeExports.jsx(DropdownMenuSeparator, {}), jsxRuntimeExports.jsxs(DropdownMenuItem, {
                                children: [jsxRuntimeExports.jsx(User, {
                                    className: "mr-2 h-4 w-4"
                                }), jsxRuntimeExports.jsx("span", {
                                    children: "Profile"
                                })]
                            }), jsxRuntimeExports.jsxs(DropdownMenuItem, {
                                children: [jsxRuntimeExports.jsx(Settings, {
                                    className: "mr-2 h-4 w-4"
                                }), jsxRuntimeExports.jsx("span", {
                                    children: "Settings"
                                })]
                            }), jsxRuntimeExports.jsx(DropdownMenuSeparator, {}), jsxRuntimeExports.jsx(DropdownMenuItem, {
                                onClick: () => e == null ? void 0 : e(),
                                children: "Log out"
                            })]
                        })]
                    })
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex flex-1 flex-col max-w-7xl mx-auto px-4 md:px-6 py-4 md:py-6",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between mb-6",
                    children: [jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("h1", {
                            className: "text-3xl font-bold text-gray-900",
                            children: "My Profile"
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-gray-600 mt-1",
                            children: "Manage your personal information and preferences"
                        })]
                    }), jsxRuntimeExports.jsxs(Button, {
                        onClick: d ? Tt : () => h(!0),
                        disabled: _,
                        className: "min-w-[120px]",
                        children: [_ ? jsxRuntimeExports.jsx(LoaderCircle, {
                            className: "h-4 w-4 animate-spin mr-2"
                        }) : d ? jsxRuntimeExports.jsx(Save, {
                            className: "h-4 w-4 mr-2"
                        }) : jsxRuntimeExports.jsx(SquarePen, {
                            className: "h-4 w-4 mr-2"
                        }), _ ? "Saving..." : d ? "Save Changes" : "Edit Profile"]
                    })]
                }), jsxRuntimeExports.jsx(Card, {
                    className: "mb-6",
                    children: jsxRuntimeExports.jsxs(CardContent, {
                        className: "pt-6",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between mb-3",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(CircleCheck, {
                                    className: "h-5 w-5 text-green-600"
                                }), jsxRuntimeExports.jsx("h3", {
                                    className: "font-semibold text-gray-900",
                                    children: "Profile Completion"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "text-right",
                                children: [jsxRuntimeExports.jsxs("span", {
                                    className: "text-2xl font-bold text-blue-600",
                                    children: [Mt, "%"]
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-xs text-gray-500",
                                    children: "Complete"
                                })]
                            })]
                        }), jsxRuntimeExports.jsx(Progress, {
                            value: Mt,
                            className: "h-3 mb-2"
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-sm text-gray-600",
                            children: Mt < 50 ? "Complete your profile to improve your visibility to recruiters" : Mt < 80 ? "You're doing great! Add a few more details to maximize your profile" : "Excellent! Your profile is well-optimized for opportunities"
                        })]
                    })
                }), jsxRuntimeExports.jsxs("div", {
                    className: "grid grid-cols-1 lg:grid-cols-3 gap-6",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "lg:col-span-2 space-y-6",
                        children: [jsxRuntimeExports.jsxs(Card, {
                            children: [jsxRuntimeExports.jsxs(CardHeader, {
                                children: [jsxRuntimeExports.jsx(CardTitle, {
                                    children: "Basic Information"
                                }), jsxRuntimeExports.jsx(CardDescription, {
                                    children: "Your personal details and contact information"
                                })]
                            }), jsxRuntimeExports.jsxs(CardContent, {
                                className: "space-y-6",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center space-x-6",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "relative group",
                                        children: [jsxRuntimeExports.jsxs(Avatar, {
                                            className: "w-20 h-20",
                                            children: [jsxRuntimeExports.jsx(AvatarImage, {
                                                src: (rt == null ? void 0 : rt.profile_image_url) || void 0
                                            }), jsxRuntimeExports.jsx(AvatarFallback, {
                                                className: "text-lg font-semibold",
                                                children: ((vs = s == null ? void 0 : s.email) == null ? void 0 : vs.charAt(0).toUpperCase()) || ((Ss = rt == null ? void 0 : rt.full_name) == null ? void 0 : Ss.charAt(0).toUpperCase()) || "U"
                                            })]
                                        }), d && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                            children: [jsxRuntimeExports.jsx(Label, {
                                                htmlFor: "profile-picture",
                                                className: "absolute inset-0 cursor-pointer",
                                                children: jsxRuntimeExports.jsx("div", {
                                                    className: "absolute inset-0 bg-black/50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center",
                                                    children: jsxRuntimeExports.jsx(Camera, {
                                                        className: "w-5 h-5 text-white"
                                                    })
                                                })
                                            }), jsxRuntimeExports.jsx(Input, {
                                                id: "profile-picture",
                                                type: "file",
                                                accept: "image/*",
                                                onChange: ns => jt(ns, "profile_picture"),
                                                className: "hidden",
                                                disabled: _e
                                            })]
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex-1",
                                        children: [jsxRuntimeExports.jsx("h3", {
                                            className: "text-xl font-semibold",
                                            children: rt.full_name || "Your Name"
                                        }), rt.college && jsxRuntimeExports.jsxs("p", {
                                            className: "text-sm text-gray-600 flex items-center mt-1",
                                            children: [jsxRuntimeExports.jsx(GraduationCap, {
                                                className: "w-3 h-3 mr-1"
                                            }), rt.college]
                                        }), jsxRuntimeExports.jsxs("p", {
                                            className: "text-sm text-gray-500 flex items-center mt-1",
                                            children: [jsxRuntimeExports.jsx(Mail, {
                                                className: "w-3 h-3 mr-1"
                                            }), s == null ? void 0 : s.email]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-3 mt-2",
                                            children: [rt.linkedin && jsxRuntimeExports.jsx("a", {
                                                href: rt.linkedin.startsWith("http") ? rt.linkedin : `https://linkedin.com/in/${rt.linkedin.replace("linkedin.com/in/", "")}`,
                                                target: "_blank",
                                                rel: "noopener noreferrer",
                                                className: "text-gray-500 hover:text-blue-700 transition-colors",
                                                title: "LinkedIn",
                                                children: jsxRuntimeExports.jsx(Linkedin, {
                                                    className: "w-4 h-4"
                                                })
                                            }), rt.github && jsxRuntimeExports.jsx("a", {
                                                href: rt.github.startsWith("http") ? rt.github : `https://github.com/${rt.github.replace("github.com/", "")}`,
                                                target: "_blank",
                                                rel: "noopener noreferrer",
                                                className: "text-gray-500 hover:text-gray-900 transition-colors",
                                                title: "GitHub",
                                                children: jsxRuntimeExports.jsx(Github, {
                                                    className: "w-4 h-4"
                                                })
                                            }), rt.website && jsxRuntimeExports.jsx("a", {
                                                href: rt.website.startsWith("http") ? rt.website : `https://${rt.website}`,
                                                target: "_blank",
                                                rel: "noopener noreferrer",
                                                className: "text-gray-500 hover:text-blue-600 transition-colors",
                                                title: "Website",
                                                children: jsxRuntimeExports.jsx(Globe, {
                                                    className: "w-4 h-4"
                                                })
                                            })]
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx(Label, {
                                            htmlFor: "full_name",
                                            children: "Full Name"
                                        }), d ? jsxRuntimeExports.jsx(Input, {
                                            id: "full_name",
                                            value: rt.full_name || "",
                                            onChange: ns => kt("full_name", ns.target.value),
                                            placeholder: "Enter your full name"
                                        }) : jsxRuntimeExports.jsx("p", {
                                            className: "mt-1 text-sm text-gray-900",
                                            children: rt.full_name || "Not set"
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx(Label, {
                                            htmlFor: "location",
                                            children: "Location"
                                        }), d ? jsxRuntimeExports.jsx(Input, {
                                            id: "location",
                                            value: rt.location || "",
                                            onChange: ns => kt("location", ns.target.value),
                                            placeholder: "e.g. San Francisco, CA"
                                        }) : jsxRuntimeExports.jsx("p", {
                                            className: "mt-1 text-sm text-gray-900 flex items-center",
                                            children: rt.location ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx(MapPin, {
                                                    className: "w-4 h-4 mr-1 text-gray-500"
                                                }), rt.location]
                                            }) : "Not set"
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx(Label, {
                                            htmlFor: "phone",
                                            children: "Phone"
                                        }), d ? jsxRuntimeExports.jsx(Input, {
                                            id: "phone",
                                            value: rt.phone || "",
                                            onChange: ns => kt("phone", ns.target.value),
                                            placeholder: "Enter your phone number",
                                            type: "tel"
                                        }) : jsxRuntimeExports.jsx("p", {
                                            className: "mt-1 text-sm text-gray-900 flex items-center",
                                            children: rt.phone ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx(Phone, {
                                                    className: "w-4 h-4 mr-1 text-gray-500"
                                                }), jsxRuntimeExports.jsx("a", {
                                                    href: `tel:${rt.phone}`,
                                                    className: "text-blue-600 hover:text-blue-800 hover:underline",
                                                    children: rt.phone
                                                })]
                                            }) : "Not set"
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx(Label, {
                                            htmlFor: "experience_years",
                                            children: "Years of Experience"
                                        }), d ? jsxRuntimeExports.jsx(Input, {
                                            id: "experience_years",
                                            value: rt.experience_years || "",
                                            onChange: ns => kt("experience_years", parseInt(ns.target.value) || 0),
                                            placeholder: "e.g. 5",
                                            type: "number",
                                            min: "0",
                                            max: "50"
                                        }) : jsxRuntimeExports.jsx("p", {
                                            className: "mt-1 text-sm text-gray-900 flex items-center",
                                            children: rt.experience_years ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx(Calendar, {
                                                    className: "w-4 h-4 mr-1 text-gray-500"
                                                }), rt.experience_years, " ", rt.experience_years === 1 ? "year" : "years"]
                                            }) : "Not set"
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "pt-4 border-t",
                                    children: [jsxRuntimeExports.jsxs("h4", {
                                        className: "text-sm font-medium text-gray-900 mb-3 flex items-center",
                                        children: [jsxRuntimeExports.jsx(GraduationCap, {
                                            className: "w-4 h-4 mr-2 text-gray-500"
                                        }), "Education"]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx(Label, {
                                            htmlFor: "college",
                                            children: "College/University"
                                        }), d ? jsxRuntimeExports.jsx(Input, {
                                            id: "college",
                                            value: rt.college || "",
                                            onChange: ns => kt("college", ns.target.value),
                                            placeholder: "e.g. Harvard University"
                                        }) : jsxRuntimeExports.jsx("p", {
                                            className: "mt-1 text-sm text-gray-900",
                                            children: rt.college || "Not set"
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "pt-4 border-t",
                                    children: [jsxRuntimeExports.jsx("h4", {
                                        className: "text-sm font-medium text-gray-900 mb-3",
                                        children: "Links & Social"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "grid grid-cols-1 md:grid-cols-3 gap-4",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx(Label, {
                                                htmlFor: "linkedin",
                                                children: "LinkedIn"
                                            }), d ? jsxRuntimeExports.jsx(Input, {
                                                id: "linkedin",
                                                value: rt.linkedin || "",
                                                onChange: ns => kt("linkedin", ns.target.value),
                                                placeholder: "linkedin.com/in/username or username"
                                            }) : jsxRuntimeExports.jsx("p", {
                                                className: "mt-1 text-sm text-gray-900",
                                                children: rt.linkedin ? jsxRuntimeExports.jsxs("a", {
                                                    href: rt.linkedin.startsWith("http") ? rt.linkedin : `https://linkedin.com/in/${rt.linkedin.replace("linkedin.com/in/", "")}`,
                                                    target: "_blank",
                                                    rel: "noopener noreferrer",
                                                    className: "text-blue-600 hover:text-blue-800 hover:underline flex items-center",
                                                    children: [jsxRuntimeExports.jsx(Linkedin, {
                                                        className: "w-4 h-4 mr-1"
                                                    }), "LinkedIn", jsxRuntimeExports.jsx(ExternalLink, {
                                                        className: "w-3 h-3 ml-1"
                                                    })]
                                                }) : "Not set"
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx(Label, {
                                                htmlFor: "github",
                                                children: "GitHub"
                                            }), d ? jsxRuntimeExports.jsx(Input, {
                                                id: "github",
                                                value: rt.github || "",
                                                onChange: ns => kt("github", ns.target.value),
                                                placeholder: "github.com/username or username"
                                            }) : jsxRuntimeExports.jsx("p", {
                                                className: "mt-1 text-sm text-gray-900",
                                                children: rt.github ? jsxRuntimeExports.jsxs("a", {
                                                    href: rt.github.startsWith("http") ? rt.github : `https://github.com/${rt.github.replace("github.com/", "")}`,
                                                    target: "_blank",
                                                    rel: "noopener noreferrer",
                                                    className: "text-blue-600 hover:text-blue-800 hover:underline flex items-center",
                                                    children: [jsxRuntimeExports.jsx(Github, {
                                                        className: "w-4 h-4 mr-1"
                                                    }), "GitHub", jsxRuntimeExports.jsx(ExternalLink, {
                                                        className: "w-3 h-3 ml-1"
                                                    })]
                                                }) : "Not set"
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx(Label, {
                                                htmlFor: "website",
                                                children: "Website"
                                            }), d ? jsxRuntimeExports.jsx(Input, {
                                                id: "website",
                                                value: rt.website || "",
                                                onChange: ns => kt("website", ns.target.value),
                                                placeholder: "https://yourwebsite.com",
                                                type: "url"
                                            }) : jsxRuntimeExports.jsx("p", {
                                                className: "mt-1 text-sm text-gray-900",
                                                children: rt.website ? jsxRuntimeExports.jsxs("a", {
                                                    href: rt.website.startsWith("http") ? rt.website : `https://${rt.website}`,
                                                    target: "_blank",
                                                    rel: "noopener noreferrer",
                                                    className: "text-blue-600 hover:text-blue-800 hover:underline flex items-center",
                                                    children: [jsxRuntimeExports.jsx(Globe, {
                                                        className: "w-4 h-4 mr-1"
                                                    }), "Website", jsxRuntimeExports.jsx(ExternalLink, {
                                                        className: "w-3 h-3 ml-1"
                                                    })]
                                                }) : "Not set"
                                            })]
                                        })]
                                    })]
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs(Card, {
                            children: [jsxRuntimeExports.jsxs(CardHeader, {
                                children: [jsxRuntimeExports.jsx(CardTitle, {
                                    children: "About"
                                }), jsxRuntimeExports.jsx(CardDescription, {
                                    children: "Tell us about yourself and your experience"
                                })]
                            }), jsxRuntimeExports.jsx(CardContent, {
                                children: d ? jsxRuntimeExports.jsx(Textarea, {
                                    value: rt.bio || "",
                                    onChange: ns => kt("bio", ns.target.value),
                                    placeholder: "Tell us about yourself, your experience, and what you're passionate about...",
                                    rows: 4
                                }) : jsxRuntimeExports.jsx("p", {
                                    className: "text-gray-700 leading-relaxed",
                                    children: rt.bio || "Share your story, experience, and what makes you unique..."
                                })
                            })]
                        }), jsxRuntimeExports.jsxs(Card, {
                            children: [jsxRuntimeExports.jsxs(CardHeader, {
                                children: [jsxRuntimeExports.jsx(CardTitle, {
                                    children: "Skills"
                                }), jsxRuntimeExports.jsx(CardDescription, {
                                    children: "Add your technical and professional skills"
                                })]
                            }), jsxRuntimeExports.jsxs(CardContent, {
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "flex flex-wrap gap-2 mb-4",
                                    children: (rt.skills || []).map( (ns, xs) => jsxRuntimeExports.jsxs(Badge, {
                                        variant: "secondary",
                                        className: "px-3 py-1",
                                        children: [ns, d && jsxRuntimeExports.jsx("button", {
                                            onClick: () => Nt(ns),
                                            className: "ml-2 hover:text-red-600 transition-colors",
                                            children: jsxRuntimeExports.jsx(X, {
                                                className: "w-3 h-3"
                                            })
                                        })]
                                    }, ns))
                                }), d && jsxRuntimeExports.jsxs("div", {
                                    className: "flex space-x-2",
                                    children: [jsxRuntimeExports.jsx(Input, {
                                        value: nt,
                                        onChange: ns => lt(ns.target.value),
                                        placeholder: "Add a skill...",
                                        onKeyPress: ns => ns.key === "Enter" && Yt()
                                    }), jsxRuntimeExports.jsx(Button, {
                                        onClick: Yt,
                                        size: "sm",
                                        children: jsxRuntimeExports.jsx(Plus, {
                                            className: "w-4 h-4"
                                        })
                                    })]
                                })]
                            })]
                        }), jsxRuntimeExports.jsx(ExperienceManager, {
                            experiences: it,
                            onUpdate: vt,
                            isEditing: d
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-6",
                        children: [jsxRuntimeExports.jsxs(Card, {
                            children: [jsxRuntimeExports.jsxs(CardHeader, {
                                children: [jsxRuntimeExports.jsxs(CardTitle, {
                                    className: "flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(FileText, {
                                        className: "w-5 h-5 text-blue-600"
                                    }), "Resume"]
                                }), jsxRuntimeExports.jsx(CardDescription, {
                                    children: "Upload and manage your resume"
                                })]
                            }), jsxRuntimeExports.jsxs(CardContent, {
                                className: "space-y-5",
                                children: [rt != null && rt.resume_url ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "bg-white border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow",
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-3",
                                            children: [jsxRuntimeExports.jsx("div", {
                                                className: "w-10 h-10 bg-blue-50 rounded-lg flex items-center justify-center",
                                                children: jsxRuntimeExports.jsx(FileText, {
                                                    className: "w-5 h-5 text-blue-600"
                                                })
                                            }), jsxRuntimeExports.jsxs("div", {
                                                className: "flex-1 min-w-0",
                                                children: [jsxRuntimeExports.jsx("p", {
                                                    className: "font-medium text-gray-900 truncate",
                                                    children: rt.resume_filename
                                                }), jsxRuntimeExports.jsxs("div", {
                                                    className: "flex items-center gap-3 mt-1.5",
                                                    children: [jsxRuntimeExports.jsx("span", {
                                                        className: "text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full",
                                                        children: Bt(rt.resume_filename || "")
                                                    }), jsxRuntimeExports.jsx("span", {
                                                        className: "text-xs text-gray-500",
                                                        children: St(rt.resume_url)
                                                    }), rt.resume_uploaded_at && jsxRuntimeExports.jsx("span", {
                                                        className: "text-xs text-gray-500",
                                                        children: new Date(rt.resume_uploaded_at).toLocaleDateString()
                                                    })]
                                                })]
                                            }), jsxRuntimeExports.jsxs("div", {
                                                className: "flex items-center gap-1.5",
                                                children: [jsxRuntimeExports.jsx("div", {
                                                    className: "w-2 h-2 bg-green-500 rounded-full"
                                                }), jsxRuntimeExports.jsx("span", {
                                                    className: "text-xs text-green-600 font-medium",
                                                    children: "Active"
                                                })]
                                            })]
                                        })
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex gap-3 pt-1",
                                        children: [jsxRuntimeExports.jsxs(Dialog, {
                                            open: at,
                                            onOpenChange: ns => {
                                                ht(ns),
                                                ns && gt(!0)
                                            }
                                            ,
                                            children: [jsxRuntimeExports.jsx(DialogTrigger, {
                                                asChild: !0,
                                                children: jsxRuntimeExports.jsxs(Button, {
                                                    variant: "outline",
                                                    className: "flex-1",
                                                    children: [jsxRuntimeExports.jsx(Eye, {
                                                        className: "w-4 h-4 mr-2"
                                                    }), "Preview"]
                                                })
                                            }), jsxRuntimeExports.jsx(DialogContent, {
                                                className: "max-w-5xl w-[90vw] h-[90vh] p-0",
                                                children: jsxRuntimeExports.jsxs("div", {
                                                    className: "flex flex-col h-full",
                                                    children: [jsxRuntimeExports.jsxs("div", {
                                                        className: "flex items-center justify-between p-4 border-b bg-gray-50",
                                                        children: [jsxRuntimeExports.jsxs("div", {
                                                            className: "flex items-center gap-3",
                                                            children: [jsxRuntimeExports.jsx("div", {
                                                                className: "w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center",
                                                                children: jsxRuntimeExports.jsx(FileText, {
                                                                    className: "w-4 h-4 text-blue-600"
                                                                })
                                                            }), jsxRuntimeExports.jsxs("div", {
                                                                children: [jsxRuntimeExports.jsx(DialogTitle, {
                                                                    className: "text-lg font-semibold",
                                                                    children: rt.resume_filename
                                                                }), jsxRuntimeExports.jsxs(DialogDescription, {
                                                                    className: "text-sm",
                                                                    children: ["Resume Preview • ", Bt(rt.resume_filename || ""), " • ", St(rt.resume_url)]
                                                                })]
                                                            })]
                                                        }), jsxRuntimeExports.jsx("div", {
                                                            className: "flex items-center gap-2",
                                                            children: jsxRuntimeExports.jsxs(Button, {
                                                                variant: "outline",
                                                                size: "sm",
                                                                onClick: Pt,
                                                                children: [jsxRuntimeExports.jsx(Download, {
                                                                    className: "w-4 h-4 mr-2"
                                                                }), "Download"]
                                                            })
                                                        })]
                                                    }), jsxRuntimeExports.jsx("div", {
                                                        className: "flex-1 p-4 relative",
                                                        children: rt.resume_url.endsWith(".pdf") || (_s = rt.resume_filename) != null && _s.endsWith(".pdf") ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                            children: [pt && jsxRuntimeExports.jsx("div", {
                                                                className: "absolute inset-4 flex items-center justify-center bg-white rounded-lg border border-gray-200",
                                                                children: jsxRuntimeExports.jsxs("div", {
                                                                    className: "text-center",
                                                                    children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                                                        className: "w-8 h-8 animate-spin text-blue-600 mx-auto mb-3"
                                                                    }), jsxRuntimeExports.jsx("p", {
                                                                        className: "text-sm text-gray-600",
                                                                        children: "Loading PDF preview..."
                                                                    })]
                                                                })
                                                            }), jsxRuntimeExports.jsx("iframe", {
                                                                src: `${rt.resume_url}#toolbar=1&navpanes=0&scrollbar=1&view=FitH`,
                                                                className: "w-full h-full border border-gray-200 rounded-lg bg-white",
                                                                title: "Resume Preview",
                                                                onLoad: () => gt(!1),
                                                                onError: () => gt(!1)
                                                            })]
                                                        }) : jsxRuntimeExports.jsx("div", {
                                                            className: "flex items-center justify-center h-full bg-gray-50 rounded-lg border-2 border-dashed border-gray-200",
                                                            children: jsxRuntimeExports.jsxs("div", {
                                                                className: "text-center p-8",
                                                                children: [jsxRuntimeExports.jsx("div", {
                                                                    className: "w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4",
                                                                    children: jsxRuntimeExports.jsx(FileText, {
                                                                        className: "w-8 h-8 text-gray-400"
                                                                    })
                                                                }), jsxRuntimeExports.jsx("h4", {
                                                                    className: "font-medium text-gray-900 mb-2",
                                                                    children: "Preview not available"
                                                                }), jsxRuntimeExports.jsxs("p", {
                                                                    className: "text-sm text-gray-500 mb-4",
                                                                    children: [Bt(rt.resume_filename || ""), " files cannot be previewed in the browser"]
                                                                }), jsxRuntimeExports.jsxs(Button, {
                                                                    onClick: Pt,
                                                                    size: "sm",
                                                                    children: [jsxRuntimeExports.jsx(Download, {
                                                                        className: "w-4 h-4 mr-2"
                                                                    }), "Download to View"]
                                                                })]
                                                            })
                                                        })
                                                    })]
                                                })
                                            })]
                                        }), jsxRuntimeExports.jsxs(Button, {
                                            variant: "outline",
                                            onClick: Pt,
                                            children: [jsxRuntimeExports.jsx(Download, {
                                                className: "w-4 h-4 mr-2"
                                            }), "Download"]
                                        }), jsxRuntimeExports.jsx(Button, {
                                            variant: "outline",
                                            onClick: os,
                                            className: "text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200",
                                            children: jsxRuntimeExports.jsx(Trash2, {
                                                className: "w-4 h-4"
                                            })
                                        })]
                                    })]
                                }) : jsxRuntimeExports.jsxs("div", {
                                    className: "text-center py-6",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "w-16 h-16 bg-blue-50 rounded-full flex items-center justify-center mx-auto mb-5 border-2 border-dashed border-blue-200",
                                        children: jsxRuntimeExports.jsx(Upload, {
                                            className: "w-6 h-6 text-blue-500"
                                        })
                                    }), jsxRuntimeExports.jsx("h4", {
                                        className: "font-medium text-gray-900 mb-2",
                                        children: "No resume uploaded"
                                    }), jsxRuntimeExports.jsx("p", {
                                        className: "text-gray-500 text-sm mb-5",
                                        children: "Upload your resume to help recruiters find you"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center justify-center gap-4 text-xs text-gray-400",
                                        children: [jsxRuntimeExports.jsx("span", {
                                            children: "PDF, DOC, DOCX"
                                        }), jsxRuntimeExports.jsx("span", {
                                            children: "•"
                                        }), jsxRuntimeExports.jsx("span", {
                                            children: "Up to 10MB"
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "pt-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        htmlFor: "resume",
                                        className: "cursor-pointer",
                                        children: jsxRuntimeExports.jsx("div", {
                                            className: "flex items-center justify-center gap-2 bg-blue-600 text-white px-4 py-2.5 rounded-lg hover:bg-blue-700 transition-colors font-medium w-full",
                                            children: _e ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                                    className: "w-4 h-4 animate-spin"
                                                }), "Uploading..."]
                                            }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx(Upload, {
                                                    className: "w-4 h-4"
                                                }), rt != null && rt.resume_url ? "Replace Resume" : "Upload Resume"]
                                            })
                                        })
                                    }), jsxRuntimeExports.jsx(Input, {
                                        id: "resume",
                                        type: "file",
                                        accept: ".pdf,.doc,.docx",
                                        onChange: ns => jt(ns, "resume"),
                                        className: "hidden",
                                        disabled: _e
                                    })]
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs(Card, {
                            children: [jsxRuntimeExports.jsxs(CardHeader, {
                                children: [jsxRuntimeExports.jsx(CardTitle, {
                                    children: "Account Settings"
                                }), jsxRuntimeExports.jsx(CardDescription, {
                                    children: "Manage your account preferences"
                                })]
                            }), jsxRuntimeExports.jsxs(CardContent, {
                                className: "space-y-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx("p", {
                                            className: "font-medium",
                                            children: "Available for Work"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-sm text-gray-600",
                                            children: "Show recruiters you're open to opportunities"
                                        })]
                                    }), jsxRuntimeExports.jsx(Switch, {
                                        checked: rt.available_for_work || !1,
                                        onCheckedChange: ns => kt("available_for_work", ns),
                                        disabled: !d
                                    })]
                                }), jsxRuntimeExports.jsx(Separator, {}), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex justify-between text-sm",
                                        children: [jsxRuntimeExports.jsx("span", {
                                            className: "text-gray-600",
                                            children: "Email"
                                        }), jsxRuntimeExports.jsx("span", {
                                            children: (s == null ? void 0 : s.email) || "Not available"
                                        })]
                                    }), rt.experience_years && jsxRuntimeExports.jsxs("div", {
                                        className: "flex justify-between text-sm",
                                        children: [jsxRuntimeExports.jsx("span", {
                                            className: "text-gray-600",
                                            children: "Experience"
                                        }), jsxRuntimeExports.jsxs("span", {
                                            children: [rt.experience_years, " ", rt.experience_years === 1 ? "year" : "years"]
                                        })]
                                    }), (s == null ? void 0 : s.created_at) && jsxRuntimeExports.jsxs("div", {
                                        className: "flex justify-between text-sm",
                                        children: [jsxRuntimeExports.jsx("span", {
                                            className: "text-gray-600",
                                            children: "Member Since"
                                        }), jsxRuntimeExports.jsx("span", {
                                            children: new Date(s.created_at).toLocaleDateString()
                                        })]
                                    })]
                                })]
                            })]
                        })]
                    })]
                })]
            }), _e && jsxRuntimeExports.jsx("div", {
                className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
                children: jsxRuntimeExports.jsx(Card, {
                    className: "p-6",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "text-center space-y-2",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"
                        }), jsxRuntimeExports.jsx("p", {
                            children: "Uploading file..."
                        })]
                    })
                })
            }), jsxRuntimeExports.jsx(ProfileCompletionPopup, {
                isOpen: wt,
                onClose: zt,
                completionPercentage: Mt,
                missingFields: ss.missingFields,
                isNewUser: i || c.get("newUser") === "true"
            })]
        })]
    }) : jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-white md:flex",
        children: [jsxRuntimeExports.jsx(NewSidebar, {}), jsxRuntimeExports.jsx("div", {
            className: "flex-1 flex flex-col w-full",
            children: jsxRuntimeExports.jsx("div", {
                className: "flex items-center justify-center h-[80vh]",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "text-center bg-white p-8 rounded-lg shadow-sm",
                    children: [jsxRuntimeExports.jsx(CircleAlert, {
                        className: "h-12 w-12 text-red-500 mx-auto mb-4"
                    }), jsxRuntimeExports.jsx("h2", {
                        className: "text-xl font-semibold mb-2",
                        children: "Profile Not Found"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-600 mb-4",
                        children: "Unable to load your profile data."
                    }), jsxRuntimeExports.jsx(Button, {
                        onClick: At,
                        children: "Try Again"
                    })]
                })
            })
        })]
    })
}
  , NotFound = () => {
    const s = useLocation();
    return reactExports.useEffect( () => {
        console.error("404 Error: User attempted to access non-existent route:", s.pathname)
    }
    , [s.pathname]),
    jsxRuntimeExports.jsx("div", {
        className: "min-h-screen flex items-center justify-center bg-gray-100",
        children: jsxRuntimeExports.jsxs("div", {
            className: "text-center",
            children: [jsxRuntimeExports.jsx("h1", {
                className: "text-4xl font-bold mb-4",
                children: "404"
            }), jsxRuntimeExports.jsx("p", {
                className: "text-xl text-gray-600 mb-4",
                children: "Oops! Page not found"
            }), jsxRuntimeExports.jsx("a", {
                href: "/",
                className: "text-blue-500 hover:text-blue-700 underline",
                children: "Return to Home"
            })]
        })
    })
}
  , SignIn = () => jsxRuntimeExports.jsx(Navigate, {
    to: "/",
    replace: !0
})
  , SignUp = () => {
    const [s,e] = reactExports.useState(null)
      , [i,o] = reactExports.useState(!1)
      , [a,c] = reactExports.useState(!1)
      , {signInWithGoogle: d, signInWithGithub: h} = useAuth();
    useNavigate(),
    useToast();
    const g = useIsMobile();
    reactExports.useEffect( () => {
        c(!0)
    }
    , []);
    const b = async () => {
        o(!0),
        e(null);
        try {
            await d()
        } catch ($) {
            e("Failed to sign up with Google. Please try again."),
            console.error($),
            o(!1)
        }
    }
      , _ = async () => {
        o(!0),
        e(null);
        try {
            await h()
        } catch ($) {
            e("Failed to sign up with GitHub. Please try again."),
            console.error($),
            o(!1)
        }
    }
    ;
    return g ? jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-gradient-to-br from-gray-50 via-gray-100 to-[#fcdfe6]",
        children: [jsxRuntimeExports.jsx("div", {
            className: "pt-8 pb-4 px-6",
            children: jsxRuntimeExports.jsxs("div", {
                className: "flex items-center justify-center gap-3",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "w-10 h-10 bg-gradient-to-r from-[#f78f97] to-[#dc425d] rounded-2xl flex items-center justify-center",
                    children: jsxRuntimeExports.jsx("svg", {
                        className: "w-6 h-6 text-white",
                        fill: "currentColor",
                        viewBox: "0 0 24 24",
                        children: jsxRuntimeExports.jsx("path", {
                            d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                        })
                    })
                }), jsxRuntimeExports.jsx("h1", {
                    className: "text-2xl font-bold text-gray-900",
                    children: "Hirebuddy"
                })]
            })
        }), jsxRuntimeExports.jsxs(motion.div, {
            className: "px-4 pb-8",
            initial: {
                opacity: 0,
                y: 20
            },
            animate: {
                opacity: 1,
                y: 0
            },
            transition: {
                duration: .5
            },
            children: [jsxRuntimeExports.jsxs("div", {
                className: "bg-white rounded-3xl p-6 shadow-xl border border-white/20",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "text-center mb-6",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-bold text-gray-900 mb-2",
                        children: "Create Your Account"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-600 text-sm",
                        children: "Join Hirebuddy and accelerate your career"
                    })]
                }), s && jsxRuntimeExports.jsx(Alert, {
                    variant: "destructive",
                    className: "mb-4 bg-red-50/80 backdrop-blur-sm border-red-200/50",
                    children: jsxRuntimeExports.jsx(AlertDescription, {
                        className: "text-red-700 text-sm",
                        children: s
                    })
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-3",
                    children: [jsxRuntimeExports.jsx(Button, {
                        onClick: b,
                        disabled: i,
                        className: "w-full h-12 bg-white hover:bg-white text-gray-700 border border-gray-200 transition-all duration-300 hover:shadow-md rounded-xl group",
                        variant: "outline",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-center gap-3",
                            children: [jsxRuntimeExports.jsxs("svg", {
                                className: "w-5 h-5",
                                viewBox: "0 0 24 24",
                                children: [jsxRuntimeExports.jsx("path", {
                                    d: "M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z",
                                    fill: "#4285F4"
                                }), jsxRuntimeExports.jsx("path", {
                                    d: "M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z",
                                    fill: "#34A853"
                                }), jsxRuntimeExports.jsx("path", {
                                    d: "M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z",
                                    fill: "#FBBC05"
                                }), jsxRuntimeExports.jsx("path", {
                                    d: "M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z",
                                    fill: "#EA4335"
                                })]
                            }), jsxRuntimeExports.jsx("span", {
                                className: "font-medium",
                                children: "Sign up with Google"
                            })]
                        })
                    }), jsxRuntimeExports.jsx(Button, {
                        onClick: _,
                        disabled: i,
                        className: "w-full h-12 bg-white hover:bg-white text-gray-700 border border-gray-200 transition-all duration-300 hover:shadow-md rounded-xl group",
                        variant: "outline",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-center gap-3",
                            children: [jsxRuntimeExports.jsx("svg", {
                                className: "w-5 h-5",
                                viewBox: "0 0 24 24",
                                fill: "currentColor",
                                children: jsxRuntimeExports.jsx("path", {
                                    d: "M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
                                })
                            }), jsxRuntimeExports.jsx("span", {
                                className: "font-medium",
                                children: "Sign up with GitHub"
                            })]
                        })
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "mt-6 p-3 bg-gradient-to-r from-[#fcdfe6] to-[#fcdfe6]/50 rounded-xl border border-[#feb7b7]/30",
                    children: [jsxRuntimeExports.jsx("h3", {
                        className: "font-semibold text-gray-900 mb-1.5 text-center text-xs",
                        children: "What you'll get:"
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "grid grid-cols-2 gap-1.5 text-[10px]",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-1",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "w-1 h-1 bg-[#f78f97] rounded-full"
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-gray-700",
                                children: "Smart job alerts"
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-1",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "w-1 h-1 bg-[#f78f97] rounded-full"
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-gray-700",
                                children: "Resume builder"
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-1",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "w-1 h-1 bg-[#f78f97] rounded-full"
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-gray-700",
                                children: "Interview prep"
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-1",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "w-1 h-1 bg-[#f78f97] rounded-full"
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-gray-700",
                                children: "Career insights"
                            })]
                        })]
                    })]
                }), jsxRuntimeExports.jsx("div", {
                    className: "mt-6 text-center text-sm",
                    children: jsxRuntimeExports.jsxs("p", {
                        className: "text-gray-600",
                        children: ["Already have an account?", " ", jsxRuntimeExports.jsx(Link, {
                            to: "/?signin=true",
                            className: "text-[#dc425d] font-medium hover:underline",
                            children: "Sign in"
                        })]
                    })
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "mt-6 bg-white/80 rounded-2xl p-3 shadow-lg border border-white/20",
                children: [jsxRuntimeExports.jsx("h3", {
                    className: "font-semibold text-gray-900 mb-2 text-xs",
                    children: "Why join Hirebuddy?"
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-1.5",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-start gap-1.5",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "w-3.5 h-3.5 rounded-full bg-[#fcdfe6] flex items-center justify-center mt-0.5",
                            children: jsxRuntimeExports.jsx("div", {
                                className: "w-1.5 h-1.5 bg-[#f78f97] rounded-full"
                            })
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-[10px] text-gray-700",
                            children: "AI-powered job matching that finds opportunities tailored to your skills"
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-start gap-1.5",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "w-3.5 h-3.5 rounded-full bg-[#fcdfe6] flex items-center justify-center mt-0.5",
                            children: jsxRuntimeExports.jsx("div", {
                                className: "w-1.5 h-1.5 bg-[#f78f97] rounded-full"
                            })
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-[10px] text-gray-700",
                            children: "Automated application tracking to never miss a follow-up"
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-start gap-1.5",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "w-3.5 h-3.5 rounded-full bg-[#fcdfe6] flex items-center justify-center mt-0.5",
                            children: jsxRuntimeExports.jsx("div", {
                                className: "w-1.5 h-1.5 bg-[#f78f97] rounded-full"
                            })
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-[10px] text-gray-700",
                            children: "Interview preparation with AI coaching and feedback"
                        })]
                    })]
                })]
            })]
        })]
    }) : jsxRuntimeExports.jsx("div", {
        className: "min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 via-gray-100 to-[#fcdfe6] p-4 sm:p-6 md:p-8",
        children: jsxRuntimeExports.jsxs(motion.div, {
            className: "w-full max-w-6xl bg-white rounded-3xl shadow-2xl overflow-hidden flex flex-col lg:flex-row",
            initial: {
                opacity: 0,
                scale: .95
            },
            animate: {
                opacity: 1,
                scale: 1
            },
            transition: {
                duration: .5
            },
            children: [jsxRuntimeExports.jsxs("div", {
                className: "hidden lg:flex lg:w-1/2 relative overflow-hidden",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "absolute inset-0 bg-gradient-to-br from-white via-white to-[#f78f97] animate-pulse",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "absolute inset-0 bg-gradient-to-r from-white via-[#fcdfe6] to-[#feb7b7] animate-pulse"
                    }), jsxRuntimeExports.jsx("div", {
                        className: "absolute inset-0 bg-gradient-to-t from-[#feb7b7]/30 via-white to-white animate-pulse delay-700"
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "absolute top-0 left-0 w-full h-full",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "absolute top-20 left-20 w-72 h-72 bg-[#feb7b7]/40 rounded-full blur-3xl animate-pulse"
                        }), jsxRuntimeExports.jsx("div", {
                            className: "absolute bottom-20 right-20 w-96 h-96 bg-[#feb7b7]/30 rounded-full blur-3xl animate-pulse delay-1000"
                        }), jsxRuntimeExports.jsx("div", {
                            className: "absolute top-1/2 left-1/3 w-64 h-64 bg-[#fcdfe6]/50 rounded-full blur-3xl animate-pulse delay-500"
                        })]
                    })]
                }), jsxRuntimeExports.jsx("div", {
                    className: "relative z-10 flex flex-col justify-center px-16 text-black",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "mb-8",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "flex items-center gap-3 mb-8",
                            children: jsxRuntimeExports.jsx("h1", {
                                className: "text-2xl font-black text-black",
                                children: "Hirebuddy"
                            })
                        }), jsxRuntimeExports.jsxs("h2", {
                            className: "text-4xl font-black leading-tight mb-3 text-black",
                            children: ["Land Your Dream Job", jsxRuntimeExports.jsx("br", {}), jsxRuntimeExports.jsx("span", {
                                className: "text-[#dc425d] font-black text-5xl",
                                children: "Effortlessly"
                            })]
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-xl text-black mb-8 leading-relaxed font-medium",
                            children: "Hirebuddy finds, matches, and applies to jobs - so you don't have to"
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-2 text-black",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "bg-white/60 backdrop-blur-xl rounded-xl p-1.5 shadow-sm border border-white/40 hover:shadow-md transition-all duration-300 inline-block",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-1.5",
                                    children: [jsxRuntimeExports.jsx("svg", {
                                        className: "w-3 h-3 text-gray-700 shrink-0",
                                        fill: "none",
                                        stroke: "currentColor",
                                        viewBox: "0 0 24 24",
                                        xmlns: "http://www.w3.org/2000/svg",
                                        children: jsxRuntimeExports.jsx("path", {
                                            strokeLinecap: "round",
                                            strokeLinejoin: "round",
                                            strokeWidth: "2",
                                            d: "M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                                        })
                                    }), jsxRuntimeExports.jsx("span", {
                                        className: "text-xs font-semibold",
                                        children: "Find Jobs That Fit You"
                                    })]
                                })
                            }), jsxRuntimeExports.jsx("br", {}), jsxRuntimeExports.jsx("div", {
                                className: "bg-white/60 backdrop-blur-xl rounded-xl p-1.5 shadow-sm border border-white/40 hover:shadow-md transition-all duration-300 inline-block",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-1.5",
                                    children: [jsxRuntimeExports.jsx("svg", {
                                        className: "w-3 h-3 text-gray-700 shrink-0",
                                        fill: "none",
                                        stroke: "currentColor",
                                        viewBox: "0 0 24 24",
                                        xmlns: "http://www.w3.org/2000/svg",
                                        children: jsxRuntimeExports.jsx("path", {
                                            strokeLinecap: "round",
                                            strokeLinejoin: "round",
                                            strokeWidth: "2",
                                            d: "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                                        })
                                    }), jsxRuntimeExports.jsx("span", {
                                        className: "text-xs font-semibold",
                                        children: "One Click Application"
                                    })]
                                })
                            }), jsxRuntimeExports.jsx("br", {}), jsxRuntimeExports.jsx("div", {
                                className: "bg-white/60 backdrop-blur-xl rounded-xl p-1.5 shadow-sm border border-white/40 hover:shadow-md transition-all duration-300 inline-block",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-1.5",
                                    children: [jsxRuntimeExports.jsx("svg", {
                                        className: "w-3 h-3 text-gray-700 shrink-0",
                                        fill: "none",
                                        stroke: "currentColor",
                                        viewBox: "0 0 24 24",
                                        xmlns: "http://www.w3.org/2000/svg",
                                        children: jsxRuntimeExports.jsx("path", {
                                            strokeLinecap: "round",
                                            strokeLinejoin: "round",
                                            strokeWidth: "2",
                                            d: "M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
                                        })
                                    }), jsxRuntimeExports.jsx("span", {
                                        className: "text-xs font-semibold",
                                        children: "More Interviews, Less Stress"
                                    })]
                                })
                            })]
                        })]
                    })
                })]
            }), jsxRuntimeExports.jsx("div", {
                className: "w-full lg:w-1/2 flex items-center justify-center p-8",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "w-full max-w-md relative",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "lg:hidden text-center mb-8",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "inline-flex items-center gap-3 mb-4",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "w-10 h-10 bg-gradient-to-r from-[#f78f97] to-[#dc425d] rounded-2xl flex items-center justify-center",
                                children: jsxRuntimeExports.jsx("svg", {
                                    className: "w-6 h-6 text-white",
                                    fill: "currentColor",
                                    viewBox: "0 0 24 24",
                                    children: jsxRuntimeExports.jsx("path", {
                                        d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                    })
                                })
                            }), jsxRuntimeExports.jsx("h1", {
                                className: "text-2xl font-bold text-gray-900",
                                children: "Hirebuddy"
                            })]
                        })
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "bg-white/70 backdrop-blur-xl rounded-3xl p-8 shadow-2xl border border-white/20 animate-slideIn hover:shadow-[#feb7b7]/30 transition-all duration-500",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "text-center mb-8 animate-fadeIn",
                            children: [jsxRuntimeExports.jsx("h2", {
                                className: "text-3xl font-bold text-gray-900 mb-2 hover:text-[#dc425d] transition-colors duration-300",
                                children: "Create Your Account"
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-gray-600 animate-fadeIn animation-delay-100",
                                children: "Join Hirebuddy and accelerate your career"
                            })]
                        }), s && jsxRuntimeExports.jsx(Alert, {
                            variant: "destructive",
                            className: "mb-6 bg-red-50/80 backdrop-blur-sm border-red-200/50",
                            children: jsxRuntimeExports.jsx(AlertDescription, {
                                className: "text-red-700",
                                children: s
                            })
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-4",
                            children: [jsxRuntimeExports.jsx(Button, {
                                onClick: b,
                                disabled: i,
                                className: "w-full h-14 bg-white/80 hover:bg-white text-gray-700 border border-gray-200 backdrop-blur-sm transition-all duration-300 hover:shadow-xl hover:scale-[1.03] rounded-2xl group animate-fadeIn",
                                variant: "outline",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-center gap-3",
                                    children: [jsxRuntimeExports.jsxs("svg", {
                                        className: "w-5 h-5 group-hover:scale-125 transition-transform duration-300 group-hover:rotate-3",
                                        viewBox: "0 0 24 24",
                                        children: [jsxRuntimeExports.jsx("path", {
                                            d: "M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z",
                                            fill: "#4285F4"
                                        }), jsxRuntimeExports.jsx("path", {
                                            d: "M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z",
                                            fill: "#34A853"
                                        }), jsxRuntimeExports.jsx("path", {
                                            d: "M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z",
                                            fill: "#FBBC05"
                                        }), jsxRuntimeExports.jsx("path", {
                                            d: "M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z",
                                            fill: "#EA4335"
                                        })]
                                    }), jsxRuntimeExports.jsx("span", {
                                        className: "font-medium group-hover:text-blue-600 transition-colors duration-300",
                                        children: "Sign up with Google"
                                    })]
                                })
                            }), jsxRuntimeExports.jsx(Button, {
                                onClick: _,
                                disabled: i,
                                className: "w-full h-14 bg-white/80 hover:bg-white text-gray-700 border border-gray-200 backdrop-blur-sm transition-all duration-300 hover:shadow-xl hover:scale-[1.03] rounded-2xl group animate-fadeIn animation-delay-200",
                                variant: "outline",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-center gap-3",
                                    children: [jsxRuntimeExports.jsx("svg", {
                                        className: "w-5 h-5 group-hover:scale-125 transition-transform duration-300 group-hover:rotate-3",
                                        viewBox: "0 0 24 24",
                                        fill: "currentColor",
                                        children: jsxRuntimeExports.jsx("path", {
                                            d: "M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
                                        })
                                    }), jsxRuntimeExports.jsx("span", {
                                        className: "font-medium group-hover:text-blue-600 transition-colors duration-300",
                                        children: "Sign up with GitHub"
                                    })]
                                })
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "mt-8 p-3 bg-gradient-to-r from-[#fcdfe6] to-[#fcdfe6]/50 rounded-2xl border border-[#feb7b7]/30 hover:shadow-md hover:border-[#feb7b7]/50 transition-all duration-300 animate-fadeIn animation-delay-300",
                            children: [jsxRuntimeExports.jsx("h3", {
                                className: "font-semibold text-gray-900 mb-2 text-center text-xs",
                                children: "What you'll get:"
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "grid grid-cols-2 gap-2 text-xs",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-1.5 hover:translate-x-1 transition-transform duration-300",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "w-1 h-1 bg-[#f78f97] rounded-full"
                                    }), jsxRuntimeExports.jsx("span", {
                                        className: "text-gray-700 hover:text-[#dc425d] transition-colors duration-300",
                                        children: "Smart job alerts"
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-1.5 hover:translate-x-1 transition-transform duration-300",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "w-1 h-1 bg-[#f78f97] rounded-full"
                                    }), jsxRuntimeExports.jsx("span", {
                                        className: "text-gray-700 hover:text-[#dc425d] transition-colors duration-300",
                                        children: "Resume builder"
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-1.5 hover:translate-x-1 transition-transform duration-300",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "w-1 h-1 bg-[#f78f97] rounded-full"
                                    }), jsxRuntimeExports.jsx("span", {
                                        className: "text-gray-700 hover:text-[#dc425d] transition-colors duration-300",
                                        children: "Interview prep"
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-1.5 hover:translate-x-1 transition-transform duration-300",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "w-1 h-1 bg-[#f78f97] rounded-full"
                                    }), jsxRuntimeExports.jsx("span", {
                                        className: "text-gray-700 hover:text-[#dc425d] transition-colors duration-300",
                                        children: "Career insights"
                                    })]
                                })]
                            })]
                        }), jsxRuntimeExports.jsx("div", {
                            className: "mt-6 text-center",
                            children: jsxRuntimeExports.jsxs("p", {
                                className: "text-gray-600",
                                children: ["Already have an account?", " ", jsxRuntimeExports.jsx(Link, {
                                    to: "/?signin=true",
                                    className: "text-[#dc425d] font-medium hover:underline",
                                    children: "Sign in"
                                })]
                            })
                        })]
                    })]
                })
            })]
        })
    })
}
  , sampleResumeData = {
    personalInfo: {
        name: "John Doe",
        email: "john.doe@email.com",
        phone: "+1 (555) 123-4567",
        location: "San Francisco, CA",
        website: "https://johndoe.dev",
        linkedin: "https://linkedin.com/in/johndoe",
        github: "https://github.com/johndoe"
    },
    summary: "Experienced Full Stack Developer with 5+ years of expertise in React, Node.js, and cloud technologies. Proven track record of building scalable web applications and leading development teams. Passionate about creating user-centric solutions and staying current with emerging technologies.",
    experience: [{
        id: "1",
        jobTitle: "Senior Full Stack Developer",
        company: "TechCorp Inc.",
        location: "San Francisco, CA",
        startDate: "2022-01",
        endDate: "",
        current: !0,
        description: "Lead development of customer-facing web applications using React, Node.js, and AWS. Collaborate with cross-functional teams to deliver high-quality software solutions.",
        achievements: ["Increased application performance by 40% through code optimization", "Led a team of 4 developers on a major product redesign", "Implemented CI/CD pipeline reducing deployment time by 60%"]
    }, {
        id: "2",
        jobTitle: "Full Stack Developer",
        company: "StartupXYZ",
        location: "San Francisco, CA",
        startDate: "2020-03",
        endDate: "2021-12",
        current: !1,
        description: "Developed and maintained web applications using React, Express.js, and MongoDB. Worked closely with product managers and designers to implement new features.",
        achievements: ["Built responsive web application serving 10,000+ daily users", "Reduced API response time by 50% through database optimization", "Mentored 2 junior developers"]
    }],
    education: [{
        id: "1",
        degree: "Bachelor of Science in Computer Science",
        school: "University of California, Berkeley",
        location: "Berkeley, CA",
        startDate: "2016-08",
        endDate: "2020-05",
        gpa: "3.8",
        honors: "Magna Cum Laude",
        coursework: ["Data Structures", "Algorithms", "Software Engineering", "Database Systems"]
    }],
    skills: {
        technical: ["JavaScript", "TypeScript", "React", "Node.js", "Python", "AWS", "Docker"],
        soft: ["Leadership", "Communication", "Problem Solving", "Team Collaboration"],
        languages: ["English", "Spanish"],
        frameworks: ["React", "Express.js", "Next.js", "Django", "Flask"]
    },
    projects: [{
        id: "1",
        name: "E-commerce Platform",
        description: "Built a full-stack e-commerce platform with React frontend and Node.js backend, featuring user authentication, payment processing, and inventory management.",
        technologies: ["React", "Node.js", "MongoDB", "Stripe API"],
        link: "https://ecommerce-demo.com",
        github: "https://github.com/johndoe/ecommerce-platform",
        startDate: "2023-01",
        endDate: "2023-06"
    }],
    certifications: [{
        id: "1",
        name: "AWS Certified Solutions Architect",
        issuer: "Amazon Web Services",
        date: "2023-03",
        expiryDate: "2026-03",
        credentialId: "AWS-SAA-123456",
        link: "https://aws.amazon.com/certification/"
    }],
    languages: [{
        id: "1",
        language: "English",
        proficiency: "Native"
    }, {
        id: "2",
        language: "Spanish",
        proficiency: "Conversational"
    }],
    volunteer: [{
        id: "1",
        organization: "Code for Good",
        role: "Volunteer Developer",
        startDate: "2021-01",
        endDate: "2023-12",
        description: "Developed web applications for non-profit organizations to help them manage their operations more efficiently."
    }],
    awards: [{
        id: "1",
        title: "Employee of the Year",
        issuer: "TechCorp Inc.",
        date: "2023-12",
        description: "Recognized for outstanding performance and leadership in delivering critical projects."
    }]
}
  , CoverLetterTest = () => jsxRuntimeExports.jsx("div", {
    className: "min-h-screen bg-gray-50",
    children: jsxRuntimeExports.jsxs("div", {
        className: "container mx-auto py-8",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "mb-8 text-center",
            children: [jsxRuntimeExports.jsx("h1", {
                className: "text-3xl font-bold text-gray-900 mb-4",
                children: "Cover Letter Generator Test"
            }), jsxRuntimeExports.jsx("p", {
                className: "text-gray-600 max-w-2xl mx-auto",
                children: "This is a test page for the cover letter generator. It uses sample resume data to demonstrate how the AI can create personalized cover letters based on job descriptions and user preferences."
            })]
        }), jsxRuntimeExports.jsx("div", {
            className: "bg-white rounded-lg shadow-lg overflow-hidden",
            style: {
                height: "80vh"
            },
            children: jsxRuntimeExports.jsx(CoverLetterGenerator, {
                resumeData: sampleResumeData
            })
        })]
    })
});
class ContactsService {
    async getContacts() {
        try {
            console.log("🔍 Fetching contacts from database..."),
            console.log("Supabase client initialized:", !!supabase);
            const {data: e, error: i} = await supabase.from("email_database").select("*").order("created_at", {
                ascending: !1
            });
            if (i)
                throw console.error("❌ Supabase error fetching contacts:", i),
                console.error("Error details:", {
                    message: i.message,
                    details: i.details,
                    hint: i.hint,
                    code: i.code
                }),
                new Error(`Failed to fetch contacts: ${i.message} (Code: ${i.code})`);
            return console.log("✅ Successfully fetched contacts:", (e == null ? void 0 : e.length) || 0),
            (e || []).map(a => ({
                id: a.id,
                name: a.full_name || a.first_name || "Unknown",
                email: a.email || "",
                company: a.company_name || void 0,
                title: a.title || void 0,
                linkedin_link: a.linkedin_link || void 0,
                company_website: a.company_website_full || void 0,
                email_sent_on: a.email_sent_on || void 0,
                status: "active",
                email_sent: !!a.email_sent_on,
                created_at: a.created_at,
                updated_at: a.created_at
            }))
        } catch (e) {
            throw console.error("❌ Error in getContacts:", e),
            e instanceof Error ? e : new Error(`Unknown error occurred while fetching contacts: ${String(e)}`)
        }
    }
    async addContact(e) {
        try {
            const {data: i, error: o} = await supabase.from("email_database").insert([e]).select().single();
            if (o)
                throw console.error("Error adding contact:", o),
                new Error(`Failed to add contact: ${o.message}`);
            return i
        } catch (i) {
            throw console.error("Error in addContact:", i),
            i
        }
    }
    async updateContact(e, i) {
        try {
            const {data: o, error: a} = await supabase.from("email_database").update(i).eq("id", e).select().single();
            if (a)
                throw console.error("Error updating contact:", a),
                new Error(`Failed to update contact: ${a.message}`);
            return o
        } catch (o) {
            throw console.error("Error in updateContact:", o),
            o
        }
    }
    async markEmailSent(e) {
        try {
            const {error: i} = await supabase.from("email_database").update({
                email_sent_on: new Date().toISOString()
            }).eq("id", e);
            if (i)
                throw console.error("Error marking email as sent:", i),
                new Error(`Failed to mark email as sent: ${i.message}`)
        } catch (i) {
            throw console.error("Error in markEmailSent:", i),
            i
        }
    }
    async deleteContact(e) {
        try {
            const {error: i} = await supabase.from("email_database").delete().eq("id", e);
            if (i)
                throw console.error("Error deleting contact:", i),
                new Error(`Failed to delete contact: ${i.message}`)
        } catch (i) {
            throw console.error("Error in deleteContact:", i),
            i
        }
    }
    async searchContacts(e) {
        try {
            const {data: i, error: o} = await supabase.from("email_database").select("*").or(`full_name.ilike.%${e}%,first_name.ilike.%${e}%,email.ilike.%${e}%,company_name.ilike.%${e}%`).order("created_at", {
                ascending: !1
            });
            if (o)
                throw console.error("Error searching contacts:", o),
                new Error(`Failed to search contacts: ${o.message}`);
            return (i || []).map(c => ({
                id: c.id,
                name: c.full_name || c.first_name || "Unknown",
                email: c.email || "",
                company: c.company_name || void 0,
                title: c.title || void 0,
                linkedin_link: c.linkedin_link || void 0,
                company_website: c.company_website_full || void 0,
                email_sent_on: c.email_sent_on || void 0,
                status: "active",
                email_sent: !!c.email_sent_on,
                created_at: c.created_at,
                updated_at: c.created_at
            }))
        } catch (i) {
            throw console.error("Error in searchContacts:", i),
            i
        }
    }
    async getContactsWithEmail() {
        try {
            const {data: e, error: i} = await supabase.from("email_database").select("*").not("email", "is", null).neq("email", "").order("created_at", {
                ascending: !1
            });
            if (i)
                throw console.error("Error fetching contacts with email:", i),
                new Error(`Failed to fetch contacts with email: ${i.message}`);
            return (e || []).map(a => ({
                id: a.id,
                name: a.full_name || a.first_name || "Unknown",
                email: a.email || "",
                company: a.company_name || void 0,
                title: a.title || void 0,
                linkedin_link: a.linkedin_link || void 0,
                company_website: a.company_website_full || void 0,
                email_sent_on: a.email_sent_on || void 0,
                status: "active",
                email_sent: !!a.email_sent_on,
                created_at: a.created_at,
                updated_at: a.created_at
            }))
        } catch (e) {
            throw console.error("Error in getContactsWithEmail:", e),
            e
        }
    }
    async getContactsWithSentEmails() {
        try {
            const {data: e} = await supabase.auth.getUser();
            if (!e.user)
                throw new Error("User not authenticated");
            console.log("Getting contacts with sent emails for user:", e.user.email);
            let i = [];
            try {
                const {data: tt, error: rt} = await supabase.from("useremaillog").select("*").eq("user_id", e.user.email).order("sent_at", {
                    ascending: !1
                });
                rt ? console.warn("Could not fetch from useremaillog table:", rt) : (i = tt || [],
                console.log("Found email logs for follow-up:", i.length))
            } catch (tt) {
                console.warn("useremaillog table might not exist:", tt)
            }
            let o = [];
            try {
                const {data: tt, error: rt} = await supabase.from("followuplogs").select("*").eq("user_id", e.user.email).order("sent_at", {
                    ascending: !1
                });
                rt ? console.warn("Could not fetch from followuplogs table:", rt) : (o = tt || [],
                console.log("Found follow-up logs:", o.length))
            } catch (tt) {
                console.warn("followuplogs table might not exist:", tt)
            }
            const a = await DashboardService.getContactsWhoReplied(e.user.email)
              , c = new Set(a.map(tt => tt.toLowerCase()))
              , d = new Date;
            d.setHours(d.getHours() - 24);
            const h = await this.getContacts();
            if (h.length === 0)
                return console.warn("No contacts found in the system"),
                [];
            const g = new Map;
            h.forEach(tt => {
                g.set(tt.email.toLowerCase(), tt)
            }
            );
            const b = new Map;
            i.forEach(tt => {
                if (tt.to) {
                    const rt = new Date(tt.sent_at)
                      , et = b.get(tt.to.toLowerCase());
                    (!et || rt > et) && b.set(tt.to.toLowerCase(), rt)
                }
            }
            );
            const _ = new Map;
            o.forEach(tt => {
                if (tt.to) {
                    const rt = new Date(tt.sent_at)
                      , et = _.get(tt.to.toLowerCase());
                    (!et || rt > et) && _.set(tt.to.toLowerCase(), rt)
                }
            }
            );
            const $ = []
              , _e = new Set;
            for (const [tt,rt] of b) {
                if (_e.has(tt))
                    continue;
                if (c.has(tt.toLowerCase())) {
                    _e.add(tt);
                    continue
                }
                const et = _.get(tt)
                  , it = et && et > rt ? et : rt;
                if (it < d) {
                    const nt = g.get(tt);
                    nt ? $.push({
                        ...nt,
                        email_sent_on: it.toISOString(),
                        email_sent: !0,
                        status: "active"
                    }) : $.push({
                        id: `email-${tt}`,
                        name: tt.split("@")[0],
                        email: tt,
                        company: void 0,
                        title: void 0,
                        linkedin_link: void 0,
                        email_sent_on: it.toISOString(),
                        status: "active",
                        email_sent: !0,
                        created_at: new Date().toISOString(),
                        updated_at: new Date().toISOString()
                    }),
                    _e.add(tt)
                }
            }
            return console.log("Contacts needing follow-up (24+ hours since last communication):", $.length),
            console.log("Contacts who replied (excluded from follow-up):", a.length),
            console.log("24 hours ago cutoff:", d.toISOString()),
            $.sort( (tt, rt) => new Date(tt.email_sent_on || 0).getTime() - new Date(rt.email_sent_on || 0).getTime())
        } catch (e) {
            throw console.error("Error in getContactsWithSentEmails:", e),
            e
        }
    }
    async getContactsAvailableForEmail() {
        try {
            console.log("🔍 Fetching contacts available for email (no emails sent in last 7 days)...");
            const e = new Date;
            e.setDate(e.getDate() - 7),
            console.log("7 days ago cutoff:", e.toISOString());
            const {data: i, error: o} = await supabase.from("email_database").select("*").not("email", "is", null).neq("email", "").or(`email_sent_on.is.null,email_sent_on.lt.${e.toISOString()}`).order("created_at", {
                ascending: !1
            });
            if (o)
                throw console.error("❌ Supabase error fetching contacts available for email:", o),
                console.error("Error details:", {
                    message: o.message,
                    details: o.details,
                    hint: o.hint,
                    code: o.code
                }),
                new Error(`Failed to fetch contacts available for email: ${o.message} (Code: ${o.code})`);
            console.log("✅ Successfully fetched contacts available for email:", (i == null ? void 0 : i.length) || 0);
            const a = (i || []).map(c => ({
                id: c.id,
                name: c.full_name || c.first_name || "Unknown",
                email: c.email || "",
                company: c.company_name || void 0,
                title: c.title || void 0,
                linkedin_link: c.linkedin_link || void 0,
                company_website: c.company_website_full || void 0,
                email_sent_on: c.email_sent_on || void 0,
                status: "active",
                email_sent: !!c.email_sent_on,
                created_at: c.created_at,
                updated_at: c.created_at
            }));
            return console.log("Contacts breakdown:"),
            console.log("- Never sent emails:", a.filter(c => !c.email_sent_on).length),
            console.log("- Last email sent more than 7 days ago:", a.filter(c => c.email_sent_on && new Date(c.email_sent_on) < e).length),
            a
        } catch (e) {
            throw console.error("❌ Error in getContactsAvailableForEmail:", e),
            e instanceof Error ? e : new Error(`Unknown error occurred while fetching contacts available for email: ${String(e)}`)
        }
    }
    async getContactsWithEmailFromemail_database() {
        try {
            const {data: e, error: i} = await supabase.from("email_database").select("*").not("email", "is", null).neq("email", "").not("email_sent_on", "is", null).order("email_sent_on", {
                ascending: !1
            });
            if (i)
                throw console.error("Error fetching contacts with sent emails from email_database:", i),
                new Error(`Failed to fetch contacts with sent emails: ${i.message}`);
            return (e || []).map(a => ({
                id: a.id,
                name: a.full_name || a.first_name || "Unknown",
                email: a.email || "",
                company: a.company_name || void 0,
                title: a.title || void 0,
                linkedin_link: a.linkedin_link || void 0,
                company_website: a.company_website_full || void 0,
                email_sent_on: a.email_sent_on || void 0,
                status: "active",
                email_sent: !0,
                created_at: a.created_at,
                updated_at: a.created_at
            }))
        } catch (e) {
            throw console.error("Error in getContactsWithEmailFromemail_database:", e),
            e
        }
    }
}
const contactsService = new ContactsService
  , contactsService$1 = Object.freeze(Object.defineProperty({
    __proto__: null,
    contactsService
}, Symbol.toStringTag, {
    value: "Module"
}));
async function testDatabaseConnection() {
    try {
        console.log("🔍 Testing database connection..."),
        console.log("Environment check:"),
        console.log("- VITE_SUPABASE_URL:", getConfig().supabase.url ? "✓ Present" : "❌ Missing"),
        console.log("- VITE_SUPABASE_ANON_KEY:", getConfig().supabase.anonKey ? "✓ Present" : "❌ Missing");
        const {data: s, error: e, count: i} = await supabase.from("email_database").select("*", {
            count: "exact"
        });
        return e ? (console.error("❌ Database query failed:", e),
        {
            success: !1,
            message: `Database query failed: ${e.message}`,
            details: e
        }) : (console.log("✅ Database connection successful"),
        console.log(`📊 Found ${i} contacts in the database`),
        s && s.length > 0 && (console.log("📋 Sample contacts:"),
        s.slice(0, 3).forEach( (o, a) => {
            console.log(`  ${a + 1}. ${o.full_name || o.first_name || "Unknown"} - ${o.email || "No email"}`)
        }
        )),
        {
            success: !0,
            message: `Successfully connected to database. Found ${i} contacts.`,
            contactCount: i || 0,
            details: s == null ? void 0 : s.slice(0, 3)
        })
    } catch (s) {
        return console.error("❌ Database connection error:", s),
        {
            success: !1,
            message: `Database connection error: ${sinstanceof Error ? s.message : "Unknown error"}`,
            details: s
        }
    }
}
async function addSampleContact() {
    try {
        const s = {
            full_name: "Test Contact",
            first_name: "Test",
            email: `test-${Date.now()}@example.com`,
            company_name: "Test Company",
            title: "Test Title",
            linkedin_link: "https://linkedin.com/in/test",
            company_website_full: "https://test.com"
        }
          , {data: e, error: i} = await supabase.from("email_database").insert([s]).select().single();
        return i ? {
            success: !1,
            message: `Failed to add sample contact: ${i.message}`,
            details: i
        } : {
            success: !0,
            message: "Successfully added sample contact",
            details: e
        }
    } catch (s) {
        return {
            success: !1,
            message: `Error adding sample contact: ${sinstanceof Error ? s.message : "Unknown error"}`,
            details: s
        }
    }
}
class EmailService {
    constructor() {
        tr(this, "apiBaseUrl");
        tr(this, "openaiProxyUrl");
        tr(this, "useHtmlEmails", !0);
        try {
            this.apiBaseUrl = EnvironmentValidator.getSecureEnvVar("VITE_AWS_API_BASE_URL"),
            this.openaiProxyUrl = `${getConfig().supabase.url}/functions/v1/openai-proxy`
        } catch (e) {
            throw SecureErrorHandler.createSafeError(e, "Email service configuration error. Please check your environment variables.")
        }
    }
    async sendEmail(e) {
        try {
            if (!InputValidator.isValidEmail(e.to))
                throw new Error("Invalid recipient email address");
            if (!InputValidator.isValidEmail(e.sender))
                throw new Error("Invalid sender email address");
            if (!InputValidator.isSafeText(e.subject))
                throw new Error("Invalid characters in email subject");
            if (e.isHtml && !InputValidator.isSafeHtmlEmail(e.body))
                throw new Error("Unsafe HTML content in email body");
            if (!e.isHtml && !InputValidator.isSafeText(e.body))
                throw new Error("Invalid characters in email body");
            const i = {
                ...e,
                to: InputSanitizer.sanitizeEmail(e.to),
                sender: InputSanitizer.sanitizeEmail(e.sender),
                subject: InputSanitizer.sanitizeText(e.subject),
                body: e.isHtml ? InputSanitizer.sanitizeHtmlEmail(e.body) : InputSanitizer.sanitizeText(e.body)
            };
            console.log("🚀 Sending email via AWS API...", {
                to: i.to,
                subject: i.subject,
                sender: i.sender,
                isHtml: i.isHtml,
                content_type: i.content_type,
                mime_type: i.mime_type,
                bodyPreview: i.body.substring(0, 200) + "..."
            });
            const o = await fetch(`${this.apiBaseUrl}/send_email`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-Content-Type-Options": "nosniff",
                    "X-Frame-Options": "DENY"
                },
                body: JSON.stringify(i)
            });
            if (console.log("📡 AWS API Response:", o.status, o.statusText),
            !o.ok) {
                const c = await o.text();
                throw console.error("❌ AWS API Error:", {
                    status: o.status,
                    error: c
                }),
                o.status === 400 ? new Error(`Invalid request: ${c}`) : o.status === 401 ? new Error("Authentication failed. Please check your API credentials.") : o.status === 403 ? new Error("Access forbidden. Please check your permissions.") : o.status === 429 ? new Error("Rate limit exceeded. Please try again later.") : o.status === 500 ? new Error("Server error. Please try again later or contact support.") : new Error(`Failed to send email: ${o.status} - ${c}`)
            }
            const a = await o.json();
            if (console.log("✅ Email sent successfully:", a),
            typeof a == "string")
                throw new Error(a);
            return a
        } catch (i) {
            throw console.error("❌ Error sending email:", i),
            i instanceof TypeError && i.message.includes("fetch") ? SecureErrorHandler.createSafeError(i, "Unable to connect to email service. Please check your internet connection.") : i instanceof Error && SecureErrorHandler.isSafeErrorMessage(i.message) ? i : SecureErrorHandler.createSafeError(i, "Failed to send email. Please try again later.")
        }
    }
    async sendFollowUp(e) {
        try {
            if (!InputValidator.isValidEmail(e.to))
                throw new Error("Invalid recipient email address");
            if (!InputValidator.isValidEmail(e.sender))
                throw new Error("Invalid sender email address");
            if (e.isHtml && !InputValidator.isSafeHtmlEmail(e.body))
                throw new Error("Unsafe HTML content in follow-up email body");
            if (!e.isHtml && !InputValidator.isSafeText(e.body))
                throw new Error("Invalid characters in follow-up email body");
            const i = {
                ...e,
                to: InputSanitizer.sanitizeEmail(e.to),
                sender: InputSanitizer.sanitizeEmail(e.sender),
                body: e.isHtml ? InputSanitizer.sanitizeHtmlEmail(e.body) : InputSanitizer.sanitizeText(e.body)
            };
            console.log("🚀 Sending follow-up email via AWS API...", {
                to: i.to,
                sender: i.sender,
                isHtml: i.isHtml,
                content_type: i.content_type,
                mime_type: i.mime_type,
                bodyPreview: i.body.substring(0, 200) + "..."
            });
            const o = await fetch(`${this.apiBaseUrl}/send_followup`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(i)
            });
            if (console.log("📡 AWS API Follow-up Response:", o.status, o.statusText),
            !o.ok) {
                const c = await o.text();
                throw console.error("❌ AWS API Follow-up Error:", {
                    status: o.status,
                    error: c
                }),
                o.status === 400 ? new Error(`Invalid follow-up request: ${c}`) : o.status === 401 ? new Error("Authentication failed. Please check your API credentials.") : o.status === 403 ? new Error("Access forbidden. Please check your permissions.") : o.status === 429 ? new Error("Rate limit exceeded. Please try again later.") : o.status === 500 ? new Error("Server error. Please try again later or contact support.") : new Error(`Failed to send follow-up: ${o.status} - ${c}`)
            }
            const a = await o.json();
            return console.log("✅ Follow-up sent successfully:", a),
            a
        } catch (i) {
            throw console.error("❌ Error sending follow-up:", i),
            i instanceof TypeError && i.message.includes("fetch") ? new Error("Network error: Unable to connect to email service. Please check your internet connection.") : i
        }
    }
    async getEmailConversation(e) {
        try {
            console.log("Calling backend API for conversation:", e);
            const i = await fetch(`${this.apiBaseUrl}/get_email_and_replies`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(e)
            });
            if (!i.ok) {
                const d = await i.text();
                throw console.error("Backend API error:", d),
                new Error(`Failed to get conversation: ${i.status} - ${d}`)
            }
            const o = await i.json();
            console.log("Raw backend response:", o);
            let a = [];
            Array.isArray(o) ? a = o : o && typeof o == "object" && (o.messages ? a = o.messages : o.emails ? a = o.emails : o.conversation ? a = o.conversation : a = [o]),
            console.log("Processed emails array:", a);
            const c = a.map( (d, h) => {
                const g = d.id || d.messageId || d.message_id || `msg-${h}`
                  , b = d.subject || d.Subject || "No Subject"
                  , _ = d.from || d.From || d.sender || d.sender_email || ""
                  , $ = d.to || d.To || d.recipient || d.recipient_email || ""
                  , _e = d.body || d.Body || d.content || d.snippet || ""
                  , tt = d.date || d.Date || d.sent_at || d.internalDate || new Date().toISOString()
                  , rt = d.threadId || d.thread_id || d.labelIds;
                return console.log("Transforming email:", {
                    messageId: g,
                    subject: b,
                    fromEmail: _,
                    toEmail: $,
                    body: _e.substring(0, 100) + "...",
                    date: tt
                }),
                {
                    id: g,
                    subject: b,
                    from: _,
                    to: $,
                    date: tt,
                    body: _e,
                    thread_id: rt,
                    metadata: {
                        original_data: d
                    }
                }
            }
            );
            return console.log("Final transformed emails:", c.length),
            c
        } catch (i) {
            return console.error("Error getting email conversation:", i),
            []
        }
    }
    async testConnection() {
        try {
            const e = await fetch(`${this.apiBaseUrl}/`, {
                method: "GET"
            });
            if (e.ok)
                return {
                    success: !0,
                    message: (await e.json()).message || "AWS Email API connection successful"
                };
            const i = await fetch(`${this.apiBaseUrl}/send_email`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    sender: "test@example.com",
                    to: "test@example.com",
                    subject: "Test Connection",
                    body: "Testing API connectivity"
                })
            });
            if (i.status === 400 || i.status === 422 || i.status === 500)
                return {
                    success: !0,
                    message: "AWS Email API connection successful (API reachable and responding)"
                };
            if (i.ok)
                return {
                    success: !0,
                    message: "AWS Email API connection successful"
                };
            const o = await i.text();
            return {
                success: !1,
                message: `API connection failed: ${i.status} - ${o}`
            }
        } catch (e) {
            return {
                success: !1,
                message: `API connection error: ${einstanceof Error ? e.message : "Unknown error"}`
            }
        }
    }
    async generateAIFollowUp(e) {
        var i, o, a;
        try {
            const c = this.buildFollowUpSystemPrompt(e.tone || "professional")
              , d = this.buildFollowUpUserPrompt(e)
              , {data: {session: h}} = await supabase.auth.getSession();
            if (!(h != null && h.access_token))
                throw new Error("Authentication required for AI features");
            const g = await fetch(this.openaiProxyUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${h.access_token}`,
                    apikey: getConfig().supabase.anonKey
                },
                body: JSON.stringify({
                    model: "gpt-4o-mini",
                    messages: [{
                        role: "system",
                        content: c
                    }, {
                        role: "user",
                        content: d
                    }],
                    temperature: .6,
                    max_tokens: 500
                })
            });
            if (!g.ok) {
                const $ = await g.json();
                throw new Error(`OpenAI API error: ${g.status} - ${((i = $.error) == null ? void 0 : i.message) || "Unknown error"}`)
            }
            const _ = ((a = (o = (await g.json()).choices[0]) == null ? void 0 : o.message) == null ? void 0 : a.content) || "";
            return this.parseAIResponse(_)
        } catch (c) {
            throw console.error("Error generating AI follow-up:", c),
            c
        }
    }
    async generateAIEmail(e) {
        var i, o, a;
        try {
            const c = this.buildSystemPrompt(e.emailType, e.tone || "professional")
              , d = this.buildUserPrompt(e)
              , {data: {session: h}} = await supabase.auth.getSession();
            if (!(h != null && h.access_token))
                throw new Error("Authentication required for AI features");
            const g = await fetch(this.openaiProxyUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${h.access_token}`,
                    apikey: getConfig().supabase.anonKey
                },
                body: JSON.stringify({
                    model: "gpt-4o-mini",
                    messages: [{
                        role: "system",
                        content: c
                    }, {
                        role: "user",
                        content: d
                    }],
                    temperature: .7,
                    max_tokens: 1500
                })
            });
            if (!g.ok) {
                const $ = await g.json();
                throw new Error(`OpenAI API error: ${g.status} - ${((i = $.error) == null ? void 0 : i.message) || "Unknown error"}`)
            }
            const _ = ((a = (o = (await g.json()).choices[0]) == null ? void 0 : o.message) == null ? void 0 : a.content) || "";
            return this.parseAIResponse(_)
        } catch (c) {
            throw console.error("Error generating AI email:", c),
            c
        }
    }
    buildFollowUpSystemPrompt(e) {
        return `You are a professional email assistant specializing in creating SHORT, EFFECTIVE follow-up emails. Your follow-ups should be:

1. EXTREMELY BRIEF - 30-50 words maximum (not including greeting/closing)
2. GENTLE REMINDER - Don't be pushy or aggressive
3. VALUE-FOCUSED - Quickly remind them of your real value using only provided data
4. ACTION-ORIENTED - Clear, simple call to action
5. RESPECTFUL - Acknowledge they're busy

TONE: ${e}

CRITICAL DATA USAGE RULES FOR FOLLOW-UPS:
- Use ONLY the real data provided about the sender and recipient
- NEVER make up names, companies, titles, or achievements
- Use the exact recipient and sender names as provided
- Reference only real achievements and experience from the provided data
- Include the sender's phone number and LinkedIn profile URL exactly as provided in the data
- If information is missing, do not invent it

FOLLOW-UP SPECIFIC GUIDELINES:
- This is a FOLLOW-UP to a previous email, not a first introduction
- Keep it shorter than a text message
- Reference the previous email briefly
- Don't repeat all your qualifications again
- Just a gentle reminder with one real reason to respond from the provided data
- Be understanding that they're busy
- Maximum 2-3 sentences for the main content

EMAIL STRUCTURE FOR FOLLOW-UPS:
- Greeting: Use recipient's actual name from the data
- Context: "I wanted to follow up on my previous email."
- Value reminder: ONE brief sentence about real value/benefit from provided data
- Call to action: Simple, specific request
- Closing: Use sender's actual name from the data
- Include phone number and LinkedIn in signature if provided in the data

RESPONSE FORMAT:
You must respond in this exact JSON format:
{
  "subject": "Follow-up: [Brief subject]",
  "body": "Follow-up email body with proper line breaks using \\n\\n for paragraphs",
  "reasoning": "Brief explanation of approach"
}`
    }
    buildFollowUpUserPrompt(e) {
        const {contact: i, userProfile: o, customInstructions: a} = e;
        let c = `Generate a SHORT follow-up email (reminder) with the following information:

RECIPIENT:
- Name: ${i.name}
- Email: ${i.email}`;
        if (i.company && (c += `
- Company: ${i.company}`),
        i.position && (c += `
- Position: ${i.position}`),
        c += `

SENDER:`,
        o.full_name && (c += `
- Name: ${o.full_name}`),
        o.title && (c += `
- Title: ${o.title}`),
        o.company && (c += `
- Company: ${o.company}`),
        o.phone && (c += `
- Phone: ${o.phone}`),
        o.linkedin && (c += `
- LinkedIn: ${o.linkedin}`),
        o.experiences && o.experiences.length > 0) {
            const h = o.experiences[0];
            h.achievements && h.achievements.length > 0 && (c += `
- Key Achievement: ${h.achievements[0]}`)
        }
        a && (c += `

CUSTOM INSTRUCTIONS: ${a}`);
        let d = [];
        return o.phone && d.push(`Phone: ${o.phone}`),
        o.linkedin && d.push(`LinkedIn: ${o.linkedin}`),
        c += `

CRITICAL FOLLOW-UP INSTRUCTIONS - MUST FOLLOW EXACTLY:

DATA USAGE REQUIREMENTS:
1. Use ONLY the real information provided above - NO fake data
2. Use the recipient's exact name: "${i.name}"
3. ${o.full_name ? `Use the sender's exact name: "${o.full_name}"` : "Use a generic closing if sender name not provided"}
4. Include signature with: ${d.length > 0 ? d.join(" and ") : "no additional contact info if not provided"}
5. Use only the real achievements and experience data provided above
6. If any information is missing, do not make it up

FOLLOW-UP EMAIL REQUIREMENTS:
1. Acknowledges this is a follow-up to a previous email
2. Briefly reminds them of ONE real key value from the provided data
3. Includes a simple, non-pushy call to action
4. Stays under 50 words for the main content (excluding greeting/closing)
5. Uses understanding tone - they're busy people
6. Structure: Greeting → Follow-up context → Brief real value reminder → Simple CTA → Closing with signature

FORMATTING REQUIREMENTS:
- Start with "Hi ${i.name},"
- Maximum 3 short sentences for main content
- End with "Best regards,\\n ${o.full_name || "[Your name]"}"
- ${o.phone ? `Include in signature: "Phone: ${o.phone}"` : ""}
- ${o.linkedin ? `Include in signature: "LinkedIn: ${o.linkedin}"` : ""}
- NO placeholder text like [Name], [title], [achievement] - use only real data

Keep it SHORT, RESPECTFUL, and VALUE-FOCUSED using only real information. This should feel like a gentle reminder, not a sales pitch.`,
        c
    }
    buildSystemPrompt(e, i) {
        const o = `You are a professional email writing assistant specializing in creating personalized, effective emails for job seekers and professionals. Your emails should be:

1. PERSONALIZED - Use ONLY the specific details provided about the recipient and sender - NO FAKE DATA
2. CONCISE - Keep it very brief and to the point (100-150 words max)
3. PROFESSIONAL - Maintain appropriate business tone
4. ACTION-ORIENTED - Include a clear call to action
5. AUTHENTIC - Sound genuine and human, not robotic

TONE: ${i}
EMAIL TYPE: ${e}

CRITICAL DATA USAGE RULES:
- Use ONLY the real data provided in the user prompt
- NEVER make up or assume information not explicitly provided
- If a field is missing or empty, DO NOT create fake information
- Use the exact names, companies, titles, and achievements as provided
- Include the sender's phone number and LinkedIn profile URL exactly as provided in the data
- Focus on 1-2 most relevant real achievements or skills only
- Use the recipient's actual name and company naturally

EMAIL FORMATTING REQUIREMENTS:
- Use \\n\\n to separate paragraphs (this creates proper spacing)
- Start with a brief greeting using the recipient's actual name
- Structure: Greeting → One sentence context → Key value proposition from real data → Call to action → Brief closing with sender's actual name and contact info
- Maximum 2-3 paragraphs total
- Each paragraph should be 1-2 sentences maximum
- Eliminate unnecessary transitional phrases
- Get straight to the point

RESPONSE FORMAT:
You must respond in this exact JSON format:
{
  "subject": "Compelling subject line here",
  "body": "Email body here with proper line breaks using \\n\\n for paragraphs and \\n for line breaks within paragraphs",
  "reasoning": "Brief explanation of personalization choices"
}`
          , a = {
            cold_outreach: "Lead with ONE real impressive achievement from the provided data that would interest them. Skip small talk.",
            follow_up: "Brief reference to previous contact. Add ONE new piece of value.",
            job_application: "State the role. Highlight ONE relevant achievement with numbers. Show enthusiasm briefly.",
            networking: "Mention ONE mutual connection or shared interest. Keep extremely conversational.",
            partnership: "State ONE specific mutual benefit or collaboration opportunity immediately."
        };
        return `${o}

SPECIFIC GUIDELINES FOR ${e.toUpperCase()}:
${a[e]}`
    }
    buildUserPrompt(e) {
        const {contact: i, userProfile: o, customInstructions: a, targetRoles: c} = e;
        let d = `Generate a personalized email with the following information:

RECIPIENT INFORMATION:
- Name: ${i.name}
- Email: ${i.email}`;
        if (i.company && (d += `
- Company: ${i.company}`),
        i.position && (d += `
- Position: ${i.position}`),
        i.linkedin_link && (d += `
- LinkedIn: ${i.linkedin_link}`),
        d += `

SENDER (USER) INFORMATION:`,
        o.full_name && (d += `
- Name: ${o.full_name}`),
        o.title && (d += `
- Current Title: ${o.title}`),
        o.company && (d += `
- Current Company: ${o.company}`),
        o.location && (d += `
- Location: ${o.location}`),
        o.college && (d += `
- Education: ${o.college}`),
        o.experience_years && (d += `
- Years of Experience: ${o.experience_years}`),
        o.phone && (d += `
- Phone: ${o.phone}`),
        o.linkedin && (d += `
- LinkedIn: ${o.linkedin}`),
        o.available_for_work !== void 0 && (d += `
- Available for Work: ${o.available_for_work ? "Yes" : "No"}`),
        o.bio && (d += `
- Bio: ${o.bio}`),
        o.skills && o.skills.length > 0) {
            const h = o.skills.slice(0, 4);
            d += `
- Key Skills: ${h.join(", ")}`
        }
        if (o.experiences && o.experiences.length > 0) {
            d += `
- Most Recent Experience:`;
            const h = o.experiences[0];
            if (d += `
  Current: ${h.job_title} at ${h.company}`,
            h.start_date || h.end_date) {
                const g = h.start_date ? new Date(h.start_date).getFullYear() : "Unknown"
                  , b = h.is_current ? "Present" : h.end_date ? new Date(h.end_date).getFullYear() : "Unknown";
                d += ` (${g} - ${b})`
            }
            if (h.achievements && h.achievements.length > 0) {
                const g = h.achievements[0];
                d += `
  Top Achievement: ${g}`
            }
            if (h.skills_used && h.skills_used.length > 0) {
                const g = h.skills_used.slice(0, 3);
                d += `
  Key Skills: ${g.join(", ")}`
            }
        }
        return o.github && (d += `
- GitHub: ${o.github}`),
        o.website && (d += `
- Website: ${o.website}`),
        c && c.length > 0 && (d += `

TARGET ROLES:
The sender is looking for opportunities in the following roles: ${c.join(", ")}`),
        a && (d += `

CUSTOM INSTRUCTIONS:
${a}`),
        d += `

CRITICAL INSTRUCTIONS - MUST FOLLOW EXACTLY:

DATA USAGE REQUIREMENTS:
1. Use ONLY the real information provided above - NO fake data, names, companies, or achievements
2. Use the recipient's exact name: "${i.name}"
3. ${i.company ? `Use the recipient's exact company: "${i.company}"` : "Do not mention a company name if not provided"}
4. ${o.full_name ? `Use the sender's exact name: "${o.full_name}"` : "Use a generic closing if sender name not provided"}
5. ${o.linkedin ? `Include the sender's LinkedIn profile: "${o.linkedin}"` : "Do not include LinkedIn if not provided"}
6. Use only the real achievements, skills, and experience data provided above
7. If any information is missing, do not make it up - work with what is available

EMAIL GENERATION REQUIREMENTS:
1. Uses ONLY the real data provided above (1-2 key points maximum from actual achievements)
2. References "${i.name}" and ${i.company ? `"${i.company}"` : "their role"} naturally
3. Highlights ONE specific real achievement or skill from the provided data
4. Sounds natural and conversational, not like a template
6. Ends with a specific, actionable call to action
7. Keeps the total length under 100-120 words maximum
8. ${c && c.length > 0 ? `Focus on alignment with these target roles: ${c.join(", ")}` : "Focus on general professional value"}

STRICT FORMATTING REQUIREMENTS:
- Start with "Hi ${i.name},"
- Use \\n\\n to separate paragraphs (maximum 2-3 paragraphs)
- Structure: Greeting → One context sentence → Key real value/achievement → Call to action → Brief closing
- Each paragraph: 1-2 sentences maximum
- NO placeholder text like [Name], [Company], [Title] - use only real data
- Get straight to the point immediately
- End with "Best regards,\\n ${o.full_name || "[Your name]"}"
- ${o.phone ? `Include in signature: "Phone: ${o.phone}"` : ""}
- ${o.linkedin ? `Include LinkedIn in signature: "LinkedIn: ${o.linkedin}"` : ""}

CONTENT FOCUS:
- Choose the SINGLE most impressive real achievement or skill from the provided data
- Mention "${i.company || "their company"}" naturally for personalization
- Focus on actual value you can provide based on real experience
- Make every word count - eliminate redundancy
- Never invent or assume information not explicitly provided

Remember to respond in the exact JSON format specified in the system prompt.`,
        d
    }
    parseAIResponse(e) {
        try {
            const i = e.trim()
              , o = i.match(/\{[\s\S]*\}/)
              , a = o ? o[0] : i
              , c = JSON.parse(a);
            if (!c.subject || !c.body)
                throw new Error("Invalid AI response format");
            return {
                subject: c.subject,
                body: c.body,
                reasoning: c.reasoning || ""
            }
        } catch (i) {
            console.error("Error parsing AI response:", i);
            const a = e.split(`
`).filter(h => h.trim()).find(h => h.toLowerCase().includes("subject:"))
              , c = a ? a.replace(/subject:/i, "").trim() : "Follow-up"
              , d = e.includes("{") ? "Hi " + (e.includes("Hi") ? e.split("Hi")[1] : e) : e;
            return {
                subject: c,
                body: d.trim(),
                reasoning: "AI response parsing failed, using fallback format"
            }
        }
    }
    async generateEmailContent(e, i) {
        return {
            subject: `Partnership Opportunity - ${e}`,
            body: `Hi ${i},

I hope this email finds you well. I'm reaching out because I believe there might be a great opportunity for collaboration between ${e} and Hirebuddy.

Hirebuddy is a job search and automation platform with a growing community of 10,000+ students and working professionals. We collaborate with top-tier institutions like Master's Union and Tetr School of Business, and have successfully helped numerous companies hire qualified talent quickly and efficiently.

I'd love to explore how we can work together to help ${e} find the right talent while providing our community with exciting opportunities.

Would you be open to a brief 15-minute call this week to discuss this further?

Best regards,
Sarvagya Kulshreshtha
Co-Founder, Hirebuddy (https://hirebuddy.net)
Phone: +91 92893 93231
Email: kulshreshthasarv@gmail.com`
        }
    }
    isValidEmail(e) {
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e)
    }
    formatAsPlainText(e) {
        if (!e || typeof e != "string")
            return "No content provided";
        let i = e.trim();
        return i = i.replace(/\r\n/g, `
`).replace(/\r/g, `
`).replace(/\n{3,}/g, `

`).replace(/[ \t]+$/gm, ""),
        i.split(/\n\n+/).filter(a => a.trim().length > 0).join(`

`)
    }
    formatAsHtml(e) {
        if (!e || typeof e != "string")
            return "<p>No content provided</p>";
        let i = e.trim();
        return i = i.replace(/\r\n/g, `
`).replace(/\r/g, `
`).replace(/\n{3,}/g, `

`).replace(/[ \t]+$/gm, ""),
        `
      <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; font-size: 14px; line-height: 1.6; color: #333333; max-width: 600px; margin: 0; padding: 0;">
        ${i.split(/\n\n+/).filter(d => d.trim().length > 0).map(d => `<p style="margin: 0 0 16px 0; line-height: 1.5;">${d.trim().replace(/\n/g, "<br>").replace(/^(Best regards|Best,|Sincerely,|Thanks,|Thank you,|Regards,)/i, "<br><br>$1").replace(/^--$/gm, "<br>--<br>").replace(/^[\s]*[-*•]\s+/gm, "&nbsp;&nbsp;• ").replace(/^[\s]*(\d+\.)\s+/gm, "&nbsp;&nbsp;$1 ").replace(/(https?:\/\/[^\s<>"{}|\\^`[\]]+)/gi, '<a href="$1" style="color: #0066cc; text-decoration: underline;">$1</a>').replace(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/gi, '<a href="mailto:$1" style="color: #0066cc; text-decoration: underline;">$1</a>')}</p>`).join("")}
      </div>
    `.trim()
    }
    previewEmailHtml(e) {
        return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Email Preview</title>
        <style>
          body {
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
          }
          .email-container {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            padding: 0;
            margin: 0 auto;
            max-width: 600px;
          }
          .email-header {
            background-color: #f8f9fa;
            padding: 16px 24px;
            border-bottom: 1px solid #e9ecef;
            border-radius: 8px 8px 0 0;
            font-weight: 600;
            color: #495057;
          }
          .email-body {
            padding: 24px;
          }
        </style>
      </head>
      <body>
        <div class="email-container">
          <div class="email-header">Email Preview</div>
          <div class="email-body">
            ${this.formatAsHtml(e)}
          </div>
        </div>
      </body>
      </html>
    `.trim()
    }
    getFormattedEmailContent(e, i=this.useHtmlEmails) {
        return i ? this.formatAsHtml(e) : this.formatAsPlainText(e)
    }
    isHtmlEmailsEnabled() {
        return this.useHtmlEmails
    }
    setHtmlEmailsEnabled(e) {
        this.useHtmlEmails = e
    }
}
const emailService = new EmailService
  , EmailPreview = ({subject: s, body: e, children: i}) => {
    const o = emailService.formatAsHtml(e)
      , a = emailService.formatAsPlainText(e);
    return jsxRuntimeExports.jsxs(Dialog, {
        children: [jsxRuntimeExports.jsx(DialogTrigger, {
            asChild: !0,
            children: i || jsxRuntimeExports.jsxs(Button, {
                variant: "outline",
                size: "sm",
                className: "flex items-center gap-2",
                children: [jsxRuntimeExports.jsx(Eye, {
                    className: "h-4 w-4"
                }), "Preview Email"]
            })
        }), jsxRuntimeExports.jsxs(DialogContent, {
            className: "max-w-4xl max-h-[80vh] overflow-y-auto",
            children: [jsxRuntimeExports.jsx(DialogHeader, {
                children: jsxRuntimeExports.jsxs(DialogTitle, {
                    className: "flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx(Eye, {
                        className: "h-5 w-5"
                    }), "Email Preview"]
                })
            }), jsxRuntimeExports.jsxs("div", {
                className: "space-y-4",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "bg-gray-50 p-4 rounded-lg border",
                    children: jsxRuntimeExports.jsx("div", {
                        className: "space-y-2 text-sm",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "flex",
                            children: [jsxRuntimeExports.jsx("span", {
                                className: "font-medium text-gray-600 w-16",
                                children: "Subject:"
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-gray-900",
                                children: s || "No subject"
                            })]
                        })
                    })
                }), jsxRuntimeExports.jsx("div", {
                    className: "bg-green-50 border border-green-200 rounded-lg p-3",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex items-start gap-2",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "text-green-600 mt-0.5",
                            children: "✅"
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "text-sm text-green-800",
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Email Format:"
                            }), " Now sending as concise HTML emails (100-120 words) with proper formatting. Each email gets straight to the point with one key achievement and a clear call to action."]
                        })]
                    })
                }), jsxRuntimeExports.jsxs("div", {
                    className: "border rounded-lg overflow-hidden",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "bg-green-100 px-4 py-2 text-sm font-medium text-green-800 border-b",
                        children: "✅ Email Content (HTML Format - Currently Sent)"
                    }), jsxRuntimeExports.jsx("div", {
                        className: "p-6 bg-white",
                        children: jsxRuntimeExports.jsx("div", {
                            dangerouslySetInnerHTML: {
                                __html: o
                            },
                            className: "prose prose-sm max-w-none"
                        })
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "border rounded-lg overflow-hidden",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "bg-gray-100 px-4 py-2 text-sm font-medium text-gray-700 border-b",
                        children: "📋 Email Content (Plain Text - Backup Format)"
                    }), jsxRuntimeExports.jsx("div", {
                        className: "p-6 bg-white",
                        children: jsxRuntimeExports.jsx("pre", {
                            className: "whitespace-pre-wrap font-sans text-sm text-gray-900 leading-relaxed",
                            children: a
                        })
                    })]
                }), jsxRuntimeExports.jsxs("details", {
                    className: "bg-gray-50 rounded-lg",
                    children: [jsxRuntimeExports.jsx("summary", {
                        className: "px-4 py-2 text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100",
                        children: "View HTML Source (for debugging)"
                    }), jsxRuntimeExports.jsx("div", {
                        className: "p-4 border-t",
                        children: jsxRuntimeExports.jsx("pre", {
                            className: "text-xs bg-gray-800 text-green-400 p-3 rounded overflow-x-auto",
                            children: jsxRuntimeExports.jsx("code", {
                                children: o
                            })
                        })
                    })]
                }), jsxRuntimeExports.jsxs("details", {
                    className: "bg-gray-50 rounded-lg",
                    children: [jsxRuntimeExports.jsx("summary", {
                        className: "px-4 py-2 text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100",
                        children: "View Original Input (Before Formatting)"
                    }), jsxRuntimeExports.jsx("div", {
                        className: "p-4 border-t",
                        children: jsxRuntimeExports.jsx("pre", {
                            className: "text-sm whitespace-pre-wrap text-gray-700 bg-white p-3 rounded border",
                            children: e
                        })
                    })]
                })]
            }), jsxRuntimeExports.jsx("div", {
                className: "flex justify-end gap-2 pt-4 border-t",
                children: jsxRuntimeExports.jsx(Button, {
                    variant: "outline",
                    onClick: () => window.open("data:text/html," + encodeURIComponent(emailService.previewEmailHtml(e)), "_blank"),
                    children: "Open in New Tab"
                })
            })]
        })]
    })
}
  , SimpleEmailComposer = ({selectedContacts: s, onSendEmail: e, onClose: i, isOpen: o, sending: a=!1}) => {
    const [c,d] = reactExports.useState("")
      , [h,g] = reactExports.useState("")
      , [b,_] = reactExports.useState(!1)
      , [$,_e] = reactExports.useState(!1)
      , [tt,rt] = reactExports.useState(!1)
      , [et,it] = reactExports.useState(null)
      , [st,nt] = reactExports.useState(null)
      , [lt,dt] = reactExports.useState([])
      , [ot,at] = reactExports.useState(!0)
      , [ht,pt] = reactExports.useState({
        emailType: "job_application",
        tone: "professional",
        customInstructions: "",
        targetRoles: []
    })
      , [gt,wt] = reactExports.useState("")
      , {user: yt} = useAuth()
      , {toast: Rt} = useToast();
    reactExports.useEffect( () => {
        (async () => {
            if (at(!0),
            yt != null && yt.id)
                try {
                    const [vt,bt] = await Promise.all([ProfileService.getProfile(yt.id), ProfileService.getUserExperiences(yt.id)]);
                    if (vt) {
                        const Tt = {
                            full_name: vt.full_name,
                            title: vt.title,
                            company: vt.company,
                            location: vt.location,
                            bio: vt.bio,
                            skills: vt.skills,
                            experience_years: vt.experience_years,
                            college: vt.college,
                            linkedin: vt.linkedin,
                            github: vt.github,
                            website: vt.website,
                            phone: vt.phone,
                            available_for_work: vt.available_for_work,
                            experiences: bt.map(Yt => ({
                                job_title: Yt.job_title,
                                company: Yt.company,
                                location: Yt.location,
                                start_date: Yt.start_date,
                                end_date: Yt.end_date,
                                is_current: Yt.is_current,
                                description: Yt.description,
                                achievements: Yt.achievements,
                                skills_used: Yt.skills_used
                            }))
                        };
                        it(Tt),
                        nt(vt)
                    }
                    dt(bt || [])
                } catch (vt) {
                    console.error("Error loading user profile:", vt)
                }
            at(!1)
        }
        )()
    }
    , [yt == null ? void 0 : yt.id]);
    const Mt = async () => {
        var vt, bt;
        if (s.length === 0) {
            Rt({
                title: "No Recipients",
                description: "Cannot generate AI email without selected contacts.",
                variant: "destructive"
            });
            return
        }
        const kt = s[0];
        _e(!0);
        try {
            const Tt = {
                full_name: (et == null ? void 0 : et.full_name) || ((vt = yt == null ? void 0 : yt.user_metadata) == null ? void 0 : vt.full_name) || ((bt = yt == null ? void 0 : yt.email) == null ? void 0 : bt.split("@")[0]),
                title: et == null ? void 0 : et.title,
                company: et == null ? void 0 : et.company,
                location: et == null ? void 0 : et.location,
                bio: et == null ? void 0 : et.bio,
                skills: et == null ? void 0 : et.skills,
                experience_years: et == null ? void 0 : et.experience_years,
                college: et == null ? void 0 : et.college,
                linkedin: et == null ? void 0 : et.linkedin,
                github: et == null ? void 0 : et.github,
                website: et == null ? void 0 : et.website
            }
              , Yt = {
                contact: {
                    name: kt.name,
                    email: kt.email,
                    company: kt.company,
                    position: kt.title
                },
                userProfile: Tt,
                emailType: ht.emailType,
                tone: ht.tone,
                customInstructions: ht.customInstructions || void 0,
                targetRoles: ht.targetRoles.length > 0 ? ht.targetRoles : void 0
            }
              , Nt = await emailService.generateAIEmail(Yt);
            d(Nt.subject),
            g(Nt.body),
            Rt({
                title: "AI Email Generated",
                description: "Email content has been generated successfully. Review and edit as needed."
            }),
            Nt.reasoning && console.log("AI Generation Reasoning:", Nt.reasoning)
        } catch (Tt) {
            console.error("Failed to generate AI email:", Tt),
            Rt({
                title: "AI Generation Failed",
                description: `Error: ${Ttinstanceof Error ? Tt.message : "Could not generate email content"}`,
                variant: "destructive"
            })
        } finally {
            _e(!1)
        }
    }
      , ss = async () => {
        const kt = checkEmailPermission(st, lt);
        if (!kt.canSendEmail) {
            Rt({
                title: "Profile Incomplete",
                description: `Your profile is ${kt.completionPercentage}% complete. You need at least 85% to send emails.`,
                variant: "destructive"
            });
            return
        }
        if (!c.trim() || !h.trim()) {
            Rt({
                title: "Missing Content",
                description: "Please fill in both subject and message",
                variant: "destructive"
            });
            return
        }
        await e(c, h, b)
    }
      , zt = kt => kt.split(" ").map(vt => vt.charAt(0)).join("").toUpperCase().slice(0, 2)
      , At = () => {
        a || i()
    }
    ;
    return jsxRuntimeExports.jsx(Dialog, {
        open: o,
        onOpenChange: At,
        children: jsxRuntimeExports.jsxs(DialogContent, {
            className: "max-w-4xl max-h-[90vh] overflow-y-auto",
            children: [jsxRuntimeExports.jsx(DialogHeader, {
                children: jsxRuntimeExports.jsxs(DialogTitle, {
                    className: "flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx(Mail, {
                        className: "h-5 w-5 text-[#d35c65]"
                    }), "Compose Email"]
                })
            }), jsxRuntimeExports.jsxs("div", {
                className: "space-y-6",
                children: [jsxRuntimeExports.jsxs(Card, {
                    children: [jsxRuntimeExports.jsx(CardHeader, {
                        children: jsxRuntimeExports.jsxs(CardTitle, {
                            className: "flex items-center gap-2 text-lg",
                            children: [jsxRuntimeExports.jsx(Users, {
                                className: "h-4 w-4"
                            }), "Recipients (", s.length, ")"]
                        })
                    }), jsxRuntimeExports.jsx(CardContent, {
                        children: jsxRuntimeExports.jsx("div", {
                            className: "flex flex-wrap gap-2 max-h-32 overflow-y-auto",
                            children: s.map(kt => jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2 bg-[#d35c65]/10 border border-[#d35c65]/20 rounded-lg px-3 py-2",
                                children: [jsxRuntimeExports.jsx(Avatar, {
                                    className: "w-6 h-6",
                                    children: jsxRuntimeExports.jsx(AvatarFallback, {
                                        className: "bg-[#d35c65]/20 text-[#d35c65] text-xs font-semibold",
                                        children: zt(kt.name)
                                    })
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex flex-col min-w-0",
                                    children: [jsxRuntimeExports.jsx("span", {
                                        className: "text-sm font-medium text-gray-900 truncate",
                                        children: kt.name
                                    }), jsxRuntimeExports.jsx("span", {
                                        className: "text-xs text-gray-600 truncate",
                                        children: kt.email
                                    })]
                                })]
                            }, kt.id))
                        })
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between",
                    children: [jsxRuntimeExports.jsx(Label, {
                        className: "text-sm font-medium",
                        children: "AI Email Generation"
                    }), jsxRuntimeExports.jsxs(Button, {
                        variant: "outline",
                        size: "sm",
                        onClick: () => rt(!tt),
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Settings, {
                            className: "h-4 w-4"
                        }), tt ? "Hide" : "Show", " AI Settings"]
                    })]
                }), tt && jsxRuntimeExports.jsxs(Card, {
                    className: "bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200",
                    children: [jsxRuntimeExports.jsx(CardHeader, {
                        className: "pb-3",
                        children: jsxRuntimeExports.jsxs(CardTitle, {
                            className: "text-sm flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(Sparkles, {
                                className: "h-4 w-4 text-purple-600"
                            }), "AI Email Generation Settings"]
                        })
                    }), jsxRuntimeExports.jsxs(CardContent, {
                        className: "space-y-3",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "grid grid-cols-1 gap-3",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    htmlFor: "tone",
                                    className: "text-xs",
                                    children: "Tone"
                                }), jsxRuntimeExports.jsxs(Select, {
                                    value: ht.tone,
                                    onValueChange: kt => pt(vt => ({
                                        ...vt,
                                        tone: kt
                                    })),
                                    children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                        className: "h-8",
                                        children: jsxRuntimeExports.jsx(SelectValue, {})
                                    }), jsxRuntimeExports.jsxs(SelectContent, {
                                        children: [jsxRuntimeExports.jsx(SelectItem, {
                                            value: "professional",
                                            children: "Professional"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "friendly",
                                            children: "Friendly"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "formal",
                                            children: "Formal"
                                        }), jsxRuntimeExports.jsx(SelectItem, {
                                            value: "casual",
                                            children: "Casual"
                                        })]
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    htmlFor: "target-roles",
                                    className: "text-xs",
                                    children: "Target Roles (Optional)"
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsxs(Select, {
                                        onValueChange: kt => {
                                            if (kt === "Other") {
                                                ht.targetRoles.includes("Other") || pt(vt => ({
                                                    ...vt,
                                                    targetRoles: [...vt.targetRoles, "Other"]
                                                }));
                                                return
                                            }
                                            ht.targetRoles.includes(kt) || pt(vt => ({
                                                ...vt,
                                                targetRoles: [...vt.targetRoles, kt]
                                            }))
                                        }
                                        ,
                                        children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                            className: "h-8",
                                            children: jsxRuntimeExports.jsx(SelectValue, {
                                                placeholder: "Select roles you're looking for..."
                                            })
                                        }), jsxRuntimeExports.jsx(SelectContent, {
                                            children: JOB_ROLES.map(kt => jsxRuntimeExports.jsx(SelectItem, {
                                                value: kt,
                                                children: kt
                                            }, kt))
                                        })]
                                    }), ht.targetRoles.includes("Other") && jsxRuntimeExports.jsx(Input, {
                                        placeholder: "Enter custom role...",
                                        value: gt,
                                        onChange: kt => wt(kt.target.value),
                                        onKeyDown: kt => {
                                            kt.key === "Enter" && gt.trim() && (pt(vt => ({
                                                ...vt,
                                                targetRoles: vt.targetRoles.filter(bt => bt !== "Other").concat([gt.trim()])
                                            })),
                                            wt(""))
                                        }
                                        ,
                                        className: "h-8"
                                    }), ht.targetRoles.length > 0 && jsxRuntimeExports.jsx("div", {
                                        className: "flex flex-wrap gap-1",
                                        children: ht.targetRoles.map(kt => jsxRuntimeExports.jsxs(Badge, {
                                            variant: "secondary",
                                            className: "text-xs h-6 px-2",
                                            children: [kt, jsxRuntimeExports.jsx("button", {
                                                onClick: () => {
                                                    pt(vt => ({
                                                        ...vt,
                                                        targetRoles: vt.targetRoles.filter(bt => bt !== kt)
                                                    }))
                                                }
                                                ,
                                                className: "ml-1 hover:bg-gray-300 rounded-full w-3 h-3 flex items-center justify-center",
                                                children: jsxRuntimeExports.jsx(X, {
                                                    className: "h-2 w-2"
                                                })
                                            })]
                                        }, kt))
                                    })]
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-xs text-gray-500",
                                    children: "Select the types of roles you're looking for to personalize your email"
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-2",
                            children: [jsxRuntimeExports.jsxs(Label, {
                                htmlFor: "custom-instructions",
                                className: "text-xs flex items-center gap-1",
                                children: [jsxRuntimeExports.jsx(Lightbulb, {
                                    className: "h-3 w-3"
                                }), "Custom Instructions (Optional)"]
                            }), jsxRuntimeExports.jsx(Textarea, {
                                id: "custom-instructions",
                                placeholder: "e.g., Mention our mutual connection John, focus on React expertise, include portfolio link...",
                                value: ht.customInstructions,
                                onChange: kt => pt(vt => ({
                                    ...vt,
                                    customInstructions: kt.target.value
                                })),
                                className: "h-16 text-xs"
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-xs text-gray-500",
                                children: "Add specific instructions to customize the AI-generated email"
                            })]
                        }), jsxRuntimeExports.jsx(Button, {
                            onClick: Mt,
                            disabled: s.length === 0 || $,
                            className: "w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700",
                            children: $ ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                    className: "h-4 w-4 mr-2 animate-spin"
                                }), "Generating AI Email..."]
                            }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                children: [jsxRuntimeExports.jsx(Sparkles, {
                                    className: "h-4 w-4 mr-2"
                                }), "Generate AI Email"]
                            })
                        })]
                    })]
                }), !ot && ( () => {
                    const kt = checkEmailPermission(st, lt);
                    return kt.canSendEmail ? null : jsxRuntimeExports.jsx(ProfileCompletionWarning, {
                        completionPercentage: kt.completionPercentage,
                        missingFields: kt.missingFields,
                        requiredPercentage: 85
                    })
                }
                )(), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-4",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "space-y-2",
                        children: [jsxRuntimeExports.jsx(Label, {
                            htmlFor: "subject",
                            className: "text-sm font-medium",
                            children: "Subject *"
                        }), jsxRuntimeExports.jsx(Input, {
                            id: "subject",
                            placeholder: "Enter email subject...",
                            value: c,
                            onChange: kt => d(kt.target.value),
                            disabled: a
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center space-x-2",
                        children: [jsxRuntimeExports.jsx(Switch, {
                            id: "html-mode",
                            checked: b,
                            onCheckedChange: _,
                            disabled: a
                        }), jsxRuntimeExports.jsx(Label, {
                            htmlFor: "html-mode",
                            className: "text-sm",
                            children: "HTML Format"
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-2",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between",
                            children: [jsxRuntimeExports.jsx(Label, {
                                htmlFor: "body",
                                className: "text-sm font-medium",
                                children: "Message *"
                            }), jsxRuntimeExports.jsx(EmailPreview, {
                                subject: c,
                                body: h,
                                children: jsxRuntimeExports.jsxs(Button, {
                                    variant: "outline",
                                    size: "sm",
                                    disabled: !h,
                                    className: "flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(Eye, {
                                        className: "h-4 w-4"
                                    }), "Preview"]
                                })
                            })]
                        }), jsxRuntimeExports.jsx(Textarea, {
                            id: "body",
                            placeholder: b ? "Enter your HTML email content..." : "Enter your email message... or use AI generation to create personalized content based on your profile and the selected contacts.",
                            value: h,
                            onChange: kt => g(kt.target.value),
                            rows: 12,
                            disabled: a,
                            className: "min-h-[200px]"
                        }), b && jsxRuntimeExports.jsx("p", {
                            className: "text-xs text-gray-500",
                            children: "You can use HTML tags like <b>, <i>, <a>, <br>, etc."
                        }), $ && jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2 text-sm text-purple-600 bg-purple-50 p-2 rounded",
                            children: [jsxRuntimeExports.jsx(Sparkles, {
                                className: "h-4 w-4 animate-pulse"
                            }), "AI is generating personalized email content based on your profile and contact information..."]
                        })]
                    }), h && jsxRuntimeExports.jsxs(Card, {
                        className: "bg-gray-50",
                        children: [jsxRuntimeExports.jsx(CardHeader, {
                            children: jsxRuntimeExports.jsx(CardTitle, {
                                className: "text-sm",
                                children: "Preview"
                            })
                        }), jsxRuntimeExports.jsx(CardContent, {
                            children: jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2 text-sm",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    children: [jsxRuntimeExports.jsx("strong", {
                                        children: "Subject:"
                                    }), " ", c || "(No subject)"]
                                }), jsxRuntimeExports.jsxs("div", {
                                    children: [jsxRuntimeExports.jsx("strong", {
                                        children: "Message:"
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "mt-2 p-3 bg-white border rounded-md",
                                        children: b ? jsxRuntimeExports.jsx("div", {
                                            dangerouslySetInnerHTML: {
                                                __html: h
                                            }
                                        }) : jsxRuntimeExports.jsx("div", {
                                            className: "whitespace-pre-wrap",
                                            children: h
                                        })
                                    })]
                                })]
                            })
                        })]
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between pt-4 border-t",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "text-sm text-gray-600",
                        children: ["Ready to send to ", s.length, " contact", s.length !== 1 ? "s" : ""]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-3",
                        children: [jsxRuntimeExports.jsx(Button, {
                            variant: "outline",
                            onClick: At,
                            disabled: a,
                            children: "Cancel"
                        }), jsxRuntimeExports.jsx(Button, {
                            onClick: ss,
                            disabled: !c.trim() || !h.trim() || a || !checkEmailPermission(st, lt).canSendEmail,
                            className: "bg-[#d35c65] hover:bg-[#b24e55] text-white",
                            children: a ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                    className: "h-4 w-4 mr-2 animate-spin"
                                }), "Sending..."]
                            }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                children: [jsxRuntimeExports.jsx(Send, {
                                    className: "h-4 w-4 mr-2"
                                }), "Send Email"]
                            })
                        })]
                    })]
                })]
            })]
        })
    })
}
;
class ConversationService {
    async getContactsWithConversations() {
        try {
            const {data: e} = await supabase.auth.getUser();
            if (!e.user)
                throw new Error("User not authenticated");
            console.log("Getting contacts with conversations for user:", e.user.email);
            let i = [];
            try {
                const {data: _, error: $} = await supabase.from("useremaillog").select("*").eq("user_id", e.user.email).order("sent_at", {
                    ascending: !1
                });
                $ ? console.warn("Could not fetch from useremaillog table:", $) : (i = _ || [],
                console.log("Found email logs for conversations:", i.length))
            } catch (_) {
                console.warn("useremaillog table might not exist:", _)
            }
            let o = [];
            try {
                const {data: _, error: $} = await supabase.from("followuplogs").select("*").eq("user_id", e.user.email).order("sent_at", {
                    ascending: !1
                });
                $ ? console.warn("Could not fetch from followuplogs table:", $) : (o = _ || [],
                console.log("Found follow-up logs for conversations:", o.length))
            } catch (_) {
                console.warn("followuplogs table might not exist:", _)
            }
            const {contactsService: a} = await __vitePreload(async () => {
                const {contactsService: _} = await Promise.resolve().then( () => contactsService$1);
                return {
                    contactsService: _
                }
            }
            , void 0)
              , c = await a.getContacts();
            if (c.length === 0)
                return console.warn("No contacts found in the system"),
                [];
            console.log("Total contacts in system:", c.length);
            const d = new Map;
            c.forEach(_ => {
                d.set(_.email.toLowerCase(), _)
            }
            );
            const h = []
              , g = new Set
              , b = new Set;
            i.forEach(_ => {
                _.to && b.add(_.to.toLowerCase())
            }
            ),
            o.forEach(_ => {
                _.to && b.add(_.to.toLowerCase())
            }
            );
            for (const _ of b) {
                if (g.has(_))
                    continue;
                const $ = d.get(_);
                if ($) {
                    const _e = i.filter(ot => {
                        var at;
                        return ((at = ot.to) == null ? void 0 : at.toLowerCase()) === _
                    }
                    ).length
                      , tt = o.filter(ot => {
                        var at;
                        return ((at = ot.to) == null ? void 0 : at.toLowerCase()) === _
                    }
                    );
                    let rt = 0;
                    tt.forEach(ot => {
                        const at = parseInt(ot.followup_count) || 1;
                        rt += at
                    }
                    );
                    const et = _e + rt
                      , it = i.filter(ot => {
                        var at;
                        return ((at = ot.to) == null ? void 0 : at.toLowerCase()) === _
                    }
                    ).sort( (ot, at) => new Date(at.sent_at).getTime() - new Date(ot.sent_at).getTime())
                      , st = o.filter(ot => {
                        var at;
                        return ((at = ot.to) == null ? void 0 : at.toLowerCase()) === _
                    }
                    ).sort( (ot, at) => new Date(at.sent_at).getTime() - new Date(ot.sent_at).getTime())
                      , nt = it.length > 0 ? it[0].sent_at : ""
                      , lt = st.length > 0 ? st[0].sent_at : "";
                    let dt = nt;
                    lt && (!nt || new Date(lt) > new Date(nt)) && (dt = lt),
                    h.push({
                        id: $.id,
                        name: $.name,
                        email: $.email,
                        company: $.company,
                        position: $.title,
                        last_email_at: dt,
                        email_count: et,
                        status: "active"
                    }),
                    g.add(_)
                } else if (!g.has(_)) {
                    const _e = i.filter(ot => {
                        var at;
                        return ((at = ot.to) == null ? void 0 : at.toLowerCase()) === _
                    }
                    ).length
                      , tt = o.filter(ot => {
                        var at;
                        return ((at = ot.to) == null ? void 0 : at.toLowerCase()) === _
                    }
                    );
                    let rt = 0;
                    tt.forEach(ot => {
                        const at = parseInt(ot.followup_count) || 1;
                        rt += at
                    }
                    );
                    const et = _e + rt
                      , it = i.filter(ot => {
                        var at;
                        return ((at = ot.to) == null ? void 0 : at.toLowerCase()) === _
                    }
                    ).sort( (ot, at) => new Date(at.sent_at).getTime() - new Date(ot.sent_at).getTime())
                      , st = o.filter(ot => {
                        var at;
                        return ((at = ot.to) == null ? void 0 : at.toLowerCase()) === _
                    }
                    ).sort( (ot, at) => new Date(at.sent_at).getTime() - new Date(ot.sent_at).getTime())
                      , nt = it.length > 0 ? it[0].sent_at : ""
                      , lt = st.length > 0 ? st[0].sent_at : "";
                    let dt = nt;
                    lt && (!nt || new Date(lt) > new Date(nt)) && (dt = lt),
                    h.push({
                        id: `email-${_}`,
                        name: _.split("@")[0],
                        email: _,
                        company: void 0,
                        position: void 0,
                        last_email_at: dt,
                        email_count: et,
                        status: "active"
                    }),
                    g.add(_)
                }
            }
            return console.log("Total contacts with conversations:", h.length),
            h.sort( (_, $) => _.last_email_at ? $.last_email_at ? new Date($.last_email_at).getTime() - new Date(_.last_email_at).getTime() : -1 : 1)
        } catch (e) {
            return console.error("Error fetching contacts with conversations:", e),
            []
        }
    }
    async getConversationHistory(e, i, o) {
        try {
            const {data: a} = await supabase.auth.getUser();
            if (!a.user)
                throw new Error("User not authenticated");
            if (console.log("Getting conversation history for contact:", e),
            !o && e)
                try {
                    if (e.startsWith("email-"))
                        o = e.replace("email-", "");
                    else {
                        const {contactsService: d} = await __vitePreload(async () => {
                            const {contactsService: b} = await Promise.resolve().then( () => contactsService$1);
                            return {
                                contactsService: b
                            }
                        }
                        , void 0)
                          , g = (await d.getContacts()).find(b => b.id === e);
                        g && (o = g.email)
                    }
                } catch (d) {
                    console.warn("Could not fetch contact details:", d)
                }
            i || (i = a.user.email),
            console.log("Conversation params:", {
                senderEmail: i,
                recipientEmail: o
            });
            let c = [];
            if (o) {
                try {
                    const {data: d, error: h} = await supabase.from("useremaillog").select("*").eq("user_id", a.user.email).eq("to", o).order("sent_at", {
                        ascending: !0
                    });
                    if (!h && d) {
                        console.log("Found email logs from useremaillog:", d.length);
                        const g = d.map( (b, _) => {
                            var $;
                            return {
                                id: (($ = b.id) == null ? void 0 : $.toString()) || `log-${_}-${Date.now()}`,
                                user_id: a.user.id,
                                contact_id: e,
                                sender_email: i || a.user.email,
                                recipient_email: o,
                                subject: b.subject || "No Subject",
                                body: b.body || b.content || "",
                                email_type: "outbound",
                                thread_id: b.threadId,
                                message_id: b.messageId,
                                sent_at: b.sent_at,
                                created_at: b.sent_at,
                                updated_at: b.sent_at,
                                metadata: {
                                    reference: b.reference,
                                    source: "useremaillog"
                                }
                            }
                        }
                        );
                        c = [...c, ...g]
                    }
                } catch (d) {
                    console.warn("Could not fetch from useremaillog table:", d)
                }
                try {
                    const {data: d, error: h} = await supabase.from("followuplogs").select("*").eq("user_id", a.user.email).eq("to", o).order("sent_at", {
                        ascending: !0
                    });
                    if (!h && d) {
                        console.log("Found follow-up logs from followuplogs:", d.length);
                        const g = d.map( (b, _) => {
                            var $;
                            return {
                                id: (($ = b.id) == null ? void 0 : $.toString()) || `followup-${_}-${Date.now()}`,
                                user_id: a.user.id,
                                contact_id: e,
                                sender_email: i || a.user.email,
                                recipient_email: o,
                                subject: b.subject || `Follow-up Email ${b.followup_count ? `(#${b.followup_count})` : ""}`,
                                body: b.body || b.content || "",
                                email_type: "follow_up",
                                thread_id: void 0,
                                message_id: void 0,
                                sent_at: b.sent_at,
                                created_at: b.sent_at,
                                updated_at: b.sent_at,
                                metadata: {
                                    followup_count: b.followup_count,
                                    source: "followuplogs"
                                }
                            }
                        }
                        );
                        c = [...c, ...g]
                    }
                } catch (d) {
                    console.warn("Could not fetch from followuplogs table:", d)
                }
            }
            try {
                const {data: d, error: h} = await supabase.from("email_conversations").select("*").eq("user_id", a.user.id).eq("contact_id", e).order("sent_at", {
                    ascending: !0
                });
                if (!h && d) {
                    console.log("Found local conversations:", d.length);
                    const g = new Set(c.map(_ => _.message_id).filter(Boolean))
                      , b = d.filter(_ => !_.message_id || !g.has(_.message_id));
                    c = [...c, ...b]
                }
            } catch (d) {
                console.warn("Could not fetch from local email_conversations table:", d)
            }
            if (i && o)
                try {
                    console.log("Fetching conversation thread from Gmail API:", {
                        senderEmail: i,
                        recipientEmail: o
                    });
                    const d = await emailService.getEmailConversation({
                        sender: i,
                        to: o
                    });
                    if (console.log("Gmail API response:", d),
                    d && d.length > 0) {
                        const h = d.map( (_, $) => {
                            var st, nt, lt;
                            let _e = "inbound";
                            const tt = ((st = _.from) == null ? void 0 : st.toLowerCase()) === (i == null ? void 0 : i.toLowerCase())
                              , rt = ((nt = _.from) == null ? void 0 : nt.toLowerCase()) === (o == null ? void 0 : o.toLowerCase());
                            tt ? _e = "outbound" : rt && (_e = "inbound");
                            const et = _.from || (tt ? i : o)
                              , it = _.to || (tt ? o : i);
                            return console.log("Processing Gmail email:", {
                                emailId: _.id,
                                from: _.from,
                                to: _.to,
                                subject: _.subject,
                                emailType: _e,
                                bodyLength: ((lt = _.body) == null ? void 0 : lt.length) || 0
                            }),
                            {
                                id: _.id || `gmail-${$}-${Date.now()}`,
                                user_id: a.user.id,
                                contact_id: e,
                                sender_email: et,
                                recipient_email: it,
                                subject: _.subject || "No Subject",
                                body: _.body || "",
                                email_type: _e,
                                thread_id: _.thread_id || _.id,
                                message_id: _.id,
                                sent_at: _.date || new Date().toISOString(),
                                created_at: _.date || new Date().toISOString(),
                                updated_at: _.date || new Date().toISOString(),
                                metadata: {
                                    source: "gmail_api",
                                    original_from: _.from,
                                    original_to: _.to,
                                    is_reply: rt,
                                    thread_id: _.thread_id
                                }
                            }
                        }
                        )
                          , g = new Set(c.map(_ => _.message_id).filter(Boolean))
                          , b = h.filter(_ => !(_.message_id && g.has(_.message_id)));
                        console.log("Adding new Gmail conversations (including replies):", b.length),
                        c = c.filter(_ => _.message_id ? !h.some($ => $.message_id === _.message_id) : !0),
                        c = [...c, ...h]
                    }
                } catch (d) {
                    console.warn("Could not fetch from Gmail API:", d)
                }
            return console.log("Total conversations found:", c.length),
            c.sort( (d, h) => new Date(d.sent_at).getTime() - new Date(h.sent_at).getTime())
        } catch (a) {
            return console.error("Error fetching conversation history:", a),
            []
        }
    }
    async saveEmailToConversation(e) {
        try {
            const {data: i} = await supabase.auth.getUser();
            if (!i.user)
                throw new Error("User not authenticated");
            const {data: o, error: a} = await supabase.from("email_conversations").insert({
                user_id: i.user.id,
                contact_id: e.contact_id,
                sender_email: e.sender_email,
                recipient_email: e.recipient_email,
                subject: e.subject,
                body: e.body,
                email_type: e.email_type,
                thread_id: e.thread_id,
                message_id: e.message_id,
                sent_at: e.sent_at || new Date().toISOString()
            }).select().single();
            if (a) {
                if (a.code === "PGRST116" || a.message.includes("does not exist"))
                    return console.warn("Conversation tables not yet created. Email not saved to conversation history."),
                    null;
                throw a
            }
            return o
        } catch (i) {
            return console.error("Error saving email to conversation:", i),
            null
        }
    }
    async markEmailAsRead(e) {
        try {
            const {data: i} = await supabase.auth.getUser();
            if (!i.user)
                throw new Error("User not authenticated");
            const {error: o} = await supabase.from("email_conversations").update({
                read_at: new Date().toISOString()
            }).eq("id", e).eq("user_id", i.user.id);
            if (o)
                throw o
        } catch (i) {
            throw console.error("Error marking email as read:", i),
            i
        }
    }
    async archiveConversation(e) {
        try {
            const {data: i} = await supabase.auth.getUser();
            if (!i.user)
                throw new Error("User not authenticated");
            const {error: o} = await supabase.from("conversation_threads").update({
                status: "archived"
            }).eq("contact_id", e).eq("user_id", i.user.id);
            if (o)
                throw o
        } catch (i) {
            throw console.error("Error archiving conversation:", i),
            i
        }
    }
    async searchConversations(e) {
        try {
            const {data: i} = await supabase.auth.getUser();
            if (!i.user)
                throw new Error("User not authenticated");
            const {data: o, error: a} = await supabase.from("email_conversations").select("*").eq("user_id", i.user.id).or(`subject.ilike.%${e}%,body.ilike.%${e}%`).order("sent_at", {
                ascending: !1
            });
            if (a)
                throw a;
            return o || []
        } catch (i) {
            throw console.error("Error searching conversations:", i),
            i
        }
    }
    async getConversationStats(e) {
        try {
            const {data: i} = await supabase.auth.getUser();
            if (!i.user)
                throw new Error("User not authenticated");
            let o = "";
            if (e.startsWith("email-"))
                o = e.replace("email-", "");
            else
                try {
                    const {contactsService: _} = await __vitePreload(async () => {
                        const {contactsService: tt} = await Promise.resolve().then( () => contactsService$1);
                        return {
                            contactsService: tt
                        }
                    }
                    , void 0)
                      , _e = (await _.getContacts()).find(tt => tt.id === e);
                    _e && (o = _e.email)
                } catch (_) {
                    return console.warn("Could not fetch contact details for stats:", _),
                    {
                        total_emails: 0,
                        outbound_emails: 0,
                        inbound_emails: 0,
                        last_email_date: "",
                        first_email_date: ""
                    }
                }
            let a = 0
              , c = [];
            try {
                const {data: _, error: $} = await supabase.from("useremaillog").select("sent_at").eq("user_id", i.user.email).eq("to", o);
                !$ && _ && (a = _.length,
                c = _.map(_e => _e.sent_at))
            } catch (_) {
                console.warn("Could not get useremaillog stats:", _)
            }
            try {
                const {data: _, error: $} = await supabase.from("followuplogs").select("followup_count, sent_at").eq("user_id", i.user.email).eq("to", o);
                if (!$ && _) {
                    const _e = _.reduce( (tt, rt) => tt + (parseInt(rt.followup_count) || 1), 0);
                    a += _e,
                    c = [...c, ..._.map(tt => tt.sent_at)]
                }
            } catch (_) {
                console.warn("Could not get followuplogs stats:", _)
            }
            const d = 0
              , h = a + d;
            c.sort();
            const g = c.length > 0 ? c[0] : ""
              , b = c.length > 0 ? c[c.length - 1] : "";
            return {
                total_emails: h,
                outbound_emails: a,
                inbound_emails: d,
                first_email_date: g,
                last_email_date: b
            }
        } catch (i) {
            return console.error("Error getting conversation stats:", i),
            {
                total_emails: 0,
                outbound_emails: 0,
                inbound_emails: 0,
                last_email_date: "",
                first_email_date: ""
            }
        }
    }
    async getConversationThreads() {
        try {
            const {data: e} = await supabase.auth.getUser();
            if (!e.user)
                throw new Error("User not authenticated");
            const {data: i, error: o} = await supabase.from("conversation_threads").select(`
          *,
          contact:contacts(*)
        `).eq("user_id", e.user.id).order("last_email_at", {
                ascending: !1
            });
            if (o)
                throw o;
            return i || []
        } catch (e) {
            return console.error("Error fetching conversation threads:", e),
            []
        }
    }
    async createConversationThread(e, i) {
        try {
            const {data: o} = await supabase.auth.getUser();
            if (!o.user)
                throw new Error("User not authenticated");
            const {data: a, error: c} = await supabase.from("conversation_threads").insert({
                user_id: o.user.id,
                contact_id: e,
                subject: i,
                last_email_at: new Date().toISOString(),
                email_count: 1,
                status: "active"
            }).select().single();
            if (c)
                throw c;
            return a
        } catch (o) {
            return console.error("Error creating conversation thread:", o),
            null
        }
    }
    async updateConversationThread(e, i) {
        try {
            const {data: o} = await supabase.auth.getUser();
            if (!o.user)
                throw new Error("User not authenticated");
            const {error: a} = await supabase.from("conversation_threads").update(i).eq("id", e).eq("user_id", o.user.id);
            if (a)
                throw a
        } catch (o) {
            throw console.error("Error updating conversation thread:", o),
            o
        }
    }
}
const conversationService = new ConversationService
  , WhatsAppLikeConversation = ({contacts: s}) => {
    const [e,i] = reactExports.useState([])
      , [o,a] = reactExports.useState(!1)
      , [c,d] = reactExports.useState([])
      , [h,g] = reactExports.useState("")
      , [b,_] = reactExports.useState(!1)
      , [$,_e] = reactExports.useState("")
      , [tt,rt] = reactExports.useState(new Set)
      , [et,it] = reactExports.useState(null)
      , [st,nt] = reactExports.useState("")
      , {toast: lt} = useToast()
      , {user: dt} = useAuth()
      , ot = reactExports.useRef(null)
      , at = c.filter(At => At.name.toLowerCase().includes($.toLowerCase()) || At.company && At.company.toLowerCase().includes($.toLowerCase()) || At.position && At.position.toLowerCase().includes($.toLowerCase()))
      , ht = () => {
        var At;
        (At = ot.current) == null || At.scrollIntoView({
            behavior: "smooth"
        })
    }
    ;
    reactExports.useEffect( () => {
        ht()
    }
    , [e]),
    reactExports.useEffect( () => {
        pt()
    }
    , []);
    const pt = async () => {
        _(!0);
        try {
            console.log("Loading conversation contacts...");
            const At = await conversationService.getContactsWithConversations();
            console.log("Loaded conversation contacts:", At),
            d(At),
            At.length === 0 && lt({
                title: "No Conversations Found",
                description: "You haven't had any email conversations yet. Send some emails first to see conversation history."
            })
        } catch (At) {
            console.error("Failed to load conversation contacts:", At),
            lt({
                title: "Failed to Load Conversations",
                description: `Error: ${Atinstanceof Error ? At.message : "Unknown error"}`,
                variant: "destructive"
            })
        } finally {
            _(!1)
        }
    }
      , gt = async At => {
        a(!0);
        try {
            const kt = c.find(Nt => Nt.id === At)
              , vt = dt == null ? void 0 : dt.email
              , bt = kt == null ? void 0 : kt.email;
            console.log("Loading conversation history for:", {
                contactId: At,
                senderEmail: vt,
                recipientEmail: bt,
                selectedContact: kt
            });
            const Tt = await conversationService.getConversationHistory(At, vt, bt);
            console.log("Loaded conversation history:", Tt),
            console.log("Email types breakdown:");
            const Yt = Tt.reduce( (Nt, jt) => (Nt[jt.email_type] = (Nt[jt.email_type] || 0) + 1,
            Nt), {});
            if (console.log("Email types:", Yt),
            Tt.forEach( (Nt, jt) => {
                var xt, Et;
                console.log(`${jt + 1}. [${Nt.email_type.toUpperCase()}] From: ${Nt.sender_email} | Subject: ${Nt.subject} | Body length: ${((xt = Nt.body) == null ? void 0 : xt.length) || 0} | Source: ${((Et = Nt.metadata) == null ? void 0 : Et.source) || "unknown"}`)
            }
            ),
            i(Tt),
            Tt.length > 0) {
                const Nt = Tt.find(xt => xt.email_type === "outbound")
                  , jt = (Nt == null ? void 0 : Nt.subject) || Tt[0].subject || "No Subject";
                nt(jt)
            } else
                nt("");
            try {
                const Nt = await conversationService.getConversationStats(At);
                it(Nt)
            } catch (Nt) {
                console.warn("Could not load conversation stats:", Nt),
                it(null)
            }
            Tt.length === 0 && lt({
                title: "No Conversation History",
                description: "No email conversation found with this contact. Try sending an email first."
            })
        } catch (kt) {
            console.error("Error loading conversation history:", kt),
            lt({
                title: "Error",
                description: "Failed to load conversation history. Please try again.",
                variant: "destructive"
            })
        } finally {
            a(!1)
        }
    }
      , wt = At => At.split(" ").map(kt => kt.charAt(0)).join("").toUpperCase().slice(0, 2)
      , yt = At => {
        const kt = new Date(At)
          , bt = Math.abs(new Date().getTime() - kt.getTime()) / (1e3 * 60 * 60);
        return bt < 24 ? kt.toLocaleTimeString([], {
            hour: "2-digit",
            minute: "2-digit"
        }) : bt < 48 ? "Yesterday" : kt.toLocaleDateString()
    }
      , Rt = At => {
        navigator.clipboard.writeText(At),
        lt({
            title: "Copied to clipboard",
            description: "Email content copied successfully"
        })
    }
      , Mt = At => {
        const kt = new Set(tt);
        kt.has(At) ? kt.delete(At) : kt.add(At),
        rt(kt)
    }
      , ss = At => {
        const kt = tt.has(At.id)
          , vt = At.body || ""
          , bt = vt.length > 300
          , Tt = vt.replace(/<[^>]*>/g, "").replace(/&nbsp;/g, " ").trim()
          , Yt = bt && !kt ? Tt.substring(0, 300) + "..." : Tt;
        return jsxRuntimeExports.jsxs("div", {
            className: "space-y-2",
            children: [jsxRuntimeExports.jsx("div", {
                className: "whitespace-pre-wrap text-sm leading-relaxed",
                children: Yt
            }), bt && jsxRuntimeExports.jsx(Button, {
                variant: "ghost",
                size: "sm",
                onClick: () => Mt(At.id),
                className: "h-6 px-2 text-xs text-blue-600 hover:text-blue-800",
                children: kt ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [jsxRuntimeExports.jsx(ChevronUp, {
                        className: "h-3 w-3 mr-1"
                    }), "Show less"]
                }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [jsxRuntimeExports.jsx(ChevronDown, {
                        className: "h-3 w-3 mr-1"
                    }), "Show more"]
                })
            })]
        })
    }
      , zt = c.find(At => At.id === h);
    return jsxRuntimeExports.jsxs("div", {
        className: "flex h-[700px] bg-white rounded-lg shadow-sm border",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "w-80 border-r bg-gray-50 flex flex-col",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "p-4 border-b bg-white",
                children: [jsxRuntimeExports.jsx("h3", {
                    className: "font-semibold text-lg mb-3",
                    children: "Conversations"
                }), jsxRuntimeExports.jsxs("div", {
                    className: "relative",
                    children: [jsxRuntimeExports.jsx(Search, {
                        className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4"
                    }), jsxRuntimeExports.jsx(Input, {
                        placeholder: "Search conversations...",
                        value: $,
                        onChange: At => _e(At.target.value),
                        className: "pl-9"
                    })]
                })]
            }), jsxRuntimeExports.jsx(ScrollArea, {
                className: "flex-1",
                children: jsxRuntimeExports.jsx("div", {
                    className: "p-2 space-y-1",
                    children: b ? jsxRuntimeExports.jsxs("div", {
                        className: "text-center py-8 text-gray-500",
                        children: [jsxRuntimeExports.jsx(LoaderCircle, {
                            className: "h-8 w-8 mx-auto mb-2 animate-spin"
                        }), jsxRuntimeExports.jsx("p", {
                            children: "Loading conversations..."
                        })]
                    }) : at.length === 0 ? jsxRuntimeExports.jsxs("div", {
                        className: "text-center py-8 text-gray-500",
                        children: [jsxRuntimeExports.jsx(MessageSquare, {
                            className: "h-8 w-8 mx-auto mb-2 opacity-50"
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-sm font-medium",
                            children: "No conversations found"
                        }), c.length === 0 ? jsxRuntimeExports.jsx("p", {
                            className: "text-xs mt-1",
                            children: "Send emails to see conversations here"
                        }) : jsxRuntimeExports.jsx("p", {
                            className: "text-xs mt-1",
                            children: "No matches for your search"
                        })]
                    }) : at.map(At => jsxRuntimeExports.jsx("div", {
                        className: `p-3 rounded-lg cursor-pointer transition-all hover:bg-white ${h === At.id ? "bg-blue-50 border border-blue-200" : "hover:shadow-sm"}`,
                        onClick: () => {
                            g(At.id),
                            i([]),
                            it(null),
                            nt(""),
                            gt(At.id)
                        }
                        ,
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center space-x-3",
                            children: [jsxRuntimeExports.jsx(Avatar, {
                                className: "h-10 w-10",
                                children: jsxRuntimeExports.jsx(AvatarFallback, {
                                    className: "bg-blue-100 text-blue-700 font-medium",
                                    children: wt(At.name)
                                })
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex-1 min-w-0",
                                children: [jsxRuntimeExports.jsx("div", {
                                    className: "flex items-center justify-between",
                                    children: jsxRuntimeExports.jsx("h4", {
                                        className: "font-medium text-gray-900 truncate",
                                        children: At.name
                                    })
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-xs text-gray-500 truncate",
                                    children: At.email
                                }), At.company && jsxRuntimeExports.jsx("p", {
                                    className: "text-xs text-gray-400 truncate",
                                    children: At.company
                                }), At.last_email_at && jsxRuntimeExports.jsx("p", {
                                    className: "text-xs text-gray-400",
                                    children: yt(At.last_email_at)
                                })]
                            })]
                        })
                    }, At.id))
                })
            }), jsxRuntimeExports.jsx("div", {
                className: "p-3 border-t bg-white",
                children: jsxRuntimeExports.jsxs(Button, {
                    variant: "outline",
                    size: "sm",
                    onClick: pt,
                    disabled: b,
                    className: "w-full",
                    children: [b ? jsxRuntimeExports.jsx(LoaderCircle, {
                        className: "h-4 w-4 mr-2 animate-spin"
                    }) : jsxRuntimeExports.jsx(RefreshCw, {
                        className: "h-4 w-4 mr-2"
                    }), "Refresh"]
                })
            })]
        }), jsxRuntimeExports.jsx("div", {
            className: "flex-1 flex flex-col",
            children: zt ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [jsxRuntimeExports.jsx("div", {
                    className: "p-4 border-b bg-white",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-between",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center space-x-3",
                            children: [jsxRuntimeExports.jsx(Avatar, {
                                className: "h-10 w-10",
                                children: jsxRuntimeExports.jsx(AvatarFallback, {
                                    className: "bg-blue-100 text-blue-700 font-medium",
                                    children: wt(zt.name)
                                })
                            }), jsxRuntimeExports.jsxs("div", {
                                children: [jsxRuntimeExports.jsx("h3", {
                                    className: "font-semibold text-gray-900",
                                    children: zt.name
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-sm text-gray-500",
                                    children: zt.email
                                }), zt.company && jsxRuntimeExports.jsx("p", {
                                    className: "text-xs text-gray-400",
                                    children: zt.company
                                }), st && jsxRuntimeExports.jsx("p", {
                                    className: "text-sm font-medium text-blue-600 mt-1",
                                    children: st
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center space-x-2",
                            children: [et && jsxRuntimeExports.jsxs("div", {
                                className: "text-right text-xs text-gray-500",
                                children: [jsxRuntimeExports.jsxs("p", {
                                    children: [et.total_emails, " emails"]
                                }), jsxRuntimeExports.jsxs("p", {
                                    children: [et.outbound_emails, " sent, ", et.inbound_emails, " received"]
                                })]
                            }), jsxRuntimeExports.jsx(Button, {
                                variant: "outline",
                                size: "sm",
                                onClick: () => gt(h),
                                disabled: o,
                                children: o ? jsxRuntimeExports.jsx(LoaderCircle, {
                                    className: "h-3 w-3 animate-spin"
                                }) : jsxRuntimeExports.jsx(RefreshCw, {
                                    className: "h-3 w-3"
                                })
                            })]
                        })]
                    })
                }), jsxRuntimeExports.jsx(ScrollArea, {
                    className: "flex-1 p-4 bg-gray-50",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "space-y-4",
                        children: [o ? jsxRuntimeExports.jsxs("div", {
                            className: "text-center py-8 text-gray-500",
                            children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                className: "h-8 w-8 mx-auto mb-2 animate-spin"
                            }), jsxRuntimeExports.jsx("p", {
                                children: "Loading conversation..."
                            })]
                        }) : e.length === 0 ? jsxRuntimeExports.jsxs("div", {
                            className: "text-center py-8 text-gray-500",
                            children: [jsxRuntimeExports.jsx(MessageSquare, {
                                className: "h-8 w-8 mx-auto mb-2 opacity-50"
                            }), jsxRuntimeExports.jsx("p", {
                                children: "No messages yet"
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-sm",
                                children: "Start a conversation by sending an email"
                            })]
                        }) : e.filter(At => (At.body || "").replace(/<[^>]*>/g, "").replace(/&nbsp;/g, " ").trim().length > 0).map( (At, kt) => {
                            var Yt;
                            const vt = At.email_type === "outbound" || At.email_type === "follow_up" || At.sender_email && At.sender_email === (dt == null ? void 0 : dt.email)
                              , bt = new Date(At.sent_at)
                              , Tt = kt === 0 || new Date(((Yt = e.filter(Nt => (Nt.body || "").replace(/<[^>]*>/g, "").replace(/&nbsp;/g, " ").trim().length > 0)[kt - 1]) == null ? void 0 : Yt.sent_at) || At.sent_at).toDateString() !== bt.toDateString();
                            return jsxRuntimeExports.jsxs("div", {
                                children: [Tt && jsxRuntimeExports.jsx("div", {
                                    className: "flex items-center justify-center my-4",
                                    children: jsxRuntimeExports.jsx("div", {
                                        className: "bg-white px-3 py-1 rounded-full text-xs text-gray-500 border",
                                        children: bt.toLocaleDateString("en-US", {
                                            weekday: "long",
                                            year: "numeric",
                                            month: "long",
                                            day: "numeric"
                                        })
                                    })
                                }), jsxRuntimeExports.jsx("div", {
                                    className: `flex ${vt ? "justify-end" : "justify-start"} mb-2`,
                                    children: jsxRuntimeExports.jsx("div", {
                                        className: `max-w-[70%] ${vt ? "order-2" : "order-1"}`,
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: `rounded-2xl px-4 py-3 shadow-sm ${vt ? "bg-blue-500 text-white rounded-br-md" : "bg-white text-gray-900 rounded-bl-md border"}`,
                                            children: [ss(At), jsxRuntimeExports.jsxs("div", {
                                                className: "flex items-center justify-between mt-3 pt-2 border-t border-opacity-20",
                                                children: [jsxRuntimeExports.jsxs("div", {
                                                    className: `text-xs ${vt ? "text-blue-100" : "text-gray-500"}`,
                                                    children: [yt(At.sent_at), At.email_type === "follow_up" && jsxRuntimeExports.jsx(Badge, {
                                                        variant: "outline",
                                                        className: `ml-2 text-xs ${vt ? "border-blue-200 text-blue-100" : "border-orange-300 text-orange-600"}`,
                                                        children: "Follow-up"
                                                    }), At.email_type === "inbound" && jsxRuntimeExports.jsx(Badge, {
                                                        variant: "outline",
                                                        className: "ml-2 text-xs border-green-300 text-green-600",
                                                        children: "Reply"
                                                    })]
                                                }), jsxRuntimeExports.jsxs("div", {
                                                    className: "flex items-center space-x-2",
                                                    children: [jsxRuntimeExports.jsx(Button, {
                                                        variant: "ghost",
                                                        size: "sm",
                                                        onClick: () => Rt(At.body || ""),
                                                        className: `h-6 w-6 p-0 ${vt ? "text-blue-100 hover:text-white hover:bg-blue-600" : "text-gray-400 hover:text-gray-600"}`,
                                                        children: jsxRuntimeExports.jsx(Copy, {
                                                            className: "h-3 w-3"
                                                        })
                                                    }), vt && jsxRuntimeExports.jsx("div", {
                                                        className: `text-xs ${vt ? "text-blue-100" : "text-gray-500"}`,
                                                        children: jsxRuntimeExports.jsx(CheckCheck, {
                                                            className: "h-3 w-3"
                                                        })
                                                    })]
                                                })]
                                            })]
                                        })
                                    })
                                })]
                            }, At.id || kt)
                        }
                        ), jsxRuntimeExports.jsx("div", {
                            ref: ot
                        })]
                    })
                })]
            }) : jsxRuntimeExports.jsx("div", {
                className: "flex-1 flex items-center justify-center bg-gray-50",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "text-center text-gray-500",
                    children: [jsxRuntimeExports.jsx(MessageSquare, {
                        className: "h-12 w-12 mx-auto mb-4 opacity-50"
                    }), jsxRuntimeExports.jsx("h3", {
                        className: "text-lg font-medium mb-2",
                        children: "Select a conversation"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-sm",
                        children: "Choose a contact from the list to view your email conversation"
                    })]
                })
            })
        })]
    })
}
  , AWSEmailComposer = ({contacts: s, selectedContacts: e, onContactSelect: i, onSelectAll: o, onClearSelection: a}) => {
    var Es, Rs;
    const [c,d] = reactExports.useState({
        subject: "",
        body: "",
        senderEmail: "",
        attachResume: !1
    })
      , [h,g] = reactExports.useState({
        body: "",
        recipientEmail: ""
    })
      , [b,_] = reactExports.useState([])
      , [$,_e] = reactExports.useState("")
      , [tt,rt] = reactExports.useState(!1)
      , [et,it] = reactExports.useState({
        emailType: "job_application",
        tone: "professional",
        customInstructions: "",
        targetRoles: []
    })
      , [st,nt] = reactExports.useState({
        emailType: "follow_up",
        tone: "professional",
        customInstructions: "Keep this as a brief reminder, not a full introduction",
        targetRoles: []
    })
      , [lt,dt] = reactExports.useState("compose")
      , [ot,at] = reactExports.useState(!1)
      , [ht,pt] = reactExports.useState(!1)
      , [gt,wt] = reactExports.useState(!1)
      , [yt,Rt] = reactExports.useState(!1)
      , [Mt,ss] = reactExports.useState(null);
    reactExports.useState([]),
    reactExports.useState(!1);
    const [zt,At] = reactExports.useState([]);
    reactExports.useState("");
    const [kt,vt] = reactExports.useState(!1)
      , [bt,Tt] = reactExports.useState("")
      , [Yt,Nt] = reactExports.useState("")
      , [jt,xt] = reactExports.useState("")
      , [Et,Pt] = reactExports.useState(null)
      , [St,Bt] = reactExports.useState(null)
      , [os,ds] = reactExports.useState(null)
      , [js,ys] = reactExports.useState([])
      , [vs,Ss] = reactExports.useState(!0)
      , [_s,ns] = reactExports.useState(!1)
      , [xs,Lt] = reactExports.useState(!1)
      , [ts,ms] = reactExports.useState("");
    reactExports.useState(""),
    reactExports.useState(null);
    const {toast: hs} = useToast()
      , {user: bs} = useAuth();
    reactExports.useEffect( () => {
        bs != null && bs.email && d(as => ({
            ...as,
            senderEmail: bs.email
        }))
    }
    , [bs]),
    reactExports.useEffect( () => {
        bs != null && bs.id && Ms()
    }
    , [bs == null ? void 0 : bs.id]);
    const ks = s.filter(as => as.name.toLowerCase().includes(Yt.toLowerCase()) || as.company && as.company.toLowerCase().includes(Yt.toLowerCase()) || as.position && as.position.toLowerCase().includes(Yt.toLowerCase()))
      , Ts = b.filter(as => as.name.toLowerCase().includes(jt.toLowerCase()) || as.company && as.company.toLowerCase().includes(jt.toLowerCase()) || as.position && as.position.toLowerCase().includes(jt.toLowerCase()))
      , ls = as => {
        a(),
        i(as)
    }
      , Ds = as => {
        _e(as);
        const Ps = b.find(gs => gs.id === as);
        Ps && g(gs => ({
            ...gs,
            recipientEmail: Ps.email
        }))
    }
      , Ms = async () => {
        Ss(!0);
        try {
            if (bs != null && bs.id) {
                const [as,Ps] = await Promise.all([ProfileService.getProfile(bs.id), ProfileService.getUserExperiences(bs.id)]);
                as && (Pt({
                    full_name: as.full_name || "",
                    title: as.title || "",
                    company: as.company || "",
                    location: as.location || "",
                    bio: as.bio || "",
                    skills: as.skills || [],
                    experience_years: as.experience_years,
                    college: as.college,
                    linkedin: as.linkedin,
                    github: as.github,
                    website: as.website,
                    phone: as.phone,
                    available_for_work: as.available_for_work
                }),
                Bt(as),
                ds(as)),
                ys(Ps || [])
            }
        } catch (as) {
            console.error("Error loading user profile:", as)
        } finally {
            Ss(!1)
        }
    }
      , Hs = async () => {
        rt(!0);
        try {
            const Ps = (await contactsService.getContactsWithSentEmails()).map(gs => ({
                id: gs.id,
                name: gs.name,
                email: gs.email,
                company: gs.company,
                position: gs.title,
                linkedin_link: gs.linkedin_link,
                email_sent_on: gs.email_sent_on
            }));
            _(Ps),
            Ps.length === 0 && hs({
                title: "No follow-ups needed",
                description: "All contacts have been followed up within the last 24 hours, or you haven't sent any emails yet.",
                variant: "default"
            })
        } catch (as) {
            console.error("Error loading follow-up contacts:", as),
            hs({
                title: "Error loading contacts",
                description: "Failed to load contacts for follow-up. Please try again.",
                variant: "destructive"
            })
        } finally {
            rt(!1)
        }
    }
    ;
    reactExports.useEffect( () => {
        lt === "followup" && Hs(),
        lt === "conversation" && zs()
    }
    , [lt]),
    reactExports.useEffect( () => {
        Vs()
    }
    , [bs]),
    zt.filter(as => as.name.toLowerCase().includes(bt.toLowerCase()) || as.email.toLowerCase().includes(bt.toLowerCase()) || as.company && as.company.toLowerCase().includes(bt.toLowerCase()));
    const Vs = async () => {
        Rt(!0);
        try {
            const as = await emailService.testConnection();
            ss({
                connected: as.success,
                message: as.success ? "Email service ready" : as.message
            })
        } catch {
            ss({
                connected: !1,
                message: "Failed to connect to email service"
            })
        } finally {
            Rt(!1)
        }
    }
      , Xs = async () => {
        const as = checkEmailPermission(os, js);
        if (!as.canSendEmail) {
            hs({
                title: "Profile Incomplete",
                description: `Your profile is ${as.completionPercentage}% complete. You need at least 85% to send emails.`,
                variant: "destructive"
            });
            return
        }
        if (!c.subject.trim()) {
            hs({
                title: "Subject Required",
                description: "Please enter a subject line.",
                variant: "destructive"
            });
            return
        }
        if (!c.body.trim()) {
            hs({
                title: "Email Body Required",
                description: "Please enter the email content.",
                variant: "destructive"
            });
            return
        }
        if (e.length === 0) {
            hs({
                title: "No Recipient Selected",
                description: "Please select a contact to send the email to.",
                variant: "destructive"
            });
            return
        }
        if (e.length > 1) {
            hs({
                title: "Multiple Recipients Selected",
                description: "Please select only one contact at a time.",
                variant: "destructive"
            });
            return
        }
        if (!c.senderEmail) {
            hs({
                title: "Sender Email Required",
                description: "Please enter your email address.",
                variant: "destructive"
            });
            return
        }
        at(!0);
        const Ps = s.find(gs => gs.id === e[0]);
        try {
            if (Ps) {
                let gs = c.body;
                if (c.attachResume && (St != null && St.resume_url)) {
                    const Fs = `

---
📄 Resume: ${St.resume_url}
(Click the link above to view or download my resume)`;
                    gs = c.body + Fs
                }
                const es = emailService.isHtmlEmailsEnabled()
                  , ws = {
                    sender: c.senderEmail,
                    to: Ps.email,
                    subject: c.subject,
                    body: emailService.getFormattedEmailContent(gs),
                    isHtml: es,
                    content_type: es ? "text/html; charset=utf-8" : "text/plain; charset=utf-8",
                    mime_type: es ? "text/html" : "text/plain"
                }
                  , Is = await emailService.sendEmail(ws);
                try {
                    await conversationService.saveEmailToConversation({
                        contact_id: Ps.id,
                        sender_email: c.senderEmail,
                        recipient_email: Ps.email,
                        subject: c.subject,
                        body: c.body,
                        email_type: "outbound",
                        message_id: Is.messageId,
                        thread_id: Is.threadId
                    })
                } catch (Fs) {
                    console.warn("Failed to save email to conversation history:", Fs)
                }
                hs({
                    title: "Email Sent Successfully",
                    description: `Email sent to ${Ps.name} (${Ps.email})${c.attachResume ? " with resume link included" : ""}`
                }),
                d(Fs => ({
                    ...Fs,
                    subject: "",
                    body: "",
                    attachResume: !1
                })),
                a(),
                lt === "conversation" && await zs()
            }
        } catch (gs) {
            console.error("Failed to send email:", gs),
            hs({
                title: "Email Failed",
                description: `Failed to send email: ${gsinstanceof Error ? gs.message : "Unknown error"}`,
                variant: "destructive"
            })
        } finally {
            at(!1)
        }
    }
      , $s = async () => {
        const as = checkEmailPermission(os, js);
        if (!as.canSendEmail) {
            hs({
                title: "Profile Incomplete",
                description: `Your profile is ${as.completionPercentage}% complete. You need at least 85% to send emails.`,
                variant: "destructive"
            });
            return
        }
        if (!h.body.trim()) {
            hs({
                title: "Message Required",
                description: "Please enter a follow-up message.",
                variant: "destructive"
            });
            return
        }
        if (!$) {
            hs({
                title: "Recipient Required",
                description: "Please select a contact to send the follow-up to.",
                variant: "destructive"
            });
            return
        }
        if (!c.senderEmail) {
            hs({
                title: "Sender Email Required",
                description: "Please enter your email address.",
                variant: "destructive"
            });
            return
        }
        at(!0);
        try {
            const Ps = b.find(Is => Is.id === $);
            if (!Ps)
                throw new Error("Selected contact not found");
            const gs = emailService.isHtmlEmailsEnabled()
              , es = {
                sender: c.senderEmail,
                to: Ps.email,
                body: emailService.getFormattedEmailContent(h.body),
                isHtml: gs,
                content_type: gs ? "text/html; charset=utf-8" : "text/plain; charset=utf-8",
                mime_type: gs ? "text/html" : "text/plain"
            }
              , ws = await emailService.sendFollowUp(es);
            try {
                await conversationService.saveEmailToConversation({
                    contact_id: Ps.id,
                    sender_email: c.senderEmail,
                    recipient_email: Ps.email,
                    subject: `Re: Follow-up to ${Ps.name}`,
                    body: h.body,
                    email_type: "follow_up"
                })
            } catch (Is) {
                console.warn("Failed to save follow-up to conversation history:", Is)
            }
            hs({
                title: "Follow-up Sent Successfully",
                description: ws.message || `Follow-up sent to ${Ps.name} (${Ps.email})`
            }),
            g({
                body: "",
                recipientEmail: ""
            }),
            _e(""),
            lt === "conversation" && await zs()
        } catch (Ps) {
            console.error("Failed to send follow-up:", Ps),
            hs({
                title: "Follow-up Failed",
                description: `Failed to send follow-up: ${Psinstanceof Error ? Ps.message : "Unknown error"}`,
                variant: "destructive"
            })
        } finally {
            at(!1)
        }
    }
      , zs = async () => {
        vt(!0);
        try {
            console.log("Loading conversation contacts...");
            const as = await conversationService.getContactsWithConversations();
            console.log("Loaded conversation contacts:", as),
            At(as),
            as.length === 0 ? hs({
                title: "No Conversations Found",
                description: "You haven't had any email conversations yet. Send some emails first to see conversation history."
            }) : hs({
                title: "Contacts Loaded",
                description: `Found ${as.length} contact${as.length !== 1 ? "s" : ""} with conversation history.`
            })
        } catch (as) {
            console.error("Failed to load conversation contacts:", as),
            hs({
                title: "Failed to Load Conversations",
                description: `Error: ${asinstanceof Error ? as.message : "Unknown error"}`,
                variant: "destructive"
            })
        } finally {
            vt(!1)
        }
    }
      , Zs = async () => {
        var Ps, gs;
        if (e.length === 0) {
            hs({
                title: "No Contact Selected",
                description: "Please select a contact first.",
                variant: "destructive"
            });
            return
        }
        const as = s.find(es => es.id === e[0]);
        if (as) {
            pt(!0);
            try {
                const es = {
                    full_name: (Et == null ? void 0 : Et.full_name) || ((Ps = bs == null ? void 0 : bs.user_metadata) == null ? void 0 : Ps.full_name) || ((gs = bs == null ? void 0 : bs.email) == null ? void 0 : gs.split("@")[0]),
                    title: Et == null ? void 0 : Et.title,
                    company: Et == null ? void 0 : Et.company,
                    location: Et == null ? void 0 : Et.location,
                    bio: Et == null ? void 0 : Et.bio,
                    skills: Et == null ? void 0 : Et.skills,
                    experience_years: Et == null ? void 0 : Et.experience_years,
                    college: Et == null ? void 0 : Et.college,
                    linkedin: Et == null ? void 0 : Et.linkedin,
                    github: Et == null ? void 0 : Et.github,
                    website: Et == null ? void 0 : Et.website,
                    phone: Et == null ? void 0 : Et.phone,
                    available_for_work: Et == null ? void 0 : Et.available_for_work
                }
                  , ws = {
                    contact: {
                        name: as.name,
                        email: as.email,
                        company: as.company,
                        position: as.position,
                        linkedin_link: as.linkedin_link
                    },
                    userProfile: es,
                    emailType: et.emailType,
                    tone: et.tone,
                    customInstructions: et.customInstructions || void 0,
                    targetRoles: et.targetRoles.length > 0 ? et.targetRoles : void 0
                }
                  , Is = await emailService.generateAIEmail(ws);
                d(Fs => ({
                    ...Fs,
                    subject: Is.subject,
                    body: Is.body
                })),
                hs({
                    title: "AI Email Generated",
                    description: "Email content has been generated successfully. Review and edit as needed."
                }),
                Is.reasoning && console.log("AI Generation Reasoning:", Is.reasoning)
            } catch (es) {
                console.error("Failed to generate AI email:", es),
                hs({
                    title: "AI Generation Failed",
                    description: `Error: ${esinstanceof Error ? es.message : "Could not generate email content"}`,
                    variant: "destructive"
                })
            } finally {
                pt(!1)
            }
        }
    }
      , sr = async () => {
        var Ps, gs;
        if (!$) {
            hs({
                title: "No Contact Selected",
                description: "Please select a contact first.",
                variant: "destructive"
            });
            return
        }
        const as = b.find(es => es.id === $);
        if (as) {
            wt(!0);
            try {
                const es = {
                    full_name: (Et == null ? void 0 : Et.full_name) || ((Ps = bs == null ? void 0 : bs.user_metadata) == null ? void 0 : Ps.full_name) || ((gs = bs == null ? void 0 : bs.email) == null ? void 0 : gs.split("@")[0]),
                    title: Et == null ? void 0 : Et.title,
                    company: Et == null ? void 0 : Et.company,
                    location: Et == null ? void 0 : Et.location,
                    bio: Et == null ? void 0 : Et.bio,
                    skills: Et == null ? void 0 : Et.skills,
                    experience_years: Et == null ? void 0 : Et.experience_years,
                    college: Et == null ? void 0 : Et.college,
                    linkedin: Et == null ? void 0 : Et.linkedin,
                    github: Et == null ? void 0 : Et.github,
                    website: Et == null ? void 0 : Et.website,
                    phone: Et == null ? void 0 : Et.phone,
                    available_for_work: Et == null ? void 0 : Et.available_for_work
                }
                  , ws = {
                    contact: {
                        name: as.name,
                        email: as.email,
                        company: as.company,
                        position: as.position,
                        linkedin_link: as.linkedin_link
                    },
                    userProfile: es,
                    emailType: st.emailType,
                    tone: st.tone,
                    customInstructions: st.customInstructions || void 0,
                    targetRoles: st.targetRoles.length > 0 ? st.targetRoles : void 0
                }
                  , Is = await emailService.generateAIFollowUp(ws);
                g(Fs => ({
                    ...Fs,
                    body: Is.body
                })),
                hs({
                    title: "AI Follow-up Generated",
                    description: "Follow-up email content has been generated successfully. Review and edit as needed."
                }),
                Is.reasoning && console.log("AI Follow-up Generation Reasoning:", Is.reasoning)
            } catch (es) {
                console.error("Failed to generate AI follow-up:", es),
                hs({
                    title: "AI Generation Failed",
                    description: `Error: ${esinstanceof Error ? es.message : "Could not generate follow-up content"}`,
                    variant: "destructive"
                })
            } finally {
                wt(!1)
            }
        }
    }
      , As = e.length > 0 ? s.find(as => as.id === e[0]) : null;
    return jsxRuntimeExports.jsxs("div", {
        className: "space-y-3 md:space-y-6",
        children: [jsxRuntimeExports.jsx(Alert, {
            className: Mt != null && Mt.connected ? "border-green-200 bg-green-50" : "border-yellow-200 bg-yellow-50",
            children: jsxRuntimeExports.jsxs("div", {
                className: "flex items-center space-x-2",
                children: [yt ? jsxRuntimeExports.jsx(LoaderCircle, {
                    className: "h-4 w-4 animate-spin"
                }) : Mt != null && Mt.connected ? jsxRuntimeExports.jsx(CircleCheckBig, {
                    className: "h-4 w-4 text-green-600"
                }) : jsxRuntimeExports.jsx(TriangleAlert, {
                    className: "h-4 w-4 text-yellow-600"
                }), jsxRuntimeExports.jsx(AlertDescription, {
                    className: Mt != null && Mt.connected ? "text-green-800" : "text-yellow-800",
                    children: (Mt == null ? void 0 : Mt.message) || "Checking connection..."
                })]
            })
        }), jsxRuntimeExports.jsxs("div", {
            className: "flex space-x-0.5 md:space-x-1 bg-gray-100 p-0.5 md:p-1 rounded-lg",
            children: [jsxRuntimeExports.jsx("button", {
                onClick: () => dt("compose"),
                className: `flex-1 h-8 md:h-9 px-1.5 md:px-3 text-xs md:text-sm font-medium rounded-md transition-colors ${lt === "compose" ? "bg-white text-gray-900 shadow-sm" : "text-gray-600 hover:text-gray-900 hover:bg-gray-50"}`,
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-center gap-1 md:gap-2",
                    children: [jsxRuntimeExports.jsx(Mail, {
                        className: "h-3 w-3 md:h-4 md:w-4"
                    }), jsxRuntimeExports.jsx("span", {
                        className: "hidden sm:inline",
                        children: "Compose"
                    }), jsxRuntimeExports.jsx("span", {
                        className: "sm:hidden",
                        children: "Comp"
                    })]
                })
            }), jsxRuntimeExports.jsx("button", {
                onClick: () => dt("followup"),
                className: `flex-1 h-8 md:h-9 px-1.5 md:px-3 text-xs md:text-sm font-medium rounded-md transition-colors ${lt === "followup" ? "bg-white text-gray-900 shadow-sm" : "text-gray-600 hover:text-gray-900 hover:bg-gray-50"}`,
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-center gap-1 md:gap-2",
                    children: [jsxRuntimeExports.jsx(MessageSquare, {
                        className: "h-3 w-3 md:h-4 md:w-4"
                    }), jsxRuntimeExports.jsx("span", {
                        className: "hidden sm:inline",
                        children: "Follow-up"
                    }), jsxRuntimeExports.jsx("span", {
                        className: "sm:hidden",
                        children: "Follow"
                    })]
                })
            }), jsxRuntimeExports.jsx("button", {
                onClick: () => dt("conversation"),
                className: `flex-1 h-8 md:h-9 px-1.5 md:px-3 text-xs md:text-sm font-medium rounded-md transition-colors ${lt === "conversation" ? "bg-white text-gray-900 shadow-sm" : "text-gray-600 hover:text-gray-900 hover:bg-gray-50"}`,
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-center gap-1 md:gap-2",
                    children: [jsxRuntimeExports.jsx(User, {
                        className: "h-3 w-3 md:h-4 md:w-4"
                    }), jsxRuntimeExports.jsx("span", {
                        className: "hidden sm:inline",
                        children: "Conversation"
                    }), jsxRuntimeExports.jsx("span", {
                        className: "sm:hidden",
                        children: "Chat"
                    })]
                })
            })]
        }), jsxRuntimeExports.jsxs(Card, {
            children: [jsxRuntimeExports.jsx(CardHeader, {
                children: jsxRuntimeExports.jsx(CardTitle, {
                    className: "text-sm",
                    children: "Email Configuration"
                })
            }), jsxRuntimeExports.jsx(CardContent, {
                children: jsxRuntimeExports.jsxs("div", {
                    className: "space-y-2",
                    children: [jsxRuntimeExports.jsx(Label, {
                        htmlFor: "sender-email",
                        children: "Your Email Address"
                    }), jsxRuntimeExports.jsx(Input, {
                        id: "sender-email",
                        type: "email",
                        placeholder: "your-email@gmail.com",
                        value: c.senderEmail,
                        disabled: !0,
                        className: "bg-gray-50 text-gray-700"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-xs text-gray-500",
                        children: "This is automatically set to your authenticated account email"
                    })]
                })
            })]
        }), lt === "compose" && jsxRuntimeExports.jsxs("div", {
            className: "grid grid-cols-1 lg:grid-cols-2 gap-6",
            children: [jsxRuntimeExports.jsxs(Card, {
                children: [jsxRuntimeExports.jsxs(CardHeader, {
                    children: [jsxRuntimeExports.jsxs(CardTitle, {
                        className: "flex items-center space-x-2",
                        children: [jsxRuntimeExports.jsx(Mail, {
                            className: "h-5 w-5"
                        }), jsxRuntimeExports.jsx("span", {
                            children: "Compose Email"
                        })]
                    }), jsxRuntimeExports.jsx(CardDescription, {
                        children: "Send emails using your email automation system"
                    })]
                }), jsxRuntimeExports.jsxs(CardContent, {
                    className: "space-y-4",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-between",
                        children: [jsxRuntimeExports.jsx(Label, {
                            className: "text-sm font-medium",
                            children: "AI Email Generation"
                        }), jsxRuntimeExports.jsxs(Button, {
                            variant: "outline",
                            size: "sm",
                            onClick: () => ns(!_s),
                            className: "flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(Settings, {
                                className: "h-4 w-4"
                            }), _s ? "Hide" : "Show", " AI Settings"]
                        })]
                    }), _s && jsxRuntimeExports.jsxs(Card, {
                        className: "bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200",
                        children: [jsxRuntimeExports.jsx(CardHeader, {
                            className: "pb-3",
                            children: jsxRuntimeExports.jsxs(CardTitle, {
                                className: "text-sm flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(Sparkles, {
                                    className: "h-4 w-4 text-purple-600"
                                }), "AI Email Generation Settings"]
                            })
                        }), jsxRuntimeExports.jsxs(CardContent, {
                            className: "space-y-3",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "grid grid-cols-1 gap-3",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        htmlFor: "tone",
                                        className: "text-xs",
                                        children: "Tone"
                                    }), jsxRuntimeExports.jsxs(Select, {
                                        value: et.tone,
                                        onValueChange: as => it(Ps => ({
                                            ...Ps,
                                            tone: as
                                        })),
                                        children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                            className: "h-8",
                                            children: jsxRuntimeExports.jsx(SelectValue, {})
                                        }), jsxRuntimeExports.jsxs(SelectContent, {
                                            children: [jsxRuntimeExports.jsx(SelectItem, {
                                                value: "professional",
                                                children: "Professional"
                                            }), jsxRuntimeExports.jsx(SelectItem, {
                                                value: "friendly",
                                                children: "Friendly"
                                            }), jsxRuntimeExports.jsx(SelectItem, {
                                                value: "formal",
                                                children: "Formal"
                                            }), jsxRuntimeExports.jsx(SelectItem, {
                                                value: "casual",
                                                children: "Casual"
                                            })]
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        htmlFor: "target-roles",
                                        className: "text-xs",
                                        children: "Target Roles (Optional)"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "space-y-2",
                                        children: [jsxRuntimeExports.jsxs(Select, {
                                            onValueChange: as => {
                                                if (as === "Other") {
                                                    et.targetRoles.includes("Other") || it(Ps => ({
                                                        ...Ps,
                                                        targetRoles: [...Ps.targetRoles, "Other"]
                                                    }));
                                                    return
                                                }
                                                et.targetRoles.includes(as) || it(Ps => ({
                                                    ...Ps,
                                                    targetRoles: [...Ps.targetRoles, as]
                                                }))
                                            }
                                            ,
                                            children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                                className: "h-8",
                                                children: jsxRuntimeExports.jsx(SelectValue, {
                                                    placeholder: "Select roles you're looking for..."
                                                })
                                            }), jsxRuntimeExports.jsx(SelectContent, {
                                                children: JOB_ROLES.map(as => jsxRuntimeExports.jsx(SelectItem, {
                                                    value: as,
                                                    children: as
                                                }, as))
                                            })]
                                        }), et.targetRoles.includes("Other") && jsxRuntimeExports.jsx(Input, {
                                            placeholder: "Enter custom role...",
                                            value: ts,
                                            onChange: as => ms(as.target.value),
                                            onKeyDown: as => {
                                                as.key === "Enter" && ts.trim() && (it(Ps => ({
                                                    ...Ps,
                                                    targetRoles: Ps.targetRoles.filter(gs => gs !== "Other").concat([ts.trim()])
                                                })),
                                                ms(""))
                                            }
                                            ,
                                            className: "h-8"
                                        }), et.targetRoles.length > 0 && jsxRuntimeExports.jsx("div", {
                                            className: "flex flex-wrap gap-1",
                                            children: et.targetRoles.map(as => jsxRuntimeExports.jsxs(Badge, {
                                                variant: "secondary",
                                                className: "text-xs h-6 px-2",
                                                children: [as, jsxRuntimeExports.jsx("button", {
                                                    onClick: () => {
                                                        it(Ps => ({
                                                            ...Ps,
                                                            targetRoles: Ps.targetRoles.filter(gs => gs !== as)
                                                        }))
                                                    }
                                                    ,
                                                    className: "ml-1 hover:bg-gray-300 rounded-full w-3 h-3 flex items-center justify-center",
                                                    children: jsxRuntimeExports.jsx(X, {
                                                        className: "h-2 w-2"
                                                    })
                                                })]
                                            }, as))
                                        })]
                                    }), jsxRuntimeExports.jsx("p", {
                                        className: "text-xs text-gray-500",
                                        children: "Select the types of roles you're looking for to personalize your email"
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsxs(Label, {
                                    htmlFor: "custom-instructions",
                                    className: "text-xs flex items-center gap-1",
                                    children: [jsxRuntimeExports.jsx(Lightbulb, {
                                        className: "h-3 w-3"
                                    }), "Custom Instructions (Optional)"]
                                }), jsxRuntimeExports.jsx(Textarea, {
                                    id: "custom-instructions",
                                    placeholder: "e.g., Mention our mutual connection John, focus on React expertise, include portfolio link...",
                                    value: et.customInstructions,
                                    onChange: as => it(Ps => ({
                                        ...Ps,
                                        customInstructions: as.target.value
                                    })),
                                    className: "h-16 text-xs"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-xs text-gray-500",
                                    children: "Add specific instructions to customize the AI-generated email"
                                })]
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-2",
                        children: [jsxRuntimeExports.jsx(Label, {
                            htmlFor: "subject",
                            children: "Subject Line"
                        }), jsxRuntimeExports.jsx(Input, {
                            id: "subject",
                            placeholder: "Enter email subject...",
                            value: c.subject,
                            onChange: as => d(Ps => ({
                                ...Ps,
                                subject: as.target.value
                            }))
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-2",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between",
                            children: [jsxRuntimeExports.jsx(Label, {
                                htmlFor: "body",
                                children: "Email Content"
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(EmailPreview, {
                                    subject: c.subject,
                                    body: c.body,
                                    children: jsxRuntimeExports.jsxs(Button, {
                                        variant: "outline",
                                        size: "sm",
                                        disabled: !c.body,
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(Eye, {
                                            className: "h-4 w-4"
                                        }), "Preview"]
                                    })
                                }), jsxRuntimeExports.jsxs(Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: Zs,
                                    disabled: e.length === 0 || ht,
                                    className: "flex items-center gap-2 bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200 hover:from-purple-100 hover:to-blue-100",
                                    children: [ht ? jsxRuntimeExports.jsx(LoaderCircle, {
                                        className: "h-4 w-4 animate-spin"
                                    }) : jsxRuntimeExports.jsx(Sparkles, {
                                        className: "h-4 w-4 text-purple-600"
                                    }), ht ? "Generating..." : "Generate with AI"]
                                })]
                            })]
                        }), jsxRuntimeExports.jsx(Textarea, {
                            id: "body",
                            placeholder: "Write your email content here... or use AI generation to create personalized content based on your profile and the selected contact.",
                            className: "min-h-[300px]",
                            value: c.body,
                            onChange: as => d(Ps => ({
                                ...Ps,
                                body: as.target.value
                            }))
                        }), ht && jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2 text-sm text-purple-600 bg-purple-50 p-2 rounded",
                            children: [jsxRuntimeExports.jsx(Sparkles, {
                                className: "h-4 w-4 animate-pulse"
                            }), "AI is generating personalized email content based on your profile and contact information..."]
                        })]
                    }), jsxRuntimeExports.jsx(Separator, {}), !vs && ( () => {
                        const as = checkEmailPermission(os, js);
                        return as.canSendEmail ? null : jsxRuntimeExports.jsx(ProfileCompletionWarning, {
                            completionPercentage: as.completionPercentage,
                            missingFields: as.missingFields,
                            requiredPercentage: 85
                        })
                    }
                    )(), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-3",
                        children: [jsxRuntimeExports.jsx(Label, {
                            className: "text-sm md:text-base font-medium",
                            children: "Resume Link"
                        }), St != null && St.resume_url ? jsxRuntimeExports.jsxs("div", {
                            className: "space-y-3",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-between p-2 md:p-3 bg-gray-50 rounded-lg border",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2 md:gap-3 min-w-0 flex-1",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "w-6 h-6 md:w-8 md:h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0",
                                        children: jsxRuntimeExports.jsx(FileText, {
                                            className: "w-3 h-3 md:w-4 md:h-4 text-blue-600"
                                        })
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex-1 min-w-0",
                                        children: [jsxRuntimeExports.jsx("p", {
                                            className: "text-xs md:text-sm font-medium text-gray-900 truncate",
                                            children: St.resume_filename || "Resume.pdf"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-xs text-gray-500",
                                            children: St.resume_uploaded_at ? `Uploaded ${new Date(St.resume_uploaded_at).toLocaleDateString()}` : "Available in your profile"
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "flex items-center gap-1 md:gap-2 flex-shrink-0 ml-2",
                                    children: jsxRuntimeExports.jsx("button", {
                                        onClick: () => window.open(St.resume_url, "_blank"),
                                        className: "p-1.5 md:p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-200 rounded-md transition-colors",
                                        children: jsxRuntimeExports.jsx(Download, {
                                            className: "w-3 h-3 md:w-4 md:h-4"
                                        })
                                    })
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center space-x-2",
                                children: [jsxRuntimeExports.jsx("input", {
                                    type: "checkbox",
                                    id: "attach-resume",
                                    checked: c.attachResume,
                                    onChange: as => d(Ps => ({
                                        ...Ps,
                                        attachResume: as.target.checked
                                    })),
                                    className: "w-3 h-3 md:w-4 md:h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
                                }), jsxRuntimeExports.jsx(Label, {
                                    htmlFor: "attach-resume",
                                    className: "text-xs md:text-sm text-gray-700 cursor-pointer",
                                    children: "Include resume link in this email"
                                })]
                            }), c.attachResume && jsxRuntimeExports.jsx("div", {
                                className: "space-y-2",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2 text-xs md:text-sm text-green-600 bg-green-50 p-2 md:p-3 rounded-lg border border-green-200",
                                    children: [jsxRuntimeExports.jsx(Paperclip, {
                                        className: "w-3 h-3 md:w-4 md:h-4 flex-shrink-0"
                                    }), jsxRuntimeExports.jsx("span", {
                                        className: "flex-1",
                                        children: "Resume link will be included in your email"
                                    }), jsxRuntimeExports.jsx(Badge, {
                                        variant: "secondary",
                                        className: "bg-green-100 text-green-800 text-xs px-1 py-0.5 md:px-2 md:py-1",
                                        children: ((Rs = (Es = St.resume_filename) == null ? void 0 : Es.split(".").pop()) == null ? void 0 : Rs.toUpperCase()) || "PDF"
                                    })]
                                })
                            })]
                        }) : jsxRuntimeExports.jsx("div", {
                            className: "p-4 bg-yellow-50 border border-yellow-200 rounded-lg",
                            children: jsxRuntimeExports.jsxs("div", {
                                className: "flex items-start gap-3",
                                children: [jsxRuntimeExports.jsx(TriangleAlert, {
                                    className: "w-5 h-5 text-yellow-600 mt-0.5 flex-shrink-0"
                                }), jsxRuntimeExports.jsxs("div", {
                                    children: [jsxRuntimeExports.jsx("h4", {
                                        className: "font-medium text-yellow-900 mb-1",
                                        children: "No Resume Found"
                                    }), jsxRuntimeExports.jsx("p", {
                                        className: "text-sm text-yellow-800 mb-2",
                                        children: "Upload your resume in your profile to include it as a link in emails."
                                    }), jsxRuntimeExports.jsx(Button, {
                                        variant: "outline",
                                        size: "sm",
                                        onClick: () => window.open("/profile", "_blank"),
                                        className: "text-yellow-700 border-yellow-300 hover:bg-yellow-100",
                                        children: "Go to Profile"
                                    })]
                                })]
                            })
                        })]
                    }), jsxRuntimeExports.jsx(Separator, {}), As && jsxRuntimeExports.jsxs("div", {
                        className: "bg-blue-50 p-4 rounded-lg",
                        children: [jsxRuntimeExports.jsx("h4", {
                            className: "font-medium text-blue-900 mb-2",
                            children: "Selected Recipient"
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-1 text-sm text-blue-800",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center space-x-2",
                                children: [jsxRuntimeExports.jsx(User, {
                                    className: "h-4 w-4"
                                }), jsxRuntimeExports.jsx("span", {
                                    children: As.name
                                })]
                            }), As.company && jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center space-x-2",
                                children: [jsxRuntimeExports.jsx(Building2, {
                                    className: "h-4 w-4"
                                }), jsxRuntimeExports.jsx("span", {
                                    children: As.company
                                })]
                            }), As.position && jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center space-x-2",
                                children: [jsxRuntimeExports.jsx(Briefcase, {
                                    className: "h-4 w-4"
                                }), jsxRuntimeExports.jsx("span", {
                                    children: As.position
                                })]
                            }), c.attachResume && (St == null ? void 0 : St.resume_url) && jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center space-x-2 mt-2 pt-2 border-t border-blue-200",
                                children: [jsxRuntimeExports.jsx(Paperclip, {
                                    className: "h-4 w-4"
                                }), jsxRuntimeExports.jsxs("span", {
                                    children: ["Resume link included: ", St.resume_filename || "Resume.pdf"]
                                })]
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs(Button, {
                        className: "w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700",
                        onClick: Xs,
                        disabled: ot || e.length === 0 || !checkEmailPermission(os, js).canSendEmail,
                        children: [ot ? jsxRuntimeExports.jsx(LoaderCircle, {
                            className: "h-4 w-4 mr-2 animate-spin"
                        }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [jsxRuntimeExports.jsx(Send, {
                                className: "h-4 w-4 mr-2"
                            }), c.attachResume && jsxRuntimeExports.jsx(Paperclip, {
                                className: "h-4 w-4 mr-1"
                            })]
                        }), ot ? "Sending..." : As ? `Send to ${As.name}${c.attachResume ? " (with resume link)" : ""}` : "Select a recipient"]
                    })]
                })]
            }), jsxRuntimeExports.jsxs(Card, {
                children: [jsxRuntimeExports.jsxs(CardHeader, {
                    children: [jsxRuntimeExports.jsxs(CardTitle, {
                        className: "flex items-center space-x-2",
                        children: [jsxRuntimeExports.jsx(User, {
                            className: "h-5 w-5"
                        }), jsxRuntimeExports.jsx("span", {
                            children: "Select Contact"
                        })]
                    }), jsxRuntimeExports.jsx(CardDescription, {
                        children: "Choose a contact to send your email to (showing contacts who haven't been emailed in the last 7 days)"
                    })]
                }), jsxRuntimeExports.jsx(CardContent, {
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "space-y-4",
                        children: [jsxRuntimeExports.jsx(Input, {
                            placeholder: "Search contacts...",
                            value: Yt,
                            onChange: as => Nt(as.target.value),
                            className: "w-full"
                        }), jsxRuntimeExports.jsx("div", {
                            className: "space-y-2 max-h-[400px] overflow-y-auto",
                            children: ks.length === 0 ? jsxRuntimeExports.jsxs("div", {
                                className: "text-center py-8 text-gray-500",
                                children: [jsxRuntimeExports.jsx(User, {
                                    className: "h-8 w-8 mx-auto mb-2 opacity-50"
                                }), jsxRuntimeExports.jsx("p", {
                                    children: "No contacts available for email"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-sm mt-1",
                                    children: "All contacts have been emailed within the last 7 days"
                                })]
                            }) : ks.map(as => jsxRuntimeExports.jsx("div", {
                                onClick: () => ls(as.id),
                                className: `p-3 border rounded-lg cursor-pointer transition-all hover:bg-gray-50 ${e.includes(as.id) ? "border-blue-500 bg-blue-50" : "border-gray-200"}`,
                                children: jsxRuntimeExports.jsx("div", {
                                    className: "flex items-start justify-between",
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex-1 min-w-0",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center space-x-2 mb-1",
                                            children: [jsxRuntimeExports.jsx("span", {
                                                className: "font-medium text-gray-900 truncate",
                                                children: as.name
                                            }), e.includes(as.id) && jsxRuntimeExports.jsx(CircleCheckBig, {
                                                className: "h-4 w-4 text-blue-600 flex-shrink-0"
                                            })]
                                        }), as.company && jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center space-x-2 text-sm text-gray-500 mb-1",
                                            children: [jsxRuntimeExports.jsx(Building2, {
                                                className: "h-3 w-3 flex-shrink-0"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "truncate",
                                                children: as.company
                                            })]
                                        }), as.position && jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center space-x-2 text-sm text-gray-500 mb-1",
                                            children: [jsxRuntimeExports.jsx(Briefcase, {
                                                className: "h-3 w-3 flex-shrink-0"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "truncate",
                                                children: as.position
                                            })]
                                        }), as.linkedin_link && jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center space-x-2 text-sm text-blue-600",
                                            children: [jsxRuntimeExports.jsx(Linkedin, {
                                                className: "h-3 w-3 flex-shrink-0"
                                            }), jsxRuntimeExports.jsxs("a", {
                                                href: as.linkedin_link,
                                                target: "_blank",
                                                rel: "noopener noreferrer",
                                                className: "truncate hover:underline flex items-center space-x-1",
                                                onClick: Ps => Ps.stopPropagation(),
                                                children: [jsxRuntimeExports.jsx("span", {
                                                    children: "LinkedIn Profile"
                                                }), jsxRuntimeExports.jsx(ExternalLink, {
                                                    className: "h-3 w-3"
                                                })]
                                            })]
                                        })]
                                    })
                                })
                            }, as.id))
                        }), e.length > 0 && jsxRuntimeExports.jsx("div", {
                            className: "mt-4 pt-4 border-t",
                            children: jsxRuntimeExports.jsx(Button, {
                                variant: "outline",
                                size: "sm",
                                onClick: a,
                                className: "w-full",
                                children: "Clear Selection"
                            })
                        })]
                    })
                })]
            })]
        }), lt === "followup" && jsxRuntimeExports.jsxs("div", {
            className: "grid grid-cols-1 lg:grid-cols-2 gap-6",
            children: [jsxRuntimeExports.jsxs(Card, {
                children: [jsxRuntimeExports.jsxs(CardHeader, {
                    children: [jsxRuntimeExports.jsxs(CardTitle, {
                        className: "flex items-center space-x-2",
                        children: [jsxRuntimeExports.jsx(MessageSquare, {
                            className: "h-5 w-5"
                        }), jsxRuntimeExports.jsx("span", {
                            children: "Compose Follow-up Email"
                        })]
                    }), jsxRuntimeExports.jsx(CardDescription, {
                        children: "Send a brief follow-up reminder to contacts you've previously emailed (short, gentle reminders)"
                    })]
                }), jsxRuntimeExports.jsxs(CardContent, {
                    className: "space-y-4",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center justify-between",
                        children: [jsxRuntimeExports.jsx(Label, {
                            className: "text-sm font-medium",
                            children: "AI Follow-up Generation"
                        }), jsxRuntimeExports.jsxs(Button, {
                            variant: "outline",
                            size: "sm",
                            onClick: () => Lt(!xs),
                            className: "flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(Settings, {
                                className: "h-4 w-4"
                            }), xs ? "Hide" : "Show", " AI Settings"]
                        })]
                    }), xs && jsxRuntimeExports.jsxs(Card, {
                        className: "bg-gradient-to-r from-green-50 to-teal-50 border-green-200",
                        children: [jsxRuntimeExports.jsx(CardHeader, {
                            className: "pb-3",
                            children: jsxRuntimeExports.jsxs(CardTitle, {
                                className: "text-sm flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(Sparkles, {
                                    className: "h-4 w-4 text-green-600"
                                }), "AI Follow-up Generation Settings"]
                            })
                        }), jsxRuntimeExports.jsxs(CardContent, {
                            className: "space-y-3",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "grid grid-cols-2 gap-3",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsx(Label, {
                                        htmlFor: "followup-tone",
                                        className: "text-xs",
                                        children: "Tone"
                                    }), jsxRuntimeExports.jsxs(Select, {
                                        value: st.tone,
                                        onValueChange: as => nt(Ps => ({
                                            ...Ps,
                                            tone: as
                                        })),
                                        children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                            className: "h-8",
                                            children: jsxRuntimeExports.jsx(SelectValue, {})
                                        }), jsxRuntimeExports.jsxs(SelectContent, {
                                            children: [jsxRuntimeExports.jsx(SelectItem, {
                                                value: "professional",
                                                children: "Professional"
                                            }), jsxRuntimeExports.jsx(SelectItem, {
                                                value: "friendly",
                                                children: "Friendly"
                                            }), jsxRuntimeExports.jsx(SelectItem, {
                                                value: "formal",
                                                children: "Formal"
                                            }), jsxRuntimeExports.jsx(SelectItem, {
                                                value: "casual",
                                                children: "Casual"
                                            })]
                                        })]
                                    })]
                                })
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    htmlFor: "followup-custom-instructions",
                                    className: "text-xs",
                                    children: "Custom Instructions"
                                }), jsxRuntimeExports.jsx(Textarea, {
                                    id: "followup-custom-instructions",
                                    placeholder: "Add specific instructions for the brief follow-up reminder (e.g., mention a specific topic from previous email, etc.)",
                                    className: "min-h-[60px] text-xs",
                                    value: st.customInstructions,
                                    onChange: as => nt(Ps => ({
                                        ...Ps,
                                        customInstructions: as.target.value
                                    }))
                                })]
                            })]
                        })]
                    }), $ && jsxRuntimeExports.jsxs(Button, {
                        onClick: sr,
                        disabled: gt,
                        variant: "outline",
                        className: "w-full bg-gradient-to-r from-green-50 to-teal-50 border-green-200 hover:from-green-100 hover:to-teal-100",
                        children: [gt ? jsxRuntimeExports.jsx(LoaderCircle, {
                            className: "h-4 w-4 mr-2 animate-spin"
                        }) : jsxRuntimeExports.jsx(Sparkles, {
                            className: "h-4 w-4 mr-2 text-green-600"
                        }), gt ? "Generating..." : "Generate Follow-up with AI"]
                    }), jsxRuntimeExports.jsx(Separator, {}), !vs && ( () => {
                        const as = checkEmailPermission(os, js);
                        return as.canSendEmail ? null : jsxRuntimeExports.jsx(ProfileCompletionWarning, {
                            completionPercentage: as.completionPercentage,
                            missingFields: as.missingFields,
                            requiredPercentage: 85
                        })
                    }
                    )(), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "space-y-2",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-between",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    htmlFor: "followup-body",
                                    children: "Follow-up Message"
                                }), jsxRuntimeExports.jsx(EmailPreview, {
                                    subject: "Re: Follow-up",
                                    body: h.body,
                                    children: jsxRuntimeExports.jsxs(Button, {
                                        variant: "outline",
                                        size: "sm",
                                        disabled: !h.body,
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(Eye, {
                                            className: "h-4 w-4"
                                        }), "Preview"]
                                    })
                                })]
                            }), jsxRuntimeExports.jsx(Textarea, {
                                id: "followup-body",
                                placeholder: "Write your follow-up message here...",
                                className: "min-h-[200px]",
                                value: h.body,
                                onChange: as => g(Ps => ({
                                    ...Ps,
                                    body: as.target.value
                                }))
                            })]
                        }), jsxRuntimeExports.jsxs(Button, {
                            className: "w-full",
                            onClick: $s,
                            disabled: ot || !$ || !h.body.trim() || !checkEmailPermission(os, js).canSendEmail,
                            children: [ot ? jsxRuntimeExports.jsx(LoaderCircle, {
                                className: "h-4 w-4 mr-2 animate-spin"
                            }) : jsxRuntimeExports.jsx(Send, {
                                className: "h-4 w-4 mr-2"
                            }), ot ? "Sending Follow-up..." : `Send Follow-up${$ ? "" : " (Select Contact)"}`]
                        })]
                    })]
                })]
            }), jsxRuntimeExports.jsxs(Card, {
                children: [jsxRuntimeExports.jsxs(CardHeader, {
                    children: [jsxRuntimeExports.jsxs(CardTitle, {
                        className: "flex items-center space-x-2",
                        children: [jsxRuntimeExports.jsx(Users, {
                            className: "h-5 w-5"
                        }), jsxRuntimeExports.jsx("span", {
                            children: "Select Recipient"
                        })]
                    }), jsxRuntimeExports.jsx(CardDescription, {
                        children: "Choose from contacts that need follow-up (24+ hours since last communication, excluding those who replied)"
                    })]
                }), jsxRuntimeExports.jsx(CardContent, {
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "space-y-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "relative",
                            children: [jsxRuntimeExports.jsx(Search, {
                                className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4"
                            }), jsxRuntimeExports.jsx(Input, {
                                placeholder: "Search contacts...",
                                value: jt,
                                onChange: as => xt(as.target.value),
                                className: "pl-9"
                            })]
                        }), jsxRuntimeExports.jsx("div", {
                            className: "space-y-2 max-h-[400px] overflow-y-auto",
                            children: tt ? jsxRuntimeExports.jsxs("div", {
                                className: "text-center py-8 text-gray-500",
                                children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                    className: "h-8 w-8 mx-auto mb-2 animate-spin"
                                }), jsxRuntimeExports.jsx("p", {
                                    children: "Loading contacts..."
                                })]
                            }) : Ts.length === 0 ? jsxRuntimeExports.jsxs("div", {
                                className: "text-center py-8 text-gray-500",
                                children: [jsxRuntimeExports.jsx(User, {
                                    className: "h-8 w-8 mx-auto mb-2 opacity-50"
                                }), jsxRuntimeExports.jsx("p", {
                                    children: "No contacts need follow-up"
                                }), b.length === 0 ? jsxRuntimeExports.jsx("p", {
                                    className: "text-sm mt-2",
                                    children: "You haven't sent any emails yet. Send some emails first to be able to follow up."
                                }) : jsxRuntimeExports.jsx("p", {
                                    className: "text-sm mt-2",
                                    children: "All contacts have been followed up within the last 24 hours or have already replied. Check back later!"
                                })]
                            }) : Ts.map(as => jsxRuntimeExports.jsx("div", {
                                onClick: () => Ds(as.id),
                                className: `p-3 border rounded-lg cursor-pointer transition-all hover:bg-gray-50 ${$ === as.id ? "border-green-500 bg-green-50" : "border-gray-200"}`,
                                children: jsxRuntimeExports.jsx("div", {
                                    className: "flex items-start justify-between",
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex-1 min-w-0",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center space-x-2 mb-1",
                                            children: [jsxRuntimeExports.jsx("span", {
                                                className: "font-medium text-gray-900 truncate",
                                                children: as.name
                                            }), $ === as.id && jsxRuntimeExports.jsx(CircleCheckBig, {
                                                className: "h-4 w-4 text-green-600 flex-shrink-0"
                                            })]
                                        }), as.company && jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center space-x-2 text-sm text-gray-500 mb-1",
                                            children: [jsxRuntimeExports.jsx(Building2, {
                                                className: "h-3 w-3 flex-shrink-0"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "truncate",
                                                children: as.company
                                            })]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center space-x-2 text-xs text-orange-600 mb-1",
                                            children: [jsxRuntimeExports.jsx(Clock, {
                                                className: "h-3 w-3 flex-shrink-0"
                                            }), jsxRuntimeExports.jsxs("span", {
                                                children: ["Last contact: ", ( () => {
                                                    const Ps = new Date(as.email_sent_on || Date.now())
                                                      , es = Math.floor((new Date().getTime() - Ps.getTime()) / (1e3 * 60 * 60))
                                                      , ws = Math.floor(es / 24);
                                                    return ws > 0 ? `${ws} day${ws > 1 ? "s" : ""} ago` : `${es} hour${es > 1 ? "s" : ""} ago`
                                                }
                                                )()]
                                            })]
                                        }), as.position && jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center space-x-2 text-sm text-gray-500 mb-1",
                                            children: [jsxRuntimeExports.jsx(Briefcase, {
                                                className: "h-3 w-3 flex-shrink-0"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "truncate",
                                                children: as.position
                                            })]
                                        }), as.linkedin_link && jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center space-x-2 text-sm text-blue-600",
                                            children: [jsxRuntimeExports.jsx(Linkedin, {
                                                className: "h-3 w-3 flex-shrink-0"
                                            }), jsxRuntimeExports.jsxs("a", {
                                                href: as.linkedin_link,
                                                target: "_blank",
                                                rel: "noopener noreferrer",
                                                className: "truncate hover:underline flex items-center space-x-1",
                                                onClick: Ps => Ps.stopPropagation(),
                                                children: [jsxRuntimeExports.jsx("span", {
                                                    children: "LinkedIn Profile"
                                                }), jsxRuntimeExports.jsx(ExternalLink, {
                                                    className: "h-3 w-3"
                                                })]
                                            })]
                                        })]
                                    })
                                })
                            }, as.id))
                        }), jsxRuntimeExports.jsx("div", {
                            className: "pt-4 border-t",
                            children: jsxRuntimeExports.jsxs(Button, {
                                variant: "outline",
                                size: "sm",
                                onClick: Hs,
                                disabled: tt,
                                className: "w-full",
                                children: [tt ? jsxRuntimeExports.jsx(LoaderCircle, {
                                    className: "h-4 w-4 mr-2 animate-spin"
                                }) : jsxRuntimeExports.jsx(RefreshCw, {
                                    className: "h-4 w-4 mr-2"
                                }), "Refresh Contacts"]
                            })
                        })]
                    })
                })]
            })]
        }), lt === "conversation" && jsxRuntimeExports.jsx(WhatsAppLikeConversation, {
            contacts: s
        })]
    })
}
;
class GoogleAuthService {
    constructor() {
        tr(this, "clientId");
        tr(this, "redirectUri");
        tr(this, "scope");
        this.clientId = getConfig().google.clientId,
        this.redirectUri = `${window.location.origin}/auth/google/callback`,
        this.scope = ["https://www.googleapis.com/auth/gmail.send", "https://www.googleapis.com/auth/gmail.readonly", "https://www.googleapis.com/auth/gmail.labels", "https://www.googleapis.com/auth/gmail.addons.current.message.readonly", "https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/contacts.readonly"].join(" ")
    }
    async initiateAuth(e=!1) {
        const i = new URL("https://accounts.google.com/o/oauth2/v2/auth");
        i.searchParams.set("client_id", this.clientId),
        i.searchParams.set("redirect_uri", this.redirectUri),
        i.searchParams.set("response_type", "code"),
        i.searchParams.set("scope", this.scope),
        i.searchParams.set("access_type", "offline"),
        e ? (i.searchParams.set("prompt", "consent select_account"),
        i.searchParams.set("include_granted_scopes", "false")) : i.searchParams.set("prompt", "consent");
        const {data: {session: o}} = await supabase.auth.getSession();
        o != null && o.user && localStorage.setItem("pending_google_auth_user", o.user.id),
        window.location.href = i.toString()
    }
    async handleCallback(e) {
        try {
            const {data: i, error: o} = await supabase.functions.invoke("google-auth-proxy", {
                body: {
                    code: e,
                    redirect_uri: this.redirectUri
                }
            });
            if (o)
                throw console.error("Auth proxy error:", o),
                new Error("Failed to exchange code for tokens");
            const a = i;
            if (!a.access_token)
                throw new Error("No access token received");
            const c = await fetch("https://www.googleapis.com/oauth2/v2/userinfo", {
                headers: {
                    Authorization: `Bearer ${a.access_token}`
                }
            });
            if (!c.ok)
                throw new Error("Failed to get user info");
            const d = await c.json();
            return await this.storeUserTokens({
                google_id: d.id,
                email: d.email,
                name: d.name,
                profile_picture: d.picture,
                access_token: a.access_token,
                refresh_token: a.refresh_token
            })
        } catch (i) {
            return console.error("Error handling Google OAuth callback:", i),
            null
        }
    }
    async storeUserTokens(e) {
        const {data: i, error: o} = await supabase.from("users").upsert({
            google_id: e.google_id,
            email: e.email,
            name: e.name,
            profile_picture: e.profile_picture,
            access_token: e.access_token,
            refresh_token: e.refresh_token,
            provider: "google",
            updated_at: new Date().toISOString()
        }, {
            onConflict: "google_id",
            ignoreDuplicates: !1
        }).select().single();
        if (o)
            throw new Error(`Failed to store user tokens: ${o.message}`);
        return i
    }
    async getStoredUser() {
        const {data: {session: e}} = await supabase.auth.getSession();
        if (!(e != null && e.user))
            return null;
        const {data: i, error: o} = await supabase.from("users").select("*").eq("email", e.user.email).single();
        if (o || !i)
            return null;
        if (!i.access_token)
            return console.log("User found but no access token"),
            null;
        if (await this.validateAccessToken(i.access_token))
            return i;
        if (i.refresh_token) {
            const c = await this.refreshAccessToken(i.refresh_token);
            if (c) {
                const {data: d, error: h} = await supabase.from("users").update({
                    access_token: c,
                    updated_at: new Date().toISOString()
                }).eq("id", i.id).select().single();
                if (!h && d)
                    return d
            }
        }
        return console.log("Unable to refresh token, user needs to re-authenticate"),
        null
    }
    async validateAccessToken(e) {
        try {
            const i = await fetch("https://www.googleapis.com/oauth2/v1/tokeninfo", {
                method: "GET",
                headers: {
                    Authorization: `Bearer ${e}`
                }
            });
            if (i.ok) {
                const o = await i.json()
                  , a = ["https://www.googleapis.com/auth/gmail.send", "https://www.googleapis.com/auth/gmail.readonly", "https://www.googleapis.com/auth/gmail.labels", "https://www.googleapis.com/auth/gmail.addons.current.message.readonly", "https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/contacts.readonly"]
                  , c = o.scope ? o.scope.split(" ") : [];
                return a.every(h => c.includes(h))
            }
            return !1
        } catch (i) {
            return console.error("Error validating access token:", i),
            !1
        }
    }
    async clearStoredAuth() {
        const {data: {session: e}} = await supabase.auth.getSession();
        if (!(e != null && e.user))
            return;
        const {data: i} = await supabase.from("users").select("access_token").eq("email", e.user.email).single();
        if (i != null && i.access_token)
            try {
                await this.revokeAccess(i.access_token),
                console.log("Access token revoked successfully")
            } catch (a) {
                console.warn("Failed to revoke access token:", a)
            }
        const {error: o} = await supabase.from("users").delete().eq("email", e.user.email);
        o && console.error("Error clearing stored auth:", o)
    }
    async refreshAccessToken(e) {
        try {
            const {data: i, error: o} = await supabase.functions.invoke("google-auth-proxy", {
                body: {
                    refresh_token: e,
                    grant_type: "refresh_token"
                }
            });
            if (o)
                throw console.error("Token refresh proxy error:", o),
                new Error("Failed to refresh token");
            return i.access_token
        } catch (i) {
            return console.error("Error refreshing access token:", i),
            null
        }
    }
    async getContacts(e) {
        try {
            const i = await fetch("https://people.googleapis.com/v1/people/me/connections?personFields=names,emailAddresses,phoneNumbers,organizations", {
                headers: {
                    Authorization: `Bearer ${e}`
                }
            });
            if (!i.ok)
                throw new Error("Failed to fetch contacts");
            return ((await i.json()).connections || []).map(a => {
                var c, d, h, g, b, _, $, _e, tt, rt;
                return {
                    id: a.resourceName,
                    name: ((d = (c = a.names) == null ? void 0 : c[0]) == null ? void 0 : d.displayName) || "Unknown",
                    email: ((g = (h = a.emailAddresses) == null ? void 0 : h[0]) == null ? void 0 : g.value) || "",
                    phone: (_ = (b = a.phoneNumbers) == null ? void 0 : b[0]) == null ? void 0 : _.value,
                    company: (_e = ($ = a.organizations) == null ? void 0 : $[0]) == null ? void 0 : _e.name,
                    title: (rt = (tt = a.organizations) == null ? void 0 : tt[0]) == null ? void 0 : rt.title
                }
            }
            ).filter(a => a.email)
        } catch (i) {
            return console.error("Error fetching contacts:", i),
            []
        }
    }
    async sendEmail(e, i, o, a, c=!1) {
        var d;
        try {
            const h = [`To: ${i}`, `Subject: ${o}`, `Content-Type: ${c ? "text/html" : "text/plain"}; charset=utf-8`, "", a].join(`
`)
              , g = btoa(unescape(encodeURIComponent(h))).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "")
              , b = await fetch("https://gmail.googleapis.com/gmail/v1/users/me/messages/send", {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${e}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    raw: g
                })
            });
            if (b.ok)
                try {
                    const _ = await b.json()
                      , {data: $} = await supabase.auth.getUser();
                    (d = $.user) != null && d.email && (await supabase.from("useremaillog").insert({
                        sent_at: new Date().toISOString(),
                        to: i,
                        user_id: $.user.email,
                        messageId: _.id || `gmail-${Date.now()}`,
                        threadId: _.threadId || _.id,
                        reference: "gmail-manual",
                        subject: o
                    }),
                    console.log(`Logged Gmail email to useremaillog for ${i}`))
                } catch (_) {
                    console.error("Failed to log Gmail email to useremaillog:", _)
                }
            return b.ok
        } catch (h) {
            return console.error("Error sending email:", h),
            !1
        }
    }
    async revokeAccess(e) {
        try {
            return (await fetch(`https://oauth2.googleapis.com/revoke?token=${e}`, {
                method: "POST"
            })).ok
        } catch (i) {
            return console.error("Error revoking access:", i),
            !1
        }
    }
}
const googleAuthService = new GoogleAuthService
  , EmailUsageProgress = ({usage: s, loading: e=!1, onRenewClick: i, showRenewButton: o=!0, compact: a=!1}) => {
    const c = () => s.percentage >= 90 ? "bg-red-500" : s.percentage >= 75 ? "bg-yellow-500" : "bg-blue-500"
      , d = () => s.canSendEmail ? s.percentage >= 90 ? jsxRuntimeExports.jsxs(Badge, {
        variant: "destructive",
        className: "flex items-center gap-1",
        children: [jsxRuntimeExports.jsx(TriangleAlert, {
            className: "h-3 w-3"
        }), "Almost Full"]
    }) : s.percentage >= 75 ? jsxRuntimeExports.jsxs(Badge, {
        variant: "secondary",
        className: "flex items-center gap-1",
        children: [jsxRuntimeExports.jsx(TriangleAlert, {
            className: "h-3 w-3"
        }), "High Usage"]
    }) : jsxRuntimeExports.jsxs(Badge, {
        variant: "default",
        className: "flex items-center gap-1",
        children: [jsxRuntimeExports.jsx(Mail, {
            className: "h-3 w-3"
        }), "Available"]
    }) : jsxRuntimeExports.jsxs(Badge, {
        variant: "destructive",
        className: "flex items-center gap-1",
        children: [jsxRuntimeExports.jsx(TriangleAlert, {
            className: "h-3 w-3"
        }), "Limit Reached"]
    });
    return a ? jsxRuntimeExports.jsxs("div", {
        className: "flex items-center gap-3 p-3 bg-gray-50 rounded-lg",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "flex items-center gap-2 min-w-0 flex-1",
            children: [jsxRuntimeExports.jsx(Mail, {
                className: "h-4 w-4 text-gray-600 flex-shrink-0"
            }), jsxRuntimeExports.jsxs("div", {
                className: "min-w-0 flex-1",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-2 mb-1",
                    children: [jsxRuntimeExports.jsxs("span", {
                        className: "text-sm font-medium text-gray-900",
                        children: [s.used, "/", s.limit, " emails used"]
                    }), d()]
                }), jsxRuntimeExports.jsx(Progress, {
                    value: s.percentage,
                    className: `h-2 ${c()}`
                })]
            })]
        }), !s.canSendEmail && o && i && jsxRuntimeExports.jsxs(Button, {
            size: "sm",
            onClick: i,
            className: "bg-gradient-to-r from-yellow-500 to-orange-600 hover:from-yellow-600 hover:to-orange-700 text-white flex-shrink-0",
            children: [jsxRuntimeExports.jsx(Crown, {
                className: "h-3 w-3 mr-1"
            }), "Renew"]
        })]
    }) : jsxRuntimeExports.jsxs(Card, {
        className: "w-full",
        children: [jsxRuntimeExports.jsx(CardHeader, {
            className: "pb-3",
            children: jsxRuntimeExports.jsxs(CardTitle, {
                className: "flex items-center justify-between text-base",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx(Mail, {
                        className: "h-4 w-4"
                    }), "Email Usage"]
                }), d()]
            })
        }), jsxRuntimeExports.jsx(CardContent, {
            className: "space-y-4",
            children: e ? jsxRuntimeExports.jsxs("div", {
                className: "flex items-center gap-2 text-sm text-gray-600",
                children: [jsxRuntimeExports.jsx(RefreshCw, {
                    className: "h-4 w-4 animate-spin"
                }), "Loading usage data..."]
            }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "space-y-2",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex justify-between text-sm",
                        children: [jsxRuntimeExports.jsx("span", {
                            className: "text-gray-600",
                            children: "Used"
                        }), jsxRuntimeExports.jsxs("span", {
                            className: "font-medium",
                            children: [s.used, " of ", s.limit, " emails"]
                        })]
                    }), jsxRuntimeExports.jsx(Progress, {
                        value: s.percentage,
                        className: `h-2 ${c()}`
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex justify-between text-xs text-gray-500",
                        children: [jsxRuntimeExports.jsxs("span", {
                            children: [Math.round(s.percentage), "% used"]
                        }), jsxRuntimeExports.jsxs("span", {
                            children: [s.remaining, " remaining"]
                        })]
                    })]
                }), !s.canSendEmail && jsxRuntimeExports.jsx("div", {
                    className: "p-3 bg-red-50 border border-red-200 rounded-lg",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex items-start gap-2",
                        children: [jsxRuntimeExports.jsx(TriangleAlert, {
                            className: "h-4 w-4 text-red-600 mt-0.5 flex-shrink-0"
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex-1",
                            children: [jsxRuntimeExports.jsx("p", {
                                className: "text-sm font-medium text-red-800 mb-1",
                                children: "Email Limit Reached"
                            }), jsxRuntimeExports.jsxs("p", {
                                className: "text-xs text-red-700 mb-3",
                                children: ["You've used all ", s.limit, " emails in your current plan. Renew your subscription to continue sending emails."]
                            }), o && i && jsxRuntimeExports.jsxs(Button, {
                                size: "sm",
                                onClick: i,
                                className: "bg-gradient-to-r from-yellow-500 to-orange-600 hover:from-yellow-600 hover:to-orange-700 text-white",
                                children: [jsxRuntimeExports.jsx(Crown, {
                                    className: "h-3 w-3 mr-2"
                                }), "Renew Subscription"]
                            })]
                        })]
                    })
                }), s.canSendEmail && s.percentage >= 75 && jsxRuntimeExports.jsx("div", {
                    className: "p-3 bg-yellow-50 border border-yellow-200 rounded-lg",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "flex items-start gap-2",
                        children: [jsxRuntimeExports.jsx(TriangleAlert, {
                            className: "h-4 w-4 text-yellow-600 mt-0.5 flex-shrink-0"
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex-1",
                            children: [jsxRuntimeExports.jsx("p", {
                                className: "text-sm font-medium text-yellow-800 mb-1",
                                children: "Approaching Limit"
                            }), jsxRuntimeExports.jsxs("p", {
                                className: "text-xs text-yellow-700",
                                children: ["You have ", s.remaining, " emails remaining. Consider renewing your subscription soon."]
                            })]
                        })]
                    })
                })]
            })
        })]
    })
}
  , SubscriptionRenewalDialog = ({isOpen: s, onClose: e, emailUsage: i, onRenewalSuccess: o}) => {
    reactExports.useState(!1);
    const a = ["Reset email limit to 125 emails", "Hyper-Personalized Cold Emails", "Follow-up Emails and tracker", "Access to Exclusive Job Openings", "Unlimited Job Applications", "24/7 Premium Support", "AI-powered email templates"];
    return jsxRuntimeExports.jsx(Dialog, {
        open: s,
        onOpenChange: e,
        children: jsxRuntimeExports.jsxs(DialogContent, {
            className: "max-w-2xl max-h-[90vh] overflow-y-auto",
            children: [jsxRuntimeExports.jsxs(DialogHeader, {
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Crown, {
                            className: "h-5 w-5 text-yellow-600"
                        }), jsxRuntimeExports.jsx(DialogTitle, {
                            className: "text-xl",
                            children: "Renew Premium Subscription"
                        })]
                    }), jsxRuntimeExports.jsx(Button, {
                        variant: "ghost",
                        size: "sm",
                        onClick: e,
                        children: jsxRuntimeExports.jsx(X, {
                            className: "h-4 w-4"
                        })
                    })]
                }), jsxRuntimeExports.jsx(DialogDescription, {
                    children: "Your email limit has been reached. Renew your premium subscription to continue sending emails."
                })]
            }), jsxRuntimeExports.jsxs("div", {
                className: "space-y-6",
                children: [jsxRuntimeExports.jsxs(Card, {
                    className: "border-red-200 bg-red-50",
                    children: [jsxRuntimeExports.jsx(CardHeader, {
                        className: "pb-3",
                        children: jsxRuntimeExports.jsxs(CardTitle, {
                            className: "flex items-center gap-2 text-base text-red-800",
                            children: [jsxRuntimeExports.jsx(TriangleAlert, {
                                className: "h-4 w-4"
                            }), "Current Email Usage"]
                        })
                    }), jsxRuntimeExports.jsx(CardContent, {
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between",
                            children: [jsxRuntimeExports.jsxs("div", {
                                children: [jsxRuntimeExports.jsxs("p", {
                                    className: "text-sm text-red-700",
                                    children: [jsxRuntimeExports.jsxs("span", {
                                        className: "font-medium",
                                        children: [i.used, " of ", i.limit]
                                    }), " emails used"]
                                }), jsxRuntimeExports.jsxs("p", {
                                    className: "text-xs text-red-600 mt-1",
                                    children: [i.remaining, " emails remaining"]
                                })]
                            }), jsxRuntimeExports.jsxs(Badge, {
                                variant: "destructive",
                                children: [Math.round(i.percentage), "% Used"]
                            })]
                        })
                    })]
                }), jsxRuntimeExports.jsxs(Card, {
                    className: "border-yellow-200 bg-gradient-to-br from-yellow-50 to-orange-50",
                    children: [jsxRuntimeExports.jsxs(CardHeader, {
                        children: [jsxRuntimeExports.jsxs(CardTitle, {
                            className: "flex items-center gap-2 text-yellow-800",
                            children: [jsxRuntimeExports.jsx(Crown, {
                                className: "h-5 w-5"
                            }), "Premium Plan - ₹149"]
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-sm text-yellow-700",
                            children: "Everything you need to accelerate your job search"
                        })]
                    }), jsxRuntimeExports.jsxs(CardContent, {
                        className: "space-y-4",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "grid gap-3",
                            children: a.map( (c, d) => jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                                    className: "h-4 w-4 text-green-600 flex-shrink-0"
                                }), jsxRuntimeExports.jsx("span", {
                                    className: "text-sm text-gray-700",
                                    children: c
                                })]
                            }, d))
                        }), jsxRuntimeExports.jsx(Separator, {}), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-3",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-between text-sm",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "text-gray-600",
                                    children: "Plan Price"
                                }), jsxRuntimeExports.jsx("span", {
                                    className: "font-medium",
                                    children: "₹149"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-between text-sm",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "text-gray-600",
                                    children: "Email Limit"
                                }), jsxRuntimeExports.jsx("span", {
                                    className: "font-medium text-green-600",
                                    children: "125 emails"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-between text-sm",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "text-gray-600",
                                    children: "Access Period"
                                }), jsxRuntimeExports.jsx("span", {
                                    className: "font-medium",
                                    children: "1 Month"
                                })]
                            })]
                        })]
                    })]
                }), jsxRuntimeExports.jsxs(Card, {
                    className: "border-green-200 bg-green-50",
                    children: [jsxRuntimeExports.jsx(CardHeader, {
                        className: "pb-3",
                        children: jsxRuntimeExports.jsxs(CardTitle, {
                            className: "flex items-center gap-2 text-base text-green-800",
                            children: [jsxRuntimeExports.jsx(Mail, {
                                className: "h-4 w-4"
                            }), "After Renewal"]
                        })
                    }), jsxRuntimeExports.jsx(CardContent, {
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "space-y-2",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-between text-sm",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "text-green-700",
                                    children: "Email Count"
                                }), jsxRuntimeExports.jsx("span", {
                                    className: "font-medium text-green-800",
                                    children: "Reset to 0/125"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-between text-sm",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "text-green-700",
                                    children: "Available Emails"
                                }), jsxRuntimeExports.jsx("span", {
                                    className: "font-medium text-green-800",
                                    children: "125 emails"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center justify-between text-sm",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "text-green-700",
                                    children: "Premium Features"
                                }), jsxRuntimeExports.jsx(Badge, {
                                    variant: "default",
                                    className: "bg-green-600",
                                    children: "Activated"
                                })]
                            })]
                        })
                    })]
                }), jsxRuntimeExports.jsxs(Card, {
                    children: [jsxRuntimeExports.jsxs(CardHeader, {
                        children: [jsxRuntimeExports.jsx(CardTitle, {
                            className: "text-center",
                            children: "Complete Your Renewal"
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-sm text-gray-600 text-center",
                            children: "Secure payment powered by Cashfree"
                        })]
                    }), jsxRuntimeExports.jsxs(CardContent, {
                        className: "space-y-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "text-center",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "text-2xl font-bold text-gray-900 mb-1",
                                children: "₹149"
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-sm text-gray-600",
                                children: "One-time payment"
                            })]
                        }), jsxRuntimeExports.jsx(CashfreePaymentButton, {
                            className: "w-full"
                        }), jsxRuntimeExports.jsx("div", {
                            className: "text-center",
                            children: jsxRuntimeExports.jsx("p", {
                                className: "text-xs text-gray-500",
                                children: "By proceeding, you agree to our terms of service and privacy policy. Your subscription will be activated immediately after payment."
                            })
                        })]
                    })]
                }), jsxRuntimeExports.jsx(Card, {
                    className: "border-blue-200 bg-blue-50",
                    children: jsxRuntimeExports.jsx(CardContent, {
                        className: "pt-6",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "text-center space-y-2",
                            children: [jsxRuntimeExports.jsx("p", {
                                className: "text-sm text-blue-800 font-medium",
                                children: "Need help or have questions?"
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-xs text-blue-700",
                                children: "Contact our support team at support@hirebuddy.com"
                            })]
                        })
                    })
                })]
            })]
        })
    })
}
;
class EmailCountService {
    static async getEmailCount(e) {
        try {
            const {data: i, error: o} = await supabase.from("totalemailcounttable").select("*").eq("user_id", e).single();
            if (i && !o)
                return i;
            const {data: a, error: c} = await supabase.from("totalemailcounttable").insert([{
                user_id: e,
                total_count: 0,
                email_limit: 125
            }]).select().single();
            if (c)
                throw new Error(`Failed to create email count record: ${c.message}`);
            return a
        } catch (i) {
            throw console.error("Error in getEmailCount:", i),
            i
        }
    }
    static async getEmailUsageStats(e) {
        try {
            const i = await this.getEmailCount(e)
              , o = i.total_count
              , a = i.email_limit
              , c = Math.max(0, a - o)
              , d = Math.min(100, o / a * 100)
              , h = o < a;
            return {
                used: o,
                limit: a,
                remaining: c,
                percentage: d,
                canSendEmail: h
            }
        } catch (i) {
            return console.error("Error getting email usage stats:", i),
            {
                used: 0,
                limit: 125,
                remaining: 125,
                percentage: 0,
                canSendEmail: !0
            }
        }
    }
    static async incrementEmailCount(e, i=1) {
        try {
            const a = (await this.getEmailCount(e)).total_count + i
              , {data: c, error: d} = await supabase.from("totalemailcounttable").update({
                total_count: a
            }).eq("user_id", e).select().single();
            if (d)
                throw new Error(`Failed to increment email count: ${d.message}`);
            return c
        } catch (o) {
            throw console.error("Error incrementing email count:", o),
            o
        }
    }
    static async canSendEmails(e, i=1) {
        try {
            const o = await this.getEmailUsageStats(e);
            return o.remaining >= i ? {
                canSend: !0,
                currentUsage: o
            } : {
                canSend: !1,
                currentUsage: o,
                message: `You can only send ${o.remaining} more emails. You've used ${o.used} out of ${o.limit} emails.`
            }
        } catch (o) {
            return console.error("Error checking email send permission:", o),
            {
                canSend: !1,
                currentUsage: {
                    used: 0,
                    limit: 125,
                    remaining: 125,
                    percentage: 0,
                    canSendEmail: !0
                },
                message: "Error checking email limits. Please try again."
            }
        }
    }
    static async resetEmailCount(e, i=125) {
        try {
            await this.getEmailCount(e);
            const {data: o, error: a} = await supabase.from("totalemailcounttable").update({
                total_count: 0,
                email_limit: i
            }).eq("user_id", e).select().single();
            if (a)
                throw new Error(`Failed to reset email count: ${a.message}`);
            return o
        } catch (o) {
            throw console.error("Error resetting email count:", o),
            o
        }
    }
    static async updateEmailLimit(e, i) {
        try {
            await this.getEmailCount(e);
            const {data: o, error: a} = await supabase.from("totalemailcounttable").update({
                email_limit: i
            }).eq("user_id", e).select().single();
            if (a)
                throw new Error(`Failed to update email limit: ${a.message}`);
            return o
        } catch (o) {
            throw console.error("Error updating email limit:", o),
            o
        }
    }
}
const useEmailUsage = () => {
    const {user: s} = useAuth()
      , [e,i] = reactExports.useState({
        used: 0,
        limit: 125,
        remaining: 125,
        percentage: 0,
        canSendEmail: !0
    })
      , [o,a] = reactExports.useState(!0)
      , [c,d] = reactExports.useState(null)
      , h = reactExports.useCallback(async () => {
        if (!(s != null && s.id)) {
            a(!1);
            return
        }
        try {
            a(!0),
            d(null);
            const _ = await EmailCountService.getEmailUsageStats(s.id);
            i(_)
        } catch (_) {
            console.error("Error fetching email usage:", _),
            d(_ instanceof Error ? _.message : "Failed to load email usage"),
            Jt.error("Failed to load email usage data")
        } finally {
            a(!1)
        }
    }
    , [s == null ? void 0 : s.id])
      , g = reactExports.useCallback(async (_=1) => {
        if (!(s != null && s.id))
            return {
                canSend: !1,
                message: "User not authenticated"
            };
        try {
            const $ = await EmailCountService.canSendEmails(s.id, _);
            return {
                canSend: $.canSend,
                message: $.message
            }
        } catch ($) {
            return console.error("Error checking email send permission:", $),
            {
                canSend: !1,
                message: "Error checking email limits"
            }
        }
    }
    , [s == null ? void 0 : s.id])
      , b = reactExports.useCallback(async (_=1) => {
        if (!(s != null && s.id))
            throw new Error("User not authenticated");
        try {
            await EmailCountService.incrementEmailCount(s.id, _),
            await h()
        } catch ($) {
            throw console.error("Error incrementing email count:", $),
            $
        }
    }
    , [s == null ? void 0 : s.id, h]);
    return reactExports.useEffect( () => {
        h()
    }
    , [h]),
    {
        emailUsage: e,
        loading: o,
        error: c,
        refreshUsage: h,
        checkCanSendEmails: g,
        incrementEmailCount: b
    }
}
  , EmailOutreach = () => {
    useAuth();
    const {isPremium: s, loading: e} = usePremiumUser()
      , [i,o] = reactExports.useState([])
      , [a,c] = reactExports.useState([])
      , [d,h] = reactExports.useState(!0)
      , [g,b] = reactExports.useState(!1)
      , [_,$] = reactExports.useState(!1)
      , [_e,tt] = reactExports.useState(!1)
      , [rt,et] = reactExports.useState(!1)
      , [it,st] = reactExports.useState(null)
      , [nt,lt] = reactExports.useState(null)
      , [dt,ot] = reactExports.useState(!1)
      , [at,ht] = reactExports.useState([])
      , [pt,gt] = reactExports.useState(!1)
      , [wt,yt] = reactExports.useState(!1)
      , [Rt,Mt] = reactExports.useState(!1)
      , [ss,zt] = reactExports.useState(0)
      , [At,kt] = reactExports.useState(0)
      , [vt,bt] = reactExports.useState(0)
      , [Tt,Yt] = reactExports.useState(0)
      , [Nt,jt] = reactExports.useState(!1)
      , [xt,Et] = reactExports.useState(!1)
      , {emailUsage: Pt, loading: St, refreshUsage: Bt, checkCanSendEmails: os, incrementEmailCount: ds} = useEmailUsage()
      , js = async () => {
        if (nt) {
            b(!0);
            try {
                const ls = await googleAuthService.getContacts(nt.access_token);
                ht(ls);
                const Ds = ls.map(Ms => ({
                    id: Ms.id,
                    name: Ms.name,
                    email: Ms.email,
                    phone: Ms.phone || "",
                    company: Ms.company || "",
                    title: Ms.title || "",
                    status: "active",
                    email_sent: !1,
                    created_at: new Date().toISOString(),
                    updated_at: new Date().toISOString()
                }));
                o(Ds),
                Jt.success(`Loaded ${ls.length} contacts from Google`)
            } catch (ls) {
                console.error("Error loading Google contacts:", ls),
                Jt.error("Failed to load Google contacts")
            } finally {
                b(!1)
            }
        }
    }
      , ys = async () => {
        ot(!0),
        yt(!0);
        try {
            await googleAuthService.initiateAuth()
        } catch (ls) {
            console.error("Error initiating Google auth:", ls),
            Jt.error("Failed to initiate Gmail authentication"),
            ot(!1)
        }
    }
      , vs = reactExports.useCallback(ls => {
        lt(ls),
        ot(!1),
        Mt(!1),
        Jt.success("Gmail authentication successful!"),
        console.log("Gmail authentication details:", {
            email: ls.email,
            hasAccessToken: !!ls.access_token,
            hasRefreshToken: !!ls.refresh_token,
            provider: ls.provider
        })
    }
    , [])
      , Ss = async () => {
        if (nt)
            try {
                ot(!0);
                const ls = await googleAuthService.getStoredUser();
                ls ? (lt(ls),
                Jt.success("Authentication verified")) : (lt(null),
                Jt.warning("Authentication expired. Please re-authenticate."),
                Mt(!0))
            } catch (ls) {
                console.error("Error checking auth status:", ls),
                Jt.error("Error checking authentication status")
            } finally {
                ot(!1)
            }
    }
      , _s = async () => {
        try {
            ot(!0),
            nt && (await googleAuthService.clearStoredAuth(),
            lt(null),
            Jt.info("Previous authentication cleared")),
            await googleAuthService.initiateAuth(!0)
        } catch (ls) {
            console.error("Error during forced reauthentication:", ls),
            Jt.error("Failed to initiate reauthentication"),
            ot(!1)
        }
    }
      , ns = async () => {
        b(!0);
        try {
            console.log("🔍 Loading contacts from database (available for email)...");
            const ls = await testDatabaseConnection();
            if (!ls.success) {
                console.error("Database connection test failed:", ls),
                Jt.error(`Database connection failed: ${ls.message}`),
                et(!1);
                return
            }
            et(!0);
            const Ds = await contactsService.getContactsAvailableForEmail();
            o(Ds),
            Ds.length > 0 ? Jt.success(`Loaded ${Ds.length} contacts available for email (no emails sent in last 7 days)`) : Jt.info("No contacts available for email - all contacts have been emailed within the last 7 days")
        } catch (ls) {
            console.error("Error loading contacts from database:", ls),
            Jt.error(`Failed to load contacts from database: ${lsinstanceof Error ? ls.message : "Unknown error"}`),
            et(!1)
        } finally {
            b(!1)
        }
    }
      , xs = async () => {
        try {
            const ls = await emailService.testConnection();
            st({
                connected: ls.success,
                message: ls.success ? "Email service ready" : ls.message
            })
        } catch {
            st({
                connected: !1,
                message: "Email service unavailable"
            })
        }
    }
      , Lt = async () => {
        try {
            const [ls,Ds,Ms,Hs] = await Promise.all([DashboardService.getEmailsSentCount(), DashboardService.getFollowupsNeededCount(), DashboardService.getRepliesReceivedCount(), DashboardService.getTotalContactsCount()]);
            zt(ls),
            kt(Ds),
            bt(Ms),
            Yt(Hs)
        } catch (ls) {
            console.error("Error loading email stats:", ls)
        }
    }
      , ts = reactExports.useCallback(async () => {
        const ls = new URLSearchParams(window.location.search)
          , Ds = ls.get("code")
          , Ms = ls.get("state");
        if (Ds && Ms === "email_outreach") {
            ot(!0);
            try {
                const Hs = await googleAuthService.handleCallback(Ds);
                vs(Hs),
                window.history.replaceState({}, document.title, window.location.pathname)
            } catch (Hs) {
                console.error("Error handling OAuth callback:", Hs),
                Jt.error("Failed to complete authentication")
            } finally {
                ot(!1)
            }
        }
    }
    , [vs]);
    reactExports.useEffect( () => {
        (async () => {
            h(!0);
            try {
                await xs();
                const Ds = await googleAuthService.getStoredUser();
                Ds && (lt(Ds),
                console.log("Found existing Google authentication")),
                await ns(),
                await Lt(),
                await ts()
            } catch (Ds) {
                console.error("Error initializing page:", Ds),
                Jt.error("Failed to initialize email outreach")
            } finally {
                h(!1)
            }
        }
        )()
    }
    , [ts]);
    const ms = ls => {
        c(Ds => Ds.includes(ls) ? Ds.filter(Ms => Ms !== ls) : [...Ds, ls])
    }
      , hs = () => {
        c(i.map(ls => ls.id))
    }
      , bs = () => {
        c([])
    }
      , ks = async (ls, Ds, Ms) => {
        if (a.length === 0) {
            Jt.error("No contacts selected");
            return
        }
        if (s) {
            const Hs = await os(a.length);
            if (!Hs.canSend) {
                Jt.error(Hs.message || "Email limit exceeded"),
                Et(!0);
                return
            }
        }
        tt(!0);
        try {
            const Hs = i.filter($s => a.includes($s.id));
            let Vs = 0
              , Xs = 0;
            for (const $s of Hs)
                try {
                    if (pt && nt ? await googleAuthService.sendEmail(nt.access_token, $s.email, ls, Ds, Ms) : (console.log(`Simulating email send to ${$s.email}`),
                    await new Promise(zs => setTimeout(zs, 500))),
                    Vs++,
                    !pt)
                        try {
                            await contactsService.markEmailSent($s.id)
                        } catch (zs) {
                            console.warn("Failed to update contact status in database:", zs)
                        }
                } catch (zs) {
                    console.error(`Failed to send email to ${$s.email}:`, zs),
                    Xs++
                }
            if (Vs > 0 && (Jt.success(`Successfully ${pt ? "sent" : "simulated"} ${Vs} email${Vs !== 1 ? "s" : ""}`),
            s && pt))
                try {
                    await ds(Vs)
                } catch ($s) {
                    console.error("Failed to update email count:", $s)
                }
            Xs > 0 && Jt.error(`Failed to send ${Xs} email${Xs !== 1 ? "s" : ""}`),
            pt || await ns(),
            await Lt(),
            $(!1),
            c([])
        } catch (Hs) {
            console.error("Error sending emails:", Hs),
            Jt.error("Failed to send emails")
        } finally {
            tt(!1)
        }
    }
      , Ts = () => {
        pt ? js() : ns(),
        Lt()
    }
    ;
    return d ? jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50/30 md:flex",
        children: [jsxRuntimeExports.jsx(NewSidebar, {}), jsxRuntimeExports.jsx("div", {
            className: "flex-1 flex items-center justify-center w-full",
            children: jsxRuntimeExports.jsx(Card, {
                className: "w-full max-w-md",
                children: jsxRuntimeExports.jsxs(CardContent, {
                    className: "p-8 text-center",
                    children: [jsxRuntimeExports.jsx(LoaderCircle, {
                        className: "h-8 w-8 animate-spin text-primary mx-auto mb-4"
                    }), jsxRuntimeExports.jsx("h3", {
                        className: "text-lg font-semibold mb-2",
                        children: "Loading Email Outreach"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-600",
                        children: "Setting up your workspace..."
                    })]
                })
            })
        })]
    }) : jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50/30 md:flex",
        children: [jsxRuntimeExports.jsx(NewSidebar, {}), jsxRuntimeExports.jsxs("div", {
            className: "flex-1 flex flex-col max-h-screen overflow-hidden w-full",
            children: [jsxRuntimeExports.jsx("header", {
                className: "hidden md:flex h-16 shrink-0 items-center gap-2 bg-white/80 backdrop-blur-sm border-b border-gray-200/60",
                children: jsxRuntimeExports.jsx("div", {
                    className: "flex items-center gap-2 px-6 flex-1",
                    children: jsxRuntimeExports.jsx(Breadcrumb, {
                        children: jsxRuntimeExports.jsx(BreadcrumbList, {
                            children: jsxRuntimeExports.jsx(BreadcrumbItem, {
                                children: jsxRuntimeExports.jsxs(BreadcrumbPage, {
                                    className: "font-semibold flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(Mail, {
                                        className: "w-4 h-4"
                                    }), "Email Outreach", s && jsxRuntimeExports.jsx(PremiumBadge, {
                                        variant: "compact"
                                    })]
                                })
                            })
                        })
                    })
                })
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex-1 overflow-auto",
                children: [!s && !e && jsxRuntimeExports.jsxs("div", {
                    className: "relative h-full",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "filter blur-sm pointer-events-none",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "p-6 space-y-6",
                            children: [jsxRuntimeExports.jsx(Card, {
                                className: "border-blue-200 bg-gradient-to-r from-blue-50 to-indigo-50",
                                children: jsxRuntimeExports.jsx(CardContent, {
                                    className: "p-4",
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center justify-between",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-3",
                                            children: [jsxRuntimeExports.jsx("div", {
                                                className: "bg-blue-100 p-2 rounded-full",
                                                children: jsxRuntimeExports.jsx(Shield, {
                                                    className: "h-5 w-5 text-blue-600"
                                                })
                                            }), jsxRuntimeExports.jsxs("div", {
                                                children: [jsxRuntimeExports.jsx("h3", {
                                                    className: "font-semibold text-blue-900",
                                                    children: "Premium Email Outreach"
                                                }), jsxRuntimeExports.jsx("p", {
                                                    className: "text-sm text-blue-700",
                                                    children: "Connect with recruiters and hiring managers"
                                                })]
                                            })]
                                        }), jsxRuntimeExports.jsxs(Badge, {
                                            className: "bg-gradient-to-r from-yellow-400 via-yellow-500 to-yellow-600 text-yellow-900 border-yellow-300",
                                            children: [jsxRuntimeExports.jsx(Crown, {
                                                className: "w-3 h-3 mr-1"
                                            }), "Premium"]
                                        })]
                                    })
                                })
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "grid grid-cols-1 md:grid-cols-4 gap-6",
                                children: [jsxRuntimeExports.jsx(Card, {
                                    children: jsxRuntimeExports.jsx(CardContent, {
                                        className: "p-6",
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center justify-between",
                                            children: [jsxRuntimeExports.jsxs("div", {
                                                children: [jsxRuntimeExports.jsx("p", {
                                                    className: "text-sm font-medium text-gray-600",
                                                    children: "Total Contacts"
                                                }), jsxRuntimeExports.jsx("p", {
                                                    className: "text-2xl font-bold text-gray-900",
                                                    children: Tt
                                                })]
                                            }), jsxRuntimeExports.jsx("div", {
                                                className: "bg-blue-100 p-3 rounded-full",
                                                children: jsxRuntimeExports.jsx(Users, {
                                                    className: "h-6 w-6 text-blue-600"
                                                })
                                            })]
                                        })
                                    })
                                }), jsxRuntimeExports.jsx(Card, {
                                    children: jsxRuntimeExports.jsx(CardContent, {
                                        className: "p-6",
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center justify-between",
                                            children: [jsxRuntimeExports.jsxs("div", {
                                                children: [jsxRuntimeExports.jsx("p", {
                                                    className: "text-sm font-medium text-gray-600",
                                                    children: "Emails Sent"
                                                }), jsxRuntimeExports.jsx("p", {
                                                    className: "text-2xl font-bold text-gray-900",
                                                    children: "89"
                                                })]
                                            }), jsxRuntimeExports.jsx("div", {
                                                className: "bg-green-100 p-3 rounded-full",
                                                children: jsxRuntimeExports.jsx(Mail, {
                                                    className: "h-6 w-6 text-green-600"
                                                })
                                            })]
                                        })
                                    })
                                }), jsxRuntimeExports.jsx(Card, {
                                    children: jsxRuntimeExports.jsx(CardContent, {
                                        className: "p-6",
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center justify-between",
                                            children: [jsxRuntimeExports.jsxs("div", {
                                                children: [jsxRuntimeExports.jsx("p", {
                                                    className: "text-sm font-medium text-gray-600",
                                                    children: "Response Rate"
                                                }), jsxRuntimeExports.jsx("p", {
                                                    className: "text-2xl font-bold text-gray-900",
                                                    children: "23%"
                                                })]
                                            }), jsxRuntimeExports.jsx("div", {
                                                className: "bg-orange-100 p-3 rounded-full",
                                                children: jsxRuntimeExports.jsx(CircleAlert, {
                                                    className: "h-6 w-6 text-orange-600"
                                                })
                                            })]
                                        })
                                    })
                                }), jsxRuntimeExports.jsx(Card, {
                                    children: jsxRuntimeExports.jsx(CardContent, {
                                        className: "p-6",
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center justify-between",
                                            children: [jsxRuntimeExports.jsxs("div", {
                                                children: [jsxRuntimeExports.jsx("p", {
                                                    className: "text-sm font-medium text-gray-600",
                                                    children: "Interviews"
                                                }), jsxRuntimeExports.jsx("p", {
                                                    className: "text-2xl font-bold text-gray-900",
                                                    children: "12"
                                                })]
                                            }), jsxRuntimeExports.jsx("div", {
                                                className: "bg-purple-100 p-3 rounded-full",
                                                children: jsxRuntimeExports.jsx(CircleCheckBig, {
                                                    className: "h-6 w-6 text-purple-600"
                                                })
                                            })]
                                        })
                                    })
                                })]
                            }), jsxRuntimeExports.jsxs(Card, {
                                children: [jsxRuntimeExports.jsxs(CardHeader, {
                                    children: [jsxRuntimeExports.jsx(CardTitle, {
                                        children: "Premium Email Composer"
                                    }), jsxRuntimeExports.jsx(CardDescription, {
                                        children: "Advanced email templates and AI-powered personalization"
                                    })]
                                }), jsxRuntimeExports.jsx(CardContent, {
                                    children: jsxRuntimeExports.jsxs("div", {
                                        className: "space-y-4",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "bg-gray-100 rounded-lg p-4 h-32"
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "flex gap-2",
                                            children: [jsxRuntimeExports.jsxs(Button, {
                                                className: "bg-gradient-to-r from-blue-600 to-purple-600",
                                                children: [jsxRuntimeExports.jsx(Send, {
                                                    className: "w-4 h-4 mr-2"
                                                }), "Send Campaign"]
                                            }), jsxRuntimeExports.jsx(Button, {
                                                variant: "outline",
                                                children: "Schedule"
                                            })]
                                        })]
                                    })
                                })]
                            })]
                        })
                    }), jsxRuntimeExports.jsx("div", {
                        className: "absolute inset-0 bg-white/90 backdrop-blur-sm flex items-center justify-center p-6",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "text-center max-w-lg",
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "w-24 h-24 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center mx-auto mb-6",
                                children: jsxRuntimeExports.jsx(Lock, {
                                    className: "w-12 h-12 text-white"
                                })
                            }), jsxRuntimeExports.jsx("h2", {
                                className: "text-3xl font-bold text-gray-900 mb-4",
                                children: "Premium Email Outreach"
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-lg text-gray-600 mb-6",
                                children: "Unlock powerful email outreach tools to connect with recruiters and hiring managers. Send personalized campaigns, track responses, and land more interviews."
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-lg p-4 mb-6",
                                children: [jsxRuntimeExports.jsx("h3", {
                                    className: "font-semibold text-yellow-800 mb-2",
                                    children: "Premium Features Include:"
                                }), jsxRuntimeExports.jsxs("ul", {
                                    className: "text-sm text-yellow-700 space-y-1",
                                    children: [jsxRuntimeExports.jsx("li", {
                                        children: "• Unlimited email campaigns"
                                    }), jsxRuntimeExports.jsx("li", {
                                        children: "• AI-powered email templates"
                                    }), jsxRuntimeExports.jsx("li", {
                                        children: "• Advanced analytics and tracking"
                                    }), jsxRuntimeExports.jsx("li", {
                                        children: "• Gmail integration"
                                    }), jsxRuntimeExports.jsx("li", {
                                        children: "• Response management"
                                    }), jsxRuntimeExports.jsx("li", {
                                        children: "• Follow-up automation"
                                    })]
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-4",
                                children: [jsxRuntimeExports.jsx("a", {
                                    href: "https://payments.cashfree.com/forms/hirebuddy_premium_subscription",
                                    target: "_parent",
                                    className: "block w-full",
                                    style: {
                                        textDecoration: "none"
                                    },
                                    children: jsxRuntimeExports.jsxs(Button, {
                                        className: "w-full bg-gradient-to-r from-yellow-500 to-orange-600 hover:from-yellow-600 hover:to-orange-700 text-white font-semibold py-3 text-lg",
                                        children: [jsxRuntimeExports.jsx(Crown, {
                                            className: "w-5 h-5 mr-2"
                                        }), "Upgrade to Premium"]
                                    })
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-sm text-gray-500",
                                    children: "Join thousands of professionals who accelerated their job search"
                                })]
                            })]
                        })
                    })]
                }), s && jsxRuntimeExports.jsxs("div", {
                    className: "p-4 md:p-6 space-y-4 md:space-y-6",
                    children: [jsxRuntimeExports.jsx(Card, {
                        className: "border-blue-200 bg-gradient-to-r from-blue-50 to-indigo-50",
                        children: jsxRuntimeExports.jsx(CardContent, {
                            className: "p-3 md:p-4",
                            children: jsxRuntimeExports.jsxs("div", {
                                className: "flex flex-col md:flex-row md:items-center md:justify-between gap-3 md:gap-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-start md:items-center gap-2 md:gap-3 min-w-0 flex-1",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "bg-blue-100 p-1.5 md:p-2 rounded-full flex-shrink-0",
                                        children: jsxRuntimeExports.jsx(Shield, {
                                            className: "h-3 w-3 md:h-5 md:w-5 text-blue-600"
                                        })
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex-1 min-w-0",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            className: "flex flex-col md:flex-row md:items-center gap-1 md:gap-2",
                                            children: [jsxRuntimeExports.jsx("h3", {
                                                className: "text-sm md:text-base font-medium md:font-semibold text-blue-900",
                                                children: "Gmail Authentication"
                                            }), jsxRuntimeExports.jsxs(Button, {
                                                onClick: () => jt(!0),
                                                variant: "ghost",
                                                size: "sm",
                                                className: "text-blue-600 hover:text-blue-800 hover:bg-blue-100 p-0.5 md:p-1 h-auto w-fit text-xs",
                                                children: [jsxRuntimeExports.jsx(Info, {
                                                    className: "h-3 w-3 md:h-4 md:w-4"
                                                }), jsxRuntimeExports.jsx("span", {
                                                    className: "text-xs ml-1",
                                                    children: "Learn More"
                                                })]
                                            })]
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-xs md:text-sm text-blue-700 mt-0.5 md:mt-1 break-words",
                                            children: nt ? `Connected as ${nt.email}. Use Re-authenticate if experiencing issues.` : "Connect your Gmail account to send emails"
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex flex-col md:flex-row items-stretch md:items-center gap-2 flex-shrink-0",
                                    children: [nt && jsxRuntimeExports.jsxs(Badge, {
                                        variant: "secondary",
                                        className: "bg-green-100 text-green-800 border-green-200 w-fit text-xs px-2 py-1",
                                        children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                                            className: "h-2 w-2 md:h-3 md:w-3 mr-1"
                                        }), "Connected"]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "md:hidden space-y-1.5",
                                        children: [jsxRuntimeExports.jsx("button", {
                                            onClick: nt ? Ss : ys,
                                            disabled: dt,
                                            className: `w-full px-3 py-2 text-xs font-medium rounded-md transition-colors ${nt ? "border border-blue-300 text-blue-700 bg-white hover:bg-blue-50 disabled:opacity-50" : "bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50"}`,
                                            children: jsxRuntimeExports.jsx("div", {
                                                className: "flex items-center justify-center gap-1.5",
                                                children: dt ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                    children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                                        className: "h-3 w-3 animate-spin"
                                                    }), jsxRuntimeExports.jsx("span", {
                                                        children: nt ? "Verifying..." : "Connecting..."
                                                    })]
                                                }) : jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                                                    children: nt ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                        children: [jsxRuntimeExports.jsx(RefreshCw, {
                                                            className: "h-3 w-3"
                                                        }), jsxRuntimeExports.jsx("span", {
                                                            children: "Verify Connection"
                                                        })]
                                                    }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                        children: [jsxRuntimeExports.jsx(Mail, {
                                                            className: "h-3 w-3"
                                                        }), jsxRuntimeExports.jsx("span", {
                                                            children: "Connect Gmail"
                                                        })]
                                                    })
                                                })
                                            })
                                        }), nt && jsxRuntimeExports.jsx("button", {
                                            onClick: _s,
                                            disabled: dt,
                                            className: "w-full px-3 py-2 text-xs font-medium rounded-md transition-colors border border-gray-300 text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50",
                                            children: jsxRuntimeExports.jsx("div", {
                                                className: "flex items-center justify-center gap-1.5",
                                                children: dt ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                    children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                                        className: "h-3 w-3 animate-spin"
                                                    }), jsxRuntimeExports.jsx("span", {
                                                        children: "Reauthenticating..."
                                                    })]
                                                }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                    children: [jsxRuntimeExports.jsx(Shield, {
                                                        className: "h-3 w-3"
                                                    }), jsxRuntimeExports.jsx("span", {
                                                        children: "Re-authenticate"
                                                    })]
                                                })
                                            })
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "hidden md:flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(Button, {
                                            onClick: nt ? Ss : ys,
                                            disabled: dt,
                                            variant: nt ? "outline" : "default",
                                            size: "sm",
                                            className: `flex items-center gap-2 ${nt ? "text-gray-700" : "text-white"}`,
                                            children: dt ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                                    className: "h-4 w-4 animate-spin"
                                                }), nt ? "Verifying..." : "Connecting..."]
                                            }) : jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                                                children: nt ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                    children: [jsxRuntimeExports.jsx(RefreshCw, {
                                                        className: "h-4 w-4"
                                                    }), "Verify"]
                                                }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                    children: [jsxRuntimeExports.jsx(Mail, {
                                                        className: "h-4 w-4"
                                                    }), "Connect Gmail"]
                                                })
                                            })
                                        }), nt && jsxRuntimeExports.jsx(Button, {
                                            onClick: _s,
                                            disabled: dt,
                                            variant: "secondary",
                                            size: "sm",
                                            className: "flex items-center gap-2",
                                            children: dt ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                                    className: "h-4 w-4 animate-spin"
                                                }), "Reauthenticating..."]
                                            }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx(Shield, {
                                                    className: "h-4 w-4"
                                                }), "Re-authenticate"]
                                            })
                                        })]
                                    })]
                                })]
                            })
                        })
                    }), Rt && jsxRuntimeExports.jsxs(Card, {
                        className: "border-blue-200 bg-blue-50/50",
                        children: [jsxRuntimeExports.jsxs(CardHeader, {
                            className: "pb-4",
                            children: [jsxRuntimeExports.jsxs(CardTitle, {
                                className: "text-lg flex items-center gap-2",
                                children: [jsxRuntimeExports.jsx(Shield, {
                                    className: "h-5 w-5 text-blue-600"
                                }), "Email Configuration"]
                            }), jsxRuntimeExports.jsx(CardDescription, {
                                children: "Manage your Gmail authentication settings and troubleshoot connection issues"
                            })]
                        }), jsxRuntimeExports.jsxs(CardContent, {
                            className: "space-y-4",
                            children: [jsxRuntimeExports.jsxs(Alert, {
                                className: "border-blue-200 bg-blue-50",
                                children: [jsxRuntimeExports.jsx(Info, {
                                    className: "h-4 w-4 text-blue-600"
                                }), jsxRuntimeExports.jsxs(AlertDescription, {
                                    className: "text-blue-800",
                                    children: [jsxRuntimeExports.jsx("strong", {
                                        children: "When to reauthenticate:"
                                    }), ` If you're getting permission errors, emails aren't sending, or you've changed your Google account password, use the "Force Re-authenticate" option below.`]
                                })]
                            }), jsxRuntimeExports.jsx("div", {
                                className: "grid grid-cols-1 md:grid-cols-2 gap-4"
                            }), !nt && jsxRuntimeExports.jsx("div", {
                                className: "pt-4 border-t",
                                children: jsxRuntimeExports.jsx(Button, {
                                    onClick: ys,
                                    disabled: dt,
                                    className: "w-full",
                                    children: dt ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                        children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                            className: "h-4 w-4 mr-2 animate-spin"
                                        }), "Authenticating..."]
                                    }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                        children: [jsxRuntimeExports.jsx(Mail, {
                                            className: "h-4 w-4 mr-2"
                                        }), "Authenticate with Gmail"]
                                    })
                                })
                            }), nt && jsxRuntimeExports.jsxs("div", {
                                className: "pt-4 border-t space-y-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(ShieldCheck, {
                                            className: "h-4 w-4 text-green-600"
                                        }), jsxRuntimeExports.jsxs("span", {
                                            className: "text-sm font-medium",
                                            children: ["Authenticated as ", nt.email]
                                        })]
                                    }), jsxRuntimeExports.jsx(Button, {
                                        onClick: Ss,
                                        variant: "outline",
                                        size: "sm",
                                        disabled: dt,
                                        children: dt ? jsxRuntimeExports.jsx(LoaderCircle, {
                                            className: "h-4 w-4 animate-spin"
                                        }) : jsxRuntimeExports.jsx(RefreshCw, {
                                            className: "h-4 w-4"
                                        })
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "bg-blue-50 border border-blue-200 rounded-lg p-4",
                                    children: [jsxRuntimeExports.jsx("h4", {
                                        className: "font-medium text-blue-900 mb-2",
                                        children: "Having Issues?"
                                    }), jsxRuntimeExports.jsx("p", {
                                        className: "text-sm text-blue-700 mb-3",
                                        children: "If you're experiencing problems sending emails or accessing your Gmail, try reauthenticating."
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex gap-2",
                                        children: [jsxRuntimeExports.jsx(Button, {
                                            onClick: _s,
                                            disabled: dt,
                                            variant: "outline",
                                            size: "sm",
                                            className: "border-blue-300 text-blue-700 hover:bg-blue-100",
                                            children: dt ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                                    className: "h-4 w-4 mr-2 animate-spin"
                                                }), "Reauthenticating..."]
                                            }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx(Shield, {
                                                    className: "h-4 w-4 mr-2"
                                                }), "Force Re-authenticate"]
                                            })
                                        }), jsxRuntimeExports.jsx(Button, {
                                            onClick: Ss,
                                            disabled: dt,
                                            variant: "outline",
                                            size: "sm",
                                            className: "border-blue-300 text-blue-700 hover:bg-blue-100",
                                            children: dt ? jsxRuntimeExports.jsx(LoaderCircle, {
                                                className: "h-4 w-4 animate-spin"
                                            }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                                children: [jsxRuntimeExports.jsx(RefreshCw, {
                                                    className: "h-4 w-4 mr-2"
                                                }), "Verify Status"]
                                            })
                                        })]
                                    })]
                                })]
                            })]
                        })]
                    }), !pt && !rt && jsxRuntimeExports.jsxs(Alert, {
                        className: "border-amber-200 bg-amber-50",
                        children: [jsxRuntimeExports.jsx(TriangleAlert, {
                            className: "h-4 w-4 text-amber-600"
                        }), jsxRuntimeExports.jsxs(AlertDescription, {
                            className: "text-amber-800",
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Connection Issue:"
                            }), " Unable to load contacts from the database. Please check your connection and try refreshing."]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "md:hidden space-y-2",
                        children: [jsxRuntimeExports.jsx(Card, {
                            className: "border border-gray-200 shadow-sm",
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-3",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center",
                                            children: jsxRuntimeExports.jsx(Users, {
                                                className: "h-4 w-4 text-blue-600"
                                            })
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("div", {
                                                className: "text-xs font-medium text-gray-600",
                                                children: "Total Contacts"
                                            }), jsxRuntimeExports.jsx("div", {
                                                className: "text-lg font-bold text-gray-900",
                                                children: Tt
                                            })]
                                        })]
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "text-right",
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-1 text-xs font-medium text-blue-600",
                                            children: [jsxRuntimeExports.jsx(TrendingUp, {
                                                className: "h-3 w-3"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "text-xs",
                                                children: "Active"
                                            })]
                                        })
                                    })]
                                })
                            })
                        }), jsxRuntimeExports.jsx(Card, {
                            className: "border border-gray-200 shadow-sm",
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-3",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-8 h-8 bg-green-100 rounded-full flex items-center justify-center",
                                            children: jsxRuntimeExports.jsx(Mail, {
                                                className: "h-4 w-4 text-green-600"
                                            })
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("div", {
                                                className: "text-xs font-medium text-gray-600",
                                                children: "Emails Sent"
                                            }), jsxRuntimeExports.jsx("div", {
                                                className: "text-lg font-bold text-gray-900",
                                                children: ss
                                            })]
                                        })]
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "text-right",
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-1 text-xs font-medium text-green-600",
                                            children: [jsxRuntimeExports.jsx(Send, {
                                                className: "h-3 w-3"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "text-xs",
                                                children: "Delivered"
                                            })]
                                        })
                                    })]
                                })
                            })
                        }), jsxRuntimeExports.jsx(Card, {
                            className: "border border-gray-200 shadow-sm",
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-3",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center",
                                            children: jsxRuntimeExports.jsx(CircleAlert, {
                                                className: "h-4 w-4 text-orange-600"
                                            })
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("div", {
                                                className: "text-xs font-medium text-gray-600",
                                                children: "Follow Ups Needed"
                                            }), jsxRuntimeExports.jsx("div", {
                                                className: "text-lg font-bold text-gray-900",
                                                children: At
                                            })]
                                        })]
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "text-right",
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-1 text-xs font-medium text-orange-600",
                                            children: [jsxRuntimeExports.jsx(Calendar, {
                                                className: "h-3 w-3"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "text-xs",
                                                children: "Pending"
                                            })]
                                        })
                                    })]
                                })
                            })
                        }), jsxRuntimeExports.jsx(Card, {
                            className: "border border-gray-200 shadow-sm",
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-3",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx("div", {
                                            className: "w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center",
                                            children: jsxRuntimeExports.jsx(MessageSquare, {
                                                className: "h-4 w-4 text-purple-600"
                                            })
                                        }), jsxRuntimeExports.jsxs("div", {
                                            children: [jsxRuntimeExports.jsx("div", {
                                                className: "text-xs font-medium text-gray-600",
                                                children: "Replies Received"
                                            }), jsxRuntimeExports.jsx("div", {
                                                className: "text-lg font-bold text-gray-900",
                                                children: vt
                                            })]
                                        })]
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "text-right",
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-1 text-xs font-medium text-purple-600",
                                            children: [jsxRuntimeExports.jsx(Eye, {
                                                className: "h-3 w-3"
                                            }), jsxRuntimeExports.jsx("span", {
                                                className: "text-xs",
                                                children: vt > 0 ? `${Math.round(vt / Math.max(ss, 1) * 100)}%` : "0%"
                                            })]
                                        })
                                    })]
                                })
                            })
                        })]
                    }), s && jsxRuntimeExports.jsx("div", {
                        className: "mb-6",
                        children: jsxRuntimeExports.jsx(EmailUsageProgress, {
                            usage: Pt,
                            loading: St,
                            onRenewClick: () => Et(!0),
                            compact: !1
                        })
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "hidden md:grid grid-cols-1 md:grid-cols-4 gap-6",
                        children: [jsxRuntimeExports.jsx(Card, {
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-6",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx("p", {
                                            className: "text-sm font-medium text-gray-600",
                                            children: "Total Contacts"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-2xl font-bold text-gray-900",
                                            children: Tt
                                        })]
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "bg-blue-100 p-3 rounded-full",
                                        children: jsxRuntimeExports.jsx(Users, {
                                            className: "h-6 w-6 text-blue-600"
                                        })
                                    })]
                                })
                            })
                        }), jsxRuntimeExports.jsx(Card, {
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-6",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx("p", {
                                            className: "text-sm font-medium text-gray-600",
                                            children: "Emails Sent"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-2xl font-bold text-gray-900",
                                            children: ss
                                        })]
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "bg-green-100 p-3 rounded-full",
                                        children: jsxRuntimeExports.jsx(Mail, {
                                            className: "h-6 w-6 text-green-600"
                                        })
                                    })]
                                })
                            })
                        }), jsxRuntimeExports.jsx(Card, {
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-6",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx("p", {
                                            className: "text-sm font-medium text-gray-600",
                                            children: "Follow Ups Needed"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-2xl font-bold text-gray-900",
                                            children: At
                                        })]
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "bg-orange-100 p-3 rounded-full",
                                        children: jsxRuntimeExports.jsx(CircleAlert, {
                                            className: "h-6 w-6 text-orange-600"
                                        })
                                    })]
                                })
                            })
                        }), jsxRuntimeExports.jsx(Card, {
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-6",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx("p", {
                                            className: "text-sm font-medium text-gray-600",
                                            children: "Replies Received"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-2xl font-bold text-gray-900",
                                            children: vt
                                        })]
                                    }), jsxRuntimeExports.jsx("div", {
                                        className: "bg-purple-100 p-3 rounded-full",
                                        children: jsxRuntimeExports.jsx(CircleCheckBig, {
                                            className: "h-6 w-6 text-purple-600"
                                        })
                                    })]
                                })
                            })
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-4 md:space-y-6",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex flex-col md:flex-row md:items-center md:justify-between gap-3 md:gap-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                children: [jsxRuntimeExports.jsx("h2", {
                                    className: "text-lg md:text-xl font-medium md:font-semibold text-gray-900",
                                    children: "Email Composer"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-xs md:text-sm text-gray-600 mt-0.5 md:mt-1",
                                    children: "Showing contacts who haven't been emailed in the last 7 days"
                                })]
                            }), jsxRuntimeExports.jsx("div", {
                                className: "md:hidden",
                                children: jsxRuntimeExports.jsx("button", {
                                    onClick: Ts,
                                    disabled: g,
                                    className: "w-full px-3 py-2 text-xs font-medium rounded-md transition-colors border border-gray-300 text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50",
                                    children: jsxRuntimeExports.jsx("div", {
                                        className: "flex items-center justify-center gap-1.5",
                                        children: g ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                            children: [jsxRuntimeExports.jsx(LoaderCircle, {
                                                className: "h-3 w-3 animate-spin"
                                            }), jsxRuntimeExports.jsx("span", {
                                                children: "Refreshing..."
                                            })]
                                        }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                            children: [jsxRuntimeExports.jsx(RefreshCw, {
                                                className: "h-3 w-3"
                                            }), jsxRuntimeExports.jsx("span", {
                                                children: "Refresh Contacts"
                                            })]
                                        })
                                    })
                                })
                            }), jsxRuntimeExports.jsxs(Button, {
                                onClick: Ts,
                                variant: "outline",
                                disabled: g,
                                className: "hidden md:flex items-center gap-2",
                                children: [g ? jsxRuntimeExports.jsx(LoaderCircle, {
                                    className: "h-4 w-4 animate-spin"
                                }) : jsxRuntimeExports.jsx(RefreshCw, {
                                    className: "h-4 w-4"
                                }), "Refresh"]
                            })]
                        }), jsxRuntimeExports.jsx(AWSEmailComposer, {
                            contacts: i.map(ls => ({
                                id: ls.id,
                                name: ls.name,
                                email: ls.email,
                                company: ls.company,
                                position: ls.title,
                                linkedin_link: ls.linkedin_link
                            })),
                            selectedContacts: a,
                            onContactSelect: ms,
                            onSelectAll: hs,
                            onClearSelection: bs
                        })]
                    })]
                })]
            })]
        }), _ && jsxRuntimeExports.jsx(SimpleEmailComposer, {
            selectedContacts: i.filter(ls => a.includes(ls.id)),
            onSendEmail: ks,
            onClose: () => $(!1),
            isOpen: _,
            sending: _e
        }), jsxRuntimeExports.jsx(Dialog, {
            open: Nt,
            onOpenChange: jt,
            children: jsxRuntimeExports.jsxs(DialogContent, {
                className: "max-w-2xl",
                children: [jsxRuntimeExports.jsxs(DialogHeader, {
                    children: [jsxRuntimeExports.jsxs(DialogTitle, {
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Shield, {
                            className: "h-5 w-5 text-blue-600"
                        }), "Why We Need Gmail Permissions"]
                    }), jsxRuntimeExports.jsx(DialogDescription, {
                        children: "Understanding our Gmail integration and your data security"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-6",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "bg-blue-50 border border-blue-200 rounded-lg p-4",
                        children: [jsxRuntimeExports.jsxs("h4", {
                            className: "font-semibold text-blue-900 mb-2 flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(Shield, {
                                className: "h-4 w-4"
                            }), "Your Security is Our Priority"]
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-sm text-blue-800",
                            children: "Your Gmail password is never shared with us, and you can revoke access at any time through your Google Account settings."
                        }), jsxRuntimeExports.jsxs("p", {
                            className: "text-sm text-blue-800 mt-2",
                            children: ["For more details about how we handle your data, please read our", " ", jsxRuntimeExports.jsx(Link, {
                                to: "/privacy-policy",
                                className: "underline hover:text-blue-900 font-medium",
                                target: "_blank",
                                rel: "noopener noreferrer",
                                children: "Privacy Policy"
                            }), "."]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "bg-gray-50 border border-gray-200 rounded-lg p-4",
                        children: [jsxRuntimeExports.jsx("h4", {
                            className: "font-semibold text-gray-900 mb-2",
                            children: "What we DON'T do:"
                        }), jsxRuntimeExports.jsxs("ul", {
                            className: "text-sm text-gray-600 space-y-1",
                            children: [jsxRuntimeExports.jsx("li", {
                                children: "• We don't have access to your Gmail password"
                            }), jsxRuntimeExports.jsx("li", {
                                children: "• We don't read your personal emails"
                            }), jsxRuntimeExports.jsx("li", {
                                children: "• We don't send emails without your explicit action"
                            }), jsxRuntimeExports.jsx("li", {
                                children: "• We don't share your data with third parties"
                            }), jsxRuntimeExports.jsx("li", {
                                children: "• We don't access your emails outside of job application tracking"
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "bg-green-50 border border-green-200 rounded-lg p-4",
                        children: [jsxRuntimeExports.jsxs("h4", {
                            className: "font-semibold text-green-900 mb-2 flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(ShieldCheck, {
                                className: "h-4 w-4"
                            }), "You're in Control"]
                        }), jsxRuntimeExports.jsxs("p", {
                            className: "text-sm text-green-800",
                            children: ["You can revoke our access at any time by visiting your", " ", jsxRuntimeExports.jsx("a", {
                                href: "https://myaccount.google.com/permissions",
                                target: "_blank",
                                rel: "noopener noreferrer",
                                className: "underline hover:text-green-900",
                                children: "Google Account permissions page"
                            }), ". Your job search data will remain in your HireBuddy account, but we won't be able to send emails on your behalf until you re-authenticate."]
                        })]
                    })]
                })]
            })
        }), jsxRuntimeExports.jsx(SubscriptionRenewalDialog, {
            isOpen: xt,
            onClose: () => Et(!1),
            emailUsage: Pt,
            onRenewalSuccess: () => {
                Bt(),
                Jt.success("Subscription renewed successfully!")
            }
        })]
    })
}
  , EmailAPITest = () => {
    const [s,e] = reactExports.useState(null)
      , [i,o] = reactExports.useState(!1)
      , [a,c] = reactExports.useState(!1)
      , [d,h] = reactExports.useState({
        sender: "",
        to: "",
        subject: "Test Email from Hirebuddy",
        body: `This is a test email to verify the AWS email API integration is working correctly.

Best regards,
Hirebuddy Team`
    })
      , [g,b] = reactExports.useState({
        sender: "",
        to: "",
        body: "This is a test follow-up email to check the follow-up functionality."
    })
      , {toast: _} = useToast()
      , {user: $} = useAuth();
    reactExports.useEffect( () => {
        $ != null && $.email && (h(et => ({
            ...et,
            sender: $.email
        })),
        b(et => ({
            ...et,
            sender: $.email
        })))
    }
    , [$]),
    reactExports.useEffect( () => {
        _e()
    }
    , []);
    const _e = async () => {
        o(!0);
        try {
            const et = await emailService.testConnection();
            e({
                connected: et.success,
                message: et.message
            }),
            et.success ? _({
                title: "API Connected",
                description: et.message
            }) : _({
                title: "API Connection Failed",
                description: et.message,
                variant: "destructive"
            })
        } catch (et) {
            const it = et instanceof Error ? et.message : "Unknown error";
            e({
                connected: !1,
                message: `Connection error: ${it}`
            }),
            _({
                title: "Connection Error",
                description: it,
                variant: "destructive"
            })
        } finally {
            o(!1)
        }
    }
      , tt = async () => {
        if (!d.sender || !d.to || !d.subject || !d.body) {
            _({
                title: "Missing Fields",
                description: "Please fill in all fields before sending.",
                variant: "destructive"
            });
            return
        }
        if (!emailService.isValidEmail(d.sender) || !emailService.isValidEmail(d.to)) {
            _({
                title: "Invalid Email",
                description: "Please enter valid email addresses.",
                variant: "destructive"
            });
            return
        }
        c(!0);
        try {
            const et = {
                sender: d.sender,
                to: d.to,
                subject: d.subject,
                body: emailService.formatAsHtml(d.body)
            }
              , it = await emailService.sendEmail(et);
            _({
                title: "Email Sent Successfully",
                description: `Message ID: ${it.messageId}`
            }),
            console.log("Email sent successfully:", it)
        } catch (et) {
            const it = et instanceof Error ? et.message : "Unknown error";
            _({
                title: "Email Send Failed",
                description: it,
                variant: "destructive"
            }),
            console.error("Email send error:", et)
        } finally {
            c(!1)
        }
    }
      , rt = async () => {
        if (!g.sender || !g.to || !g.body) {
            _({
                title: "Missing Fields",
                description: "Please fill in all fields before sending follow-up.",
                variant: "destructive"
            });
            return
        }
        c(!0);
        try {
            const et = {
                sender: g.sender,
                body: g.body,
                to: g.to
            }
              , it = await emailService.sendFollowUp(et);
            _({
                title: "Follow-up Sent",
                description: it.message
            }),
            console.log("Follow-up sent successfully:", it)
        } catch (et) {
            const it = et instanceof Error ? et.message : "Unknown error";
            _({
                title: "Follow-up Failed",
                description: it,
                variant: "destructive"
            }),
            console.error("Follow-up error:", et)
        } finally {
            c(!1)
        }
    }
    ;
    return jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-[#fff7f8]",
        children: [jsxRuntimeExports.jsx("div", {
            className: "absolute inset-0 bg-[radial-gradient(circle_at_1px_1px,rgba(236,72,153,0.08)_1px,transparent_0)] bg-[length:32px_32px] [mask-image:radial-gradient(ellipse_50%_50%_at_50%_50%,#000_70%,transparent_100%)]"
        }), jsxRuntimeExports.jsx("header", {
            className: "bg-white border-b border-pink-100 shadow-sm relative z-10",
            children: jsxRuntimeExports.jsx("div", {
                className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8",
                children: jsxRuntimeExports.jsxs("div", {
                    className: "flex justify-between items-center h-16",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center space-x-4",
                        children: [jsxRuntimeExports.jsxs(Link, {
                            to: "/email-outreach",
                            className: "flex items-center text-gray-600 hover:text-gray-900",
                            children: [jsxRuntimeExports.jsx(ArrowLeft, {
                                className: "h-4 w-4 mr-2"
                            }), "Back to Email Outreach"]
                        }), jsxRuntimeExports.jsx("h1", {
                            className: "text-2xl font-mabry font-semibold text-[#403334]",
                            children: "AWS Email API Test"
                        })]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "flex items-center space-x-4",
                        children: jsxRuntimeExports.jsxs(Link, {
                            to: "/email-conversation-test",
                            className: "flex items-center text-blue-600 hover:text-blue-800 font-medium",
                            children: [jsxRuntimeExports.jsx(MessageSquare, {
                                className: "h-4 w-4 mr-2"
                            }), "Test Conversations"]
                        })
                    })]
                })
            })
        }), jsxRuntimeExports.jsx("div", {
            className: "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10",
            children: jsxRuntimeExports.jsxs("div", {
                className: "space-y-6",
                children: [jsxRuntimeExports.jsxs(Card, {
                    children: [jsxRuntimeExports.jsxs(CardHeader, {
                        children: [jsxRuntimeExports.jsxs(CardTitle, {
                            className: "flex items-center space-x-2",
                            children: [jsxRuntimeExports.jsx(Zap, {
                                className: "h-5 w-5"
                            }), jsxRuntimeExports.jsx("span", {
                                children: "AWS Email API Status"
                            })]
                        }), jsxRuntimeExports.jsx(CardDescription, {
                            children: "Test the connection to your AWS email automation API"
                        })]
                    }), jsxRuntimeExports.jsxs(CardContent, {
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between",
                            children: [jsxRuntimeExports.jsx(Alert, {
                                className: s != null && s.connected ? "border-green-200 bg-green-50 flex-1 mr-4" : "border-red-200 bg-red-50 flex-1 mr-4",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center space-x-2",
                                    children: [s != null && s.connected ? jsxRuntimeExports.jsx(CircleCheckBig, {
                                        className: "h-4 w-4 text-green-600"
                                    }) : jsxRuntimeExports.jsx(CircleAlert, {
                                        className: "h-4 w-4 text-red-600"
                                    }), jsxRuntimeExports.jsxs(AlertDescription, {
                                        className: s != null && s.connected ? "text-green-800" : "text-red-800",
                                        children: [jsxRuntimeExports.jsx("strong", {
                                            children: "Status:"
                                        }), " ", (s == null ? void 0 : s.message) || "Checking..."]
                                    })]
                                })
                            }), jsxRuntimeExports.jsxs(Button, {
                                variant: "outline",
                                onClick: _e,
                                disabled: i,
                                children: [i ? jsxRuntimeExports.jsx(LoaderCircle, {
                                    className: "h-4 w-4 animate-spin mr-2"
                                }) : jsxRuntimeExports.jsx(RefreshCw, {
                                    className: "h-4 w-4 mr-2"
                                }), "Test Connection"]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "mt-4 p-4 bg-gray-50 rounded-lg",
                            children: [jsxRuntimeExports.jsx("h4", {
                                className: "font-medium mb-2",
                                children: "API Endpoint Information"
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-1 text-sm",
                                children: [jsxRuntimeExports.jsxs("p", {
                                    children: [jsxRuntimeExports.jsx("strong", {
                                        children: "Base URL:"
                                    }), " ", getConfig().api.awsBaseUrl ? "Configured" : "Not configured"]
                                }), jsxRuntimeExports.jsx("p", {
                                    children: jsxRuntimeExports.jsx("strong", {
                                        children: "Available Endpoints:"
                                    })
                                }), jsxRuntimeExports.jsxs("ul", {
                                    className: "list-disc list-inside ml-4 space-y-1",
                                    children: [jsxRuntimeExports.jsxs("li", {
                                        children: [jsxRuntimeExports.jsx(Badge, {
                                            variant: "outline",
                                            children: "GET /"
                                        }), " - Health check"]
                                    }), jsxRuntimeExports.jsxs("li", {
                                        children: [jsxRuntimeExports.jsx(Badge, {
                                            variant: "outline",
                                            children: "POST /send_email"
                                        }), " - Send email"]
                                    }), jsxRuntimeExports.jsxs("li", {
                                        children: [jsxRuntimeExports.jsx(Badge, {
                                            variant: "outline",
                                            children: "POST /send_followup"
                                        }), " - Send follow-up"]
                                    }), jsxRuntimeExports.jsxs("li", {
                                        children: [jsxRuntimeExports.jsx(Badge, {
                                            variant: "outline",
                                            children: "POST /get_email_and_replies"
                                        }), " - Get conversation"]
                                    })]
                                })]
                            })]
                        })]
                    })]
                }), jsxRuntimeExports.jsxs(Card, {
                    children: [jsxRuntimeExports.jsxs(CardHeader, {
                        children: [jsxRuntimeExports.jsxs(CardTitle, {
                            className: "flex items-center space-x-2",
                            children: [jsxRuntimeExports.jsx(Send, {
                                className: "h-5 w-5"
                            }), jsxRuntimeExports.jsx("span", {
                                children: "Test Email Sending"
                            })]
                        }), jsxRuntimeExports.jsx(CardDescription, {
                            children: "Send a test email using the AWS API"
                        })]
                    }), jsxRuntimeExports.jsxs(CardContent, {
                        className: "space-y-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    htmlFor: "sender",
                                    children: "Sender Email"
                                }), jsxRuntimeExports.jsx(Input, {
                                    id: "sender",
                                    type: "email",
                                    placeholder: "your-email@gmail.com",
                                    value: d.sender,
                                    disabled: !0,
                                    className: "bg-gray-50 text-gray-700"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-xs text-gray-500",
                                    children: "Automatically set to your authenticated account email"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    htmlFor: "recipient",
                                    children: "Recipient Email"
                                }), jsxRuntimeExports.jsx(Input, {
                                    id: "recipient",
                                    type: "email",
                                    placeholder: "recipient@example.com",
                                    value: d.to,
                                    onChange: et => h(it => ({
                                        ...it,
                                        to: et.target.value
                                    }))
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-2",
                            children: [jsxRuntimeExports.jsx(Label, {
                                htmlFor: "subject",
                                children: "Subject"
                            }), jsxRuntimeExports.jsx(Input, {
                                id: "subject",
                                placeholder: "Email subject...",
                                value: d.subject,
                                onChange: et => h(it => ({
                                    ...it,
                                    subject: et.target.value
                                }))
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-2",
                            children: [jsxRuntimeExports.jsx(Label, {
                                htmlFor: "body",
                                children: "Email Body"
                            }), jsxRuntimeExports.jsx(Textarea, {
                                id: "body",
                                placeholder: "Email content...",
                                className: "min-h-[150px]",
                                value: d.body,
                                onChange: et => h(it => ({
                                    ...it,
                                    body: et.target.value
                                }))
                            })]
                        }), jsxRuntimeExports.jsxs(Button, {
                            className: "w-full",
                            onClick: tt,
                            disabled: a || !(s != null && s.connected),
                            children: [a ? jsxRuntimeExports.jsx(LoaderCircle, {
                                className: "h-4 w-4 mr-2 animate-spin"
                            }) : jsxRuntimeExports.jsx(Send, {
                                className: "h-4 w-4 mr-2"
                            }), a ? "Sending Test Email..." : "Send Test Email"]
                        })]
                    })]
                }), jsxRuntimeExports.jsxs(Card, {
                    children: [jsxRuntimeExports.jsxs(CardHeader, {
                        children: [jsxRuntimeExports.jsxs(CardTitle, {
                            className: "flex items-center space-x-2",
                            children: [jsxRuntimeExports.jsx(MessageSquare, {
                                className: "h-5 w-5"
                            }), jsxRuntimeExports.jsx("span", {
                                children: "Test Follow-up Email"
                            })]
                        }), jsxRuntimeExports.jsx(CardDescription, {
                            children: "Send a follow-up email to a previous recipient"
                        })]
                    }), jsxRuntimeExports.jsxs(CardContent, {
                        className: "space-y-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    htmlFor: "followup-sender",
                                    children: "Sender Email"
                                }), jsxRuntimeExports.jsx(Input, {
                                    id: "followup-sender",
                                    type: "email",
                                    placeholder: "your-email@gmail.com",
                                    value: g.sender,
                                    disabled: !0,
                                    className: "bg-gray-50 text-gray-700"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [jsxRuntimeExports.jsx(Label, {
                                    htmlFor: "followup-recipient",
                                    children: "Recipient Email"
                                }), jsxRuntimeExports.jsx(Input, {
                                    id: "followup-recipient",
                                    type: "email",
                                    placeholder: "recipient@example.com",
                                    value: g.to,
                                    onChange: et => b(it => ({
                                        ...it,
                                        to: et.target.value
                                    }))
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "space-y-2",
                            children: [jsxRuntimeExports.jsx(Label, {
                                htmlFor: "followup-body",
                                children: "Follow-up Message"
                            }), jsxRuntimeExports.jsx(Textarea, {
                                id: "followup-body",
                                placeholder: "Follow-up message content...",
                                className: "min-h-[120px]",
                                value: g.body,
                                onChange: et => b(it => ({
                                    ...it,
                                    body: et.target.value
                                }))
                            })]
                        }), jsxRuntimeExports.jsxs(Button, {
                            className: "w-full",
                            onClick: rt,
                            disabled: a || !(s != null && s.connected),
                            children: [a ? jsxRuntimeExports.jsx(LoaderCircle, {
                                className: "h-4 w-4 mr-2 animate-spin"
                            }) : jsxRuntimeExports.jsx(MessageSquare, {
                                className: "h-4 w-4 mr-2"
                            }), a ? "Sending Follow-up..." : "Send Follow-up"]
                        })]
                    })]
                }), jsxRuntimeExports.jsxs(Card, {
                    className: "bg-blue-50 border-blue-200",
                    children: [jsxRuntimeExports.jsx(CardHeader, {
                        children: jsxRuntimeExports.jsxs(CardTitle, {
                            className: "flex items-center space-x-2 text-blue-900",
                            children: [jsxRuntimeExports.jsx(User, {
                                className: "h-5 w-5"
                            }), jsxRuntimeExports.jsx("span", {
                                children: "Usage Instructions"
                            })]
                        })
                    }), jsxRuntimeExports.jsx(CardContent, {
                        className: "text-blue-800",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "space-y-2 text-sm",
                            children: [jsxRuntimeExports.jsx("p", {
                                children: jsxRuntimeExports.jsx("strong", {
                                    children: "Before sending emails:"
                                })
                            }), jsxRuntimeExports.jsxs("ul", {
                                className: "list-disc list-inside ml-4 space-y-1",
                                children: [jsxRuntimeExports.jsx("li", {
                                    children: "Ensure the sender email is authenticated with Gmail in your AWS API backend"
                                }), jsxRuntimeExports.jsx("li", {
                                    children: "The API will check if you've already sent an email to the recipient"
                                }), jsxRuntimeExports.jsx("li", {
                                    children: "Follow-ups are rate-limited (24 hours minimum between sends)"
                                }), jsxRuntimeExports.jsx("li", {
                                    children: "Maximum of 50 emails per user (upgradeable)"
                                }), jsxRuntimeExports.jsx("li", {
                                    children: "Maximum of 3 follow-ups per recipient"
                                })]
                            }), jsxRuntimeExports.jsx("p", {
                                className: "mt-3",
                                children: jsxRuntimeExports.jsx("strong", {
                                    children: "API Features:"
                                })
                            }), jsxRuntimeExports.jsxs("ul", {
                                className: "list-disc list-inside ml-4 space-y-1",
                                children: [jsxRuntimeExports.jsx("li", {
                                    children: "Automatic email threading and conversation tracking"
                                }), jsxRuntimeExports.jsx("li", {
                                    children: "Built-in spam prevention and rate limiting"
                                }), jsxRuntimeExports.jsx("li", {
                                    children: "Email status tracking and logging"
                                }), jsxRuntimeExports.jsx("li", {
                                    children: "Integration with Supabase for data storage"
                                })]
                            })]
                        })
                    })]
                })]
            })
        })]
    })
}
  , DatabaseTest = () => {
    const [s,e] = reactExports.useState(null)
      , [i,o] = reactExports.useState(!1)
      , [a,c] = reactExports.useState(!1)
      , d = async () => {
        o(!0);
        try {
            const b = await testDatabaseConnection();
            e(b),
            b.success ? Jt.success(b.message) : Jt.error(b.message)
        } catch (b) {
            const _ = {
                success: !1,
                message: `Test failed: ${binstanceof Error ? b.message : "Unknown error"}`,
                details: b
            };
            e(_),
            Jt.error(_.message)
        } finally {
            o(!1)
        }
    }
      , h = async () => {
        c(!0);
        try {
            const b = await addSampleContact();
            b.success ? (Jt.success(b.message),
            await d()) : Jt.error(b.message)
        } catch (b) {
            Jt.error(`Failed to add test contact: ${binstanceof Error ? b.message : "Unknown error"}`)
        } finally {
            c(!1)
        }
    }
      , g = async () => {
        try {
            const b = await contactsService.getContacts();
            Jt.success(`Contacts service test successful! Found ${b.length} contacts.`)
        } catch (b) {
            Jt.error(`Contacts service test failed: ${binstanceof Error ? b.message : "Unknown error"}`)
        }
    }
    ;
    return reactExports.useEffect( () => {
        d()
    }
    , []),
    jsxRuntimeExports.jsx("div", {
        className: "min-h-screen bg-gray-50 p-4",
        children: jsxRuntimeExports.jsxs("div", {
            className: "max-w-4xl mx-auto space-y-6",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "text-center",
                children: [jsxRuntimeExports.jsx("h1", {
                    className: "text-3xl font-bold text-gray-900 mb-2",
                    children: "Database Connection Test"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-gray-600",
                    children: "Debug your Supabase database connection"
                })]
            }), jsxRuntimeExports.jsxs(Card, {
                children: [jsxRuntimeExports.jsx(CardHeader, {
                    children: jsxRuntimeExports.jsxs(CardTitle, {
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Info, {
                            className: "h-5 w-5 text-blue-600"
                        }), "Environment Information"]
                    })
                }), jsxRuntimeExports.jsx(CardContent, {
                    className: "space-y-2",
                    children: jsxRuntimeExports.jsxs("div", {
                        className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                        children: [jsxRuntimeExports.jsx("div", {
                            children: jsxRuntimeExports.jsxs(Badge, {
                                variant: "outline",
                                children: ["Mode: ", getConfig().isDevelopment ? "development" : "production"]
                            })
                        }), jsxRuntimeExports.jsx("div", {
                            children: jsxRuntimeExports.jsxs(Badge, {
                                variant: getConfig().supabase.url ? "default" : "destructive",
                                children: ["Supabase URL: ", getConfig().supabase.url ? "Present" : "Missing"]
                            })
                        }), jsxRuntimeExports.jsx("div", {
                            children: jsxRuntimeExports.jsxs(Badge, {
                                variant: getConfig().supabase.anonKey ? "default" : "destructive",
                                children: ["Supabase Key: ", getConfig().supabase.anonKey ? "Present" : "Missing"]
                            })
                        })]
                    })
                })]
            }), jsxRuntimeExports.jsxs(Card, {
                children: [jsxRuntimeExports.jsx(CardHeader, {
                    children: jsxRuntimeExports.jsxs(CardTitle, {
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Database, {
                            className: "h-5 w-5 text-purple-600"
                        }), "Database Connection Test"]
                    })
                }), jsxRuntimeExports.jsxs(CardContent, {
                    className: "space-y-4",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsxs(Button, {
                            onClick: d,
                            disabled: i,
                            className: "flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(RefreshCw, {
                                className: `h-4 w-4 ${i ? "animate-spin" : ""}`
                            }), i ? "Testing..." : "Run Test"]
                        }), jsxRuntimeExports.jsxs(Button, {
                            onClick: g,
                            variant: "outline",
                            className: "flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(Database, {
                                className: "h-4 w-4"
                            }), "Test Contacts Service"]
                        }), jsxRuntimeExports.jsxs(Button, {
                            onClick: h,
                            disabled: a,
                            variant: "outline",
                            className: "flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(Plus, {
                                className: `h-4 w-4 ${a ? "animate-spin" : ""}`
                            }), a ? "Adding..." : "Add Test Contact"]
                        })]
                    }), s && jsxRuntimeExports.jsx(Alert, {
                        className: s.success ? "border-green-200 bg-green-50" : "border-red-200 bg-red-50",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2",
                            children: [s.success ? jsxRuntimeExports.jsx(CircleCheckBig, {
                                className: "h-4 w-4 text-green-600"
                            }) : jsxRuntimeExports.jsx(CircleX, {
                                className: "h-4 w-4 text-red-600"
                            }), jsxRuntimeExports.jsxs(AlertDescription, {
                                className: s.success ? "text-green-800" : "text-red-800",
                                children: [jsxRuntimeExports.jsx("strong", {
                                    children: s.success ? "Success: " : "Error: "
                                }), s.message]
                            })]
                        })
                    }), (s == null ? void 0 : s.success) && s.contactCount !== void 0 && jsxRuntimeExports.jsxs("div", {
                        className: "bg-blue-50 border border-blue-200 rounded-lg p-4",
                        children: [jsxRuntimeExports.jsx("h4", {
                            className: "font-semibold text-blue-800 mb-2",
                            children: "Database Stats"
                        }), jsxRuntimeExports.jsxs("p", {
                            className: "text-blue-700",
                            children: ["Total Contacts: ", jsxRuntimeExports.jsx("strong", {
                                children: s.contactCount
                            })]
                        }), s.details && Array.isArray(s.details) && s.details.length > 0 && jsxRuntimeExports.jsxs("div", {
                            className: "mt-3",
                            children: [jsxRuntimeExports.jsx("h5", {
                                className: "font-medium text-blue-800 mb-1",
                                children: "Sample Contacts:"
                            }), jsxRuntimeExports.jsx("ul", {
                                className: "text-sm text-blue-700 space-y-1",
                                children: s.details.map( (b, _) => jsxRuntimeExports.jsxs("li", {
                                    children: ["• ", b.full_name || b.first_name || "Unknown", " - ", b.email || "No email"]
                                }, _))
                            })]
                        })]
                    }), s && !s.success && s.details && jsxRuntimeExports.jsxs("div", {
                        className: "bg-red-50 border border-red-200 rounded-lg p-4",
                        children: [jsxRuntimeExports.jsx("h4", {
                            className: "font-semibold text-red-800 mb-2",
                            children: "Error Details"
                        }), jsxRuntimeExports.jsx("pre", {
                            className: "text-sm text-red-700 whitespace-pre-wrap",
                            children: JSON.stringify(s.details, null, 2)
                        })]
                    })]
                })]
            }), jsxRuntimeExports.jsxs(Card, {
                children: [jsxRuntimeExports.jsx(CardHeader, {
                    children: jsxRuntimeExports.jsxs(CardTitle, {
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(CircleAlert, {
                            className: "h-5 w-5 text-orange-600"
                        }), "Troubleshooting Guide"]
                    })
                }), jsxRuntimeExports.jsxs(CardContent, {
                    className: "space-y-3",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "space-y-2",
                        children: [jsxRuntimeExports.jsx("h4", {
                            className: "font-semibold",
                            children: "If the test fails:"
                        }), jsxRuntimeExports.jsxs("ul", {
                            className: "list-disc list-inside space-y-1 text-sm text-gray-700",
                            children: [jsxRuntimeExports.jsx("li", {
                                children: "Check that your environment variables are set in your deployment platform (Netlify, Vercel, etc.)"
                            }), jsxRuntimeExports.jsx("li", {
                                children: "Verify that VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are correctly configured"
                            }), jsxRuntimeExports.jsx("li", {
                                children: "Ensure the email_database table exists in your Supabase database"
                            }), jsxRuntimeExports.jsx("li", {
                                children: "Check your Supabase project settings and RLS policies"
                            }), jsxRuntimeExports.jsx("li", {
                                children: "Verify that your Supabase project is active and not paused"
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "space-y-2",
                        children: [jsxRuntimeExports.jsx("h4", {
                            className: "font-semibold",
                            children: "Environment Variables Needed:"
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "bg-gray-100 p-3 rounded text-sm font-mono",
                            children: ["VITE_SUPABASE_URL=your_supabase_url", jsxRuntimeExports.jsx("br", {}), "VITE_SUPABASE_ANON_KEY=your_supabase_anon_key"]
                        })]
                    })]
                })]
            })]
        })
    })
}
  , EmailConversationTest = () => {
    var rt;
    const [s,e] = reactExports.useState("")
      , [i,o] = reactExports.useState("")
      , [a,c] = reactExports.useState(!1)
      , [d,h] = reactExports.useState(null)
      , [g,b] = reactExports.useState([])
      , [_,$] = reactExports.useState("")
      , _e = async () => {
        if (!s || !i) {
            $("Please enter both sender and recipient emails");
            return
        }
        c(!0),
        $(""),
        h(null),
        b([]);
        try {
            console.log("Testing backend API with:", {
                senderEmail: s,
                recipientEmail: i
            });
            const et = await emailService.getEmailConversation({
                sender: s,
                to: i
            });
            console.log("Backend API response:", et),
            h(et);
            const it = await conversationService.getConversationHistory(`email-${i}`, s, i);
            console.log("Conversation service response:", it),
            b(it)
        } catch (et) {
            console.error("Test failed:", et),
            $(et instanceof Error ? et.message : "Unknown error occurred")
        } finally {
            c(!1)
        }
    }
      , tt = et => {
        switch (et.email_type) {
        case "outbound":
            return jsxRuntimeExports.jsx(Badge, {
                variant: "outline",
                className: "text-blue-600",
                children: "Sent"
            });
        case "inbound":
            return jsxRuntimeExports.jsx(Badge, {
                variant: "outline",
                className: "text-green-600",
                children: "Reply"
            });
        case "follow_up":
            return jsxRuntimeExports.jsx(Badge, {
                variant: "outline",
                className: "text-orange-600",
                children: "Follow-up"
            });
        default:
            return jsxRuntimeExports.jsx(Badge, {
                variant: "outline",
                children: et.email_type
            })
        }
    }
    ;
    return jsxRuntimeExports.jsxs("div", {
        className: "container mx-auto p-6 max-w-4xl",
        children: [jsxRuntimeExports.jsxs(Card, {
            className: "mb-6",
            children: [jsxRuntimeExports.jsxs(CardHeader, {
                children: [jsxRuntimeExports.jsx(CardTitle, {
                    children: "Email Conversation API Test"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-sm text-gray-600",
                    children: "Test the backend API to verify email conversations and replies are being fetched correctly"
                })]
            }), jsxRuntimeExports.jsxs(CardContent, {
                className: "space-y-4",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "grid grid-cols-2 gap-4",
                    children: [jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("label", {
                            className: "block text-sm font-medium mb-2",
                            children: "Sender Email"
                        }), jsxRuntimeExports.jsx(Input, {
                            type: "email",
                            placeholder: "your-email@gmail.com",
                            value: s,
                            onChange: et => e(et.target.value)
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("label", {
                            className: "block text-sm font-medium mb-2",
                            children: "Recipient Email"
                        }), jsxRuntimeExports.jsx(Input, {
                            type: "email",
                            placeholder: "recipient@example.com",
                            value: i,
                            onChange: et => o(et.target.value)
                        })]
                    })]
                }), jsxRuntimeExports.jsx(Button, {
                    onClick: _e,
                    disabled: a,
                    className: "w-full",
                    children: a ? "Testing..." : "Test Email Conversation API"
                }), _ && jsxRuntimeExports.jsxs("div", {
                    className: "bg-red-50 border border-red-200 rounded-lg p-4",
                    children: [jsxRuntimeExports.jsx("p", {
                        className: "text-red-800 font-medium",
                        children: "Error:"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-red-600",
                        children: _
                    })]
                })]
            })]
        }), d && jsxRuntimeExports.jsxs(Card, {
            className: "mb-6",
            children: [jsxRuntimeExports.jsxs(CardHeader, {
                children: [jsxRuntimeExports.jsx(CardTitle, {
                    children: "Direct Backend API Response"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-sm text-gray-600",
                    children: "Raw response from /get_email_and_replies endpoint"
                })]
            }), jsxRuntimeExports.jsxs(CardContent, {
                children: [jsxRuntimeExports.jsx("div", {
                    className: "bg-gray-50 rounded-lg p-4 overflow-auto",
                    children: jsxRuntimeExports.jsx("pre", {
                        className: "text-sm",
                        children: JSON.stringify(d, null, 2)
                    })
                }), jsxRuntimeExports.jsxs("div", {
                    className: "mt-4",
                    children: [jsxRuntimeExports.jsx("p", {
                        className: "text-sm font-medium",
                        children: "Summary:"
                    }), jsxRuntimeExports.jsxs("ul", {
                        className: "text-sm text-gray-600 mt-2 space-y-1",
                        children: [jsxRuntimeExports.jsxs("li", {
                            children: ["• Total emails found: ", Array.isArray(d) ? d.length : "Not an array"]
                        }), Array.isArray(d) && d.length > 0 && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [jsxRuntimeExports.jsxs("li", {
                                children: ["• First email from: ", d[0].from || "Unknown"]
                            }), jsxRuntimeExports.jsxs("li", {
                                children: ["• First email subject: ", d[0].subject || "No subject"]
                            }), jsxRuntimeExports.jsxs("li", {
                                children: ["• First email body length: ", ((rt = d[0].body) == null ? void 0 : rt.length) || 0, " characters"]
                            })]
                        })]
                    })]
                })]
            })]
        }), g.length > 0 && jsxRuntimeExports.jsxs(Card, {
            children: [jsxRuntimeExports.jsxs(CardHeader, {
                children: [jsxRuntimeExports.jsx(CardTitle, {
                    children: "Conversation Service Response"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-sm text-gray-600",
                    children: "Processed conversation history from conversation service"
                })]
            }), jsxRuntimeExports.jsx(CardContent, {
                children: jsxRuntimeExports.jsx("div", {
                    className: "space-y-4",
                    children: g.map( (et, it) => jsxRuntimeExports.jsxs("div", {
                        className: "border rounded-lg p-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center justify-between mb-2",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center space-x-2",
                                children: [tt(et), jsxRuntimeExports.jsxs("span", {
                                    className: "text-sm font-medium",
                                    children: ["From: ", et.sender_email]
                                }), jsxRuntimeExports.jsxs("span", {
                                    className: "text-sm text-gray-500",
                                    children: ["To: ", et.recipient_email]
                                })]
                            }), jsxRuntimeExports.jsx("div", {
                                className: "text-xs text-gray-500",
                                children: new Date(et.sent_at).toLocaleString()
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "mb-2",
                            children: [jsxRuntimeExports.jsx("span", {
                                className: "text-sm font-medium",
                                children: "Subject:"
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-sm ml-2",
                                children: et.subject || "No Subject"
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "mb-2",
                            children: [jsxRuntimeExports.jsx("span", {
                                className: "text-sm font-medium",
                                children: "Body:"
                            }), jsxRuntimeExports.jsx("div", {
                                className: "text-sm ml-2 mt-1 p-2 bg-gray-50 rounded",
                                children: et.body ? et.body.length > 200 ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                    children: [et.body.substring(0, 200), "...", jsxRuntimeExports.jsxs("span", {
                                        className: "text-blue-600 ml-2",
                                        children: ["(", et.body.length, " chars total)"]
                                    })]
                                }) : et.body : jsxRuntimeExports.jsx("span", {
                                    className: "text-gray-500 italic",
                                    children: "No body content"
                                })
                            })]
                        }), et.metadata && jsxRuntimeExports.jsxs("div", {
                            className: "text-xs text-gray-500",
                            children: [jsxRuntimeExports.jsx("span", {
                                className: "font-medium",
                                children: "Source:"
                            }), " ", et.metadata.source || "Unknown", et.metadata.is_reply && jsxRuntimeExports.jsx(Badge, {
                                variant: "outline",
                                className: "ml-2 text-xs",
                                children: "Is Reply"
                            })]
                        })]
                    }, et.id || it))
                })
            })]
        })]
    })
}
  , ADMIN_EMAILS = ["subhayudas49@gmail.com", "sharmanishant9119@gmail.com"]
  , JobApplicationsAdmin = () => {
    var ss, zt;
    const {user: s} = useAuth()
      , e = getConfig().isDevelopment || (s == null ? void 0 : s.email) && ADMIN_EMAILS.includes(s.email)
      , [i,o] = reactExports.useState("")
      , [a,c] = reactExports.useState("all")
      , [d,h] = reactExports.useState("")
      , [g,b] = reactExports.useState(null)
      , [_,$] = reactExports.useState(!1)
      , [_e,tt] = reactExports.useState("")
      , [rt,et] = reactExports.useState(!1)
      , it = reactExports.useMemo( () => ({
        status: a !== "all" ? a : void 0,
        companyName: d || void 0,
        limit: 100
    }), [a, d])
      , {data: st, isLoading: nt, error: lt, refetch: dt} = useAdminApplications(it)
      , {data: ot, isLoading: at} = useApplicationStats()
      , ht = useUpdateApplicationStatus()
      , pt = (st == null ? void 0 : st.applications) || []
      , gt = (st == null ? void 0 : st.total) || 0;
    console.log("Admin Applications Debug:", {
        isAdmin: e,
        userEmail: s == null ? void 0 : s.email,
        applicationsData: st,
        applications: pt.length,
        totalApplications: gt,
        error: lt,
        isLoading: nt,
        filters: it
    });
    const wt = reactExports.useMemo( () => {
        const At = pt.filter(vt => vt.job_type === "exclusive");
        if (!i)
            return At;
        const kt = i.toLowerCase();
        return At.filter(vt => {
            var bt, Tt;
            return ((bt = vt.full_name) == null ? void 0 : bt.toLowerCase().includes(kt)) || vt.user_email.toLowerCase().includes(kt) || vt.job_title.toLowerCase().includes(kt) || vt.company_name.toLowerCase().includes(kt) || ((Tt = vt.title) == null ? void 0 : Tt.toLowerCase().includes(kt))
        }
        )
    }
    , [pt, i])
      , yt = async (At, kt) => {
        if (!e) {
            Jt.error("Unauthorized access");
            return
        }
        et(!0);
        try {
            await ht.mutateAsync({
                applicationId: At,
                status: kt,
                adminNotes: _e || void 0,
                reviewedBy: s == null ? void 0 : s.id
            }),
            tt(""),
            $(!1),
            dt()
        } catch (vt) {
            console.error("Error updating status:", vt)
        } finally {
            et(!1)
        }
    }
      , Rt = At => {
        switch (At) {
        case "pending":
            return "secondary";
        case "reviewed":
            return "outline";
        case "shortlisted":
            return "default";
        case "rejected":
            return "destructive";
        case "hired":
            return "default";
        default:
            return "secondary"
        }
    }
      , Mt = At => {
        switch (At) {
        case "pending":
            return jsxRuntimeExports.jsx(Clock, {
                className: "w-4 h-4"
            });
        case "reviewed":
            return jsxRuntimeExports.jsx(Eye, {
                className: "w-4 h-4"
            });
        case "shortlisted":
            return jsxRuntimeExports.jsx(Star, {
                className: "w-4 h-4"
            });
        case "rejected":
            return jsxRuntimeExports.jsx(CircleX, {
                className: "w-4 h-4"
            });
        case "hired":
            return jsxRuntimeExports.jsx(CircleCheckBig, {
                className: "w-4 h-4"
            });
        default:
            return jsxRuntimeExports.jsx(CircleAlert, {
                className: "w-4 h-4"
            })
        }
    }
    ;
    return e ? jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50/30 md:flex",
        children: [jsxRuntimeExports.jsx(NewSidebar, {}), jsxRuntimeExports.jsxs("div", {
            className: "flex-1 flex flex-col max-h-screen overflow-hidden w-full",
            children: [jsxRuntimeExports.jsx("header", {
                className: "hidden md:flex h-16 shrink-0 items-center gap-2 bg-white/80 backdrop-blur-sm border-b border-gray-200/60",
                children: jsxRuntimeExports.jsx("div", {
                    className: "flex items-center gap-2 px-6",
                    children: jsxRuntimeExports.jsx(Breadcrumb, {
                        children: jsxRuntimeExports.jsx(BreadcrumbList, {
                            children: jsxRuntimeExports.jsx(BreadcrumbItem, {
                                children: jsxRuntimeExports.jsxs(BreadcrumbPage, {
                                    className: "font-semibold flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(Users, {
                                        className: "w-4 h-4"
                                    }), "Exclusive Job Applications Admin"]
                                })
                            })
                        })
                    })
                })
            }), jsxRuntimeExports.jsxs("div", {
                className: "flex-1 flex flex-col overflow-hidden",
                children: [jsxRuntimeExports.jsx("div", {
                    className: "bg-white border-b border-gray-200 p-6",
                    children: jsxRuntimeExports.jsxs(motion.div, {
                        initial: {
                            opacity: 0,
                            y: 20
                        },
                        animate: {
                            opacity: 1,
                            y: 0
                        },
                        className: "grid grid-cols-2 md:grid-cols-6 gap-4",
                        children: [jsxRuntimeExports.jsx(Card, {
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-4",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(Users, {
                                        className: "w-5 h-5 text-blue-600"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx("p", {
                                            className: "text-sm text-muted-foreground",
                                            children: "Total"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-2xl font-bold",
                                            children: at ? jsxRuntimeExports.jsx(Skeleton, {
                                                className: "h-6 w-8"
                                            }) : (ot == null ? void 0 : ot.total) || 0
                                        })]
                                    })]
                                })
                            })
                        }), jsxRuntimeExports.jsx(Card, {
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-4",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(Clock, {
                                        className: "w-5 h-5 text-orange-600"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx("p", {
                                            className: "text-sm text-muted-foreground",
                                            children: "Pending"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-2xl font-bold",
                                            children: at ? jsxRuntimeExports.jsx(Skeleton, {
                                                className: "h-6 w-8"
                                            }) : (ot == null ? void 0 : ot.pending) || 0
                                        })]
                                    })]
                                })
                            })
                        }), jsxRuntimeExports.jsx(Card, {
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-4",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(Eye, {
                                        className: "w-5 h-5 text-blue-600"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx("p", {
                                            className: "text-sm text-muted-foreground",
                                            children: "Reviewed"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-2xl font-bold",
                                            children: at ? jsxRuntimeExports.jsx(Skeleton, {
                                                className: "h-6 w-8"
                                            }) : (ot == null ? void 0 : ot.reviewed) || 0
                                        })]
                                    })]
                                })
                            })
                        }), jsxRuntimeExports.jsx(Card, {
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-4",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(Star, {
                                        className: "w-5 h-5 text-yellow-600"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx("p", {
                                            className: "text-sm text-muted-foreground",
                                            children: "Shortlisted"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-2xl font-bold",
                                            children: at ? jsxRuntimeExports.jsx(Skeleton, {
                                                className: "h-6 w-8"
                                            }) : (ot == null ? void 0 : ot.shortlisted) || 0
                                        })]
                                    })]
                                })
                            })
                        }), jsxRuntimeExports.jsx(Card, {
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-4",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(CircleX, {
                                        className: "w-5 h-5 text-red-600"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx("p", {
                                            className: "text-sm text-muted-foreground",
                                            children: "Rejected"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-2xl font-bold",
                                            children: at ? jsxRuntimeExports.jsx(Skeleton, {
                                                className: "h-6 w-8"
                                            }) : (ot == null ? void 0 : ot.rejected) || 0
                                        })]
                                    })]
                                })
                            })
                        }), jsxRuntimeExports.jsx(Card, {
                            children: jsxRuntimeExports.jsx(CardContent, {
                                className: "p-4",
                                children: jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-2",
                                    children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                                        className: "w-5 h-5 text-green-600"
                                    }), jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx("p", {
                                            className: "text-sm text-muted-foreground",
                                            children: "Hired"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-2xl font-bold",
                                            children: at ? jsxRuntimeExports.jsx(Skeleton, {
                                                className: "h-6 w-8"
                                            }) : (ot == null ? void 0 : ot.hired) || 0
                                        })]
                                    })]
                                })
                            })
                        })]
                    })
                }), jsxRuntimeExports.jsxs("div", {
                    className: "bg-white border-b border-gray-200 p-6 space-y-4",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "flex items-center justify-between",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2",
                            children: [jsxRuntimeExports.jsx(Badge, {
                                variant: "outline",
                                className: "text-xs bg-purple-50 text-purple-700 border-purple-200",
                                children: "Exclusive Jobs Only"
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-sm text-muted-foreground",
                                children: "Showing applications for exclusive job postings only"
                            })]
                        })
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-4",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "flex-1 relative",
                            children: [jsxRuntimeExports.jsx(Search, {
                                className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                            }), jsxRuntimeExports.jsx(Input, {
                                placeholder: "Search exclusive job applications...",
                                value: i,
                                onChange: At => o(At.target.value),
                                className: "pl-10"
                            })]
                        }), jsxRuntimeExports.jsxs(Select, {
                            value: a,
                            onValueChange: c,
                            children: [jsxRuntimeExports.jsx(SelectTrigger, {
                                className: "w-40",
                                children: jsxRuntimeExports.jsx(SelectValue, {
                                    placeholder: "Status"
                                })
                            }), jsxRuntimeExports.jsxs(SelectContent, {
                                children: [jsxRuntimeExports.jsx(SelectItem, {
                                    value: "all",
                                    children: "All Status"
                                }), jsxRuntimeExports.jsx(SelectItem, {
                                    value: "pending",
                                    children: "Pending"
                                }), jsxRuntimeExports.jsx(SelectItem, {
                                    value: "reviewed",
                                    children: "Reviewed"
                                }), jsxRuntimeExports.jsx(SelectItem, {
                                    value: "shortlisted",
                                    children: "Shortlisted"
                                }), jsxRuntimeExports.jsx(SelectItem, {
                                    value: "rejected",
                                    children: "Rejected"
                                }), jsxRuntimeExports.jsx(SelectItem, {
                                    value: "hired",
                                    children: "Hired"
                                })]
                            })]
                        }), jsxRuntimeExports.jsx(Input, {
                            placeholder: "Filter by company...",
                            value: d,
                            onChange: At => h(At.target.value),
                            className: "w-48"
                        })]
                    })]
                }), getConfig().isDevelopment, jsxRuntimeExports.jsxs("div", {
                    className: "flex-1 overflow-auto p-6",
                    children: [lt && jsxRuntimeExports.jsx(Card, {
                        className: "p-6 mb-4 border-red-200 bg-red-50",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "flex items-center gap-2 text-red-700",
                            children: [jsxRuntimeExports.jsx(CircleAlert, {
                                className: "w-5 h-5"
                            }), jsxRuntimeExports.jsxs("div", {
                                children: [jsxRuntimeExports.jsx("h3", {
                                    className: "font-semibold",
                                    children: "Error Loading Applications"
                                }), jsxRuntimeExports.jsx("p", {
                                    className: "text-sm mt-1",
                                    children: lt.message || "Failed to load job applications"
                                }), jsxRuntimeExports.jsx(Button, {
                                    variant: "outline",
                                    size: "sm",
                                    className: "mt-2",
                                    onClick: () => dt(),
                                    children: "Retry"
                                })]
                            })]
                        })
                    }), nt ? jsxRuntimeExports.jsx("div", {
                        className: "space-y-4",
                        children: Array.from({
                            length: 5
                        }).map( (At, kt) => jsxRuntimeExports.jsx(Card, {
                            className: "p-6",
                            children: jsxRuntimeExports.jsxs("div", {
                                className: "flex items-start gap-4",
                                children: [jsxRuntimeExports.jsx(Skeleton, {
                                    className: "w-12 h-12 rounded-full"
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex-1 space-y-2",
                                    children: [jsxRuntimeExports.jsx(Skeleton, {
                                        className: "h-5 w-3/4"
                                    }), jsxRuntimeExports.jsx(Skeleton, {
                                        className: "h-4 w-1/2"
                                    }), jsxRuntimeExports.jsx(Skeleton, {
                                        className: "h-4 w-full"
                                    })]
                                })]
                            })
                        }, kt))
                    }) : wt.length === 0 ? jsxRuntimeExports.jsxs(Card, {
                        className: "p-12 text-center",
                        children: [jsxRuntimeExports.jsx(Users, {
                            className: "w-12 h-12 text-gray-400 mx-auto mb-4"
                        }), jsxRuntimeExports.jsx("h3", {
                            className: "text-lg font-semibold mb-2",
                            children: "No Exclusive Job Applications Found"
                        }), jsxRuntimeExports.jsx("p", {
                            className: "text-muted-foreground",
                            children: i || a !== "all" || d ? "Try adjusting your filters to see more exclusive job applications." : "No exclusive job applications have been submitted yet."
                        })]
                    }) : jsxRuntimeExports.jsx("div", {
                        className: "space-y-4",
                        children: wt.map(At => {
                            var kt, vt;
                            return jsxRuntimeExports.jsx(motion.div, {
                                initial: {
                                    opacity: 0,
                                    y: 20
                                },
                                animate: {
                                    opacity: 1,
                                    y: 0
                                },
                                whileHover: {
                                    scale: 1.01
                                },
                                transition: {
                                    duration: .2
                                },
                                children: jsxRuntimeExports.jsx(Card, {
                                    className: "hover:shadow-md transition-shadow cursor-pointer",
                                    onClick: () => {
                                        b(At),
                                        $(!0),
                                        tt(At.admin_notes || "")
                                    }
                                    ,
                                    children: jsxRuntimeExports.jsx(CardContent, {
                                        className: "p-6",
                                        children: jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-start justify-between gap-4",
                                            children: [jsxRuntimeExports.jsxs("div", {
                                                className: "flex items-start gap-4 flex-1",
                                                children: [jsxRuntimeExports.jsx(Avatar, {
                                                    className: "w-12 h-12",
                                                    children: jsxRuntimeExports.jsx(AvatarFallback, {
                                                        children: ((vt = (kt = At.full_name) == null ? void 0 : kt.charAt(0)) == null ? void 0 : vt.toUpperCase()) || At.user_email.charAt(0).toUpperCase()
                                                    })
                                                }), jsxRuntimeExports.jsxs("div", {
                                                    className: "flex-1 min-w-0",
                                                    children: [jsxRuntimeExports.jsxs("div", {
                                                        className: "flex items-center gap-2 mb-1",
                                                        children: [jsxRuntimeExports.jsx("h3", {
                                                            className: "font-semibold text-lg truncate",
                                                            children: At.full_name || "Unknown Applicant"
                                                        }), jsxRuntimeExports.jsxs(Badge, {
                                                            variant: Rt(At.status),
                                                            className: "flex items-center gap-1",
                                                            children: [Mt(At.status), At.status.charAt(0).toUpperCase() + At.status.slice(1)]
                                                        })]
                                                    }), jsxRuntimeExports.jsx("p", {
                                                        className: "text-sm text-muted-foreground mb-2",
                                                        children: At.user_email
                                                    }), jsxRuntimeExports.jsxs("div", {
                                                        className: "flex items-center gap-4 text-sm text-muted-foreground mb-2",
                                                        children: [jsxRuntimeExports.jsxs("span", {
                                                            className: "flex items-center gap-1",
                                                            children: [jsxRuntimeExports.jsx(Briefcase, {
                                                                className: "w-4 h-4"
                                                            }), At.title || "No title"]
                                                        }), At.location && jsxRuntimeExports.jsxs("span", {
                                                            className: "flex items-center gap-1",
                                                            children: [jsxRuntimeExports.jsx(MapPin, {
                                                                className: "w-4 h-4"
                                                            }), At.location]
                                                        }), At.experience_years && jsxRuntimeExports.jsxs("span", {
                                                            className: "flex items-center gap-1",
                                                            children: [jsxRuntimeExports.jsx(Calendar, {
                                                                className: "w-4 h-4"
                                                            }), At.experience_years, " years exp."]
                                                        })]
                                                    }), jsxRuntimeExports.jsxs("div", {
                                                        className: "bg-gray-50 rounded-lg p-3 mb-2",
                                                        children: [jsxRuntimeExports.jsx("p", {
                                                            className: "font-medium text-sm",
                                                            children: "Applied for:"
                                                        }), jsxRuntimeExports.jsx("p", {
                                                            className: "font-semibold",
                                                            children: At.job_title
                                                        }), jsxRuntimeExports.jsxs("p", {
                                                            className: "text-sm text-muted-foreground",
                                                            children: ["at ", At.company_name]
                                                        })]
                                                    }), At.skills && At.skills.length > 0 && jsxRuntimeExports.jsxs("div", {
                                                        className: "flex flex-wrap gap-1 mb-2",
                                                        children: [At.skills.slice(0, 5).map( (bt, Tt) => jsxRuntimeExports.jsx(Badge, {
                                                            variant: "outline",
                                                            className: "text-xs",
                                                            children: bt
                                                        }, Tt)), At.skills.length > 5 && jsxRuntimeExports.jsxs(Badge, {
                                                            variant: "outline",
                                                            className: "text-xs",
                                                            children: ["+", At.skills.length - 5, " more"]
                                                        })]
                                                    })]
                                                })]
                                            }), jsxRuntimeExports.jsxs("div", {
                                                className: "text-right",
                                                children: [jsxRuntimeExports.jsxs("p", {
                                                    className: "text-sm text-muted-foreground",
                                                    children: ["Applied ", new Date(At.created_at).toLocaleDateString()]
                                                }), At.resume_url && jsxRuntimeExports.jsxs(Button, {
                                                    variant: "outline",
                                                    size: "sm",
                                                    className: "mt-2",
                                                    onClick: bt => {
                                                        bt.stopPropagation(),
                                                        window.open(At.resume_url, "_blank")
                                                    }
                                                    ,
                                                    children: [jsxRuntimeExports.jsx(FileText, {
                                                        className: "w-4 h-4 mr-2"
                                                    }), "View Resume"]
                                                })]
                                            })]
                                        })
                                    })
                                })
                            }, At.id)
                        }
                        )
                    })]
                })]
            })]
        }), jsxRuntimeExports.jsx(Dialog, {
            open: _,
            onOpenChange: $,
            children: jsxRuntimeExports.jsxs(DialogContent, {
                className: "max-w-4xl max-h-[90vh] overflow-y-auto",
                children: [jsxRuntimeExports.jsx(DialogHeader, {
                    children: jsxRuntimeExports.jsxs(DialogTitle, {
                        className: "flex items-center gap-2",
                        children: [jsxRuntimeExports.jsx(Users, {
                            className: "w-5 h-5"
                        }), "Application Details"]
                    })
                }), g && jsxRuntimeExports.jsxs("div", {
                    className: "space-y-6",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "grid grid-cols-1 md:grid-cols-2 gap-6",
                        children: [jsxRuntimeExports.jsxs(Card, {
                            children: [jsxRuntimeExports.jsx(CardHeader, {
                                children: jsxRuntimeExports.jsx(CardTitle, {
                                    className: "text-lg",
                                    children: "Applicant Information"
                                })
                            }), jsxRuntimeExports.jsxs(CardContent, {
                                className: "space-y-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center gap-3",
                                    children: [jsxRuntimeExports.jsx(Avatar, {
                                        className: "w-16 h-16",
                                        children: jsxRuntimeExports.jsx(AvatarFallback, {
                                            className: "text-lg",
                                            children: ((zt = (ss = g.full_name) == null ? void 0 : ss.charAt(0)) == null ? void 0 : zt.toUpperCase()) || g.user_email.charAt(0).toUpperCase()
                                        })
                                    }), jsxRuntimeExports.jsxs("div", {
                                        children: [jsxRuntimeExports.jsx("h3", {
                                            className: "font-semibold text-lg",
                                            children: g.full_name || "Unknown Applicant"
                                        }), jsxRuntimeExports.jsx("p", {
                                            className: "text-muted-foreground",
                                            children: g.title
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsx(Separator, {}), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-3",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(Mail, {
                                            className: "w-4 h-4 text-muted-foreground"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "text-sm",
                                            children: g.user_email
                                        })]
                                    }), g.phone && jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(Phone, {
                                            className: "w-4 h-4 text-muted-foreground"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "text-sm",
                                            children: g.phone
                                        })]
                                    }), g.location && jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(MapPin, {
                                            className: "w-4 h-4 text-muted-foreground"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "text-sm",
                                            children: g.location
                                        })]
                                    }), g.college && jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(GraduationCap, {
                                            className: "w-4 h-4 text-muted-foreground"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "text-sm",
                                            children: g.college
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-2",
                                        children: [jsxRuntimeExports.jsx(Briefcase, {
                                            className: "w-4 h-4 text-muted-foreground"
                                        }), jsxRuntimeExports.jsxs("span", {
                                            className: "text-sm",
                                            children: [g.experience_years || 0, " years experience"]
                                        })]
                                    })]
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex gap-2",
                                    children: [g.website && jsxRuntimeExports.jsx(Button, {
                                        variant: "outline",
                                        size: "sm",
                                        asChild: !0,
                                        children: jsxRuntimeExports.jsx("a", {
                                            href: g.website,
                                            target: "_blank",
                                            rel: "noopener noreferrer",
                                            children: jsxRuntimeExports.jsx(Globe, {
                                                className: "w-4 h-4"
                                            })
                                        })
                                    }), g.github && jsxRuntimeExports.jsx(Button, {
                                        variant: "outline",
                                        size: "sm",
                                        asChild: !0,
                                        children: jsxRuntimeExports.jsx("a", {
                                            href: g.github,
                                            target: "_blank",
                                            rel: "noopener noreferrer",
                                            children: jsxRuntimeExports.jsx(Github, {
                                                className: "w-4 h-4"
                                            })
                                        })
                                    }), g.linkedin && jsxRuntimeExports.jsx(Button, {
                                        variant: "outline",
                                        size: "sm",
                                        asChild: !0,
                                        children: jsxRuntimeExports.jsx("a", {
                                            href: g.linkedin,
                                            target: "_blank",
                                            rel: "noopener noreferrer",
                                            children: jsxRuntimeExports.jsx(Linkedin, {
                                                className: "w-4 h-4"
                                            })
                                        })
                                    })]
                                })]
                            })]
                        }), jsxRuntimeExports.jsxs(Card, {
                            children: [jsxRuntimeExports.jsx(CardHeader, {
                                children: jsxRuntimeExports.jsx(CardTitle, {
                                    className: "text-lg",
                                    children: "Job Application"
                                })
                            }), jsxRuntimeExports.jsxs(CardContent, {
                                className: "space-y-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    children: [jsxRuntimeExports.jsx("h4", {
                                        className: "font-semibold",
                                        children: g.job_title
                                    }), jsxRuntimeExports.jsxs("p", {
                                        className: "text-muted-foreground",
                                        children: ["at ", g.company_name]
                                    })]
                                }), jsxRuntimeExports.jsx(Separator, {}), jsxRuntimeExports.jsxs("div", {
                                    className: "space-y-2",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center justify-between",
                                        children: [jsxRuntimeExports.jsx("span", {
                                            className: "text-sm font-medium",
                                            children: "Status:"
                                        }), jsxRuntimeExports.jsxs(Badge, {
                                            variant: Rt(g.status),
                                            className: "flex items-center gap-1",
                                            children: [Mt(g.status), g.status.charAt(0).toUpperCase() + g.status.slice(1)]
                                        })]
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center justify-between",
                                        children: [jsxRuntimeExports.jsx("span", {
                                            className: "text-sm font-medium",
                                            children: "Applied:"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "text-sm text-muted-foreground",
                                            children: new Date(g.created_at).toLocaleDateString()
                                        })]
                                    }), g.reviewed_at && jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center justify-between",
                                        children: [jsxRuntimeExports.jsx("span", {
                                            className: "text-sm font-medium",
                                            children: "Reviewed:"
                                        }), jsxRuntimeExports.jsx("span", {
                                            className: "text-sm text-muted-foreground",
                                            children: new Date(g.reviewed_at).toLocaleDateString()
                                        })]
                                    })]
                                }), g.resume_url && jsxRuntimeExports.jsx(Button, {
                                    className: "w-full",
                                    asChild: !0,
                                    children: jsxRuntimeExports.jsxs("a", {
                                        href: g.resume_url,
                                        target: "_blank",
                                        rel: "noopener noreferrer",
                                        children: [jsxRuntimeExports.jsx(FileText, {
                                            className: "w-4 h-4 mr-2"
                                        }), "View Resume"]
                                    })
                                })]
                            })]
                        })]
                    }), g.bio && jsxRuntimeExports.jsxs(Card, {
                        children: [jsxRuntimeExports.jsx(CardHeader, {
                            children: jsxRuntimeExports.jsx(CardTitle, {
                                className: "text-lg",
                                children: "Bio"
                            })
                        }), jsxRuntimeExports.jsx(CardContent, {
                            children: jsxRuntimeExports.jsx("p", {
                                className: "text-sm",
                                children: g.bio
                            })
                        })]
                    }), g.skills && g.skills.length > 0 && jsxRuntimeExports.jsxs(Card, {
                        children: [jsxRuntimeExports.jsx(CardHeader, {
                            children: jsxRuntimeExports.jsx(CardTitle, {
                                className: "text-lg",
                                children: "Skills"
                            })
                        }), jsxRuntimeExports.jsx(CardContent, {
                            children: jsxRuntimeExports.jsx("div", {
                                className: "flex flex-wrap gap-2",
                                children: g.skills.map( (At, kt) => jsxRuntimeExports.jsx(Badge, {
                                    variant: "outline",
                                    children: At
                                }, kt))
                            })
                        })]
                    }), jsxRuntimeExports.jsxs(Card, {
                        children: [jsxRuntimeExports.jsx(CardHeader, {
                            children: jsxRuntimeExports.jsx(CardTitle, {
                                className: "text-lg",
                                children: "Admin Actions"
                            })
                        }), jsxRuntimeExports.jsxs(CardContent, {
                            className: "space-y-4",
                            children: [jsxRuntimeExports.jsxs("div", {
                                children: [jsxRuntimeExports.jsx("label", {
                                    className: "text-sm font-medium mb-2 block",
                                    children: "Update Status:"
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "flex gap-2 flex-wrap",
                                    children: ["pending", "reviewed", "shortlisted", "rejected", "hired"].map(At => jsxRuntimeExports.jsxs(Button, {
                                        variant: g.status === At ? "default" : "outline",
                                        size: "sm",
                                        onClick: () => yt(g.id, At),
                                        disabled: rt,
                                        className: "flex items-center gap-1",
                                        children: [Mt(At), At.charAt(0).toUpperCase() + At.slice(1)]
                                    }, At))
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                children: [jsxRuntimeExports.jsx("label", {
                                    className: "text-sm font-medium mb-2 block",
                                    children: "Admin Notes:"
                                }), jsxRuntimeExports.jsx(Textarea, {
                                    placeholder: "Add notes about this application...",
                                    value: _e,
                                    onChange: At => tt(At.target.value),
                                    rows: 3
                                })]
                            }), g.admin_notes && jsxRuntimeExports.jsxs("div", {
                                children: [jsxRuntimeExports.jsx("label", {
                                    className: "text-sm font-medium mb-2 block",
                                    children: "Previous Notes:"
                                }), jsxRuntimeExports.jsx("div", {
                                    className: "bg-gray-50 rounded-md p-3 text-sm",
                                    children: g.admin_notes
                                })]
                            })]
                        })]
                    })]
                })]
            })
        })]
    }) : jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50/30 md:flex",
        children: [jsxRuntimeExports.jsx(NewSidebar, {}), jsxRuntimeExports.jsx("div", {
            className: "flex-1 flex flex-col items-center justify-center w-full",
            children: jsxRuntimeExports.jsxs(Card, {
                className: "w-full max-w-md",
                children: [jsxRuntimeExports.jsx(CardHeader, {
                    children: jsxRuntimeExports.jsx(CardTitle, {
                        className: "text-center text-red-600",
                        children: "Access Denied"
                    })
                }), jsxRuntimeExports.jsxs(CardContent, {
                    className: "text-center",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "mb-4",
                        children: jsxRuntimeExports.jsx(CircleX, {
                            className: "w-16 h-16 text-red-500 mx-auto mb-4"
                        })
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-muted-foreground mb-4",
                        children: "This page is restricted to administrators only."
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-sm text-muted-foreground",
                        children: "Only authorized admin users can view job applications."
                    }), getConfig().isDevelopment]
                })]
            })
        })]
    })
}
  , GoogleCallback = () => {
    const [s] = useSearchParams()
      , e = useNavigate()
      , [i,o] = reactExports.useState("loading")
      , [a,c] = reactExports.useState("Authenticating with Google...");
    reactExports.useEffect( () => {
        (async () => {
            const g = s.get("code")
              , b = s.get("error");
            if (b) {
                o("error"),
                c(`Authentication failed: ${b}`);
                return
            }
            if (!g) {
                o("error"),
                c("No authorization code received from Google");
                return
            }
            try {
                c("Exchanging authorization code for tokens..."),
                await googleAuthService.handleCallback(g) ? (o("success"),
                c("Successfully authenticated! Redirecting to Email Outreach..."),
                setTimeout( () => {
                    e("/email-outreach?authenticated=true")
                }
                , 2e3)) : (o("error"),
                c("Failed to authenticate with Google"))
            } catch (_) {
                console.error("Error handling Google callback:", _),
                o("error"),
                c("An error occurred during authentication")
            }
        }
        )()
    }
    , [s, e]);
    const d = () => {
        e("/email-outreach")
    }
    ;
    return jsxRuntimeExports.jsx("div", {
        className: "min-h-screen bg-[#fff7f8] flex items-center justify-center p-4",
        children: jsxRuntimeExports.jsxs(Card, {
            className: "w-full max-w-md",
            children: [jsxRuntimeExports.jsx(CardHeader, {
                className: "text-center",
                children: jsxRuntimeExports.jsxs(CardTitle, {
                    className: "flex items-center justify-center gap-2",
                    children: [i === "loading" && jsxRuntimeExports.jsx(LoaderCircle, {
                        className: "h-5 w-5 animate-spin text-[#d35c65]"
                    }), i === "success" && jsxRuntimeExports.jsx(CircleCheckBig, {
                        className: "h-5 w-5 text-green-500"
                    }), i === "error" && jsxRuntimeExports.jsx(CircleX, {
                        className: "h-5 w-5 text-red-500"
                    }), "Google Authentication"]
                })
            }), jsxRuntimeExports.jsxs(CardContent, {
                className: "text-center space-y-4",
                children: [jsxRuntimeExports.jsx("p", {
                    className: "text-sm text-gray-600",
                    children: a
                }), i === "error" && jsxRuntimeExports.jsx(Button, {
                    onClick: d,
                    className: "bg-[#d35c65] hover:bg-[#b24e55] text-white",
                    children: "Back to Email Outreach"
                }), i === "success" && jsxRuntimeExports.jsx("div", {
                    className: "bg-green-50 border border-green-200 rounded-lg p-3",
                    children: jsxRuntimeExports.jsx("p", {
                        className: "text-sm text-green-700",
                        children: "You can now send emails through your Gmail account!"
                    })
                })]
            })]
        })
    })
}
  , blogPosts = [{
    id: 4,
    title: "What is Hirebuddy?",
    subtitle: "Making job hunting effortless for job seekers everywhere",
    excerpt: "Finding a job sucks and we're here to fix that. Learn how Hirebuddy automates your entire job search process.",
    author: "Sarvagya",
    date: "2024-01-01",
    readTime: "6 min read",
    category: "Company",
    content: `Finding a job sucks and we're here to fix that.

Hi everyone, how are you doing? If you've ended up on this page, chances are you're either looking for a job, one of our competitors, an investor (pls give us your money), or someone who just likes to read. Don't worry. We got you. In today's blog we'll be going over Hirebuddy- what exactly is it, and how can we help you out?

Well, job hunting is a painful process. Let's talk about how a normal person goes about getting a job. The first step starts at finding good openings, just like everyone, you open 10s of online job portals and spend hours and hours scrolling through them to find relevant openings. You found one that caught your eye- oops, it requires 10 years of experience, found another that seems just like the perfect role - oh no it's unpaid. Hours and hours are spent scrolling through platforms trying to find the best openings.

Now let's assume after hours of us scrolling to find good openings, we've found a few we'd like to apply to. Now the harder part starts- applying to these places. Why do we have to fill out the same forms over and over again?

You create a perfect CV, a nicely written cover letter, and fill out the same boring forms hoping to hear back. If you want to stand out from the rest of the applicants, you have to do things like change your CV every time according to the JD, create a new cover letter for every role you apply to, research the company, and send personally curated cold emails. All of this to never hear back from companies.

Hours and hours are wasted finding out these jobs and applying to them and that's what exactly Hirebuddy is here to fix.

<h2 class="text-3xl font-semibold text-[#403334] mt-8 mb-4">What is Hirebuddy?</h2>

Well, if I were to describe it one line- Hirebuddy is the AI assistant that finds, matches, and applies to jobs- so you don't have to.

Hirebuddy is a platform that automates the entire job/ internship search and application process. Making finding a job effortless for job seekers.

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">How does our platform work?</h3>

Well, simple- you come to our website, sign in, and go through the basic onboarding.

Don't have a resume? Don't worry - you can use our tool to make one. Get ATS scores, relevancy to roles you're applying and tailored feedback on what you can do to make your resume stand out. No more having multiple templates open trying to find the best one. Let Hirebuddy help you with that.

Remember the part where I talked about going through multiple job boards? Well, we fix that. Our job board picks up openings from all over the internet, all in one place, and our unique relevancy scoring system matches you with the best openings catered to you. No more having to have 10s of sites open and having to scroll through all of them. Get matched with the best jobs meant for you with no hassle. Landing a job isn't about endless scrolling - it's about smart strategy.

Get matched with jobs that are tailored to your skills and goals, in one single click.

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">Well I got matched with good jobs, now what's next?</h3>

Usually it's creating new CVs, cover letters, writing cold emails and filling out boring and repetitive forms but as Chadwick Boseman said- (insert we don't do that here meme)

Hirebuddy takes care of sending out your applications to the companies you want to. We fill out forms, create new CVs for every role, create cover letters , write personalised cold emails - all of that. We send out your job applications so you don't have to.

Job applications should be personalised and not templatised and that is exactly what Hirebuddy believes in. Every application we send is tailored to the role, the company, and your profile. No two jobs are the same, so your application shouldn't be either. Whether it's adjusting your CV to highlight relevant skills or writing a cold email that actually gets opened, we make sure you're putting your best foot forward - every single time. With Hirebuddy, you're not applying more, you're applying smarter.

Get notified of every place we've applied to on your behalf through your personal dashboard. Track everything - upcoming interviews, number of offers, application statuses - all in one place. No spreadsheets, no guesswork, just clarity and control.

We believe job-seeking should be about you -your skills, your goals - not about managing forms or copy-pasting cover letters. Hirebuddy handles the busywork so you can focus on what actually moves the needle.

Hirebuddy handles the repetitive stuff so you can focus on preparing, upskilling, and landing the job.

We've helped multiple people land roles so far and would love to help you out too! Whether you're a student looking for internships, a fresh graduate, or a working professional switching jobs — Hirebuddy works for you. Check us out today!

Best

Sarvagya.`
}, {
    id: 1,
    title: "Why You're Not Hearing Back After Applying to Jobs",
    subtitle: "And what to actually do about it",
    excerpt: "You spent hours updating your CV, hit apply, and then… silence. If this sounds familiar, you're not alone. Here's why it happens and how to fix it.",
    author: "Hirebuddy Team",
    date: "2024-01-15",
    readTime: "8 min read",
    category: "Job Search",
    content: `You spent hours updating your CV, hit apply, and then… silence.

No email. No rejection. Nothing.

If this sounds familiar, you're not alone.

Thousands of people apply to jobs every day and never hear back. Not because they're not good enough, but because the system is broken, boring, and overloaded.

Here's why it happens -and how to fix it.

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">1. Your CV isn't tailored</h3>

Most people use the same CV for every job. Recruiters can tell.

The company wants to feel like you actually care about their role, not just any job.

<strong>Fix it:</strong>

Customize your CV for each application. Match keywords, reorder your experiences, tweak the summary. It doesn't take long, especially if you're using Hirebuddy.

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">2. You're applying on the wrong platforms</h3>

Sites like LinkedIn and Naukri are flooded. Some jobs get 1,000+ applicants in a few hours.

By the time you apply, a shortlist is already being made.

<strong>Fix it:</strong>

Go beyond job boards. Apply through company career pages. Reach out to recruiters. Use platforms that help you apply early and often - like Hirebuddy, which finds jobs for you across the internet and applies with your updated resume.

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">3. Your CV didn't pass the ATS</h3>

Even if you're a great fit, your CV might not even reach a human.

Applicant Tracking Systems (ATS) reject CVs that don't match formatting or keywords.

<strong>Fix it:</strong>

Use simple formatting. Add the right keywords. No charts. No tables. Or use Hirebuddy's Resume Builder - it formats everything to pass ATS automatically.

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">4. You didn't follow up</h3>

Most people apply and wait.

But hiring managers are busy. Following up (the right way) can move you ahead of 90% of applicants.

<strong>Fix it:</strong>

Send a short, polite email to the recruiter. Mention the role, show your interest, and ask if they need anything else. Hirebuddy can even help write and send cold emails to recruiters.

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">5. It's a numbers game, but you're playing it wrong</h3>

Some people mass-apply without any effort. Others apply to just a few and wait weeks.

<strong>Fix it:</strong>

You need the right volume with the right approach. Apply to more roles, but with customized CVs and smart follow-ups. That's what Hirebuddy is built to do.

If you're not hearing back, don't take it personally.

The job search process isn't fair but you can play it smarter.

Your time should go into <strong>preparing for interviews</strong>, not wasting hours filling out forms and rewriting resumes. That's what we built Hirebuddy for.

Let us handle the boring stuff. You focus on getting hired.

hirebuddy.net.`
}, {
    id: 2,
    title: "Your CV Sucks (Unless You've Done This)",
    subtitle: "A complete guide to building a CV that gets interviews",
    excerpt: "Most CVs look the same. Recruiters spend 6-8 seconds on each one. Here's how to make yours stand out and actually get interviews.",
    author: "Hirebuddy Team",
    date: "2024-01-10",
    readTime: "10 min read",
    category: "Resume Tips",
    content: `Let's be real - most CVs look the same. And recruiters? They spend <strong>6–8 seconds</strong> on each one. That's less time than it takes to open an Instagram story.

So how do you make yours stand out?

This isn't just a guide on formatting or adding buzzwords. It's about building a CV that actually gets you interviews - and doesn't get lost in some ATS (Applicant Tracking System) black hole.

Whether you're applying for your first job or your fifth, here's how to build a CV that does the heavy lifting for you.

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">Step 1: Know Who You're Writing For</h3>

Your CV isn't a biography. It's a <strong>sales pitch</strong>.

Recruiters are scanning for 3 things:

• Are you qualified for the role?
• Can you communicate clearly?
• Did you put in any effort, or did you just send the same thing to 200 companies?

<strong>Tip:</strong> Tailor your CV for every role - even small tweaks go a long way. (Yes, it's annoying. Yes, it works. Yes Hirebuddy helps you do that.)

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">Step 2: Make It ATS-Friendly</h3>

Most big companies use software (called ATS) to filter CVs before a human even sees them. That means:

• No fancy fonts or layouts
• No images, charts, or tables
• Keywords matter - mirror the language from the job description
• Save as PDF (unless the job says otherwise)

If your CV looks beautiful but no one ever replies… you probably built it for humans, not robots. Use our Hirebuddy Resume Maker to create an ATS friendly resume.

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">Step 3: Front-Load Your Impact</h3>

Your CV needs to <strong>grab attention fast</strong>.

The top 1/3rd of your CV should scream:

<blockquote class="border-l-4 border-[#b24e55] pl-4 italic text-[#4A3D55] my-4">"Hey, I'm the person you're looking for."</blockquote>

Use a sharp summary section:

• Who you are
• What you've done
• What kind of roles you're looking for

And under each experience, skip the boring job description. Instead, focus on:

• <strong>What you did</strong>
• <strong>What changed because of it</strong>
• <strong>Numbers > Adjectives</strong>

<div class="bg-[#fff7f8] p-4 rounded-lg my-4">
<strong>Example:</strong>

❌ "Managed social media accounts"

✅ "Grew Instagram following by 60% in 3 months through organic content and influencer outreach"
</div>

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">Step 4: Cut the BS</h3>

Your CV isn't your life story. It's a highlight reel.

Cut:

• Objective statements ("Looking for a challenging role…" - boring)
• Soft skills sections ("Hardworking, team player, punctual" - cool, so is everyone)
• Irrelevant info (your class 10th % doesn't belong here)

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">Step 5: Use a Smarter Tool</h3>

Building a solid, clean, ATS-friendly CV shouldn't take hours - or your soul.

That's why we built <strong>Hirebuddy's CV Generator</strong> - designed to:

✅ Auto-format your resume to pass ATS filters

✅ Customize for different roles in one click

✅ Highlight your skills and experience in a way that actually <em>gets noticed</em>

✅ And yes, it looks good <em>and</em> gets read

No design skills needed. No BS. Just upload your info, tweak a few things, and you're done.

Create your CV now - (enter link to it)

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">Think Like a Recruiter</h3>

If you were skimming 200 CVs a day, what would <em>you</em> look for?

Probably not someone who listed "MS Word" as a skill.

You'd want clarity, relevance, and impact. So give them that.

Your CV is your first impression. Make it count.

And if you want to skip the drama and do it the smart way, let <strong>Hirebuddy</strong> build it for you.

<strong>Ready to stand out from the stack?</strong>

Use Hirebuddy's free CV tool and apply like a pro.

[Get started now →]`
}, {
    id: 3,
    title: "Stop Winging It: A Real Guide to Cracking Job Interviews",
    subtitle: "Turn interviews from nerve-wracking to natural conversations",
    excerpt: "Most people think interviews are about answering questions. They're not. They're about owning your story and showing you can solve problems.",
    author: "Hirebuddy Team",
    date: "2024-01-05",
    readTime: "12 min read",
    category: "Interview Prep",
    content: `So you landed an interview - congrats. Now what?

Most people think interviews are about answering questions. They're not. They're about <em>owning your story</em> and showing that you can solve problems for the company.

Whether you're a fresh grad or making a switch, this guide will help you walk into interviews with confidence (and not panic-googling "how to answer tell me about yourself" 10 minutes before).

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">Step 1: Know the Role Better Than the JD</h3>

Most job descriptions are very vague. Your job is to decode them.

Ask yourself:

• What will this person actually do in the first 3 months?
• What skills are <em>must-haves</em> vs nice-to-haves?
• Can I tie my experience to the core of this role?

Tip: Look up people already in similar roles at the company on LinkedIn - reverse engineer what made them a fit.

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">Step 2: Do Your <em>Real</em> Research</h3>

Everyone says "read about the company." Cool. But go deeper.

Look into:

• Recent news, funding, or product launches.
• What the founders or execs are talking about online.
• Future plans for the company

Use this to <em>tailor</em> your answers. Show them you're not just applying to 50 jobs and praying something sticks. Show them that you've done your homework. Brownie points if you can establish some common connection between you and the interviewer.

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">Step 3: Nail "Tell Me About Yourself"</h3>

This isn't your life story. It's your <em>elevator pitch</em>.

Structure:

1. Who you are (short summary)
2. What you've done (highlight relevant experience)
3. Why this role/company (show intent)

<div class="bg-[#fff7f8] p-4 rounded-lg my-4">
<strong>Example:</strong> "I'm a recent CS grad who spent the last year building small projects with real-world users. I love working on products that make life easier - which is why this role at [Company] instantly stood out."
</div>

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">Step 4: Use the STAR Method, Always</h3>

For every behavioral question ("Tell me about a time you…"), use this:

• <strong>S</strong>ituation – Set the context
• <strong>T</strong>ask – What needed to be done?
• <strong>A</strong>ction – What <em>you</em> did
• <strong>R</strong>esult – What happened (with numbers if possible)

Interviewers love structure. Don't ramble.

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">Step 5: Avoid These Rookie Mistakes</h3>

• Saying "I'm a perfectionist" when asked about weaknesses. Just... don't.
• Not preparing any questions for the interviewer. Always have 2-3 ready.
• Talking only about <em>yourself</em>. Always link back to how you'll add value to <em>them</em>.

The best interviews feel like conversations, not interrogations.

The more you prepare, the more natural you'll sound. Don't memorize answers. Internalize <em>why</em> you're a good fit. Then go in there and show them.

You've got this.

<h3 class="text-2xl font-semibold text-[#403334] mt-8 mb-4">P.S. : Hate Applying to Jobs?</h3>

We built <strong>Hirebuddy</strong> to take care of the worst parts of the job hunt - from finding relevant roles to applying with custom CVs and emails. We make job hunting effortless.

You focus on prepping for interviews. Let us handle the boring stuff.

Join our waitlist now-

(put link).`
}]
  , Blogs = () => {
    const [s,e] = reactExports.useState(null)
      , [i,o] = useSearchParams();
    reactExports.useEffect( () => {
        const c = i.get("post");
        if (c) {
            const d = blogPosts.find(h => h.id === parseInt(c));
            d && e(d)
        }
    }
    , [i]);
    const a = () => {
        e(null),
        o({})
    }
    ;
    return s ? jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-[#fff7f8]",
        children: [jsxRuntimeExports.jsx(Header, {}), jsxRuntimeExports.jsx("div", {
            className: "container mx-auto px-4 sm:px-6 lg:px-8 py-8 pt-24",
            children: jsxRuntimeExports.jsxs(motion.div, {
                initial: {
                    opacity: 0,
                    y: 20
                },
                animate: {
                    opacity: 1,
                    y: 0
                },
                transition: {
                    duration: .6
                },
                children: [jsxRuntimeExports.jsxs(Button, {
                    onClick: a,
                    variant: "ghost",
                    className: "mb-8 text-[#b24e55] hover:text-[#E75A82] hover:bg-[#ffe0e0]",
                    children: [jsxRuntimeExports.jsx(ArrowRight, {
                        className: "h-4 w-4 mr-2 rotate-180"
                    }), "Back to all blogs"]
                }), jsxRuntimeExports.jsxs("article", {
                    className: "max-w-4xl mx-auto",
                    children: [jsxRuntimeExports.jsxs("header", {
                        className: "mb-12",
                        children: [jsxRuntimeExports.jsx(Badge, {
                            className: "mb-4 bg-[#ffe0e0] text-[#b24e55] hover:bg-[#ffe0e0]",
                            children: s.category
                        }), jsxRuntimeExports.jsx("h1", {
                            className: "text-4xl md:text-5xl lg:text-6xl font-mabry font-semibold text-[#403334] mb-4",
                            children: s.title
                        }), s.subtitle && jsxRuntimeExports.jsx("p", {
                            className: "text-xl md:text-2xl text-[#4A3D55] font-light mb-8",
                            children: s.subtitle
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "flex flex-wrap items-center gap-4 text-sm text-[#b26469]",
                            children: [jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-1",
                                children: [jsxRuntimeExports.jsx(User, {
                                    className: "h-4 w-4"
                                }), s.author]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-1",
                                children: [jsxRuntimeExports.jsx(Calendar, {
                                    className: "h-4 w-4"
                                }), new Date(s.date).toLocaleDateString("en-US", {
                                    year: "numeric",
                                    month: "long",
                                    day: "numeric"
                                })]
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "flex items-center gap-1",
                                children: [jsxRuntimeExports.jsx(Clock, {
                                    className: "h-4 w-4"
                                }), s.readTime]
                            })]
                        })]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "prose prose-lg max-w-none",
                        children: jsxRuntimeExports.jsx("div", {
                            className: "whitespace-pre-line text-[#403334] leading-relaxed",
                            dangerouslySetInnerHTML: {
                                __html: s.content
                            }
                        })
                    }), jsxRuntimeExports.jsx("div", {
                        className: "mt-16 pt-8 border-t border-[#ffe0e0]",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "bg-gradient-to-r from-[#b24e55] to-[#E3405F] rounded-2xl p-8 text-white text-center",
                            children: [jsxRuntimeExports.jsx("h3", {
                                className: "text-2xl font-mabry font-semibold mb-4",
                                children: "Ready to transform your job search?"
                            }), jsxRuntimeExports.jsx("p", {
                                className: "text-lg mb-6 opacity-90",
                                children: "Let Hirebuddy handle the applications while you focus on landing the job."
                            }), jsxRuntimeExports.jsxs(Button, {
                                className: "bg-white text-[#b24e55] hover:bg-gray-100 font-medium px-8 py-3 rounded-xl",
                                onClick: () => {
                                    window.location.href = "/signup"
                                }
                                ,
                                children: ["Sign Up", jsxRuntimeExports.jsx(ArrowRight, {
                                    className: "h-4 w-4 ml-2"
                                })]
                            })]
                        })
                    })]
                })]
            })
        }), jsxRuntimeExports.jsx(Footer, {})]
    }) : jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-[#fff7f8]",
        children: [jsxRuntimeExports.jsx(Header, {}), jsxRuntimeExports.jsx("section", {
            className: "pt-24 pb-16 px-4 bg-[#fff7f8]",
            children: jsxRuntimeExports.jsx("div", {
                className: "container mx-auto text-center",
                children: jsxRuntimeExports.jsxs(motion.div, {
                    initial: {
                        opacity: 0,
                        y: 30
                    },
                    animate: {
                        opacity: 1,
                        y: 0
                    },
                    transition: {
                        duration: .8
                    },
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "mb-8",
                        children: jsxRuntimeExports.jsxs("div", {
                            className: "inline-flex items-center rounded-full border border-[#ffe0e0] bg-[#ffe0e0] px-4 py-1.5",
                            children: [jsxRuntimeExports.jsx("span", {
                                className: "text-sm font-medium text-[#3e3233]",
                                children: "Latest Insights"
                            }), jsxRuntimeExports.jsx("div", {
                                className: "mx-2 h-4 w-[1px] bg-[#b16368]"
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-sm font-semibold text-[#b16368]",
                                children: "Career tips & guides"
                            })]
                        })
                    }), jsxRuntimeExports.jsxs("h1", {
                        className: "text-4xl md:text-5xl lg:text-6xl text-center font-mabry font-semibold text-[#403334] max-w-4xl mx-auto mb-6",
                        children: ["Learn from our ", jsxRuntimeExports.jsx("span", {
                            className: "text-[#b24e55]",
                            children: "experts"
                        }), " and land your dream job"]
                    }), jsxRuntimeExports.jsx("p", {
                        className: "font-light text-lg md:text-xl text-center text-[#4A3D55] max-w-3xl mx-auto mb-12",
                        children: "Practical advice, proven strategies, and insider tips to help you navigate the modern job market and accelerate your career."
                    })]
                })
            })
        }), jsxRuntimeExports.jsx("section", {
            className: "py-16 px-4 bg-[#FFEDED]",
            children: jsxRuntimeExports.jsx("div", {
                className: "container mx-auto",
                children: jsxRuntimeExports.jsx("div", {
                    className: "grid grid-cols-1 md:grid-cols-2 gap-8 max-w-6xl mx-auto",
                    children: blogPosts.map( (c, d) => jsxRuntimeExports.jsx(motion.div, {
                        initial: {
                            opacity: 0,
                            y: 20
                        },
                        animate: {
                            opacity: 1,
                            y: 0
                        },
                        transition: {
                            duration: .6,
                            delay: d * .1
                        },
                        children: jsxRuntimeExports.jsxs(Card, {
                            className: "h-full bg-white border-2 border-[#ffb8b8] hover:border-[#b24e55] transition-all duration-300 cursor-pointer group hover:shadow-[0_10px_40px_rgba(178,78,85,0.2)]",
                            onClick: () => e(c),
                            children: [jsxRuntimeExports.jsxs(CardHeader, {
                                className: "pb-4",
                                children: [jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between mb-3",
                                    children: [jsxRuntimeExports.jsx(Badge, {
                                        className: "bg-[#ffe0e0] text-[#b24e55] hover:bg-[#ffe0e0]",
                                        children: c.category
                                    }), jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center text-sm text-[#b26469]",
                                        children: [jsxRuntimeExports.jsx(Clock, {
                                            className: "h-4 w-4 mr-1"
                                        }), c.readTime]
                                    })]
                                }), jsxRuntimeExports.jsx(CardTitle, {
                                    className: "text-2xl font-mabry font-semibold text-[#403334] group-hover:text-[#b24e55] transition-colors line-clamp-2",
                                    children: c.title
                                }), c.subtitle && jsxRuntimeExports.jsx(CardDescription, {
                                    className: "text-[#b24e55] font-medium text-base",
                                    children: c.subtitle
                                })]
                            }), jsxRuntimeExports.jsxs(CardContent, {
                                children: [jsxRuntimeExports.jsx("p", {
                                    className: "text-[#4A3D55] leading-relaxed mb-6 line-clamp-3",
                                    children: c.excerpt
                                }), jsxRuntimeExports.jsxs("div", {
                                    className: "flex items-center justify-between",
                                    children: [jsxRuntimeExports.jsxs("div", {
                                        className: "flex items-center gap-4 text-sm text-[#b26469]",
                                        children: [jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-1",
                                            children: [jsxRuntimeExports.jsx(User, {
                                                className: "h-4 w-4"
                                            }), c.author]
                                        }), jsxRuntimeExports.jsxs("div", {
                                            className: "flex items-center gap-1",
                                            children: [jsxRuntimeExports.jsx(Calendar, {
                                                className: "h-4 w-4"
                                            }), new Date(c.date).toLocaleDateString("en-US", {
                                                month: "short",
                                                day: "numeric"
                                            })]
                                        })]
                                    }), jsxRuntimeExports.jsxs(Button, {
                                        variant: "ghost",
                                        size: "sm",
                                        className: "text-[#b24e55] hover:text-[#E75A82] hover:bg-[#ffe0e0] group-hover:translate-x-1 transition-all",
                                        children: ["Read more", jsxRuntimeExports.jsx(ArrowRight, {
                                            className: "h-4 w-4 ml-1"
                                        })]
                                    })]
                                })]
                            })]
                        })
                    }, c.id))
                })
            })
        }), jsxRuntimeExports.jsx("section", {
            className: "py-20 bg-gradient-to-r from-[#b24e55] to-[#E3405F]",
            children: jsxRuntimeExports.jsx("div", {
                className: "container mx-auto px-4 text-center",
                children: jsxRuntimeExports.jsxs(motion.div, {
                    initial: {
                        opacity: 0,
                        y: 30
                    },
                    whileInView: {
                        opacity: 1,
                        y: 0
                    },
                    viewport: {
                        once: !0
                    },
                    transition: {
                        duration: .8
                    },
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-3xl md:text-4xl lg:text-5xl font-mabry font-semibold text-white mb-6",
                        children: "Ready to put these tips into action?"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-xl text-white/90 max-w-2xl mx-auto mb-8",
                        children: "Stop wasting time on manual applications. Let Hirebuddy find and apply to jobs for you."
                    }), jsxRuntimeExports.jsxs(Button, {
                        className: "bg-white text-[#b24e55] hover:bg-gray-100 font-medium px-8 py-4 rounded-xl text-lg",
                        onClick: () => {
                            window.location.href = "/signup"
                        }
                        ,
                        children: ["Sign Up", jsxRuntimeExports.jsx(ArrowRight, {
                            className: "h-5 w-5 ml-2"
                        })]
                    })]
                })
            })
        }), jsxRuntimeExports.jsx(Footer, {})]
    })
}
;
function Community() {
    return jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-[#fff7f8]",
        children: [jsxRuntimeExports.jsx(Header, {}), jsxRuntimeExports.jsxs("div", {
            className: "flex flex-col items-center justify-center p-4 pt-20",
            children: [jsxRuntimeExports.jsx("div", {
                className: "inline-flex items-center rounded-full border border-[#ffe0e0] bg-[#ffe0e0] px-4 py-1.5 mb-8",
                children: jsxRuntimeExports.jsx("span", {
                    className: "text-sm font-medium text-[#b16368]",
                    children: "Already 10000+ Members & Growing"
                })
            }), jsxRuntimeExports.jsxs("h1", {
                className: "text-4xl md:text-5xl lg:text-6xl text-center font-mabry font-semibold text-[#403334] max-w-4xl mb-6",
                children: ["Join India's Most Powerful ", jsxRuntimeExports.jsx("span", {
                    className: "text-[#b24e55]",
                    children: "Job-Seeker Community"
                })]
            }), jsxRuntimeExports.jsxs("p", {
                className: "text-lg md:text-xl text-center text-[#4A3D55] max-w-2xl mb-12",
                children: ["We're building India's largest job-hunting crew — where students and fresh grads find jobs faster through insider leads, referrals, and zero-stress support.", jsxRuntimeExports.jsx("br", {}), jsxRuntimeExports.jsx("br", {}), "No spam. No ghosting. Just real opportunities, real people, and a community that's got your back."]
            }), jsxRuntimeExports.jsx("a", {
                href: "https://chat.whatsapp.com/K8L5tBu7wB1BYbAAIhEQ1Z",
                target: "_blank",
                rel: "noopener noreferrer",
                children: jsxRuntimeExports.jsxs(Button, {
                    className: "h-14 px-8 text-lg font-normal rounded-xl bg-gradient-to-t from-[#b24e55] to-[#E3405F] hover:opacity-90 text-white",
                    children: ["Join the Community 🚀", jsxRuntimeExports.jsx("svg", {
                        className: "ml-2",
                        width: "24",
                        height: "24",
                        viewBox: "0 0 24 24",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: jsxRuntimeExports.jsx("path", {
                            d: "M5 12H19M19 12L12 5M19 12L12 19",
                            stroke: "currentColor",
                            strokeWidth: "2",
                            strokeLinecap: "round",
                            strokeLinejoin: "round"
                        })
                    })]
                })
            }), jsxRuntimeExports.jsxs("div", {
                className: "mt-12 text-center",
                children: [jsxRuntimeExports.jsx("p", {
                    className: "text-[#4A3D55] mb-4",
                    children: "Want to learn more about job hunting?"
                }), jsxRuntimeExports.jsx(Link, {
                    to: "/blogs",
                    className: "text-[#b24e55] hover:text-[#E75A82] font-medium",
                    children: "Check out our Blog →"
                })]
            })]
        })]
    })
}
const pricingData = [{
    tier: "Free Plan",
    description: "Perfect for getting started with your job search journey.",
    price: "₹0",
    period: "",
    features: ["AI Resume Builder", "Job Search & Filters", "ATS Resume Templates", "Community Support", "Application Status Tracking"],
    imagePath: "/pricing/platinum.png",
    popular: !1,
    buttonText: "Get Started Free",
    buttonVariant: "outline"
}, {
    tier: "Premium Plan",
    description: "For active job seekers aiming for more reach and tailored applications.",
    price: "₹149",
    period: "",
    features: ["Full Access to Job Board", "Hyper-Personalized Cold Emails", "Follow-up Emails and tracker", "Access to Exclusive Job Openings", "Unlimited Job Applications", "24/7 Premium Support", "All the free features"],
    imagePath: "/pricing/gold.png",
    popular: !0,
    buttonText: "Subscribe to Premium",
    buttonVariant: "default"
}]
  , comparisonFeatures = [{
    feature: "AI Resume Builder",
    free: !0,
    premium: !0
}, {
    feature: "Job Search & Filters",
    free: !0,
    premium: !0
}, {
    feature: "ATS Resume Templates",
    free: !0,
    premium: !0
}, {
    feature: "Community Support",
    free: !0,
    premium: !0
}, {
    feature: "Application Status Tracking",
    free: !0,
    premium: !0
}, {
    feature: "Full Access to Job Board",
    free: !1,
    premium: !0
}, {
    feature: "Hyper-Personalized Cold Emails",
    free: !1,
    premium: !0
}, {
    feature: "Follow-up Emails and Tracker",
    free: !1,
    premium: !0
}, {
    feature: "Access to Exclusive Job Openings",
    free: !1,
    premium: !0
}, {
    feature: "Unlimited Job Applications",
    free: !1,
    premium: !0
}, {
    feature: "24/7 Premium Support",
    free: !1,
    premium: !0
}]
  , benefits = ["No credit card required for free plan", "Start free forever", "Cancel anytime", "Upgrade or downgrade anytime"]
  , Pricing = () => {
    const [s,e] = reactExports.useState(!1)
      , {user: i} = useAuth()
      , o = useNavigate()
      , a = reactExports.useRef(null)
      , c = reactExports.useRef(null)
      , d = useInView(a, {
        once: !0
    });
    useInView(c, {
        once: !0
    });
    const h = () => {
        i ? o("/dashboard") : e(!0)
    }
      , g = () => jsxRuntimeExports.jsxs(motion.div, {
        className: "rounded-3xl p-6 flex flex-col border-4 w-full relative bg-white border-gray-200 shadow-[0px_0px_20px_0px_rgba(0,0,0,0.1)]",
        initial: {
            opacity: 0,
            y: 30
        },
        animate: d ? {
            opacity: 1,
            y: 0
        } : {},
        transition: {
            duration: .8,
            delay: .2
        },
        children: [jsxRuntimeExports.jsx("div", {
            className: "h-24 relative flex items-center justify-center",
            children: jsxRuntimeExports.jsx("h3", {
                className: "text-2xl font-bold text-gray-800",
                children: "Plan Comparison"
            })
        }), jsxRuntimeExports.jsxs("div", {
            className: "flex-grow",
            children: [jsxRuntimeExports.jsxs("div", {
                className: "flex justify-between items-center mb-6 px-2",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "text-left flex-1",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "text-sm font-semibold text-gray-600",
                        children: "FREE PLAN"
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-lg font-bold text-gray-800",
                        children: "₹0"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "text-right flex-1",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "text-sm font-semibold text-gray-600",
                        children: "PREMIUM PLAN"
                    }), jsxRuntimeExports.jsx("div", {
                        className: "text-lg font-bold text-[#b24e55]",
                        children: "₹149"
                    })]
                })]
            }), jsxRuntimeExports.jsx("div", {
                className: "space-y-1 max-h-80 overflow-y-auto",
                children: comparisonFeatures.map( (b, _) => jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center py-2 px-3 rounded-lg hover:bg-gray-50 transition-colors",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "w-6 flex justify-center mr-3",
                        children: b.free ? jsxRuntimeExports.jsx("div", {
                            className: "w-5 h-5 rounded-full bg-green-100 flex items-center justify-center",
                            children: jsxRuntimeExports.jsx(CircleCheckBig, {
                                className: "w-3 h-3 text-green-600"
                            })
                        }) : jsxRuntimeExports.jsx("div", {
                            className: "w-5 h-5 rounded-full bg-red-100 flex items-center justify-center",
                            children: jsxRuntimeExports.jsx(X, {
                                className: "w-3 h-3 text-red-500"
                            })
                        })
                    }), jsxRuntimeExports.jsx("div", {
                        className: "flex-1 text-sm text-gray-700 font-medium",
                        children: b.feature
                    }), jsxRuntimeExports.jsx("div", {
                        className: "w-6 flex justify-center ml-3",
                        children: b.premium ? jsxRuntimeExports.jsx("div", {
                            className: "w-5 h-5 rounded-full bg-green-100 flex items-center justify-center",
                            children: jsxRuntimeExports.jsx(CircleCheckBig, {
                                className: "w-3 h-3 text-green-600"
                            })
                        }) : jsxRuntimeExports.jsx("div", {
                            className: "w-5 h-5 rounded-full bg-red-100 flex items-center justify-center",
                            children: jsxRuntimeExports.jsx(X, {
                                className: "w-3 h-3 text-red-500"
                            })
                        })
                    })]
                }, _))
            })]
        }), jsxRuntimeExports.jsx("div", {
            className: "mt-6 pt-4 border-t border-gray-200",
            children: jsxRuntimeExports.jsxs("div", {
                className: "flex justify-between items-center text-xs text-gray-500",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "w-3 h-3 rounded-full bg-green-100 flex items-center justify-center",
                        children: jsxRuntimeExports.jsx(CircleCheckBig, {
                            className: "w-2 h-2 text-green-600"
                        })
                    }), jsxRuntimeExports.jsx("span", {
                        children: "Included"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx("div", {
                        className: "w-3 h-3 rounded-full bg-red-100 flex items-center justify-center",
                        children: jsxRuntimeExports.jsx(X, {
                            className: "w-2 h-2 text-red-500"
                        })
                    }), jsxRuntimeExports.jsx("span", {
                        children: "Not included"
                    })]
                })]
            })
        })]
    });
    return jsxRuntimeExports.jsxs("div", {
        className: "min-h-screen bg-[#fff7f8]",
        children: [jsxRuntimeExports.jsx(Header, {
            openSignIn: () => e(!0)
        }), jsxRuntimeExports.jsx("section", {
            className: "py-16 px-4 bg-[#ffedee]",
            children: jsxRuntimeExports.jsxs("div", {
                className: "container mx-auto",
                children: [jsxRuntimeExports.jsxs(motion.div, {
                    className: "text-center mb-12",
                    initial: {
                        opacity: 0,
                        y: 30
                    },
                    animate: d ? {
                        opacity: 1,
                        y: 0
                    } : {},
                    transition: {
                        duration: .8
                    },
                    children: [jsxRuntimeExports.jsxs("h2", {
                        className: "text-3xl md:text-4xl font-mabry font-semibold text-[#403334] mb-6",
                        children: ["Plans to boost your ", jsxRuntimeExports.jsx("span", {
                            className: "text-[#b24e55]",
                            children: "career"
                        })]
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-lg text-[#4A3D55] max-w-2xl mx-auto",
                        children: "From free essential tools to premium AI-powered features, choose the perfect plan for your career goals."
                    })]
                }), jsxRuntimeExports.jsxs(motion.div, {
                    ref: a,
                    className: "grid md:grid-cols-3 gap-6 max-w-7xl mx-auto",
                    initial: {
                        opacity: 0,
                        y: 30
                    },
                    animate: d ? {
                        opacity: 1,
                        y: 0
                    } : {},
                    transition: {
                        duration: .8
                    },
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "rounded-3xl p-6 flex flex-col border-4 w-full relative shadow-[0px_0px_20px_0px_rgba(0,0,0,0.1)] bg-white border-[#e2e8f0] hover:border-[#f78f97] transition-colors duration-300",
                        children: [jsxRuntimeExports.jsx("div", {
                            className: "h-24 relative",
                            children: jsxRuntimeExports.jsx("div", {
                                className: "h-12 w-20 relative",
                                children: jsxRuntimeExports.jsx("img", {
                                    src: pricingData[0].imagePath,
                                    alt: `${pricingData[0].tier} tier`,
                                    className: "w-full h-full object-contain"
                                })
                            })
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "h-48 flex flex-col",
                            children: [jsxRuntimeExports.jsx("h3", {
                                className: "text-2xl font-bold mb-2 text-[#403334]",
                                children: pricingData[0].tier
                            }), jsxRuntimeExports.jsx("p", {
                                className: "mb-4 text-[#4A3D55] text-sm",
                                children: pricingData[0].description
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "mb-6",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "text-3xl font-bold text-[#403334]",
                                    children: pricingData[0].price
                                }), jsxRuntimeExports.jsx("span", {
                                    className: "text-base ml-1 text-[#4A3D55]/80",
                                    children: pricingData[0].period
                                })]
                            })]
                        }), jsxRuntimeExports.jsx("div", {
                            className: "mb-auto flex-grow",
                            children: jsxRuntimeExports.jsx("ul", {
                                className: "space-y-3",
                                children: pricingData[0].features.map(b => jsxRuntimeExports.jsxs("li", {
                                    className: "flex items-start",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "w-5 h-5 rounded-full flex items-center justify-center mr-2 mt-0.5 flex-shrink-0 bg-green-100",
                                        children: jsxRuntimeExports.jsx(CircleCheckBig, {
                                            className: "w-3 h-3 text-green-600"
                                        })
                                    }), jsxRuntimeExports.jsx("span", {
                                        className: "text-xs text-[#4A3D55]",
                                        children: b
                                    })]
                                }, b))
                            })
                        }), jsxRuntimeExports.jsx("div", {
                            className: "mt-6",
                            children: jsxRuntimeExports.jsx(Button, {
                                onClick: h,
                                className: "w-full py-3 px-4 rounded-lg font-medium bg-gradient-to-t from-[#b24e55] to-[#e4656e] text-white hover:from-[#a04449] hover:to-[#d85a63] transition-colors duration-200 text-sm",
                                children: pricingData[0].buttonText
                            })
                        })]
                    }), jsxRuntimeExports.jsx(g, {}), jsxRuntimeExports.jsxs("div", {
                        className: "rounded-3xl p-6 flex flex-col border-4 w-full relative shadow-[0px_0px_20px_0px_rgba(0,0,0,0.1)] bg-gradient-to-t from-[#b45057] to-[#e4656e] border-[#f78f97]",
                        children: [jsxRuntimeExports.jsxs("div", {
                            className: "h-24 relative",
                            children: [jsxRuntimeExports.jsx("span", {
                                className: "absolute font-semibold top-0 right-0 bg-gradient-to-t from-[#f9b6bc] to-[#fffcfd] text-[#8f5055] px-2 py-1 rounded-full text-xs",
                                children: "MOST POPULAR"
                            }), jsxRuntimeExports.jsx("div", {
                                className: "h-12 w-20 relative",
                                children: jsxRuntimeExports.jsx("img", {
                                    src: pricingData[1].imagePath,
                                    alt: `${pricingData[1].tier} tier`,
                                    className: "w-full h-full object-contain"
                                })
                            })]
                        }), jsxRuntimeExports.jsxs("div", {
                            className: "h-48 flex flex-col",
                            children: [jsxRuntimeExports.jsx("h3", {
                                className: "text-2xl font-bold mb-2 text-white drop-shadow-[0_0_15px_rgba(255,255,255,0.5)]",
                                children: pricingData[1].tier
                            }), jsxRuntimeExports.jsx("p", {
                                className: "mb-4 text-white text-sm",
                                children: pricingData[1].description
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "mb-6",
                                children: [jsxRuntimeExports.jsx("span", {
                                    className: "text-3xl font-bold text-white drop-shadow-[0_0_15px_rgba(255,255,255,0.5)]",
                                    children: pricingData[1].price
                                }), jsxRuntimeExports.jsx("span", {
                                    className: "text-base ml-1 text-white/80",
                                    children: pricingData[1].period
                                })]
                            })]
                        }), jsxRuntimeExports.jsx("div", {
                            className: "mb-auto flex-grow",
                            children: jsxRuntimeExports.jsx("ul", {
                                className: "space-y-3",
                                children: pricingData[1].features.map(b => jsxRuntimeExports.jsxs("li", {
                                    className: "flex items-start",
                                    children: [jsxRuntimeExports.jsx("div", {
                                        className: "w-5 h-5 rounded-full flex items-center justify-center mr-2 mt-0.5 flex-shrink-0 bg-white/20",
                                        children: jsxRuntimeExports.jsx(CircleCheckBig, {
                                            className: "w-3 h-3 text-white"
                                        })
                                    }), jsxRuntimeExports.jsx("span", {
                                        className: "text-xs text-white",
                                        children: b
                                    })]
                                }, b))
                            })
                        }), jsxRuntimeExports.jsx("div", {
                            className: "mt-6",
                            children: jsxRuntimeExports.jsx(CashfreePaymentButton, {
                                className: "w-full flex justify-center"
                            })
                        })]
                    })]
                })]
            })
        }), jsxRuntimeExports.jsx("section", {
            className: "py-16 px-4 bg-[#ffedee]",
            children: jsxRuntimeExports.jsxs("div", {
                className: "container mx-auto",
                children: [jsxRuntimeExports.jsxs(motion.div, {
                    className: "text-center mb-12",
                    initial: {
                        opacity: 0,
                        y: 30
                    },
                    whileInView: {
                        opacity: 1,
                        y: 0
                    },
                    viewport: {
                        once: !0
                    },
                    transition: {
                        duration: .8
                    },
                    children: [jsxRuntimeExports.jsxs("h2", {
                        className: "text-3xl md:text-4xl font-mabry font-semibold text-[#403334] mb-6",
                        children: ["Why choose ", jsxRuntimeExports.jsx("span", {
                            className: "text-[#b24e55]",
                            children: "Hirebuddy"
                        }), "?"]
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-lg text-[#4A3D55] max-w-2xl mx-auto",
                        children: "Join thousands of job seekers who have transformed their career journey with our AI-powered platform."
                    })]
                }), jsxRuntimeExports.jsx(motion.div, {
                    className: "flex flex-wrap justify-center items-center gap-6 text-sm text-[#4A3D55] mb-12",
                    initial: {
                        opacity: 0
                    },
                    whileInView: {
                        opacity: 1
                    },
                    viewport: {
                        once: !0
                    },
                    transition: {
                        duration: .8,
                        delay: .2
                    },
                    children: benefits.map( (b, _) => jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center space-x-2",
                        children: [jsxRuntimeExports.jsx(CircleCheckBig, {
                            className: "w-4 h-4 text-[#b24e55]"
                        }), jsxRuntimeExports.jsx("span", {
                            children: b
                        })]
                    }, _))
                })]
            })
        }), jsxRuntimeExports.jsx("section", {
            className: "py-20 bg-gradient-to-r from-[#b24e55] to-[#E3405F]",
            children: jsxRuntimeExports.jsx("div", {
                className: "container mx-auto px-4 text-center",
                children: jsxRuntimeExports.jsxs(motion.div, {
                    initial: {
                        opacity: 0,
                        y: 30
                    },
                    whileInView: {
                        opacity: 1,
                        y: 0
                    },
                    viewport: {
                        once: !0
                    },
                    transition: {
                        duration: .8
                    },
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-3xl md:text-4xl lg:text-5xl font-mabry font-semibold text-white mb-6",
                        children: "Ready to accelerate your career?"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-xl text-white/90 max-w-2xl mx-auto mb-8",
                        children: "Join our community and start your journey to landing your dream job today."
                    }), jsxRuntimeExports.jsx("div", {
                        className: "flex flex-col sm:flex-row gap-4 justify-center items-center",
                        children: jsxRuntimeExports.jsxs(Button, {
                            className: "bg-white text-[#b24e55] hover:bg-gray-100 font-medium px-8 py-3 rounded-xl text-sm",
                            onClick: h,
                            children: ["Get Started Free", jsxRuntimeExports.jsx(ArrowRight, {
                                className: "h-4 w-4 ml-2"
                            })]
                        })
                    })]
                })
            })
        }), jsxRuntimeExports.jsx(Footer, {}), jsxRuntimeExports.jsx(SignInPopup, {
            isOpen: s,
            onClose: () => e(!1)
        })]
    })
}
;
function PremiumTest() {
    const {user: s} = useAuth()
      , {isPremium: e, premiumData: i, loading: o, error: a, refetch: c} = usePremiumUser()
      , [d,h] = reactExports.useState(!1)
      , g = async () => {
        var _;
        if (s != null && s.email) {
            h(!0);
            try {
                await premiumService.addPremiumUser({
                    email: s.email,
                    name: ((_ = s.user_metadata) == null ? void 0 : _.full_name) || "Test User",
                    phone: "+1234567890",
                    zoom_id: "test-zoom-id",
                    designation: "Software Engineer",
                    order_id: "test-order-" + Date.now(),
                    amount: 9900
                }),
                await c()
            } catch ($) {
                console.error("Error adding premium user:", $)
            } finally {
                h(!1)
            }
        }
    }
      , b = async () => {
        if (i != null && i.id) {
            h(!0);
            try {
                await premiumService.removePremiumUser(i.id),
                await c()
            } catch (_) {
                console.error("Error removing premium user:", _)
            } finally {
                h(!1)
            }
        }
    }
    ;
    return o ? jsxRuntimeExports.jsx("div", {
        className: "container mx-auto p-6",
        children: jsxRuntimeExports.jsx("div", {
            className: "text-center",
            children: "Loading premium status..."
        })
    }) : jsxRuntimeExports.jsxs("div", {
        className: "container mx-auto p-6 space-y-6",
        children: [jsxRuntimeExports.jsxs("div", {
            className: "text-center",
            children: [jsxRuntimeExports.jsx("h1", {
                className: "text-3xl font-bold mb-2",
                children: "Premium User Test Page"
            }), jsxRuntimeExports.jsx("p", {
                className: "text-gray-600",
                children: "Test and demonstrate premium user functionality"
            })]
        }), jsxRuntimeExports.jsxs(Card, {
            children: [jsxRuntimeExports.jsx(CardHeader, {
                children: jsxRuntimeExports.jsxs(CardTitle, {
                    className: "flex items-center gap-2",
                    children: [jsxRuntimeExports.jsx(User, {
                        className: "h-5 w-5"
                    }), "Current User Status"]
                })
            }), jsxRuntimeExports.jsxs(CardContent, {
                className: "space-y-4",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between",
                    children: [jsxRuntimeExports.jsx("span", {
                        children: "Email:"
                    }), jsxRuntimeExports.jsx("span", {
                        className: "font-medium",
                        children: (s == null ? void 0 : s.email) || "Not logged in"
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center justify-between",
                    children: [jsxRuntimeExports.jsx("span", {
                        children: "Premium Status:"
                    }), jsxRuntimeExports.jsx("div", {
                        className: "flex items-center gap-2",
                        children: e ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [jsxRuntimeExports.jsx(PremiumBadge, {
                                variant: "compact"
                            }), jsxRuntimeExports.jsx("span", {
                                className: "text-green-600 font-medium",
                                children: "Premium Member"
                            })]
                        }) : jsxRuntimeExports.jsx("span", {
                            className: "text-gray-600",
                            children: "Regular User"
                        })
                    })]
                }), a && jsxRuntimeExports.jsxs("div", {
                    className: "text-red-600 text-sm",
                    children: ["Error: ", a]
                })]
            })]
        }), e && i && jsxRuntimeExports.jsxs(PremiumCard, {
            children: [jsxRuntimeExports.jsx(PremiumHeader, {
                title: "Premium Member Details",
                subtitle: "Your premium account information"
            }), jsxRuntimeExports.jsxs(CardContent, {
                className: "space-y-4",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "grid grid-cols-1 md:grid-cols-2 gap-4",
                    children: [jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-3",
                        children: [jsxRuntimeExports.jsx(User, {
                            className: "h-4 w-4 text-yellow-600"
                        }), jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "text-sm text-gray-600",
                                children: "Name"
                            }), jsxRuntimeExports.jsx("div", {
                                className: "font-medium",
                                children: i.name
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-3",
                        children: [jsxRuntimeExports.jsx(Mail, {
                            className: "h-4 w-4 text-yellow-600"
                        }), jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "text-sm text-gray-600",
                                children: "Email"
                            }), jsxRuntimeExports.jsx("div", {
                                className: "font-medium",
                                children: i.email
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-3",
                        children: [jsxRuntimeExports.jsx(Phone, {
                            className: "h-4 w-4 text-yellow-600"
                        }), jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "text-sm text-gray-600",
                                children: "Phone"
                            }), jsxRuntimeExports.jsx("div", {
                                className: "font-medium",
                                children: i.phone
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-3",
                        children: [jsxRuntimeExports.jsx(Building, {
                            className: "h-4 w-4 text-yellow-600"
                        }), jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "text-sm text-gray-600",
                                children: "Designation"
                            }), jsxRuntimeExports.jsx("div", {
                                className: "font-medium",
                                children: i.designation
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-3",
                        children: [jsxRuntimeExports.jsx(CreditCard, {
                            className: "h-4 w-4 text-yellow-600"
                        }), jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "text-sm text-gray-600",
                                children: "Order ID"
                            }), jsxRuntimeExports.jsx("div", {
                                className: "font-medium",
                                children: i.order_id
                            })]
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-3",
                        children: [jsxRuntimeExports.jsx(Crown, {
                            className: "h-4 w-4 text-yellow-600"
                        }), jsxRuntimeExports.jsxs("div", {
                            children: [jsxRuntimeExports.jsx("div", {
                                className: "text-sm text-gray-600",
                                children: "Amount Paid"
                            }), jsxRuntimeExports.jsxs("div", {
                                className: "font-medium",
                                children: ["$", (i.amount / 100).toFixed(2)]
                            })]
                        })]
                    })]
                }), jsxRuntimeExports.jsxs("div", {
                    className: "text-sm text-gray-600",
                    children: ["Member since: ", new Date(i.created_at).toLocaleDateString()]
                })]
            })]
        }), jsxRuntimeExports.jsxs(Card, {
            children: [jsxRuntimeExports.jsx(CardHeader, {
                children: jsxRuntimeExports.jsx(CardTitle, {
                    children: "Test Actions"
                })
            }), jsxRuntimeExports.jsxs(CardContent, {
                className: "space-y-4",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "flex flex-wrap gap-4",
                    children: [e ? jsxRuntimeExports.jsx(Button, {
                        onClick: b,
                        disabled: d,
                        variant: "destructive",
                        children: d ? "Removing..." : "Remove Premium Status"
                    }) : jsxRuntimeExports.jsx(Button, {
                        onClick: g,
                        disabled: d || !(s != null && s.email),
                        className: "bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700",
                        children: d ? "Adding..." : "Add Premium Status"
                    }), jsxRuntimeExports.jsx(Button, {
                        onClick: () => c(),
                        variant: "outline",
                        children: "Refresh Status"
                    })]
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-sm text-gray-600",
                    children: s != null && s.email ? "Use the buttons above to test adding/removing premium status" : "Please log in to test premium functionality"
                })]
            })]
        }), jsxRuntimeExports.jsxs(Card, {
            children: [jsxRuntimeExports.jsx(CardHeader, {
                children: jsxRuntimeExports.jsx(CardTitle, {
                    children: "Premium Features Demo"
                })
            }), jsxRuntimeExports.jsxs(CardContent, {
                className: "space-y-4",
                children: [jsxRuntimeExports.jsxs("div", {
                    className: "grid grid-cols-1 md:grid-cols-3 gap-4",
                    children: [jsxRuntimeExports.jsx(PremiumBadge, {}), jsxRuntimeExports.jsx(PremiumBadge, {
                        variant: "compact"
                    }), jsxRuntimeExports.jsx(PremiumBadge, {
                        variant: "icon-only"
                    })]
                }), jsxRuntimeExports.jsx("div", {
                    className: "text-sm text-gray-600",
                    children: "These are the premium badge components that appear throughout the dashboard when a user has premium status."
                })]
            })]
        })]
    })
}
const CancellationRefund = () => jsxRuntimeExports.jsx("div", {
    className: "min-h-screen bg-gray-50 py-12",
    children: jsxRuntimeExports.jsx("div", {
        className: "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8",
        children: jsxRuntimeExports.jsxs("div", {
            className: "bg-white rounded-lg shadow-lg p-8",
            children: [jsxRuntimeExports.jsx("h1", {
                className: "text-3xl font-bold text-gray-900 mb-8",
                children: "Cancellation and Refund"
            }), jsxRuntimeExports.jsx("div", {
                className: "space-y-6",
                children: jsxRuntimeExports.jsx("p", {
                    className: "text-gray-700 text-lg",
                    children: "No cancellations & Refunds are entertained"
                })
            })]
        })
    })
})
  , ShippingDelivery = () => jsxRuntimeExports.jsx("div", {
    className: "min-h-screen bg-gray-50 py-12",
    children: jsxRuntimeExports.jsx("div", {
        className: "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8",
        children: jsxRuntimeExports.jsxs("div", {
            className: "bg-white rounded-lg shadow-lg p-8",
            children: [jsxRuntimeExports.jsx("h1", {
                className: "text-3xl font-bold text-gray-900 mb-8",
                children: "Shipping and Delivery"
            }), jsxRuntimeExports.jsx("div", {
                className: "space-y-6",
                children: jsxRuntimeExports.jsx("p", {
                    className: "text-gray-700 text-lg",
                    children: "Shipping is not applicable for business."
                })
            })]
        })
    })
})
  , ContactUs = () => jsxRuntimeExports.jsx("div", {
    className: "min-h-screen bg-gray-50 py-12",
    children: jsxRuntimeExports.jsx("div", {
        className: "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8",
        children: jsxRuntimeExports.jsxs("div", {
            className: "bg-white rounded-lg shadow-lg p-8",
            children: [jsxRuntimeExports.jsx("h1", {
                className: "text-3xl font-bold text-gray-900 mb-8",
                children: "Contact Us"
            }), jsxRuntimeExports.jsxs("div", {
                className: "space-y-6",
                children: [jsxRuntimeExports.jsx("p", {
                    className: "text-gray-600 mb-6",
                    children: "Last updated on Jul 11 2025"
                }), jsxRuntimeExports.jsx("p", {
                    className: "text-gray-700 mb-6",
                    children: "You may contact us using the information below:"
                }), jsxRuntimeExports.jsxs("div", {
                    className: "space-y-4",
                    children: [jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("span", {
                            className: "font-semibold text-gray-900",
                            children: "Merchant Legal entity name:"
                        }), jsxRuntimeExports.jsx("span", {
                            className: "text-gray-700 ml-2",
                            children: "NISHANT SHARMA"
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("span", {
                            className: "font-semibold text-gray-900",
                            children: "Registered Address:"
                        }), jsxRuntimeExports.jsx("span", {
                            className: "text-gray-700 ml-2",
                            children: "Tower 2, Apartment 404 M3M Merlin Golf Course Road Extn., Sector 67, Gurugram"
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("span", {
                            className: "font-semibold text-gray-900",
                            children: "Telephone No:"
                        }), jsxRuntimeExports.jsx("span", {
                            className: "text-gray-700 ml-2",
                            children: "7814695677"
                        })]
                    }), jsxRuntimeExports.jsxs("div", {
                        children: [jsxRuntimeExports.jsx("span", {
                            className: "font-semibold text-gray-900",
                            children: "E-Mail ID:"
                        }), jsxRuntimeExports.jsx("span", {
                            className: "text-gray-700 ml-2",
                            children: "sharmanishant9119@gmail.com"
                        })]
                    })]
                })]
            })]
        })
    })
})
  , PrivacyPolicy = () => jsxRuntimeExports.jsx("div", {
    className: "min-h-screen bg-gray-50 py-12",
    children: jsxRuntimeExports.jsx("div", {
        className: "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8",
        children: jsxRuntimeExports.jsxs("div", {
            className: "bg-white rounded-lg shadow-lg p-8",
            children: [jsxRuntimeExports.jsx("h1", {
                className: "text-3xl font-bold text-gray-900 mb-8",
                children: "Privacy Policy"
            }), jsxRuntimeExports.jsxs("div", {
                className: "prose prose-lg max-w-none",
                children: [jsxRuntimeExports.jsxs("p", {
                    className: "text-gray-600 mb-6",
                    children: [jsxRuntimeExports.jsx("strong", {
                        children: "Last updated:"
                    }), " ", new Date().toLocaleDateString("en-US", {
                        year: "numeric",
                        month: "long",
                        day: "numeric"
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("p", {
                        className: "text-lg text-gray-800 mb-6 font-medium",
                        children: "At Hirebuddy, your privacy isn't just a feature — it's a core part of how we build."
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-700 mb-6",
                        children: "We collect certain information from you to help you find and apply to jobs faster. This includes the details you provide — like your resume, cover letters, preferences, and any other documents or inputs you share with us."
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "What We Do With Your Data"
                    }), jsxRuntimeExports.jsxs("ul", {
                        className: "list-disc list-inside text-gray-700 space-y-2",
                        children: [jsxRuntimeExports.jsx("li", {
                            children: "We use your data only to help you with your job search."
                        }), jsxRuntimeExports.jsxs("li", {
                            children: ["We do ", jsxRuntimeExports.jsx("strong", {
                                children: "not"
                            }), " sell your data."]
                        }), jsxRuntimeExports.jsxs("li", {
                            children: ["We do ", jsxRuntimeExports.jsx("strong", {
                                children: "not"
                            }), " share your data with anyone unless ", jsxRuntimeExports.jsx("strong", {
                                children: "you explicitly choose to"
                            }), ", for example when applying to a job or using the auto-apply feature."]
                        })]
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "About Auto-Apply"
                    }), jsxRuntimeExports.jsxs("p", {
                        className: "text-gray-700 mb-4",
                        children: ["Auto-apply only works for job listings and platforms ", jsxRuntimeExports.jsx("strong", {
                            children: "you opt into"
                        }), ". Your information is never sent anywhere automatically or without your clear permission. You are always in control of where your applications go."]
                    }), jsxRuntimeExports.jsxs("p", {
                        className: "text-gray-700 mb-4",
                        children: ["As part of our auto-apply and outreach process, we may request ", jsxRuntimeExports.jsx("strong", {
                            children: "access to your email (such as Gmail)"
                        }), ". This allows us to send cold emails to recruiters or companies on your behalf — directly from ", jsxRuntimeExports.jsx("strong", {
                            children: "your"
                        }), " email address, so it looks personal and professional."]
                    }), jsxRuntimeExports.jsxs("div", {
                        className: "bg-blue-50 p-6 rounded-lg mb-6",
                        children: [jsxRuntimeExports.jsx("h3", {
                            className: "text-lg font-semibold text-blue-900 mb-3",
                            children: "Here's what that means:"
                        }), jsxRuntimeExports.jsxs("ul", {
                            className: "list-disc list-inside text-blue-800 space-y-2",
                            children: [jsxRuntimeExports.jsxs("li", {
                                children: ["We ", jsxRuntimeExports.jsx("strong", {
                                    children: "do not"
                                }), " get access to your email password."]
                            }), jsxRuntimeExports.jsxs("li", {
                                children: ["We ", jsxRuntimeExports.jsx("strong", {
                                    children: "cannot"
                                }), " read your inbox or browse your personal emails."]
                            }), jsxRuntimeExports.jsxs("li", {
                                children: ["We ", jsxRuntimeExports.jsx("strong", {
                                    children: "do not"
                                }), " access your Google Drive, calendar, contacts, or any other Google services."]
                            }), jsxRuntimeExports.jsxs("li", {
                                children: ["We only use this access to ", jsxRuntimeExports.jsx("strong", {
                                    children: "send and track job-related emails"
                                }), " that you approve."]
                            })]
                        })]
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-700 mb-4",
                        children: "You can revoke this access at any time from your Google account settings."
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-700 mb-4",
                        children: "We understand how sensitive this permission is, and we're committed to using it transparently and securely. Your trust matters to us."
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "How We Keep Your Data Safe"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-700 mb-4",
                        children: "We're committed to protecting your data using industry-standard security measures, and we continuously work to keep your information safe. While no system is ever completely immune to risks, we've built Hirebuddy with your privacy as a top priority. By using the platform, you acknowledge this and agree to our terms."
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "Your Consent"
                    }), jsxRuntimeExports.jsxs("p", {
                        className: "text-gray-700 mb-4",
                        children: ["By using Hirebuddy, you agree to this Privacy Policy and give us permission to use your data ", jsxRuntimeExports.jsx("strong", {
                            children: "only"
                        }), " for the purposes mentioned above."]
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-700 mb-4",
                        children: "If you're using Hirebuddy from a region that requires explicit consent for data usage (like the EU or California), your continued use of the platform will be considered your consent to these practices, unless you notify us otherwise."
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "Information We Collect"
                    }), jsxRuntimeExports.jsx("h3", {
                        className: "text-xl font-semibold text-gray-800 mb-3",
                        children: "Personal Information"
                    }), jsxRuntimeExports.jsxs("ul", {
                        className: "list-disc list-inside text-gray-700 mb-4 space-y-2",
                        children: [jsxRuntimeExports.jsx("li", {
                            children: "Name, email address, and contact information"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Resume, cover letters, and professional documents"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Job preferences and career goals"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Payment information for premium services"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Communication preferences and settings"
                        })]
                    }), jsxRuntimeExports.jsx("h3", {
                        className: "text-xl font-semibold text-gray-800 mb-3",
                        children: "Usage Information"
                    }), jsxRuntimeExports.jsxs("ul", {
                        className: "list-disc list-inside text-gray-700 mb-4 space-y-2",
                        children: [jsxRuntimeExports.jsx("li", {
                            children: "How you interact with our platform"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Job searches and applications"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Feature usage and preferences"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Device and browser information"
                        })]
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "Data Sharing and Third Parties"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-700 mb-4",
                        children: "We work with trusted service providers to operate our platform:"
                    }), jsxRuntimeExports.jsxs("ul", {
                        className: "list-disc list-inside text-gray-700 mb-4 space-y-2",
                        children: [jsxRuntimeExports.jsx("li", {
                            children: "Payment processors for subscription services"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Email service providers for platform communications"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Analytics providers to improve our service"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Security providers to protect your data"
                        })]
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-700 mb-4",
                        children: "These providers are contractually required to protect your data and use it only for the services they provide to us."
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "Your Rights"
                    }), jsxRuntimeExports.jsxs("ul", {
                        className: "list-disc list-inside text-gray-700 space-y-2",
                        children: [jsxRuntimeExports.jsx("li", {
                            children: "Access your personal information"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Update or correct your data"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Delete your account and data"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Withdraw consent for data processing"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Opt out of marketing communications"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Download your data in a portable format"
                        })]
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "Want Your Data Removed?"
                    }), jsxRuntimeExports.jsxs("p", {
                        className: "text-gray-700 mb-4",
                        children: ["If you ever want your data deleted or have questions, just reach out to us at ", jsxRuntimeExports.jsx("strong", {
                            children: "sharmanishant9119@gmail.com"
                        })]
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-700 mb-4",
                        children: "We'll get it sorted."
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "Changes to This Policy"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-700 mb-4",
                        children: 'We may update this Privacy Policy from time to time. We will notify you of any material changes by posting the new policy on our website and updating the "Last updated" date.'
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "Contact Us"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-700 mb-4",
                        children: "If you have any questions about this Privacy Policy, please contact us:"
                    }), jsxRuntimeExports.jsx("div", {
                        className: "bg-gray-50 p-4 rounded-lg",
                        children: jsxRuntimeExports.jsxs("p", {
                            className: "text-gray-700",
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Email:"
                            }), " sharmanishant9119@gmail.com", jsxRuntimeExports.jsx("br", {}), jsxRuntimeExports.jsx("strong", {
                                children: "Address:"
                            }), " Tower 2, Apartment 404, M3M Merlin, Golf Course Road Extn., Sector 67, Gurugram", jsxRuntimeExports.jsx("br", {})]
                        })
                    })]
                })]
            })]
        })
    })
})
  , TermsConditions = () => jsxRuntimeExports.jsx("div", {
    className: "min-h-screen bg-gray-50 py-12",
    children: jsxRuntimeExports.jsx("div", {
        className: "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8",
        children: jsxRuntimeExports.jsxs("div", {
            className: "bg-white rounded-lg shadow-lg p-8",
            children: [jsxRuntimeExports.jsx("h1", {
                className: "text-3xl font-bold text-gray-900 mb-8",
                children: "Terms and Conditions"
            }), jsxRuntimeExports.jsxs("div", {
                className: "prose prose-lg max-w-none",
                children: [jsxRuntimeExports.jsxs("p", {
                    className: "text-gray-600 mb-6",
                    children: [jsxRuntimeExports.jsx("strong", {
                        children: "Last updated:"
                    }), " ", new Date().toLocaleDateString("en-US", {
                        year: "numeric",
                        month: "long",
                        day: "numeric"
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsxs("p", {
                        className: "text-gray-700 mb-4",
                        children: ['For the purpose of these Terms and Conditions, the term "we", "us", "our" used anywhere on this page shall mean ', jsxRuntimeExports.jsx("strong", {
                            children: "HireBuddy"
                        }), ", whose registered/operational office is:"]
                    }), jsxRuntimeExports.jsx("div", {
                        className: "bg-gray-50 p-4 rounded-lg mb-6",
                        children: jsxRuntimeExports.jsx("p", {
                            className: "text-gray-700 font-medium",
                            children: jsxRuntimeExports.jsx("strong", {
                                children: "Tower 2, Apartment 404, M3M Merlin, Golf Course Road Extn., Sector 67, Gurugram."
                            })
                        })
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-700 mb-4",
                        children: '"you", "your", "user", "visitor" shall mean any natural or legal person who is visiting our website and/or agreed to purchase from us.'
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "Your use of the website and/or purchase from us are governed by the following Terms and Conditions:"
                    }), jsxRuntimeExports.jsxs("ul", {
                        className: "list-disc list-inside text-gray-700 space-y-4",
                        children: [jsxRuntimeExports.jsx("li", {
                            children: "The content of the pages of this website is subject to change without notice."
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Neither we nor any third parties provide any warranty or guarantee as to the accuracy, timeliness, performance, completeness or suitability of the information and materials found or offered on this website for any particular purpose. You acknowledge that such information and materials may contain inaccuracies or errors and we expressly exclude liability for any such inaccuracies or errors to the fullest extent permitted by law."
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Your use of any information or materials on our website and/or product pages is entirely at your own risk, for which we shall not be liable. It shall be your own responsibility to ensure that any products, services or information available through our website and/or product pages meet your specific requirements."
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Our website contains material which is owned by or licensed to us. This material includes, but is not limited to, the design, layout, look, appearance and graphics. Reproduction is prohibited other than in accordance with the copyright notice, which forms part of these terms and conditions."
                        }), jsxRuntimeExports.jsx("li", {
                            children: "All trademarks reproduced in our website which are not the property of, or licensed to, the operator are acknowledged on the website."
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Unauthorized use of information provided by us shall give rise to a claim for damages and/or be a criminal offense."
                        }), jsxRuntimeExports.jsx("li", {
                            children: "From time to time our website may also include links to other websites. These links are provided for your convenience to provide further information."
                        }), jsxRuntimeExports.jsxs("li", {
                            children: ["You may not create a link to our website from another website or document without ", jsxRuntimeExports.jsx("strong", {
                                children: "HireBuddy"
                            }), "'s prior written consent."]
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Any dispute arising out of use of our website and/or purchase with us and/or any engagement with us is subject to the laws of India."
                        }), jsxRuntimeExports.jsx("li", {
                            children: "We shall be under no liability whatsoever in respect of any loss or damage arising directly or indirectly out of the decline of authorization for any transaction, on account of the cardholder having exceeded the preset limit mutually agreed by us with our acquiring bank from time to time."
                        })]
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "Payment and Subscription Terms"
                    }), jsxRuntimeExports.jsxs("ul", {
                        className: "list-disc list-inside text-gray-700 space-y-2",
                        children: [jsxRuntimeExports.jsx("li", {
                            children: "All payments are processed securely through our payment partners"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Subscription fees are charged in advance and are generally non-refundable"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "You may cancel your subscription at any time through your account settings"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "Cancellation will be effective at the end of your current billing period"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "We reserve the right to modify our pricing with 30 days notice"
                        })]
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "User Responsibilities"
                    }), jsxRuntimeExports.jsxs("ul", {
                        className: "list-disc list-inside text-gray-700 space-y-2",
                        children: [jsxRuntimeExports.jsx("li", {
                            children: "You must provide accurate and truthful information"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "You are responsible for maintaining the confidentiality of your account"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "You must not use our service for any unlawful purposes"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "You must not attempt to gain unauthorized access to our systems"
                        }), jsxRuntimeExports.jsx("li", {
                            children: "You must comply with all applicable laws and regulations"
                        })]
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "Service Availability"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-700 mb-4",
                        children: 'We strive to provide reliable service but cannot guarantee uninterrupted availability. The service is provided "as is" and "as available" without warranties of any kind.'
                    })]
                }), jsxRuntimeExports.jsxs("section", {
                    className: "mb-8",
                    children: [jsxRuntimeExports.jsx("h2", {
                        className: "text-2xl font-semibold text-gray-900 mb-4",
                        children: "Contact Information"
                    }), jsxRuntimeExports.jsx("p", {
                        className: "text-gray-700 mb-4",
                        children: "If you have any questions about these Terms and Conditions, please contact us:"
                    }), jsxRuntimeExports.jsx("div", {
                        className: "bg-gray-50 p-4 rounded-lg",
                        children: jsxRuntimeExports.jsxs("p", {
                            className: "text-gray-700",
                            children: [jsxRuntimeExports.jsx("strong", {
                                children: "Email:"
                            }), " sharmanishant9119@gmail.com", jsxRuntimeExports.jsx("br", {}), jsxRuntimeExports.jsx("strong", {
                                children: "Address:"
                            }), " Tower 2, Apartment 404, M3M Merlin, Golf Course Road Extn., Sector 67, Gurugram", jsxRuntimeExports.jsx("br", {})]
                        })
                    })]
                })]
            })]
        })
    })
})
  , queryClient = new QueryClient
  , ProtectedRoute = ({children: s}) => {
    const {user: e, loading: i} = useAuth();
    return getConfig().isDevelopment,
    i ? jsxRuntimeExports.jsx("div", {
        className: "flex h-screen items-center justify-center",
        children: "Loading..."
    }) : e ? jsxRuntimeExports.jsx(OnboardingWrapper, {
        children: s
    }) : jsxRuntimeExports.jsx(Navigate, {
        to: "/signin",
        replace: !0
    })
}
  , App = () => jsxRuntimeExports.jsx(QueryClientProvider, {
    client: queryClient,
    children: jsxRuntimeExports.jsx(AuthProvider, {
        children: jsxRuntimeExports.jsxs(TooltipProvider, {
            children: [jsxRuntimeExports.jsx(Toaster$1, {}), jsxRuntimeExports.jsx(Toaster, {}), jsxRuntimeExports.jsx(BrowserRouter, {
                children: jsxRuntimeExports.jsxs(Routes, {
                    children: [jsxRuntimeExports.jsx(Route, {
                        path: "/",
                        element: jsxRuntimeExports.jsx(Index, {})
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/signin",
                        element: jsxRuntimeExports.jsx(SignIn, {})
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/signup",
                        element: jsxRuntimeExports.jsx(SignUp, {})
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/dashboard",
                        element: jsxRuntimeExports.jsx(ProtectedRoute, {
                            children: jsxRuntimeExports.jsx(Dashboard, {})
                        })
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/jobs",
                        element: jsxRuntimeExports.jsx(ProtectedRoute, {
                            children: jsxRuntimeExports.jsx(Jobs, {})
                        })
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/resume-builder",
                        element: jsxRuntimeExports.jsx(ProtectedRoute, {
                            children: jsxRuntimeExports.jsx(ResumeChoice, {})
                        })
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/resume-builder-form",
                        element: jsxRuntimeExports.jsx(ProtectedRoute, {
                            children: jsxRuntimeExports.jsx(ResumeBuilder, {})
                        })
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/resume-editor",
                        element: jsxRuntimeExports.jsx(Navigate, {
                            to: "/resume-builder",
                            replace: !0
                        })
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/resume-import",
                        element: jsxRuntimeExports.jsx(ProtectedRoute, {
                            children: jsxRuntimeExports.jsx(ResumeImportPage, {})
                        })
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/cover-letter-test",
                        element: jsxRuntimeExports.jsx(ProtectedRoute, {
                            children: jsxRuntimeExports.jsx(CoverLetterTest, {})
                        })
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/email-outreach",
                        element: jsxRuntimeExports.jsx(ProtectedRoute, {
                            children: jsxRuntimeExports.jsx(EmailOutreach, {})
                        })
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/email-api-test",
                        element: jsxRuntimeExports.jsx(ProtectedRoute, {
                            children: jsxRuntimeExports.jsx(EmailAPITest, {})
                        })
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/email-conversation-test",
                        element: jsxRuntimeExports.jsx(ProtectedRoute, {
                            children: jsxRuntimeExports.jsx(EmailConversationTest, {})
                        })
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/database-test",
                        element: jsxRuntimeExports.jsx(DatabaseTest, {})
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/admin/applications",
                        element: jsxRuntimeExports.jsx(ProtectedRoute, {
                            children: jsxRuntimeExports.jsx(JobApplicationsAdmin, {})
                        })
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/auth/google/callback",
                        element: jsxRuntimeExports.jsx(GoogleCallback, {})
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/profile",
                        element: jsxRuntimeExports.jsx(ProtectedRoute, {
                            children: jsxRuntimeExports.jsx(Profile, {})
                        })
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/blogs",
                        element: jsxRuntimeExports.jsx(Blogs, {})
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/community",
                        element: jsxRuntimeExports.jsx(Community, {})
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/pricing",
                        element: jsxRuntimeExports.jsx(Pricing, {})
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/premium-test",
                        element: jsxRuntimeExports.jsx(ProtectedRoute, {
                            children: jsxRuntimeExports.jsx(PremiumTest, {})
                        })
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/privacy",
                        element: jsxRuntimeExports.jsx(PrivacyPolicy, {})
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/terms",
                        element: jsxRuntimeExports.jsx(TermsConditions, {})
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/cancellation-refund",
                        element: jsxRuntimeExports.jsx(CancellationRefund, {})
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/shipping-delivery",
                        element: jsxRuntimeExports.jsx(ShippingDelivery, {})
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "/contact",
                        element: jsxRuntimeExports.jsx(ContactUs, {})
                    }), jsxRuntimeExports.jsx(Route, {
                        path: "*",
                        element: jsxRuntimeExports.jsx(NotFound, {})
                    })]
                })
            })]
        })
    })
});
EnvironmentValidator.logEnvironmentStatus();
createRoot(document.getElementById("root")).render(jsxRuntimeExports.jsx(App, {}));
export {__vitePreload as _, commonjsGlobal as c, getDefaultExportFromCjs as g};
